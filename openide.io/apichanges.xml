<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<?xml-stylesheet type="text/xml" href="../../nbbuild/javadoctools/apichanges.xsl"?>
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../../nbbuild/javadoctools/apichanges.dtd">

<!--

INFO FOR PEOPLE ADDING CHANGES:

Check the DTD (apichanges.dtd) for details on the syntax. You do not
need to regenerate the HTML, as this is part of Javadoc generation; just
change the XML. Rough syntax of a change (several parts optional):

<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>

Also permitted elements: <package>, <branch>. <version> is API spec
version, recommended for all new changes. <compatibility> should say
if things were added/modified/deprecated/etc. and give all information
related to upgrading old code. List affected top-level classes and
link to issue numbers if applicable. See the DTD for more details.

Changes need not be in any particular order, they are sorted in various
ways by the stylesheet anyway.

Dates are assumed to mean "on the trunk". If you *also* make the same
change on a stabilization branch, use the <branch> tag to indicate this
and explain why the change was made on a branch in the <description>.

Please only change this file on the trunk! Rather: you can change it
on branches if you want, but these changes will be ignored; only the
trunk version of this file is important.

Deprecations do not count as incompatible, assuming that code using the
deprecated calls continues to see their documented behavior. But do
specify deprecation="yes" in <compatibility>.

This file is not a replacement for Javadoc: it is intended to list changes,
not describe the complete current behavior, for which ordinary documentation
is the proper place.

-->

<apichanges>

    <!-- First, a list of API names you may use: -->
<apidefs>
   <apidef name="io">I/O APIs</apidef>
   <!-- etc. -->
</apidefs>

    <!-- ACTUAL CHANGES BEGIN HERE: -->

<changes>
    <change id="automatic-request-of-io-impl">
      <api name="io"/>
      <summary> No need to require IOProvider token anymore</summary>
      <version major="1" minor="11"/>
      <date day="19" month="7" year="2006"/>
      <author login="jtulach"/>
      <compatibility addition="yes" binary="compatible" semantic="compatible" />
      <description>
        <p>If your module depends on <code>org.openide.io > 1.11</code> or higher
        there is no need to specify that it also requires an implementation of
        the API by use of <code>OpenIDE-Module-Requires: org.openide.windows.IOProvider</code>,
        this token will be requested automatically by the <code>org.openide.io</code>
        module itself.
        </p>
      </description>
      <class package="org.openide.windows" name="IOProvider"/>
      <issue number="34699" />
    </change>

    <change id="allow-to-add-actions-to-toolbar">
      <api name="io"/>
      <summary> Added API to add actions to output's toolbar</summary>
      <version major="1" minor="6"/>
      <date day="12" month="1" year="2005"/>
      <author login="mkleint"/>
      <compatibility addition="yes" binary="compatible" semantic="compatible" />
      <description>
        <p>Added an additional method <code>InputOutput getIO(String name, Action[] additionalActions)</code>
         that accepts additional array of javax.swing.Action instances. It allows to define domain-specific additional actions
         that can be performed on the content of the output.</p>
         <p>The method
should be ideally abstract but because it's uncertain how many
implementations of IOProvider are there, the method is non-abstract and in it's
default impl, delegates to the <code>InputOutput getIO(String name, boolean newIO)</code> method.
Implementors of the class are encourages to implement the new method.
        </p>
      </description>
      <class package="org.openide.windows" name="IOProvider"/>
      <issue number="43332" />
    </change>

    <change id="mark-output-listeners-as-important">
      <api name="io"/>
      <summary> Added API to mark OutputListeners a important</summary>
      <version major="1" minor="5"/>
      <date day="11" month="11" year="2004"/>
      <author login="mkleint"/>
      <compatibility addition="yes" binary="compatible" semantic="compatible" />
      <description>
        <p>Added an additional method <code>OutputWriter.println(String, OutputListener, boolean)</code>
         that accepts additional boolean parameter (is Important or not). It allows the API users to mark the
         line and it's listener as important. Such a line can be marked in different color, the output can stop there to draw user's attention etc. </p>
         <p>The method
should be ideally abstract but because it's uncertain how many
implementations are there, the method is non-abstract and in it's
default impl, delegates to the <code>OutputWriter.println(String, OutputListener)</code> method,
ignoring the boolean parameter. Implementors of the class are
encourages to implement the new method.
        </p>
      </description>
      <class package="org.openide.windows" name="OutputWriter"/>
      <issue number="48339" />
    </change>

</changes>

    <!-- Now the surrounding HTML text and document structure: -->

    <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <==============

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE openide/io/api/doc/changes/changes.xml

-->
    <head>
      <title>Change History for the Input/Output API</title>
      <link rel="stylesheet" href="prose.css" type="text/css"/>
    </head>
    <body>

<p class="overviewlink"><a href="overview-summary.html">Overview</a></p>

<h1>Introduction</h1>

<p>This document lists changes made to the <a href="@org-openide-io@/index.html">I/O API</a>.</p>

<!-- The actual lists of changes, as summaries and details: -->
      <hr/>
      <standard-changelists module-code-name="org.openide.io"/>

      <hr/><p>@FOOTER@</p>

    </body>
  </htmlcontents>

</apichanges>
