/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.

 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.diff.options;

import org.openide.util.NbBundle;
import org.openide.filesystems.FileUtil;

import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.*;
import java.io.File;

/**
 * Diff Options panel.
 *
 * @author  Maros Sandor
 */
class DiffOptionsPanel extends javax.swing.JPanel implements ChangeListener, DocumentListener {

    private boolean isChanged;
    
    /** Creates new form DiffOptionsPanel */
    public DiffOptionsPanel() {
        initComponents();
        internalDiff.addChangeListener(this);
        externalDiff.addChangeListener(this);
        ignoreWhitespace.addChangeListener(this);
        externalCommand.getDocument().addDocumentListener(this);
        refreshComponents();
    }

    private void refreshComponents() {
        ignoreWhitespace.setEnabled(internalDiff.isSelected());
        jLabel1.setEnabled(externalDiff.isSelected());
        externalCommand.setEnabled(externalDiff.isSelected());
        browseCommand.setEnabled(externalDiff.isSelected());
    }

    public JTextField getExternalCommand() {
        return externalCommand;
    }

    public JRadioButton getExternalDiff() {
        return externalDiff;
    }

    public JCheckBox getIgnoreWhitespace() {
        return ignoreWhitespace;
    }

    public JRadioButton getInternalDiff() {
        return internalDiff;
    }

    public void setChanged(boolean changed) {
        isChanged = changed;
    }

    public boolean isChanged() {
        return isChanged;
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        internalDiff = new javax.swing.JRadioButton();
        externalDiff = new javax.swing.JRadioButton();
        ignoreWhitespace = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        externalCommand = new javax.swing.JTextField();
        browseCommand = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(DiffOptionsPanel.class, "jPanel1.border.title"))); // NOI18N

        buttonGroup1.add(internalDiff);
        org.openide.awt.Mnemonics.setLocalizedText(internalDiff, org.openide.util.NbBundle.getMessage(DiffOptionsPanel.class, "jRadioButton1.text")); // NOI18N
        internalDiff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        internalDiff.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(externalDiff);
        org.openide.awt.Mnemonics.setLocalizedText(externalDiff, org.openide.util.NbBundle.getMessage(DiffOptionsPanel.class, "jRadioButton2.text")); // NOI18N
        externalDiff.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        externalDiff.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(ignoreWhitespace, org.openide.util.NbBundle.getMessage(DiffOptionsPanel.class, "jCheckBox1.text")); // NOI18N
        ignoreWhitespace.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ignoreWhitespace.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel1.setLabelFor(externalCommand);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(DiffOptionsPanel.class, "jLabel1.text")); // NOI18N

        externalCommand.setText(org.openide.util.NbBundle.getMessage(DiffOptionsPanel.class, "jTextField1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseCommand, org.openide.util.NbBundle.getMessage(DiffOptionsPanel.class, "jButton1.text")); // NOI18N
        browseCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseCommandActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(internalDiff)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(17, 17, 17)
                                .add(jLabel1)))
                        .add(27, 27, 27)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .add(externalCommand, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(browseCommand))
                            .add(ignoreWhitespace)))
                    .add(externalDiff))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(internalDiff)
                    .add(ignoreWhitespace))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(externalDiff)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(browseCommand)
                    .add(externalCommand, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(14, 14, 14)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseCommandActionPerformed
        String execPath = externalCommand.getText();
        File oldFile = FileUtil.normalizeFile(new File(execPath));
        JFileChooser fileChooser = new AccessibleJFileChooser(NbBundle.getMessage(DiffOptionsPanel.class, "ACSD_BrowseFolder"), oldFile); // NOI18N
        fileChooser.setDialogTitle(NbBundle.getMessage(DiffOptionsPanel.class, "BrowseFolder_Title")); // NOI18N
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.showDialog(this, NbBundle.getMessage(DiffOptionsPanel.class, "BrowseFolder_OK")); // NOI18N
        File f = fileChooser.getSelectedFile();
        if (f != null) {
            externalCommand.setText(f.getAbsolutePath() + " {0} {1}");
        }
    }//GEN-LAST:event_browseCommandActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseCommand;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField externalCommand;
    private javax.swing.JRadioButton externalDiff;
    private javax.swing.JCheckBox ignoreWhitespace;
    private javax.swing.JRadioButton internalDiff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    public void stateChanged(ChangeEvent e) {
        isChanged = true;
        refreshComponents();
    }

    public void insertUpdate(DocumentEvent e) {
        isChanged = true;
    }

    public void removeUpdate(DocumentEvent e) {
        isChanged = true;
    }

    public void changedUpdate(DocumentEvent e) {
        isChanged = true;
    }
}
