/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is Forte for Java, Community Edition. The Initial
 * Developer of the Original Code is Sun Microsystems, Inc. Portions
 * Copyright 1997-2000 Sun Microsystems, Inc. All Rights Reserved.
 */

package com.netbeans.developer.modules.beans;

import java.awt.Dialog;
import java.util.ResourceBundle;

import org.openide.util.Utilities;
import org.openide.util.NbBundle;
import org.openide.src.Type;
import org.openide.TopManager;
import org.openide.NotifyDescriptor;

/** Customizer for new Property Pattern
 *
 * @author Petr Hrebejk
 */
public class PropertyPatternPanel extends javax.swing.JPanel 
  implements java.awt.event.ActionListener {

  private static final ResourceBundle bundle = NbBundle.getBundle( PropertyPatternPanel.class );  

  private Dialog dialog = null;
  private boolean forInterface = false;

  private final String[] types = new String[] {
    "boolean", "char", "byte", "short", "int",
    "long", "float", "double", "String"
  };

  private final String[] modes = new String[] {
    "READ / WRITE", "READ ONLY", "WRITE ONLY"
  };

static final long serialVersionUID =4959196907494713555L;
  /** Initializes the Form */
  public PropertyPatternPanel( ) {
    initComponents ();

    
    // Customize type checkbox
    for ( int i = 0; i < types.length; i++ ) {
      typeComboBox.addItem( types[i] );
    }

    // Customize mode checkbox
    for ( int i = 0; i < modes.length; i++ ) {
      modeComboBox.addItem( modes[i] );
    }
    modeComboBox.setSelectedItem( modes[0] );

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
private void initComponents () {//GEN-BEGIN:initComponents
setLayout (new java.awt.BorderLayout ());

mainPanel = new javax.swing.JPanel ();
mainPanel.setLayout (new java.awt.GridBagLayout ());
java.awt.GridBagConstraints gridBagConstraints1;
mainPanel.setBorder (new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));

  propertyPanel = new javax.swing.JPanel ();
  propertyPanel.setLayout (new java.awt.GridBagLayout ());
  java.awt.GridBagConstraints gridBagConstraints2;
  propertyPanel.setBorder (new javax.swing.border.TitledBorder(
    new javax.swing.border.EtchedBorder(), "Property"));
  
    jLabel1 = new javax.swing.JLabel ();
    jLabel1.setText ("Name:");
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.insets = new java.awt.Insets (2, 4, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (jLabel1, gridBagConstraints2);
    
    nameTextField = new javax.swing.JTextField ();
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.gridwidth = 0;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints2.insets = new java.awt.Insets (2, 2, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (nameTextField, gridBagConstraints2);
    
    jLabel2 = new javax.swing.JLabel ();
    jLabel2.setText ("Type:");
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.insets = new java.awt.Insets (2, 4, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (jLabel2, gridBagConstraints2);
    
    typeComboBox = new javax.swing.JComboBox ();
    typeComboBox.setEditable (true);
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.gridwidth = 0;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints2.insets = new java.awt.Insets (2, 2, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (typeComboBox, gridBagConstraints2);
    
    jLabel3 = new javax.swing.JLabel ();
    jLabel3.setText ("Mode:");
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.insets = new java.awt.Insets (2, 4, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (jLabel3, gridBagConstraints2);
    
    modeComboBox = new javax.swing.JComboBox ();
    modeComboBox.addActionListener (new java.awt.event.ActionListener () {
    public void actionPerformed (java.awt.event.ActionEvent evt) {
    modeComboBoxActionPerformed (evt);
    }
    }
    );
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.gridwidth = 0;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints2.insets = new java.awt.Insets (2, 2, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (modeComboBox, gridBagConstraints2);
    
    jPanel3 = new javax.swing.JPanel ();
    jPanel3.setLayout (new java.awt.FlowLayout ());
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    propertyPanel.add (jPanel3, gridBagConstraints2);
    
    boundCheckBox = new javax.swing.JCheckBox ();
    boundCheckBox.setText ("Bound");
    boundCheckBox.addActionListener (new java.awt.event.ActionListener () {
    public void actionPerformed (java.awt.event.ActionEvent evt) {
    boundCheckBoxActionPerformed (evt);
    }
    }
    );
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.gridwidth = 0;
    gridBagConstraints2.insets = new java.awt.Insets (2, 2, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (boundCheckBox, gridBagConstraints2);
    
    jPanel4 = new javax.swing.JPanel ();
    jPanel4.setLayout (new java.awt.FlowLayout ());
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    propertyPanel.add (jPanel4, gridBagConstraints2);
    
    constrainedCheckBox = new javax.swing.JCheckBox ();
    constrainedCheckBox.setText ("Constrained");
    constrainedCheckBox.addActionListener (new java.awt.event.ActionListener () {
    public void actionPerformed (java.awt.event.ActionEvent evt) {
    constrainedCheckBoxActionPerformed (evt);
    }
    }
    );
    
    gridBagConstraints2 = new java.awt.GridBagConstraints ();
    gridBagConstraints2.gridwidth = 0;
    gridBagConstraints2.insets = new java.awt.Insets (2, 2, 2, 2);
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints2.weightx = 1.0;
    gridBagConstraints2.weighty = 1.0;
    propertyPanel.add (constrainedCheckBox, gridBagConstraints2);
    
  gridBagConstraints1 = new java.awt.GridBagConstraints ();
  gridBagConstraints1.gridwidth = 0;
  gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
  gridBagConstraints1.weightx = 1.0;
  gridBagConstraints1.weighty = 1.0;
  mainPanel.add (propertyPanel, gridBagConstraints1);
  
  optionsPanel = new javax.swing.JPanel ();
  optionsPanel.setLayout (new java.awt.GridBagLayout ());
  java.awt.GridBagConstraints gridBagConstraints3;
  optionsPanel.setBorder (new javax.swing.border.TitledBorder(
    new javax.swing.border.EtchedBorder(), "Options"));
  
    fieldCheckBox = new javax.swing.JCheckBox ();
    fieldCheckBox.setText ("Generate field");
    fieldCheckBox.addActionListener (new java.awt.event.ActionListener () {
    public void actionPerformed (java.awt.event.ActionEvent evt) {
    fieldCheckBoxActionPerformed (evt);
    }
    }
    );
    
    gridBagConstraints3 = new java.awt.GridBagConstraints ();
    gridBagConstraints3.gridwidth = 0;
    gridBagConstraints3.insets = new java.awt.Insets (2, 4, 2, 4);
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints3.weightx = 1.0;
    gridBagConstraints3.weighty = 1.0;
    optionsPanel.add (fieldCheckBox, gridBagConstraints3);
    
    returnCheckBox = new javax.swing.JCheckBox ();
    returnCheckBox.setText ("Generate return statement");
    returnCheckBox.setEnabled (false);
    
    gridBagConstraints3 = new java.awt.GridBagConstraints ();
    gridBagConstraints3.gridwidth = 0;
    gridBagConstraints3.insets = new java.awt.Insets (2, 4, 2, 4);
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints3.weightx = 1.0;
    gridBagConstraints3.weighty = 1.0;
    optionsPanel.add (returnCheckBox, gridBagConstraints3);
    
    setCheckBox = new javax.swing.JCheckBox ();
    setCheckBox.setText ("Generate set statement");
    setCheckBox.setEnabled (false);
    
    gridBagConstraints3 = new java.awt.GridBagConstraints ();
    gridBagConstraints3.gridwidth = 0;
    gridBagConstraints3.insets = new java.awt.Insets (2, 4, 2, 4);
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints3.weightx = 1.0;
    gridBagConstraints3.weighty = 1.0;
    optionsPanel.add (setCheckBox, gridBagConstraints3);
    
    supportCheckBox = new javax.swing.JCheckBox ();
    supportCheckBox.setText ("Generate property change support");
    supportCheckBox.setEnabled (false);
    
    gridBagConstraints3 = new java.awt.GridBagConstraints ();
    gridBagConstraints3.gridwidth = 0;
    gridBagConstraints3.insets = new java.awt.Insets (2, 4, 2, 4);
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints3.weightx = 1.0;
    gridBagConstraints3.weighty = 1.0;
    optionsPanel.add (supportCheckBox, gridBagConstraints3);
    
  gridBagConstraints1 = new java.awt.GridBagConstraints ();
  gridBagConstraints1.gridwidth = 0;
  gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
  gridBagConstraints1.weightx = 1.0;
  gridBagConstraints1.weighty = 1.0;
  mainPanel.add (optionsPanel, gridBagConstraints1);
  

add (mainPanel, "Center");

}//GEN-END:initComponents

  private void fieldCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCheckBoxActionPerformed
    protectControls();
  }//GEN-LAST:event_fieldCheckBoxActionPerformed

  private void constrainedCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_constrainedCheckBoxActionPerformed
    protectControls();
  }//GEN-LAST:event_constrainedCheckBoxActionPerformed

  private void boundCheckBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boundCheckBoxActionPerformed
    protectControls();
  }//GEN-LAST:event_boundCheckBoxActionPerformed

  private void modeComboBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeComboBoxActionPerformed
    protectControls();
  }//GEN-LAST:event_modeComboBoxActionPerformed


// Variables declaration - do not modify//GEN-BEGIN:variables
private javax.swing.JPanel mainPanel;
private javax.swing.JPanel propertyPanel;
private javax.swing.JLabel jLabel1;
private javax.swing.JTextField nameTextField;
private javax.swing.JLabel jLabel2;
private javax.swing.JComboBox typeComboBox;
private javax.swing.JLabel jLabel3;
private javax.swing.JComboBox modeComboBox;
private javax.swing.JPanel jPanel3;
private javax.swing.JCheckBox boundCheckBox;
private javax.swing.JPanel jPanel4;
private javax.swing.JCheckBox constrainedCheckBox;
private javax.swing.JPanel optionsPanel;
private javax.swing.JCheckBox fieldCheckBox;
private javax.swing.JCheckBox returnCheckBox;
private javax.swing.JCheckBox setCheckBox;
private javax.swing.JCheckBox supportCheckBox;
// End of variables declaration//GEN-END:variables


  class Result {
    String name;
    String type;
    int mode = PropertyPattern.READ_WRITE;
    boolean bound = false;
    boolean constrained = false;
    boolean withField = false;
    boolean withReturn = false;
    boolean withSet = false;
    boolean withSupport = false;
  }

  PropertyPatternPanel.Result getResult( ) {
    Result result = new Result();

    result.name = nameTextField.getText();
    result.type = typeComboBox.getEditor().getItem().toString();
    if ( modeComboBox.getSelectedItem().toString().equals( modes[1] ) )
      result.mode = PropertyPattern.READ_ONLY;
    else if ( modeComboBox.getSelectedItem().toString().equals( modes[2] ) )
      result.mode = PropertyPattern.WRITE_ONLY;
    else
      result.mode = PropertyPattern.READ_WRITE;
    
    if ( boundCheckBox.isSelected() )
      result.bound = true;

    if ( constrainedCheckBox.isSelected() )
      result.constrained = true;

    if ( fieldCheckBox.isSelected() )
      result.withField = true;

    if ( returnCheckBox.isSelected() )
      result.withReturn = true;

    if ( setCheckBox.isSelected() )
      result.withSet = true;

    if ( supportCheckBox.isSelected() )
      result.withSupport = true;

    return result;
  }
  
  /** This method is called when ocuures the possibilty that any
  * xontrol should be enabled or disabled.
  */
  private void protectControls() {
    Result result = getResult();
    
    
    fieldCheckBox.setEnabled( !forInterface );
    
    returnCheckBox.setEnabled( 
                        ( result.mode == PropertyPattern.READ_WRITE ||
                         result.mode == PropertyPattern.READ_ONLY ) &&
                         result.withField && !forInterface ); 

    setCheckBox.setEnabled( 
                         ( result.mode == PropertyPattern.READ_WRITE ||
                         result.mode == PropertyPattern.WRITE_ONLY ) &&
                         result.withField && !forInterface ); 
    
    supportCheckBox.setEnabled( (result.bound || result.constrained) && !forInterface );
  }
  
  
  
  void setDialog( Dialog dialog ) {
    this.dialog = dialog;
  }
  
  void setForInterface( boolean forInterface ) {
    this.forInterface = forInterface;
    protectControls();
  }

  public void actionPerformed( java.awt.event.ActionEvent e ) {
    if ( dialog != null ) {
       // System.out.println( e );
      
       if ( e.getActionCommand().equals( "OK" ) ) { 
         if ( !Utilities.isJavaIdentifier( nameTextField.getText() ) ) {
           TopManager.getDefault().notify(
              new NotifyDescriptor.Message(
                                      bundle.getString("MSG_Not_Valid_Identifier"),
                                      NotifyDescriptor.ERROR_MESSAGE) );
           nameTextField.requestFocus();
           return;
         }

         try {
          Type.parse( typeComboBox.getEditor().getItem().toString() );
         } 
         catch ( IllegalArgumentException ex ) {
           TopManager.getDefault().notify(
              new NotifyDescriptor.Message(
                                      bundle.getString("MSG_Not_Valid_Type"),
                                      NotifyDescriptor.ERROR_MESSAGE) );
           typeComboBox.requestFocus();
           return;
         } 
       }
      
      dialog.setVisible( false );
      dialog.dispose();
    }
  } 

}
