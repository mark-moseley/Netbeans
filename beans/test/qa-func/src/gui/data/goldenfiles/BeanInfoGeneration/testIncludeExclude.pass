/*
 * TestFileBeanInfo.java
 *
 * Created on
 */

import java.beans.*;

/**
 * @author
 */
public class TestFileBeanInfo extends SimpleBeanInfo {
    
    // Bean descriptor 
    /*lazy BeanDescriptor*/
    private static BeanDescriptor getBdescriptor(){
        BeanDescriptor beanDescriptor = new BeanDescriptor  ( TestFile.class , null );
        
        // Here you can add code for customizing the BeanDescriptor.
        
        return beanDescriptor;         }
    
    
    // Property identifiers 
    private static final int PROPERTY_indexProperty = 0;
    private static final int PROPERTY_nonIndexProperty = 1;

    // Property array 
    /*lazy PropertyDescriptor*/
    private static PropertyDescriptor[] getPdescriptor(){
        PropertyDescriptor[] properties = new PropertyDescriptor[2];
    
        try {
            properties[PROPERTY_indexProperty] = new IndexedPropertyDescriptor ( "indexProperty", TestFile.class, "getIndexProperty", "setIndexProperty", "getIndexProperty", "setIndexProperty" );
            properties[PROPERTY_nonIndexProperty] = new PropertyDescriptor ( "nonIndexProperty", TestFile.class, "getNonIndexProperty", "setNonIndexProperty" );
        }
        catch( IntrospectionException e) {}
        
        // Here you can add code for customizing the properties array.
        
        return properties;         }
    
    // EventSet identifiers

    // EventSet array
    /*lazy EventSetDescriptor*/
    private static EventSetDescriptor[] getEdescriptor(){
        EventSetDescriptor[] eventSets = new EventSetDescriptor[0];
        
        // Here you can add code for customizing the event sets array.
        
        return eventSets;         }
    
    // Method identifiers 

    // Method array 
    /*lazy MethodDescriptor*/
    private static MethodDescriptor[] getMdescriptor(){
        MethodDescriptor[] methods = new MethodDescriptor[0];
        
        // Here you can add code for customizing the methods array.
        
        return methods;         }
    
    
    private static final int defaultPropertyIndex = -1;
    private static final int defaultEventIndex = -1;
    
    
 
    
    // Here you can add code for customizing the Superclass BeanInfo.
    
 
    
    /**
     * Gets the bean's <code>BeanDescriptor</code>s.
     *
     * @return BeanDescriptor describing the editable
     * properties of this bean.  May return null if the
     * information should be obtained by automatic analysis.
     */
    public BeanDescriptor getBeanDescriptor() {
        return getBdescriptor();
    }
    
    /**
     * Gets the bean's <code>PropertyDescriptor</code>s.
     *
     * @return An array of PropertyDescriptors describing the editable
     * properties supported by this bean.  May return null if the
     * information should be obtained by automatic analysis.
     * <p>
     * If a property is indexed, then its entry in the result array will
     * belong to the IndexedPropertyDescriptor subclass of PropertyDescriptor.
     * A client of getPropertyDescriptors can use "instanceof" to check
     * if a given PropertyDescriptor is an IndexedPropertyDescriptor.
     */
    public PropertyDescriptor[] getPropertyDescriptors() {
        return getPdescriptor();
    }
    
    /**
     * Gets the bean's <code>EventSetDescriptor</code>s.
     *
     * @return  An array of EventSetDescriptors describing the kinds of
     * events fired by this bean.  May return null if the information
     * should be obtained by automatic analysis.
     */
    public EventSetDescriptor[] getEventSetDescriptors() {
        return getEdescriptor();
    }
    
    /**
     * Gets the bean's <code>MethodDescriptor</code>s.
     *
     * @return  An array of MethodDescriptors describing the methods
     * implemented by this bean.  May return null if the information
     * should be obtained by automatic analysis.
     */
    public MethodDescriptor[] getMethodDescriptors() {
        return getMdescriptor();
    }
    
    /**
     * A bean may have a "default" property that is the property that will
     * mostly commonly be initially chosen for update by human's who are
     * customizing the bean.
     * @return  Index of default property in the PropertyDescriptor array
     * 		returned by getPropertyDescriptors.
     * <P>	Returns -1 if there is no default property.
     */
    public int getDefaultPropertyIndex() {
        return defaultPropertyIndex;
    }
    
    /**
     * A bean may have a "default" event that is the event that will
     * mostly commonly be used by human's when using the bean.
     * @return Index of default event in the EventSetDescriptor array
     *		returned by getEventSetDescriptors.
     * <P>	Returns -1 if there is no default event.
     */
    public int getDefaultEventIndex() {
        return defaultEventIndex;
    }
}


