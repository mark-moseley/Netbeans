<?xml version="1.0"?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="module test executors and compilers" basedir="." default="all">

    <!-- =================== -->
    <!-- Setting classpaths -->
    <!-- =================== -->
    
    <target name="set_classpath">
    
        <!-- During filling classpathes remember that only <module>/test 
	     is checked out during automated test execution so <module>/src 
	     or <module>/netbeans isn't available. If you need to add something 
	     from <module>/src or <module>/netbeans to classpath, 
	     look below to "setting advanced claspathes" part of this target.
          -->            
         
        <!-- List of directories where jars will be searched. -->
        <property name="xtest.extra.jars.path" location=""/>
      
        <!-- This jars is used for compilation, execution codetests and also for
             execution ide tests (it means this classpath will be mounted in repository).
             You can also write only name of jar or zip file, not in which directory it is and 
             this file will be searched in directories specified by property xtest.extra.jars.path 
                 example: <property name="xtest.extra.jars" value="jemmy.jar;jelly.jar"/>
          -->
	<path id="compiletest.classpath">        
	    <pathelement location="../../nbbuild/netbeans/modules/extbrowser.jar"/>
	    <pathelement location="../../nbbuild/netbeans/lib/openide.jar"/>
            <pathelement location="../../nbbuild/netbeans/modules/autoload/openide-execution.jar"/>
	</path>
        <property name="xtest.extra.jars" refid="compiletest.classpath"/>

        <!-- These jars will be copied to directory ${netebans.home}/lib/ext.
	     Again you can write only name of jar or zip file, not in which directory it is and 
             this file will be searched in directories specified by property xtest.extra.jars.path 
                 example: <property name="xtest.extra.jars.ide" value="jdbc_driver1.zip;jdbcd_river2.jar"/>
          -->
        <property name="xtest.extra.jars.ide" value=""/>
  
        <!-- Here you can specify paths and jars which will be mounted to the IDE's filesystems
             Please note, these paths and jars are not used in a classpath when compiling the tests,
             they are just mounted.
                example: <property name="xtest.extra.ide.mounts" value="../work/mystuff;../work/myotherstuff"/>
        -->
  	<property name="xtest.extra.ide.mounts" value=""/>
  
        <!-- Arguments for virtual machine. Will be added into java command line for code tests
             or into IDE command line with prefix -J for ide tests.
                 example: <property name="xtest.jvmargs" value="-Xdebug"/>
          -->
        <property name="xtest.jvmargs" value=""/>
        
        <!-- Arguments which will be added into commandline of starting IDE. 
                 example: <property name="xtest.ide.commandline.suffix" value="-J-Dxtest.useclassloader=org.openidex.util"/>
          -->
        <property name="xtest.ide.commandline.suffix" value=""/>
        
    </target>
    
    <!-- ========= -->
    <!-- Compilers -->
    <!-- ========= -->
    
    <target name="default-compiler" depends="set_classpath">
       <ant dir="." antfile="${xtest.module_harness.antfile}"
             target="buildtests">
           <!-- This property contains directories to compile.
    	        These directories will be compiled separately. 
                   example: <property name="compile.srcdir" value="unit/src1;unit/src2"/>
             -->
           <property name="compile.srcdir" value="${xtest.testtype}/src"/>
           <!-- You can define files which should be excluded during compilation -->
           <property name="compile.excludes" value=""/>
       </ant>
    </target>

    <!-- ========= -->
    <!-- Executors -->
    <!-- ========= -->
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes tests inside IDE -->
    <target name="runidetest" depends="set_classpath">
        <ant dir="." antfile="${xtest.module_harness.antfile}"
             target="test">
           <property name="xtest.exectype" value="ide"/>
        </ant>
    </target>
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes standalone tests -->
    <target name="runcodetest" depends="set_classpath">
        <ant dir="." antfile="${xtest.module_harness.antfile}"
             target="test">
           <property name="xtest.exectype" value="code"/>
        </ant>
    </target>


    <!--
    ******************************************************
    ** You should not change anything after this comment,
    **    unless you really know what you do
    ******************************************************
    -->

    <!-- Default target saying this build script is not supposed to be run from 
	 command line. You shoud not modify this unless you know what you are doing.
    -->    
    <target name="all">
      <fail message="This buildfile is not intended to be directly executed. It contains executors and compilers. Use build.xml to execute tests."/>
    </target>
    
</project>