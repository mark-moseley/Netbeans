# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_TabsAndIndents=Tabs and Indents
LBL_CodeGeneration=Code Generation
LBL_Alignment=Alignment
LBL_Braces=Braces
LBL_Wrapping=Wrapping
LBL_BlankLines=Blank Lines
LBL_Spaces=Spaces
LBL_Imports=Imports

LBL_bp_SAME_LINE=Same Line
LBL_bp_NEW_LINE=New Line
LBL_bp_NEW_LINE_HALF_INDENTED=New Line Half Indented
LBL_bp_NEW_LINE_INDENTED= New Line Indented
    
LBL_bg_GENERATE=Generate
LBL_bg_LEAVE_ALONE=Leave Alone
LBL_bg_ELIMINATE=Eliminate
       
LBL_wrp_WRAP_ALWAYS=Always
LBL_wrp_WRAP_IF_LONG=If Long
LBL_wrp_WRAP_NEVER=Never

LBL_ExpandTabToSpaces=&Expand Tab to Spaces
LBL_TabSize=&Tab Size:
LBL_IndentSize=&Indentation Size:
LBL_ContinuationIndentSize=&Continuation Indentation Size:
LBL_LabelIndent=&Label Indentation\:
LBL_AbsoluteLabelIndent=&Absolute Label Indentation
LBL_IndentTopLevelClassMemberts=Indent Top Level Class &Members
LBL_AddLeadingStarInComment=Add Leading Star In Comment
LBL_RightMargin=&Right Margin:

LBL_Naming=Naming\:
LBL_PreferLongerNames=Prefer Longer Names
LBL_Prefix=Prefix
LBL_Suffix=Suffix
LBL_Field=Field\:
LBL_StaticField=Static Field\:
LBL_Parameter=Parameter\:
LBL_LocalVariable=Local Variable\:
LBL_Misc=Misc\:
LBL_QualifyFieldAccess=Qualify Field Access
LBL_UseIsForBooleanGetters=Use Is For Boolean Getters
LBL_AddOverrideAnnotation=Add Override Annotation
LBL_FinalMofier=Final Modifier\:
LBL_ParametersFinal=Make Generated Parameters Final
LBL_LocalVariablesFinal=Make Generated Local variables Final
LBL_ImportOredering=Import Ordering\:
LBL_ImportUp=Move Up
LBL_ImportDown=Move Down
LBL_blBeforePackage=Before &Package\:
LBL_blAfterPackage=After P&ackage\:
LBL_blBeforeImports=Before &Imports\:
LBL_blAfterImports=After I&mports\:
LBL_blBeforeClass=Before &Class\:
LBL_blAfterClass=After C&lass\:
LBL_blAfterClassHeader=After Class &Header\:
LBL_blBeforeFields=Before &Field\:
LBL_blAfterFields=After Fi&eld\:
LBL_blBeforeMethods=Before &Method\:
LBL_blAfterMethods=After Me&thod\:

LBL_BeforeKeywords=Before Keywords
LBL_spaceBeforeWhile="while"
LBL_spaceBeforeElse="else"
LBL_spaceBeforeCatch="catch"
LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Before Parentheses
LBL_spaceBeforeMethodDeclParen=Method Declaration
LBL_spaceBeforeMethodCallParen=Method Call
LBL_spaceBeforeIfParen="if"
LBL_spaceBeforeForParen="for"
LBL_spaceBeforeWhileParen="while"
LBL_spaceBeforeCatchParen="catch"
LBL_spaceBeforeSwitchParen="switch"
LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotation Parameters

LBL_AroundOperators=Around Operators
LBL_spaceAroundUnaryOps=Unary Operators
LBL_spaceAroundBinaryOps=Binary Operators
LBL_spaceAroundTernaryOps=Ternary Operators
LBL_spaceAroundAssignOps=Assignment Operators

LBL_BeforeLeftBraces=Before Left Braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
LBL_spaceBeforeMethodDeclLeftBrace=Method Declaration
LBL_spaceBeforeIfLeftBrace="if"
LBL_spaceBeforeElseLeftBrace="else"
LBL_spaceBeforeWhileLeftBrace="while"
LBL_spaceBeforeForLeftBrace="for"
LBL_spaceBeforeDoLeftBrace="do"
LBL_spaceBeforeSwitchLeftBrace="switch"
LBL_spaceBeforeTryLeftBrace="try"
LBL_spaceBeforeCatchLeftBrace="catch"
LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Static Initializer
LBL_spaceBeforeArrayInitLeftBrace=Array Initializer

LBL_WithinParentheses=Within Parentheses
LBL_spaceWithinParens=Parentheses
LBL_spaceWithinMethodDeclParens=Method Declaration
LBL_spaceWithinMethodCallParens=Method Call
LBL_spaceWithinIfParens="if"
LBL_spaceWithinForParens="for"
LBL_spaceWithinWhileParens="while"
LBL_spaceWithinSwitchParens="switch"
LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Type Cast
LBL_spaceWithinAnnotationParens=Annotation
LBL_spaceWithinBraces=Braces
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets

LBL_Other=Other
LBL_spaceBeforeComma=Before Comma
LBL_spaceAfterComma=After Comma
LBL_spaceBeforeSemi=Before Semicolon
LBL_spaceAfterSemi=After Semicolon
LBL_spaceBeforeColon=Before Colon
LBL_spaceAfterColon=After Colon
LBL_spaceAfterTypeCast=After Type Cast
LBL_wrp_extendsImplementsKeyword=&Extends/Implements Keyword\: 
LBL_wrp_extendsImplementsList=E&xtends/Implements List\:
LBL_wrp_methodParameters=Method &Parameters\:
LBL_wrp_throwsKeyword=&Throws Keyword\:
LBL_wrp_throwsList=Th&rows List\:
LBL_wrp_methodCallArgs=Method Call &Arguments\:
LBL_wrp_annotationArgs=Annotation Arg&uments\:
LBL_wrp_chainedMethodCalls=C&hained Method Calls\:
LBL_wrp_arrayInit=Array Initiali&zer\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement=F&or Statement\:
LBL_wrp_ifStatement=&If Statement\:
LBL_wrp_whileStatement=&While Statement\:
LBL_wrp_doWhileStatement=&Do ... While Statement
LBL_wrp_assert=&Assert\:
LBL_wrp_enumConstants=Enum &Constants\:
LBL_wrp_annotations=A&nnotations\:
LBL_wrp_binaryOps=&Binary Operators\:
LBL_wrp_ternaryOps=Ternar&y Operators\:
LBL_wrp_assignOps=Assi&gnment Operators\:

LBL_br_bracesPlacement=Braces Placement
LBL_br_bracesGeneration=Braces Generation
LBL_al_newLines=New Lines
LBL_al_multilineAlignment=Multiline Alignment
LBL_bp_ClassDecl=&Class Declaration\:
LBL_bp_MethodDecl=&Method Declaration\:
LBL_bp_Other=&Other\:
LBL_bp_SpecialElseIf=&Special "else if" Treatment
LBL_bg_If="&if"\:
LBL_bg_For="&for"\:
LBL_bg_While="&while"\:
LBL_bg_DoWhile="&do ... while"\:
LBL_nl_Else="&else"
LBL_nl_While="w&hile"
LBL_nl_Catch="c&atch"
LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=after modifie&rs
LBL_am_MethodParams=Method &Parameters
LBL_am_CallArgs=Method Call Arg&uments
LBL_am_AnnotationArgs=&Annotation Arguments
LBL_an_Implements=I&mplements List
LBL_am_Throws=&Throws List
LBL_am_Paren=Parenthesize&d
LBL_am_BinaryOp=&Binary Operators
LBL_am_TernaryOp=Ter&nary Operators
LBL_am_Assign=Assi&gnment
LBL_am_For=&For
LBL_am_ArrayInit=Array Initiali&zer

LBL_IndentCasesFromSwitch=Indent Case Statements In &Switch

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
public int number = 1;\
private String text ="A";\
public ClassA() {\
}\
public void method(String text, int number) {\
} }

SAMPLE_TabsIndents=public class ClassA extends Object implements InterfaceA, InterfaceB, IntefaceC {\
public int number = 1;\
private String letters[] = new String[]{ "A", "B", "C", "D" };\
public int method(String text, int number) {\
if ( text == null ) {\
    text = "a";\
}\
else if (text.length() == 0) {\
    text = "empty";\
}\
else {\
    number++;\
}\
label:\
switch(number) {\
case 1\:\
    return method("text", 22);\
case 2\:\
    return 20;\
default\:\
    return -1;\
}\
} }

SAMPLE_AlignBraces=@Anno(paramA="a Value", paramB="bValue")\
public class ClassA extends Object implements InterfaceA, InterfaceB, IntefaceC {\
public int number = 1;\
private String letters[] = new String[]{ "A", "B", "C", "D" };\
public ClassA() {\
}\
public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {\
assert nuber + text.length() < 20 : "message";\
if ( text == null ) {\
    text = "a";\
}\
else if (text.length() == 0) {\
text = number == 2 ? "empty" : "nonempty";\
number = ((op3() + 2) * op4);\
}\
else {\
    number++;\
}\
for( int i = 1; i < 100; i++ ) {\
}\
while ( this.number < 2 && number != 3 ) {\
method( "Some text", 12, new Object());\
}\
do {\
try {\
op1().op2.op3().op4();\
}\
catch ( Throwable t ) {\
log();\
}\
finally {\
close();\
}\
} while ( this.number < 2 && number != 3 );\
}\
public enum Where {\
NORTH, EAST, SOUTH, WEST;\
}\
}

SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")\
@Deprecated \
public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {\
private static final String letters[] = new String[]{ "A", "B", "C", "D" };\
public int number = 1;\
public ClassA() {\
}\
public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {\
assert nuber + text.length() < 20 : "message";\
if (number==13 && object instanceof Runnable )\
method( "Some text", 12, new Object());\
for( int i = 1; i < 100; i++ )\
System.out.println(i);\
while ( this.number < 2 && number != 3 )\
this.number++;\
do \
method1().method2().method3();\
while ( this.number < 2 && number != 3 );\
return number > 100 ? -1 : -2;\
}\
public enum Where {\
NORTH, EAST, SOUTH, WEST;\
}\
}


SAMPLE_BlankLines=package org.netbeans.samples;\
import java.util.List;\
import java.util.Map;\
\
public class ClassA {\
public int i;\
public int j;\
\
public ClassA() {\
}\
public void methodA() {\
}\
public void methodB() {\
}\
public class innerClass {\
}\
public static interface innerInterface {\
}\
}

SAMPLE_Spaces=@Anno(paramA="a Value", paramB="bValue")\
public class ClassA {\
public int number = 1;\
private String text ="A";\
static float[] floats = new float[3];\
protected double[] doubles = new double[]{3.67,40,2e-30};\
\
static {\
    floats[0]=12.6f;\
}\
\
public ClassA() {\
}\
public int method(String text, int number) {\
if (number==13) {\
return (int)System.currentTimeMillis();\
}else {\
{}\
}\
\
for( int i = 20; i < 100; i++) {\
    synchronized(this) {\
        while(i%13>5)\
            method( text + " ", number++);\
    }\
}\
\
for(float f : floats)\
    System.out.println(f);\
\
switch(number) {\
case 1\:\
    do { out( (2+3)*this.number--); } while(this.number > 6);\
    return 10;\
case 2\:\
    try {\
        toString();\
    }\
    catch ( IllegalStateException illegalStateException ) {\
        illegalStateException.printStackTrace();\
    }\
    finally {\
        return 20;\
    }\
default\:\
   return number > 100 ? -1 : -2;\
}\
} }
