/*
 * DeviceAnywhereCustomizerPanel.java
 *
 * Created on April 27, 2007, 4:34 PM
 */

package org.netbeans.modules.deployment.deviceanywhere;

import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.deployment.deviceanywhere.service.ApplicationAPIDeviceWrapper;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.MouseUtils;
import org.openide.util.NbBundle;

/**
 *
 * @author  suchys
 */
public class DeviceAnywhereCustomizerPanel extends javax.swing.JPanel {
        
    private List<ApplicationAPIDeviceWrapper> devices;
    //private 
    /**
     * Creates new form DeviceAnywhereCustomizerPanel
     */
    public DeviceAnywhereCustomizerPanel() {
        initComponents();   
        //invisible components, only value holders
        allDevices.setVisible(false);
        selectedDevice.setVisible(false);
        add(allDevices);
        add(selectedDevice);
        retriveButton.addActionListener(new DeviceListener());
    }
    
    @Override
    public void addNotify(){
        String input = allDevices.getText();      
        if (input.length() != 0){
            devicesComboBox.removeAllItems();
            devices = new ArrayList<ApplicationAPIDeviceWrapper>();
            //todo Is this good property parsing? Don't we have a better way to do it?
            StringTokenizer st = new StringTokenizer(input, ","); //NOI18N
            while(st.hasMoreElements()){
                String token = st.nextToken();
                StringTokenizer item = new StringTokenizer(token, ";"); //NOI18N
                String s = item.nextToken();
                assert s != null : "Missing token for DeviceID"; //NOI18N
                int deviceId = Integer.parseInt(s.substring(s.indexOf(":")+1)); //NOI18N
                s = item.nextToken();
                assert s != null : "Missing token for DeviceName"; //NOI18N
                String deviceName = s.substring(s.indexOf(":")+1); //NOI18N
                ApplicationAPIDeviceWrapper wrapper = new ApplicationAPIDeviceWrapper();
                wrapper.setId(deviceId);
                wrapper.setName(deviceName);
                devices.add(wrapper);
                devicesComboBox.addItem(deviceName);
            }           
        }
        if (devices == null || devices.size() == 0){
            selectedDevice.setText("-1");
            devicesComboBox.addItem(NbBundle.getMessage (DeviceAnywhereCustomizerPanel.class, "MSG_NoDevice")); //NOI18N
        } else {
            String deviceId = selectedDevice.getText();
            for (ApplicationAPIDeviceWrapper elem : devices) {
                if (deviceId.equals(String.valueOf(elem.getId()))){
                    devicesComboBox.setSelectedItem(elem.getName());
                    break;
                }
            }
            if (devicesComboBox.getSelectedIndex() == -1){
                devicesComboBox.setSelectedIndex(0);
            }
        }
        retriveButton.setEnabled(jTextFieldUser.getText().trim().length() != 0);                
        jTextFieldUser.getDocument().addDocumentListener(dl);
        devicesComboBox.addItemListener(il);
        
        super.addNotify();
    }
    
    @Override
    public void removeNotify(){
        super.removeNotify();
        jTextFieldUser.getDocument().removeDocumentListener(dl);
        devicesComboBox.removeItemListener(il);        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        allDevices = new javax.swing.JTextField();
        selectedDevice = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldUser = new javax.swing.JTextField();
        jPasswordField = new javax.swing.JPasswordField();
        jTextArea1 = new javax.swing.JTextArea();
        devicesComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        retriveButton = new javax.swing.JButton();

        allDevices.setText("jTextField1");
        allDevices.setName(DeviceAnywhereDeploymentPlugin.PROP_AVAILABLE_DEVICES);

        selectedDevice.setText("jTextField1");
        selectedDevice.setName(DeviceAnywhereDeploymentPlugin.PROP_DEVICE);

        jLabel3.setLabelFor(jTextFieldUser);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "LBL_UserName")); // NOI18N

        jLabel4.setLabelFor(jPasswordField);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "LBL_Password")); // NOI18N

        jTextFieldUser.setName(DeviceAnywhereDeploymentPlugin.PROP_USERID);

        jPasswordField.setName(DeviceAnywhereDeploymentPlugin.PROP_PASSWORD);

        jTextArea1.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "MSG_PassWarning")); // NOI18N
        jTextArea1.setWrapStyleWord(true);

        jLabel5.setLabelFor(devicesComboBox);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "LBL_Device")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(retriveButton, org.openide.util.NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "LBL_RetriveDevices")); // NOI18N
        retriveButton.setActionCommand(org.openide.util.NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "LBL_RetriveDevices")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jTextArea1)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(layout.createSequentialGroup()
                                .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(jLabel5))
                        .add(1, 1, 1)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(devicesComboBox, 0, 289, Short.MAX_VALUE)
                            .add(jPasswordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .add(jTextFieldUser, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE))
                        .add(10, 10, 10)
                        .add(retriveButton)))
                .add(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(jTextFieldUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jPasswordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(retriveButton)
                    .add(devicesComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextArea1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField allDevices;
    private javax.swing.JComboBox devicesComboBox;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    javax.swing.JPasswordField jPasswordField;
    javax.swing.JTextArea jTextArea1;
    javax.swing.JTextField jTextFieldUser;
    private javax.swing.JButton retriveButton;
    private javax.swing.JTextField selectedDevice;
    // End of variables declaration//GEN-END:variables
    

    private class DeviceListener implements ActionListener /*, DocumentListener */ {
        
        protected final JButton okButton;
        
        DeviceListener() {
        this.okButton  = new JButton (NbBundle.getMessage (DeviceAnywhereCustomizerPanel.class, "MSG_ChooseOK")); //NOI18N
            //this.okButton.getAccessibleContext().setAccessibleDescription (NbBundle.getMessage (CustomizerRun.class, "AD_ChooseMainClass_OK"));
        }
        
        // Implementation of ActionListener ------------------------------------
        
        /** Handles button events
         */
        public void actionPerformed( ActionEvent e ) {
            
            // only chooseMainClassButton can be performed
            String password = new String(jPasswordField.getPassword());
            if (password.trim().length() == 0){
                NotifyDescriptor.InputLine input = new NotifyDescriptor.InputLine(
                        NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "LBL_InsertPass"),  //NOI18N
                        NbBundle.getMessage(DeviceAnywhereCustomizerPanel.class, "TITLE_InsertPass"), //NOI18N
                        NotifyDescriptor.OK_CANCEL_OPTION, NotifyDescriptor.QUESTION_MESSAGE);
                if ( DialogDisplayer.getDefault().notify(input) == NotifyDescriptor.OK_OPTION){
                    password = input.getInputText();
                } else {
                    return;
                }
                
            }
            final DeviceChooser panel = new DeviceChooser (jTextFieldUser.getText(), password, null);
            Object[] options = new Object[] {
                okButton,
                DialogDescriptor.CANCEL_OPTION
            };
            
//            panel.setSelectedMainClass(mainClassTextField.getText());
            panel.addChangeListener (new ChangeListener () {
                public void stateChanged(ChangeEvent e) {
                    if (e.getSource () instanceof MouseEvent && MouseUtils.isDoubleClick (((MouseEvent)e.getSource ()))) {
                        // click button and finish the dialog with selected class
                        okButton.doClick ();
                    } else {
                        okButton.setEnabled (panel.getSelectedDevice() != null);
                    }
                }
            });
            okButton.setEnabled (false);
            DialogDescriptor desc = new DialogDescriptor (
                    panel,
                    NbBundle.getMessage (DeviceAnywhereCustomizerPanel.class, "MSG_ChooseDevice" ), //NOI18N
                    true,
                    options,
                    options[0],
                    DialogDescriptor.BOTTOM_ALIGN,
                    null,
                    null);
            //desc.setMessageType (DialogDescriptor.INFORMATION_MESSAGE);
            Dialog dlg = DialogDisplayer.getDefault ().createDialog (desc);
            dlg.setVisible (true);
            if (desc.getValue() == options[0]) {
                devicesComboBox.removeItemListener(il);
                devices = panel.getLockedDevices();
                devicesComboBox.removeAllItems();
                int i =0;
                StringBuffer sb = new StringBuffer();
                for (ApplicationAPIDeviceWrapper elem : devices) {
                    devicesComboBox.addItem(elem.getName());
                    sb.append("DeviceID-"); //NOI18N
                    sb.append(i);
                    sb.append(":"); //NOI18N
                    sb.append(elem.getId());
                    sb.append(";"); //NOI18N
                    sb.append("DeviceName-"); //NOI18N
                    sb.append(i);
                    sb.append(":"); //NOI18N
                    sb.append(elem.getName());                    
                    sb.append(","); //NOI18N
                    i++;
                }
                ApplicationAPIDeviceWrapper selected= panel.getSelectedDevice();
                devicesComboBox.setSelectedItem(selected.getName());
                selectedDevice.setText(String.valueOf(selected.getId()));
                allDevices.setText(sb.toString());
                devicesComboBox.addItemListener(il);
            }
            dlg.dispose();
        }
    }
    
    ItemListener il = new ItemListener() {
        public void itemStateChanged(ItemEvent e) {
            if (devices == null)
                return;
            String deviceName = (String) devicesComboBox.getSelectedItem();
            for (ApplicationAPIDeviceWrapper elem : devices) {
                assert deviceName != null : "Device name must not be null here"; //NOI18N
                if (deviceName.equals(elem.getName())){
                    selectedDevice.setText(String.valueOf(elem.getId()));
                    return;
                }
            }
            assert true : "Cache does not contain selected device!"; //NOI18N
        }
     };     
     
     DocumentListener dl = new DocumentListener() {
         public void changedUpdate(DocumentEvent e) {
             retriveButton.setEnabled(jTextFieldUser.getText().trim().length() != 0);
         }
         public void insertUpdate(DocumentEvent e) {
             changedUpdate(e);
         }
         public void removeUpdate(DocumentEvent e) {
             changedUpdate(e);
         }
     };
}
