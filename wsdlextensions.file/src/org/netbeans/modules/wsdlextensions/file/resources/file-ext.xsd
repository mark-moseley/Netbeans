<?xml version="1.0" encoding="UTF-8"?>

<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

 The Original Software is NetBeans. The Initial Developer of the Original
 Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
           xmlns:file="http://schemas.sun.com/jbi/wsdl-extensions/file/" 
           targetNamespace="http://schemas.sun.com/jbi/wsdl-extensions/file/">
	<xs:import namespace="http://schemas.xmlsoap.org/wsdl/" schemaLocation="wsdl.xsd"/>
	<xs:element name="binding" type="file:tBinding">
		<xs:annotation>
			<xs:documentation>
	      	"binding" indicates a file protocol based binding.
	      </xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="tBinding">
		<xs:complexContent>
			<xs:extension base="wsdl:tExtensibilityElement"/>
			<!-- could add more attributes to the binding -->
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="operation" type="file:tOperation"/>
	<xs:complexType name="tOperation">
		<xs:annotation>
			<xs:documentation>
	      	"operation" defines the file protocol based operation binding details.
	      </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="wsdl:tExtensibilityElement">
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="message" type="file:tFileMessage">
		<xs:annotation>
			<xs:documentation>
	      	Defines the file transport based operation binding details.
	      </xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="tFileMessage">
		<xs:complexContent>
			<xs:extension base="wsdl:tExtensibilityElement">
				<xs:attribute name="use" type="file:useTypes" use="required"/>
				<xs:attribute name="encodingStyle" type="xs:anyURI" use="optional"/>
				<xs:attribute name="fileType" type="file:fileType" use="optional">
					<xs:annotation>
						<xs:documentation>Defines the file type of the input file.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="fileName" type="xs:string" use="required">
  				    <xs:annotation>
  			                <xs:documentation>Defines the file name relative to the specified directory to read from or write to. If fileNameIsPattern is not true, this attribute specifies an actual file name. Otherwise, this attribute specifies a pattern marker used for filtering input files from the directory, or a file name format to write to the directory; The supported patterns are: 1. &lt;anyString&gt;%d&lt;anyString&gt;.&lt;anySuffix&gt; where "%d" denotes an unique number for input and an one-up sequence number for output file names; 2. &lt;anyString&gt;%u&lt;anyString&gt;.&lt;anySuffix&gt; where %u denotes a wild card match for input and an UUID for output file names. 3.&lt;anyString&gt;%t&lt;anyString&gt;.&lt;anySuffix&gt; where %t denotes an unique timestamp for both input and out file names. The expected date format is yyyymmdd-HH-mm-ss-SSS. For input file names, the -HH-mm-ss-SSS part may be omitted if unique-ness is guaranteed. 4.&lt;anyString&gt;%{&lt;seq_name&gt;}&lt;anyString&gt;.&lt;anySuffix&gt; where %{&lt;seq_name&gt;} denotes an integer number in input file name or a one up sequence number persisted in a sequence file by name &lt;seq_name&gt; if it is for output file.</xs:documentation>
  				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="fileNameIsPattern" type="xs:boolean" use="optional" default="false">
				    <xs:annotation>
					<xs:documentation>Indicates whether or not the fileName attribute designates a file name pattern.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="pollingInterval" type="xs:long" use="optional">
				    <xs:annotation>
					<xs:documentation>Defines the polling interval that File Binding Component searches for input files in the specified directory.  The polling interval is specified in milliseconds and has a default value of 1000ms. This attribute has no effect for writing.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="part" type="xs:string" use="optional">
				    <xs:annotation>
				        <xs:documentation>Defines the reference to the abstract message part in the WSDL.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="removeEOL" type="xs:boolean" use="optional" default="false">
				    <xs:annotation>
					<xs:documentation>Defines whether or not end-of-line characters should be removed before processing. If multiple records are present, this attribute defines whether or not end-of-line characters should be removed for each record. This attribute has no effect for writing.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="addEOL" type="xs:boolean" use="optional" default="false">
				    <xs:annotation>
					<xs:documentation>Defines whether or not end-of-line characters should be appended to the outbound message. If multiple records are present, this attribute defines whether or not end-of-line characters should be appended to each record. This attribute has no effect for reading.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="multipleRecordsPerFile" type="xs:boolean" use="optional" default="false">
				    <xs:annotation>
					<xs:documentation>Defines whether or not the file to read from or write to the file system contains multiple records or should be considered a single payload.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="maxBytesPerRecord" type="xs:long" use="optional">
				    <xs:annotation>
					<xs:documentation>Defines the maximum number of bytes to be read per record. If only single record is present, this attribute defines the total number of bytes to be read. This attribute has no effect for writing.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
				<xs:attribute name="recordDelimiter" type="xs:string" use="optional">
				    <xs:annotation>
					<xs:documentation>Defines the record delimiter when multiple records are present. This value of this attribute is considered only if multipleRecordsPerFile is true. If no value is specified for this attribute but maxBytesPerRecord is defined when reading a file, it is assumed that each record is of fixed length with the length being the value defined for maxBytesPerRecord; Otherwise, the default record delimiter is line feed.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
                                <xs:attribute name="archive" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>Indicate if archive is required for processed (read) message, when true, processed message is archived, otherwise, it is removed, default is 'false'.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
				<xs:attribute name="archiveDirectory" type="xs:string" use="optional">
				    <xs:annotation>
					<xs:documentation>Directory where processed (read) message will be moved to, note, the message moved here is UUID tagged to avoid file name conflict in archive area, the value can be either an absolute or relative (relative to fileDirectory of &lt;file:address&gt;) directory, when left unspecified, 'archive' (relative to fileDirectory) is assumed.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
                                <xs:attribute name="archiveDirIsRelative" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>Indicate if archiveDirectory is relative to fileDirectory in &lt;ftp:message&gt;, default is 'true'.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="protect" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>Indicate if overwrite protection is required for message write, when true, existing message will be moved to a directory before the current message is written, otherwise, existing message will be overwritten, default is 'false'.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
				<xs:attribute name="protectDirectory" type="xs:string" use="optional">
				    <xs:annotation>
					<xs:documentation>Directory where 'in the way' message will be moved to in order to avoid being overwritten by incoming message (with same file name), note, the message moved here is UUID tagged to avoid file name conflict in protect area, the value can be either an absolute or relative (relative to fileDirectory of &lt;file:address&gt;) directory, when left unspecified, 'protect' (relative to fileDirectory) is assumed.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
                                <xs:attribute name="protectDirIsRelative" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>Indicate if protectDirectory is relative to fileDirectory in &lt;ftp:message&gt;, default is 'true'.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
                                <xs:attribute name="stage" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>Indicate if staging is enabled for message write, i.e. the message is written to a staging area and moved to its destination when the complete message is written, default is 'false'.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
				<xs:attribute name="stageDirectory" type="xs:string" use="optional">
				    <xs:annotation>
					<xs:documentation>Directory for staging message write, note, the message moved here is UUID tagged to avoid being overwritten by other messages in staging area, the value can be either an absolute or relative (relative to fileDirectory of &lt;file:address&gt;) directory, when left unspecified, 'stage' (relative to fileDirectory) is assumed.</xs:documentation>
				    </xs:annotation>
				</xs:attribute>
                                <xs:attribute name="stageDirIsRelative" type="xs:boolean" use="optional">
                                    <xs:annotation>
                                        <xs:documentation>Indicate if stageDirectory is relative to fileDirectory in &lt;ftp:message&gt;, default is 'true'.</xs:documentation>
                                    </xs:annotation>
                                </xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="fileType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="text">
				<xs:annotation>
					<xs:documentation>Signifies a character based file type</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="binary">
				<xs:annotation>
					<xs:documentation>Signifies a binary data based file type</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="useTypes">
		<xs:restriction base="xs:string">
			<xs:enumeration value="literal"/>
			<xs:enumeration value="encoded"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="address" type="file:tAddress">
		<xs:annotation>
			<xs:documentation>
	      	"address" indicates a file protocol based service address.
	      </xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="tAddress">
		<xs:complexContent>
			<xs:extension base="wsdl:tExtensibilityElement">
				<xs:attribute name="fileDirectory" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>Defines the directory name where WSDL provisioner should read input files from, and where client should write files to.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="relativePath" type="xs:boolean" use="optional" default="false">
					<xs:annotation>
						<xs:documentation>Defines whether the directory is a relative path.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="pathRelativeTo" type="file:systemProperties" use="optional">
					<xs:annotation>
						<xs:documentation>Defines what the fileDirectory is relative to. The root path is a standard Java system property that can be read from runtime JVM settings.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="lockName" type="xs:string" use="optional" default="filebc.lck">
					<xs:annotation>
						<xs:documentation>Specifies the lock file name which is created under directory as in "fileDirectory", inbound readers use the lock to synchronize their concurrent access to the target directory - "fileDirectory".</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="workArea" type="xs:string" use="optional" default="filebc_tmp">
					<xs:annotation>
						<xs:documentation>Specifies the temp directory name where UUID tagged input files wait to be furhter processed - it is functioning as 'staging area' for inbound processing, and is relative to the target directory as in "fileDirectory"</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="seqName" type="xs:string" use="optional" default="filebc.seq">
					<xs:annotation>
						<xs:documentation>Specifies the file name where the current value of a persistence backed sequence number is stored, the file resides in the target directory as in "fileDirectory".</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="systemProperties">
		<xs:restriction base="xs:string">
			<xs:enumeration value="User Home"/>
			<xs:enumeration value="Current Working Dir"/>
			<xs:enumeration value="Default System Temp Dir"/>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
