/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.java.editor.codegen.ui;

import com.sun.source.tree.ClassTree;
import com.sun.source.util.TreePath;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.List;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.util.ElementFilter;
import org.netbeans.api.java.source.CompilationInfo;
import org.netbeans.api.java.source.JavaSource;
import org.netbeans.modules.java.editor.codegen.EqualsHashCodeData;
import org.netbeans.modules.java.editor.codegen.GenerateData;
import org.netbeans.modules.java.editor.codegen.ui.GenerateCodePanel.JPanelWithExplorerManager;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerManager.Provider;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Node;

/**
 *
 * @author Jan Lahoda
 */
public class EqualsHashCodePanel extends javax.swing.JPanel implements PropertyChangeListener, GeneratePanel {
    
    private JavaSource js;
    private CompilationInfo info;
    private TreePath pathToTree;
    private ClassTree clazzTree;
    private TypeElement clazz;
    
    /** Creates new form EqualsHashCodePanel */
    public EqualsHashCodePanel() {
        initComponents();

        BeanTreeView equalsView = new BeanTreeView();
        
        equalsView.setRootVisible(false);
        equalsPanel.add(equalsView, BorderLayout.CENTER);
        
        BeanTreeView hashCodeView = new BeanTreeView();
        
        hashCodeView.setRootVisible(false);
        hashCodePanel.add(hashCodeView, BorderLayout.CENTER);
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        equalsPanel = new JPanelWithExplorerManager();
        hashCodePanel = new JPanelWithExplorerManager();

        setLayout(new java.awt.GridBagLayout());

        equalsPanel.setLayout(new java.awt.BorderLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 6);
        add(equalsPanel, gridBagConstraints);

        hashCodePanel.setLayout(new java.awt.BorderLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 0);
        add(hashCodePanel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    public void initialize(JavaSource js, CompilationInfo info, TreePath pathToTree, ClassTree clazzTree, TypeElement clazz) {
        this.js = js;
        this.info = info;
        this.pathToTree = pathToTree;
        this.clazzTree = clazzTree;
        this.clazz = clazz;
        
        ExplorerManager equalsManager = ((Provider) equalsPanel).getExplorerManager();
        ExplorerManager hashCodeManager = ((Provider) hashCodePanel).getExplorerManager();
        
        equalsManager.addPropertyChangeListener(this);
        
        List<VariableElement> variables = new ArrayList<VariableElement>();
        
        for (VariableElement v : ElementFilter.fieldsIn(clazz.getEnclosedElements())) {
            if (!v.getModifiers().contains(Modifier.STATIC)) {
                variables.add(v);
            }
        }
        
        equalsManager.setRootContext(new ClassWithEnclosedNode(clazz, variables));
        hashCodeManager.setRootContext(new ClassWithEnclosedNode(clazz, variables));
    }

    public GenerateData getData() {
        ExplorerManager equalsManager = ((Provider) equalsPanel).getExplorerManager();
        ExplorerManager hashCodeManager = ((Provider) hashCodePanel).getExplorerManager();
        
        List<VariableElement> equals  = new ArrayList<VariableElement>();
        
        for (Node n : equalsManager.getSelectedNodes()) {
            VariableElement ve = n.getLookup().lookup(VariableElement.class);
            
            if (ve != null) {
                equals.add(ve);
            }
        }
        
        List<VariableElement> hashCode = new ArrayList<VariableElement>();
        
        for (Node n : hashCodeManager.getSelectedNodes()) {
            VariableElement ve = n.getLookup().lookup(VariableElement.class);
            
            if (ve != null) {
                hashCode.add(ve);
            }
        }
        
        return new EqualsHashCodeData(js, equals, hashCode, pathToTree, clazzTree);
    }

    private boolean wasHashCodeChanged;
    private boolean automaticHashCodeUpdate;
    
    public void propertyChange(PropertyChangeEvent evt) {
        ExplorerManager equalsManager = ((Provider) equalsPanel).getExplorerManager();
        ExplorerManager hashCodeManager = ((Provider) hashCodePanel).getExplorerManager();
        
        if (evt.getSource() == equalsManager && !wasHashCodeChanged) {
            automaticHashCodeUpdate = true;
            
            List<Node> toSelect = new ArrayList();
            
            for (Node n : equalsManager.getSelectedNodes()) {
                VariableElement v = n.getLookup().lookup(VariableElement.class);
                
                for (Node hashNode : hashCodeManager.getRootContext().getChildren().getNodes(true)) {
                    if (v == hashNode.getLookup().lookup(VariableElement.class)) {
                        toSelect.add(hashNode);
                    }
                }
            }
            
            try {
                hashCodeManager.setSelectedNodes(toSelect.toArray(new Node[0]));
            } catch (PropertyVetoException e) {
                ErrorManager.getDefault().notify(e);
            }
            
            automaticHashCodeUpdate = false;
        }
        
        if (evt.getSource() == hashCodeManager && !automaticHashCodeUpdate)
            wasHashCodeChanged = true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JPanel equalsPanel;
    public javax.swing.JPanel hashCodePanel;
    // End of variables declaration//GEN-END:variables
    
}
