/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.java.editor.codegen.ui;

import com.sun.source.tree.ClassTree;
import com.sun.source.tree.Tree.Kind;
import com.sun.source.util.TreePath;
import com.sun.source.util.TreeScanner;
import java.awt.Component;
import java.io.IOException;
import javax.lang.model.element.TypeElement;
import javax.swing.JPanel;
import org.netbeans.api.java.source.CancellableTask;
import org.netbeans.api.java.source.CompilationController;
import org.netbeans.api.java.source.JavaSource;
import org.netbeans.api.java.source.JavaSource.Phase;
import org.netbeans.modules.java.editor.codegen.GenerateData;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerManager.Provider;

/**
 *
 * @author Jan Lahoda
 */
public class GenerateCodePanel extends javax.swing.JPanel {

    private GeneratePanelFactory[] panels = new GeneratePanelFactory[] {
        new DelegatePanelFactory(),
        new EqualsHashCodePanelFactory(),
    };

    /* Creates new form GenerateCodePanel */
    public GenerateCodePanel() throws IOException {
        initComponents();
    }

    public void intialize(final JavaSource js, final int offset) throws IOException {
        //XXX: the elements are used outside the runUserActionTask - better solution is pending:
        js.runUserActionTask(new CancellableTask<CompilationController>() {
            public void cancel() {
            }
            
            public void run(CompilationController info) throws Exception {
                if (info.toPhase(Phase.RESOLVED).compareTo(Phase.RESOLVED) < 0)
                    return;
                
                
                TreePath clazzTree = info.getTreeUtilities().pathFor(offset);
                while(clazzTree != null) {
                    if(clazzTree.getLeaf().getKind() == Kind.CLASS)
                        break;
                    clazzTree = clazzTree.getParentPath();
                }
                
                if (clazzTree == null)
                    return;
                
                TypeElement clazz = (TypeElement) info.getTrees().getElement(clazzTree);
                
                if (clazz == null)
                    return;
                
                for (GeneratePanelFactory factory : panels) {
                    JPanel p = factory.create();
                    
                    mainPane.addTab(factory.getDisplayName(), p);
                    
                    if (p instanceof GeneratePanel) {
                        ((GeneratePanel) p).initialize(js, info, clazzTree, (ClassTree)clazzTree.getLeaf(), clazz);
                    }
                }
            }
        }, true);
    }

    private static class FindTopMostClass extends TreeScanner<Void, Boolean> {

        private ClassTree clazz;

        public Void visitClass(ClassTree node, Boolean p) {
            clazz = node;
            return null;
        }

    }

    public GenerateData getData() {
        Component panel = mainPane.getSelectedComponent();

        if (panel instanceof GeneratePanel) {
            return ((GeneratePanel) panel).getData();
        }

        return null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainPane = new javax.swing.JTabbedPane();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(mainPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(mainPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTabbedPane mainPane;
    // End of variables declaration//GEN-END:variables
    
    public static class JPanelWithExplorerManager extends JPanel implements Provider {

        private ExplorerManager manager = new ExplorerManager();

        public ExplorerManager getExplorerManager() {
            return manager;
        }
        
    }

}
