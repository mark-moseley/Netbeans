<#-- FreeMarker template (see http://freemarker.org/) -->
<#assign licenseFirst = "/*">
<#assign licensePrefix = " * ">
<#assign licenseLast = " */">
<#include "../Licenses/license-${project.license}.txt"> 

<#if package?? && package != "">
package ${package};

</#if>
import java.io.IOException;
import java.math.BigInteger;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.netbeans.saas.RestConnection;

/**
 *
 * @author ${user}
 */
public class ${name} {

    private static String apiKey;
    private static String secret;
    private static String authToken;
    private static boolean readOnly = false;
    private static final String PROP_FILE = ${name}.class.getSimpleName().toLowerCase() + ".properties";
    

    static {
        try {
            Properties props = new Properties();
            props.load(${name}.class.getResourceAsStream(PROP_FILE));
            apiKey = props.getProperty("api_key");
            secret = props.getProperty("secret");
        } catch (IOException ex) {
            Logger.getLogger(${name}.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static String getApiKey() throws IOException {
        if (apiKey == null || apiKey.length() == 0) {
            throw new IOException("Please specify your api key and secret in the " + PROP_FILE + " file.");
        }
        return apiKey;
    }

    private static String getSecret() throws IOException {
        if (secret == null || secret.length() == 0) {
            throw new IOException("Please specify your api key and secret in the " + PROP_FILE + " file.");
        }
        return secret;
    }

    public static String getAuthToken() throws IOException {
        if (authToken == null || authToken.length() == 0) {
            throw new IOException("Failed to get a valid authentication token.");
        }
        return authToken;
    }

    public static void login() throws IOException {
        if (authToken == null) {
            String frob = getFrob();
            String apiKey = getApiKey();
            String method = "flickr.auth.getToken";
            String apiSig = sign(
                    new String[][]{
                        {"method", method},
                        {"frob", frob},
                        {"api_key", apiKey},
                    });

            RestConnection conn = new RestConnection(
                    "http://api.flickr.com/services/rest/",
                    new String[][]{
                        {"method", method},
                        {"api_key", apiKey},
                        {"api_sig", apiSig},
                        {"frob", frob}
                    });
            String result = conn.get().getDataAsString();

            try {
                authToken = result.substring(result.indexOf("<token>") + 7,
                        result.indexOf("</token>"));
            } catch (Exception ex) {
                throw new IOException("Failed to get authentication token: " + result);
            }
        }
    }

    private static void logout() {
    }

    private static String getFrob() throws IOException {
        String frob = null;
        String apiKey = getApiKey();
        String method = "flickr.auth.getFrob";

        String apiSig = sign(
                new String[][]{
                    {"method", method},
                    {"api_key", apiKey}
                });

        RestConnection conn = new RestConnection(
                "http://api.flickr.com/services/rest/",
                new String[][]{
                    {"method", method},
                    {"api_key", apiKey},
                    {"api_sig", apiSig}
                });
        String result = conn.get().getDataAsString();

        try {
            frob = result.substring(result.indexOf("<frob>") + 6, result.indexOf("</frob>"));
        } catch (Exception ex) {
            throw new IOException("Failed to get frob: " + result);
        }

        String perms = (readOnly) ? "read" : "delete";
        apiSig = sign(
                new String[][]{
                    {"frob", frob},
                    {"api_key", apiKey},
                    {"perms", perms}
                });

        String loginUrl = "http://www.flickr.com/services/auth/?api_key=" + apiKey + "&frob=" + frob + "&perms=" + perms + "&api_sig=" + apiSig;

        if (JOptionPane.showInputDialog(null,
                "Please log into your Flickr account using the following URL to authorize this application and click OK after you are done:",
                "Flickr Authorization Dialog",
                JOptionPane.INFORMATION_MESSAGE,
                null,
                null,
                loginUrl) == null) {
            throw new IOException("Authorizatoin declined");
        }

        return frob;
    }

    public static String sign(String[][] params) throws IOException {
        TreeMap<String, String> map = new TreeMap<String, String>();

        for (int i = 0; i < params.length; i++) {
            String key = params[i][0];
            String value = params[i][1];

            if (value != null) {
                map.put(key, value); 
            }
        }

        String signature = getSecret();
        Set<Map.Entry<String, String>> entrySet = map.entrySet();
        for (Map.Entry<String, String> entry : entrySet) {
            signature += entry.getKey() + entry.getValue();
        }

        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] sum = md.digest(signature.getBytes("UTF-8"));
            BigInteger bigInt = new BigInteger(1, sum);

            return bigInt.toString(16);
        } catch (Exception ex) {
            throw new IOException(ex.getMessage());
        }
    }
}
