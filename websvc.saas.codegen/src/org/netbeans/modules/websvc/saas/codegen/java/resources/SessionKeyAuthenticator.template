/*
 * RefConverter.java
 *
 * Created on __DATE__, __TIME__
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package Templates.Classes;

import java.io.IOException;
import java.math.BigInteger;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.netbeans.saas.__NAME__AuthorizationFrame;
import org.netbeans.saas.RestConnection;

/**
 *
 * @author __USER__
 */
public class __NAME__ {

    private static String apiKey;
    private static String secret;
    private static String sessionKey;
    private static String sessionSecret;
    
    static {
        try {
            Properties props = new Properties();
            props.load(__NAME__.class.getResourceAsStream(
                    "profile.properties"));
            apiKey = props.getProperty("api_key");
            secret = props.getProperty("secret");
        } catch (IOException ex) {
            Logger.getLogger(__NAME__.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static String getApiKey() {
        return apiKey;
    }

    public static String getSessionKey() {
        return sessionKey;
    }

    public static void login() {
        if (sessionKey == null) {
            String token = getToken();

            if (token != null) {
                try {
                    String method = "facebook.auth.getSession";
                    String v = "1.0";
                    
                    String sig = sign(secret,
                            new String[][]{
                                {"method", method},
                                {"v", v},
                                {"api_key", apiKey},
                                {"auth_token", token}
                            });

                    RestConnection conn = new RestConnection(
                            "http://api.facebook.com/restserver.php",
                            new String[][]{
                                {"method", method},
                                {"api_key", apiKey},
                                {"sig", sig},
                                {"v", v},
                                {"auth_token", token}
                            });
                    
                    String result = conn.get();

                    sessionKey = result.substring(result.indexOf("<session_key>") + 13,
                            result.indexOf("</session_key>"));

                    sessionSecret = result.substring(result.indexOf("<secret>") + 8,
                            result.indexOf("</secret>"));
                } catch (IOException ex) {
                    Logger.getLogger(__NAME__.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    private static void logout() {
        
    }
    
    private static String getToken() {
        String token = null;
        try {
            String method = "facebook.auth.createToken";
            String v = "1.0";
            String sig = sign(secret,
                    new String[][]{
                        {"method", method},
                        {"api_key", apiKey},
                        {"v", v}
                    });

            RestConnection conn = new RestConnection(
                    "http://api.facebook.com/restserver.php",
                    new String[][]{
                        {"method", method},
                        {"api_key", apiKey},
                        {"sig", sig},
                        {"v", v}
                    });
            String result = conn.get();

            token = result.substring(result.indexOf("<auth_createToken_response"),
                    result.indexOf("</auth_createToken_response>"));
            token = token.substring(token.indexOf(">") + 1);

            String loginUrl = "http://www.facebook.com/login.php?api_key=" +
                    apiKey + "&v=" + v + "&auth_token=" + token;

            __NAME__AuthorizationFrame frame = new __NAME__AuthorizationFrame(loginUrl);
            synchronized (frame) {
                try {
                    frame.wait();
                } catch (InterruptedException ex) {
                    Logger.getLogger(__NAME__.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(__NAME__.class.getName()).log(Level.SEVERE, null, ex);
        }

        return token;
    }

    public static String sign(String[][] params) {
        return sign(sessionSecret, params);
    }

    private static String sign(String secret,
            String[][] params) {

        try {
            TreeMap<String, String> map = new TreeMap<String, String>();

            for (int i = 0; i < params.length; i++) {
                String key = params[i][0];
                String value = params[i][1];

                if (value != null) {
                    map.put(key, URLEncoder.encode(value, "UTF-8"));
                }
            }

            String signature = "";
            Set<Map.Entry<String, String>> entrySet = map.entrySet();
            for (Map.Entry<String, String> entry : entrySet) {
                signature += entry.getKey() + "=" + entry.getValue();
            }
            signature += secret;

            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] sum = md.digest(signature.getBytes("UTF-8"));
            BigInteger bigInt = new BigInteger(1, sum);

            return bigInt.toString(16);
        } catch (Exception ex) {
            Logger.getLogger(__NAME__.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }
}
