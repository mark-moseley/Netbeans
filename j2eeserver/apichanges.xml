<?xml version="1.0" encoding="UTF-8"?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun
Microsystems, Inc. All Rights Reserved.
-->
<?xml-stylesheet type="text/xml" href="../nbbuild/javadoctools/apichanges.xsl"?>
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../nbbuild/javadoctools/apichanges.dtd">

<!--

INFO FOR PEOPLE ADDING CHANGES:

Check the DTD (apichanges.dtd) for details on the syntax. You do not
need to regenerate the HTML, as this is part of Javadoc generation; just
change the XML. Rough syntax of a change (several parts optional):

<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>

Also permitted elements: <package>, <branch>. <version> is API spec
version, recommended for all new changes. <compatibility> should say
if things were added/modified/deprecated/etc. and give all information
related to upgrading old code. List affected top-level classes and
link to issue numbers if applicable. See the DTD for more details.

Changes need not be in any particular order, they are sorted in various
ways by the stylesheet anyway.

Dates are assumed to mean "on the trunk". If you *also* make the same
change on a stabilization branch, use the <branch> tag to indicate this
and explain why the change was made on a branch in the <description>.

Please only change this file on the trunk! Rather: you can change it
on branches if you want, but these changes will be ignored; only the
trunk version of this file is important.

Deprecations do not count as incompatible, assuming that code using the
deprecated calls continues to see their documented behavior. But do
specify deprecation="yes" in <compatibility>.

This file is not a replacement for Javadoc: it is intended to list changes,
not describe the complete current behavior, for which ordinary documentation
is the proper place.

-->

<apichanges>

    <!-- First, a list of API names you may use: -->
    <apidefs>
        <apidef name="j2eeserver">J2EE Server API</apidef>
        <!-- org.netbeans.modules.j2ee.deployment.plugins -->
        <apidef name="plugins">Server Integration Plugin API</apidef>
        <!-- org.netbeans.modules.j2ee.deployment.devmodules -->
        <apidef name="devmodules">J2EE Module Development API</apidef>
        <!-- org.netbeans.modules.j2ee.deployment.common -->
        <apidef name="common">J2EE Server Common API</apidef>
    </apidefs>

    <!-- ACTUAL CHANGES BEGIN HERE: -->

    <changes>
    
        <change id="StartServer-Services-for-Target">
            <api name="plugins"/>
            <summary>StartServer methods call to manage states for target server instances</summary>
            <version major="1" minor="6"/>
            <date day="10" month="1" year="2005"/>
            <author login="nnguyen"/>
            <compatibility binary="compatible" source="compatible" semantic="incompatible" addition="yes"/>
            <description>
                <p>
                    J2eeserver should be able to start target managed server instances
		    which are not identical with admin server instance.
                    Methods supportsStartTarget, isRunning, startTarget, stopTarget
                    are added as optional to StartServer abstract class plugin SPI.
                </p>
            </description>
            <class package="org.netbeans.modules.j2ee.deployment.plugins.api" name="StartServer"/>
            <issue number="53010"/>
        </change>

	<change id="J2eePlatform-Icon">
	<api name="j2eeserver"/>
	<summary>Added J2EE Platform icon</summary>
	<version major="1" minor="6"/>
	<date day="6" month="1" year="2005"/>
	<author login="abadea"/>
	<compatibility binary="incompatible" source="incompatible" semantic="compatible" addition="yes"/>
	<description>
		<p>
        Added methods for the J2EE Platform to be able to specify an icon. The new methods are
        <code>J2eePlatform.getIcon()</code> and <code>J2eePlatformImpl.getIcon()</code>.
		</p>
	</description>
	<class package="org.netbeans.modules.j2ee.deployment.devmodules.api" name="J2eePlatform"/>
	<class package="org.netbeans.modules.j2ee.deployment.plugins.api" name="J2eePlatformImpl"/>
	<issue number="52993"/>
	</change>

	<change id="J2eePlatform">
	<api name="j2eeserver"/>
	<summary>Added J2EE Platform</summary>
	<version major="1" minor="5"/>
	<date day="13" month="12" year="2004"/>
	<author login="sherold"/>
	<compatibility binary="compatible" source="compatible" semantic="incompatible" addition="yes"/>
	<description>
		<p>
		J2EE Platform extends the current j2eeserver module of description of a target environment J2EE
		applications are build against and subsequently deployed to.
		</p>
		<ul>
		<li>platform describes the target environment</li>
		<li>platform provides compilation classpath which projects should be build against</li>
		<li>platform provide sources and javadocs for classpath entries</li>
		<li>platform provide basic tool support (e.g. wscompile)</li>
		</ul>
		<p>
		Constants for the J2EE specification version added to the <code>J2eeModule</code> class.<br/>
		
		To the <code>Deployment</code> class was added method <code>getJ2eePlatform(String serverInstanceID)</code>
		which returns <code>J2eePlatform</code> instance for the given <code>serveInstanceID</code>.<br/>
		
		Added new classes: <code>J2eeLibraryTypeProvider</code>, <code>J2eePlatform</code>, 
		<code>J2eePlatformFactory</code>, <code>J2eePlatformImpl</code>.<br/>
		</p>
	</description>
	<class package="org.netbeans.modules.j2ee.deployment.common.api" name="J2eeLibraryTypeProvider"/>
	<class package="org.netbeans.modules.j2ee.deployment.devmodules.api" name="J2eePlatform"/>
	<class package="org.netbeans.modules.j2ee.deployment.devmodules.api" name="Deployment"/>
	<class package="org.netbeans.modules.j2ee.deployment.devmodules.api" name="J2eeModule"/>
	<class package="org.netbeans.modules.j2ee.deployment.plugins.api" name="J2eePlatformFactory"/>
	<class package="org.netbeans.modules.j2ee.deployment.plugins.api" name="J2eePlatformImpl"/>
	<issue number="52167"/>
	</change>

        <change id="CMP-Mapping-and-Auto-Resources.devmodules">
            <api name="devmodules"/>
            <summary>Added directory access methods</summary>
            <version major="1" minor="5"/>
            <date day="5" month="12" year="2004"/>
            <author login="nnguyen"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Added methods on <code>J2eeModuleProvider</code> for dev modules to
                    expose some its project directory structure part to
                    integration plugin.  The added methods are: <code>File
                    getEnterpriseResourceDirectory()</code> and
                    <code>FileObject[] getSourceRoots()</code>
                </p>
                <p>
                    Added methods on
                    <code>J2eeModuleProvider.ConfigSupport</code> for dev
                    modules to push configuration data to plugin or request
                    plugin to ensure resources are defined on creation of
                    EJBs.  The added methods are: <code>void
                    setCMPMappingInfo(String ejbname, OriginalCMPMapping
                    mapping)</code> and <code>void
                    ensureResourceDefinedForEjb(String ejbname, String
                    ejbtype)</code>
                </p>
                <p>
                    See Javadoc for details.
                </p>
            </description>
            <class package="org.netbeans.modules.j2ee.deployment.devmodules.spi" name="J2eeModuleProvider"/>
        </change>
        <change id="CMP-Mapping-and-Auto-Resources.common">
            <api name="common"/>
            <summary>Added SourceFileMap access methods</summary>
            <version major="1" minor="5"/>
            <date day="5" month="12" year="2004"/>
            <author login="nnguyen"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Expand usage of <code>SourceFileMap</code> by a set of methods
                    to allow plugin access source, descriptor files.  Also added
                    static lookup methods to locate the right
                    <code>SourceFileMap</code> object.
                </p>
                <p>
                    See Javadoc for details.
                </p>
            </description>
            <class package="org.netbeans.modules.j2eeserver.deployment.common.api" name="SourceFileMap"/>
        </change>
        <change id="CMP-Mapping-and-Auto-Resources.plugins">
            <api name="plugins"/>
            <summary>Added configuration support services</summary>
            <version major="1" minor="5"/>
            <date day="5" month="12" year="2004"/>
            <author login="nnguyen"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Added Integration plugin SPI <code>ConfigurationSupport</code>
                    for plugin to provide services like create CMP/CMR mapping
                    from generic mapping info acquired by devmodule
                    wizards. This SPI also allow development modules to notify
                    plugin on making sure default resources might needs to be
                    generated for new components.
                </p>
                <p>
                    See Javadoc for details.
                </p>
            </description>
            <class package="org.netbeans.modules.j2eeserver.deployment.plugins.api" name="ConfigurationSupport"/>
        </change>
        <change id="Deprecating-DeploymentPlanSplitter.getDeploymentPlanFileNames">
            <api name="plugins"/>
            <summary>Deprecates DeploymentPlanSplitter.getDeploymentPlanFileNames</summary>
            <version major="1" minor="5"/>
            <date day="20" month="12" year="2004"/>
            <author login="nnguyen"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    The reason for deprecating is that plugin SPI method 
		    <code>DeploymentPlanSplitter.getDeploymentPlanFileNames</code>
                    has become exact duplicate with layer.xml entries declaration: 
                    <code>J2EE/DeploymentPlugins/plugin-name/DeploymentFileNames</code>
                    J2EE Server Registry code has now been consolidated 
		    and is no longer depends on this method call; 
		    the require layer.xml entries are used instead.
                </p>
                <p>
                    See Javadoc for details.
                </p>
            </description>
            <class package="org.netbeans.modules.j2eeserver.deployment.plugins.api" name="DeploymentPlanSplitter"/>
        </change>
        <change id="Batched-CMPMappingInfo">
            <api name="j2eeserver"/>
            <summary>Wizard should push CMP mappings in one single call</summary>
            <version major="1" minor="5"/>
            <date day="23" month="12" year="2004"/>
            <author login="nnguyen"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                    Related CMP Beans Wizard need to push mapping info to plugin
		    in one single call.  This would improve performance and make it
                    easier for plugin code to process the relationship mappings.
                    Part of this batching change, OriginalCMPMapping now includes ejbName.
                    J2eeModuleProvider.ConfigSupport now has new method saveConfiguration()
                    to allow development module wizard to commit changes it caused to 
                    component deployment configuration.
                    OriginalMappingProvider, not used in the CMP mapping push module, 
                    is removed.
                </p>
            </description>
            <class package="org.netbeans.modules.j2ee.deployment.plugins.api" name="ConfigurationSupport"/>
            <class package="org.netbeans.modules.j2ee.deployment.common.api" name="OriginalCMPMapping"/>
            <class package="org.netbeans.modules.j2ee.deployment.devmodules.spi" name="J2eeModuleProvider"/>
            <class package="org.netbeans.modules.j2ee.deployment.devmodules.spi" name="OriginalMappingProvider"/>
         </change>
    </changes>

    <!-- Now the surrounding HTML text and document structure: -->

    <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <==============

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE j2eeserver/apichanges.xml

-->
    <head>
      <title>Change History for the J2EE Server API</title>
      <link rel="stylesheet" href="prose.css" type="text/css"/>
    </head>
    <body>

<p class="overviewlink"><a href="overview-summary.html">Overview</a></p>

<h1>Introduction</h1>

<p>This document lists changes made to the <a href="http://j2eeserver.netbeans.org/">J2EE Server API</a>.</p>

<!-- The actual lists of changes, as summaries and details: -->
      <hr/>
      <standard-changelists module-code-name="org.netbeans.modules.j2eeserver/3"/>

      <hr/><p>@FOOTER@</p>

    </body>
  </htmlcontents>

</apichanges>
