/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

{
	/** 
	* Root section.
	* This section describes subnode "Databases" in "Runtime". It is a root for
	* database explorer, handles open connections and a list of drives. Serves list
	* of supported database products (suppdbsystems). Allows to add a new connection.
	*/
	root = {
		name = Databases;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.RootNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.RootNodeInfo;
		children_ordering = {
			org.openide.loaders.DataFolder$FolderNode = 0;
			com.netbeans.enterprise.modules.db.explorer.nodes.DriverListNode = 1;
			com.netbeans.enterprise.modules.db.explorer.nodes.ConnectionNode = 2;
		};
		iconbase = "/com/netbeans/enterprise/modules/db/resources/database";
		children = (driverlist);
		properties = ();
		options = {};
		actions = (
			{
				name = "AddConnection";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddConnectionAction;
			},
			delimiter,
			{
				name = "EnableDebug";
				class = com.netbeans.enterprise.modules.db.explorer.actions.EnableDebugAction;
			},
			{
				name = "DisableDebug";
				class = com.netbeans.enterprise.modules.db.explorer.actions.DisableDebugAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
	};

	/** 
	* Driver list section.
	* This section describes subnode "Drivers" in "Database". It is a root for driver
	* list (a list of all available and registered drivers). Allows add a new driver.
	* Serves no properties (name isn't modifable).
	*/
	driverlist = {
		name = Drivers;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DriverListNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.DriverListNodeInfo;
		iconbase = "/com/netbeans/developer/impl/resources/defaultFolder";
		children = ();
		properties = ();
		options = {};
		defaultdriverlist = (
			{
				name = "Cloudscape";
				driver = "COM.cloudscape.core.JDBCDriver";
				prefix = "jdbc:cloudscape:<DB>";
			},
			{
				name = "Cloudscape RMI";
				driver = "RmiJdbc.RJDriver";
				prefix = "jdbc:rmi://<HOST>:<PORT>/jdbc:cloudscape:<DB>";
			},
			{
				name = "IBM DB2 (local)";
				driver = "COM.ibm.db2.jdbc.app.DB2Driver";
				prefix = "jdbc:db2:<DB>";
			},
			{
				name = "IBM DB2 (net)";
				driver = "COM.ibm.db2.jdbc.net.DB2Driver";
				prefix = "jdbc:db2://<HOST>:<PORT>/<DB>";
			},
			{
				name = "IDS Server";
				driver = "ids.sql.IDSDriver";
				prefix = "jdbc:ids://<HOST>:<PORT>/conn?dsn='<ODBC_DSN_NAME>'";
			},
			{
				name = "Informix Dynamic Server";
				driver = "com.informix.jdbc.IfxDriver";
				prefix = "jdbc:informix-sqli://<HOST>:<PORT>/<DB>:INFORMIXSERVER=<SERVER_NAME>";
			},
			{
				name = "InstantDB";
				driver = "jdbc.idbDriver";
				prefix = "jdbc:idb:<DB>";
			},
			{
				name = "Interbase (InterClient driver)";
				driver = "interbase.interclient.Driver";
				prefix = "jdbc:interbase://<HOST>/<DB>";
			},
			{
				name = "Hypersonic SQL (v1.1, 1.2)";
				driver = "hSql.hDriver";
				prefix = "jdbc:HypersonicSQL:<DB>";
			},
			{
				name = "Hypersonic SQL (v1.3)";
				driver = "org.hsql.jdbcDriver";
				prefix = "jdbc:HypersonicSQL:<DB>";
			},
			{
				name = "Microsoft SQL Server (JTurbo driver)";
				driver = "com.ashna.jturbo.driver.Driver";
				prefix = "jdbc:JTurbo://<HOST>:<PORT>/<DB>";
			},
			{
				name = "Microsoft SQL Server (Sprinta driver)";
				driver = "com.inet.tds.TdsDriver";
				prefix = "jdbc:inetdae:<HOST>:<PORT>?database=<DB>";
			},
			{
				name = "MySQL (MM.MySQL driver)";
				driver = "org.gjt.mm.mysql.Driver";
				prefix = "jdbc:mysql://<HOST>:<PORT>/<DB>";
			},
			{
				name = "JDBC-ODBC Bridge";
				driver = "sun.jdbc.odbc.JdbcOdbcDriver";
				prefix = "jdbc:odbc:<DB>";
			},
			{
				name = "Oracle";
				driver = "oracle.jdbc.driver.OracleDriver";
				prefix = "jdbc:oracle:oci8:@<SID>";
			},
			{
				name = "Oracle thin";
				driver = "oracle.jdbc.driver.OracleDriver";
				prefix = "jdbc:oracle:thin:@<HOST>:<PORT>:<SID>";
			},
			{
				name = "PointBase Mobile Edition";
				driver = "com.pointbase.jdbc.jdbcDriver";
				prefix = "jdbc:pointbase:<DB>";
			},
			{
				name = "PointBase Server Edition";
				driver = "com.pointbase.net.netJDBCDriver";
				prefix = "jdbc:pointbase://<HOST>[:<PORT>]/<DB>";
			},
			{
				name = "PostgreSQL";
				driver = "postgresql.Driver";
				prefix = "jdbc:postgresql://<HOST>:<PORT>/<DB>";
			},
			{
				name = "Sybase (JDBC 1.x driver)";
				driver = "com.sybase.jdbc.SybDriver";
				prefix = "jdbc:sybase:Tds:<HOST>:<PORT>";
			},
			{
				name = "Sybase (JDBC 2.0 driver)";
				driver = "com.sybase.jdbc2.jdbc.SybDriver";
				prefix = "jdbc:sybase:Tds:<HOST>:<PORT>";
			}
		);	
		actions = (
			{
				name = "AddNewDriver";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddDriverAction;
			},
			delimiter
		);
	};

	/** 
	* Driver section.
	* This section describes dynamic subnodes in "Drivers" node. Entire drivers serves name
	* and URL properties, allows to delete selected node and connect using selected driver.
	*/
	driver = {
		name = Driver;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DriverNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.DriverNodeInfo;
		creator = driverlist;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/driver";
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = url;
				name = "DriverURL";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = prefix;
				name = "DatabasePrefix";
				class = java.lang.String;
				writable = YES;	
			},
			{
				code = adaptorClass;
				name = "AdaptorClass";
				class = java.lang.String;
				writable = YES;	
			}
		);
		actions = (
			{
				name = "ConnectUsing";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ConnectUsingDriverAction;
				node = root;
			},
			{
				name = "AddNewDriver";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddDriverAction;
				node = driverlist;
			},
			delimiter,
			{
				name = "TestDriver";
				class = com.netbeans.enterprise.modules.db.explorer.actions.TestDriverAction;
				node = driver;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				node = driverlist;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveDriver";
				class = org.openide.actions.DeleteAction;
				node = driverlist;
				system = YES;
			},
		);
	};

	/** 
	* Connection section.
	* This section describes dynamic subnodes in "Databases" node. Entire connection
	* serves a lot of properties, allows connect or disconnect to database, eventually
	* delete the connection.
	*/
	connection = {
		name = Connection;
		displayname = "{0} [disconnected]";
		activedisplayname = "{0}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ConnectionNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ConnectionNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/connectionDisconnected";
		activeiconbase = "/com/netbeans/enterprise/modules/db/resources/connection";
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		children_ordering = {
			com.netbeans.enterprise.modules.db.explorer.nodes.TableListNode = 0;
			com.netbeans.enterprise.modules.db.explorer.nodes.ViewListNode = 1;
			com.netbeans.enterprise.modules.db.explorer.nodes.ProcedureListNode = 2;
		};
		actions = (
			{
				name = "AddConnection";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddConnectionAction;
				node = root;
			},
			delimiter,
			{
				name = "Connect";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ConnectAction;
			},
			{
				name = "ConnectAs";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ConnectAsAction;
			},
			{
				name = "Disconnect";
				class = com.netbeans.enterprise.modules.db.explorer.actions.DisconnectAction;
			},
			delimiter,
//			{
//				name = "ViewData";
//				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
//			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "TestDriver";
				class = com.netbeans.enterprise.modules.db.explorer.actions.TestDriverAction;
				node = driver;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveConnection";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = db;
				name = "DatabaseURL";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = driver;
				name = "DriverURL";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = user;
				name = "User";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = databaseProductName;
				name = databaseProductName;
				class = java.lang.String;
				writable = NO;
			},
			{
				code = databaseProductVersion;
				name = databaseProductVersion;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = rememberpwd;
				name = "RememberPassword";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = proceduresAreCallable;
				name = proceduresAreCallable;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = tablesAreSelectable;
				name = tablesAreSelectable;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = readOnly;
				name = readOnly;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = localFiles;
				name = localFiles;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = localFilePerTable;
				name = localFilePerTable;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = mixedCaseIdentifiers;
				name = mixedCaseIdentifiers;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = mixedCaseQuotedIdentifiers;
				name = mixedCaseQuotedIdentifiers;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = alterTableWithAddColumn;
				name = alterTableWithAddColumn;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = alterTableWithDropColumn;
				name = alterTableWithDropColumn;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = columnAliasing;
				name = columnAliasing;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = nullPlusNonNullIsNull;
				name = nullPlusNonNullIsNull;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = convert;
				name = convert;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = tableCorrelationNames;
				name = tableCorrelationNames;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = differentTableCorrelationNames;
				name = differentTableCorrelationNames;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = expressionsInOrderBy;
				name = expressionsInOrderBy;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = orderByUnrelated;
				name = orderByUnrelated;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = groupBy;
				name = groupBy;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = groupByUnrelated;
				name = groupByUnrelated;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = groupByBeyondSelect;
				name = groupByBeyondSelect;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = likeEscapeClause;
				name = likeEscapeClause;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = multipleResultSets;
				name = multipleResultSets;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = multipleTransactions;
				name = multipleTransactions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = nonNullableColumns;
				name = nonNullableColumns;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = minimumSQLGrammar;
				name = minimumSQLGrammar;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = coreSQLGrammar;
				name = coreSQLGrammar;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = extendedSQLGrammar;
				name = extendedSQLGrammar;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = ANSI92EntryLevelSQL;
				name = ANSI92EntryLevelSQL;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = ANSI92IntermediateSQL;
				name = ANSI92IntermediateSQL;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = ANSI92FullSQL;
				name = ANSI92FullSQL;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = IntegrityEnhancementFacility;
				name = IntegrityEnhancementFacility;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = outerJoins;
				name = outerJoins;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = fullOuterJoins;
				name = fullOuterJoins;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = limitedOuterJoins;
				name = limitedOuterJoins;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogAtStart;
				name = catalogAtStart;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = schemasInDataManipulation;
				name = schemasInDataManipulation;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = schemasInProcedureCalls;
				name = schemasInProcedureCalls;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = schemasInTableDefinitions;
				name = schemasInTableDefinitions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = schemasInIndexDefinitions;
				name = schemasInIndexDefinitions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = schemasInPrivilegeDefinitions;
				name = schemasInPrivilegeDefinitions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogsInDataManipulation;
				name = catalogsInDataManipulation;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogsInProcedureCalls;
				name = catalogsInProcedureCalls;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogsInTableDefinitions;
				name = catalogsInTableDefinitions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogsInIndexDefinitions;
				name = catalogsInIndexDefinitions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogsInPrivilegeDefinitions;
				name = catalogsInPrivilegeDefinitions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = positionedDelete;
				name = positionedDelete;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = positionedUpdate;
				name = positionedUpdate;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = selectForUpdate;
				name = selectForUpdate;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = storedProcedures;
				name = storedProcedures;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = subqueriesInComparisons;
				name = subqueriesInComparisons;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = subqueriesInExists;
				name = subqueriesInExists;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = subqueriesInIns;
				name = subqueriesInIns;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = subqueriesInQuantifieds;
				name = subqueriesInQuantifieds;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = correlatedSubqueries;
				name = correlatedSubqueries;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = union;
				name = union;
				class = java.lang.Boolean;
				writable = NO;			
				expert = YES;
			},
			{
				code = unionAll;
				name = unionAll;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = openCursorsAcrossCommit;
				name = openCursorsAcrossCommit;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = openCursorsAcrossRollback;
				name = openCursorsAcrossRollback;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = openStatementsAcrossCommit;
				name = openStatementsAcrossCommit;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = openStatementsAcrossRollback;
				name = openStatementsAcrossRollback;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = maxRowSizeIncludeBlobs;
				name = maxRowSizeIncludeBlobs;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = transactions;
				name = transactions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = dataDefinitionAndDataManipulationTransactions;
				name = dataDefinitionAndDataManipulationTransactions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = dataManipulationTransactionsOnly;
				name = dataManipulationTransactionsOnly;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = dataDefinitionCausesTransactionCommit;
				name = dataDefinitionCausesTransactionCommit;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = dataDefinitionIgnoredInTransactions;
				name = dataDefinitionIgnoredInTransactions;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = batchUpdates;
				name = batchUpdates;
				class = java.lang.Boolean;
				writable = NO;
				expert = YES;
			},
			{
				code = nullSort;
				name = nullSort;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = identifierStore;
				name = identifierStore;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = quotedIdentifierStore;
				name = quotedIdentifierStore;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxBinaryLiteralLength;
				name = maxBinaryLiteralLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxCharLiteralLength;
				name = maxCharLiteralLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxColumnNameLength;
				name = maxColumnNameLength;
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = maxColumnsInGroupBy;
				name = maxColumnsInGroupBy;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxColumnsInIndex;
				name = maxColumnsInIndex;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxColumnsInOrderBy;
				name = maxColumnsInOrderBy;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxColumnsInSelect;
				name = maxColumnsInSelect;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxColumnsInTable;
				name = maxColumnsInTable;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxConnections;
				name = maxConnections;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxCursorNameLength;
				name = maxCursorNameLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxIndexLength;
				name = maxIndexLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxSchemaNameLength;
				name = maxSchemaNameLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxProcedureNameLength;
				name = maxProcedureNameLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxCatalogNameLength;
				name = maxCatalogNameLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxRowSize;
				name = maxRowSize;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxStatementLength;
				name = maxStatementLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxStatements;
				name = maxStatements;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxTableNameLength;
				name = maxTableNameLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxTablesInSelect;
				name = maxTablesInSelect;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = maxUserNameLength;
				name = maxUserNameLength;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = defaultTransactionIsolation;
				name = defaultTransactionIsolation;
				class = java.lang.Integer;
				writable = NO;
				expert = YES;
			},
			{
				code = driverName;
				name = driverName;
				class = java.lang.String;
				writable = NO;
			},
			{
				code = driverVersion;
				name = driverVersion;
				class = java.lang.String;
				writable = NO;
			},
			{
				code = driverMajorVersion;
				name = driverMajorVersion;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = driverMinorVersion;
				name = driverMinorVersion;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = identifierQuoteString;
				name = identifierQuoteString;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = SQLKeywords;
				name = SQLKeywords;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = numericFunctions;
				name = numericFunctions;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = stringFunctions;
				name = stringFunctions;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = systemFunctions;
				name = systemFunctions;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = timeDateFunctions;
				name = timeDateFunctions;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = searchStringEscape;
				name = searchStringEscape;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = extraNameCharacters;
				name = extraNameCharacters;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = schemaTerm;
				name = schemaTerm;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = procedureTerm;
				name = procedureTerm;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogTerm;
				name = catalogTerm;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			},
			{
				code = catalogSepa;
				name = catalogSepa;
				class = java.lang.String;
				writable = NO;
				expert = YES;
			}
		);
	};

	/** 
	* Table list section.
	* This section describes dynamic subnodes in "Connection" node.
	*/
	tablelist = {
		name = Tables;
		displayname = "{name}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.TableListNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.TableListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {};	
		actions = (
			{
				name = "CreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateTableAction;
				perm = "write";
			},
			{
				name = "RecreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RecreateTableAction;
				perm = "write";
			},
			delimiter,
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "Refresh";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RefreshChildrenAction;
				perm = "write";
			},
			delimiter
		);
	};

	/** 
	* Table  section.
	* This section describes one table.
	*/
	table = {
		name = Table;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.TableNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.TableNodeInfo;
		creator = tablelist;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/table";
		children = (ilist);
/*		resultset = (catalog,schema,name,type,remarks); */
		resultset = (catalog,schema,name,type);
		options = {
			cut = NO;
			copy = YES;
			delete = YES;
		};	
		children_ordering = {
			com.netbeans.enterprise.modules.db.explorer.nodes.PrimaryKeyNode = 0;
			com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode = 1;
		};
		actions = (
			{
				name = "CreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateTableAction;
				node = tablelist;
				perm = "write";
			},
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				perm = "write";
			},
			{
				name = "Refresh";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RefreshChildrenAction;
			},
			delimiter,
			{
				name = "GrabStructure";
				class = com.netbeans.enterprise.modules.db.explorer.actions.GrabTableAction;
				perm = "write";
			},
			{
				name = "RecreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RecreateTableAction;
				node = tablelist;
				perm = "write";
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "RemoveTable";
				class = org.openide.actions.DeleteAction;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = catalog;
				name = "Catalog";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = schema;
				name = "Schema";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = type;
				name = "ColumnType";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};
		
	/** 
	* Column section.
	* This section describes list of one column.
	*/
	column = {
		name = "Column";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/column";
		resultset = (catalog,schema,tablename,name,datatype,typename,columnsize,bufflen,decdigits,radix,nullable,remarks,coldef,reserved1,reserved2,octetlen,ordpos,isnullable);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				perm = "write";
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "RemoveColumn";
				class = org.openide.actions.DeleteAction;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = YES;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = YES;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = YES;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};

	/** Indexed column section
	*/
	icolumn = {
		name = "Index";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnIndex";
		resultset = (catalog,schema,tablename,unique,qual,idxname,type,ordpos,name,ord,card,pages,filter);
		options = {};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				perm = "write";
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "Remove column";
				class = org.openide.actions.DeleteAction;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = idxname;
				name = "Index";
				class = java.lang.String;
				writable = NO;
			}
		);
	};
	
	/** 
	* Primary key section.
	* This section describes list of one column.
	*/
	pcolumn = {
		name = "Primary key";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.PrimaryKeyNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.PrimaryColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnPrimary";
		resultset = (catalog,schema,tablename,name,keyseq,pkname);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				perm = "write";
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "RemoveColumn";
				class = org.openide.actions.DeleteAction;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};

	/** 
	* Foreign key section.
	* This section describes one related column.
	*/
	fcolumn = {
		name = "Foreign key";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ForeignColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnForeign";
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				perm = "write";
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "RemoveColumn";
				class = org.openide.actions.DeleteAction;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = YES;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};

	ekeylist = {
		name = "Exported keys";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DatabaseNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.RefTableListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {};	
		actions = ();
	};

	ilist = {
		name = "Indexes";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DatabaseNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (			
			{
				name = "AddIndex";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddIndexAction;
				perm = "write";
			},
			delimiter,
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter
		);
	};

	index = {
		name = "Index";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.IndexNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/index";
		resultset = (unused,unused,unused,unused,unused,name);
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (			
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddToIndexAction;
				perm = "write";
			},
			{
				name = "AddIndex";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddIndexAction;
				node = ilist;
				perm = "write";
			},
			delimiter,
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "Refresh";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RefreshChildrenAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "RemoveIndex";
				class = org.openide.actions.DeleteAction;
				node = ilist;
				system = YES;
				perm = "write";
			}
		);
		properties = ();
	};

	indexcolumn = {
		name = "IndexColumn";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.LeafNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexColumnNodeInfo;
		iconbaseA = "/com/netbeans/enterprise/modules/db/resources/indexDown";
		iconbaseD = "/com/netbeans/enterprise/modules/db/resources/indexUp";
		resultset = (catalog,schema,tablename,unique,qual,ixname,type,ordpos,name,ord,card,pages,filter);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = unique;
				name = "Unique";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = qual;
				name = "Qualifier";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = filter;
				name = "Filter";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ord;
				name = "Ordinal";
				class = java.lang.String;
				writable = NO;
			}
		);
	};

	ekey = {
		name = "Exported key";
		class = com.netbeans.enterprise.modules.db.explorer.node.LeafNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.RefTableNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/tableReferenced";
		resultset = (pcatalog,pschema,pname,pcolname,catalog,schema,name,colname,keyseq,updaterule,deleterule,fkname,pkname,defer);
		children = ();
		options = {};	
		actions = (
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				node = driverlist;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = pcatalog;
				name = "PrimaryCatalog";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = pschema;
				name = "PrimarySchema";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = pname;
				name = "PrimaryTable";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = pcolname;
				name = "PrimaryColumn";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = catalog;
				name = "ForeignCatalog";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = schema;
				name = "ForeignSchema";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = colname;
				name = "ForeignColumn";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = keyseq;
				name = "KeySeq";
				class = java.lang.Integer;
				writable = NO;
			}
		);
	};
		
	viewlist = {
		name = "Views";
		displayname = "{name}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ViewListNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ViewListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {};	
		actions = (
			{
				name = "AddView";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateViewAction;
				perm = "write";
			},
			delimiter,
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter
		);
	};

	view = {
		name = "View";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ViewNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ViewNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/view";
		resultset = (catalog,schema,name,type,remarks);
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddView";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateViewAction;
				perm = "write";
				node = viewlist;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "RemoveView";
				class = org.openide.actions.DeleteAction;
				perm = "write";
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};
		
	viewcolumn = {
		name = "Column";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.LeafNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ViewColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnView";
		resultset = (catalog,schema,tablename,name,datatype,typename,columnsize,bufflen,decdigits,radix,nullable,remarks,coldef,reserved1,reserved2,octetlen,ordpos,isnullable);
		children = ();
		options = {};	
		actions = (
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = NO;
			}
		);
	};	
		
	procedurelist = {
		name = "Procedures";
		displayname = "{name}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ProcedureListNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ProcedureListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {};	
		actions = (
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter
		);
	};

	procedure = {
		name = "Procedure";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ProcedureNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ProcedureNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/procedure";
		resultset = (catalog,schema,name,reserved1,reserverd2,reserverd3,remarks,type);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
//			{
//				name = "AddProcedure";
//				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateProcedureAction;
//				node = procedurelist;
//			},
//			delimiter,
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveProcedure";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = NO;
			}
		);
	};
	
	procedurecolumn = {
		name = "ProcedureColumn";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ProcedureParamNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ProcedureParamNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/param";
		iconbase_in = "/com/netbeans/enterprise/modules/db/resources/paramIn";
		iconbase_out = "/com/netbeans/enterprise/modules/db/resources/paramOut";
		iconbase_inout = "/com/netbeans/enterprise/modules/db/resources/paramInOut";
		iconbase_result = "/com/netbeans/enterprise/modules/db/resources/paramResult";
		iconbase_return = "/com/netbeans/enterprise/modules/db/resources/paramReturn";
		resultset = (catalog, schema, procname, name, type, dtype, typename, precision, length, scale, radix, nullable, remarks);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
//			{
//				name = "AddProcedure";
//				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateProcedureAction;
//				node = procedurelist;
//			},
//			delimiter,
			{
				name = "ExecuteCommand";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ExecuteCommandAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				perm = "write";
				system = YES;
			},
			delimiter,
			{
				name = "RemoveTable";
				class = org.openide.actions.DeleteAction;
				node = procedurelist;
				system = YES;
				perm = "write";
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = typename;
				name = "DataType";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = NO;
			}
		);
	};
}