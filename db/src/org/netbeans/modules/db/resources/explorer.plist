/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

{
	/** 
	* Root section.
	* This section describes subnode "Database" in "Environment". It is a root for
	* database explorer, handles open connections and a list of drives. Serves list
	* of supported database products (suppdbsystems). Allows to add a new connection.
	*/
	root = {
		name = Databases;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.RootNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.RootNodeInfo;
		children_ordering = {
			com.netbeans.enterprise.modules.db.explorer.nodes.DriverListNode = 0;
			com.netbeans.enterprise.modules.db.explorer.nodes.ConnectionNode = 1;
		};
		iconbase = "/com/netbeans/enterprise/modules/db/resources/database";
		children = (driverlist);
		properties = ();
		options = {};
		actions = (
			{
				name = "AddConnection";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddConnectionAction;
			},
			delimiter,
			{
				name = "EnableDebug";
				class = com.netbeans.enterprise.modules.db.explorer.actions.EnableDebugAction;
			},
			{
				name = "DisableDebug";
				class = com.netbeans.enterprise.modules.db.explorer.actions.DisableDebugAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
	};
	
	/** 
	* Driver list section.
	* This section describes subnode "Drivers" in "Database". It is a root for driver
	* list (a list of all available and registered drivers). Allows add a new driver.
	* Serves no properties (name isn't modifable).
	*/
	driverlist = {
		name = Drivers;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DriverListNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.DriverListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folderDrivers";
		children = ();
		properties = ();
		options = {};
		defaultdriverlist = (
			{
				name = "Cloudscape";
				driver = "COM.cloudscape.core.JDBCDriver";
				prefix = "jdbc:cloudscape:<DB>";
			},
			{
				name = "Cloudscape RMI";
				driver = "COM.cloudscape.core.JDBCDriver";
				prefix = "jdbc:rmi:<HOST>:<PORT>:jdbc:cloudscape:<DB>";
			},
			{
				name = "ODBC Bridge";
				driver = "sun.jdbc.odbc.JdbcOdbcDriver";
				prefix = "jdbc.odbc.<DB>";
			},
			{
				name = "Oracle";
				driver = "oracle.jdbc.driver.OracleDriver";
				prefix = "jdbc:oracle:@<SID>";
			},
			{
				name = "Oracle thin";
				driver = "oracle.jdbc.driver.OracleDriver";
				prefix = "jdbc:oracle:thin:@<HOST>:<PORT>:<SID>";
			},
			{
				name = "Pointbase";
				driver = "com.pointbase.jdbc.jdbcDriver";
				prefix = "jdbc:pointbase:<DB>";
			},
			{
				name = "Sybase";
				driver = "com.sybase.jdbc.SybDriver";
				prefix = "jdbc:sybase:Tds:<HOST>:<PORT>";
			}
		);	
		actions = (
			{
				name = "AddNewDriver";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddDriverAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
	};

	/** 
	* Driver section.
	* This section describes dynamic subnodes in "Drivers" node. Entire drivers serves name
	* and URL properties, allows to delete selected node and connect using selected driver.
	*/
	driver = {
		name = Driver;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DriverNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.DriverNodeInfo;
		creator = driverlist;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/driver";
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = url;
				name = "DriverURL";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = prefix;
				name = "DatabasePrefix";
				class = java.lang.String;
				writable = YES;	
			}
		);
		actions = (
			{
				name = "ConnectUsing";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ConnectUsingDriverAction;
				node = root;
			},
			{
				name = "AddNewDriver";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddDriverAction;
				node = driverlist;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				node = driverlist;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveDriver";
				class = org.openide.actions.DeleteAction;
				node = driverlist;
				system = YES;
			},
		);
	};

	/** 
	* Connection section.
	* This section describes dynamic subnodes in "Databases" node. Entire connection
	* serves a lot of properties, allows connect or disconnect to database, eventually
	* delete the connection.
	*/
	connection = {
		name = Connection;
//		displayname = "{db} as {user} [disconnected]";
//		activedisplayname = "{db} as {user}";
		displayname = "{0} [disconnected]";
		activedisplayname = "{0}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ConnectionNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ConnectionNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/connectionDisconnected";
		activeiconbase = "/com/netbeans/enterprise/modules/db/resources/connection";
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddConnection";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddConnectionAction;
				node = root;
			},
			delimiter,
			{
				name = "Connect";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ConnectAction;
			},
			{
				name = "ConnectAs";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ConnectAsAction;
			},
			{
				name = "Disconnect";
				class = com.netbeans.enterprise.modules.db.explorer.actions.DisconnectAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				node = driverlist;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveConnection";
				class = org.openide.actions.DeleteAction;
				node = driverlist;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = db;
				name = "DatabaseURL";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = driver;
				name = "DriverURL";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = user;
				name = "User";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = readonlydatabase;
				name = "ReadOnly";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = groupbysupport;
				name = "GroupBy";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = outerjoinsupport;
				name = "OuterJoin";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = unionsupport;
				name = "UnionSupport";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = dbproduct;
				name = "DatabaseProduct";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = dbversion;
				name = "DatabaseVersion";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = rememberpwd;
				name = "RememberPassword";
				class = java.lang.Boolean;
				writable = NO;
			}
		);
	};

	/** 
	* Table list section.
	* This section describes dynamic subnodes in "Connection" node.
	*/
	tablelist = {
		name = Tables;
		displayname = "{name}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DatabaseNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.TableListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {};	
		actions = (
			{
				name = "CreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateTableAction;
			},
			{
				name = "RecreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RecreateTableAction;
			},
			delimiter,
			{
				name = "Refresh";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RefreshChildrenAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
	};

	/** 
	* Table  section.
	* This section describes one table.
	*/
	table = {
		name = Table;
		class = com.netbeans.enterprise.modules.db.explorer.nodes.TableNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.TableNodeInfo;
		creator = tablelist;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/table";
		children = (ilist);
/*		resultset = (catalog,schema,name,type,remarks); */
		resultset = (catalog,schema,name,type);
		options = {
			cut = NO;
			copy = NO;
			delete = YES;
		};	
		children_ordering = {
			com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode = 0;
		};
		actions = (
			{
				name = "CreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateTableAction;
				node = tablelist;
			},
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
			},
			{
				name = "Refresh";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RefreshChildrenAction;
			},
			delimiter,
			{
				name = "GrabStructure";
				class = com.netbeans.enterprise.modules.db.explorer.actions.GrabTableAction;
			},
			{
				name = "RecreateTable";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RecreateTableAction;
				node = tablelist;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveTable";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = catalog;
				name = "Catalog";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = schema;
				name = "Schema";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = type;
				name = "ColumnType";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};
		
	/** 
	* Column section.
	* This section describes list of one column.
	*/
	column = {
		name = "Column";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/column";
		resultset = (catalog,schema,tablename,name,datatype,typename,columnsize,bufflen,decdigits,radix,nullable,remarks,coldef,reserved1,reserved2,octetlen,ordpos,isnullable);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveColumn";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = YES;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = YES;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = YES;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};

	/** Indexed column section
	*/
	icolumn = {
		name = "Index";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnIndex";
		resultset = (catalog,schema,tablename,unique,qual,idxname,type,ordpos,name,ord,card,pages,filter);
		options = {};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "Remove column";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			},
			{
				code = idxname;
				name = "Index";
				class = java.lang.String;
				writable = NO;
			}
		);
	};
	
	/** 
	* Primary key section.
	* This section describes list of one column.
	*/
	pcolumn = {
		name = "Primary key";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.PrimaryColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnPrimary";
		resultset = (catalog,schema,tablename,name,keyseq,pkname);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveColumn";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};

	/** 
	* Foreign key section.
	* This section describes one related column.
	*/
	fcolumn = {
		name = "Foreign key";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ColumnNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ForeignColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnForeign";
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddColumnAction;
				node = table;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveColumn";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = isnullable;
				name = "Null";
				class = java.lang.Boolean;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = YES;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};

	ekeylist = {
		name = "Exported keys";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DatabaseNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.RefTableListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {};	
		actions = ();
	};

	ilist = {
		name = "Indexes";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DatabaseNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (			
			{
				name = "AddIndex";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddIndexAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
	};

	index = {
		name = "Index";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.IndexNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/index";
		resultset = (unused,unused,unused,unused,unused,name);
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (			
			{
				name = "AddColumn";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddToIndexAction;
			},
			{
				name = "AddIndex";
				class = com.netbeans.enterprise.modules.db.explorer.actions.AddIndexAction;
				node = ilist;
			},
			{
				name = "Refresh";
				class = com.netbeans.enterprise.modules.db.explorer.actions.RefreshChildrenAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveIndex";
				class = org.openide.actions.DeleteAction;
				node = ilist;
				system = YES;
			}
		);
		properties = ();
	};

	indexcolumn = {
		name = "IndexColumn";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.LeafNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.IndexColumnNodeInfo;
		iconbaseA = "/com/netbeans/enterprise/modules/db/resources/indexDown";
		iconbaseD = "/com/netbeans/enterprise/modules/db/resources/indexUp";
		resultset = (catalog,schema,tablename,unique,qual,ixname,type,ordpos,name,ord,card,pages,filter);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = unique;
				name = "Unique";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = qual;
				name = "Qualifier";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = filter;
				name = "Filter";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ord;
				name = "Ordinal";
				class = java.lang.String;
				writable = NO;
			}
		);
	};

	ekey = {
		name = "Exported key";
		class = com.netbeans.enterprise.modules.db.explorer.node.LeafNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.RefTableNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/tableReferenced";
		resultset = (pcatalog,pschema,pname,pcolname,catalog,schema,name,colname,keyseq,updaterule,deleterule,fkname,pkname,defer);
		children = ();
		options = {};	
		actions = (
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				node = driverlist;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				node = driverlist;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = pcatalog;
				name = "PrimaryCatalog";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = pschema;
				name = "PrimarySchema";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = pname;
				name = "PrimaryTable";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = pcolname;
				name = "PrimaryColumn";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = catalog;
				name = "ForeignCatalog";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = schema;
				name = "ForeignSchema";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = colname;
				name = "ForeignColumn";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = keyseq;
				name = "KeySeq";
				class = java.lang.Integer;
				writable = NO;
			}
		);
	};
		
	viewlist = {
		name = "Views";
		displayname = "{name}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DatabaseNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ViewListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddView";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateViewAction;
			},
			delimiter,
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
	};

	view = {
		name = "View";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ViewNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ViewNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/view";
		resultset = (catalog,schema,name,type,remarks);
		children = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
			{
				name = "AddView";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateViewAction;
				node = viewlist;
			},
			delimiter,
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveView";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = YES;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = YES;
			}
		);
	};
		
	viewcolumn = {
		name = "Column";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.LeafNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ViewColumnNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/columnView";
		resultset = (catalog,schema,tablename,name,datatype,typename,columnsize,bufflen,decdigits,radix,nullable,remarks,coldef,reserved1,reserved2,octetlen,ordpos,isnullable);
		children = ();
		options = {};	
		actions = (
			{
				name = "ViewData";
				class = com.netbeans.enterprise.modules.db.explorer.actions.ViewDataAction;
			},
			delimiter,			
			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = datatype;
				name = "Datatype";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = coldef;
				name = "Default";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = columnsize;
				name = "ColumnSize";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = decdigits;
				name = "DecimalDigits";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = ordpos;
				name = "Position";
				class = java.lang.Integer;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = NO;
			}
		);
	};	
		
	procedurelist = {
		name = "Procedures";
		displayname = "{name}";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.DatabaseNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ProcedureListNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/folder";
		children = ();
		properties = ();
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
/*			{
				name = "AddProcedure";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateProcedureAction;
			},
			delimiter,
*/			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			}
		);
	};

	procedure = {
		name = "Procedure";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ProcedureNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ProcedureNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/procedure";
		resultset = (catalog,schema,name,reserved1,reserverd2,reserverd3,remarks,type);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
/*			{
				name = "AddProcedure";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateProcedureAction;
				node = procedurelist;
			},
			delimiter,
*/			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveProcedure";
				class = org.openide.actions.DeleteAction;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = NO;
			}
		);
	};
	
	procedurecolumn = {
		name = "ProcedureColumn";
		class = com.netbeans.enterprise.modules.db.explorer.nodes.ProcedureParamNode;
		infoclass = com.netbeans.enterprise.modules.db.explorer.infos.ProcedureParamNodeInfo;
		iconbase = "/com/netbeans/enterprise/modules/db/resources/param";
		iconbase_in = "/com/netbeans/enterprise/modules/db/resources/paramIn";
		iconbase_out = "/com/netbeans/enterprise/modules/db/resources/paramOut";
		iconbase_inout = "/com/netbeans/enterprise/modules/db/resources/paramInOut";
		iconbase_result = "/com/netbeans/enterprise/modules/db/resources/paramResult";
		iconbase_return = "/com/netbeans/enterprise/modules/db/resources/paramReturn";
		resultset = (catalog, schema, procname, name, type, dtype, typename, precision, length, scale, radix, nullable, remarks);
		options = {
			cut = YES;
			copy = YES;
			delete = YES;
		};	
		actions = (
/*			{
				name = "AddProcedure";
				class = com.netbeans.enterprise.modules.db.explorer.actions.CreateProcedureAction;
				node = procedurelist;
			},
			delimiter,
*/			{
				name = "Cut";
				class = org.openide.actions.CutAction;
				system = YES;
			},
			{
				name = "Copy";
				class = org.openide.actions.CopyAction;
				system = YES;
			},
			{
				name = "Paste";
				class = org.openide.actions.PasteAction;
				system = YES;
			},
			delimiter,
			{
				name = "RemoveTable";
				class = org.openide.actions.DeleteAction;
				node = procedurelist;
				system = YES;
			}
		);
		properties = (
			{
				code = name;
				writable = NO;
			},
			{
				code = type;
				name = "Type";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = typename;
				name = "DataType";
				class = java.lang.String;
				writable = NO;
			},
			{
				code = remarks;
				name = "Remarks";
				class = java.lang.String;
				writable = NO;
			}
		);
	};
}