/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

{
	GenericDatabaseSystem = {
		DatabaseProductName = GenericDatabaseSystem;
		StringDelimiter = "'";
		ColumnListHeader = "";
		ColumnListDelimiter = ",\n\t";
		ArgumentListDelimiter = ", ";

//
// Definice sloupcu
//
		
		Column = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}]";
		};

		ColumnName = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name}[ {direction}]";
		};

		UniqueColumnName = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "unique {column.name}";
		};

		PrimaryKey = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "primary key";
		};

		ForeignKey = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "foreign key {column.name}";
		};

		ProcedureArgument = {
			Class = com.netbeans.ddl.impl.ProcedureArgument;
			Format = "{argument.name}[ {argument.type}] {argument.datatype}";
		};		

		TriggerEvent = {
			Class = com.netbeans.ddl.impl.TriggerEvent;
			Format = "{event.name}[ OF {event.column}]";
		};		

//
// Definice prikazu
//

		CreateTableCommand = {
			Class = com.netbeans.ddl.impl.CreateTable;
			Format = "create table [{object.owner}.]{object.name}\n(\n\t{columns}\n)";
			Binding = {
				COLUMN = Column;
				UNIQUE = UniqueColumn;
				PRIMARY_KEY = PrimaryKeyColumn;
				FOREIGN_KEY = ForeignKeyColumn;
				CHECK = CheckColumn;
				UNIQUE_CONSTRAINT = UniqueConstraint;
				PRIMARY_KEY_CONSTRAINT = PrimaryKeyConstraint;
				FOREIGN_KEY_CONSTRAINT = ForeignKeyConstraint;
				CHECK_CONSTRAINT = CheckConstraint;
			};
		};

		RenameTableCommand = {
			Class = com.netbeans.ddl.impl.RenameTable;
			Format = "alter table [{object.owner}.]{object.name} rename {object.newname}";
		
		};

		DropTableCommand = {
			Class = com.netbeans.ddl.impl.AbstractCommand;
			Format = "drop table [{object.owner}.]{object.name}";
		};

		CommentTableCommand = {
			Class = com.netbeans.ddl.impl.CommentTable;
			Format = "comment on table [{object.owner}.]{object.name} is {comment}";
		};

		AddColumnCommand = {
			Class = com.netbeans.ddl.impl.AddColumn;
			Format = "alter table [{object.owner}.]{object.name} add {column}";
			Binding = {
				COLUMN = Column;
				UNIQUE = UniqueColumn;
				PRIMARY_KEY = PrimaryKeyColumn;
				FOREIGN_KEY = ForeignKeyColumn;
				CHECK = CheckColumn;
			};
		};		

		RenameColumnCommand = {
			Class = com.netbeans.ddl.impl.RenameColumn;
			Format = "alter table [{object.owner}.]{object.name} rename {column} to {column.newname}";
			Binding = {
				COLUMN = ColumnName;
			};
		};

		RemoveColumnCommand = {
			Class = com.netbeans.ddl.impl.RemoveColumn;
			Format = "alter table [{object.owner}.]{object.name} delete {column}";
			Binding = {
				COLUMN = ColumnName;
				UNIQUE = UniqueColumnName;
				PRIMARY_KEY = PrimaryKey;
				FOREIGN_KEY = ForeignKeyColumnName;
			};
		};		
		
		CreateIndexCommand = {
			Class = com.netbeans.ddl.impl.CreateIndex;
			Format = "create index on [{object.owner}.]{object.name}[\n(\n\t{columns}\n)]";
			Binding = {
				COLUMN = ColumnName;
			};
		};
		
		DropIndexCommand = {
			Class = com.netbeans.ddl.impl.AbstractCommand;
			Format = "drop index [{object.owner}.]{object.name}";
		};

		CreateViewCommand = {
			Class = com.netbeans.ddl.impl.CreateView;
			Format = "create view [{object.owner}.]{object.name} as {query}";
		};

		DropViewCommand = {
			Class = com.netbeans.ddl.impl.AbstractCommand;
			Format = "drop view [{object.owner}.]{object.name}";
		};

		CreateProcedureCommand = {
			Class = com.netbeans.ddl.impl.CreateProcedure;
			Format = "create procedure [{object.owner}.]{object.name} [({arguments})] as\n{body}";
			Binding = {
				ARGUMENT = ProcedureArgument;
			};
		};

		DropProcedureCommand = {
			Class = com.netbeans.ddl.impl.AbstractCommand;
			Format = "drop procedure [{object.owner}.]{object.name}";
		};

		CreateFunctionCommand = {
			Class = com.netbeans.ddl.impl.CreateFunction;
			Format = "create function [{object.owner}.]{object.name} [({arguments})] returns {return.type} as\n{body}";
			Binding = {
				ARGUMENT = ProcedureArgument;
			};
		};

		DropFunctionCommand = {
			Class = com.netbeans.ddl.impl.AbstractCommand;
			Format = "drop function [{object.owner}.]{object.name}";
		};
	
		CreateTriggerCommand = {
			Class = com.netbeans.ddl.impl.CreateTrigger;
			Format = "create trigger [{object.owner}.]{object.name}\n{trigger.timing} {trigger.events}\non {table.name}\nreferencing old as old_{object.name} new as new_{object.name}[\n{each.row}for each row][\nwhen {trigger.condition}\n{trigger.body}";
			Binding = {
				EVENT = TriggerEvent;
			};
		};

		DropTriggerCommand = {
			Class = com.netbeans.ddl.impl.AbstractCommand;
			Format = "drop trigger [{object.owner}.]{object.name}";
		};
	};

//	********************************************************************************
//
//	SYBASE SQL ANYWHERE
//
//	********************************************************************************/

	"Sybase SQL Anywhere" = {
		DatabaseProductName = "Sybase SQL Anywhere";
		DatabaseProductVersion = 6;
		TriggerEventListDelimiter = ", ";
		TypeMap = {
			java.sql.Types.INTEGER = INTEGER;
			java.sql.Types.VARCHAR = CHAR;
		};
		ProcedureArgumentMap = {
			IN = IN;
			OUT = OUT;
			INOUT = INOUT;
		};
		TriggerEventMap = {
			INSERT = INSERT;
			UPDATE = UPDATE;
			DELETE = DELETE;
		};
		SizelessTypes = (INTEGER);
		DecimalTypes = (INTEGER);
		CharacterTypes = (CHAR);

//
// Definice sloupcu
//
		
		UniqueColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] unique";
		};

		PrimaryKeyColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] primary key";
		};

		ForeignKeyColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] references {fkobject.name}[({fkcolumn.name})]";
		};

		CheckColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] check ({check.condition})";
		};			

		UniqueConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "unique {column.name}";
		};

		PrimaryKeyConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "primary key {column.name}";
		};

		ForeignKeyConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "foreign key {column.name} references {fkobject.name}[({fkcolumn.name})]";
		};

		CheckConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "check ({check.condition})";
		};			

//
// Definice prikazu
//

		CreateIndexCommand = {
			Class = com.netbeans.ddl.impl.CreateIndex;
			Format = "create index on [{object.owner}.]{object.name} (\n\t{columns}\n)";
			Binding = {
				COLUMN = ColumnName;
			};
		};
	};

//	********************************************************************************
//
//	ORACLE7
//
//	********************************************************************************/

	"Oracle" = {
		DatabaseProductName = "Oracle";
		DatabaseProductVersion = 6;
		TriggerEventListDelimiter = " OR ";
		TypeMap = {
			java.sql.Types.INTEGER = NUMBER;
			java.sql.Types.VARCHAR = VARCHAR2;
		};
		ProcedureArgumentMap = {
			IN = IN;
			OUT = OUT;
			INOUT = INOUT;
		};
		TriggerEventMap = {
			INSERT = INSERT;
			UPDATE = UPDATE;
			DELETE = DELETE;
		};
		SizelessTypes = ();
		DecimalTypes = (NUMBER);
		CharacterTypes = (VARCHAR2);

//
// Definice sloupcu
//

		Column = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}]";
		};
		
		UniqueColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] constraint {object.name} unique";
		};

		PrimaryKeyColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] constraint {object.name} primary key";
		};

		ForeignKeyColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] constraint {object.name} references {fkobject.name}[({fkcolumn.name})]";
		};

		CheckColumn = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "{column.name} {column.type}[({column.size}[,{column.decsize}])][ {column.notnull}not null][ default {default.value}] constraint {object.name} check ({check.condition})";
		};			

		UniqueConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "constraint {object.name} unique {column.name}";
		};

		PrimaryKeyConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "constraint {object.name} primary key {column.name}";
		};

		ForeignKeyConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "constraint {object.name} foreign key {column.name} references {fkobject.name}[({fkcolumn.name})]";
		};

		CheckConstraint = {
			Class = com.netbeans.ddl.impl.TableColumn;
			Format = "constraint {object.name} check ({check.condition})";
		};			
	};
}




	