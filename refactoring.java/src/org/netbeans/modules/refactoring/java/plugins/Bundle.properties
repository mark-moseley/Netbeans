# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.

DSC_ElNotAvail=The original element being refactored is not available. It was deleted or significantly changed. Usages cannot be collected.
ERR_ProjectNotOpened=Cannot refactor code that is defined outside of an open project.

# --- SAFE DELETE REFACTORING ------------------------------------------------------
ERR_SafeDel=There was an error deleting <b>{0}</b>
LBL_ShowUsages=&Show Usages...
ERR_ReferencesFound=References to selected elements were found. Remove all references to these elements in order to safely delete your class.
ERR_SafeDel_FromReference=Safe Delete cannot be invoked from Class/Method References
ERR_SafeDel_InvalidType=Safe Delete can be invoked only on a Method, Field or Class

# --- EXTRACT INTERFACE REFACTORING ------------------------------------------------
TXT_ExtractInterface_CreateIfc=Create interface <b>{0}</b>.
TXT_ExtractInterface_Method=Create declaration of method <b>{0}</b> in the new interface.
TXT_ExtractInterface_MoveMethod=Move method <b>{0}</b> to the new interface.
TXT_ExtractInterface_Field=Move field <b>{0}</b> to the new interface.
TXT_ExtractInterface_Class=Move inner class <b>{0}</b> to the new interface.
TXT_ExtractInterface_Implements=Move <b>{0}</b> to the extends clause of the new interface.
TXT_ExtractInterface_AddImplements=Add <b>{0}</b> to the implements/extends clause.

# --- EXTRACT SUPER CLASS REFACTORING ------------------------------------------------
ERR_ExtractSC_MustBeClass=The selected type must be a class (cannot perform this operation on an interface, enum or annotation type).
# Illegal member (0 = member name)
ERR_ExtractSC_IllegalMember=Member "{0}" cannot be extracted into a super class. It does not belong to the source type.
TXT_ExtractSC_CreateSC=Create class <b>{0}</b>.
TXT_ExtractSC_Method=Create declaration of method <b>{0}</b> in the new super class.
TXT_ExtractSC_Member=Move <b>{0}</b> to the new super class.
TXT_ExtractSC_AddExtends=Set <b>{0}</b> to the extend clause.

# --- PULL UP REFACTORING ------------------------------------------------------
# *** Pre-check ***
# No supertype
ERR_PullUp_NoSuperTypes=Cannot pull up any members. The selected type has no supertypes in the currently opened projects.
# No member
ERR_PullUp_NoMembers=The selected type and its supertypes have no members that could be pulled up.
# *** Fast parameters check
# No selected member
ERR_PullUp_NoMembersSelected=No members are selected to be pulled up.
# No target type selected
ERR_PullUp_NoTargetType=No supertype is selected.
# *** Parameters check
# Illegal target type
ERR_PullUp_IllegalTargetType=The target type is not a supertype of the source type, or the source code for the target type is not available.
# Illegal member (0 = member name)
ERR_PullUp_IllegalMember=Member "{0}" cannot be pulled up. It does not belong to the source type or to one of the source type supertypes that are subtypes of the target type.
# Member already exists in the target type (0 = member name)
ERR_PullUp_MemberAlreadyExists=Member "{0}" already exists in the target type.
# *** Refactoring element descriptions
# Add abstract method to the target type (0 = method name)
ERR_CannotPullupDuplicateMembers=Cannot pull up two members with the same signature.
TXT_PullUp_AddMethod=Add abstract method\: <b>{0}</b>
# Move member to the target type (0 = member name)
TXT_PullUp_Member=Move <b>{0}</b> to the target type.

# --- PUSH DOWN REFACTORING ------------------------------------------------------
TXT_PushDown_Member=Copy <b>{0}</b> to the type <b>{1}</b>.
TXT_PushDown_Remove=Remove <b>{0}</b> element.
TXT_PushDown_Abstract=Make method <b>{0}</b> abstract.
TXT_PushDown_RelaxAccessModifier=Change modifier from <b>{0}</b> to <b>{1}</b>.
LBL_PushDown_private=private
LBL_PushDown_package_private=package private
LBL_PushDown_protected=protected
ERR_PushDOwn_NoSubtype=Cannot push down any members. The selected type has no subtypes in the currently opened projects.
ERR_PushDown_NoMembers=The selected type has no members that could be pushed down.
ERR_PushDown_NoMembersSelected=No members are selected to be pushed down.

# --- CONVERT ANONYMOUS CLASS TO NESTED ----------------------------------------
TXT_ConvertAnonymousToInner=Convert anonymous class to inner class <b>{0}</b>.
ERR_InnerClassExists=There is already inner class <b>{0}</b> in <b>{1}</b>.
ERR_AnonymousToInnerDuplicateParamName=More than one parameters named <b>{0}</b>.
ERR_AnonymousToInnerInavlidParamName=Parameter name <b>{0}</b> is not a valid Java identifier.
ERR_AnonymousToInnerNoClassSelected=No anonymous class selected.
ERR_AnonymousToInnerCannotBeStatic=The anonymous class accesses instance features in outer class, it cannot be declared static.

# --- INNER TO OUTER REFACTORING ------------------------------------------------
ERR_InnerToOuter_MustBeInnerClass=The selected type must be an inner type (cannot perform this operation on a top-level type).
ERR_InnerToOuter_FieldNameClash=Field named <b>{0}</b> already exists in this class.
ERR_InnerToOuter_ClassNameClash=Inner class named <b>{0}</b> already exists in the target class.
ERR_InnerToOuter_OuterUsed=The class being moved to the outer level uses members of its outer class. You should let the refactoring create an instance variable holding reference to the original outer class.
ERR_InnerToOuter_InnerHidden=One of the super types of the target class already defines an inner class named <b>{0}</b>.
TXT_InnerToOuter_MoveToOuter=Make this class an inner class of <b>{0}</b>.
TXT_InnerToOuter_MoveToTop=Make this class a top-level class.
TXT_InnerToOuter_Rename=Rename this class to <b>{0}</b>.
TXT_InnerToOuter_AddReference=Add a new instance field named <b>{0}</b> pointing to the original outer class, update class constructors.
TXT_InnerToOuter_AddConstructor=Add constructor since the default constructor will not be available in the super class.
TXT_InnerToOuter_AddConstructorInvocation=Add explicit constructor invocation since the default constructor will not be available in the super class.
TXT_InnerToOuter_RelaxAccessRights=Change from private to package private.
ERR_InnerToOuter_FieldNameClash=Field named <b>{0}</b> already exists in this class.

# --- USE SUPERTYPE REFACTORING ------------------------------------------------------
TXT_UseSuperType=Use Supertype of <b>{0}</b> where possible
TXT_UseSuperTypeVariable=Change type of <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeReturnType=Change return type of <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeLocalVar=Change type of local variable(s) <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeProblem=Type {0} is not visible within the body of {1}
ERR_UseSuperType_InvalidElement=Use Supertype can only be invoked on valid types
ERR_UseSuperTypeNoSuperType=No supertype selected.