<?xml version="1.0"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->

<project name="QA performance tests" basedir="." default="all">

    <!-- Root folders -->
    <property name="nball.dir" location="../.."/>
    <property name="nbextra.dir" location="../../../nbextra"/>
    
    <!-- Import defaults for QA-functional tests -->
    <import file="${nball.dir}/nbbuild/templates/xtest-qa-functional.xml"/>
    
    <!-- Imports defaults for Performance testing. -->
    <import file="${nball.dir}/performance/performancetestutilities/dist/build-performance-tests.xml"/>
    
    <!-- Custom properties -->
    <property name="xtest.tmpdir.createproject" location="${xtest.tmpdir}/createdProjects"/>
    <property name="test.classpath" value="${j2ee.appserver.path}/lib/j2ee.jar"/>

    <!-- ==================== -->
    <!-- Setting command line -->
    <!-- ==================== -->
    
    <target name="ide_command_line_suffix">
        <!--  Repeat performance test more than once -->
        <property name="xtest.ide.commandline.suffix" value="-J-Dcom.sun.aas.installRoot=${tomcat.home} -J-Dorg.netbeans.performance.repeat=4 -J-Dorg.netbeans.performance.memory.usage.log=true"/>
    </target>
    
    <!-- ========= -->
    <!-- Compilers -->
    <!-- ========= -->

<!--    <target name="qa-functional-compiler" depends="init, init-cp,check-appserver">
        <ant antfile="${nball.dir}/nbbuild/templates/xtest-qa-functional.xml" target="qa-functional-compiler">
            <property name="permit.jdk6.builds" value="true"/>
        </ant>

        <packageTests/>
    </target>
-->
    <target name="qa-functional-compiler" depends="init,init-cp,check-appserver">
        <buildTests srcdir="qa-functional/src" compileexcludes="**/data/**">
            <classpath>
                <!--path refid="compiletest.classpath"/-->
                <path refid="test.qa-functional.compile.cp"/>
                <path location="${j2ee.appserver.path}/lib/j2ee.jar"/>
                <path location="${j2ee.appserver.path}/lib/appserv-rt.jar"/>			
                <path location="${java.home}/lib/rt.jar"/>
                <!--path refid="performance.testutilities.path"/>
                <path refid="perf.util"/-->
           </classpath>
        </buildTests>
    </target>
    
    
    <!-- ================ -->
    <!-- Global Executors -->
    <!-- ================ -->
    <target name="set-appserver-path">
        <!--condition property="j2ee.appserver.path" value="e:\\space\\AppServer"-->
        <condition property="tomcat.home" value="e:\\space\\Tomcat">
            <os family="windows"/>
        </condition>
        <condition property="tomcat.home" value="/space/tomcat">
            <os family="unix"/>
        </condition>
    </target>
    
    <!-- Stop all running domains, clear domain1 and create a new one.  -->
    <target name="init-clean-appserver-domain">
        <condition property="windows">
            <os family="windows" />
        </condition>
        <condition property="unix">
            <os family="unix" />
        </condition>
        <condition property="clean.script.exec" value="e:\\space\\scripts\\cleanAS.bat">
            <os family="windows" />
        </condition>
        <condition property="clean.script.exec" value="/space/scripts/cleanAS.sh">
            <os family="unix" />
        </condition>
        <available file="${clean.script.exec}" property="clean.script.exists" type="file"/>
    </target>
    
    <target name="-run-clean-domain-windows" if="windows">
        <exec executable="${clean.script.exec}"/>
    </target>
    
    <target name="-run-clean-domain-unix" if="unix">
        <exec executable="sh">
            <arg value="${clean.script.exec}"/>
        </exec>
    </target>

    <target name="run-clean-appserver-domain" if="clean.script.exists">
        <echo>Cleaning default domains...</echo>
        <antcall target="-run-clean-domain-windows" inheritall="true"/>
        <antcall target="-run-clean-domain-unix" inheritall="true"/>
    </target>
    
    <target name="inform-user" unless="clean.script.exists">
        <echo>Continuing with default domain, data in this domain will be modified....</echo>
    </target>
    
    <target name="clean-appserver-domain" depends="init-clean-appserver-domain, run-clean-appserver-domain, inform-user"/>
    
    <target name="check-appserver" depends="set-appserver-path">
<!--        <available file="${j2ee.appserver.path}/domains/domain1" property="j2ee.appserver.present"/>
        <fail unless="j2ee.appserver.present" message="AppServer was not found in ${j2ee.appserver.path}. Set property j2ee.appserver.path to point to AppServer installation directory."/>-->
    </target>
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes tests inside IDE -->
    <target name="runidesetup" depends="copy_unzip_test_projects, init-cp,set-appserver-path,check-appserver,ide_command_line_suffix">
        <antcall target="copy_released_ide_cfg_file"/>
        
        <executeTests pluginName="ide">
            <classpath refid="jemmy.and.jelly.path"/>
            
            <property name="xtest.timeout" value="2400000" />
            
            <!-- Opens project at specified location -->
            <property name="xtest.ide.open.project" location="${xtest.tmpdir}/jEdit41"/>
            
        </executeTests>
        
        <!-- save copy of current Userdir -->
        <copy todir="${xtest.workdir}/sys/ide_backup">
            <fileset dir="${xtest.workdir}/sys/ide"/>
        </copy>
        
        <antcall target="copy_original_ide_cfg_file"/>
    </target>

    <!-- Executor for performance tests with backup of appserver domain -->
    <target name="runide_performance_as" depends="init,init-cp,set-appserver-path,check-appserver,ide_command_line_suffix">
       <antcall target="runidetest">
          <param name="xtest.userdata|j2ee.appserver.path" value="${j2ee.appserver.path}"/>
       </antcall>   
    </target>

    <target name="runide_performance_as_noscan" depends="init,init-cp,set-appserver-path,check-appserver">
       <property name="xtest.ide.commandline.suffix" value="-J-Dcom.sun.aas.installRoot=${j2ee.appserver.path} -J-Dorg.netbeans.performance.repeat=4 -J-Dorg.netbeans.performance.memory.usage.log=true -J-Dnetbeans.javacore.noscan=true"/>
       <antcall target="runidetest">
          <param name="xtest.userdata|j2ee.appserver.path" value="${j2ee.appserver.path}"/>
       </antcall>   
    </target>
    
    
    <target name="runidetest" depends="init-cp">
        <delete dir="${xtest.workdir}/sys/ide"/>
        <copy todir="${xtest.workdir}/sys/ide">
            <fileset dir="${xtest.workdir}/sys/ide_backup"/>
        </copy>
        
        <mkdir dir="${xtest.tmpdir.createproject}"/>
        
        <antcall target="copy_released_ide_cfg_file"/>
        <property name="extra.test.libs.dir" value=""/>
        <property name="test.qa-functional.run.cp.extra" value=""/>
        
        <!-- copy xsl transformator file for ActionTracker log into appropriate directory -->
        <copy file="${performance.testutilities.dist.dir}/ActionTracker.xsl" todir="${xtest.results.testrun.dir}" />
        
        <executeTests pluginName="ide">
            <classpath>
                <path refid="jemmy.and.jelly.path"/>
                <path location="${test.qa-functional.run.cp.extra}"/>
                <path location="${extra.test.libs.dir}"/>
            </classpath>
            
<!--            <property name="xtest.ide.commandline.suffix" value="-J-Dorg.netbeans.performance.repeat=5 -J-Dorg.netbeans.performance.memory.usage.log=true"/>-->
            <property name="xtest.enable.assertions" value="false" /> 
            <property name="xtest.ide.reuse.userdir" value="true" />
            <property name="xtest.timeout" value="3600000" />
        </executeTests>
        
        <delete dir="${xtest.tmpdir.createproject}"/>
        
        <antcall target="copy_original_ide_cfg_file"/>
    </target>
    
    
    <target name="runidetest_scan" depends="copy_unzip_test_projects, init-cp">
        <antcall target="copy_released_ide_cfg_file"/>
        
        <property name="test.qa-functional.run.cp.extra" value=""/>
        
        <executeTests pluginName="ide">
            <classpath>
                <path refid="jemmy.and.jelly.path"/>
                <path location="${test.qa-functional.run.cp.extra}"/>
            </classpath>
            
            <property name="xtest.ide.commandline.suffix" value="-J-Dperf.refactoring.test=true"/>
            
            <property name="xtest.enable.assertions" value="false" />
            <property name="xtest.timeout" value="3600000" />
        </executeTests>
        
        <antcall target="copy_original_ide_cfg_file"/>
    </target>
    
    
    <target name="runidetest_footprint" depends="copy_unzip_test_projects, prepare_measure_footprint, init-cp">
        <antcall target="copy_released_ide_cfg_file"/>
        
        <property name="test.qa-functional.run.cp.extra" value=""/>
        
        <!-- Opens project at specified location -->
        <!-- open this project in test run - because not all tests are supposed to have jEdit opened
        <property name="xtest.ide.open.project" location="${xtest.tmpdir}/jEdit41"/> -->
        
        <executeTests pluginName="ide">
            <classpath>
                <path refid="jemmy.and.jelly.path"/>
                <path location="${test.qa-functional.run.cp.extra}"/>
            </classpath>
            
            <property name="xtest.ide.commandline.suffix" value="-J-Dorg.netbeans.performance.memory.repeat=1 -J-Dorg.netbeans.performance.memory.usage.log=true"/>
            <property name="xtest.enable.assertions" value="false" /> 
            <property name="xtest.timeout" value="3600000" />
            <property name="xtest.test.duration" value="60min" />
            <property name="xtest.test.timeout" value="3600000" />
            <property name="xtest.test.one-test-timeout" value="60min" />
        </executeTests>
        
        <antcall target="copy_original_ide_cfg_file"/>
    </target>
    
</project>
