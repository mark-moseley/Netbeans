<?xml version="1.0"?>
<!--
The contents of this file are subject to the terms of the Common Development
and Distribution License (the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at http://www.netbeans.org/cddl.html
or http://www.netbeans.org/cddl.txt.

When distributing Covered Code, include this CDDL Header Notice in each file
and include the License file at http://www.netbeans.org/cddl.txt.
If applicable, add the following below the CDDL Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="j2ee-qa-functional" basedir="." default="all">
    
    <!-- Root folders -->
    <property name="nball.dir" location="../../.."/>
    
    <!-- Imports defaults -->
    <import file="${nball.dir}/nbbuild/templates/xtest-qa-functional.xml"/>
    <import file="../../../performance/performancetestutilities/dist/build-performance-tests.xml"/>
    
    <property name="test.classpath" value="${j2ee.appserver.path}/lib/j2ee.jar"/>

    <path id="perf.util">
        <pathelement location="lib/util.jar"/>
    </path>
    
    <!-- Creates an empty Java project in IDE -->
    <!-- <property name="xtest.ide.create.project" value="true"/> -->
    <!-- Opens project at specified location -->
    <!-- <property name="xtest.ide.open.project" location="${xtest.data}/SampleProject"/> -->
    <!-- Suppress XTest error manager -->
    <!-- <property name="xtest.ide.error.manager" value="false"/> -->
    
    <!-- ==================== -->
    <!-- Setting command line -->
    <!-- ==================== -->
    
    <target name="ide_command_line_suffix">
        <!--  Repeat performance test more than once -->
        <property name="xtest.ide.commandline.suffix" value="-J-Dcom.sun.aas.installRoot=${j2ee.appserver.path} -J-Dorg.netbeans.performance.repeat=4 -J-Dorg.netbeans.performance.memory.usage.log=true"/>
    </target>
    
    <!-- ========= -->
    <!-- Compilers -->
    <!-- ========= -->

    <target name="qa-perf-compiler" depends="init,init-cp,check-appserver,build-performance">
        <buildTests srcdir="qa-functional/src" compileexcludes="**/data/**">
            <classpath>
                <!--path refid="compiletest.classpath"/-->
                <path refid="test.qa-functional.compile.cp"/>
                <path location="${j2ee.appserver.path}/lib/j2ee.jar"/>
                <path location="${j2ee.appserver.path}/lib/appserv-rt.jar"/>			
                <path location="${java.home}/lib/rt.jar"/>
                <!--path refid="performance.testutilities.path"/>
                <path refid="perf.util"/-->
           </classpath>
        </buildTests>
    </target>

    <target name="qa-performance-startup-compiler" depends="init,init-cp,check-appserver,build-performance">
        <buildTests srcDir="qa-functional/src/startup" compileExcludes="**/data/**">
            <classpath>
               <path refid="test.qa-functional.compile.cp"/>
               <path refid="jemmy.and.jelly.path"/>
            </classpath>
        </buildTests>
    </target>

    <target name="check-perf-classes">
        <available file="../../../performance/build/test/qa-functional/classes" property="perf.classes.exist" type="dir"/>
    </target>
    
    <target name="build-performance" unless="perf.classes.exist" depends="check-perf-classes">
	<java classname="org.apache.tools.ant.Main" dir="../../../performance/test" failonerror="true" fork="true">
          <jvmarg value="-Dant.home=${ant.home}"/>
          <arg value="buildtests"/>
          <arg value="-Dxtest.testtype=qa-functional"/>
          <arg value="-Dxtest.attribs=all"/>
          <arg value="-Dxtest.home=${xtest.home}"/>
          <arg value="-Dnetbeans.dest.dir=${netbeans.dest.dir}"/>
	  <classpath path="${java.class.path}"/>
        </java>
          
	<mkdir dir="lib"/> 
	<jar jarfile="lib/util.jar"
	     basedir="../../../performance/build/test/qa-functional/classes"
	     includes="**/*.class"/>
    </target>

    <!-- ========= -->
    <!-- Executors -->
    <!-- ========= -->

    <target name="set-appserver-path" unless="j2ee.appserver.path">
        <!--condition property="j2ee.appserver.path" value="e:\\space\\AppServer"-->
        <condition property="j2ee.appserver.path" value="e:\\space\\appserver">
            <os family="windows"/>
        </condition>
        <condition property="j2ee.appserver.path" value="/space/appserver">
            <os family="unix"/>
        </condition>
    </target>
    
    <!-- Stop all running domains, clear domain1 and create a new one.  -->
    <target name="init-clean-appserver-domain">
        <condition property="windows">
            <os family="windows" />
        </condition>
        <condition property="unix">
            <os family="unix" />
        </condition>
        <condition property="clean.script.exec" value="e:\\space\\scripts\\cleanAS.bat">
            <os family="windows" />
        </condition>
        <condition property="clean.script.exec" value="/space/scripts/cleanAS.sh">
            <os family="unix" />
        </condition>
        <available file="${clean.script.exec}" property="clean.script.exists" type="file"/>
    </target>
    
    <target name="-run-clean-domain-windows" if="windows">
        <exec executable="${clean.script.exec}"/>
    </target>
    
    <target name="-run-clean-domain-unix" if="unix">
        <exec executable="sh">
            <arg value="${clean.script.exec}"/>
        </exec>
    </target>

    <target name="run-clean-appserver-domain" if="clean.script.exists">
        <echo>Cleaning default domains...</echo>
        <antcall target="-run-clean-domain-windows" inheritall="true"/>
        <antcall target="-run-clean-domain-unix" inheritall="true"/>
    </target>
    
    <target name="inform-user" unless="clean.script.exists">
        <echo>Continuing with default domain, data in this domain will be modified....</echo>
    </target>
    
    <target name="clean-appserver-domain" depends="init-clean-appserver-domain, run-clean-appserver-domain, inform-user"/>
    
    <target name="check-appserver" depends="set-appserver-path">
        <available file="${j2ee.appserver.path}/domains/domain1" property="j2ee.appserver.present"/>
        <fail unless="j2ee.appserver.present" message="AppServer was not found in ${j2ee.appserver.path}. Set property j2ee.appserver.path to point to AppServer installation directory."/>
    </target>
    
    <target name="runidetest_with_appserver" depends="init,check-appserver">
        <!--
        <copy todir="${xtest.tmpdir}/appserver_domain_backup">
        <fileset dir="${j2ee.appserver.path}/domains/domain1"/>
        </copy>
        -->
        <antcall target="runidetest">
            <param name="xtest.ide.commandline.suffix" value="-J-Dcom.sun.aas.installRoot=&quot;${j2ee.appserver.path}&quot;"/>
            <!--  start IDE in debug mode -->
            <!-- 
            <param name="xtest.ide.commandline.suffix" value="-J-Dcom.sun.aas.installRoot=${j2ee.appserver.path} -J-Xdebug -J-Xnoagent -J-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8765"/>
            -->
        </antcall>   
        <!--
        <copy failonerror="false" todir="${xtest.sketchpad}" file="${j2ee.appserver.path}/domains/domain1/logs/server.log"/>
        <delete dir="${j2ee.appserver.path}/domains/domain1"/>
        <copy todir="${j2ee.appserver.path}/domains/domain1">
        <fileset dir="${xtest.tmpdir}/appserver_domain_backup"/>
        </copy>
        <chmod dir="${j2ee.appserver.path}/domains/domain1/bin" perm="ugo+x" includes="*"/>
        <delete dir="${xtest.tmpdir}/appserver_domain_backup"/>
        -->
    </target>
    
    <!-- ======================= -->
    <!--  PERFORMANCE EXECUTORS  -->
    <!-- ======================= -->

        <!--Executor for IDE setup -->
    <target name="runide_setup" depends="init,init-cp,copy_unzip_perf_project,set-appserver-path,check-appserver,ide_command_line_suffix">
        <antcall target="copy_released_ide_cfg_file"/>                            
        <executeTests pluginName="ide">
            <classpath refid="jemmy.and.jelly.path"/>
            <classpath refid="perf.util"/>                                                                               
            <classpath location="${test.qa-functional.run.cp.extra}"/>
            <property name="xtest.timeout" value="7200000" />     
            
            <!-- Opens project at specified location -->
            <!--
            <property name="xtest.ide.open.project" location="${xtest.tmpdir}/jEdit41"/>
            -->
        </executeTests>                                
        <!-- save copy of current Userdir -->
        <copy todir="${xtest.workdir}/sys/ide_backup">
          <fileset dir="${xtest.workdir}/sys/ide"/>
        </copy>
        
        <antcall target="copy_original_ide_cfg_file"/>
    </target>
    
    <!-- Executor for performance tests -->
    <target name="runide_performance" depends="init-cp,ide_command_line_suffix">
        <delete dir="${xtest.workdir}/sys/ide"/>
        <copy todir="${xtest.workdir}/sys/ide">
            <fileset dir="${xtest.workdir}/sys/ide_backup"/>
        </copy>
        <antcall target="copy_released_ide_cfg_file"/>
        <!-- copy xsl transformator file for ActionTracker log into appropriate directory -->
        <copy file="${performance.testutilities.dist.dir}/ActionTracker.xsl" todir="${xtest.results.testrun.dir}" />
        <executeTests pluginName="ide">
            <classpath refid="jemmy.and.jelly.path"/>
            <classpath refid="perf.util"/>
            <classpath location="${test.qa-functional.run.cp.extra}"/>
            <property name="xtest.enable.assertions" value="false" />
            <property name="xtest.ide.reuse.userdir" value="true"/>
            <property name="xtest.timeout" value="7200000" />
        </executeTests>
        <antcall target="copy_original_ide_cfg_file"/>
    </target> 
    
    <!-- Executor for performance tests with backup of appserver domain -->
    <target name="runide_performance_as" depends="init,init-cp,set-appserver-path,check-appserver,ide_command_line_suffix">
       <antcall target="runide_performance">
          <param name="xtest.userdata|j2ee.appserver.path" value="${j2ee.appserver.path}"/>
       </antcall>   
    </target>
    
    <!-- Executor for Measure Complex Startup Time - prepare -->
    <target name="runcodetest_measure_complex_startup_prepare" depends="init-cp,copy_unzip_startup_project">
        <antcall target="copy_released_ide_cfg_file"/>
        <executeTests pluginName="ide">
            <classpath refid="jemmy.and.jelly.path"/>
            <classpath refid="perf.util"/>                                                                               
            <classpath location="${test.qa-functional.run.cp.extra}"/>
            <property name="xtest.enable.assertions" value="false" /> 
            <property name="xtest.timeout" value="1800000" />
        </executeTests>
        <antcall target="copy_original_ide_cfg_file"/>
    </target>
        
    <!-- Executor for Measure Complex Startup Time -->
    <target name="runcodetest_measure_complex_startup" depends="make_netbeans_executable">
        <antcall target="copy_released_ide_cfg_file"/>
        <executeTests pluginName="jvm">
            <property name="xtest.enable.assertions" value="false" /> 
            <property name="xtest.ide.reuse.userdir" value="true"/>
            <property name="xtest.userdata|netbeans.dest.dir" value="${netbeans.dest.dir}"/>
            <property name="xtest.userdata|userdir.prepared" value="${xtest.workdir}"/>
            <property name="xtest.userdata|performance.testutilities.dist.jar" value="${performance.testutilities.dist.jar}"/>
            <!-- Property for repeatedly used userdir with opened files -->
            <property name="xtest.userdata|org.netbeans.performance.repeat" value="5"/>
        </executeTests>
        <copy todir="${xtest.sketchpad}">
            <fileset dir="${xtest.workdir}/sys/ide/var/log"/>
        </copy>
        <antcall target="copy_original_ide_cfg_file"/>
    </target>

    <!-- ================== -->
    <!-- Performance Utils  -->
    <!-- ================== -->
    
    <!-- Make ide executable -->
    <target name="make_netbeans_executable">
        <chmod perm="ugo+rx" file="${netbeans.dest.dir}/bin/netbeans"/>
        <chmod perm="ugo+rx" dir="${netbeans.dest.dir}" includes="platform?/lib/nbexec"/>
    </target>

    <!-- Copy and unzip projects, will be used for Performance tests -->
    <target name="copy_unzip_startup_project">
        <delete dir="${xtest.tmpdir}/startup"/>
        <unzip src="qa-functional/data/startup.zip" dest="${xtest.tmpdir}/"/>
    </target>

    <!-- Copy and unzip projects, will be used for Performance tests -->
    <target name="copy_unzip_perf_project">
        <delete dir="${xtest.tmpdir}/perf"/>
        <unzip src="qa-functional/data/perf.zip" dest="${xtest.tmpdir}/"/>
    </target>    
</project>
