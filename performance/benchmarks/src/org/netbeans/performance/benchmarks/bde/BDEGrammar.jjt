/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    VISITOR_EXCEPTION="Exception";
}

PARSER_BEGIN(BDEParser)
package org.netbeans.performance.bde.generated;
import org.netbeans.performance.bde.TestSpecBuilder;

public class BDEParser {

    public static TestSpecBuilder parseTestSpec(String spec) throws Exception {
        BDEParser t = new BDEParser(new java.io.StringReader(spec));
        return new TestSpecBuilder(t.Start());
    }
}

PARSER_END(BDEParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

void Letter() : {}
{
  < ["_","a"-"z","A"-"Z"] >
}

void Digit() : {}
{
  < ["0"-"9"] >
}

void String() #String : {}
{
  < ["_","0"-"9","a"-"z","A"-"Z"] > (< ["_","0"-"9","a"-"z","A"-"Z"] >)*
}

ASTStart Start() #Start : {}
{
  [ LoadDefinition() ";" ] TestDefinitionList() [ ";" StoreDefinition() ]
  { return jjtThis; }
}

void LoadDefinition() #LoadDefinition : {}
{
// ClassName() is a little bit tricky
  "load" [ ClassName() ]
}

void StoreDefinition() #StoreDefinition : {}
{
// ClassName() is a little bit tricky
  "store" [ ClassName() ]
}

void Identifier() #Identifier : {}
{
  < ["_","a"-"z","A"-"Z"] ( ["_","a"-"z","A"-"Z"] | ["0"-"9"] )* >
}

void TestDefinitionList() #TestDefinitionList : {}
{
  TestDefinition() ( ":" TestDefinition())*
}

void TestDefinition() #TestDefinition : {}
{
    ClassName() [ "[" MethodFilterList() "]" ] [ "@" ArgDataList()]
}

void ClassName() #ClassName : {}
{
    < ["_","a"-"z","A"-"Z"] (["_","a"-"z","A"-"Z"] | ["0"-"9"])* ("." (["_","a"-"z","A"-"Z"] | ["0"-"9"])+)* >
}

void MethodFilterList() #MethodFilterList : {}
{
    MethodFilter() ( "," MethodFilter())*
}

void MethodFilter() #MethodFilter : {}
{
    < (["_","a"-"z","A"-"Z"] | ["0"-"9"] | "*")+ >
}

void ArgDataList() #ArgDataList: {}
{
    "[" ArgDataSeries() "]" ("," "[" ArgDataSeries() "]")*
}

void ArgDataSeries() #ArgDataSeries : {}
{
    ArgData() (";" ArgData())*
}

void ArgData() #ArgData : {}
{
    Id() "=" ValSpecList()
}

void Id() #Id : {}
{
    Identifier()
}

void ValSpecList() #ValSpecList : {}
{
    ValSpec() ("," ValSpec())*
}

void ValSpec() #ValSpec : {}
{
   String() | IntegerDef()
}

void IntegerDef() #IntegerDef : {}
{
    Integer() [".." Integer() [":" Integer()]]
}

void Integer() #Integer : {}
{
    <INTEGER_LITERAL>
}