/*
 * AmazonS3ItemResource.java
 *
 * Created on __DATE__, __TIME__
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package Templates.Classes;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import RestConnection.RequestMethod;
import java.io.IOException;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.ws.rs.UriTemplate;
import javax.ws.rs.UriParam;
import javax.ws.rs.HttpMethod;
import javax.ws.rs.ProduceMime;
import javax.ws.rs.ConsumeMime;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.HttpContext;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Builder;
import javax.ws.rs.core.UriInfo;


/**
 * AmazonS3 Item Resource
 *
 * @author __USER__
 */
public class AmazonS3ItemResource {
    
    private static final String HOST = "s3.amazonaws.com";
    
    private String accessKey = "04KK4AENM7FWVT06RF82";
   
    private String secretAccessKey = "5ErlY2f/TuijDabdpr2F267SHYOmDJDaDsHqF4Bb";

    @HttpMethod("GET")
    @ProduceMime("image/gif")
    public DataSource getImageRep(@UriParam("album") String album,
            @UriParam("photo") String photo) {
        try {
            String content = execute(RequestMethod.GET, album, photo, null);
            File tmpFile = File.createTempFile(photo, "b");
            AmazonS3BucketsResource.Base64.decodeToFile(content, tmpFile.getAbsolutePath());
            return new FileDataSource(tmpFile);
        } catch (IOException ex) {
            Logger.getLogger(PhotoResource.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    /**
     * PUT method for updating or creating an instance of ObjectResource
     * @param content representation for the resource
     * @return an HTTP response with content of the updated or created resource.
     */
    @HttpMethod("PUT")
    @ConsumeMime("application/xml")
    public Response putXml(@UriParam("album") String album,
            @UriParam("photo") String photo,
            String content) {
        execute(RequestMethod.PUT, album, photo, content);
        
        return Builder.created(context.getAbsolute()).build();
    }
    
    @HttpMethod("DELETE")
    public void delete(@UriParam("album") String album,
            @UriParam("photo") String photo) {
        execute(RequestMethod.DELETE, album, photo, null);
    }
    
    public String execute(RequestMethod method, String album,
            String photo, String content) {
        String url = "http://" + album + "." + HOST + "/" + photo + "/";
         RestConnection conn = new RestConnection(url, method, 
                new String[][] {});
        String date = conn.getDate();
        
        String contentType = "";
        
        if (method == RequestMethod.PUT) {
            contentType = "application/xml";
        }
        
        String authorization =
                AmazonS3BucketsResource.AmazonAuthorizationGenerator.generate(
                accessKey, secretAccessKey,
                method.toString(), "", contentType,
                date,
                album, "/" + photo + "/");
        
        String[][] headers = null;
        
        if (method == RequestMethod.PUT) {
            headers = new String[][] {
            {"Content-Type", "application/xml"},
            {"Content-Length", Integer.toString(content.length())},
            {"Authorization", authorization}};
        } else {
            headers = new String[][] {
            {"Authorization", authorization}};
        }
        
        try {
           return conn.connect(headers, (content != null) ? content.getBytes() : null);
        } catch (IOException ex) {
            throw new WebApplicationException(ex);
        }
    }


}
