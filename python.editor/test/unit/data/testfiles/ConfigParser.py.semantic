"""Configuration file parser.

A setup file consists of sections, lead by a "[section]" header,
and followed by "name: value" entries, with continuations and such in
the style of RFC 822.

 the same section, or values in a special [DEFAULT] section.

For example:

    something: %(dir)s/whatever

would resolve the "%(dir)s" to the value of dir.  All reference
expansions are done late, on demand.

Intrinsic defaults can be specified by passing them into the
ConfigParser constructor as a dictionary.

class:

ConfigParser -- responsible for parsing a list of
                configuration files, and managing the parsed database.

    methods:

    __init__(defaults=None)
        create the parser and specify a dictionary of intrinsic defaults.  The
        keys must be strings, the values must be appropriate for %()s string
        interpolation.  Note that `__name__' is always an intrinsic default;
        it's value is the section's name.

    sections()
        return all the configuration section names, sans DEFAULT

    has_section(section)
        return whether the given section exists

    has_option(section, option)
        return whether the given option exists in the given section

    options(section)
        return list of configuration options for the named section

    read(filenames)
        read and parse the list of named configuration files, given by
        name.  A single filename is also allowed.  Non-existing files
        are ignored.

    readfp(fp, filename=None)
        read and parse one configuration file, given as a file object.
        The filename defaults to fp.name; it is only used in error
        messages (if fp has no `name' attribute, the string `<???>' is used).

    get(section, option, raw=False, vars=None)
        return a string value for the named option.  All % interpolations are
        expanded in the return values, based on the defaults passed into the
        constructor and the DEFAULT section.  Additional substitutions may be
        provided using the `vars' argument, which must be a dictionary whose
        contents override any pre-existing defaults.

    getint(section, options)
        like get(), but convert value to an integer

    getfloat(section, options)
        like get(), but convert value to a float

    getboolean(section, options)
        like get(), but convert value to a boolean (currently case
        insensitively defined as 0, false, no, off for False, and 1, true,
        yes, on for True).  Returns False or True.

    items(section, raw=False, vars=None)
        return a list of tuples with (name, value) for each option
        in the section.

    remove_section(section)
        remove the given file section and all its options

    remove_option(section, option)
        remove the given option from the given section

    set(section, option, value)
        set the given option

    write(fp)
        write the configuration state in .ini format
"""

import re

__all__ = ["NoSectionError", "DuplicateSectionError", "NoOptionError",
           "InterpolationError", "InterpolationDepthError",
           "InterpolationSyntaxError", "ParsingError",
           "MissingSectionHeaderError", "ConfigParser", "SafeConfigParser",
           "DEFAULTSECT", "MAX_INTERPOLATION_DEPTH"]

DEFAULTSECT = "DEFAULT"

MAX_INTERPOLATION_DEPTH = 10



# exception classes
class Error(Exception):
    """Base class for ConfigParser exceptions."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:msg<|=''):
        |>PARAMETER:self<|.message = |>PARAMETER:msg<|
        Exception.__init__(|>PARAMETER:self<|, |>PARAMETER:msg<|)

    def |>METHOD:__repr__<|(|>PARAMETER:self<|):
        return |>PARAMETER:self<|.message

    __str__ = __repr__

class NoSectionError(Error):
    """Rasssised when no section matches a requested option."""
 
    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:section<|):
        Error.__init__(|>PARAMETER:self<|, 'No section: ' + `|>PARAMETER:section<|`)
        |>PARAMETER:self<|.section = |>PARAMETER:section<|

class DuplicateSectionError(Error):
    """Raised when a section is multiply-created."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:section<|):
        Error.__init__(|>PARAMETER:self<|, "Section %r already exists" % |>PARAMETER:section<|)
        |>PARAMETER:self<|.section = |>PARAMETER:section<|

class NoOptionError(Error):
    """A requested option was not found."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:option<|, |>PARAMETER:section<|):
        Error.__init__(|>PARAMETER:self<|, "No option %r in section: %r" %
                       (|>PARAMETER:option<|, |>PARAMETER:section<|))
        |>PARAMETER:self<|.option = |>PARAMETER:option<|
        |>PARAMETER:self<|.section = |>PARAMETER:section<|

class InterpolationError(Error):
    """Base class for interpolation-related exceptions."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:option<|, |>PARAMETER:section<|, |>PARAMETER:msg<|):
        Error.__init__(|>PARAMETER:self<|, |>PARAMETER:msg<|)
        |>PARAMETER:self<|.option = |>PARAMETER:option<|
        |>PARAMETER:self<|.section = |>PARAMETER:section<|

class InterpolationMissingOptionError(InterpolationError):
    """A string substitution required a setting which was not available."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:option<|, |>PARAMETER:section<|, |>PARAMETER:rawval<|, |>PARAMETER:reference<|):
        msg = ("Bad value substitution:\n"
               "\tsection: [%s]\n"
               "\toption : %s\n"
               "\tkey    : %s\n"
               "\trawval : %s\n"
               % (|>PARAMETER:section<|, |>PARAMETER:option<|, |>PARAMETER:reference<|, |>PARAMETER:rawval<|))
        InterpolationError.__init__(|>PARAMETER:self<|, |>PARAMETER:option<|, |>PARAMETER:section<|, msg)
        |>PARAMETER:self<|.reference = |>PARAMETER:reference<|

class InterpolationSyntaxError(InterpolationError):
    """Raised when the source text into which substitutions are made
    does not conform to the required syntax."""

class InterpolationDepthError(InterpolationError):
    """Raised when substitutions are nested too deeply."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:option<|, |>PARAMETER:section<|, |>PARAMETER:rawval<|):
        msg = ("Value interpolation too deeply recursive:\n"
               "\tsection: [%s]\n"
               "\toption : %s\n"
               "\trawval : %s\n"
               % (|>PARAMETER:section<|, |>PARAMETER:option<|, |>PARAMETER:rawval<|))
        InterpolationError.__init__(|>PARAMETER:self<|, |>PARAMETER:option<|, |>PARAMETER:section<|, msg)

class ParsingError(Error):
    """Raised when a configuration file does not follow legal syntax."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:filename<|):
        Error.__init__(|>PARAMETER:self<|, 'File contains parsing errors: %s' % |>PARAMETER:filename<|)
        |>PARAMETER:self<|.filename = |>PARAMETER:filename<| 
        |>PARAMETER:self<|.errors = []

    def |>METHOD:append<|(|>PARAMETER:self<|, |>PARAMETER:lineno<|, |>PARAMETER:line<|):
        |>PARAMETER:self<|.errors.append((|>PARAMETER:lineno<|, |>PARAMETER:line<|))
        |>PARAMETER:self<|.message += '\n\t[line %2d]: %s' % (|>PARAMETER:lineno<|, |>PARAMETER:line<|)

class MissingSectionHeaderError(ParsingError):
    """Raised when a key-value pair is found before any section header."""

    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:filename<|, |>PARAMETER:lineno<|, |>PARAMETER:line<|):
        Error.__init__(
            |>PARAMETER:self<|,
            'File contains no section headers.\nfile: %s, line: %d\n%s' %
            (|>PARAMETER:filename<|, |>PARAMETER:lineno<|, |>PARAMETER:line<|))
        |>PARAMETER:self<|.filename = |>PARAMETER:filename<|
        |>PARAMETER:self<|.lineno = |>PARAMETER:lineno<|
        |>PARAMETER:self<|.line = |>PARAMETER:line<|



class RawConfigParser:
    def |>METHOD:__init__<|(|>PARAMETER:self<|, |>PARAMETER:defaults<|=None):
        |>PARAMETER:self<|._sections = {}
        if |>PARAMETER:defaults<| is None:
            |>PARAMETER:self<|._defaults = {}
        else:
            |>PARAMETER:self<|._defaults = |>PARAMETER:defaults<|

    def |>METHOD:defaults<|(|>PARAMETER:self<|):
        return |>PARAMETER:self<|._defaults

    def |>METHOD:sections<|(|>PARAMETER:self<|):
        """Return a list of section names, excluding [DEFAULT]"""
        # self._sections will never have [DEFAULT] in it
        return |>PARAMETER:self<|._sections.keys()

    def |>METHOD:add_section<|(|>PARAMETER:self<|, |>PARAMETER:section<|):
        """Create a new section in the configuration.

        Raise DuplicateSectionError if a section by the specified name
        already exists.
        """
        if |>PARAMETER:section<| in |>PARAMETER:self<|._sections:
            raise DuplicateSectionError(|>PARAMETER:section<|)
        |>PARAMETER:self<|._sections[|>PARAMETER:section<|] = {}

    def |>METHOD:has_section<|(|>PARAMETER:self<|, |>PARAMETER:section<|):
        """Indicate whether the named section is present in the configuration.

        The DEFAULT section is not acknowledged.
        """
        return |>PARAMETER:section<| in |>PARAMETER:self<|._sections

    def |>METHOD:options<|(|>PARAMETER:self<|, |>PARAMETER:section<|):
        """Return a list of option names for the given section name."""
        try:
            opts = |>PARAMETER:self<|._sections[|>PARAMETER:section<|].copy()
        except KeyError:
            raise NoSectionError(|>PARAMETER:section<|)
        opts.update(|>PARAMETER:self<|._defaults)
        if '__name__' in opts:
            del opts['__name__']
        return opts.keys()

    def |>METHOD:read<|(|>PARAMETER:self<|, |>PARAMETER:filenames<|):
        """Read and parse a filename or a list of filenames.

        Files that cannot be opened are silently ignored; this is
        designed so that you can specify a list of potential
        configuration file locations (e.g. current directory, user's
        home directory, systemwide directory), and all existing
        configuration files in the list will be read.  A single
        filename may also be given.
        """
        if isinstance(|>PARAMETER:filenames<|, basestring):
            |>PARAMETER:filenames<| = [|>PARAMETER:filenames<|]
        for filename in |>PARAMETER:filenames<|:
            try:
                fp = open(filename)
            except IOError:
                continue
            |>PARAMETER:self<|._read(fp, filename)
            fp.close()

    def |>METHOD:readfp<|(|>PARAMETER:self<|, |>PARAMETER:fp<|, |>PARAMETER:filename<|=None):
        """Like read() but the argument must be a file-like object.

        The `fp' argument must have a `readline' method.  Optional
        second argument is the `filename', which if not given, is
        taken from fp.name.  If fp has no `name' attribute, `<???>' is
        used.

        """
        if |>PARAMETER:filename<| is None:
            try:
                |>PARAMETER:filename<| = |>PARAMETER:fp<|.name
            except AttributeError:
                |>PARAMETER:filename<| = '<???>'
        |>PARAMETER:self<|._read(|>PARAMETER:fp<|, |>PARAMETER:filename<|)

    def |>METHOD:get<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|):
        opt = |>PARAMETER:self<|.optionxform(|>PARAMETER:option<|)
        if |>PARAMETER:section<| not in |>PARAMETER:self<|._sections:
            if |>PARAMETER:section<| != DEFAULTSECT:
                raise NoSectionError(|>PARAMETER:section<|)
            if opt in |>PARAMETER:self<|._defaults:
                return |>PARAMETER:self<|._defaults[opt]
            else:
                raise NoOptionError(|>PARAMETER:option<|, |>PARAMETER:section<|)
        elif opt in |>PARAMETER:self<|._sections[|>PARAMETER:section<|]:
            return |>PARAMETER:self<|._sections[|>PARAMETER:section<|][opt]
        elif opt in |>PARAMETER:self<|._defaults:
            return |>PARAMETER:self<|._defaults[opt]
        else:
            raise NoOptionError(|>PARAMETER:option<|, |>PARAMETER:section<|)

    def |>METHOD:items<|(|>PARAMETER:self<|, |>PARAMETER:section<|):
        try:
            d2 = |>PARAMETER:self<|._sections[|>PARAMETER:section<|]
        except KeyError:
            if |>PARAMETER:section<| != DEFAULTSECT:
                raise NoSectionError(|>PARAMETER:section<|)
            d2 = {}
        d = |>PARAMETER:self<|._defaults.copy()
        d.update(d2)
        if "__name__" in d:
            del d["__name__"]
        return d.items()

    def |>METHOD:_get<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:conv<|, |>PARAMETER:option<|):
        return |>PARAMETER:conv<|(|>PARAMETER:self<|.get(|>PARAMETER:section<|, |>PARAMETER:option<|))

    def |>METHOD:getint<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|):
        return |>PARAMETER:self<|._get(|>PARAMETER:section<|, int, |>PARAMETER:option<|)

    def |>METHOD:getfloat<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|):
        return |>PARAMETER:self<|._get(|>PARAMETER:section<|, float, |>PARAMETER:option<|)

    _boolean_states = {'1': True, 'yes': True, 'true': True, 'on': True,
                       '0': False, 'no': False, 'false': False, 'off': False}

    def |>METHOD:getboolean<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|):
        v = |>PARAMETER:self<|.get(|>PARAMETER:section<|, |>PARAMETER:option<|)
        if v.lower() not in |>PARAMETER:self<|._boolean_states:
            raise ValueError, 'Not a boolean: %s' % v
        return |>PARAMETER:self<|._boolean_states[v.lower()]

    def |>METHOD:optionxform<|(|>PARAMETER,UNUSED:self<|, |>PARAMETER:optionstr<|):
        return |>PARAMETER:optionstr<|.lower()

    def |>METHOD:has_option<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|):
        """Check for the existence of a given option in a given section."""
        if not |>PARAMETER:section<| or |>PARAMETER:section<| == DEFAULTSECT:
            |>PARAMETER:option<| = |>PARAMETER:self<|.optionxform(|>PARAMETER:option<|)
            return |>PARAMETER:option<| in |>PARAMETER:self<|._defaults
        elif |>PARAMETER:section<| not in |>PARAMETER:self<|._sections:
            return False
        else:
            |>PARAMETER:option<| = |>PARAMETER:self<|.optionxform(|>PARAMETER:option<|)
            return (|>PARAMETER:option<| in |>PARAMETER:self<|._sections[|>PARAMETER:section<|]
                    or |>PARAMETER:option<| in |>PARAMETER:self<|._defaults)

    def |>METHOD:set<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|, |>PARAMETER:value<|):
        """Set an option."""
        if not |>PARAMETER:section<| or |>PARAMETER:section<| == DEFAULTSECT:
            sectdict = |>PARAMETER:self<|._defaults
        else:
            try:
                sectdict = |>PARAMETER:self<|._sections[|>PARAMETER:section<|]
            except KeyError:
                raise NoSectionError(|>PARAMETER:section<|)
        sectdict[|>PARAMETER:self<|.optionxform(|>PARAMETER:option<|)] = |>PARAMETER:value<|

    def |>METHOD:write<|(|>PARAMETER:self<|, |>PARAMETER:fp<|):
        """Write an .ini-format representation of the configuration state."""
        if |>PARAMETER:self<|._defaults:
            |>PARAMETER:fp<|.write("[%s]\n" % DEFAULTSECT)
            for (key, value) in |>PARAMETER:self<|._defaults.items():
                |>PARAMETER:fp<|.write("%s = %s\n" % (key, str(value).replace('\n', '\n\t')))
            |>PARAMETER:fp<|.write("\n")
        for section in |>PARAMETER:self<|._sections:
            |>PARAMETER:fp<|.write("[%s]\n" % section)
            for (key, value) in |>PARAMETER:self<|._sections[section].items():
                if key != "__name__":
                    |>PARAMETER:fp<|.write("%s = %s\n" %
                             (key, str(value).replace('\n', '\n\t')))
            |>PARAMETER:fp<|.write("\n")

    def |>METHOD:remove_option<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|):
        """Remove an option."""
        if not |>PARAMETER:section<| or |>PARAMETER:section<| == DEFAULTSECT:
            sectdict = |>PARAMETER:self<|._defaults
        else:
            try:
                sectdict = |>PARAMETER:self<|._sections[|>PARAMETER:section<|]
            except KeyError:
                raise NoSectionError(|>PARAMETER:section<|)
        |>PARAMETER:option<| = |>PARAMETER:self<|.optionxform(|>PARAMETER:option<|)
        existed = |>PARAMETER:option<| in sectdict
        if existed:
            del sectdict[|>PARAMETER:option<|]
        return existed

    def |>METHOD:remove_section<|(|>PARAMETER:self<|, |>PARAMETER:section<|):
        """Remove a file section."""
        existed = |>PARAMETER:section<| in |>PARAMETER:self<|._sections
        if existed:
            del |>PARAMETER:self<|._sections[|>PARAMETER:section<|]
        return existed

    #
    # Regular expressions for parsing section headers and options.
    #
    SECTCRE = re.compile(
        r'\['                                 # [
        r'(?P<header>[^]]+)'                  # very permissive!
        r'\]'                                 # ]
        )
    OPTCRE = re.compile(
        r'(?P<option>[^:=\s][^:=]*)'          # very permissive!
        r'\s*(?P<vi>[:=])\s*'                 # any number of space/tab,
                                              # followed by separator
                                              # (either : or =), followed
                                              # by any # space/tab
        r'(?P<value>.*)$'                     # everything up to eol
        )

    def |>METHOD:_read<|(|>PARAMETER:self<|, |>PARAMETER:fp<|, |>PARAMETER:fpname<|):
        """Parse a sectioned setup file.

        The sections in setup file contains a title line at the top,
        indicated by a name in square brackets (`[]'), plus key/value
        options lines, indicated by `name: value' format lines.
        Continuations are represented by an embedded newline then
        leading whitespace.  Blank lines, lines beginning with a '#',
        and just about everything else are ignored.
        """
        cursect = None                            # None, or a dictionary
        optname = None
        lineno = 0
        e = None                                  # None, or an exception
        while True:
            line = |>PARAMETER:fp<|.readline()
            if not line:
                break
            lineno = lineno + 1
            # comment or blank line?
            if line.strip() == '' or line[0] in '#;':
                continue
            if line.split(None, 1)[0].lower() == 'rem' and line[0] in "rR":
                # no leading whitespace
                continue
            # continuation line?
            if line[0].isspace() and cursect is not None and optname:
                value = line.strip()
                if value:
                    cursect[optname] = "%s\n%s" % (cursect[optname], value)
            # a section header or option header?
            else:
                # is it a section header?
                mo = |>PARAMETER:self<|.SECTCRE.match(line)
                if mo:
                    sectname = mo.group('header')
                    if sectname in |>PARAMETER:self<|._sections:
                        cursect = |>PARAMETER:self<|._sections[sectname]
                    elif sectname == DEFAULTSECT:
                        cursect = |>PARAMETER:self<|._defaults
                    else:
                        cursect = {'__name__': sectname}
                        |>PARAMETER:self<|._sections[sectname] = cursect
                    # So sections can't start with a continuation line
                    optname = None
                # no section header in the file?
                elif cursect is None:
                    raise MissingSectionHeaderError(|>PARAMETER:fpname<|, lineno, `line`)
                # an option line?
                else:
                    mo = |>PARAMETER:self<|.OPTCRE.match(line)
                    if mo:
                        optname, vi, optval = mo.group('option', 'vi', 'value')
                        if vi in ('=', ':') and ';' in optval:
                            # ';' is a comment delimiter only if it follows
                            # a spacing character
                            pos = optval.find(';')
                            if pos != -1 and optval[pos-1].isspace():
                                optval = optval[:pos]
                        optval = optval.strip()
                        # allow empty values
                        if optval == '""':
                            optval = ''
                        optname = |>PARAMETER:self<|.optionxform(optname.rstrip())
                        cursect[optname] = optval
                    else:
                        # a non-fatal parsing error occurred.  set up the
                        # exception but keep going. the exception will be
                        # raised at the end of the file and will contain a
                        # list of all bogus lines
                        if not e:
                            e = ParsingError(|>PARAMETER:fpname<|)
                        e.append(lineno, `line`)
        # if any parsing errors occurred, raise an exception
        if e:
            raise e


class ConfigParser(RawConfigParser):

    def |>METHOD:get<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|, |>PARAMETER:raw<|=False, |>PARAMETER:vars<|=None):
        """Get an option value for a given section.

        All % interpolations are expanded in the return values, based on the
        defaults passed into the constructor, unless the optional argument
        `raw' is true.  Additional substitutions may be provided using the
        `vars' argument, which must be a dictionary whose contents overrides
        any pre-existing defaults.

        The section DEFAULT is special.
        """
        d = |>PARAMETER:self<|._defaults.copy()
        try:
            d.update(|>PARAMETER:self<|._sections[|>PARAMETER:section<|])
        except KeyError:
            if |>PARAMETER:section<| != DEFAULTSECT:
                raise NoSectionError(|>PARAMETER:section<|)
        # Update with the entry specific variables
        if |>PARAMETER:vars<| is not None:
            d.update(|>PARAMETER:vars<|)
        |>PARAMETER:option<| = |>PARAMETER:self<|.optionxform(|>PARAMETER:option<|)
        try:
            value = d[|>PARAMETER:option<|]
        except KeyError:
            raise NoOptionError(|>PARAMETER:option<|, |>PARAMETER:section<|)

        if |>PARAMETER:raw<|:
            return value
        else:
            return |>PARAMETER:self<|._interpolate(|>PARAMETER:section<|, |>PARAMETER:option<|, value, d)

    def |>METHOD:items<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:raw<|=False, |>PARAMETER:vars<|=None):
        """Return a list of tuples with (name, value) for each option
        in the section.

        All % interpolations are expanded in the return values, based on the
        defaults passed into the constructor, unless the optional argument
        `raw' is true.  Additional substitutions may be provided using the
        `vars' argument, which must be a dictionary whose contents overrides
        any pre-existing defaults.

        The section DEFAULT is special.
        """
        d = |>PARAMETER:self<|._defaults.copy()
        try:
            d.update(|>PARAMETER:self<|._sections[|>PARAMETER:section<|])
        except KeyError:
            if |>PARAMETER:section<| != DEFAULTSECT:
                raise NoSectionError(|>PARAMETER:section<|)
        # Update with the entry specific variables
        if |>PARAMETER:vars<|:
            d.update(|>PARAMETER:vars<|)
        options = d.keys()
        if "__name__" in options:
            options.remove("__name__")
        if |>PARAMETER:raw<|:
            return [(option, d[option])
                    for option in options]
        else:
            return [(option, |>PARAMETER:self<|._interpolate(|>PARAMETER:section<|, option, d[option], d))
                    for option in options]

    def |>METHOD:_interpolate<|(|>PARAMETER,UNUSED:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|, |>PARAMETER:rawval<|, |>PARAMETER:vars<|):
        # do the string interpolation
        value = |>PARAMETER:rawval<|
        depth = MAX_INTERPOLATION_DEPTH
        while depth:                    # Loop through this until it's done
            depth -= 1
            if value.find("%(") != -1:
                try:
                    value = value % |>PARAMETER:vars<|
                except KeyError, e:
                    raise InterpolationMissingOptionError(
                        |>PARAMETER:option<|, |>PARAMETER:section<|, |>PARAMETER:rawval<|, e[0])
            else:
                break
        if value.find("%(") != -1:
            raise InterpolationDepthError(|>PARAMETER:option<|, |>PARAMETER:section<|, |>PARAMETER:rawval<|)
        return value


class SafeConfigParser(ConfigParser):

    def |>METHOD:_interpolate<|(|>PARAMETER:self<|, |>PARAMETER:section<|, |>PARAMETER:option<|, |>PARAMETER:rawval<|, |>PARAMETER:vars<|):
        # do the string interpolation
        L = []
        |>PARAMETER:self<|._interpolate_some(|>PARAMETER:option<|, L, |>PARAMETER:rawval<|, |>PARAMETER:section<|, |>PARAMETER:vars<|, 1)
        return ''.join(L)

    _interpvar_match = re.compile(r"%\(([^)]+)\)s").match

    def |>METHOD:_interpolate_some<|(|>PARAMETER:self<|, |>PARAMETER:option<|, |>PARAMETER:accum<|, |>PARAMETER:rest<|, |>PARAMETER:section<|, |>PARAMETER:map<|, |>PARAMETER:depth<|):
        if |>PARAMETER:depth<| > MAX_INTERPOLATION_DEPTH:
            raise InterpolationDepthError(|>PARAMETER:option<|, |>PARAMETER:section<|, |>PARAMETER:rest<|)
        while |>PARAMETER:rest<|:
            p = |>PARAMETER:rest<|.find("%")
            if p < 0:
                |>PARAMETER:accum<|.append(|>PARAMETER:rest<|)
                return
            if p > 0:
                |>PARAMETER:accum<|.append(|>PARAMETER:rest<|[:p])
                |>PARAMETER:rest<| = |>PARAMETER:rest<|[p:]
            # p is no longer used
            c = |>PARAMETER:rest<|[1:2]
            if c == "%":
                |>PARAMETER:accum<|.append("%")
                |>PARAMETER:rest<| = |>PARAMETER:rest<|[2:]
            elif c == "(":
                m = |>PARAMETER:self<|._interpvar_match(|>PARAMETER:rest<|)
                if m is None:
                    raise InterpolationSyntaxError(|>PARAMETER:option<|, |>PARAMETER:section<|,
                        "bad interpolation variable reference %r" % |>PARAMETER:rest<|)
                var = m.group(1)
                |>PARAMETER:rest<| = |>PARAMETER:rest<|[m.end():]
                try:
                    v = |>PARAMETER:map<|[var]
                except KeyError:
                    raise InterpolationMissingOptionError(
                        |>PARAMETER:option<|, |>PARAMETER:section<|, |>PARAMETER:rest<|, var)
                if "%" in v:
                    |>PARAMETER:self<|._interpolate_some(|>PARAMETER:option<|, |>PARAMETER:accum<|, v,
                                           |>PARAMETER:section<|, |>PARAMETER:map<|, |>PARAMETER:depth<| + 1)
                else:
                    |>PARAMETER:accum<|.append(v)
            else:
                raise InterpolationSyntaxError(
                    |>PARAMETER:option<|, |>PARAMETER:section<|,
                    "'%' must be followed by '%' or '(', found: " + `ret`)
