<?xml version="1.0" encoding="UTF-8"?>
<!-- ===========================================================================
  The contents of this file are subject to the terms of the Common Development
  and Distribution License (the License). You may not use this file except in
  compliance with the License.
  
  You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  or http://www.netbeans.org/cddl.txt.
  
  When distributing Covered Code, include this CDDL Header Notice in each file
  and include the License file at http://www.netbeans.org/cddl.txt.
  If applicable, add the following below the CDDL Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyrighted [year] [name of copyright owner]"
  
  The Original Software is NetBeans. The Initial Developer of the Original
  Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  Microsystems, Inc. All Rights Reserved.
  
  $Id$
============================================================================ -->

<!--
  This is the base build script for an nbi product package.
  
  It is not intended to be used directly, but to be imported into derivative
  implementation scripts, which will provide properties' values that are 
  specific the concrete product implementation. The derivative scripts may also
  provide some additional functionality that is required by their respective
  product implementations.
  
  This script exposes five primary targets: 'init', 'clean', 'checkout', 
  'build' and 'release'; as well as two aggregate targets: 'build-all', 
  which tranlates into 'init', 'clean', 'checkout', 'build', and 
  'release-all' - 'init', 'clean', 'checkout', 'build', 'release'. For the 
  detailed description of the functionality of these targets, consult the 
  corresponding documentation.
-->
<project name="product" default="usage" basedir=".">
    <!-- a default value for the ${common.dir} property, which allows the user 
         to see the usage information is he calls this script directly and not
         via a derivative (which is the proper way to do this) -->
    <property name="common.dir" value="${basedir}"/>
    
    <!-- import the common properties -->
    <property file="${common.dir}/common.properties"/>
    
    <!-- import properties specific to the product package's build script -->
    <property file="${common.dir}/product.properties"/>
    
    <!-- import the common target library -->
    <import file="common.xml" optional="false"/>
    
    <!-- =======================================================================
      Initialization
    ======================================================================== -->
    
    <!--
      Initializes the product package's build script.
      
      This target overrides the '-init' target in common.xml, providing the 
      custom functionality that is required for the product package's build 
      script initialization.
      
      In addition to the standard initialization routine, this target defines
      several custom ant tasks, which are specific to the product package's build 
      script.
      
      This target is not intended to be called directly.
    -->
    <target name="-init" depends=".init">
        <!-- define custom ant tasks -->
        <taskdef 
            name="sizeof" 
            classname="org.netbeans.installer.infra.build.ant.SizeOf" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="md5" 
            classname="org.netbeans.installer.infra.build.ant.Md5" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="load-locales" 
            classname="org.netbeans.installer.infra.build.ant.LoadLocales" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="product-descriptor" 
            classname="org.netbeans.installer.infra.build.ant.XmlProduct" 
            classpath="${custom.tasks.cls}"/>
        <taskdef
            name="release-product"
            classname="org.netbeans.installer.infra.build.ant.ReleaseProduct"
            classpath="${custom.tasks.cls}"/>
        <taskdef
            name="absolutize"
            classname="org.netbeans.installer.infra.build.ant.Absolutize"
            classpath="${custom.tasks.cls}"/>
        
        <!-- check whether the engine should be built -->
        <condition property="do.build.engine">
            <equals arg1="${build.engine}" arg2="true"/>
        </condition>
        
        <!-- make the engine-related paths absolute -->
        <absolutize property="engine.work.dir"/>
        <absolutize property="engine.dist.dir"/>
        
        <absolutize property="engine.jar.file"/>
        
        <!-- define the javac.classpath for the netbeans project -->
        <property 
            name="nb.custom.parameter" 
            value="-Dtrue=true"/>
            
            <echo message="${nb.custom.parameter}"/>
    </target>
    
    <!-- =======================================================================
      Clean-up
    ======================================================================== -->
    
    <!--
      Cleans the current working directory and the distributives directory.
      
      This target overrides the '-clean' target in common.xml, providing the 
      custom functionality that is required for correctly cleaning the product 
      package.
      
      In addition to the standard behavior the product package distributive file 
      is removed from the distributives directory.
      
      This target is not intended to be called directly.
    -->
    <target name="-clean" depends=".clean,-clean-engine">
        <!-- remove the product's distributive file from the distributives 
             directory -->
        <delete file="${dist.dir}/${product.jar.file}"/>
    </target>
    
    <!--
      Cleans the engine.
      
      It runs the 'clean' target on the engine's build script.
      
      This target is only executed if the the ${build.engine} property was 
      set to 'true'.
      
      This target is not intended to be called directly.
    -->
    <target name="-clean-engine" depends="init" if="do.build.engine">
        <exec executable="${ant.executable}" 
              dir="${engine.dir}" 
              failonerror="false">
            <arg value="clean"/>
            
            <arg value="-Dwork.dir=${engine.work.dir}"/>
            <arg value="-Ddist.dir=${engine.dist.dir}"/>
            
            <arg value="-Dbuild.native=false"/>
            
            <arg value="-Dskip.build.custom.tasks=true"/>
            <arg value="-Dcustom.tasks.cls=${custom.tasks.cls}"/>
            
            <arg line="-propertyfile ${properties.file}"/>
        </exec>
    </target>
    
    <!-- =======================================================================
      Check-out
    ======================================================================== -->
    
    <!--
      The functionality of the checkout procedure for the product package is 
      indentical to the standard one, thus there is not need to override the 
      '-checkout' target, whosew default implementation is present in 
      common.xml.
    -->
    
    <!-- =======================================================================
      Build
    ======================================================================== -->
    
    <!--
      Builds the product package.
      
      This target overrides the '-build' target in common.xml, providing the 
      custom functionality that is required for correctly building the product 
      package.
      
      The build process for the grup package consists of five steps.
      1) The search-and-replace is run over the product's sources, based on the
         [token] => [value] pairs defined in ${product.params.N.token} and
         ${product.params.N.value}
      
      2) The product's icon is copied from its location to the product's package 
         directory structure and some metadata is calculated
      
      3) The product's localizing bundle is loaded and the product package 
         descriptor is generated
      
      4) The manifest for the product package is generated
      
      5) The package directory structure is jarred, digitally signed and moved 
         to the distributives directory
      
      This target is not intended to be called directly.
    -->
    <target name="-build" depends="-build-engine,.build">
        <!-- substitute the params in product's source tree (normally that would
             consist only of the icon and the localizing bundle -->
        <for-each from="1" to="${product.params.length}" property="i">
            <set property="current.token" 
                 source="product.params.${i}.token"/>
            <set property="current.value" 
                 source="product.params.${i}.value"/>
            
            <replace dir="${cvs.dir}" 
                     token="${current.token}" 
                     value="${current.value}"/>
        </for-each>
        
        <!-- init the required disk space -->
        <property name="product.disk.space" 
                  value="${product.disk.space.modificator}"/>
        
        <!-- fetch the configuration logic jars -->
        <mkdir dir="${work.dir}/${product.logic.dir}"/>
        <for-each from="1" to="${product.logic.length}" property="i">
            <!-- set the properties relevant to the current file -->
            <set property="current.uri" 
                 source="product.logic.${i}.uri"/>
            <set property="current.file" 
                 value="${work.dir}/${product.logic.dir}/${product.logic.file}"/>
            
            <get src="${current.uri}" dest="${current.file}"/>
            
            <!-- sign the current jar file -->
            <signjar jar="${current.file}" 
                     keystore="${jarsigner.keystore}"
                     storepass="${jarsigner.storepass}"
                     alias="${jarsigner.alias}"
                     maxmemory="${jarsigner.xmx}"/>
            
            <!-- calculate the metadata for the file -->
            <sizeof file="${current.file}" property="product.logic.${i}.size"/>
            <md5 file="${current.file}" property="product.logic.${i}.md5"/>
            <set property="product.logic.${i}.uri"
                 value="resource:${product.logic.dir}/${product.logic.file}"/>
        </for-each>
        
        <!-- fetch and repackage installation data zips -->
        <mkdir dir="${work.dir}/${product.data.dir}"/>
        <for-each from="1" to="${product.data.length}" property="i">
            <!-- define the path to the current working file and the temporary
                 directory which should be used for repackaging -->
            <set 
                property="current.file" 
                value="${work.dir}/${product.data.dir}/${product.data.file}"/>
            <set 
                property="current.temp" 
                value="${work.dir}/${product.data.dir}/tmpdir"/>
            <set property="current.uri" 
                 source="product.data.${i}.uri"/>
            <set property="current.packaged.uri" 
                 source="product.packaged.data.${i}.file"/>
            <set property="current.packaged.size.uri" 
                 source="product.packaged.data.${i}.size.file"/>
            <set property="current.size.file" 
                 value="${work.dir}/size"/>
            
            <condition property="do.package.data" value="true">
                <or>
                    <equals arg1="${package.data}" arg2="true"/>
                    <and>
                        <equals arg1="${package.data}" arg2="default"/>
                        <not>
                            <available file="${current.packaged.uri}"/>
                        </not>
                    </and>
                </or>
            </condition>
            <condition property="do.package.data" value="false">
                <or>
                    <equals arg1="${package.data}" arg2="false"/>
                    <and>
                        <equals arg1="${package.data}" arg2="default"/>
                        <available file="${current.packaged.uri}"/>
                    </and>
                </or>
            </condition>
            
            <!-- if the data needs to be packaged -->
            <if property="do.package.data" value="true">
                <get src="${current.uri}" dest="${current.file}"/>
                
                <!-- extract the zip file to a temporary directory -->
                <mkdir dir="${current.temp}"/>
                <unzip src="${current.file}" dest="${current.temp}"/>
                
                <!-- measure its size and add it to the required disk space -->
                <sizeof file="${current.temp}" property="current.disk.space"/>
                <sum arg1="${product.disk.space}" arg2="${current.disk.space}" 
                     property="product.disk.space"/>
                
                <!-- repackage (pack200, jar) and build files list -->
                <package directory="${current.temp}" file="${current.file}"/>
                
                <!-- if we need to release the packaged data - copy the file 
                     and the original size to the specified directory -->
                <if property="release.packaged.data" value="true">
                    <mkdir dir="${product.packaged.data.repository}"/>
                    
                    <set 
                        property="release.data.file"
                        value="${product.packaged.data.repository}/${product.release.data.file}"/>
                    <set 
                        property="release.size.file"
                        value="${release.data.file}.size"/>
                    
                    <copy file="${current.file}" 
                          tofile="${release.data.file}"/>
                    <echo 
                        message="product.packaged.data.${i}.real.size=${current.disk.space}" 
                        file="${release.size.file}"/>
                </if>
                
                <!-- remove the temporary directory -->
                <delete dir="${current.temp}"/>
            </if>
            
            <!-- if the data does not need to be packaged -->
            <if property="do.package.data" value="false">
                <copy file="${current.packaged.uri}" tofile="${current.file}"/>                              
                
                <!-- fetch the real size data -->
                <copy file="${current.packaged.size.uri}" 
                      tofile="${current.size.file}"/>
                <property file="${current.size.file}"/>
                
                <set property="current.disk.space" 
                     source="product.packaged.data.${i}.real.size"/>
                <sum arg1="${product.disk.space}" arg2="${current.disk.space}" 
                     property="product.disk.space"/>
            </if>
            
            <!-- sign the resulting jar file -->
            <signjar jar="${current.file}" 
                     keystore="${jarsigner.keystore}"
                     storepass="${jarsigner.storepass}"
                     alias="${jarsigner.alias}"
                     maxmemory="${jarsigner.xmx}"/>
            
            <!-- calculate the metadata for the file -->
            <sizeof file="${current.file}" property="product.data.${i}.size"/>
            <md5 file="${current.file}" property="product.data.${i}.md5"/>
            <set property="product.data.${i}.uri"
                 value="resource:${product.data.dir}/${product.data.file}"/>
        </for-each>
        
        <!-- fetch the icon -->
        <copy 
            file="${product.icon}" 
            tofile="${work.dir}/${product.icon.file}"/>
        <sizeof 
            file="${work.dir}/${product.icon.file}" 
            property="product.icon.size"/>
        <md5 
            file="${work.dir}/${product.icon.file}" 
            property="product.icon.md5"/>
        <set 
            property="product.icon.uri"
            value="resource:${product.icon.file}"/>
        
        <!-- load product's localizing bundle and generate descriptor -->
        <load-locales 
            basename="${product.bundle}" 
            list="product.locales.list"/>
        <product-descriptor 
            file="${work.dir}/${product.descriptor.file}"/>
        
        <!-- generate the manifest file -->
        <echo file="${work.dir}/${product.jar.manifest.file}" 
              message="Manifest-Version: " 
              append="false"/>
        <echo file="${work.dir}/${product.jar.manifest.file}" 
              message="1.0${line.separator}" 
              append="true"/>
        
        <echo file="${work.dir}/${product.jar.manifest.file}" 
              message="Product-Descriptor: " 
              append="true"/>
        <echo file="${work.dir}/${product.jar.manifest.file}" 
              message="${product.descriptor.file}${line.separator}" 
              append="true"/>
        
        <!-- create the distributive jar file -->
        <jar destfile="${work.dir}/${product.jar.file}" 
             compress="true" 
             manifest="${work.dir}/${product.jar.manifest.file}">
            <fileset dir="${work.dir}">
                <include name="${product.dir}"/>
                <include name="${product.dir}/**"/>
                <include name="${product.descriptor.file}"/>
            </fileset>
        </jar>
        
        <copy file="${work.dir}/${product.jar.file}" todir="${dist.dir}"/>
        
        <!-- sign it -->
        <signjar jar="${dist.dir}/${product.jar.file}" 
                 keystore="${jarsigner.keystore}"
                 storepass="${jarsigner.storepass}"
                 alias="${jarsigner.alias}"
                 maxmemory="${jarsigner.xmx}"/>
    </target>
    
    <!--
      Builds the engine.
      
      It runs the 'build-all' target on the engine's build script.
      
      This target is only executed if the the ${build.engine} property was 
      set to 'true'.
      
      This target is not intended to be called directly.
    -->
    <target name="-build-engine" depends="init" if="do.build.engine">
        <exec executable="${ant.executable}" 
              dir="${engine.dir}" 
              failonerror="true"
              failifexecutionfails="true"
              errorproperty="error.code">
            <arg value="build-all"/>
            
            <arg value="-Dwork.dir=${engine.work.dir}"/>
            <arg value="-Ddist.dir=${engine.dist.dir}"/>
            
            <arg value="-Dbuild.native=false"/>
            
            <arg value="-Dskip.build.custom.tasks=true"/>
            <arg value="-Dcustom.tasks.cls=${custom.tasks.cls}"/>
            
            <arg line="-propertyfile ${properties.file}"/>
        </exec>
    </target>
    
    <!-- =======================================================================
      Release
    ======================================================================== -->
    
    <!--
      Releases the product package to the registries server.
      
      This target overrides the '-release' target in common.xml, providing the 
      custom functionality that is required for correctly releasing the product 
      package.
      
      It is assumed that the product package has already been built, but a 
      dependency on the 'build' target is not defined, as it may be desirable 
      to build once and then release several times to different registries 
      servers.
      
      This target is not intended to be called directly.
    -->
    <target name="-release">
        <release-product url="${release.url}"
                         registry="${release.registry}"
                         uid="${release.parent.uid}"
                         version="${release.parent.version}"
                         platforms="${product.platforms}"
                         archive="${work.dir}/${product.jar.file}"/>
    </target>
    
    <!-- =======================================================================
      Default
    ======================================================================== -->
    
    <!--
      The default target. 
      
      Does nothing except printing the usage information.
    -->
    <target name="usage">
        <echo>
            This is the base build script for nbi product package and is not 
            intended to be called directly. In order to create a derivative 
            implementation script, see 
            ${basedir}/.templates/product-template.xml
        </echo>
    </target>
</project>
