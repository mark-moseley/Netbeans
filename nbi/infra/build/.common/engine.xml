<?xml version="1.0" encoding="UTF-8"?>
<!-- ===========================================================================
  The contents of this file are subject to the terms of the Common Development
  and Distribution License (the License). You may not use this file except in
  compliance with the License.
  
  You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  or http://www.netbeans.org/cddl.txt.
  
  When distributing Covered Code, include this CDDL Header Notice in each file
  and include the License file at http://www.netbeans.org/cddl.txt.
  If applicable, add the following below the CDDL Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyrighted [year] [name of copyright owner]"
  
  The Original Software is NetBeans. The Initial Developer of the Original
  Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  Microsystems, Inc. All Rights Reserved.
  
  $Id$
============================================================================ -->

<!--
  This is the base build script for nbi engine. 
-->
<project name="engine" default="usage" basedir=".">
    <property name="common.dir" value="${basedir}"/>
    
    <!-- import the most common properties -->
    <property file="${common.dir}/common.properties"/>
    
    <!-- import properties specific to the engine build scripts -->
    <property file="${common.dir}/engine.properties"/>
    
    <!-- import the common target library -->
    <import file="${common.dir}/common.xml" optional="false"/>
    
    <!-- =======================================================================
      Aggregates
    ======================================================================== -->
    <target name="build-all" depends="clean,checkout,build"/>
    
    <target name="release-all" depends="clean,checkout,build"/>
    
    <!-- =======================================================================
      Initialization
    ======================================================================== -->
    <!--
      An aggregating target, which allows the derivative scripts to define
      pre- and post-intitialization hooks. 
      
      It defines the dependencies on the '-pre-init', '-init' and '-post-init' 
      targets. The '-pre-init' and '-post-init' targets are empty "hooks" which 
      are meant to be overriden by derivative scripts, while '-init' contains 
      the actual initialization logic.
    -->
    <target name="init" depends="-pre-init,-init,-post-init"/>
    
    <!--
      An empty "hook" target, which allows derivative scripts to inject 
      custom functionality before initialization.
    -->
    <target name="-pre-init"/>
    
    <!--
      The main initialization routine. It defines a dependency on the common 
      initialization procedure and additionally initializes some 
      engine-specific custom tasks.
    -->
    <target name="-init" depends=".init">
        <!-- define custom ant tasks -->
        <taskdef
            name="release-engine"
            classname="org.netbeans.installer.infra.build.ant.ReleaseEngine"
            classpath="${custom.tasks.cls}"/>
    </target>
    
    <!--
      An empty "hook" target, which allows derivative scripts to inject custom 
      functionality after initialization.
    -->
    <target name="-post-init"/>
    
    <!-- =======================================================================
      Clean-up
    ======================================================================== -->
    <target name="clean" depends="init,-pre-clean,-clean,-post-clean"/>
    
    <target name="-pre-clean"/>
    
    <target name="-clean" depends=".clean">
        <delete file="${dist.dir}/${engine.dist.file.name}"/>
    </target>
    
    <target name="-post-clean"/>
    
    <target name=".clean-native" if="do.build.native">
        <antcall target=".clean-jni"/>
        <antcall target=".clean-launcher"/>
    </target>
    
    <target name=".clean-launcher" if="do.build.native"/>
    
    <!-- =======================================================================
      Check-out
    ======================================================================== -->
    <target name="checkout" 
            depends="init,-pre-checkout,-checkout,-post-checkout"/>
    
    <target name="-pre-checkout"/>
    
    <target name="-checkout" depends=".checkout"/>
    
    <target name="-post-checkout"/>
    
    <!-- =======================================================================
      Build
    ======================================================================== -->
    
    <!--
      Builds the engine and (optionally) its native components.
      
      It is assumed that the sources of the engine are already checked out, 
      but a dependency on the 'checkout' target is not defined as it may be 
      desirable to check-out the sources once and then rebuild the engine as 
      appropriate.
      
      The build process consists of three
    -->
    <target name="build" depends="init,-pre-build,-build,-post-build"/>
    
    <target name="-pre-build"/>
    
    <target name="-build" depends=".build">
        <signjar jar="${engine.dist.file}" 
                 keystore="${jarsigner.keystore}"
                 storepass="${jarsigner.storepass}"
                 alias="${jarsigner.alias}"
                 maxmemory="${jarsigner.xmx}"/>
        
        <move file="${engine.dist.file}" todir="${dist.dir}"/>
    </target>
    
    <target name="-post-build"/>
    
    <target name=".build-native" if="do.build.native">
        <antcall target=".build-jni"/>
        <antcall target=".build-launcher"/>
    </target>
    
    <target name=".build-launcher" if="do.build.native"/>
    
    <!-- =======================================================================
      Release
    ======================================================================== -->
    
    <!--
      Releases the engine to the registries server.
      
      It is assumed that the engine has already been built, but a dependency 
      on the 'build' target is not defined, as it may be desirable to build 
      once and then release several times to different registries servers.
      
      It is an aggregation target, it does not contain any functionality, but 
      defines dependencies on '-pre-release', '-release' and '-post-release' 
      targets. The '-pre-release' and '-post-release' target are empty hooks,
      which allow the derivative scripts to inject custom logic which will be 
      executed prior to the release process or after it. The '-release' target 
      contains the code which actually releases the engine.
    -->
    <target name="release" depends="init,-pre-release,-release,-post-release"/>
    
    <!--
      An empty hook. 
      
      It allows the derivative scripts to inject custom logic which will be 
      executed prior to releasing the engine.
      
      This target is not intended to be called directly.
    -->
    <target name="-pre-release"/>
    
    <!--
      Releases the engine to the registries server.
      
      For a detailed description of this target's functionality see the 
      description of the 'release' target. This is the implementation target
      and should not be used outside of the context.
      
      This target is not intended to be called directly.
    -->
    <target name="-release">
        <release-engine url="${release.url}"
                        archive="${dist.dir}/${engine.dist.file.name}"/>
    </target>
    
    <!--
      An empty hook. 
      
      It allows the derivative scripts to inject custom logic which will be 
      executed after releasing the engine.
      
      This target is not intended to be called directly.
    -->
    <target name="-post-release"/>
    
    <!-- =======================================================================
      Default
    ======================================================================== -->
    
    <!--
      The default target. 
      
      Does nothing, except printing the usage information.
    -->
    <target name="usage">
        <echo>
            This is the base build script for nbi engine and is not intended to
            be called directly. In order to create a derivative implementation 
            script, see 
                ${basedir}/.templates/engine-template.xml
        </echo>
    </target>
</project>
