<?xml version="1.0" encoding="UTF-8"?>
<!-- ===========================================================================
  The contents of this file are subject to the terms of the Common Development
  and Distribution License (the License). You may not use this file except in
  compliance with the License.
  
  You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  or http://www.netbeans.org/cddl.txt.
  
  When distributing Covered Code, include this CDDL Header Notice in each file
  and include the License file at http://www.netbeans.org/cddl.txt.
  If applicable, add the following below the CDDL Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyrighted [year] [name of copyright owner]"
  
  The Original Software is NetBeans. The Initial Developer of the Original
  Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  Microsystems, Inc. All Rights Reserved.
  
  $Id$
============================================================================ -->

<!--
  This is the base build script for nbi engine. 
  
  It is not intended to be used directly, but to be imported into derivative
  implementaion scripts, which will provide properties' values that are 
  specific the concrete engine implementation. The derivative scripts may also
  provide some additional functionality that is required by their respective
  engine implementations.
  
  This script exposes five primary targets: 'init', 'clean', 'checkout', 
  'build' and 'release'; as well as two aggregate targets: 'build-all', 
  which tranlates into 'init', 'clean', 'checkout', 'build', and 
  'release-all' - 'init', 'clean', 'checkout', 'build', 'release'. For the 
  detailed description of the functionality of these targets, consult the 
  corresponsing documentation.
-->
<project name="engine" default="usage" basedir=".">
    <!-- a default value for the ${common.dir} property, which allows the user 
         to see the usage information is he calls this script directly and not
         via a derivative (which is the proper way to do this) -->
    <property name="common.dir" value="${basedir}"/>
    
    <!-- import the common properties -->
    <property file="${common.dir}/common.properties"/>
    
    <!-- import properties specific to the engine's build script -->
    <property file="${common.dir}/engine.properties"/>
    
    <!-- import the common target library -->
    <import file="${common.dir}/common.xml" optional="false"/>
    
    <!-- =======================================================================
      Aggregates
    ======================================================================== -->
    
    <!--
      Cleans and builds the engine.
      
      This is an aggregation target, which does not contain any functionality,
      but defines dependencies on the 'clean', 'checkout' and 'build' targets.
      For more details, please consult the documentation for these targets.
    -->
    <target name="build-all" depends="clean,checkout,build"/>
    
    <!--
      Cleans, builds and releases the engine.
      
      This is an aggregation target, which does not contain any functionality,
      but defines dependencies on the 'clean', 'checkout', 'build' and 
      'release' targets. For more details, please consult the documentation 
      for these targets.
    -->
    <target name="release-all" depends="clean,checkout,build,release"/>
    
    <!-- =======================================================================
      Initialization
    ======================================================================== -->
    
    <!--
      Initializes the engine's build script.
      
      In addition to the standard initialization routine, this target defines
      several custom ant tasks, which are specific to the engine's build 
      script.
      
      This is an aggregation target, it does not contain any functionality, but 
      defines dependencies on '-pre-init', '-init' and '-post-init' 
      targets. The '-pre-init' and '-post-init' targets are empty hooks,
      which allow derivative scripts to inject custom logic which will be 
      executed prior to the initialization process or after it. The '-init' 
      target contains the code which actually initializes the script.
    -->
    <target name="init" depends="-pre-init,-init,-post-init"/>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed prior to the script's initialization.
      
      This target is not intended to be called directly.
    -->
    <target name="-pre-init"/>
    
    <!--
      Initializes the engine's build script.
      
      For a detailed description of this target's functionality see the 
      description of the 'init' target. This is an implementation target
      and should not be used outside of the context.
      
      This target is not intended to be called directly.
    -->
    <target name="-init" depends=".init">
        <!-- define custom ant tasks -->
        <taskdef
            name="release-engine"
            classname="org.netbeans.installer.infra.build.ant.ReleaseEngine"
            classpath="${custom.tasks.cls}"/>
    </target>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed after the script's initialization.
      
      This target is not intended to be called directly.
    -->
    <target name="-post-init"/>
    
    <!-- =======================================================================
      Clean-up
    ======================================================================== -->
    
    <!--
      Cleans the current working directory and the distributives directory.
      
      For the working directory, first special clean-up procedures are executed
      on the native components (literally this means removing the binaries of
      the jni libraries and launchers) and the engine's netbeans project (this
      implies executing the 'clean' target on the project's build script. Then
      the whole working directory is erased.
      
      Only the engine distributive file is remove from the distributives 
      directory, which allows to reuse the same directory for multiple 
      projects.
      
      This is an aggregation target, it does not contain any functionality, but 
      defines dependencies on '-pre-clean', '-clean' and '-post-clean' 
      targets. The '-pre-clean' and '-post-clean' targets are empty hooks,
      which allow derivative scripts to inject custom logic which will be 
      executed prior to the clean process or after it. The '-clean' target 
      contains the code which actually builds the engine.
    -->
    <target name="clean" depends="init,-pre-clean,-clean,-post-clean"/>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed prior to cleaning the engine's local working directory.
      
      This target is not intended to be called directly.
    -->
    <target name="-pre-clean"/>
    
    <!--
      Cleans the current working directory and the distributives directory.
      
      For a detailed description of this target's functionality see the 
      description of the 'clean' target. This is an implementation target
      and should not be used outside of the context.
      
      This target is not intended to be called directly.
    -->
    <target name="-clean" depends=".clean">
        <!-- remove the engine's distributive file from the distributives 
             directory -->
        <delete file="${dist.dir}/${engine.dist.file.name}"/>
    </target>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed after cleaning the engine's local working directory.
      
      This target is not intended to be called directly.
    -->
    <target name="-post-clean"/>
    
    <!--
      Cleans the native components of the engine.
      
      This target overrides the '.clean-native' target defined in common.xml,
      as the engine's native components slightly differ from the defaults. 
      Besides cleaning the jni libraries, the engine also needs to clean the 
      native launcher stubs.
      
      This target is antcall'ed in a loop over the list of platforms from the 
      '.clean' target in common.xml.
      
      This target is only executed if the the ${build.native} property was set 
      to 'true'.
      
      This target is not intended to be called directly.
    -->
    <target name=".clean-native" if="do.build.native">
        <antcall target=".clean-jni"/>
        <antcall target=".clean-launcher"/>
    </target>
    
    <!--
      Cleans the native launcher stub for the given platform.
      
      This target is antcall'ed as part of the call to the '.clean-native' 
      target, and expects the ${platform} property to contain the code name of
      the platform for which the launcher should be built.
      
      It simply removes the current launcher stub.
      
      This target is only executed if the the ${build.native} property was set 
      to 'true'.
      
      This target is not intended to be called directly.
    -->
    <target name=".clean-launcher" if="do.build.native">
        <!-- does nothing at the moment -->
    </target>
    
    <!-- =======================================================================
      Check-out
    ======================================================================== -->
    
    <!--
      Checks out the the engine's sources from the CVS repository.
      
      The functionality of this target is identical to the standard one, which
      would checkout ${cvs.module}/${cvs.path} from trunk, unless ${cvs.branch}
      is specified; or copy those from ${sources.location} if 
      ${checkout.sources} is set to 'false'.
      
      This is an aggregation target, it does not contain any functionality, but 
      defines dependencies on '-pre-checkout', '-checkout' and '-post-checkout' 
      targets. The '-pre-checkout' and '-post-checkout' target are empty hooks,
      which allow derivative scripts to inject custom logic which will be 
      executed prior to the check-out process or after it. The '-checkout' 
      target contains the code which actually checks out the sources.
    -->
    <target name="checkout" 
            depends="init,-pre-checkout,-checkout,-post-checkout"/>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed prior to checking out the engine's sources.
      
      This target is not intended to be called directly.
    -->
    <target name="-pre-checkout"/>
    
    <!--
      Checks out the the engine's sources from the CVS repository.
      
      For a detailed description of this target's functionality see the 
      description of the 'checkout' target. This is an implementation target
      and should not be used outside of the context.
      
      This target is not intended to be called directly.
    -->
    <target name="-checkout" depends=".checkout"/>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed after checking out the engine's sources.
      
      This target is not intended to be called directly.
    -->
    <target name="-post-checkout"/>
    
    <!-- =======================================================================
      Build
    ======================================================================== -->
    
    <!--
      Builds the engine and (optionally) its native components.
      
      It is assumed that the sources of the engine are already checked out, 
      but a dependency on the 'checkout' target is not defined as it may be 
      desirable to check-out the sources once and then rebuild the engine as 
      appropriate.
      
      The build process consists of three steps: first, the native components 
      of the engine (jni libraries and native launcher stubs) are built (if it
      is required), then the engine's netbeans project is compiled and 
      packaged, last the engine jar file is digitally signed and moved to the
      distributives directory.
      
      This is an aggregation target, it does not contain any functionality, but 
      defines dependencies on '-pre-build', '-build' and '-post-build' 
      targets. The '-pre-build' and '-post-build' target are empty hooks,
      which allow derivative scripts to inject custom logic which will be 
      executed prior to the build process or after it. The '-build' target 
      contains the code which actually builds the engine.
    -->
    <target name="build" depends="init,-pre-build,-build,-post-build"/>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed prior to building the engine.
      
      This target is not intended to be called directly.
    -->
    <target name="-pre-build"/>
    
    <!--
      Builds the engine and (optionally) its native components.
      
      For a detailed description of this target's functionality see the 
      description of the 'build' target. This is an implementation target
      and should not be used outside of the context.
      
      This target is not intended to be called directly.
    -->
    <target name="-build" depends=".build">
        <!-- digitally sign the built binary -->
        <signjar jar="${engine.dist.file}" 
                 keystore="${jarsigner.keystore}"
                 storepass="${jarsigner.storepass}"
                 alias="${jarsigner.alias}"
                 maxmemory="${jarsigner.xmx}"/>
        
        <!-- move the built binary to the distributives directory -->
        <move file="${engine.dist.file}" todir="${dist.dir}"/>
    </target>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed after building the engine.
      
      This target is not intended to be called directly.
    -->
    <target name="-post-build"/>
    
    <!--
      Builds the native components of the engine.
      
      This target overrides the '.build-native' target defined in common.xml,
      as the engine's native components slightly differ from the defaults. 
      Besides building the jni libraries, the engine also needs to build the 
      native launcher stubs, which will later be used to create redistributable 
      bundles.
      
      This target is antcall'ed in a loop over the list of platforms from the 
      '.build' target in common.xml.
      
      This target is only executed if the the ${build.native} property was set 
      to 'true'.
      
      This target is not intended to be called directly.
    -->
    <target name=".build-native" if="do.build.native">
        <antcall target=".build-jni"/>
        <antcall target=".build-launcher"/>
    </target>
    
    <!--
      Builds the native launcher stub for the given platform.
      
      This target is antcall'ed as part of the call to the '.build-native' 
      target, and expects the ${platform} property to contain the code name of
      the platform for which the launcher should be built.
      
      It connects to the registered satellite machine for the current platform
      using the 'ssh' utility, checks out the launcher's sources and builds it.
      The built binary is then copied back to the host machine using 'scp'.
      
      This target is only executed if the the ${build.native} property was set 
      to 'true'.
      
      This target is not intended to be called directly.
    -->
    <target name=".build-launcher" if="do.build.native">
        <!-- does nothing at the moment -->
    </target>
    
    <!-- =======================================================================
      Release
    ======================================================================== -->
    
    <!--
      Releases the engine to the registries server.
      
      It is assumed that the engine has already been built, but a dependency 
      on the 'build' target is not defined, as it may be desirable to build 
      once and then release several times to different registries servers.
      
      This is an aggregation target, it does not contain any functionality, but 
      defines dependencies on '-pre-release', '-release' and '-post-release' 
      targets. The '-pre-release' and '-post-release' target are empty hooks,
      which allow derivative scripts to inject custom logic which will be 
      executed prior to the release process or after it. The '-release' target 
      contains the code which actually releases the engine.
    -->
    <target name="release" depends="init,-pre-release,-release,-post-release"/>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed prior to releasing the engine.
      
      This target is not intended to be called directly.
    -->
    <target name="-pre-release"/>
    
    <!--
      Releases the engine to the registries server.
      
      For a detailed description of this target's functionality see the 
      description of the 'release' target. This is an implementation target
      and should not be used outside of the context.
      
      This target is not intended to be called directly.
    -->
    <target name="-release">
        <release-engine url="${release.url}"
                        archive="${dist.dir}/${engine.dist.file.name}"/>
    </target>
    
    <!--
      An empty hook. 
      
      It allows derivative scripts to inject custom logic which will be 
      executed after releasing the engine.
      
      This target is not intended to be called directly.
    -->
    <target name="-post-release"/>
    
    <!-- =======================================================================
      Default
    ======================================================================== -->
    
    <!--
      The default target. 
      
      Does nothing except printing the usage information.
    -->
    <target name="usage">
        <echo>
            This is the base build script for nbi engine and is not intended to
            be called directly. In order to create a derivative implementation 
            script, see 
            ${basedir}/.templates/engine-template.xml
        </echo>
    </target>
</project>
