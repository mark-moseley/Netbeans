# path to the local working directory - the directory where all building will 
# occur (checkouts will go there, .class files will be created there, etc.)
# * it is meant to be overriden from command line
# * it can be both an absolute and a relative path on any unix environment, but
#   must be a relative path on windows, due to the fact that scp utility will
#   fail if it absolute (i.e. contains ':')
work.dir=./build

# path to the local distributive directory - the resultign distributive file 
# will be moved to this directory if the ${move.to.dist} property is set to 
# "true".
# * it is meant to be overriden from command line
dist.dir=./dist

# controls whether the distributive file should be moved to ${dist.dir}
# * this does not affect the release process as the engine is released directly 
#   from ${work.dir} (see also ${engine.jar.file})
# * this property is boolean - "true"/"false" are the valid values (in fact, 
#   any value other than "true" is considered "false")
move.to.dist=true

# location of custom tasks (and other utilities used in build process) sources
# and the destination directory for their build
custom.tasks.src=${.common.dir}/../.ant-lib/src
custom.tasks.cls=${java.io.tmpdir}/.ant-lib/build/classes

# cvs coordinates of the sources we're interested in building: root, branch and
# module. if ${cvs.branch} is empty then sources will be checked out from trunk
cvs.root=:pserver:anoncvs@netbeans.org:/cvs
cvs.branch=
cvs.module=nbi

# controls whether the sources will be checked out ('true') or just copied from
# ${sources.dir}
checkout.sources=true

# the location of the local (already checked out) sources
sources.dir=D:/work/nbi

# this is a simple shorthand to the root of checked-out sources
cvs.dir=${work.dir}/${cvs.module}/${cvs.path}

# names of targets in component's (or engine's) build script that will be 
# called as part of the build process
nb.target.clean=clean
nb.target.build=jar

# whether to build anything native or not (true|false), defaults to true
build.native=true

# native directory name - directory where the component's (or engine's) native 
# libraries' sources reside
native.dir.name=native

# directory where the properties depicting remote machines reside
native.properties.dir=${.common.dir}/${native.dir.name}

# distributive directory name - the directory where the compiled files (.jar, 
# .dll, .so, .dylib, and so on) reside 
# * this is not the same as ${dist.dir} this property tells the build script 
#   where to look for the output or nb projects' builds
dist.dir.name=dist

# this property (name => value) will be passed to the project's build script, 
# telling it where the java platform resides
nb.platform.home.name=platforms.JDK_1.5.home
nb.platform.home.value=${java.home}/..

# this property (name => value) will be passed to the project's build script, 
# telling it not to build native library for the current platform, as we've 
# done this already (or the user chose to skip building of native libraries
# altogether)
nb.ignore.native.name=ignore.native
nb.ignore.native.value=true

# this property (name => value) will be passed to the project's build script, 
# telling it not to re-build projects they depend on, since we've done this
# already
nb.no.dependencies.name=no.dependencies
nb.no.dependencies.value=true

# these properties control the release step for the components, groups and 
# engine (note that this step is not present in the common target library, 
# since the exact procedure is different for these project types)
release.url=
release.registry=
release.parent.uid=
release.parent.version=

# these are security related properties - they are used when signing jar files.
# * all of them MUST be overriden from the command line
jarsigner.keystore=
jarsigner.storepass=
jarsigner.alias=

# these properties control the environment for the jarsigner process
jarsigner.xmx=1024m

# these properties control the environment for the pack200 and unpack200 
# processes
pack200.xmx=768m
pack200.perm.size=32m
pack200.max.perm.size=512m
