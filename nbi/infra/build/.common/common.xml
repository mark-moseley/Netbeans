<?xml version="1.0" encoding="UTF-8"?>
<!-- ===========================================================================
    The contents of this file are subject to the terms of the Common Development
    and Distribution License (the License). You may not use this file except in
    compliance with the License.
    
    You can obtain a copy of the License at http://www.netbeans.org/cddl.html
    or http://www.netbeans.org/cddl.txt.
    
    When distributing Covered Code, include this CDDL Header Notice in each file
    and include the License file at http://www.netbeans.org/cddl.txt.
    If applicable, add the following below the CDDL Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyrighted [year] [name of copyright owner]"
    
    The Original Software is NetBeans. The Initial Developer of the Original
    Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
    Microsystems, Inc. All Rights Reserved.
    
    $Id$
============================================================================ -->

<!--
    This is a target library which is intended to be used by other build 
    scripts, currently - engine, component and group. It contains utility
    targets which perform the required initialization, clean-up and build 
    functionality.
-->
<project name="build-common" default="usage" basedir=".">
    <!-- load the properties common to all build scripts -->
    <property file="${common.dir}/common.properties"/>
    
    <!-- =======================================================================
        Initialization
    ======================================================================== -->
    <!--
        This target performs the default initialization, all custom ant tasks 
        are defined here. It also sets some properties which control the flow
        of the build process.
    -->
    <target name="-init">
        <!-- build custom ant tasks -->
        <delete dir="${lib.cls}"/>
        <mkdir dir="${lib.cls}"/>
        <javac srcdir="${lib.src}" destdir="${lib.cls}" debug="true"/>
        
        <!-- define custom ant tasks -->
        <taskdef name="for-each" 
                 classname="org.netbeans.installer.infra.build.ant.ForEach" 
                 classpath="${lib.cls}"/>
        <taskdef name="set-property" 
                 classname="org.netbeans.installer.infra.build.ant.SetProperty" 
                 classpath="${lib.cls}"/>
        <taskdef name="package" 
                 classname="org.netbeans.installer.infra.build.ant.Package" 
                 classpath="${lib.cls}"/>
        <taskdef name="sizeof" 
                 classname="org.netbeans.installer.infra.build.ant.SizeOf" 
                 classpath="${lib.cls}"/>
        <taskdef name="sum" 
                 classname="org.netbeans.installer.infra.build.ant.Sum" 
                 classpath="${lib.cls}"/>
        <taskdef name="concat" 
                 classname="org.netbeans.installer.infra.build.ant.Concat" 
                 classpath="${lib.cls}"/>
        <taskdef name="sha1" 
                 classname="org.netbeans.installer.infra.build.ant.Sha1" 
                 classpath="${lib.cls}"/>
        <taskdef name="md5" 
                 classname="org.netbeans.installer.infra.build.ant.Md5" 
                 classpath="${lib.cls}"/>
        <taskdef name="crc32" 
                 classname="org.netbeans.installer.infra.build.ant.Crc32" 
                 classpath="${lib.cls}"/>
        <taskdef name="load-locales" 
                 classname="org.netbeans.installer.infra.build.ant.LoadLocales" 
                 classpath="${lib.cls}"/>
        <taskdef name="evaluate" 
                 classname="org.netbeans.installer.infra.build.ant.Evaluate" 
                 classpath="${lib.cls}"/>
        <taskdef name="component-descriptor" 
                 classname="org.netbeans.installer.infra.build.ant.ComponentDescriptor" 
                 classpath="${lib.cls}"/>
        <taskdef name="group-descriptor" 
                 classname="org.netbeans.installer.infra.build.ant.GroupDescriptor" 
                 classpath="${lib.cls}"/>
        <taskdef name="update-group" 
                 classname="org.netbeans.installer.infra.build.ant.UpdateGroup" 
                 classpath="${lib.cls}"/>
        <taskdef name="update-component" 
                 classname="org.netbeans.installer.infra.build.ant.UpdateComponent" 
                 classpath="${lib.cls}"/>
        <taskdef name="update-engine" 
                 classname="org.netbeans.installer.infra.build.ant.UpdateEngine" 
                 classpath="${lib.cls}"/>
        
        <!-- decide whether to checkout sources from trunk or a branch --> 
        <condition property="checkout.from.trunk">
            <equals arg1="${cvs.branch}" arg2=""/>
        </condition>
        
        <!-- decide whether to build native (jni) libraries or not -->
        <condition property="build.native.libraries">
            <equals arg1="${build.native}" arg2="true"/>
        </condition>
    </target>
    
    <!-- =======================================================================
        Clean-up
    ======================================================================== -->
    <!--
        This is the main clean-up target, it cleans the native libraries, tries
        to run cleanup on the java project and finally deletes the checked out 
        sources.
    -->
    <target name="-clean" depends="-init,.clean-native,.clean-java">
        <!-- delete the checked out sources -->
        <delete dir="${work.dir}/${cvs.module}/${cvs.path}"/>
    </target>
    
    <!--
        This target cleans the native libraries. This target is only executed 
        if the ${build.native} property was set to 'true'. It iterates over the 
        list of platforms supplied via ${platforms} and calls the utility 
        target (which actually performs the clean-up procedure) for each.
    -->
    <target name=".clean-native" depends="init" if="build.native.libraries">
        <for-each list="${platforms}" property="platform">
            <antcall target="..clean-native"/>
        </for-each>
    </target>
    
    <!--
        This target removes the locally cached native library for a given 
        platform.
    -->
    <target name="..clean-native">
        <!-- load properties pertaining to the given platform -->
        <property file="${native.properties.dir}/${platform}.properties"/>
        <property file="${native.properties.dir}/native.properties"/>
        
        <!-- delete the locally cached file -->
        <delete dir="${scp.local.file}"/>
    </target>
    
    <!--
        This target cleans the java part of the project. It tries to execute the
        'clean' target on the project's build script. It does not really care if
        the target fails.
    -->
    <target name=".clean-java" depends="-init">
        <!-- run the 'clean' target on the project's build script -->
        <subant buildpath="${cvs.dir}" 
                target="${nb.target.clean}" 
                failonerror="false">
            <property name="${nb.platform.home.name}" 
                      value="${nb.platform.home.value}"/>
            <property name="${nb.ignore.native.name}" 
                      value="${nb.ignore.native.value}"/>
            <property name="${nb.no.dependencies.name}" 
                      value="${nb.no.dependencies.value}"/>
        </subant>
    </target>
    
    <!-- =======================================================================
        Check out
    ======================================================================== -->
    <!-- 
        This is the main check out target, it just depends on two utility 
        targets - one checks out from trunk, the other from a branch. Each of 
        them has a execution condition attached.
    -->
    <target name="-checkout" depends="-init,.checkout-trunk,.checkout-branch"/>
    
    <!--
        Checks out the given sources from trunk.
    -->
    <target name=".checkout-trunk" if="checkout.from.trunk">
        <!-- run the cvs checkout command -->
        <cvs cvsroot="${cvs.root}" 
             command="checkout" 
             package="${cvs.module}/${cvs.path}" 
             dest="${work.dir}"/>
    </target>
    
    <!--
        Checks out the given sources from a given branch.
    -->
    <target name=".checkout-branch" unless="checkout.from.trunk">
        <!-- run the cvs checkout command -->
        <cvs cvsroot="${cvs.root}" 
             command="checkout" 
             package="${cvs.module}/${cvs.path}" 
             tag="${cvs.branch}" 
             dest="${work.dir}"/>
    </target>
    
    <!-- =======================================================================
        Build
    ======================================================================== -->
    <!-- 
        This is the main build target, it invokes the check out procedure, then
        builds the native libraries for the project and finally the java part
        of it.
    -->
    <target name="-build" depends="-init,-checkout,.build-native,.build-java"/>
    
    <!--
        Builds the mative libraries for the project. This target is only 
        executed if the ${build.native} property was set to 'true'. It iterates 
        over the list of platforms supplied via ${platforms} and calls the 
        utility target (which actually performs the build procedure) for each.
    -->
    <target name=".build-native" depends="-init" if="build.native.libraries">
        <for-each list="${platforms}" property="platform">
            <antcall target="..build-native"/>
        </for-each>
    </target>
    
    <!-- 
        Performs the native library build procedure for a given platform.
    -->
    <target name="..build-native">
        <!-- load properties pertaining to the given platform -->
        <property file="${native.properties.dir}/${platform}.properties"/>
        <property file="${native.properties.dir}/native.properties"/>
        
        <!-- run the ssh command - it is expected that it will build 
             everything -->
        <exec executable="${ssh.executable}" failonerror="true">
            <arg line="${ssh.arguments}"/>
            <arg value="${ssh.command}"/>
        </exec>
        
        <!-- run the scp command to copy the resulting file back to the 
             host system -->
        <mkdir dir="${scp.local.dir}"/>
        <exec executable="${scp.executable}" failonerror="true">
            <arg line="${scp.arguments}"/>
            <arg value="${scp.remote.dir}/${dist.file}"/>
            <arg value="${scp.local.dir}/${dist.file}"/>
        </exec>
    </target>
    
    <!--
        Builds the java part of the project. It simply invokes the 'build' 
        target on the project's build script. The target will fail if this 
        call's execution fails.
    -->
    <target name=".build-java" depends="init">
        <!-- run the 'build' target on the project's build script -->
        <subant buildpath="${cvs.dir}" 
                target="${nb.target.build}">
            <property name="${nb.platform.home.name}" 
                      value="${nb.platform.home.value}"/>
            <property name="${nb.ignore.native.name}" 
                      value="${nb.ignore.native.value}"/>
            <property name="${nb.no.dependencies.name}" 
                      value="${nb.no.dependencies.value}"/>
        </subant>
    </target>
    
    <!-- =======================================================================
        Default Target
    ======================================================================== -->
    <target name="usage">
        <echo>
            This build script is a targets library and should not be used 
            directly. See ../engine/build.xml and ../component/build.xml
            for usage examples.
        </echo>
    </target>
</project>
