<?xml version="1.0" encoding="UTF-8"?>
<!-- ===========================================================================
    The contents of this file are subject to the terms of the Common Development
    and Distribution License (the License). You may not use this file except in
    compliance with the License.
    
    You can obtain a copy of the License at http://www.netbeans.org/cddl.html
    or http://www.netbeans.org/cddl.txt.
    
    When distributing Covered Code, include this CDDL Header Notice in each file
    and include the License file at http://www.netbeans.org/cddl.txt.
    If applicable, add the following below the CDDL Header, with the fields
    enclosed by brackets [] replaced by your own identifying information:
    "Portions Copyrighted [year] [name of copyright owner]"
    
    The Original Software is NetBeans. The Initial Developer of the Original
    Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
    Microsystems, Inc. All Rights Reserved.
    
    $Id$
============================================================================ -->
<project name="build-common" default="usage" basedir=".">
    <property file="${common.dir}/common.properties"/>
    
    <!-- =======================================================================
        Initialization
    ======================================================================== -->
    <target name="-init">
        <delete dir="${lib.cls}"/>
        <mkdir dir="${lib.cls}"/>
        <javac srcdir="${lib.src}" destdir="${lib.cls}" debug="true"/>
        
        <taskdef name="for-each" 
                 classname="org.netbeans.installer.infra.build.ant.ForEach" 
                 classpath="${lib.cls}"/>
        <taskdef name="set-property" 
                 classname="org.netbeans.installer.infra.build.ant.SetProperty" 
                 classpath="${lib.cls}"/>
        <taskdef name="package" 
                 classname="org.netbeans.installer.infra.build.ant.Package" 
                 classpath="${lib.cls}"/>
        <taskdef name="sizeof" 
                 classname="org.netbeans.installer.infra.build.ant.SizeOf" 
                 classpath="${lib.cls}"/>
        <taskdef name="sum" 
                 classname="org.netbeans.installer.infra.build.ant.Sum" 
                 classpath="${lib.cls}"/>
        <taskdef name="concat" 
                 classname="org.netbeans.installer.infra.build.ant.Concat" 
                 classpath="${lib.cls}"/>
        <taskdef name="sha1" 
                 classname="org.netbeans.installer.infra.build.ant.Sha1" 
                 classpath="${lib.cls}"/>
        <taskdef name="md5" 
                 classname="org.netbeans.installer.infra.build.ant.Md5" 
                 classpath="${lib.cls}"/>
        <taskdef name="crc32" 
                 classname="org.netbeans.installer.infra.build.ant.Crc32" 
                 classpath="${lib.cls}"/>
        <taskdef name="load-locales" 
                 classname="org.netbeans.installer.infra.build.ant.LoadLocales" 
                 classpath="${lib.cls}"/>
        <taskdef name="evaluate" 
                 classname="org.netbeans.installer.infra.build.ant.Evaluate" 
                 classpath="${lib.cls}"/>
        <taskdef name="descriptor" 
                 classname="org.netbeans.installer.infra.build.ant.Descriptor" 
                 classpath="${lib.cls}"/>
        
        <condition property="checkout.from.trunk">
            <equals arg1="${cvs.branch}" arg2=""/>
        </condition>
        <condition property="build.native.libraries">
            <equals arg1="${has.native}" arg2="true"/>
        </condition>
    </target>
    
    <!-- =======================================================================
        Clean-up
    ======================================================================== -->
    <target name="-clean" depends="-init,.clean-native,.clean-java">
        <delete dir="${work.dir}/${cvs.module}"/>
    </target>
    
    <target name=".clean-native" depends="init" if="build.native.libraries">
        <for-each list="${platforms}" property="platform">
            <antcall target="..clean-native"/>
        </for-each>
    </target>
    
    <target name="..clean-native">
        <property file="${native.dir}/${platform}.properties"/>
        <property file="${native.dir}/native.properties"/>
        
        <delete dir="${scp.local.file}"/>
    </target>
    
    <target name=".clean-java" depends="-init">
        <subant buildpath="${work.dir}/${cvs.module}/${cvs.path}" 
                target="${nb.target.clean}" 
                failonerror="false">
            <property name="${nb.platform.home.name}" 
                      value="${nb.platform.home.value}"/>
            <property name="${nb.ignore.native.name}" 
                      value="${nb.ignore.native.value}"/>
            <property name="${nb.no.dependencies.name}" 
                      value="${nb.no.dependencies.value}"/>
        </subant>
        <delete dir="${work.dir}/${cvs.module}/${cvs.path}"/>
    </target>
    
    <!-- =======================================================================
        Checkout
    ======================================================================== -->
    <target name="-checkout" depends="-init,.checkout-trunk,.checkout-branch"/>
    
    <target name=".checkout-trunk" if="checkout.from.trunk">
        <cvs cvsroot="${cvs.root}" 
             command="checkout" 
             package="${cvs.module}/${cvs.path}" 
             dest="${work.dir}"/>
    </target>
    
    <target name=".checkout-branch" unless="checkout.from.trunk">
        <cvs cvsroot="${cvs.root}" 
             command="checkout" 
             package="${cvs.module}/${cvs.path}" 
             tag="${cvs.branch}" 
             dest="${work.dir}"/>
    </target>
    
    <!-- =======================================================================
        Build
    ======================================================================== -->
    <target name="-build" depends="-init,-checkout,.build-native,.build-java"/>
    
    <target name=".build-native" depends="-init" if="build.native.libraries">
        <for-each list="${platforms}" property="platform">
            <antcall target="..build-native"/>
        </for-each>
    </target>
    
    <target name="..build-native">
        <property file="${common.dir}/${native.dir}/${platform}.properties"/>
        <property file="${common.dir}/${native.dir}/native.properties"/>
        
        <exec executable="${ssh.executable}" failonerror="true">
            <arg line="${ssh.arguments}"/>
            <arg value="${ssh.command}"/>
        </exec>
        
        <mkdir dir="${scp.local.dir}"/>
        <exec executable="${scp.executable}" failonerror="true">
            <arg line="${scp.arguments}"/>
            <arg value="${scp.remote.dir}/${dist.file}"/>
            <arg value="${scp.local.dir}/${dist.file}"/>
        </exec>
    </target>
    
    <target name=".build-java" depends="init">
        <subant buildpath="${work.dir}/${cvs.module}/${cvs.path}" 
                target="${nb.target.build}">
            <property name="${nb.platform.home.name}" 
                      value="${nb.platform.home.value}"/>
            <property name="${nb.ignore.native.name}" 
                      value="${nb.ignore.native.value}"/>
            <property name="${nb.no.dependencies.name}" 
                      value="${nb.no.dependencies.value}"/>
        </subant>
    </target>
    
    <!-- =======================================================================
        Default Target
    ======================================================================== -->
    <target name="usage">
        <echo>
            This build script is a targets library and should not be used 
            directly. See ../engine/build.xml and ../component/build.xml
            for usage examples.
        </echo>
    </target>
</project>
