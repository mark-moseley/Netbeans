<?xml version="1.0" encoding="UTF-8"?>
<!-- ===========================================================================
  The contents of this file are subject to the terms of the Common Development
  and Distribution License (the License). You may not use this file except in
  compliance with the License.
  
  You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  or http://www.netbeans.org/cddl.txt.
  
  When distributing Covered Code, include this CDDL Header Notice in each file
  and include the License file at http://www.netbeans.org/cddl.txt.
  If applicable, add the following below the CDDL Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyrighted [year] [name of copyright owner]"
  
  The Original Software is NetBeans. The Initial Developer of the Original
  Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  Microsystems, Inc. All Rights Reserved.
  
  $Id$
============================================================================ -->

<!--
  This is a target library which is intended to be used by other build 
  scripts, currently - engine, product and group. It contains utility
  targets which perform the required initialization, clean-up and build 
  functionality.
-->
<project name="common" default="usage" basedir=".">
    <!-- =======================================================================
      Initialization
    ======================================================================== -->
    <!--
      This target performs the default initialization, common custom tasks 
      are defined here. 
      
      It sets some properties which control the flow of the build process, such 
      as whether tp check-out sources from trunk or branch, or to copy them 
      from a given location instead.
    -->
    <target name=".init" depends=".build-custom-tasks" unless="skip.initialization">
        <!-- set the line.separator property to a shorter name -->
        <property name="nl" value="${line.separator}"/>
        
        <!-- define custom ant tasks -->
        <taskdef 
            name="for-each" 
            classname="org.netbeans.installer.infra.build.ant.ForEach" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="set" 
            classname="org.netbeans.installer.infra.build.ant.SetProperty" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="if" 
            classname="org.netbeans.installer.infra.build.ant.If" 
            classpath="${custom.tasks.cls}"/>
        
        <!-- decide whether to checkout sources from trunk --> 
        <condition property="do.checkout.trunk">
            <and>
                <equals arg1="${checkout.sources}" arg2="true"/>
                <equals arg1="${cvs.branch}" arg2=""/>
            </and>
        </condition>
        
        <!-- decide whether to checkout sources from a branch --> 
        <condition property="do.checkout.branch">
            <and>
                <equals arg1="${checkout.sources}" arg2="true"/>
                <not>
                    <equals arg1="${cvs.branch}" arg2=""/>
                </not>
            </and>
        </condition>
        
        <!-- decide whether to copy sources from a given location -->
        <condition property="do.checkout.copy">
            <not>
                <equals arg1="${checkout.sources}" arg2="true"/>
            </not>
        </condition>
        
        <!-- decide whether to build native libraries/launchers or not -->
        <condition property="do.build.native">
            <equals arg1="${build.native}" arg2="true"/>
        </condition>
        
        <!-- decide whether there is need to build a netbeans project -->
        <condition property="do.build.nbproject">
            <equals arg1="${build.nbproject}" arg2="true"/>
        </condition>
        
        <!-- deduce the path to the ant executable -->
        <condition property="ant.executable" value="${ant.home}/bin/ant.bat">
            <os family="windows"/>
        </condition>
        <condition property="ant.executable" value="${ant.home}/bin/ant">
            <not>
                <os family="windows"/>
            </not>
        </condition>
        
        <!-- initialize the local working directory -->
        <mkdir dir="${work.dir}"/>
        
        <!-- initialize the local distributive directory -->
        <mkdir dir="${dist.dir}"/>
        
        <!-- set the marker property which will prevent the script running the 
             initialization procedure again, if history is lost, e.g. as a 
             result of an antcall -->
        <property name="skip.initialization" value="true"/>
    </target>
    
    <!--
      This target builds custom ant tasks, which are required throughout the
      build script(s). 
      
      It sets a marker property, which prevents this target from being 
      executed, in case the 'init' target gets executed a second time (e.g. 
      as the result of an antcall).
    -->
    <target name=".build-custom-tasks">
        <!-- quick clean-up and initialization -->
        <delete dir="${custom.tasks.cls}"/>
        <mkdir dir="${custom.tasks.cls}"/>
        
        <!-- compile -->
        <javac 
            srcdir="${custom.tasks.src}" 
            destdir="${custom.tasks.cls}" 
            debug="true"/>
    </target>
    
    <!-- =======================================================================
      Clean-up
    ======================================================================== -->
    <!--
      This is the main clean-up target, it cleans the native libraries, 
      tries to run cleanup on the java project and finally deletes the 
      local working directory.
    -->
    <target name=".clean">
        <!-- for each of the defined platforms set the appropriate property
             and execute the clean-up procedure -->
        <for-each list="${platforms}" property="platform">
            <antcall target=".clean-native"/>
        </for-each>
        
        <antcall target=".clean-nbproject"/>
        
        <!-- delete the local working directory -->
        <delete dir="${work.dir}" includeemptydirs="true"/>
    </target>
    
    <!--
      This target cleans the native part of the project. It is meant to be
      antcall'ed from a loop which would iterate over the list of supported
      platforms. Thus this target expects the property 'platform' to point to
      the current platform for which clean-up should be performed.
      
      By default it falls back to '.clean-jni' target, but it is meant to be 
      overriden by derivative build scripts, if there is need to do more than 
      that.
    -->
    <target name=".clean-native" if="do.build.native">
        <antcall target=".clean-jni"/>
    </target>
    
    <!--
      This target cleans up the native jni libraries for the project.
    -->
    <target name=".clean-jni">
        <!-- delete the locally cached files -->
        <delete dir="${scp.local.dir}"/>
    </target>
    
    <target name=".clean-nbproject" if="do.build.nbproject">
        <condition property="nbproject.exists" value="true">
            <available file="${cvs.dir}/${nbproject.path}"/>
        </condition>
        
        <if property="nbproject.exists" value="true">
            <exec executable="${ant.executable}" 
                  dir="${cvs.dir}/${nbproject.path}" 
                  failonerror="false"
                  failifexecutionfails="false">
                <arg value="${nb.target.clean}"/>
                
                <arg value="${nb.platform.home}"/>
                <arg value="${nb.ignore.native}"/>
                <arg value="${nb.no.dependencies}"/>
                <arg value="${nb.skip.build.custom.tasks}"/>
                <arg value="${nb.custom.tasks.cls}"/>
            </exec>
        </if>
    </target>
    
    <!-- =======================================================================
      Check-out
    ======================================================================== -->
    <target name=".checkout" 
            depends=".checkout-trunk,.checkout-branch,.checkout-copy"/>
    
    <target name=".checkout-trunk" if="do.checkout.trunk">
        <cvs cvsroot="${cvs.root}" 
             command="checkout" 
             package="${cvs.module}/${cvs.path}" 
             dest="${work.dir}"
             failonerror="true"/>
    </target>
    
    <target name=".checkout-branch" if="do.checkout.branch">
        <cvs cvsroot="${cvs.root}" 
             command="checkout" 
             package="${cvs.module}/${cvs.path}" 
             tag="${cvs.branch}" 
             dest="${work.dir}"
             failonerror="true"/>
    </target>
    
    <target name=".checkout-copy" if="do.checkout.copy">
        <mkdir dir="${work.dir}/${cvs.module}/${cvs.path}"/>
        
        <copy todir="${work.dir}/${cvs.module}/${cvs.path}" verbose="true">
            <fileset dir="${sources.dir}/${cvs.path}">
                <include name="**/*.*"/>
                <exclude name="**/nbproject/private/*.*"/>
                <exclude name="build/**/*.*"/>
                <exclude name="dist/**/*.*"/>
                <exclude name="**/CVS"/>
                <exclude name="**/.cvsignore"/>
            </fileset>
        </copy>
    </target>
    
    <!-- =======================================================================
      Build
    ======================================================================== -->
    <!-- 
      This is the main build target, it invokes the check out procedure, then
      builds the native libraries for the project and finally the java part
      of it.
    -->
    <target name=".build">
        <!-- for each of the defined platforms set the appropriate property
                 and execute the build procedure -->
        <for-each list="${native.platforms}" property="platform">
            <antcall target=".build-native"/>
        </for-each>
        
        <antcall target=".build-nbproject"/>
    </target>
    
    <target name=".build-native" if="do.build.native">
        <antcall target=".build-jni"/>
    </target>
    
    <!-- 
        Performs the native library build procedure for a given platform.
    -->
    <target name=".build-jni" if="do.build.native">
        <!-- log -->
        <echo message="building jni for ${platform}"/>
        
        <!-- set required properties -->
        <set property="remote.host" source="remote.host.${platform}"/>
        <set property="remote.port" source="remote.port.${platform}"/>
        <set property="remote.user" source="remote.user.${platform}"/>
        <set property="native.dist.file" source="native.dist.file.${platform}"/>
        
        <set property="current.ssh.arguments" source="ssh.arguments"/>
        <set property="current.ssh.command" source="ssh.command"/>
        
        <set property="current.scp.arguments" source="scp.arguments"/>
        <set property="current.scp.remote.dir" source="scp.remote.dir"/>
        <set property="current.scp.local.dir" source="scp.local.dir"/>
        
        <!-- run the ssh command - it is expected that it will build 
             everything -->
        <exec executable="${ssh.executable}" failonerror="true">
            <arg line="${current.ssh.arguments}"/>
            <arg value="${current.ssh.command}"/>
        </exec>
        
        <!-- run the scp command to copy the resulting file back to the 
             host system -->
        <mkdir dir="${current.scp.local.dir}"/>
        <exec executable="${scp.executable}" failonerror="true">
            <arg line="${current.scp.arguments}"/>
            <arg value="${current.scp.remote.dir}/${native.dist.file}"/>
            <arg value="${current.scp.local.dir}/${native.dist.file}"/>
        </exec>
    </target>
    
    <target name=".build-nbproject" if="do.build.nbproject">
        <exec executable="${ant.executable}" 
              dir="${cvs.dir}/${nbproject.path}" 
              failonerror="false">
            <arg value="${nb.target.build}"/>
            
            <arg value="${nb.platform.home}"/>
            <arg value="${nb.ignore.native}"/>
            <arg value="${nb.no.dependencies}"/>
            <arg value="${nb.skip.build.custom.tasks}"/>
            <arg value="${nb.custom.tasks.cls}"/>
        </exec>
    </target>
    
    <!-- =======================================================================
      Default
    ======================================================================== -->
    <target name="usage">
        <echo>
            This build script is a targets library and must not be used 
            directly.
        </echo>
    </target>
</project>
