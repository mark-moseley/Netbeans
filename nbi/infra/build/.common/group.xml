<?xml version="1.0" encoding="UTF-8"?>
<!-- ===========================================================================
  The contents of this file are subject to the terms of the Common Development
  and Distribution License (the License). You may not use this file except in
  compliance with the License.
  
  You can obtain a copy of the License at http://www.netbeans.org/cddl.html
  or http://www.netbeans.org/cddl.txt.
  
  When distributing Covered Code, include this CDDL Header Notice in each file
  and include the License file at http://www.netbeans.org/cddl.txt.
  If applicable, add the following below the CDDL Header, with the fields
  enclosed by brackets [] replaced by your own identifying information:
  "Portions Copyrighted [year] [name of copyright owner]"
  
  The Original Software is NetBeans. The Initial Developer of the Original
  Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
  Microsystems, Inc. All Rights Reserved.
  
  $Id$
============================================================================ -->

<!--
  This is the base build script for an nbi group package.
  
  It is not intended to be used directly, but to be imported into derivative
  implementation scripts, which will provide properties' values that are 
  specific the concrete group implementation. The derivative scripts may also
  provide some additional functionality that is required by their respective
  group implementations.
  
  This script exposes five primary targets: 'init', 'clean', 'checkout', 
  'build' and 'release'; as well as two aggregate targets: 'build-all', 
  which tranlates into 'init', 'clean', 'checkout', 'build', and 
  'release-all' - 'init', 'clean', 'checkout', 'build', 'release'. For the 
  detailed description of the functionality of these targets, consult the 
  corresponding documentation.
-->
<project name="group" default="usage" basedir=".">
    <!-- a default value for the ${common.dir} property, which allows the user 
         to see the usage information is he calls this script directly and not
         via a derivative (which is the proper way to do this) -->
    <property name="common.dir" value="${basedir}"/>
    
    <!-- import the common properties -->
    <property file="${common.dir}/common.properties"/>
    
    <!-- import properties specific to the group package's build script -->
    <property file="${common.dir}/group.properties"/>
    
    <!-- import the common target library -->
    <import file="common.xml" optional="false"/>
    
    <!-- =======================================================================
      Initialization
    ======================================================================== -->
    
    <!--
      Initializes the group package's build script.
      
      This target overrides the '-init' target in common.xml, providing the 
      custom functionality that is required for the group package's build 
      script initialization.
      
      In addition to the standard initialization routine, this target defines
      several custom ant tasks, which are specific to the group package's build 
      script.
      
      This target is not intended to be called directly.
    -->
    <target name="-init" depends=".init">
        <!-- define custom ant tasks -->
        <taskdef 
            name="sizeof" 
            classname="org.netbeans.installer.infra.build.ant.SizeOf" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="md5" 
            classname="org.netbeans.installer.infra.build.ant.Md5" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="load-locales" 
            classname="org.netbeans.installer.infra.build.ant.LoadLocales" 
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="group-descriptor" 
            classname="org.netbeans.installer.infra.build.ant.XmlGroup" 
            classpath="${custom.tasks.cls}"/>
        <taskdef
            name="release-group"
            classname="org.netbeans.installer.infra.build.ant.ReleaseGroup"
            classpath="${custom.tasks.cls}"/>
    </target>
    
    <!-- =======================================================================
      Clean-up
    ======================================================================== -->
    
    <!--
      Cleans the current working directory and the distributives directory.
      
      This target overrides the '-clean' target in common.xml, providing the 
      custom functionality that is required for correctly cleaning the group 
      package.
      
      In addition to the standard behavior the group package distributive file 
      is removed from the distributives directory.
      
      This target is not intended to be called directly.
    -->
    <target name="-clean" depends=".clean">
        <!-- remove the group's distributive file from the distributives 
             directory -->
        <delete file="${dist.dir}/${group.jar.file}"/>
    </target>
    
    <!-- =======================================================================
      Check-out
    ======================================================================== -->
    
    <!--
      The functionality of the checkout procedure for the group package is 
      indentical to the standard one, thus there is not need to override the 
      '-checkout' target, whosew default implementation is present in 
      common.xml.
    -->
    
    <!-- =======================================================================
      Build
    ======================================================================== -->
    
    <!--
      Builds the group package.
      
      This target overrides the '-build' target in common.xml, providing the 
      custom functionality that is required for correctly building the group 
      package.
      
      The build process for the grup package consists of five steps.
      1) The search-and-replace is run over the group's sources, based on the
         [token] => [value] pairs defined in ${group.params.N.token} and
         ${group.params.N.value}
      
      2) The group's icon is copied from its location to the group's package 
         directory structure and some metadata is calculated
      
      3) The group's localizing bundle is loaded and the group package 
         descriptor is generated
      
      4) The manifest for the group package is generated
      
      5) The package directory structure is jarred, digitally signed and moved 
         to the distributives directory
      
      This target is not intended to be called directly.
    -->
    <target name="-build" depends=".build">
        <!-- substitute the params in group's source tree (normally that would
             consist only of the icon and the localizing bundle -->
        <for-each from="1" to="${group.params.length}" property="i">
            <set property="current.token" 
                          source="group.params.${i}.token"/>
            <set property="current.value" 
                          source="group.params.${i}.value"/>
            
            <replace dir="${cvs.dir}" 
                     token="${current.token}" 
                     value="${current.value}"/>
        </for-each>
        
        <!-- copy the group's icon to the soon-to-be package directory 
             structure and calculate some metadata for it -->
        <copy file="${group.icon}" 
              tofile="${work.dir}/${group.icon.file}"/>
        <sizeof file="${work.dir}/${group.icon.file}" 
                property="group.icon.size"/>
        <md5 file="${work.dir}/${group.icon.file}" 
             property="group.icon.md5"/>
        
        <!-- load the group's localizing bundle and store the locales list to 
             ${group.locales.list} -->
        <load-locales basename="${group.bundle}" list="group.locales.list"/>
        
        <!-- generate the group package descriptor -->
        <group-descriptor file="${work.dir}/${group.descriptor.file}"/>
        
        <!-- create the package manifest file -->
        <echo file="${work.dir}/${group.jar.manifest.file}" 
              message="Manifest-Version: 1.0${nl}" 
              append="false"/>
        <echo file="${work.dir}/${group.jar.manifest.file}" 
              message="Package-Descriptor: ${group.descriptor.file}${nl}" 
              append="true"/>
        
        <!-- create the package jar file and sign it -->
        <jar destfile="${work.dir}/${group.jar.file}" 
             compress="true" 
             manifest="${work.dir}/${group.jar.manifest.file}">
            <fileset dir="${work.dir}">
                <include name="${group.dir}"/>
                <include name="${group.dir}/**"/>
                <include name="${group.descriptor.file}"/>
            </fileset>
        </jar>
        <signjar jar="${work.dir}/${group.jar.file}" 
                 keystore="${jarsigner.keystore}"
                 storepass="${jarsigner.storepass}"
                 alias="${jarsigner.alias}"
                 maxmemory="${jarsigner.xmx}"/>
        
        <!-- move the distributive to the distributives directory -->
        <move file="${work.dir}/${group.jar.file}" 
              todir="${dist.dir}"/>
    </target>
    
    <!-- =======================================================================
      Release
    ======================================================================== -->
    
    <!--
      Releases the group package to the registries server.
      
      This target overrides the '-release' target in common.xml, providing the 
      custom functionality that is required for correctly releasing the group 
      package.
      
      It is assumed that the group package has already been built, but a 
      dependency on the 'build' target is not defined, as it may be desirable 
      to build once and then release several times to different registries 
      servers.
      
      This target is not intended to be called directly.
    -->
    <target name="-release">
        <release-group url="${release.url}"
                      registry="${release.registry}"
                      uid="${release.parent.uid}"
                      version="${release.parent.version}"
                      archive="${dist.dir}/${group.jar.file}"/>
    </target>
    
    <!-- =======================================================================
      Default
    ======================================================================== -->
    
    <!--
      The default target. 
      
      Does nothing except printing the usage information.
    -->
    <target name="usage">
        <echo>
            This is the base build script for nbi group package and is not 
            intended to be called directly. In order to create a derivative 
            implementation script, see 
            ${basedir}/.templates/group-template.xml
        </echo>
    </target>
</project>
