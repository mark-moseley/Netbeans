<#-- FreeMarker template (see http://freemarker.org/) -->
<#assign licenseFirst = "/*">
<#assign licensePrefix = " * ">
<#assign licenseLast = " */">
<#include "../Licenses/license-${project.license}.txt"> 

<#if package?? && package != "">
package ${package};

</#if>
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.Properties;

/**
 * RestConnection
 *
 * @author ${user}
 */
public class RestConnection {    
    public final int GET = 0;

    public final int POST = 1;

    private String proxyHost;
    private int proxyPort;
    private int method;

    /** Creates a new instance of RestConnection */
    public RestConnection() {
        setHttpMethod(GET); //by default
    }

    /**
     * sets HTTP proxy server
     *
     * @param proxyHost
     * @param proxyPort
     */
    public void setProxy(String proxyHost, int proxyPort) {
        this.proxyHost = proxyHost;
        this.proxyPort = proxyPort;
    }

    /**
     * sets HTTP method
     *
     * @param method (HttpClient.GET, HttpClient.POST)
     */
    public void setHttpMethod(int method) {
        this.method = method;
    }

    /**
     * @param baseUrl
     * @param params
     * @return response
     */
    public String connect(String baseUrl, String[][] params) throws IOException {
        return doConnect(baseUrl, params);
    }

    /**
     *
     * @param baseUrl
     * @param params
     * @return response
     */
    public String doConnect(String baseUrl, String[][] params) throws IOException {
        String code = null;
        try {
            if(this.proxyHost != null) {
                if(proxyPort < 1)
                    proxyPort = 8080;

                //Set proxy
                Properties sysProperties = System.getProperties();

                // Specify proxy settings
                sysProperties.put("proxyHost", this.proxyHost);
                sysProperties.put("proxyPort", String.valueOf(this.proxyPort));
                sysProperties.put("proxySet",  "true");
            }

            // Send data
            String urlStr = baseUrl;
            String p = "";
            if(this.method == POST) {
                for(int i=0;i<params.length;i++) {
                    p += URLEncoder.encode(params[i][0], "UTF-8")+"="+
                            URLEncoder.encode(params[i][1], "UTF-8")+"&";
                }
                if(p.length() > 0)
                    p = p.substring(0, p.length()-1);
            } else {
                for(int i=0;i<params.length;i++)
                    p += params[i][0]+"="+params[i][1]+"&";
                if(p.length() > 0)
                    p = "?"+p.substring(0, p.length()-1);
                urlStr += p;
            }
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            OutputStreamWriter wr = null;
            if(this.method == POST) {
                conn.setDoOutput(true);
                wr = new OutputStreamWriter(conn.getOutputStream());
                wr.write(p);
                wr.flush();
            }
            // Get the response
            StringBuilder sb = new StringBuilder();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
            code = sb.toString();
            if(this.method == POST && wr != null) {
                wr.close();
            }
            rd.close();
        } catch (Exception e) {
            IOException ioe = new IOException();
            ioe.initCause(e);
            throw ioe;
        }
        return code;
    }
}
