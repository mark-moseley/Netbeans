# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# Sample ResourceBundle properties file

MSG_GeneratingClass=Generating {0}...
MSG_CreatingClass=Creating {0}...
MSG_ModifyingClass=Modifying {0}...
MSG_GeneratingZip=Generating {0}...
MSG_CopyLibs=Copying libs {0}...

MSG_SkippingStubGeneration=Skipping generation of stub for file: {0}, since it already exists.

####################################
#Token replacements for Client Stubs
####################################
TTL_RestClient_Stubs=Javascript client stub for RESTful Web Services
TTL_DojoResources_Stubs=Dojo resources table widget for RESTful Web Services
TTL_JMakiWidget_Stubs=Resource table jMaki widget
MSG_TestPage=Test Page
MSG_Readme=Readme
MSG_SelectResource=Select Resource

MSG_JS_Readme_Content= \n \
<h2>Steps to run Rest Javascripts stubs</h2> \n \
<ol> \n \
    <li>Open Netbeans IDE.</li> \n \
    <li>Create a web project.</li> \n \
    <li>Right click on the web project, then select "New->Restful Web Service Client Stubs". \n \
        In the wizard select a web project that contain the RESTful Web Services. Click "Finish".</li> \n \
    <li>Run "/Web Pages/rest/TestStubs.html" to test generated Javascripts for the \n \
        RESTful Web Service project. This displays a table of available resources.</li> \n \
</ol> \n \
Note: When using proxy for javascript cross-domain, create a java package under \n \
<Source Packages>org.netbeans.rest.proxy, then copy RestProxyServlet.txt to new package \n \
,then rename RestProxyServlet.txt to RestProxyServlet.java. Add servlet mapping info \n \
into /WEB-INF/web.xml as specified in the class documentation for RestProxyServlet.java.

MSG_JMaki_Readme_Content= \n \
<h2>Steps to run jMaki REST Components</h2> \n \
<ol> \n \
<li>Install jMaki Ajax plugin (in IDE follow Tools->Plugins->Available Plugins, \n \
then select 'jMaki Ajax support' and click 'Install' button). \n \
\n \
or \n \
\n \
Download and install jMaki 1.0 NetBeans plugin from jMaki website \n \
(https://ajax.dev.java.net/jmaki-plugin.html)</li> \n \
\n \
<li>Open NetBeans IDE, then install the plugin by selecting "Downloaded" tab \n \
after invoking Tools->Plugins.</li> \n \
\n \
<li>Create a web project, add "jMaki Ajax Framework" to this project on the wizard.</li> \n \
\n \
<li>Right click on the web project, then select "New->RESTful Web Service Client \n \
Stubs". In the wizard, select the web project that contains the RESTful web \n \
services for which you want to generate the client stubs. Click "Finish".</li> \n \
 \n \
<li>Run "/Web Pages/resources/dojo/rest/TestResourcesTable.jsp" to test a jMaki \n \
REST component. This displays a table of resources.</li> \n \
</ol> \n \
 \n \
<p>Note: \n \
 \n \
- If you see any error on the jsp page, enable debugging by changing line \n \
that looks like 'jmaki.debug = false' to 'jmaki.debug = true' in file \n \
\n \Web Pages\n \glue.js, then redeploy the application and test the jsp page. \n \
 \n \
- After successful execution of Step 4 above, a <ProjectName>.zip is created in \n \
the project root directory (Select "Files" tab to see this file in the IDE). \n \
This file is a zipped (jMaki component(s)) version of the files generated during \n \
creation of the client stubs. You can this file to other developers who want to  \n \
invoke your RESTful Web Services. You can also register the RESTful Web Service \n \
jMaki components in the jMaki palette by invoking "Tools->Palette->Add jMaki \n \
Library" action in the NetBeans IDE. After successful registration of these \n \
components, users can see them on the palette for jsp, php, rhtml, ejs files. \n \
Drag-n-drop them onto jsp, php, rhtml, ejs files to invoke the RESTful web \n \
services from these pages.- Please note that <ProjectName>.zip also contains \n \
dojo 0.4.3 libraries copied from your IDE's jMaki library location. There is a \n \
/resources/dojo/resources/libs/dojo/LICENSE file inside this zip file. Please \n \
read this file before you redistribute this zip file.\n \
\n \
- If you do not wish to include dojo libraries, then re-package the zip file by \n \
removing all the zip entries that start with /resources/dojo/resources, then \n \
include a Readme. This Readme should notify end users to copy the dojo library \n \
/resources/dojo/resources into thier web project "Web Pages" directory after \n \
they drag-n-drop the web service component from jMaki Component Palette in the \n \
IDE. This dojo library is found in their \n \
<NB IDE User Directory>/jmakicomplib/jmaki-dojo/resources/dojo/resources directory.</p>\n \
<hr/>\n \
\n \
<h2>Steps to run Dojo REST Components</h2>\n \
<ol>\n \
<li>After running Step I, you could also test dojo REST component directly \n \
by invoking "/Web Pages/resources/dojo/rest/rdj/TestResourcesTable.html"</li>\n \
</ol>\n \
\n \
<hr/>\n \
\n \
<h2>Steps to run REST Javascripts stubs</h2>\n \
<ol>\n \
<li>After running Step I, you could also test REST Javascripts directly \n \
by invoking "/Web Pages/resources/dojo/rest/rjs/TestStubs.html".</li>\n \
</ol>\n \
\n \
<p>\n \
Note:\n \
\n \
- If you have unchecked jMaki during stub generation, you could see only\n \
/web/rest directory. Test file is in /Web Pages/rest/TestStubs.html. \n \
- When using proxy for javascript cross-domain, create a java package under \n \
<Source Packages>org.netbeans.rest.proxy, then copy RestProxyServlet.txt to new package \n \
,then rename RestProxyServlet.txt to RestProxyServlet.java. Add servlet mapping info \n \
into /WEB-INF/web.xml as specified in the class documentation for RestProxyServlet.java.</p>


