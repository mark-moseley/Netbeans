djd43.registerModulePath("rdj", "../../../../rest/rdj");
djd43.require("rdj.widget.ResourcesTable");
djd43.require("rdj.data.RestStore");

// define the namespaces
jmaki.namespace("jmaki.widgets.dojo.rest.rtable");

jmaki.widgets.dojo.rest.rtable.Widget = function(wargs) {

    var _widget = this;
    var columns = [];

    var uuid = wargs.uuid;
    var topic = "/dojo/rest/rtable";
    var subscribe = ["/dojo/rest/rtable", "/rtable"];
    var filter = "jmaki.filters.tableModelFilter";
    
    var container = document.getElementById(uuid);
    var table;
    var counter = 0;    
    
    // FIXME: this code can be removed for 1.0 release
    var showedModelWarning = false;
    
    function showModelDeprecation() {
        if (!showedModelWarning) {
             jmaki.log("Dojo table widget uses the incorrect data format. " +
                       "Please see <a href='http://wiki.java.net/bin/view/Projects/jMakiTableDataModel'>" +
                       "http://wiki.java.net/bin/view/Projects/jMakiTableDataModel</a> for the proper format.");
             showedModelWarning = true;
        }   
    }
    
    function genId() {
        return wargs.uuid + "_nid_" + counter++;
    }

    if (wargs.args) {
        if (wargs.args.topic) {
            topic = wargs.args.topic;
	    jmaki.log("Dojo table: widget uses deprecated topic property. Use publish instead. ");
        }
        if (wargs.args.filter) {
           filter = wargs.args.filter;
        }        
        if (wargs.args.auto) {
            auto = (wargs.args.auto == 'true');
        }
    }
    
    if (wargs.publish ) {
	topic = wargs.publish;
     }
     
    if (wargs.subscribe){
        if (typeof wargs.subscribe == "string") {
            subscribe = [];
            subscribe.push(wargs.subscribe);
        } else {
            subscribe = wargs.subscribe;
        }
    }
    
    // initialize the widget
    this.init = function() {
    }

    // set columns from the widget arguments if provided.
    if (wargs.args && wargs.args.columns) {
        columns = wargs.args.columns;     
    }
    
    // pull in the arguments
    if (wargs.value) {
        // convert value if a jmakiRSS type
        if (wargs.value.dataType == 'jmakiRSS') {
           wargs.value = jmaki.filter(wargs.value, filter);
        }
        if (!wargs.value.rows) {
            showModelDeprecation();
            return;
        }
        if (wargs.value.rows){
            _widget.rows = wargs.value.rows;
        } else if (wargs.value instanceof  Array) {
            _widget.rows = wargs.value;
        }
        if (wargs.value.columns) {
            columns = wargs.value.columns;
        }
        var resourcesTable = djd43.widget.createWidget("rdj:ResourcesTable", {valueField:"Id"}, container);
        for (var i in columns) {
                var column = columns[i];
                resourcesTable.columns.push(resourcesTable.createMetaData(column));
        }
        var dataInSimpleStoreFormat = [];
        for (var i in _widget.rows) {
            var item = _widget.rows[i];
            var object = {};
            object["Identity"] = item['customerId'];
            for (var j in columns) {
                object[columns[j].label] = item[columns[j].id];
            }
            dataInSimpleStoreFormat.push(object);
        }
        resourcesTable.store.setData(dataInSimpleStoreFormat);
        _widget.init();
        
    } else if (wargs.service) {
	var dataInSimpleStoreFormat = [];
	var columnsInResourcesTableFormat = null;
	var addRow = function(item, result) {
		var object = {};
		var attributes = restStore.getAttributes(item);
		object["Identity"] = item;
		for (var i in attributes) {
			var attribute = attributes[i];
			var value = restStore.get(item, attribute);
			object[attribute] = value;
		}
		dataInSimpleStoreFormat.push(object);
		if (!columnsInResourcesTableFormat) {
			columnsInResourcesTableFormat = [];
			for (var i in attributes) {
				var attribute = attributes[i];
				columnsInResourcesTableFormat.push({field: attribute});
			}
		}
	};
        var restStore = new rdj.data.RestStore({serviceUrl:wargs.service});
        var query = null;
	var result = restStore.find({query:query, sync:true, onnext:addRow});
	var resourcesTable = djd43.widget.createWidget("rdj:ResourcesTable", {valueField:"Id"}, container);
	for (var i in columnsInResourcesTableFormat) {
		var column = columnsInResourcesTableFormat[i];
		resourcesTable.columns.push(resourcesTable.createMetaData(column));
	}
	resourcesTable.store.setData(dataInSimpleStoreFormat);
        _widget.init();
    } else {
        djd43.io.bind({
            url: wargs.widgetDir + "/widget.json",
            method: "get",
            mimetype: "text/json",
            load: function (type,data,evt) {
                if (data == false) {
                    container.innerHTML = "Data format error loading data widget.json file.";
                } else {
                    var _d;
                    // convert value if a jmakiRSS type
                    if (data.dataType == 'jmakiRSS') {
                        _d = jmaki.filter(data, filter);
                    } else {
                        if (data.value.defaultValue) _d = data.value.defaultValue;
                    }
                    if (_d.rows) {
                        _widget.rows = _d.rows;                   
                    }
                    if (_d.columns) {
                       columns = _d.columns;                        
                    }
                    var resourcesTable = djd43.widget.createWidget("rdj:ResourcesTable", {valueField:"Id"}, container);
                    for (var i in columns) {
                            var column = columns[i];
                            resourcesTable.columns.push(resourcesTable.createMetaData(column));
                    }
                    var dataInSimpleStoreFormat = [];
                    for (var i in _widget.rows) {
                        var item = _widget.rows[i];
                        var object = {};
                        object["Identity"] = item['customerId'];
                        for (var j in columns) {
                            object[columns[j].label] = item[columns[j].id];
                        }
                        dataInSimpleStoreFormat.push(object);
                    }
                    resourcesTable.store.setData(dataInSimpleStoreFormat);
                    _widget.init();
                }
            }
        });
    }
    
    this.clearFilters = function(){
        table.clearFilters();
    }
    
    this.clear = function() {
        table.store.setData([]);        
        table.store.clearData();
        counter = 0;
    }
    
    this.addRows = function(b){
        if (b.message)b = b.message;
        for (var i=0; i < b.value.length; i++) {
            _widget.addRow({ value : b.value[i]}, false);
        }
    }
 
    this.removeRow = function(b){
        var index;
        if (b.message)b = b.message;
        if (b.targetId) {
           index = b.targetId;
        } else {
            index = b;
        }    
        if (index && table.store.getDataByKey(index)) {
            table.store.removeDataByKey(index);
        }
    }

    this.select = function(b){
        var index;
        if (b.message)b = b.message;
        if (b.targetId) {
           index = b.targetId;
        } else {
            index = b;
        }    
        if (index && table.store.getDataByKey(index)) {
            var s = table.store.getDataByKey(index);
            if (s) {
                var r = table.getRow(s);
                r.isSelected = true;         
                table.resetSelections();
                table.toggleSelectionByRow(r); 
                table.renderSelections();
                jmaki.publish(topic + "/onSelect", { widgetId : wargs.uuid, type : 'onSelect', targetId : index });
            } 
        }
    }      
    
    this.addRow = function(b){
        var r;
        if (b.message)b = b.message;
        if (b.value) {
            r = b.value;
        } else {
            r = b;
        }
        var targetId;
        if (r.id) targetId = r.id;
        
        if (table.store.getDataByKey(targetId)) {
            jmaki.log(wargs.uuid  + " : Warning. Attempt to add record to rest.rtable. with duplicate row id: " + targetId + ". Autogenerating new id.");
            r.id = genId();
        }
        
        // add an id for sorting if not defined
        if (typeof r.id == "undefined") {
            r.id = genId();
        }
        table.store.addData(r, null, false);
     }
    
    this.onSelect = function(e) {

        var _s = [];
	var d = table.store.get();
	for (var i = 0; i < d.length; i++) {
            if (d[i].isSelected) {
	        _s.push(d[i].src.id);
            }
	}
        // later we may want to support multiple selections
        jmaki.publish(topic + "/onSelect", { widgetId : wargs.uuid, type : 'onSelect', targetId : _s[0] });

    }
    
    function doSubscribe(topic, handler) {
        var i = jmaki.subscribe(topic, handler);
        _widget.subs.push(i);
    }
    
    this.destroy = function() {
        for (var i=0; _widget.subs && i < _widget.subs.length; i++) {
            jmaki.unsubscribe(_widget.subs[i]);
        }
    }

    this.postLoad = function() {
        // track the subscribers so we can later remove them
        _widget.subs = [];
        for (var _i=0; _i < subscribe.length; _i++) {
            doSubscribe(subscribe[_i]  + "/clear", _widget.clear);
            doSubscribe(subscribe[_i]  + "/addRow", _widget.addRow);
            doSubscribe(subscribe[_i]  + "/addRows", _widget.addRows);
            doSubscribe(subscribe[_i]  + "/removeRow", _widget.removeRow);
            doSubscribe(subscribe[_i]  + "/select", _widget.select);
        }                
    }
}
