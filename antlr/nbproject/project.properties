# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.


javac.source=1.5
release.external/antlr-2.7.2.jar=modules/ext/antlr-2.7.2.jar
license.file=../external/antlr-2.7.2-license.txt
nbm.homepage=http://www.antlr.org/


# Hidden class found: antlr.AlternativeBlock in method public void antlr.JavaCodeGenerator.gen(antlr.AlternativeBlock) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.TokenRangeElement in method public void antlr.DocBookCodeGenerator.gen(antlr.TokenRangeElement) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.ParserGrammar in method public void antlr.CSharpCodeGenerator.gen(antlr.ParserGrammar) throws java.io.IOException in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.Alternative in method protected void antlr.JavaCodeGenerator.genAlt(antlr.Alternative,antlr.AlternativeBlock) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.preprocessor.Grammar in method public java.lang.Object antlr.preprocessor.Hierarchy.findRoot(antlr.preprocessor.Grammar) in class antlr.preprocessor.Hierarchy
# Hidden class found: antlr.TokenManager in method public void antlr.CSharpCodeGenerator.genRule(antlr.RuleSymbol,boolean,int,antlr.TokenManager) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.Alternative in method protected java.lang.String antlr.CSharpCodeGenerator.getLookaheadTestExpression(antlr.Alternative,int) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.preprocessor.Grammar in method public final antlr.collections.impl.IndexedVector antlr.preprocessor.Preprocessor.optionSpec(antlr.preprocessor.Grammar) throws antlr.RecognitionException,antlr.TokenStreamException in class antlr.preprocessor.Preprocessor
# Hidden class found: antlr.TokenManager in method protected void antlr.CodeGenerator.genTokenInterchange(antlr.TokenManager) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.BlockEndElement in method public void antlr.JavaCodeGenerator.gen(antlr.BlockEndElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.StringLiteralElement in method public void antlr.DiagnosticCodeGenerator.gen(antlr.StringLiteralElement) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.OneOrMoreBlock in method public void antlr.DocBookCodeGenerator.gen(antlr.OneOrMoreBlock) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.ZeroOrMoreBlock in method public abstract void antlr.CodeGenerator.gen(antlr.ZeroOrMoreBlock) in class antlr.CodeGenerator
# Hidden class found: antlr.LexerGrammar in method public void antlr.CppCodeGenerator.gen(antlr.LexerGrammar) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.TreeWalkerGrammar in method public void antlr.CppCodeGenerator.genBody(antlr.TreeWalkerGrammar) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method protected void antlr.CppCodeGenerator.genAlt(antlr.Alternative,antlr.AlternativeBlock) in class antlr.CppCodeGenerator
# Hidden class found: antlr.OneOrMoreBlock in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.OneOrMoreBlock) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.WildcardElement in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.WildcardElement) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.ImportVocabTokenManager in method public final void antlr.ANTLRTokdefParser.file(antlr.ImportVocabTokenManager) throws antlr.RecognitionException,antlr.TokenStreamException in class antlr.ANTLRTokdefParser
# Hidden class found: antlr.ActionElement in method public abstract void antlr.CodeGenerator.gen(antlr.ActionElement) in class antlr.CodeGenerator
# Hidden class found: antlr.StringLiteralElement in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.StringLiteralElement) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.AlternativeBlock in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.AlternativeBlock) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.GrammarAtom in method public antlr.Lookahead antlr.LLkAnalyzer.look(int,antlr.GrammarAtom) in class antlr.LLkAnalyzer
# Hidden class found: antlr.ExceptionSpec in method public void antlr.RuleBlock.addExceptionSpec(antlr.ExceptionSpec) in class antlr.RuleBlock
# Hidden class found: antlr.preprocessor.Grammar in method public void antlr.preprocessor.Hierarchy.addGrammar(antlr.preprocessor.Grammar) in class antlr.preprocessor.Hierarchy
# Hidden class found: antlr.TreeWalkerGrammar in method public abstract void antlr.CodeGenerator.gen(antlr.TreeWalkerGrammar) throws java.io.IOException in class antlr.CodeGenerator
# Hidden class found: antlr.ZeroOrMoreBlock in method public void antlr.JavaCodeGenerator.gen(antlr.ZeroOrMoreBlock) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.BlockEndElement in method public void antlr.HTMLCodeGenerator.gen(antlr.BlockEndElement) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.ParserGrammar in method public void antlr.CppCodeGenerator.gen(antlr.ParserGrammar) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.TokenRefElement in method public void antlr.DocBookCodeGenerator.gen(antlr.TokenRefElement) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.ActionElement in method public void antlr.CppCodeGenerator.gen(antlr.ActionElement) in class antlr.CppCodeGenerator
# Hidden class found: antlr.LexerGrammar in method public void antlr.DiagnosticCodeGenerator.gen(antlr.LexerGrammar) throws java.io.IOException in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.WildcardElement in method public void antlr.JavaCodeGenerator.gen(antlr.WildcardElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.Alternative in method protected void antlr.CSharpCodeGenerator.genAlt(antlr.Alternative,antlr.AlternativeBlock) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.CharLiteralElement in method public void antlr.HTMLCodeGenerator.gen(antlr.CharLiteralElement) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.Alternative in method public void antlr.RuleBlock.addAlternative(antlr.Alternative) in class antlr.RuleBlock
# Hidden class found: antlr.TokenRangeElement in method public abstract void antlr.CodeGenerator.gen(antlr.TokenRangeElement) in class antlr.CodeGenerator
# Hidden class found: antlr.Alternative in method protected java.lang.String antlr.JavaCodeGenerator.getLookaheadTestExpression(antlr.Alternative,int) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.LexerGrammar in method public void antlr.DocBookCodeGenerator.gen(antlr.LexerGrammar) throws java.io.IOException in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.TokenRangeElement in method public antlr.Lookahead antlr.LLkAnalyzer.look(int,antlr.TokenRangeElement) in class antlr.LLkAnalyzer
# Hidden class found: antlr.TreeWalkerGrammar in method public void antlr.DiagnosticCodeGenerator.gen(antlr.TreeWalkerGrammar) throws java.io.IOException in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.BlockEndElement in method public void antlr.DocBookCodeGenerator.gen(antlr.BlockEndElement) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.TokenRangeElement in method public void antlr.CSharpCodeGenerator.gen(antlr.TokenRangeElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.CharLiteralElement in method public void antlr.DocBookCodeGenerator.gen(antlr.CharLiteralElement) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public static void antlr.MakeGrammar.setBlock(antlr.AlternativeBlock,antlr.AlternativeBlock) in class antlr.MakeGrammar
# Hidden class found: antlr.TokenManager in method protected void antlr.HTMLCodeGenerator.genTokenTypes(antlr.TokenManager) throws java.io.IOException in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.SynPredBlock in method protected void antlr.JavaCodeGenerator.genSynPred(antlr.SynPredBlock,java.lang.String) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.GrammarAtom in method protected void antlr.CSharpCodeGenerator.genMatchUsingAtomTokenType(antlr.GrammarAtom) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public antlr.Lookahead antlr.LLkAnalyzer.look(int,antlr.AlternativeBlock) in class antlr.LLkAnalyzer
# Hidden class found: antlr.AlternativeElement in method protected void antlr.CppCodeGenerator.genASTDeclaration(antlr.AlternativeElement) in class antlr.CppCodeGenerator
# Hidden class found: antlr.SynPredBlock in method protected void antlr.DocBookCodeGenerator.genSynPred(antlr.SynPredBlock) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.LexerGrammar in method public void antlr.HTMLCodeGenerator.gen(antlr.LexerGrammar) throws java.io.IOException in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.CharRangeElement in method public void antlr.JavaCodeGenerator.gen(antlr.CharRangeElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.TokenManager in method protected void antlr.CSharpCodeGenerator.genTokenTypes(antlr.TokenManager) throws java.io.IOException in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.RuleRefElement in method public void antlr.HTMLCodeGenerator.gen(antlr.RuleRefElement) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.OneOrMoreBlock in method public antlr.Lookahead antlr.LLkAnalyzer.look(int,antlr.OneOrMoreBlock) in class antlr.LLkAnalyzer
# Hidden class found: antlr.TokenManager in method protected void antlr.JavaCodeGenerator.genTokenTypes(antlr.TokenManager) throws java.io.IOException in class antlr.JavaCodeGenerator
# Hidden class found: antlr.SynPredBlock in method protected void antlr.CSharpCodeGenerator.genSynPred(antlr.SynPredBlock,java.lang.String) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.TokenRefElement in method public abstract void antlr.CodeGenerator.gen(antlr.TokenRefElement) in class antlr.CodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public void antlr.DiagnosticCodeGenerator.genCommonBlock(antlr.AlternativeBlock) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.GrammarAtom in method protected void antlr.JavaCodeGenerator.genMatchUsingAtomText(antlr.GrammarAtom) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.CharLiteralElement in method public void antlr.JavaCodeGenerator.gen(antlr.CharLiteralElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public java.lang.Object antlr.JavaCodeGenerator.genCommonBlock(antlr.AlternativeBlock,boolean) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method protected void antlr.CSharpCodeGenerator.genAlt(antlr.Alternative,antlr.AlternativeBlock) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.Alternative in method protected void antlr.DocBookCodeGenerator.genLookaheadSetForAlt(antlr.Alternative) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.TreeWalkerGrammar in method public void antlr.HTMLCodeGenerator.gen(antlr.TreeWalkerGrammar) throws java.io.IOException in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.StringLiteralElement in method public void antlr.JavaCodeGenerator.gen(antlr.StringLiteralElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public java.lang.Object antlr.CSharpCodeGenerator.genCommonBlock(antlr.AlternativeBlock,boolean) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.TokenManager in method protected void antlr.CodeGenerator.genTokenInterchange(antlr.TokenManager) throws java.io.IOException in class antlr.JavaCodeGenerator
# Hidden class found: antlr.SynPredBlock in method protected void antlr.CppCodeGenerator.genSynPred(antlr.SynPredBlock,java.lang.String) in class antlr.CppCodeGenerator
# Hidden class found: antlr.Alternative in method protected void antlr.CppCodeGenerator.genAlt(antlr.Alternative,antlr.AlternativeBlock) in class antlr.CppCodeGenerator
# Hidden class found: antlr.RuleEndElement in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.FOLLOW(int,antlr.RuleEndElement) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.ZeroOrMoreBlock in method public void antlr.HTMLCodeGenerator.gen(antlr.ZeroOrMoreBlock) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.RuleSymbol in method public void antlr.DocBookCodeGenerator.genRule(antlr.RuleSymbol) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.ActionElement in method public void antlr.DiagnosticCodeGenerator.gen(antlr.ActionElement) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public void antlr.DocBookCodeGenerator.genCommonBlock(antlr.AlternativeBlock) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.SynPredBlock in method protected void antlr.DiagnosticCodeGenerator.genSynPred(antlr.SynPredBlock) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.OneOrMoreBlock in method public void antlr.CSharpCodeGenerator.gen(antlr.OneOrMoreBlock) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.GrammarAtom in method protected void antlr.JavaCodeGenerator.genMatch(antlr.GrammarAtom) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.TreeElement in method public void antlr.CSharpCodeGenerator.gen(antlr.TreeElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.OneOrMoreBlock in method public void antlr.JavaCodeGenerator.gen(antlr.OneOrMoreBlock) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.WildcardElement in method public void antlr.DocBookCodeGenerator.gen(antlr.WildcardElement) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.LexerGrammar in method public void antlr.CppCodeGenerator.genBody(antlr.LexerGrammar) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.RuleSymbol in method public void antlr.HTMLCodeGenerator.genRule(antlr.RuleSymbol) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.ActionElement in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.ActionElement) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.CharRangeElement in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.CharRangeElement) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.ActionElement in method public void antlr.DocBookCodeGenerator.gen(antlr.ActionElement) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.GrammarAtom in method public java.lang.String antlr.HTMLCodeGenerator.getASTCreateString(antlr.GrammarAtom,java.lang.String) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.ZeroOrMoreBlock in method public void antlr.DiagnosticCodeGenerator.gen(antlr.ZeroOrMoreBlock) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method protected void antlr.CSharpCodeGenerator.genBlockPreamble(antlr.AlternativeBlock) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.BlockEndElement in method public void antlr.DiagnosticCodeGenerator.gen(antlr.BlockEndElement) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.BlockEndElement in method public abstract void antlr.CodeGenerator.gen(antlr.BlockEndElement) in class antlr.CodeGenerator
# Hidden class found: antlr.RuleEndElement in method public void antlr.RuleBlock.setEndElement(antlr.RuleEndElement) in class antlr.RuleBlock
# Hidden class found: antlr.CharLiteralElement in method public void antlr.CSharpCodeGenerator.gen(antlr.CharLiteralElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.WildcardElement in method public abstract void antlr.CodeGenerator.gen(antlr.WildcardElement) in class antlr.CodeGenerator
# Hidden class found: antlr.RuleSymbol in method public void antlr.Grammar.define(antlr.RuleSymbol) in class antlr.Grammar
# Hidden class found: antlr.WildcardElement in method public antlr.Lookahead antlr.LLkAnalyzer.look(int,antlr.WildcardElement) in class antlr.LLkAnalyzer
# Hidden class found: antlr.TokenManager in method protected void antlr.DiagnosticCodeGenerator.genTokenTypes(antlr.TokenManager) throws java.io.IOException in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.GrammarElement in method public void antlr.CppCodeGenerator.genLineNo(antlr.GrammarElement) in class antlr.CppCodeGenerator
# Hidden class found: antlr.RuleRefElement in method public void antlr.CSharpCodeGenerator.gen(antlr.RuleRefElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.AlternativeElement in method protected void antlr.MakeGrammar.addElementToCurrentAlt(antlr.AlternativeElement) in class antlr.MakeGrammar
# Hidden class found: antlr.OneOrMoreBlock in method public abstract boolean antlr.LLkGrammarAnalyzer.deterministic(antlr.OneOrMoreBlock) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.GrammarAtom in method public abstract java.lang.String antlr.CodeGenerator.getASTCreateString(antlr.GrammarAtom,java.lang.String) in class antlr.CodeGenerator
# Hidden class found: antlr.TokenRangeElement in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.TokenRangeElement) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.TokenRangeElement in method public void antlr.DiagnosticCodeGenerator.gen(antlr.TokenRangeElement) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.ParserGrammar in method public void antlr.HTMLCodeGenerator.gen(antlr.ParserGrammar) throws java.io.IOException in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method protected void antlr.DocBookCodeGenerator.genGenericBlock(antlr.AlternativeBlock,java.lang.String) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.ParserGrammar in method public void antlr.DocBookCodeGenerator.gen(antlr.ParserGrammar) throws java.io.IOException in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.GrammarAtom in method protected void antlr.CppCodeGenerator.genMatchUsingAtomTokenType(antlr.GrammarAtom) in class antlr.CppCodeGenerator
# Hidden class found: antlr.LexerGrammar in method public void antlr.CSharpCodeGenerator.genBody(antlr.LexerGrammar) throws java.io.IOException in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public abstract boolean antlr.LLkGrammarAnalyzer.subruleCanBeInverted(antlr.AlternativeBlock,boolean) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.TokenManager in method protected void antlr.DocBookCodeGenerator.genTokenTypes(antlr.TokenManager) throws java.io.IOException in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.GrammarAtom in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.GrammarAtom) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.TokenManager in method protected void antlr.CppCodeGenerator.genTokenTypes(antlr.TokenManager) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.Alternative in method protected boolean antlr.CppCodeGenerator.lookaheadIsEmpty(antlr.Alternative,int) in class antlr.CppCodeGenerator
# Hidden class found: antlr.RuleRefElement in method public void antlr.JavaCodeGenerator.gen(antlr.RuleRefElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.Alternative in method protected boolean antlr.LLkAnalyzer.altUsesWildcardDefault(antlr.Alternative) in class antlr.LLkAnalyzer
# Hidden class found: antlr.CharLiteralElement in method public antlr.Lookahead antlr.LLkAnalyzer.look(int,antlr.CharLiteralElement) in class antlr.LLkAnalyzer
# Hidden class found: antlr.AlternativeBlock in method protected void antlr.CppCodeGenerator.genBlockInitAction(antlr.AlternativeBlock) in class antlr.CppCodeGenerator
# Hidden class found: antlr.SynPredBlock in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.SynPredBlock) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.CharLiteralElement in method public void antlr.DiagnosticCodeGenerator.gen(antlr.CharLiteralElement) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.CharLiteralElement in method public abstract void antlr.CodeGenerator.gen(antlr.CharLiteralElement) in class antlr.CodeGenerator
# Hidden class found: antlr.TokenRefElement in method public void antlr.HTMLCodeGenerator.gen(antlr.TokenRefElement) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.TreeWalkerGrammar in method public void antlr.JavaCodeGenerator.gen(antlr.TreeWalkerGrammar) throws java.io.IOException in class antlr.JavaCodeGenerator
# Hidden class found: antlr.CharRangeElement in method public void antlr.HTMLCodeGenerator.gen(antlr.CharRangeElement) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.TokenRefElement in method public void antlr.JavaCodeGenerator.gen(antlr.TokenRefElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.TreeWalkerGrammar in method public void antlr.DocBookCodeGenerator.gen(antlr.TreeWalkerGrammar) throws java.io.IOException in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.ImportVocabTokenManager in method public final void antlr.ANTLRTokdefParser.line(antlr.ImportVocabTokenManager) throws antlr.RecognitionException,antlr.TokenStreamException in class antlr.ANTLRTokdefParser
# Hidden class found: antlr.LexerGrammar in method public void antlr.CppCodeGenerator.genInclude(antlr.LexerGrammar) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.CharRangeElement in method public void antlr.CSharpCodeGenerator.gen(antlr.CharRangeElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.ZeroOrMoreBlock in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.ZeroOrMoreBlock) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.CharLiteralElement in method public abstract antlr.Lookahead antlr.LLkGrammarAnalyzer.look(int,antlr.CharLiteralElement) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.CharLiteralElement in method public void antlr.CppCodeGenerator.gen(antlr.CharLiteralElement) in class antlr.CppCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public void antlr.HTMLCodeGenerator.gen(antlr.AlternativeBlock) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.ParserGrammar in method public void antlr.JavaCodeGenerator.gen(antlr.ParserGrammar) throws java.io.IOException in class antlr.JavaCodeGenerator
# Hidden class found: antlr.CharRangeElement in method public abstract void antlr.CodeGenerator.gen(antlr.CharRangeElement) in class antlr.CodeGenerator
# Hidden class found: antlr.ZeroOrMoreBlock in method public void antlr.CSharpCodeGenerator.gen(antlr.ZeroOrMoreBlock) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public abstract boolean antlr.LLkGrammarAnalyzer.deterministic(antlr.AlternativeBlock) in class antlr.LLkGrammarAnalyzer
# Hidden class found: antlr.AlternativeElement in method protected void antlr.CSharpCodeGenerator.genASTDeclaration(antlr.AlternativeElement,java.lang.String) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.StringLiteralElement in method public antlr.Lookahead antlr.LLkAnalyzer.look(int,antlr.StringLiteralElement) in class antlr.LLkAnalyzer
# Hidden class found: antlr.BlockWithImpliedExitPath in method public boolean antlr.LLkAnalyzer.deterministicImpliedPath(antlr.BlockWithImpliedExitPath) in class antlr.LLkAnalyzer
# Hidden class found: antlr.RuleRefElement in method public void antlr.DiagnosticCodeGenerator.gen(antlr.RuleRefElement) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.BlockEndElement in method public void antlr.CSharpCodeGenerator.gen(antlr.BlockEndElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.AlternativeElement in method protected void antlr.JavaCodeGenerator.genASTDeclaration(antlr.AlternativeElement,java.lang.String) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.ActionElement in method public void antlr.JavaCodeGenerator.gen(antlr.ActionElement) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public boolean antlr.LLkAnalyzer.deterministic(antlr.AlternativeBlock) in class antlr.LLkAnalyzer
# Hidden class found: antlr.TreeElement in method public void antlr.HTMLCodeGenerator.gen(antlr.TreeElement) in class antlr.HTMLCodeGenerator
# Hidden class found: antlr.ParserGrammar in method public void antlr.CppCodeGenerator.genInclude(antlr.ParserGrammar) throws java.io.IOException in class antlr.CppCodeGenerator
# Hidden class found: antlr.ParserGrammar in method public abstract void antlr.CodeGenerator.gen(antlr.ParserGrammar) throws java.io.IOException in class antlr.CodeGenerator
# Hidden class found: antlr.StringLiteralElement in method public void antlr.CSharpCodeGenerator.gen(antlr.StringLiteralElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public void antlr.CppCodeGenerator.gen(antlr.AlternativeBlock) in class antlr.CppCodeGenerator
# Hidden class found: antlr.TreeWalkerGrammar in method public void antlr.CSharpCodeGenerator.gen(antlr.TreeWalkerGrammar) throws java.io.IOException in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.OneOrMoreBlock in method public abstract void antlr.CodeGenerator.gen(antlr.OneOrMoreBlock) in class antlr.CodeGenerator
# Hidden class found: antlr.TokenRefElement in method public void antlr.DiagnosticCodeGenerator.gen(antlr.TokenRefElement) in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.StringLiteralElement in method public abstract void antlr.CodeGenerator.gen(antlr.StringLiteralElement) in class antlr.CodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public java.lang.Object antlr.CppCodeGenerator.genCommonBlock(antlr.AlternativeBlock,boolean) in class antlr.CppCodeGenerator
# Hidden class found: antlr.GrammarAtom in method protected void antlr.CppCodeGenerator.genMatch(antlr.GrammarAtom) in class antlr.CppCodeGenerator
# Hidden class found: antlr.TokenManager in method protected void antlr.CodeGenerator.genTokenInterchange(antlr.TokenManager) throws java.io.IOException in class antlr.DiagnosticCodeGenerator
# Hidden class found: antlr.WildcardElement in method public void antlr.CSharpCodeGenerator.gen(antlr.WildcardElement) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.Alternative in method protected boolean antlr.JavaCodeGenerator.lookaheadIsEmpty(antlr.Alternative,int) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.RuleSymbol in method public void antlr.CSharpCodeGenerator.genRule(antlr.RuleSymbol,boolean,int,antlr.TokenManager) in class antlr.CSharpCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method protected void antlr.JavaCodeGenerator.genBlockPreamble(antlr.AlternativeBlock) in class antlr.JavaCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public void antlr.DocBookCodeGenerator.gen(antlr.AlternativeBlock) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.TreeElement in method public void antlr.DocBookCodeGenerator.gen(antlr.TreeElement) in class antlr.DocBookCodeGenerator
# Hidden class found: antlr.AlternativeBlock in method public boolean antlr.LLkAnalyzer.subruleCanBeInverted(antlr.AlternativeBlock,boolean) in class antlr.LLkAnalyzer
# Hidden class found: antlr.TokenManager in method protected void antlr.CodeGenerator.genTokenInterchange(antlr.TokenManager) throws java.io.IOException in class antlr.CodeGenerator
# Hidden class found: antlr.RuleRefElement in method public abstract void antlr.CodeGenerator.gen(antlr.RuleRefElement) in class antlr.CodeGenerator
# Hidden class found: antlr.BlockEndElement in method public void antlr.CppCodeGenerator.gen(antlr.BlockEndElement) in class antlr.CppCodeGenerator
# Hidden class found: antlr.ActionElement in method public void antlr.CSharpCodeGenerator.gen(antlr.ActionElement) in class antlr.CSharpCodeGenerator
sigtest.gen.fail.on.error=false
