/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2001 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.test.editor.app.gui;



import org.netbeans.test.editor.app.core.*;

import org.openide.explorer.view.*;

import javax.swing.*;

import org.openide.NotifyDescriptor;

import org.openide.TopManager;

import org.openide.explorer.ExplorerPanel;

import org.netbeans.core.NbMainExplorer;

import org.openide.windows.WindowManager;
import org.netbeans.test.editor.app.core.Test;
import org.openide.windows.Workspace;

import java.util.Vector;
import org.openide.nodes.Node;



import java.io.File;

/**

 *

 * @author  ehucka

 * @version

 */

public class TestEditorFrame extends javax.swing.JFrame {

    private Node root;

    private Test test;

    private Vector explorers;

    /** Creates new form TestEditorFrame */

    public TestEditorFrame() {

        explorers=new Vector();

        initComponents ();

        pack ();

        this.setSize(800,500);

    }

    

    public EventLoggingEditorPane getEditor() {

        return (EventLoggingEditorPane)editor;

    }

    

    public void setRoot(Test test) {

        this.test=test;

        root = test.getNodeDelegate();

          

        for(int i=0;i < explorers.size();i++) {

            ((ExplorerPanel)explorers.get(i)).getExplorerManager().

                setRootContext(root);            

        }

    }

    

    public void newRootWindow() {

        NbMainExplorer.ExplorerTab et = new NbMainExplorer.ExplorerTab ();

        explorers.add(et);

        et.getExplorerManager ().setRootContext (root);

        WindowManager wm = TopManager.getDefault().getWindowManager();

        Workspace curWorkspace = wm.getCurrentWorkspace();

        String modeName = "Test tree explorer "+Integer.toString(explorers.size());

        curWorkspace.createMode("explorer"+Integer.toString(explorers.size()),modeName,null

            ).dockInto(et);

        et.open ();

    }

    

    public Node getRoot() {
        return root;
    }
    

    /** This method is called from within the constructor to

     * initialize the form.

     * WARNING: Do NOT modify this code. The content of this method is

     * always regenerated by the FormEditor.

     */

    private void initComponents() {//GEN-BEGIN:initComponents
	jMenuBar1 = new javax.swing.JMenuBar();
	jMenu1 = new javax.swing.JMenu();
	jMenuItem1 = new javax.swing.JMenuItem();
	jMenuItem2 = new javax.swing.JMenuItem();
	jMenuItem3 = new javax.swing.JMenuItem();
	jMenuItem4 = new javax.swing.JMenuItem();
	jSeparator1 = new javax.swing.JSeparator();
	jMenuItem5 = new javax.swing.JMenuItem();
	jMenu2 = new javax.swing.JMenu();
	jMenuItem6 = new javax.swing.JMenuItem();
	jPanel2 = new javax.swing.JPanel();
	jScrollPane3 = new javax.swing.JScrollPane();
	editor = new EventLoggingEditorPane();
	jPanel3 = new javax.swing.JPanel();
	controller = new TextController((EventLoggingEditorPane)editor);
	jPanel4 = new javax.swing.JPanel();
	jScrollPane2 = new javax.swing.JScrollPane();
	history = new javax.swing.JTextArea();
	
	jMenu1.setText("File");
	jMenuItem1.setText("New");
	jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		newTest(evt);
	    }
	});
	
	jMenu1.add(jMenuItem1);
	jMenuItem2.setText("Open");
	jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		openTest(evt);
	    }
	});
	
	jMenu1.add(jMenuItem2);
	jMenuItem3.setText("Save");
	jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		saveTest(evt);
	    }
	});
	
	jMenu1.add(jMenuItem3);
	jMenuItem4.setText("Save as ...");
	jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		saveAsTest(evt);
	    }
	});
	
	jMenu1.add(jMenuItem4);
	jMenu1.add(jSeparator1);
	jMenuItem5.setText("Exit");
	jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		exitTest(evt);
	    }
	});
	
	jMenu1.add(jMenuItem5);
	jMenuBar1.add(jMenu1);
	jMenu2.setText("View");
	jMenuItem6.setText("Explorer");
	jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
	    public void actionPerformed(java.awt.event.ActionEvent evt) {
		rootSetting(evt);
	    }
	});
	
	jMenu2.add(jMenuItem6);
	jMenuBar1.add(jMenu2);
	
	getContentPane().setLayout(new java.awt.GridBagLayout());
	java.awt.GridBagConstraints gridBagConstraints1;
	
	addWindowListener(new java.awt.event.WindowAdapter() {
	    public void windowClosing(java.awt.event.WindowEvent evt) {
		exitForm(evt);
	    }
	});
	
	jPanel2.setLayout(new java.awt.BorderLayout());
	
	jPanel2.setBorder(new javax.swing.border.TitledBorder("Editor"));
	jPanel2.setPreferredSize(new java.awt.Dimension(300, 200));
	jPanel2.setMinimumSize(new java.awt.Dimension(300, 200));
	jScrollPane3.setAutoscrolls(true);
	editor.setPreferredSize(new java.awt.Dimension(200, 100));
	editor.setMinimumSize(new java.awt.Dimension(200, 100));
	jScrollPane3.setViewportView(editor);
	
	jPanel2.add(jScrollPane3, java.awt.BorderLayout.CENTER);
	
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.gridx = 0;
	gridBagConstraints1.gridy = 0;
	gridBagConstraints1.gridwidth = 3;
	gridBagConstraints1.gridheight = 3;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
	gridBagConstraints1.weightx = 1.0;
	gridBagConstraints1.weighty = 1.0;
	getContentPane().add(jPanel2, gridBagConstraints1);
	
	jPanel3.setLayout(new java.awt.BorderLayout());
	
	jPanel3.setBorder(new javax.swing.border.TitledBorder("Actions set"));
	jPanel3.setPreferredSize(new java.awt.Dimension(100, 200));
	jPanel3.setMinimumSize(new java.awt.Dimension(100, 200));
	controller.setPreferredSize(new java.awt.Dimension(100, 100));
	controller.setMinimumSize(new java.awt.Dimension(100, 100));
	jPanel3.add(controller, java.awt.BorderLayout.CENTER);
	
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.gridx = 3;
	gridBagConstraints1.gridy = 0;
	gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
	gridBagConstraints1.gridheight = 3;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
	gridBagConstraints1.weightx = 1.0;
	gridBagConstraints1.weighty = 1.0;
	getContentPane().add(jPanel3, gridBagConstraints1);
	
	jPanel4.setLayout(new java.awt.BorderLayout());
	
	jPanel4.setBorder(new javax.swing.border.TitledBorder("History"));
	jPanel4.setPreferredSize(new java.awt.Dimension(500, 75));
	jPanel4.setMinimumSize(new java.awt.Dimension(500, 75));
	history.setEditable(false);
	history.setColumns(80);
	history.setRows(1000);
	history.setPreferredSize(new java.awt.Dimension(960, 17000));
	history.setMinimumSize(new java.awt.Dimension(500, 75));
	jScrollPane2.setViewportView(history);
	
	jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);
	
	gridBagConstraints1 = new java.awt.GridBagConstraints();
	gridBagConstraints1.gridx = 0;
	gridBagConstraints1.gridy = 3;
	gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
	gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
	gridBagConstraints1.weightx = 1.0;
	gridBagConstraints1.weighty = 1.0;
	getContentPane().add(jPanel4, gridBagConstraints1);
	
	setJMenuBar(jMenuBar1);
    }//GEN-END:initComponents



  private void rootSetting(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootSetting

// Add your handling code here:

    newRootWindow();      

  }//GEN-LAST:event_rootSetting



  private void exitTest(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitTest

      // Add your handling code here:

      exitForm(null);

  }//GEN-LAST:event_exitTest

  

  private void saveAsTest(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsTest

      // Add your handling code here:

      String dlgFile = fileDlg(false);

      

      new Thread() {

          private String file;

          public void start(String afile) {

              file = afile;

              start();

          }

          public void run() {

              Main.saveAsTest(file);

          }

      }.start(dlgFile);

  }//GEN-LAST:event_saveAsTest

  

  private void saveTest(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTest

      // Add your handling code here:

      if (Main.isNoname()) {

          saveAsTest(null);

      }

      new Thread() {

          public void run() {

              Main.saveTest();

          }

      }.start();

  }//GEN-LAST:event_saveTest

  

  private void openTest(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTest

      // Add your handling code here:

      String dlgFile = fileDlg(true);

      

      new Thread() {

          private String file;

          public void start(String afile) {

              file = afile;

              start();

          }

          public void run() {

              Main.openTest(file);

          }

      }.start("file://" + dlgFile);

  }//GEN-LAST:event_openTest

  

  private void newTest(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTest

      // Add your handling code here:

      if (!Main.newTest()) {

          if (quest("Test was modified. Save it?")) {

              saveTest(null);

          }

      }

      Main.newTest();

  }//GEN-LAST:event_newTest

  

    /** Exit the Application */

    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm

        if (Main.isChanged()) {

            if (quest("Test is modified. Save it?")) {

                saveTest(null);

            }

        }

        for(int i=0;i < explorers.size();i++) {

            ((ExplorerPanel)explorers.get(i)).close();

        }        

        Main.finish();  //I think, it's useless now.

        System.exit (0);

    }//GEN-LAST:event_exitForm

    

    public void closeFrames() {

        for(int i=0;i < explorers.size();i++) {

            ((ExplorerPanel)explorers.get(i)).close();

        }        

//        close();

    }

    public void killFrame() {
        closeFrames();
        setVisible(false);
    }

    public boolean quest(String question) {

        NotifyDescriptor.Confirmation dlg=new NotifyDescriptor

             .Confirmation(question,NotifyDescriptor.YES_NO_OPTION);

        return NotifyDescriptor.OK_OPTION.equals(TopManager.getDefault()

                .notify(dlg));

    }

    

    public String fileDlg(boolean open) {

        JFileChooser fch;

        File file = null;

        

        fch=new JFileChooser();

        if (open) {

            fch.setDialogTitle("Open Test ...");

            if (fch.showOpenDialog(fch) == JFileChooser.APPROVE_OPTION)

                if (!(file = fch.getSelectedFile()).isFile())

                    return null;

        } else {

            fch.setDialogTitle("Save Test As ...");

            if (fch.showSaveDialog(fch) == JFileChooser.APPROVE_OPTION) {

                file = fch.getSelectedFile();

            }

        }

        System.err.println("file=" + file);

        if (file == null)

            return null;

        return file.getAbsolutePath();

    }

    

    public void appendHistory(String text) {

        history.append(text);

        history.revalidate();

    }

    

    public TextController getController() {

        return (TextController)controller;

    }

    

    private int horizontalScrollBarPolicy() {

        return ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS/*AS_NEEDED;*/;

    }

    

    private int verticalScrollBarPolicy() {

        return ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS/*AS_NEEDED;*/;

    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JEditorPane editor;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel controller;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea history;
    // End of variables declaration//GEN-END:variables



}

