<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<?xml-stylesheet type="text/xml" href="../nbbuild/javadoctools/apichanges.xsl"?>
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../nbbuild/javadoctools/apichanges.dtd">

<!--

INFO FOR PEOPLE ADDING CHANGES:

Check the DTD (apichanges.dtd) for details on the syntax. You do not
need to regenerate the HTML, as this is part of Javadoc generation; just
change the XML. Rough syntax of a change (several parts optional):

<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>

Also permitted elements: <package>, <branch>. <version> is API spec
version, recommended for all new changes. <compatibility> should say
if things were added/modified/deprecated/etc. and give all information
related to upgrading old code. List affected top-level classes and
link to issue numbers if applicable. See the DTD for more details.

Changes need not be in any particular order, they are sorted in various
ways by the stylesheet anyway.

Dates are assumed to mean "on the trunk". If you *also* make the same
change on a stabilization branch, use the <branch> tag to indicate this
and explain why the change was made on a branch in the <description>.

Please only change this file on the trunk! Rather: you can change it
on branches if you want, but these changes will be ignored; only the
trunk version of this file is important.

Deprecations do not count as incompatible, assuming that code using the
deprecated calls continues to see their documented behavior. But do
specify deprecation="yes" in <compatibility>.

This file is not a replacement for Javadoc: it is intended to list changes,
not describe the complete current behavior, for which ordinary documentation
is the proper place.

-->

<apichanges>

    <!-- First, a list of API names you may use: -->
    <apidefs>
        <apidef name="editor">Editor API</apidef>
        <!-- etc. -->
    </apidefs>

    <!-- ACTUAL CHANGES BEGIN HERE: -->

    <changes>

        <change id="NbBaseDocument-kitClass-deprecations">
            <api name="editor"/>
            <summary>Deprecating kit class related API in NbEditorDocument</summary>
            <version major="1" minor="37"/>
            <date day="16" month="1" year="2008"/>
            <author login="vstejskal"/>
            <compatibility binary="compatible" source="compatible" semantic="compatible" addition="yes" deprecation="yes" modification="yes"/>
            <description>
                <p>
                    The use of editor kit implementation class for identifying
                    the type of a document has been deprecated in favor of mime
                    types and <code>MimeLookup</code>. This change deprecates API
                    methods and construction in <code>BaseDocument</code> that
                    accept editor kit implementation class and adds their equivalents
                    accepting <code>EditorKit</code>.
                </p>
                <p>Deprecated:
                <code>NbEditorDocument(Class)</code>
                </p>
                <p>Added:
                <code>NbEditorDocument(EditorKit)</code>
                </p>
            </description>
            <issue number="114747"/>
        </change>

        <change id="SideBar.location">
            <api name="editor"/>
            <summary>Change of attribute name for <code>SideBar</code> instances to <code>location</code></summary>
            <version major="1" minor="33"/>
            <date day="16" month="6" year="2007"/>
            <author login="jglick"/>
            <compatibility modification="yes" semantic="compatible" deprecation="yes"/>
            <description>
                <p>
                    The position of <code>SideBar</code> instances (<code>East</code> etc.)
                    used to be given by the <code>position</code> attribute.
                    Since that clashes with folder ordering, this attribute was deprecated
                    in favor of <code>location</code>. The old attribute is still read as a backup.
                </p>
            </description>
            <issue number="103187"/>
        </change>

        <change id="Editors-Toolbars-Default">
            <api name="editor"/>
            <summary>Deprecating Editors/text/base/Toolbars/Default</summary>
            <version major="1" minor="32"/>
            <date day="28" month="2" year="2007"/>
            <author login="vstejskal"/>
            <compatibility source="compatible" semantic="compatible" binary="compatible" modification="no" addition="no" deletion="no" deprecation="yes" />
            <description>
            <p>
                The <code>Editors/text/base/Toolbars/Default</code> folder has
                been deprecated in favor of <code>Editors/Toolbars/Default</code>.
                The artificial mime type <code>text/base</code> should not be used
                for registering toolbar actions that apply to all editors anymore,
                instead use the root of the folders hierarchy.
            </p>
            </description>
        </change>

        <change id="CustomizableSideBar-CustomizableSideBarClass2LayerFolder">
            <api name="editor"/>
            <summary>Moving CustomizableSideBar and CustomizableSideBarClass2LayerFolder to a private package</summary>
            <version major="1" minor="31"/>
            <date day="26" month="2" year="2007"/>
            <author login="vstejskal"/>
            <compatibility source="incompatible" semantic="compatible" binary="incompatible" modification="no" addition="no" deletion="yes" deprecation="no" />
            <description>
            <p>
                The <code>CustomizableSideBar</code> and <code>CustomizableSideBarClass2LayerFolder</code>
                classes were accidentaly exposed in an API visible package. We
                moved them to a private package, because they have no API use.
                They implement support for editor side bars, which can be registered
                using the <code>SideBar</code> subfolders in <code>MimeLookup</code>.
            </p>
            </description>
        </change>

        <change id="PopupActions-PopupInitializer">
            <api name="editor"/>
            <summary>Moving PopupActions and PopupInitializer to a private package</summary>
            <version major="1" minor="30"/>
            <date day="19" month="2" year="2007"/>
            <author login="vstejskal"/>
            <compatibility source="incompatible" semantic="compatible" binary="incompatible" modification="no" addition="no" deletion="yes" deprecation="no" />
            <description>
            <p>
                The <code>PopupActions</code> and <code>PopupInitializer</code>
                classes were accidentaly exposed in an API visible package. We
                moved them to a private package, because they have no API use.
                They implement support for editor popup menu, which can be registered
                using the <code>Popup</code> subfolders in <code>MimeLookup</code>.
            </p>
            </description>
        </change>
        
        <change id="NbEditorUtilities.getMimeType">
            <api name="editor"/>
            <summary>Adding NbEditorUtilities.getMimeType(JTextComponent)</summary>
            <version major="1" minor="29"/>
            <date day="16" month="2" year="2007"/>
            <author login="vstejskal"/>
            <compatibility source="compatible" semantic="compatible" binary="compatible" modification="no" addition="yes" deletion="no" deprecation="no" />
            <description>
            <p>
                Adding <code>NbEditorUtilities.getMimeType(JTextComponent)</code>
                as a standard way of determining a mime type of a Netbeans
                document loaded in <code>JTextComponent</code>. It complements
                the <code>NbEditorUtilities.getMimeType(Document)</code> method.
            </p>
            </description>
        </change>
        
        <change id="AllOptionsFolder.loadMimeOption">
            <api name="editor"/>
            <summary>Deprecating AllOptionsFolder.loadMimeOption methods</summary>
            <version major="1" minor="28"/>
            <date day="16" month="1" year="2007"/>
            <author login="vstejskal"/>
            <compatibility source="compatible" semantic="compatible" binary="compatible" modification="no" addition="no" deletion="no" deprecation="yes" />
            <description>
            <p>
                Deprecating <code>AllOptionsFolder.loadMimeOption(Class kitClass)</code>
                and <code>AllOptionsFolder.loadMimeOption(Class kitClass, boolean processOldTypeOption)</code>.
                There is no reason anybody should need to call these methods.
                <code>MimeLookup</code> should be used for accessing editor settings
                including <code>BaseOptions</code>.
            </p>
            </description>
        </change>
        
        <change id="text-base">
            <api name="editor"/>
            <summary>Fake MIME type <code>text/base</code> was removed</summary>
            <version major="1" minor="24"/>
            <date day="27" month="7" year="2005"/>
            <author login="mroskanin"/>
            <compatibility semantic="incompatible" modification="yes">
                <p>
                    Modules formerly registering objects in this layer location
                    will need to move their registrations for them to continue working.
                </p>
            </compatibility>
            <description>
        Fake MIME type folder <code>Editors/text/base/</code>
        formerly used for global objects common for all MIME types, was removed.
        Now all common objects can be placed into the <code>Editors/</code> folder directly.
            </description>
        </change>


    </changes>

    <!-- Now the surrounding HTML text and document structure: -->

    <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <==============

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE editor/apichanges.xml

-->
    <head>
      <title>Change History for the Editor API</title>
      <link rel="stylesheet" href="prose.css" type="text/css"/>
    </head>
    <body>

<p class="overviewlink"><a href="overview-summary.html">Overview</a></p>

<h1>Introduction</h1>

<p>This document lists changes made to the <a href="@org-netbeans-modules-editor@/architecture-summary.html">Editor API</a>.</p>

<!-- The actual lists of changes, as summaries and details: -->
      <hr/>
      <standard-changelists module-code-name="editor/1"/>

      <hr/><p>@FOOTER@</p>

    </body>
  </htmlcontents>

</apichanges>
