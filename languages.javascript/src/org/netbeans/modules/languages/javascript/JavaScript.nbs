# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.



########### tokens #############################################################

TOKEN:js_comment: ("/*" - "*/")
TOKEN:js_comment: ("<!--")
TOKEN:js_line_comment: ("//"[^"\n""\r"]*)
TOKEN:js_keyword: (
    "abstract" | 
    "boolean" |  
    "break" |
    "byte" |
    "case" |
    "catch" |
    "char" |
    "class" |
    "const" |
    "continue" |
    "debugger" |
    "default" |
    "delete" |
    "do" |
    "double" |
    "else" |
    "enum" |
    "export" |
    "extends" |
    "false" |
    "final" |
    "finally" |
    "float" |
    "for" |
    "function" |
    "goto" |
    "if" |
    "implements" |
    "import" |
    "in" |
    "instanceof" |
    "int" |
    "interface" |
    "long" | 
    "native" |
    "new" |
    "null" |
    "package" |
    "private" |
    "protected" |
    "public" |
    "return" |
    "short" |
    "static" |
    "super" |
    "switch" |
    "synchronized" |
    "this" |
    "throw" |
    "throws" |
    "transient" |
    "true" |
    "try" |
    "typeof" |
    "var" |
    "void" |
    "volatile" |
    "while" |
    "with"
)

TOKEN:js_operator: (
    "==" | "!=" | "<<" | ">>" | ">>>" | ">=" | "<=" | "++" | "--" | 
    "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | ">>>=" | "&=" | 
    "^=" | "|=" | "&&" | "||" | "===" | "!==" | 
    "?" | ":" | "<" | ">" | "*" | "-" | "+" | "." | "," | "=" |
     "(" | ")" | "[" | "]" | "!" | "@" | "#" | "%" | "^" | "&" | 
    "~" | "|" | "\\"
)

TOKEN:js_separator: ( [";" "{" "}"] )

TOKEN:js_string: (
    "\"" ( 
        [^ "\\" "\"" "\n" "\r"] |
        ("\\" (
            . |
            (["0"-"7"] ["0"-"7"] ["0"-"7"]) |
            ("x" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"]) |
            ("u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        ))
    )* 
    "\""
)
TOKEN:js_string: (
    "\'" ( 
        [^ "\\" "\'" "\n" "\r"] |
        ("\\" (
            . |
            (["0"-"7"] ["0"-"7"] ["0"-"7"]) |
            ("x" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"]) |
            ("u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        ))
    )* 
    "\'"
)
#TOKEN:js_regularExpression: (
#    "/" ( [^ "\n" "\r"] )* "/" ['g' 'i' 'm']*
#)

TOKEN:js_regularExpression: {
    pattern:( "/" );
    call:org.netbeans.modules.languages.javascript.JavaScript.parseRegularExpression;
}

TOKEN:js_number: (
    ["0"-"9"] ['l' 'L']? |
    ["1"-"9"] ["0"-"9"]* ['l' 'L']? |
    "0" ["0"-"7"]+ ['l' 'L']? |
    "0" ["x" "X"] ["0"-"9" "a"-"f" "A"-"F"]+ ['l' 'L']? |
    ["0"-"9"]+ "." ["0"-"9"]* (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]? |
    "." ["0"-"9"]+ (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]? |
    ["0"-"9"]+ ["e" "E"] ["+" "-"]? ["0"-"9"]+ ["f" "F" "d" "D"]? |
    ["0"-"9"]+ (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]
)

TOKEN:js_whitespace: ([" " "\t" "\n" "\r"]+)

TOKEN:js_identifier: (
    ["a"-"z" "A"-"Z" "_" "$"] 
    ["a"-"z" "A"-"Z" "0"-"9" "_" "$"
    ]*
)


########### grammar ############################################################

SKIP:js_whitespace
SKIP:js_comment
SKIP:js_line_comment

S = (SourceElement)+;
SourceElement = Statement;
FormalParameterList = [<js_identifier> ("," <js_identifier>)*]; 

Statement = EmptyStatement | ExpressionStatement | VariableStatement | 
    Block | LabelledStatement | IfStatement | SwitchStatement | 
    DoStatement | WhileStatement | ForStatement | 
    WithStatement | ContinueStatement | BreakStatement | ReturnStatement | 
    ThrowStatement | TryStatement;
Block = "{" (Statement)* "}";
VariableStatement = "var" VariableDeclaration ("," VariableDeclaration)* [";"];
VariableDeclaration = <js_identifier> [Initializer];
Initializer = "=" AssignmentExpression;
EmptyStatement = ";";
ExpressionStatement = ExpressionInitial [";"];
IfStatement = "if" "(" Expression ")" Statement ["else" Statement];
DoStatement = "do" Statement "while" "(" Expression ")" [";"];
WhileStatement = "while" "(" Expression ")" Statement;
ForStatement = 
    "for" "(" [AssignmentExpression] [";" [Expression] ";" [Expression]] ")" Statement |
    "for" "(" "var" VariableDeclarationNoIn (
        ("," VariableDeclarationNoIn)* ";" [Expression] ";" [Expression] |
        "in" Expression
    ) ")" Statement;
#HACK                     "for" "(" LeftHandSideExpression "in" Expression ")" Statement;
VariableDeclarationNoIn = <js_identifier> [InitializerNoIn];
InitializerNoIn = "=" AssignmentExpressionNoIn;
ContinueStatement = "continue" [<js_identifier>] [";"];
BreakStatement = "break" [<js_identifier>] [";"];
ReturnStatement = "return" [Expression] [";"];
WithStatement = "with" "(" Expression ")" Statement;
SwitchStatement = "switch" "(" Expression ")" "{" (CaseClause)* [DefaultClause] (CaseClause)* "}";
CaseClause = "case" Expression ":" (Statement)*;
DefaultClause = "default" ":" (Statement)*;
LabelledStatement = <js_identifier> ":" Statement;
ThrowStatement = "throw" Expression ";";
TryStatement = "try" Block [Catch] [Finally];
Catch = "catch" "(" <js_identifier> ")" Block;
Finally = "finally" Block;

ExpressionInitial = AssignmentExpressionInitial ("," AssignmentExpression)*;
Expression = AssignmentExpression ("," AssignmentExpression)*;
ExpressionInitialNoIn = AssignmentExpressionInitialNoIn ("," AssignmentExpressionNoIn)*;
ExpressionNoIn = AssignmentExpressionNoIn ("," AssignmentExpressionNoIn)*;
AssignmentExpression = ConditionalExpression (AssignmentOperator ConditionalExpression)*;
AssignmentExpressionInitial = ConditionalExpressionInitial (AssignmentOperator ConditionalExpression)*;
AssignmentExpressionNoIn = ConditionalExpressionNoIn (AssignmentOperator ConditionalExpressionNoIn)*;
AssignmentExpressionInitialNoIn = ConditionalExpressionInitialNoIn (AssignmentOperator ConditionalExpressionNoIn)*;
AssignmentOperator = "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=";
ConditionalExpression = LogicalORExpression ["?" AssignmentExpression ":" AssignmentExpression];
ConditionalExpressionInitial = LogicalORExpressionInitial ["?" AssignmentExpression ":" AssignmentExpression];
ConditionalExpressionNoIn = LogicalORExpressionNoIn ["?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn];
ConditionalExpressionInitialNoIn = LogicalORExpressionInitialNoIn ["?" AssignmentExpressionNoIn ":" AssignmentExpressionNoIn];
LogicalORExpression = LogicalANDExpression ("||" LogicalANDExpression)*;
LogicalORExpressionInitial = LogicalANDExpressionInitial ("||" LogicalANDExpression)*;
LogicalORExpressionNoIn = LogicalANDExpressionNoIn ("||" LogicalANDExpressionNoIn)*;
LogicalORExpressionInitialNoIn = LogicalANDExpressionInitialNoIn ("||" LogicalANDExpressionNoIn)*;
LogicalANDExpression = BitwiseORExpression ("&&" BitwiseORExpression)*;
LogicalANDExpressionInitial = BitwiseORExpressionInitial ("&&" BitwiseORExpression)*;
LogicalANDExpressionNoIn = BitwiseORExpressionNoIn ("&&" BitwiseORExpressionNoIn)*;
LogicalANDExpressionInitialNoIn = BitwiseORExpressionInitialNoIn ("&&" BitwiseORExpressionNoIn)*;
BitwiseORExpression = BitwiseXORExpression ("|" BitwiseXORExpression)*;
BitwiseORExpressionInitial = BitwiseXORExpressionInitial ("|" BitwiseXORExpression)*;
BitwiseORExpressionNoIn = BitwiseXORExpressionNoIn ("|" BitwiseXORExpressionNoIn)*;
BitwiseORExpressionInitialNoIn = BitwiseXORExpressionInitialNoIn ("|" BitwiseXORExpressionNoIn)*;
BitwiseXORExpression = BitwiseANDExpression ("^" BitwiseANDExpression)*;
BitwiseXORExpressionInitial = BitwiseANDExpressionInitial ("^" BitwiseANDExpression)*;
BitwiseXORExpressionNoIn = BitwiseANDExpressionNoIn ("^" BitwiseANDExpressionNoIn)*;
BitwiseXORExpressionInitialNoIn = BitwiseANDExpressionInitialNoIn ("^" BitwiseANDExpressionNoIn)*;
BitwiseANDExpression = EqualityExpression ("&" EqualityExpression)*;
BitwiseANDExpressionInitial = EqualityExpressionInitial ("&" EqualityExpression)*;
BitwiseANDExpressionNoIn = EqualityExpressionNoIn ("&" EqualityExpressionNoIn)*;
BitwiseANDExpressionInitialNoIn = EqualityExpressionInitialNoIn ("&" EqualityExpressionNoIn)*;
EqualityExpression = RelationalExpression (EqualityOperator EqualityExpression)*;
EqualityExpressionInitial = RelationalExpressionInitial (EqualityOperator EqualityExpression)*;
EqualityExpressionNoIn = RelationalExpressionNoIn (EqualityOperator EqualityExpressionNoIn)*;
EqualityExpressionInitialNoIn = RelationalExpressionInitialNoIn (EqualityOperator EqualityExpressionNoIn)*;
EqualityOperator = "==" | "!=" | "===" | "!==";
RelationalExpression = ShiftExpression ((RelationalOperator | "in") ShiftExpression)*;
RelationalExpressionInitial = ShiftExpressionInitial ((RelationalOperator | "in") RelationalExpression)*;
RelationalExpressionNoIn = ShiftExpression (RelationalOperator ShiftExpression)*;
RelationalExpressionInitialNoIn = ShiftExpressionInitial (RelationalOperator ShiftExpression)*;
RelationalOperator = "<" | ">" | "<=" | ">=" | "instanceof";
ShiftExpression = AdditiveExpression (("<<" | ">>" | ">>>") AdditiveExpression)*;
ShiftExpressionInitial = AdditiveExpressionInitial (("<<" | ">>" | ">>>") AdditiveExpression)*;
AdditiveExpression = MultiplicativeExpression (("+" | "-") MultiplicativeExpression)*;
AdditiveExpressionInitial = MultiplicativeExpressionInitial (("+" | "-") MultiplicativeExpression)*;
MultiplicativeExpression = UnaryExpression (("*" | "/" | "%") UnaryExpression)*;
MultiplicativeExpressionInitial = UnaryExpressionInitial (("*" | "/" | "%") UnaryExpression)*;
UnaryExpression = PostfixExpression | 
    "delete" UnaryExpression |
    "void" UnaryExpression |
    "typeof" UnaryExpression |
    "++" UnaryExpression |
    "--" UnaryExpression |
    "+" UnaryExpression |
    "-" UnaryExpression |
    "~" UnaryExpression |
    "!" UnaryExpression;
UnaryExpressionInitial = PostfixExpressionInitial | 
    "delete" UnaryExpression |
    "void" UnaryExpression |
    "typeof" UnaryExpression |
    "++" UnaryExpression |
    "--" UnaryExpression |
    "+" UnaryExpression |
    "-" UnaryExpression |
    "~" UnaryExpression |
    "!" UnaryExpression;
PostfixExpression = LeftHandSideExpression ["++" | "--"];
PostfixExpressionInitial = LeftHandSideExpressionInitial ["++" | "--"];
LeftHandSideExpression = CallExpression | NewExpression;
LeftHandSideExpressionInitial = CallExpressionInitial | NewExpression;
CallExpression = PrimaryExpression (MemberOperator | Arguments)*;
CallExpressionInitial = PrimaryExpressionInitial (MemberOperator | Arguments)*;
NewExpression = "new" NewSubExpression (MemberOperator | Arguments)*;
NewSubExpression = PrimaryExpression (MemberOperator)* | NewExpression;
MemberOperator = "[" Expression "]" | "." <js_identifier>;
Arguments = "(" [AssignmentExpression ("," AssignmentExpression)*] ")";
PrimaryExpression = PrimaryExpressionInitial | ObjectLiteral;
PrimaryExpressionInitial = "this" | "null" | "true" | "false" | 
    <js_number> | <js_string> | <js_identifier> | RegularExpression |
    "(" Expression ")" | ArrayLiteral | FunctionDeclaration;
ArrayLiteral = "[" (",")* [AssignmentExpression] ( (",")+ AssignmentExpression)* (",")* "]";
ObjectLiteral = "{" [PropertyNameAndValue ("," PropertyNameAndValue)*] "}";
PropertyNameAndValue = PropertyName ":" AssignmentExpression;
PropertyName = <js_identifier> | <js_string> | <js_number>;
FunctionDeclaration = "function" [FunctionName] "(" FormalParameterList ")" FunctionBody;
FunctionName = <js_identifier>;
FunctionBody = Block;

RegularExpression = <js_regularExpression>;
#RegularExpression = "/";
#PARSE:RegularExpression:org.netbeans.modules.languages.javascript.JavaScript.parseRegularExpression

AST {
    removeSimple:"!FunctionBody,Statement";
    #process:org.netbeans.modules.languages.javascript.Semantic.process;
}

########### colors #############################################################

COLOR:js_separator: {
    color_name: "js_operator";
}

COLOR:FunctionName: {
    color_name: "js_method";
    default_coloring: "default";
    condition:org.netbeans.modules.languages.javascript.JavaScript.isUsedMethod;
    font_type: "bold";
}

COLOR:FunctionName: {
    color_name: "js_unused_method";
    default_coloring: "default";
    condition:org.netbeans.modules.languages.javascript.JavaScript.isUnusedMethod;
    font_type: "bold";
    foreground_color: "0x737373";
}
COLOR:js_regularExpression: {
    font_type: "bold";
    foreground_color: "0x006f00";
}

COLOR:js_identifier: {
    color_name: "js_function_parameter";
    default_coloring: "default";
    condition:org.netbeans.modules.languages.javascript.JavaScript.isFunctionParameter;
    foreground_color: "0xA06001";
}

COLOR:js_identifier: {
    color_name: "js_unused_function_parameter";
    default_coloring: "default";
    condition:org.netbeans.modules.languages.javascript.JavaScript.isUnusedFunctionParameter;
    foreground_color: "0x737373";
}

COLOR:js_identifier: {
    color_name: "js_local_variable";
    default_coloring: "default";
    font_type: "bold";
    condition:org.netbeans.modules.languages.javascript.JavaScript.isLocalVariable;
    foreground_color: "0x098618";
}

COLOR:js_identifier: {
    color_name: "js_unused_local_variable";
    default_coloring: "default";
    font_type: "bold";
    condition:org.netbeans.modules.languages.javascript.JavaScript.isUnusedLocalVariable;
    foreground_color: "0x737373";
}

########### indentation ########################################################
 

########### code folding #######################################################

FOLD:FunctionBody: {
    expand_type_action_name:"LBL_ExpandMethods";
    collapse_type_action_name:"LBL_CollapseMethods";
}
FOLD:js_comment: {
    expand_type_action_name:"LBL_ExpandComments";
    collapse_type_action_name:"LBL_CollapseComments";
}

########### brace matching #####################################################

BRACE "(:)"
BRACE "{:}"
BRACE "[:]"

########### navigator ##########################################################

NAVIGATOR:FunctionDeclaration: {
    display_name: org.netbeans.modules.languages.javascript.JavaScript.functionName;
    icon: "/org/netbeans/modules/languages/resources/method.gif";
    isLeaf: "true";
}

NAVIGATOR:VariableDeclaration: {
    display_name: "$js_identifier$";
    tooltip: "$js_identifier$ $Initializer$";
    icon: "/org/netbeans/modules/languages/resources/variable.gif";
}

NAVIGATOR:ObjectLiteral: {
    display_name: org.netbeans.modules.languages.javascript.JavaScript.objectName;
    icon: "/org/netbeans/modules/languages/resources/class.gif";
}

NAVIGATOR:PropertyNameAndValue: {
    display_name: "$PropertyName$";
    icon: "/org/netbeans/modules/languages/resources/variable.gif";
}


MARK:ERROR: {
    type:"Error";
    message:"Syntax error.";
}

MARK:error: {
    type:"Error";
    message:"Unexpected character.";
}

COMPLETION:js_identifier, js_keyword, js_whitespace, js_operator, js_separator, js_comment: {
    text1:org.netbeans.modules.languages.javascript.JavaScript.completionItems;
}

#STORE:VariableDeclaration: {
#    context:"Folder,Block";
#    name:"$js_identifier$";
#}

#STORE:FunctionDeclaration: {
#    context:"Folder,Block";
#    name:"$js_identifier$";
#}

#STORE:PropertyNameAndValue: {
#    context:"Folder,Block";
#    name:"$PropertyName$";
#}

HYPERLINK:js_identifier: org.netbeans.modules.languages.javascript.JavaScript.hyperlink

COMPLETE "(:)"
COMPLETE "{:}"
COMPLETE "\":\""
COMPLETE "':'"
COMPLETE "[:]"

INDENT "(:)"
INDENT "{:}"
INDENT "[:]"
INDENT "\\s*(((if|while)\\s*\\(|else\\s*|else\\s+if\\s*\\(|for\\s*\\(.*\\))[^{;]*)"

#FORMAT:Statement: "NewLine"

PROPERTIES {
    #traceSteps:"true";
    #printRules:"true";
    #printFirst:"true";
    projectsViewIcon:"org/netbeans/modules/languages/javascript/JavaScript.jpg";
}

BUNDLE "org.netbeans.modules.languages.javascript.JavaScript"

SELECTION ( ["a"-"z" "A"-"Z" "0"-"9" "_" "$"] )

COMMENT_LINE {
    prefix:"//";
}

########### actions ############################################################

#ACTION:delete_method: {
#    name:"LBL_DeleteCurrentMethod";
#    performer:org.netbeans.modules.languages.javascript.JavaScript.performDeleteCurrentMethod;
#    enabled:org.netbeans.modules.languages.javascript.JavaScript.enabledDeleteCurrentMethod;
#    explorer:"false";
#}

ACTION:run_script: {
    name:"LBL_Run";
    performer:org.netbeans.modules.languages.javascript.JavaScript.performRun;
    enabled:org.netbeans.modules.languages.javascript.JavaScript.enabledRun;
    explorer:"false";
}

ACTION:goto_declaration: {
    name:"LBL_GoToDeclaration";
    performer:org.netbeans.modules.languages.javascript.JavaScript.performGoToDeclaration;
    enabled:org.netbeans.modules.languages.javascript.JavaScript.enabledGoToDeclaration;
    explorer:"false";
}

IMPORT:js_string: {
    mimeType:"text/x-string";
    startSkipLength:"1";
    endSkipLength:"1";
}

