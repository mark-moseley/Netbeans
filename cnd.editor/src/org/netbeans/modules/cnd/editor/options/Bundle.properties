# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
# 
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
# 
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

CTL_Formating_DisplayName=Formatting
CTL_Formating_ToolTip=C/C++ Code Formatting Options

Tab_Name=Formatting
Tab_Name_Mnemonic=F

############################################
# Formatting properties

PROP_indentEngine_CCFormatNewlineBeforeBrace=Add Newline Before Brace
HINT_indentEngine_CCFormatNewlineBeforeBrace=If true, add a newline before any brace
PROP_indentEngine_CCFormatNewlineBeforeBraceDeclaration=Declaration Brace on New Line
HINT_indentEngine_CCFormatNewlineBeforeBraceDeclaration=If true, add a newline before any brace for class/function declaration
PROP_indentEngine_CCFormatSpaceBeforeParenthesis=Add Space Before Parenthesis
HINT_indentEngine_CCFormatSpaceBeforeParenthesis=If True, Add a Space Between a Function and its Left Parenthesis
PROP_indentEngine_CCFormatSpaceAfterComma=Add Space After Comma
HINT_indentEngine_CCFormatSpaceAfterComma=If True, Add a Space After any Comma
PROP_indentEngine_CCFormatLeadingStarInComment=Add Leading Star in Comment
HINT_indentEngine_CCFormatLeadingStarInComment=If True, adds asterisk to lines beginning inside block comments
PROP_indentEngine_CCFormatPreprocessorAtLineStart=Indent Preprocessors Directives
HINT_indentEngine_CCFormatPreprocessorAtLineStart=If True, indent preprocessor directives that start at column 0
PROP_indentEngine_CCFormatStatementContinuationIndent=Statement Continuation Indent
HINT_indentEngine_CCFormatStatementContinuationIndent=Shift for second and subsequent lines in a multi-line statement

SAMPLE_Default=class ClassA : InterfaceA, InterfaceB, InterfaceC {\
public:\ 
int number = 1;\
private:\
char* text ="A";\
public:\
ClassA() {\
}\
public:\
 void method(char* text, int number) {\
} };

SAMPLE_TabsIndents=class ClassA : InterfaceA, InterfaceB, IntefaceC {\
public: int number;\
private: char** = { "A", "B", "C", "D" };\
public: int method(char* text, int number) {\
if ( text == NULL ) {\
    text = "a";\
}\
else if (text[0] == 0) {\
    text = "empty";\
}\
else {\
    number++;\
}\
label:\
switch(number) {\
case 1\:\
    return method("text", 22);\
case 2\:\
    return 20;\
default\:\
    return -1;\
}\
} };

SAMPLE_AlignBraces=class ClassA : InterfaceA, InterfaceB, IntefaceC {\
public: int number = 1;\
private: String letters[] = new String[]{ "A", "B", "C", "D" };\
ClassA() {\
};\
public: int method(String text, int number, Object object) throws ExceptionA, ExceptionB {\
printf(nuber + text.length() < 20 ? "message1" : "message2");\
if ( text == null ) {\
text = "a";\
}\
else if (text.length() == 0) {\
text = number == 2 ? "empty" : "nonempty";\
number = ((op3() + 2) * op4);\
}\
else {\
    number++;\
}\
for( int i = 1; i < 100; i++ ) {\
}\
while ( this.number < 2 && number != 3 ) {\
method( "Some text", 12, new Object());\
}\
do {\
try {\
op1().op2.op3().op4();\
}\
catch ( Throwable t ) {\
log();\
}\
} while ( this.number < 2 && number != 3 );\
}\
enum Where {\
NORTH, EAST, SOUTH, WEST;\
};\
};

SAMPLE_Spaces=class ClassA {\
public: int number = 1;\
private: String text ="A";\
static float[] floats;\
protected: double[] doubles = new double[]{3.67,40,2e-30};\
\
ClassA() {\
};\
public: int method(String text, int number) {\
if (number==13) {\
return (int)System.currentTimeMillis();\
}else {\
{}\
}\
\
for( int i = 20; i < 100; i++) {\
    {\
        while(i%13>5)\
            method( text + " ", number++);\
    }\
}\
\
switch(number) {\
case 1\:\
    do { out( (2+3)*this.number--); } while(this.number > 6);\
    return 10;\
case 2\:\
    try {\
        toString();\
    }\
    catch ( IllegalStateException illegalStateException ) {\
        illegalStateException.printStackTrace();\
    }\
default\:\
   return number > 100 ? -1 : -2;\
}\
} };

Label_Category=Category:
LBL_TabsAndIndents=Indents

LBL_Spaces=Spaces

LBL_BeforeKeywords=Before Keywords
LBL_spaceBeforeWhile="while"
LBL_spaceBeforeElse="else"
LBL_spaceBeforeCatch="catch"

LBL_BeforeParentheses=Before Parentheses
LBL_spaceBeforeMethodDeclParen=Method Declaration
LBL_spaceBeforeMethodCallParen=Method Call
LBL_spaceBeforeIfParen="if"
LBL_spaceBeforeForParen="for"
LBL_spaceBeforeWhileParen="while"
LBL_spaceBeforeCatchParen="catch"
LBL_spaceBeforeSwitchParen="switch"

LBL_AroundOperators=Around Operators
LBL_spaceAroundUnaryOps=Unary Operators
LBL_spaceAroundBinaryOps=Binary Operators
LBL_spaceAroundTernaryOps=Ternary Operators
LBL_spaceAroundAssignOps=Assignment Operators

LBL_BeforeLeftBraces=Before Left Braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
LBL_spaceBeforeMethodDeclLeftBrace=Method Declaration
LBL_spaceBeforeIfLeftBrace="if"
LBL_spaceBeforeElseLeftBrace="else"
LBL_spaceBeforeWhileLeftBrace="while"
LBL_spaceBeforeForLeftBrace="for"
LBL_spaceBeforeDoLeftBrace="do"
LBL_spaceBeforeSwitchLeftBrace="switch"
LBL_spaceBeforeTryLeftBrace="try"
LBL_spaceBeforeCatchLeftBrace="catch"
LBL_spaceBeforeArrayInitLeftBrace=Array Initializer

LBL_WithinParentheses=Within Parentheses
LBL_spaceWithinParens=Parentheses
LBL_spaceWithinMethodDeclParens=Method Declaration
LBL_spaceWithinMethodCallParens=Method Call
LBL_spaceWithinIfParens="if"
LBL_spaceWithinForParens="for"
LBL_spaceWithinWhileParens="while"
LBL_spaceWithinSwitchParens="switch"
LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinTypeCastParens=Type Cast
LBL_spaceWithinBraces=Braces
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets

LBL_Other=Other
LBL_spaceBeforeComma=Before Comma
LBL_spaceAfterComma=After Comma
LBL_spaceBeforeSemi=Before Semicolon
LBL_spaceAfterSemi=After Semicolon
LBL_spaceBeforeColon=Before Colon
LBL_spaceAfterColon=After Colon
LBL_spaceAfterTypeCast=After Type Cast


LBL_bp_SAME_LINE=Same Line
LBL_bp_NEW_LINE=New Line
LBL_Class_Declaration=&Class Declaratin:
LBL_MethodDeclaration=&Method Declaration:
LBL_FunctionDeclaration=&Function Declaration:
LBL_OtherBlock=&Other:
TAB_Braces\ Placement=Braces Placement

LBL_AlignmentAndBraces=Alignment and Braces
TabsIndentsPanel.statementContinuationIndent.text=
TAB_MultilineAlignment=Multiline Alignment
AlignmentBracesPanel.alignMethodParamsCheckBox.text=Method &Parameters
AlignmentBracesPanel.alignArrayInitCheckBox.text=Array Initiali&zer
AlignmentBracesPanel.alignCallArgsCheckBox.text=Method Call Arg&uments
