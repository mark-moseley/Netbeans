# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
# 
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
# 
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

Tab_Name=Code Style
Tab_Name_Mnemonic=C

LBL_TabsAndIndents=Indents
HINT_TabsAndIndents=Indents
LBL_statementContinuationIndent=Statement Continuation Indent
HINT_statementContinuationIndent=Shift for second and subsequent lines in a multi-line statement
LBL_indentPreprocessorDirectives=Preprocessor Directives Indent 
HINT_indentPreprocessorDirectives=Preprocessor directives indent 
LBL_sharpAtStartLine=# at Start Line
HINT_sharpAtStartLine=# at start line
LBL_indentCasesFromSwitch=Indent Case Statements In Switch
HINT_indentCasesFromSwitch=Indent case statements in switch

LBL_BracesPlacement=Braces Placement
HINT_BracesPlacement=Braces placement
LBL_newLineBeforeBraceNamespace=Namespace Declaration
HINT_newLineBeforeBraceNamespace=Namespace declaration
LBL_newLineBeforeBraceClass=Class/Struct Declaratin
HINT_newLineBeforeBraceClass=Class/struct declaratin
LBL_newLineBeforeBraceDeclaration=Method/Function Declaration
HINT_newLineBeforeBraceDeclaration=Method/function declaration
LBL_newLineBeforeBrace=Other
HINT_newLineBeforeBrace=Other

LBL_MultilineAlignment=Multiline Alignment
HINT_MultilineAlignment=Multiline alignment
LBL_alignMultilineArrayInit=Array Initializer
HINT_alignMultilineArrayInit=Array initializer
LBL_alignMultilineCallArgs=Method Call Arguments
HINT_alignMultilineCallArgs=Method call arguments
LBL_alignMultilineMethodParams=Method Parameters
HINT_alignMultilineMethodParams=Method parameters

LBL_NewLine=New Line
HINT_NewLine=New line before
LBL_newLineCatch="catch"
HINT_newLineCatch="catch"
LBL_newLineElse="else"
HINT_newLineElse="else"
LBL_newLineWhile="while"
HINT_newLineWhile="while"

LBL_BeforeKeywords=Spaces Before Keywords
HINT_BeforeKeywords=Spaces before keywords
LBL_spaceBeforeWhile="while"
HINT_spaceBeforeWhile=Spaces before "while"
LBL_spaceBeforeElse="else"
HINT_spaceBeforeElse=Spaces before "else"
LBL_spaceBeforeCatch="catch"
HINT_spaceBeforeCatch=Spaces before "catch"

LBL_BeforeParentheses=Spaces Before Parentheses
HINT_BeforeParentheses=Spaces before parentheses
LBL_spaceBeforeMethodDeclParen=Method Declaration
HINT_spaceBeforeMethodDeclParen=Method declaration
LBL_spaceBeforeMethodCallParen=Method Call
HINT_spaceBeforeMethodCallParen=Method call
LBL_spaceBeforeIfParen="if"
HINT_spaceBeforeIfParen="if"
LBL_spaceBeforeForParen="for"
HINT_spaceBeforeForParen="for"
LBL_spaceBeforeWhileParen="while"
HINT_spaceBeforeWhileParen="while"
LBL_spaceBeforeCatchParen="catch"
HINT_spaceBeforeCatchParen="catch"
LBL_spaceBeforeSwitchParen="switch"
HINT_spaceBeforeSwitchParen="switch"

LBL_AroundOperators=Spaces Around Operators
HINT_AroundOperators=Spaces around operators
LBL_spaceAroundUnaryOps=Unary Operators
HINT_spaceAroundUnaryOps=Unary operators
LBL_spaceAroundBinaryOps=Binary Operators
HINT_spaceAroundBinaryOps=Binary operators
LBL_spaceAroundTernaryOps=Ternary Operators
HINT_spaceAroundTernaryOps=Ternary operators
LBL_spaceAroundAssignOps=Assignment Operators
HINT_spaceAroundAssignOps=Assignment operators

LBL_BeforeLeftBraces=Spaces Before Left Braces
HINT_BeforeLeftBraces=Spaces before left braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
HINT_spaceBeforeClassDeclLeftBrace=Class, struct, enum or union declaration
LBL_spaceBeforeMethodDeclLeftBrace=Method Declaration
HINT_spaceBeforeMethodDeclLeftBrace=Method or function declaration
LBL_spaceBeforeIfLeftBrace="if"
HINT_spaceBeforeIfLeftBrace="if"
LBL_spaceBeforeElseLeftBrace="else"
HINT_spaceBeforeElseLeftBrace="else"
LBL_spaceBeforeWhileLeftBrace="while"
HINT_spaceBeforeWhileLeftBrace="while"
LBL_spaceBeforeForLeftBrace="for"
HINT_spaceBeforeForLeftBrace="for"
LBL_spaceBeforeDoLeftBrace="do"
HINT_spaceBeforeDoLeftBrace="do"
LBL_spaceBeforeSwitchLeftBrace="switch"
HINT_spaceBeforeSwitchLeftBrace="switch"
LBL_spaceBeforeTryLeftBrace="try"
HINT_spaceBeforeTryLeftBrace="try"
LBL_spaceBeforeCatchLeftBrace="catch"
HINT_spaceBeforeCatchLeftBrace="catch"
LBL_spaceBeforeArrayInitLeftBrace=Array Initializer
HINT_spaceBeforeArrayInitLeftBrace=Array initializer

LBL_WithinParentheses=Spaces Within Parentheses
HINT_WithinParentheses=Spaces within parentheses
LBL_spaceWithinParens=Parentheses
HINT_spaceWithinParens=Parentheses
LBL_spaceWithinMethodDeclParens=Method Declaration
HINT_spaceWithinMethodDeclParens=Method declaration
LBL_spaceWithinMethodCallParens=Method Call
HINT_spaceWithinMethodCallParens=Method call
LBL_spaceWithinIfParens="if"
HINT_spaceWithinIfParens="if"
LBL_spaceWithinForParens="for"
HINT_spaceWithinForParens="for"
LBL_spaceWithinWhileParens="while"
HINT_spaceWithinWhileParens="while"
LBL_spaceWithinSwitchParens="switch"
HINT_spaceWithinSwitchParens="switch"
LBL_spaceWithinCatchParens="catch"
HINT_spaceWithinCatchParens="catch"
LBL_spaceWithinTypeCastParens=Type Cast
HINT_spaceWithinTypeCastParens=Type cast
LBL_spaceWithinBraces=Braces
HINT_spaceWithinBraces=Braces
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets
HINT_spaceWithinArrayInitBrackets=Array initializer brackets

LBL_Other=Other Spaces
HINT_Other=Other spaces
LBL_spaceBeforeComma=Before Comma
HINT_spaceBeforeComma=Before comma
LBL_spaceAfterComma=After Comma
HINT_spaceAfterComma=After comma
LBL_spaceBeforeSemi=Before Semicolon
HINT_spaceBeforeSemi=Before semicolon
LBL_spaceAfterSemi=After Semicolon
HINT_spaceAfterSemi=After semicolon
LBL_spaceBeforeColon=Before Colon
HINT_spaceBeforeColon=Before colon
LBL_spaceAfterColon=After Colon
HINT_spaceAfterColon=After colon
LBL_spaceAfterTypeCast=After Type Cast
HINT_spaceAfterTypeCast=After type cast

LBL_BlankLines=Blank Lines
HINT_BlankLines=Blank lines
LBL_blankLinesBeforeClass=Before Class
HINT_blankLinesBeforeClass=Before class
LBL_blankLinesAfterClass=After Class
HINT_blankLinesAfterClass=After class
LBL_blankLinesAfterClassHeader=After Class Header
HINT_blankLinesAfterClassHeader=After class/struct header
LBL_blankLinesBeforeFields=Before Field
HINT_blankLinesBeforeFields=Before field
LBL_blankLinesAfterFields=After Field
HINT_blankLinesAfterFields=After field
LBL_blankLinesBeforeMethods=Before Method
HINT_blankLinesBeforeMethods=Before method/function
LBL_blankLinesAfterMethods=After Method
HINT_blankLinesAfterMethods=After method/function

LBL_Other=Other
HINT_Other=Other
LBL_addLeadingStarInComment=Add Leading Star in Comment
HINT_addLeadingStarInComment=Add leading star in comment

EditorPropertySheet.jLabel2.text=&Language:
LBL_Style_Name=&Style Name:
EditorPropertySheet.manageStyles.text=&Manage Styles

SAMPLE_TabsIndents=#include <Map>\n\
/*\n\
 */\n\
class ClassA : InterfaceA, InterfaceB, IntefaceC {\
public: int number;\
private: char** cc = { "A", "B", "C", "D" };\
public: int method(char* text, int number) {\
if ( text == NULL ) {\
    text = "a";\
\n#ifdef C\
\n    #define C1\
\n    #ifdef F\
\n        #define F2\
\n    #endif\
\n#else\
\n    #define C2\
\n#endif\
\n}\
else if (text[0] == 0) {\
    text = "empty";\
}\
else {\
    number++;\
}\
label:\
switch(number) {\
case 1\:\
    return method("text", 22);\
case 2\:\
    return 20;\
default\:\
    return -1;\
}\
} };

SAMPLE_AlignBraces=class ClassA : InterfaceA, InterfaceB, IntefaceC {\
public: int number = 1;\
private: String letters[] = new String[]{ "A", "B", "C", "D" };\
ClassA() {\
};\
public: int method(String text, int number, Object object) throws ExceptionA, ExceptionB {\
printf(nuber + text.length() < 20 ? "message1" : "message2");\
if ( text == null ) {\
text = "a";\
}\
else if (text.length() == 0) {\
text = number == 2 ? "empty" : "nonempty";\
number = ((op3() + 2) * op4);\
}\
else {\
    number++;\
}\
for( int i = 1; i < 100; i++ ) {\
}\
while ( this.number < 2 && number != 3 ) {\
method( "Some text", 12, new Object());\
}\
do {\
try {\
op1().op2.op3().op4();\
}\
catch ( Throwable t ) {\
log();\
}\
} while ( this.number < 2 && number != 3 );\
}\
enum Where {\
NORTH, EAST, SOUTH, WEST;\
};\
};

SAMPLE_Spaces=class ClassA {\
public: int number = 1;\
private: String text ="A";\
static float[] floats;\
protected: double[] doubles = new double[]{3.67,40,2e-30};\
\
ClassA() {\
};\
public: int method(String text, int number) {\
if (number==13) {\
return (int)System.currentTimeMillis();\
}else {\
{}\
}\
\
for( int i = 20; i < 100; i++) {\
    {\
        while(i%13>5)\
            method( text + " ", number++);\
    }\
}\
\
switch(number) {\
case 1\:\
    do { out( (2+3)*this.number--); } while(this.number > 6);\
    return 10;\
case 2\:\
    try {\
        toString();\
    }\
    catch ( IllegalStateException illegalStateException ) {\
        illegalStateException.printStackTrace();\
    }\
default\:\
   return number > 100 ? -1 : -2;\
}\
} };

SAMPLE_BlankLines=#include <List>\
#include <Map>\n\
\n\
class ClassA {\
public: int i;\
public: int j;\
\
public: ClassA() {\
}\
public: void methodA() {\
}\
void methodB() {\
}\
class innerClass {\
}\
class innerInterface {\
}\
}
