# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
# 
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
# 
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

Tab_Name=Formatting Style
Tab_Name_Mnemonic=S

LBL_TabsAndIndents=Indents
HINT_TabsAndIndents=Indents
LBL_statementContinuationIndent=Statement Continuation Indent
HINT_statementContinuationIndent=Shift for second and subsequent lines in a multi-line statement
LBL_indentPreprocessorDirectives=Preprocessor Directives Indent 
HINT_indentPreprocessorDirectives=Preprocessor directives indent 
LBL_sharpAtStartLine=# at Start Line
HINT_sharpAtStartLine=# at start line
LBL_indentCasesFromSwitch=Indent Case Statements In Switch
HINT_indentCasesFromSwitch=Indent case statements in switch

LBL_BracesPlacement=Braces Placement
HINT_BracesPlacement=Right braces placement
LBL_newLineBeforeBraceNamespace=Namespace Declaration
HINT_newLineBeforeBraceNamespace=Namespace declaration
LBL_newLineBeforeBraceClass=Class Declaratin
HINT_newLineBeforeBraceClass=Class/struct/enum/union declaratin
LBL_newLineBeforeBraceDeclaration=Function Declaration
HINT_newLineBeforeBraceDeclaration=Method/function declaration
LBL_newLineBeforeBrace=Other
HINT_newLineBeforeBrace=Other right braces in blocks, compound statements

LBL_MultilineAlignment=Multiline Alignment
HINT_MultilineAlignment=Multiline alignment
LBL_alignMultilineArrayInit=Array Initializer
HINT_alignMultilineArrayInit=Array initializer
LBL_alignMultilineCallArgs=Function Call Arguments
HINT_alignMultilineCallArgs=Method/function call arguments
LBL_alignMultilineMethodParams=Function Parameters
HINT_alignMultilineMethodParams=Method/function parameters

LBL_NewLine=New Line
HINT_NewLine=New line in compound statements
LBL_newLineCatch="catch"
HINT_newLineCatch="catch" on new line
LBL_newLineElse="else"
HINT_newLineElse="else" on new line
LBL_newLineWhile="while"
HINT_newLineWhile="while" on new line in the do-while statement

LBL_BeforeKeywords=Spaces Before Keywords
HINT_BeforeKeywords=Spaces before keywords 
LBL_spaceBeforeCatch="catch"
HINT_spaceBeforeCatch=Spaces before "catch"
LBL_spaceBeforeElse="else"
HINT_spaceBeforeElse=Spaces before "else"
LBL_spaceBeforeWhile="while"
HINT_spaceBeforeWhile=Spaces before "while" in the do-while statement

LBL_BeforeParentheses=Spaces Before Parentheses
HINT_BeforeParentheses=Spaces before parentheses
LBL_spaceBeforeMethodDeclParen=Function Declaration
HINT_spaceBeforeMethodDeclParen=Method/function declaration
LBL_spaceBeforeMethodCallParen=Function Call
HINT_spaceBeforeMethodCallParen=Method/function call
LBL_spaceBeforeCatchParen="catch"
HINT_spaceBeforeCatchParen="catch"
LBL_spaceBeforeForParen="for"
HINT_spaceBeforeForParen="for"
LBL_spaceBeforeIfParen="if"
HINT_spaceBeforeIfParen="if"
LBL_spaceBeforeSwitchParen="switch"
HINT_spaceBeforeSwitchParen="switch"
LBL_spaceBeforeWhileParen="while"
HINT_spaceBeforeWhileParen="while"

LBL_AroundOperators=Spaces Around Operators
HINT_AroundOperators=Spaces around operators
LBL_spaceAroundAssignOps=Assignment Operators
HINT_spaceAroundAssignOps=Assignment operators
LBL_spaceAroundBinaryOps=Binary Operators
HINT_spaceAroundBinaryOps=Binary operators
LBL_spaceAroundTernaryOps=Ternary Operators
HINT_spaceAroundTernaryOps=Ternary operators
LBL_spaceAroundUnaryOps=Unary Operators
HINT_spaceAroundUnaryOps=Unary operators

LBL_BeforeLeftBraces=Spaces Before Left Braces
HINT_BeforeLeftBraces=Spaces before left braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
HINT_spaceBeforeClassDeclLeftBrace=Class/struct/enum/union declaration
LBL_spaceBeforeMethodDeclLeftBrace=Function Declaration
HINT_spaceBeforeMethodDeclLeftBrace=Method/function declaration
LBL_spaceBeforeArrayInitLeftBrace=Array Initializer
HINT_spaceBeforeArrayInitLeftBrace=Array initializer
LBL_spaceBeforeCatchLeftBrace="catch"
HINT_spaceBeforeCatchLeftBrace="catch"
LBL_spaceBeforeDoLeftBrace="do"
HINT_spaceBeforeDoLeftBrace="do"
LBL_spaceBeforeElseLeftBrace="else"
HINT_spaceBeforeElseLeftBrace="else"
LBL_spaceBeforeForLeftBrace="for"
HINT_spaceBeforeForLeftBrace="for"
LBL_spaceBeforeIfLeftBrace="if"
HINT_spaceBeforeIfLeftBrace="if"
LBL_spaceBeforeSwitchLeftBrace="switch"
HINT_spaceBeforeSwitchLeftBrace="switch"
LBL_spaceBeforeTryLeftBrace="try"
HINT_spaceBeforeTryLeftBrace="try"
LBL_spaceBeforeWhileLeftBrace="while"
HINT_spaceBeforeWhileLeftBrace="while"

LBL_WithinParentheses=Spaces Within Parentheses
HINT_WithinParentheses=Spaces within parentheses
LBL_spaceWithinMethodDeclParens=Function Declaration
HINT_spaceWithinMethodDeclParens=Method/function declaration
LBL_spaceWithinMethodCallParens=Function Call
HINT_spaceWithinMethodCallParens=Method/function call
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets
HINT_spaceWithinArrayInitBrackets=Array initializer brackets
LBL_spaceWithinBraces=Braces
HINT_spaceWithinBraces=Braces
LBL_spaceWithinParens=Parentheses
HINT_spaceWithinParens=Parentheses
LBL_spaceWithinCatchParens="catch"
HINT_spaceWithinCatchParens="catch"
LBL_spaceWithinForParens="for"
HINT_spaceWithinForParens="for"
LBL_spaceWithinIfParens="if"
HINT_spaceWithinIfParens="if"
LBL_spaceWithinSwitchParens="switch"
HINT_spaceWithinSwitchParens="switch"
LBL_spaceWithinTypeCastParens=Type Cast
HINT_spaceWithinTypeCastParens=Type cast
LBL_spaceWithinWhileParens="while"
HINT_spaceWithinWhileParens="while"

LBL_Other_Spaces=Other Spaces
HINT_Other_Spaces=Other spaces
LBL_spaceBeforeComma=Before Comma
HINT_spaceBeforeComma=Before comma
LBL_spaceAfterComma=After Comma
HINT_spaceAfterComma=After comma
LBL_spaceBeforeSemi=Before Semicolon
HINT_spaceBeforeSemi=Before semicolon
LBL_spaceAfterSemi=After Semicolon
HINT_spaceAfterSemi=After semicolon
LBL_spaceBeforeColon=Before Colon
HINT_spaceBeforeColon=Before colon
LBL_spaceAfterColon=After Colon
HINT_spaceAfterColon=After colon
LBL_spaceAfterTypeCast=After Type Cast
HINT_spaceAfterTypeCast=After type cast

LBL_BlankLines=Blank Lines
HINT_BlankLines=Blank lines
LBL_blankLinesBeforeClass=Before Class
HINT_blankLinesBeforeClass=Before class/struct/union/enum
#LBL_blankLinesAfterClass=After Class
#HINT_blankLinesAfterClass=After class/struct/union/enum
LBL_blankLinesAfterClassHeader=After Class Header
HINT_blankLinesAfterClassHeader=After class/struct/union/enum header
#LBL_blankLinesBeforeFields=Before Field
#HINT_blankLinesBeforeFields=Before field
#LBL_blankLinesAfterFields=After Field
#HINT_blankLinesAfterFields=After field
LBL_blankLinesBeforeMethods=Before Function
HINT_blankLinesBeforeMethods=Before method/function definition
#LBL_blankLinesAfterMethods=After Method
#HINT_blankLinesAfterMethods=After method/function

LBL_Other=Other
HINT_Other=Other
LBL_addLeadingStarInComment=Add Leading Star in Comment
HINT_addLeadingStarInComment=Add leading star in comment

EditorPropertySheet.jLabel2.text=&Language:
LBL_Style_Name=&Style Name:
EditorPropertySheet.manageStyles.text=&Manage Styles
