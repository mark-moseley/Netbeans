# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.

########### Syntax Coloring ##################################################################

TOKEN:keyword:( 
    "ACTION" |
    "AST" | 
    "BRACE" |
    "BUNDLE" |
    "COLOR" | 
    "COMMENT_LINE" |
    "COMPLETE" |  
    "COMPLETION" | 
    "FOLD" | 
    "FORMAT" |
    "HYPERLINK" | 
    "IMPORT" | 
    "INDENT" | 
    "MARK" | 
    "NAVIGATOR" | 
    "PARSE" | 
    "PROPERTIES" | 
    "REFORMAT" |
    "SELECTION" |
    "SKIP" | 
    "STORE" | 
    "TOKEN" | 
    "TOOLTIP"
)
TOKEN:identifier: ( ["a"-"z" "A"-"Z"] ["a"-"z" "A"-"Z" "0"-"9" "_"]* )
TOKEN:operator: ( 
    ":" | "*" | "?" | "+" | "-" | "[" | "]" | "<" | ">" |
    "^" | "|" | "{" | "}" | "(" | ")" | "," | "=" | ";" | 
    "." | "$"
)
TOKEN:string:( 
    "\"" 
        (  
            [^ "\"" "\\" "\r" "\n"] | 
            ("\\" ["r" "n" "t" "\\" "\'" "\""]) |
            ("\\" "u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        )* 
    "\""
)
TOKEN:string:( 
    "\'" 
        (  
            [^ "\'" "\\" "\r" "\n"] | 
            ("\\" ["r" "n" "t" "\\" "\'" "\""]) |
            ("\\" "u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        )* 
    "\'"
)
TOKEN:comment: ( "#" [^"\n" "\r"]* ["\n" "\r"]+ )
TOKEN:comment: ( "/#" - "#/")
TOKEN:whitespace:( ["\n" "\r" " " "\t"]+ )

SKIP:comment
SKIP:whitespace

S = token S;
S = tokenState S;
S = grammarRule S;
S = command S;
S = ;
                    
token = "TOKEN" ":" tokenName ":" token2;
tokenName = <identifier>;
token2 = regularExpression token3;
token2 = properties;
token3 = ":" state;
token3 = ;
state = "<" <identifier> ">";
tokenState = state tokenState1;
tokenState1 = "{" tokenGroup;
tokenState1 = ":" token;
tokenGroup = tokensInGroup "}";
tokensInGroup = token tokensInGroup;
tokensInGroup = ;
                  
regularExpression = "(" regularExpression1 ")";                    
regularExpression1 = reChoice regularExpression2;
regularExpression2 = "|" reChoice regularExpression2;
regularExpression2 = ;
reChoice = rePart reChoice1;
reChoice1 = rePart reChoice1;
reChoice1 = ;
rePart = <string> [ <identifier, "i"> ] rePartOperatorOrMinus;
rePart = "." rePartOperator;
rePart = reClass rePartOperator;
rePart = "(" regularExpression ")" rePartOperator;
rePartOperator = ;
rePartOperator = "+";
rePartOperator = "?";
rePartOperator = "*";
rePartOperatorOrMinus = "-" <string>;
rePartOperatorOrMinus = rePartOperator;
reClass = "[" reInClassNegation reInClass "]";
reInClassNegation = "^";
reInClassNegation = ;
reInClass = <string> reInClassMinus reInClass1;
reInClass1 = <string> reInClassMinus reInClass1;
reInClass1 = ;
reInClassMinus = "-" <string>;
reInClassMinus = ;
                    
grammarRule = <identifier> "=" grRightSide ";";
grRightSide = grChoice grRightSide1;
grRightSide1 = "|" grChoice grRightSide1;
grRightSide1 = ;
grChoice = grPart grChoice;
grChoice = ;
grPart = <identifier> grOperator;
grPart = tokenDef grOperator;
grPart = <string> grOperator;
grPart = "[" grRightSide "]";
grPart = "(" grRightSide ")" grOperator;
grOperator = "+";
grOperator = "*";
grOperator = "?";
grOperator = ;
tokenDef = "<" <identifier> tokenDef1 ">";
tokenDef1 = "," <string>;
tokenDef1 = ;
                    
command = <keyword> command0;
command0 = ":" selector [":" value];
command0 = value;
value = class | <string> | properties | regularExpression;
properties = "{" properties1 "}";
properties1 = property properties1;
properties1 = ;
property = <identifier> ":" propertyValue ";";
propertyValue = <string>;
propertyValue = class;
propertyValue = regularExpression;
selector = class ("," class)*;                    
class = <identifier> class1;
class1 = "." <identifier> class1;
class1 = ;


NAVIGATOR:token: {
    display_name: "<html><b><font color=000099>TOKEN</font></b>: $identifier$</html>";
}

NAVIGATOR:groupToken: {
    display_name: "<html><b><font color=000099>TOKEN</font></b>: $identifier$</html>";
}

NAVIGATOR:command: {
    display_name: "<html><b><font color=000099>$keyword$</font></b>: $command0.selector$</html>";
}

COMPLETION:keyword,identifier,operator,comment,string,whitespace: {
    text1: org.netbeans.modules.languages.ext.NBS.completion;
}

COMPLETION:tokenName: {
    text1: "identifier";
    text2: "comment";
    text3: "keyword";
    text4: "string";
    text5: "number";
    text6: "operator";
    text7: "whitespace";
}

COMPLETION:regularExpression: {
    text1: "'";
    description1:"<b>'</b> character or string";
    text2: "\"";
    description2:"<b>\"</b> character or string";
    text3: "?";
    description3:"<b>?</b> repeat once or not at all";
    text4: "+";
    description4:"<b>+</b> repeat once or more time";
    text5: "*";
    description5:"<b>*</b> repeat zero or more time";
    text6: "|";
    description6:"<b>|</b> or";
    text7: "(";
    description7:"<b>(</b> subexpression";
    text8: "[";
    description8:"<b>[</b> set of characters ['a'-z' '_']";
    text9: "[^";
    description9:"<b>[^</b> any character expect [^'\\n']";
}

MARK:ERROR: {
    type:"Error";
    message:"LBL_SYNTAX_ERROR";
}

MARK:error: {
    type:"Error";
    message:"LBL_UNEXPECTED_CHARACTER";
}

BUNDLE "org.netbeans.modules.languages.resources.Bundle"
