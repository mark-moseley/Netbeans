line_comment:#!/bin/bash
whitespace:

keyword:while
whitespace: 
operator:[
whitespace: 
operator:$#
whitespace: 
operator:-
identifier:gt
whitespace: 
number:0
whitespace: 
operator:]
operator:;
whitespace: 
keyword:do
whitespace:    
line_comment:# Until you run out of parameters . . .
whitespace:
  
keyword:case
whitespace: 
string:"$1"
whitespace: 
keyword:in
whitespace:
    
operator:-
identifier:d
operator:|
operator:-
operator:-
identifier:debug
operator:)
whitespace:
              
line_comment:# "-d" or "--debug" parameter?
whitespace:
              
identifier:DEBUG
operator:=
number:1
whitespace:
              
operator:;
operator:;
whitespace:
    
operator:-
identifier:c
operator:|
operator:-
operator:-
identifier:conf
operator:)
whitespace:
              
identifier:CONFFILE
operator:=
string:"$2"
whitespace:
              
keyword:shift
whitespace:
              
keyword:if
whitespace: 
operator:[
whitespace: 
operator:!
whitespace: 
operator:-
identifier:f
whitespace: 
identifier:$CONFFILE
whitespace: 
operator:]
operator:;
whitespace: 
keyword:then
whitespace:
                
command:echo
whitespace: 
string:"Error: Supplied file doesn't exist!"
whitespace:
                
keyword:exit
whitespace: 
number:1
whitespace:     
line_comment:# File not found error.
whitespace:
              
keyword:fi
whitespace:
              
operator:;
operator:;
whitespace:
  
keyword:esac
whitespace:
  
keyword:shift
whitespace:       
line_comment:# Check next set of parameters.
whitespace:

keyword:done
whitespace:


identifier:func1
operator:(
operator:)
whitespace:

operator:{
whitespace: 
line_comment:# This is simple function :)
whitespace:
  
command:echo
whitespace: 
string:"This is simple function."
whitespace:

operator:}
whitespace: 
line_comment:# Function declaration must precede call.
whitespace:


keyword:function
whitespace: 
identifier:func2
operator:(
operator:)
whitespace:

operator:{
whitespace:
  
command:echo
whitespace: 
string:"This is another simple function."
whitespace:

operator:}
whitespace:



identifier:func1
whitespace:

identifier:func2
whitespace:


operator:(
operator:(
whitespace: 
number:5
whitespace: 
operator:>
whitespace: 
number:4
whitespace: 
operator:)
operator:)
whitespace:                                      
line_comment:# true
whitespace:

command:echo
whitespace: 
string:"Exit status of \"(( 5 > 4 ))\" is $?."
whitespace:     
line_comment:# 0
whitespace:


identifier:MAX
operator:=
number:10000
whitespace:

keyword:for
whitespace: 
operator:(
operator:(
identifier:nr
operator:=
number:1
operator:;
whitespace: 
identifier:nr
operator:<
identifier:$MAX
operator:;
whitespace: 
identifier:nr
operator:+
operator:+
operator:)
operator:)
whitespace:

keyword:do
whitespace:

    
command:let
whitespace: 
string:"t1 = nr % 5"
whitespace:
    
keyword:if
whitespace: 
operator:[
whitespace: 
string:"$t1"
whitespace: 
operator:-
identifier:ne
whitespace: 
number:3
whitespace: 
operator:]
operator:;
keyword:then
whitespace:
      
keyword:continue
whitespace:
    
keyword:fi
whitespace:

    
command:let
whitespace: 
string:"t2 = nr % 7"
whitespace:
    
keyword:if
whitespace: 
operator:[
whitespace: 
string:"$t2"
whitespace: 
operator:-
identifier:ne
whitespace: 
number:4
whitespace: 
operator:]
whitespace:
    
keyword:then
whitespace:
      
keyword:continue
whitespace:
    
keyword:fi
whitespace:

    
command:let
whitespace: 
string:"t3 = nr % 9"
whitespace:
    
keyword:if
whitespace: 
operator:[
whitespace: 
string:"$t3"
whitespace: 
operator:-
identifier:ne
whitespace: 
number:5
whitespace: 
operator:]
whitespace:
    
keyword:then
whitespace:
      
keyword:continue
whitespace:
    
keyword:fi
whitespace:


keyword:done
whitespace:

command:echo
whitespace: 
string:"Number = $nr"
whitespace:



keyword:exit
whitespace: 
number:0
whitespace:


