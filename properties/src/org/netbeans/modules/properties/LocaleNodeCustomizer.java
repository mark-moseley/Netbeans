/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun
 * Microsystems, Inc. All Rights Reserved.
 */


package org.netbeans.modules.properties;


import java.awt.Component;
import java.awt.Dialog;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import org.openide.DialogDescriptor;
import org.openide.TopManager;
import org.openide.util.NbBundle;


/**
 * Customizer for locale node (<code>PropertiesLocaleNode</code>).
 *
 * @author  Peter Zavadsky
 * @see PropertiesLocaleNode
 */
public class LocaleNodeCustomizer extends JPanel {

    /** Customized properties file entry which represents one properties file. */
    private PropertiesFileEntry entry;

    /** Icon for keys in key list. */
    private static Icon keyIcon;
    
    
    /** Creates new <code>LocaleNodeCustomizer</code>. */
    public LocaleNodeCustomizer(PropertiesFileEntry entry) {
        this.entry = entry;
    
        initComponents();
        
        Locale locale = getLocale(entry);
        
        if(new Locale("", "").equals(locale)) { // NOI18N
            changeNameButton.setEnabled(false);
            nameText.setText(NbBundle.getBundle(LocaleNodeCustomizer.class).getString("LAB_DefaultBundle_Label"));
        } else
            nameText.setText(locale.toString());
        
        removeKeyButton.setEnabled(false);
    }

    /** Updates name of the <code>entry</code>. */
    private void updateName(Locale locale) {
        // Don't rename to "Default" locale node or to the same one.
        if(locale.equals(new Locale("", "")) || locale.equals(getLocale(entry)) )
            return;

        String newName = Util.assembleName(
            entry.getDataObject().getPrimaryFile().getName(),
            locale.toString()
        );

        entry.getNodeDelegate().setName(newName);
        
        nameText.setText(locale.toString());
    }

    /** Utility method. Gets icon for key item in key list. */    
    private static Icon getKeyIcon() {
        if(keyIcon == null)
            keyIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(LocaleNodeCustomizer.class.getResource("/org/netbeans/modules/properties/propertiesKey.gif"))); // NOI18N
        return keyIcon;
    }
    
    /** Gets locale which represents the entry. Utility method.
     * @param entry entry which <code>Locale</code> to get */
    static Locale getLocale(PropertiesFileEntry entry) {
        String languageCode = Util.getLanguage(entry);
        
        if(languageCode == null)
            return new Locale("", ""); // NOI18N
        
        String countryCode = Util.getCountry(entry);
        
        if(countryCode == null)
            return new Locale(languageCode, ""); // NOI18N
        
        String variant = Util.getVariant(entry);
        
        if(variant == null)
            return new Locale(languageCode, countryCode);
        
        return new Locale(languageCode, countryCode, variant);
    }

    /** Retrievs keys in entry. Utility method.
     * @param entry entry which keys to get */
    private static String[] retrieveKeys(PropertiesFileEntry entry) {
        ArrayList keysList = new ArrayList();
        
        for (Iterator it = entry.getHandler().getStructure().allItems(); it.hasNext(); ) {
            String key = ((Element.ItemElem)it.next()).getKey();
            if(key != null && !(keysList.contains(key)))
                keysList.add(key);
        }
        
        String[] keys = new String[keysList.size()];
        keysList.toArray(keys);
        return keys;
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        nameLabel = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        keyLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        keyList = new JList(retrieveKeys(entry));
        addKeyButton = new javax.swing.JButton();
        removeKeyButton = new javax.swing.JButton();
        changeNameButton = new javax.swing.JButton();
        dummyLabel = new javax.swing.JLabel();
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        nameLabel.setText(NbBundle.getBundle(LocaleNodeCustomizer.class).getString("LBL_Name"));
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 0, 0);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        add(nameLabel, gridBagConstraints1);
        
        
        nameText.setEditable(false);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(12, 7, 0, 0);
        gridBagConstraints1.weightx = 1.0;
        add(nameText, gridBagConstraints1);
        
        
        keyLabel.setText(NbBundle.getBundle(LocaleNodeCustomizer.class).getString("LBL_Keys"));
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(11, 12, 0, 0);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
        add(keyLabel, gridBagConstraints1);
        
        
        
        keyList.setCellRenderer(new DefaultListCellRenderer() {
            public Component getListCellRendererComponent(
            JList list,
            Object value,            // value to display
            int index,               // cell index
            boolean isSelected,      // is the cell selected
            boolean cellHasFocus)    // the list and the cell have the focus
            {
                JLabel label = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                
                label.setText(UtilConvert.unicodesToChars(value.toString()));
                
                label.setIcon(getKeyIcon());
                
                return label;
            }
        });
        keyList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                keyListValueChanged(evt);
            }
        }
        );
        jScrollPane1.setViewportView(keyList);
        
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 1;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.gridheight = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(11, 5, 11, 0);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints1);
        
        
        addKeyButton.setText(NbBundle.getBundle(LocaleNodeCustomizer.class).getString("CTL_AddKey"));
        addKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addKeyButtonActionPerformed(evt);
            }
        }
        );
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 2;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(11, 11, 0, 11);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHEAST;
        add(addKeyButton, gridBagConstraints1);
        
        
        removeKeyButton.setText(NbBundle.getBundle(LocaleNodeCustomizer.class).getString("CTL_RemoveKey"));
        removeKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeKeyButtonActionPerformed(evt);
            }
        }
        );
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 2;
        gridBagConstraints1.gridy = 2;
        gridBagConstraints1.gridwidth = 2;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(5, 11, 11, 11);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints1.weighty = 1.0;
        add(removeKeyButton, gridBagConstraints1);
        
        
        changeNameButton.setText("...");
        changeNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeNameButtonActionPerformed(evt);
            }
        }
        );
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 3;
        gridBagConstraints1.gridy = 0;
        gridBagConstraints1.insets = new java.awt.Insets(12, 0, 0, 11);
        gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
        add(changeNameButton, gridBagConstraints1);
        
        
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 2;
        gridBagConstraints1.gridy = 3;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.weightx = 1.0;
        add(dummyLabel, gridBagConstraints1);
        
    }//GEN-END:initComponents

    private void changeNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNameButtonActionPerformed
        final Dialog[] dialog = new Dialog[1];
        final LocalePanel panel = new LocalePanel(getLocale(entry));

        DialogDescriptor dd = new DialogDescriptor(
            panel,
            NbBundle.getBundle(PropertiesDataNode.class).getString("CTL_NewLocaleTitle"),
            true,
            DialogDescriptor.OK_CANCEL_OPTION,
            DialogDescriptor.OK_OPTION,
            new ActionListener() {
                public void actionPerformed(ActionEvent evt2) {
                    // OK pressed
                    if (evt2.getSource() == DialogDescriptor.OK_OPTION) {
                        dialog[0].setVisible(false);
                        dialog[0].dispose();

                        updateName(panel.getLocale());
                    // Cancel pressed
                    } else if (evt2.getSource() == DialogDescriptor.CANCEL_OPTION) {
                        dialog[0].setVisible(false);
                        dialog[0].dispose();
                    }
                }
            }
        );
        dialog[0] = TopManager.getDefault().createDialog(dd);
        dialog[0].show();
    }//GEN-LAST:event_changeNameButtonActionPerformed

    private void keyListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_keyListValueChanged
        if(keyList.isSelectionEmpty())
            removeKeyButton.setEnabled(false);
        else
            removeKeyButton.setEnabled(true);
    }//GEN-LAST:event_keyListValueChanged

    private void removeKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeKeyButtonActionPerformed
        Object[] selectedValues = keyList.getSelectedValues();

        PropertiesStructure ps = entry.getHandler().getStructure();
        
        for(int i=0; i<selectedValues.length; i++) {
            ps.deleteItem((String)selectedValues[i]);
        }
        

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                // Update keys.
                keyList.setListData(retrieveKeys(entry));
            }
        });
    }//GEN-LAST:event_removeKeyButtonActionPerformed

    private void addKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addKeyButtonActionPerformed
        try {
            entry.getNodeDelegate().getNewTypes()[0].create();
            
            // Update keys.
            keyList.setListData(retrieveKeys(entry));
        } catch(IOException ioe) {
            if(Boolean.getBoolean("netbeans.debug.exceptions")) // NOI18N
                ioe.printStackTrace();
        }
    }//GEN-LAST:event_addKeyButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList keyList;
    private javax.swing.JButton addKeyButton;
    private javax.swing.JButton removeKeyButton;
    private javax.swing.JButton changeNameButton;
    private javax.swing.JLabel dummyLabel;
    // End of variables declaration//GEN-END:variables

}
