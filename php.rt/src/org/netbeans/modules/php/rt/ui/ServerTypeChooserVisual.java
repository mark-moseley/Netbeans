/*
 * ServerTypeChooserVisual.java
 *
 * Created on 16 Май 2007 г., 13:15
 */

package org.netbeans.modules.php.rt.ui;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;

import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.php.rt.providers.impl.WizardConstants;
import org.netbeans.modules.php.rt.spi.providers.WebServerProvider;
import org.netbeans.modules.php.rt.utils.ServersUtils;
import org.openide.util.NbBundle;

/**
 *
 * @author  den
 */
class ServerTypeChooserVisual extends JPanel {

    private static final long serialVersionUID = -708817051948062887L;
    private static final String MSG_EMPTY_NAME = "MSG_EmptyName"; // NOI18N
    private static final String MSG_DUPLICATE_HOST = "MSG_DuplicateHost"; // NOI18N
    
    /** Creates new form ServerTypeChooserVisual */
    public ServerTypeChooserVisual(ServerTypeChooserPanel panel) {
        myPanel = panel;
        initComponents();
        init();
    }
    
    void read( AddHostWizard wizard ) {
        WebServerProvider provider = wizard.getCurrentProvider();
        if ( provider != null  ) {
            myTypes.setSelectedItem( provider.getTypeName() );
            
            setDescription(provider);
        }
        setUseHelperSelection(wizard);
        setConnectionName(wizard);
    }

    void store( AddHostWizard wizard ) {
        WebServerProvider provider = getSelectedProvider();
        wizard.putProperty( AddHostWizard.PROVIDER, provider );
       
        wizard.putProperty( AddHostWizard.NAME, myRecordName.getText() );
        wizard.putProperty( AddHostWizard.USE_AUTOSEARCH, 
                myUseHelper.isSelected() );
    }
    
    boolean isContentValid() {
        setErrorMessage("");
        return validateName();
    }
    
    private WebServerProvider getSelectedProvider(){
        int index = myTypes.getSelectedIndex();
        WebServerProvider provider = WebServerProvider.ServerFactory.
            getProviders()[index];
        return provider;
    }
    
    private boolean validateName(){
        String name = myRecordName.getText();
        if (name == null || name.trim().length() == 0){
            setErrorMessage(getMessage(MSG_EMPTY_NAME));
            return false;
        }
        
        AddHostWizard.Mode mode = getWizard().getWizardMode();
        if (mode.equals(AddHostWizard.Mode.CREATE_NEW)) {
            if (ServersUtils.hostAlreadyExists(name)) {
                setErrorMessage(getMessage(MSG_DUPLICATE_HOST, name));
                return false;
            }
        }
        return true;
    }
    
    private String getMessage(String key, Object... args) {
        return NbBundle.getMessage(getClass(), key, args);
    }

    private void setConnectionName(AddHostWizard wizard){
        String name = (String)wizard.getProperty(AddHostWizard.NAME);
        if (name != null){
            myRecordName.setText(name);
        }

        AddHostWizard.Mode mode = wizard.getWizardMode();
        if (mode.equals(AddHostWizard.Mode.UPDATE_EXISTING)){
            myRecordName.setEditable(false);
        }
        
    }
    
    private void setUseHelperSelection(AddHostWizard wizard){
        if (myUseHelper.isEnabled()){
            Boolean use = (Boolean)wizard.getProperty(AddHostWizard.USE_AUTOSEARCH);
            if (use != null){
                myUseHelper.setSelected(use);
            }
        }
    }

    private void setUseHelperEnable( WebServerProvider provider ){
        boolean hasHelper = provider.getConfigProvider().hasHelperPanels();
        myUseHelper.setEnabled(hasHelper);
    }

    private void init() {
        /*
         * Init combobox and description for chosen element. 
         */
        WebServerProvider[] providers = 
            WebServerProvider.ServerFactory.getProviders();
        String[] names = new String[ providers.length ];
        int i=0;
        for (WebServerProvider provider : providers) {
            names[i++] = provider.getTypeName();
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel( names );
        myTypes.setModel( model );
        
        
        setDescription(providers[ myTypes.getSelectedIndex()]);
        setUseHelperEnable(providers[ myTypes.getSelectedIndex()]);
        
        // tmp do not support. design is not clear
        myUseHelper.setVisible(false);
        myUseHelper.setSelected(true);

        initListeners();
        
    }

    void updateWizardSteps(){
        WebServerProvider provider = getSelectedProvider();
        getPanel().updateWizard(provider);
    }
    
    private void initListeners() {
        DocumentListener listener = new TextFieldListener();

        myRecordName.getDocument().addDocumentListener(listener);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myTypeLabel = new javax.swing.JLabel();
        myTypes = new javax.swing.JComboBox();
        myDescriptionLabel = new javax.swing.JLabel();
        myDescription = new javax.swing.JLabel();
        myRecordNameLbl = new javax.swing.JLabel();
        myRecordName = new javax.swing.JTextField();
        myUseHelper = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(myTypeLabel, org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "LBL_ServerType")); // NOI18N

        myTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(myDescriptionLabel, org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "LBL_Description")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(myDescription, "");
        myDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        org.openide.awt.Mnemonics.setLocalizedText(myRecordNameLbl, org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "LBL_ConnectionName")); // NOI18N

        myRecordName.setText("");

        org.openide.awt.Mnemonics.setLocalizedText(myUseHelper, org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "LBL_UseAutoserch")); // NOI18N
        myUseHelper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myUseHelperActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(myRecordNameLbl))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(myTypeLabel))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(myUseHelper)
                            .add(myDescriptionLabel))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, myDescription, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, myTypes, 0, 283, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, myRecordName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myRecordNameLbl)
                    .add(myRecordName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myTypeLabel)
                    .add(myTypes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myDescription, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .add(myDescriptionLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(myUseHelper)
                .add(21, 21, 21))
        );

        myTypeLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "A11_ServerTypeLbl")); // NOI18N
        myTypes.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "A11_ServerTypeChooser")); // NOI18N
        myDescriptionLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "A11_DescriptionLbl")); // NOI18N
        myDescription.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ServerTypeChooserVisual.class, "A11_Description")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void typeChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeChanged
        WebServerProvider provider = getSelectedProvider();
        
        setDescription(provider);
        setUseHelperEnable(provider);
        
        updateWizardSteps();
    }//GEN-LAST:event_typeChanged

    private void myUseHelperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myUseHelperActionPerformed
        // do nothing here
}//GEN-LAST:event_myUseHelperActionPerformed
    
    private void setDescription( WebServerProvider provider ) {
        String descr = provider.getDescription();
        myDescription.setText( descr );
    }

    protected void setErrorMessage(String message) {
        if (getWizard() == null) {
            return;
        }
        getWizard().putProperty(WizardConstants.WIZARD_PANEL_ERROR_MESSAGE, message);
    }

    private ServerTypeChooserPanel getPanel(){
        return myPanel;
    }
   
    private AddHostWizard.Mode getWizardMode(){
        return getWizard().getWizardMode();
    }
    
    private AddHostWizard getWizard(){
        if (getPanel() != null){
            return getPanel().getWizard();
        }
        return null;
    }

    public void stateChanged() {
        getPanel().stateChanged();
    }

    class TextFieldListener implements DocumentListener {

        public void changedUpdate(DocumentEvent e) {
            actionPerformed();
        }

        public void insertUpdate(DocumentEvent e) {
            actionPerformed();
        }

        public void removeUpdate(DocumentEvent e) {
            actionPerformed();
        }
        
        private void actionPerformed() {
            stateChanged();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel myDescription;
    private javax.swing.JLabel myDescriptionLabel;
    private javax.swing.JTextField myRecordName;
    private javax.swing.JLabel myRecordNameLbl;
    private javax.swing.JLabel myTypeLabel;
    private javax.swing.JComboBox myTypes;
    private javax.swing.JCheckBox myUseHelper;
    // End of variables declaration//GEN-END:variables
    
    private ServerTypeChooserPanel myPanel;
}
