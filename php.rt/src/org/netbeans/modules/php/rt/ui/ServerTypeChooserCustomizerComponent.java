/*
 * ServerTypeChooserVisual.java
 *
 * Created on 16 Май 2007 г., 13:15
 */

package org.netbeans.modules.php.rt.ui;

import java.util.Properties;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;

import org.netbeans.modules.php.rt.providers.impl.DefaultServerCustomizer;
import org.netbeans.modules.php.rt.providers.impl.HostImpl;
import org.netbeans.modules.php.rt.providers.impl.ServerCustomizerComponent;
import org.netbeans.modules.php.rt.spi.providers.WebServerProvider;
import org.openide.util.NbBundle;

/**
 *
 * @author  den
 */
public class ServerTypeChooserCustomizerComponent extends JPanel 
        implements ServerCustomizerComponent 
{

    private static final long serialVersionUID = -708817051948062887L;
    private static final String MSG_TYPE_CHANGED_WARNING 
            = "MSG_TypeChanged_Warning"; // NOI18N
    
    /** Creates new form ServerTypeChooserVisual */
    public ServerTypeChooserCustomizerComponent(HostImpl host, DefaultServerCustomizer parentDialog) {
        myHost = host;
        myParentDialog = parentDialog;
        initComponents();
        init();
    }

    public JPanel getPanel() {
        return this;
    }

    public boolean doContentValidation() {
        // nothing to validate
        return true;
    }

    public void doFinalContentValidation() {
        // do nothing here
    }

    public void readValues(Properties properties) {
        Object obj = properties.get(HOST);
        if (obj != null && obj instanceof HostImpl) {
            HostImpl impl = (HostImpl) obj;
            WebServerProvider provider = impl.getProvider();
            if (provider != null) {
                myTypes.setSelectedItem(provider.getTypeName());

                setDescription(provider);
            }
            myRecordName.setText(impl.getId());
        }
    }

    public void storeValues(Properties properties) {
        int index = myTypes.getSelectedIndex();
        WebServerProvider provider = WebServerProvider.ServerFactory.
            getProviders()[index];
        
        properties.put(PROVIDER, provider);
    }
    
    public void stateChanged() {
        getParentDialog().stateChanged();
    }

    protected void setErrorMessage(String message) {
        getParentDialog().setErrorMessage(message);
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myTypeLabel = new javax.swing.JLabel();
        myTypes = new javax.swing.JComboBox();
        myDescriptionLabel = new javax.swing.JLabel();
        myDescription = new javax.swing.JLabel();
        myRecordNameLbl = new javax.swing.JLabel();
        myRecordName = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(myTypeLabel, org.openide.util.NbBundle.getMessage(ServerTypeChooserCustomizerComponent.class, "LBL_ServerType")); // NOI18N

        myTypes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(myDescriptionLabel, org.openide.util.NbBundle.getMessage(ServerTypeChooserCustomizerComponent.class, "LBL_Description")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(myDescription, "");
        myDescription.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        org.openide.awt.Mnemonics.setLocalizedText(myRecordNameLbl, org.openide.util.NbBundle.getMessage(ServerTypeChooserCustomizerComponent.class, "LBL_ConnectionName")); // NOI18N

        myRecordName.setEditable(false);
        myRecordName.setText("");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(myRecordNameLbl))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(myTypeLabel))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(myDescriptionLabel)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, myTypes, 0, 317, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, myRecordName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .add(myDescription, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myRecordNameLbl)
                    .add(myRecordName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myTypeLabel)
                    .add(myTypes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myDescription, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                    .add(myDescriptionLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        myTypeLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ServerTypeChooserCustomizerComponent.class, "A11_ServerTypeLbl")); // NOI18N
        myTypes.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ServerTypeChooserCustomizerComponent.class, "A11_ServerTypeChooser")); // NOI18N
        myDescriptionLabel.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ServerTypeChooserCustomizerComponent.class, "A11_DescriptionLbl")); // NOI18N
        myDescription.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ServerTypeChooserCustomizerComponent.class, "A11_Description")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void typeChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeChanged
        int index = myTypes.getSelectedIndex();
        WebServerProvider provider = WebServerProvider.ServerFactory.
            getProviders()[index];
        
        setDescription(provider);
    }//GEN-LAST:event_typeChanged
    
    private void setDescription( WebServerProvider provider ) {
        String descr = provider.getDescription();
        myDescription.setText( descr );
        
        if (!provider.equals(myHost.getProvider())){
            String oldName = myHost.getProvider().getTypeName();
            String warnMsg = getMessage(MSG_TYPE_CHANGED_WARNING,  oldName);
            setMessage(warnMsg);
        } else {
            setMessage("");
        }
    }

    private void setMessage(String msg) {
        getParentDialog().setMessage(msg);

    }

    private DefaultServerCustomizer getParentDialog() {
        return myParentDialog;
    }

    private String getMessage(String key, Object... args) {
        return NbBundle.getMessage(getClass(), key, args);
    }

    private void init() {
        /*
         * Init combobox and description for chosen element. 
         */
        WebServerProvider[] providers = 
            WebServerProvider.ServerFactory.getProviders();
        String[] names = new String[ providers.length ];
        int i=0;
        for (WebServerProvider provider : providers) {
            names[i++] = provider.getTypeName();
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel( names );
        myTypes.setModel( model );
        
        
        setDescription(providers[ myTypes.getSelectedIndex()]);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel myDescription;
    private javax.swing.JLabel myDescriptionLabel;
    private javax.swing.JTextField myRecordName;
    private javax.swing.JLabel myRecordNameLbl;
    private javax.swing.JLabel myTypeLabel;
    private javax.swing.JComboBox myTypes;
    // End of variables declaration//GEN-END:variables
    
    private DefaultServerCustomizer myParentDialog;
    
    HostImpl myHost;


}
