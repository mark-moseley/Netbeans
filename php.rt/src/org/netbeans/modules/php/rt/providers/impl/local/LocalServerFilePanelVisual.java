/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.php.rt.providers.impl.local;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.NbBundle;

/**
 *
 * @author  den
 */
public abstract class LocalServerFilePanelVisual extends JPanel 
         
{

    private static final long serialVersionUID = -8570337844141338913L;

    private static final String MSG_ILLEGAL_PATH = "MSG_IllegalPath"; // NOI18N
    private static final String MSG_ILLEGAL_FOLDER = "MSG_IllegalFolder"; // NOI18N
    private static final String MSG_FOLDER_NOT_WRITABLE = "MSG_FolderIsNotWritable"; // NOI18N
    private static final String SELECT_ROOT_LOCATION = "LBL_DocumentRootLocation"; // NOI18N
    private static final String BROWSE = "BROWSE"; // NOI18N

    /** Creates new form LocalServerFilePanelVisual */
    public LocalServerFilePanelVisual() {
        initComponents();

    }

    protected abstract void setErrorMessage(String message);
    protected abstract void setDefaults();
    protected abstract void stateChanged();

    public boolean doContentValidation() {
        return validatePath();
    }

    public void doFinalContentValidation() {
        // do nothing here
    }

    protected JTextField getDocumentRoot() {
        return myRootLocation;
    }
    
    /**
     * adds listeners to editable text fields.
     * Should be invoked from inheritor's constructor 
     * (LocalServerCustomizerComponent, LocalConfigPanelComponent).
     * It is not invoked from LocalServerFilePanelVisual constructor
     * to make it possible for inheritor to set default values.
     */
    protected void initListeners() {
        setDefaults();

        DocumentListener listener = new TextFieldListener();
        
        getDocumentRoot().getDocument().addDocumentListener(listener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        myDocumentRootLbl = new javax.swing.JLabel();
        myRootLocation = new javax.swing.JTextField();
        myBrowse = new javax.swing.JButton();

        myDocumentRootLbl.setLabelFor(myRootLocation);
        org.openide.awt.Mnemonics.setLocalizedText(myDocumentRootLbl, org.openide.util.NbBundle.getMessage(LocalServerFilePanelVisual.class, "LBL_DocumentRoot")); // NOI18N

        myRootLocation.setText("");

        org.openide.awt.Mnemonics.setLocalizedText(myBrowse, org.openide.util.NbBundle.getMessage(LocalServerFilePanelVisual.class, "LBL_Browse")); // NOI18N
        myBrowse.setActionCommand(BROWSE);
        myBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doBrowse(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(myDocumentRootLbl)
                .add(18, 18, 18)
                .add(myRootLocation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(myBrowse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myDocumentRootLbl)
                    .add(myBrowse)
                    .add(myRootLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        myDocumentRootLbl.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LocalServerFilePanelVisual.class, "A11_DocumentRootLbl")); // NOI18N
        myRootLocation.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(LocalServerFilePanelVisual.class, "A11_DocumentRoot")); // NOI18N
        myBrowse.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(LocalServerFilePanelVisual.class, "A11_Browse")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private void doBrowse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doBrowse
        String command = evt.getActionCommand();

        if (BROWSE.equals(command)) {
            JFileChooser chooser = new JFileChooser();
            chooser.setDialogTitle(getMessage(SELECT_ROOT_LOCATION));
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            String path = getDocumentRoot().getText();
            if (path.length() > 0) {
                File f = new File(path);
                if (f.exists()) {
                    chooser.setSelectedFile(f);
                }
            }
            if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
                File projectDir = chooser.getSelectedFile();
                getDocumentRoot().setText(projectDir.getAbsolutePath());
            }
            stateChanged();
        }
    }//GEN-LAST:event_doBrowse

    private boolean validatePath() {
        String docRoot = getDocumentRoot().getText();
        boolean empty = docRoot.trim().length() == 0;
        if (empty){
            // TODO warn about incomplete form
            return true;
        }
        File file = new File(docRoot).getAbsoluteFile();
        file = getCanonicalFile(file);
        if (file == null) {
            setErrorMessage(getMessage(MSG_ILLEGAL_PATH));
            return false;
        }
        if (!file.isDirectory()) {
            setErrorMessage(getMessage(MSG_ILLEGAL_FOLDER));
            return false;
        }
        if (!file.canWrite()) {
            setErrorMessage(getMessage(MSG_FOLDER_NOT_WRITABLE));
            // It should be possible to set http root even if it is not writable.
            // And then set correct context in project
            //return false;
        }

        return true;
    }

    private String getMessage(String key, Object... args) {
        return NbBundle.getMessage(LocalServerFileWizardPanel.class, key, args);
    }

    private static File getCanonicalFile(File file) {
        try {
            return file.getCanonicalFile();
        } catch (IOException e) {
            return null;
        }
    }

    private class TextFieldListener implements DocumentListener {

        public void changedUpdate(DocumentEvent e) {
            actionPerformed();
        }

        public void insertUpdate(DocumentEvent e) {
            actionPerformed();
        }

        public void removeUpdate(DocumentEvent e) {
            actionPerformed();
        }

        private void actionPerformed() {
            stateChanged();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton myBrowse;
    private javax.swing.JLabel myDocumentRootLbl;
    private javax.swing.JTextField myRootLocation;
    // End of variables declaration//GEN-END:variables


}
