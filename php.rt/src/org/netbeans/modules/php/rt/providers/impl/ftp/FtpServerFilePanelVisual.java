/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */
package org.netbeans.modules.php.rt.providers.impl.ftp;

import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.php.rt.providers.impl.URIValidationUtils;
import org.openide.util.NbBundle;

/**
 *
 * @author  ads
 */
public abstract  class FtpServerFilePanelVisual extends JPanel 
{

    private static final long serialVersionUID = -4482997001849592268L;

    private static final String MSG_INCORRECT_FTP_SERVER = "MSG_IncorrectFtpServerName"; // NOI18N
    private static final String MSG_INCORRECT_FTP_PATH = "MSG_IncorrectSymbolsInFtpPath"; // NOI18N

    /** Creates new form FtpServerFilePanelVisual */
    public FtpServerFilePanelVisual() {
        initComponents();
        
        init();
    }

    private void init() {
        setDefaults();

        DocumentListener listener = new TextFieldListener();

        getFtpServer().getDocument().addDocumentListener(listener);
        getFtpDirectory().getDocument().addDocumentListener(listener);
    }


    protected abstract void setErrorMessage(String message);
    protected abstract void setDefaults();
    protected abstract void stateChanged();

    public boolean doContentValidation() {
        return validateFtpServer() && validateFtpDirectory();
    }

    public void doFinalContentValidation() {
        validateFtpServerFinaly();
    }

    protected JTextField getFtpServer() {
        return myFtpServer;
    }

    protected JPasswordField getFtpPassword() {
        return myFtpPassword;
    }

    protected JTextField getFtpUserName() {
        return myFtpUserName;
    }

    protected JTextField getFtpDirectory() {
        return myFtpDirectory;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        myFtpServerLbl = new javax.swing.JLabel();
        myFtpUserNameLbl = new javax.swing.JLabel();
        myFtpPasswordLbl = new javax.swing.JLabel();
        myFtpServer = new javax.swing.JTextField();
        myFtpUserName = new javax.swing.JTextField();
        myFtpPassword = new javax.swing.JPasswordField();
        myFtpDirectory = new javax.swing.JTextField();
        myFtpDirectoryLbl = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        myFtpServerLbl.setLabelFor(myFtpServer);
        org.openide.awt.Mnemonics.setLocalizedText(myFtpServerLbl, org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "LBL_FtpServer")); // NOI18N

        myFtpUserNameLbl.setLabelFor(myFtpUserName);
        org.openide.awt.Mnemonics.setLocalizedText(myFtpUserNameLbl, org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "LBL_UserName")); // NOI18N

        myFtpPasswordLbl.setLabelFor(myFtpPassword);
        org.openide.awt.Mnemonics.setLocalizedText(myFtpPasswordLbl, org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "LBL_Password")); // NOI18N

        myFtpServer.setText(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "FtpServerFilePanelVisual.myFtpServer.text")); // NOI18N

        myFtpUserName.setText(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "FtpServerFilePanelVisual.myFtpUserName.text")); // NOI18N

        myFtpPassword.setText(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "FtpServerFilePanelVisual.myFtpPassword.text")); // NOI18N

        myFtpDirectory.setText(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "FtpServerFilePanelVisual.myFtpDirectory.text")); // NOI18N

        myFtpDirectoryLbl.setLabelFor(myFtpDirectory);
        org.openide.awt.Mnemonics.setLocalizedText(myFtpDirectoryLbl, org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "LBL_FtpDirectory")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(myFtpServerLbl)
                    .add(myFtpUserNameLbl)
                    .add(myFtpPasswordLbl)
                    .add(myFtpDirectoryLbl))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(myFtpDirectory, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
                    .add(myFtpServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, myFtpPassword)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, myFtpUserName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myFtpServerLbl)
                    .add(myFtpServer, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myFtpUserNameLbl)
                    .add(myFtpUserName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myFtpPasswordLbl)
                    .add(myFtpPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(myFtpDirectory)
                    .add(myFtpDirectoryLbl))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        myFtpServerLbl.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_FtpServerLbl")); // NOI18N
        myFtpUserNameLbl.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_UserNameLbl")); // NOI18N
        myFtpPasswordLbl.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_PasswordLbl")); // NOI18N
        myFtpServer.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_FtpServer")); // NOI18N
        myFtpUserName.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_UserName")); // NOI18N
        myFtpPassword.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_Password")); // NOI18N
        myFtpDirectory.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_FtpDirectory")); // NOI18N
        myFtpDirectoryLbl.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(FtpServerFilePanelVisual.class, "A11_FtpDirectoryLbl")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

    private boolean validateFtpDirectory() {
        String ftpDir = getFtpDirectory().getText();
        
        if (!URIValidationUtils.isPathValid(ftpDir)) {
            setErrorMessage(getMessage(MSG_INCORRECT_FTP_PATH));
            return false;
        }
        return true;
    }

    private boolean validateFtpServer() {
        String ftpServer = getFtpServer().getText();
        if (ftpServer == null || ftpServer.trim().length() == 0) {
            // TODO warn about incomplete form
            return true;
        }

        if (!URIValidationUtils.isHostNameValid(ftpServer)) {
            setErrorMessage(getMessage(MSG_INCORRECT_FTP_SERVER));
            return false;
        }
        
        return true;
    }

    private void validateFtpServerFinaly() {
        /*
         * check is performed for notification only.
         * User could don't have direct connect to Internet and
         * in this case Proxy can be used ( for name resolution also ).
         */
        String ftpServer = getFtpServer().getText();
        if (ftpServer == null || ftpServer.trim().length() == 0) {
            // allow empty
            return;
        }
        URIValidationUtils.validateInetAddress(ftpServer);
    }

    String getMessage(String key, Object... args) {
        return NbBundle.getMessage(FtpServerFilePanelVisual.class, key, args);
    }

    static boolean isValidNumber(String str) {
        boolean flag;
        try {
            Integer.parseInt(str);
            flag = true;
        } catch (NumberFormatException e) {
            flag = false;
        }
        return flag;
    }

    class TextFieldListener implements DocumentListener {

        public void changedUpdate(DocumentEvent e) {
            actionPerformed();
        }

        public void insertUpdate(DocumentEvent e) {
            actionPerformed();
        }

        public void removeUpdate(DocumentEvent e) {
            actionPerformed();
        }
        
        private void actionPerformed() {
            stateChanged();
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField myFtpDirectory;
    private javax.swing.JLabel myFtpDirectoryLbl;
    private javax.swing.JPasswordField myFtpPassword;
    private javax.swing.JLabel myFtpPasswordLbl;
    private javax.swing.JTextField myFtpServer;
    private javax.swing.JLabel myFtpServerLbl;
    private javax.swing.JTextField myFtpUserName;
    private javax.swing.JLabel myFtpUserNameLbl;
    // End of variables declaration//GEN-END:variables

}
