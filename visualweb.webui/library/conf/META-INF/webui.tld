<?xml version="1.0"?>
<!DOCTYPE taglib PUBLIC
  "-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN"
  "http://java.sun.com/dtd//web-jsptaglibrary_1_2.dtd">

<taglib>


  <tlib-version>1.0</tlib-version>
  <jsp-version>1.2</jsp-version>
  <short-name>ui</short-name>
  <uri>http://www.sun.com/web/ui</uri>

  <tag>

    <name>addRemove</name>
    <tag-class>com.sun.rave.web.ui.taglib.AddRemoveTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      


    <h4>About this tag</h4>

    <p>This tag renders two listboxes (one for available options, one
    for selected options) together with buttons to move the options
    between the lists, and optionally to order the selected options. 
    Use the <code>items</code> attribute to associate the component
    with an array, collection or map of
    <code>com.sun.rave.web.ui.model.Option</code> and the
    <code>selected</code> attribute to associate the component with a
    model object that represents the selected items. The model object
    must be an array of objects, whose values must be represented by
    the values on the <code>com.sun.rave.web.ui.model.Option</code>s. </p> 

    <h4>Component layout and Facet structure</h4>
    <p>The component can be laid out using either horizonal layout
    (the default) or vertical layout (if the <code>vertical</code> 
    attribute is set to true). 

In the diagrams below, facet child
    components are shown as <span style="color:lightblue">light
blue</span>. Non-facet areas are <span
style="color:violet">violet</span>.</p>  

    <h5>Horizontal layout</h5> 

<p> In horizontal layout, the component
    label (or header) may be shown either above the component
    (if the <code>labelOnTop</code>attribute is true) or next to the
    component as shown in the diagram. 
</p> 

<style type="text/css">
table.AddRmvBtnTbl .Btn1 {width:100%}
table.AddRmvBtnTbl .Btn1Hov {width:100%}
table.AddRmvBtnTbl .Btn1Dis {width:100%}
table.AddRmvBtnTbl .Btn2 {width:100%}
table.AddRmvBtnTbl .Btn2Hov {width:100%}
table.AddRmvBtnTbl .Btn2Dis {width:100%}
.AddRmvHrzWin, .AddRmvHrzBwn {margin-top:3px}
.AddRmvHrzDiv {float:left; display:inline-table; margin:3px}  
.AddRmvHrzLst {display:inline-table; margin:3px}  
select {margin:3px}  
.spacer {margin:3px}  
</style> 

<div id="addremove1:list_enclosing">
<span class="AddRmvHrzDiv">
<span style="background:lightblue">header</span>
</span>

<span class="AddRmvHrzDiv">&nbsp;</span>

<div class="AddRmvHrzDiv">
<span style="background:lightblue">availableLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of available items</option> 
</select>
</div>
<div class="AddRmvHrzDiv">
<span>&nbsp;</span>
<br />

<div style="padding-left:10;padding-right:10">
<table class="AddRmvBtnTbl">
<tr>
<td align="center" width="125px">

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<div class="AddRmvHrzWin">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addAllButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;removeAllButton&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;moveUpButton&nbsp;&nbsp;&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;moveDownButton&nbsp;&nbsp;</span>
</div>

</td>
</tr>
</table>
</div>
</div>

<div class="AddRmvHrzLst">
<span style="background:lightblue">selectedLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of selected items</option> 
</select>
</div>
</div> 
<span>&nbsp;</span> 
<div> 
    <span style="background:lightblue">
      footer
    </span> 

</div> 


<h5>Vertical layout</h5>


<div id="addremove1:list_enclosing">

<div class="spacer">
<span style="background:lightblue">header</span>
</div>

<div class="spacer">
<span style="background:lightblue">availableLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of available items</option> 
</select>
</div>

<div class="spacer"> 
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp; 

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addAllButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp; 

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp; 

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;removeAllButton&nbsp;&nbsp;</span>


<div class="spacer">
<span style="background:lightblue">selectedLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of selected items</option> 
</select>
</div>


<div class="spacer"> 
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;moveUpButton&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp;</span> 

<span style="background:lightblue">&nbsp;&nbsp;moveDownButton&nbsp;&nbsp;</span>
</div>
</div> 
<div> 
    <span style="background:lightblue">
      footer
    </span> 

</div> 




    <h4>Facets</h4>

    <ul>

<li> 
<code>addButton:</code>
Use this facet to replace the standard "Add" button. If
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_addButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
add()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>removeButton:</code>
Use this facet to replace the standard "Remove"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_removeButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
remove()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>addAllButton:</code>
Use this facet to replace the standard "Add All"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_addAllButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
addAll()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>removeAllButton:</code>
Use this facet to replace the standard "Remove All"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_removeAllButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
removeAll()</code> function. See the section on JavaScript for details.
</li> 


<li> 
<code>moveUpButton:</code>
Use this facet to replace the standard "Move Up"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_moveUpButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
moveUp()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>moveDownButton:</code>
Use this facet to replace the standard "Move Down"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_moveDownButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
moveDown()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>header:</code>
Use this facet to create a header for the
component. The facet will replace the component label. 
</li> 

<li> 
<code>footer:</code>
Use this facet to create a footer for the
component.

</li> 
    </ul>

    <h4>Client-side JavaScript functions</h4>

<p>When the component is rendered, a JavaScript object corresponding
to the component is created. The name of the variable is AddRemove_
followed by the component's DOM id where the colons have been replaced
by underscores. For example, if the id of the component is
<code>listform:addremove</code> then the JavaScript variable name will
be <code>AddRemove_listform_addremove</code>. To manipulate the
component on the client side, you may invoke functions on the
JavaScript object. With reference to the id above, to add all elements
on the available list that the user has selected, invoke 
<code> AddRemove_listform_addremove.add()</code>. 
</p> 

    <ul>
    <li><code>add()</code>: the highlighted items on the available list
    are moved to the selected list. </li> 
    <li><code>addAll()</code>: all non-disabled  items on the available list
    are moved to the selected list. </li> 
    <li><code>remove()</code>: the highlighted items on the selected list
    are moved to the available list. </li> 
    <li><code>removeAll()</code>: all non-disabled  items on the selected list
    are moved to the available list. </li> 
    <li><code>moveUp()</code>: the highlighted items on the selected list
    are moved up one position. </li> 
    <li><code>moveDown()</code>: the highlighted items on the selected list
    are moved down one position. </li> 
    <li><code>updateButtons()</code>: this function ensures that the
    buttons are enabled/disabled based on the current selections in
    the lists. Invoke this function if you programmatically modify the
    selections on the available or selected list using client-side
    scripts. You do not need to invoke it when using any of the
    functions listed above, as they already invoke this function at
    the end. </li>   
    </ul>

    <h4>Configuring the AddRemove tag</h4>

    <h4>Examples</h4>
<p>The component gets the options from a managed bean called
AirportBean. The selections are stored in another managed bean
(AirportSelectionBean). The <code>selectAll</code> attribute indicates that the
<code>Add All</code> and <code>Remove All</code> buttons should be
shown. A label for the component as a whole (<code>label</code>) is shown
next to the component (<code>labelOnTop</code> is false). Labels have
been specified for the list of available items and for the list of
selected items. The <code>sorted</code> attribute indicates that the options on
the list will be shown in alphabetical order.</p>
<pre>
        &lt;ui:addRemove id="list"
                      items="#{AirportBean.airports}"
                      selected="#{AirportSelectionBean.airportSel}"
                      label="Select airports"
                      availableItemsLabel="Available Airports"
                      selectedItemsLabel="Selected Airports"
                      selectAll="true"
		      sorted="true"
                      labelOnTop="false"/&gt;
</pre>

<p>As in the previous example, with the following exceptions: The
component is rendered using vertical layout (in this case, the main
component label is always rendered above the component). 
The <code>moveButtons</code> attribute indicates that the
<code>Move Up</code> and <code>Move Down</code> buttons should be
shown. </p> 
<pre> 
        &lt;ui:addRemove id="list"
                      items="#{AirportBean.airports}"
                      selected="#{AirportSelectionBean.airportSel}"
                      label="Select some names"
                      availableItemsLabel="Available Names"
                      selectedItemsLabel="Selected Names"
                      selectAll="true"
                      moveButtons="true"
                      vertical="true"/&gt;
</pre> 
    ]]></description>

    <attribute>
      <name>availableItemsLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The label for the available list
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>duplicateSelections</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Set this attribute to true if the component should allow items
      from the available list to be added more than one to the
      selected list, that is, if the selected list should allow duplicate entries. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Specifies the options that the web application user can choose
         from. The value must be one of an array, Map or Collection
         whose members are all subclasses of<code>com.sun.rave.web.ui.model.Option</code>.  
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If set, a label is rendered adjacent to the component with the
      value of this attribute as the label text.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelOnTop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is true, the label is rendered above the
      component. If it is false, the label is rendered next to the
      component. The default is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>moveButtons</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Show the Move Up and Move Down buttons
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The number of items to display. The default value is 12. 
      ]]></description>
    </attribute>

    <attribute>
      <name>selectAll</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Show the Add All and Remove All buttons
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>Use this attribute to bind the
      component to a model object. The value of this attribute must be
      an EL expression. </p><p>If the listbox allows multiple selections (see the <code>multiple</code> attribute), then the EL expression must
      evaluate to one of the following types:</p><ul><li><code>java.lang.Object[]</code></li><li>An array of primitives</li><li><code>java.util.List</code>, or a subclass thereof</li></ul><p>Note that if you use a <code>java.util.List</code> to
         represent the value, you must specify a converter for the
	 type of the List members unless they are Strings. For any
	 other type, even if you use a default convert, you must
	 configure it explicitly. For arrays, the component can locate
	 the default converters. </p><p>If the listbox allows single selections, then the EL
      expression must be a subclass of to a java.lang.Object.</p><p>If using a custom model class and custom converter, note that
      the model class must ovverride the equals method, as that is 
      used to determine which objects should be marked as selected.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedItemsLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The label for the selected list
      ]]></description>
    </attribute>

    <attribute>
      <name>sorted</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If true, the items on the available options list are shown in alphabetical
        order. The item on the selected options list are also shown in alphabetical order,
        unless the moveButtons attribute is true, in which case the user is expected to
        order the elements.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>vertical</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use vertical layout instead of the default horizontal one
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Use the visible attribute to indicate whether the component should be 
    viewable by the user in the rendered HTML page.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>alarm</name>
    <tag-class>com.sun.rave.web.ui.taglib.AlarmTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      


<code></code>Use
the <code>ui:alarm</code>
tag to display a theme-specific image in the rendered HTML page.
The <code>severity</code>attribute is used to specify the alarm severity which in turn is used to determine the theme-specific alarm icon to render. 
The <code>url</code> attribute and (and other attributes related to an image) may be used to override the them-sepcific alarm icon.<br>
<h3>HTML Elements and Layout</h3>
The rendered HTML page displays an XHTML compliant <code>&lt;img&gt;</code>
element with any applicable attributes.
<h3>Theme Identifiers</h3>
Alarm icons.
<h3>Client Side Javascript Functions</h3>
None.
<br>
<h3>Examples</h3>
<h4>Example 1: Create an alarm with critical severity.</h4>
<code>&lt;ui:alarm id="alarm1" severity="critical" /&gt;
<br>
<br>
<h4>Example 2: Create a alarm with major severity, but override the alarm image.</h4>
<code>&lt;ui:alarm id="alarm2" severity="major" 
url="../images/major.gif" height="10" width="10" 
alt="Processor Alarm: Major" /&gt;
</code><br>
    ]]></description>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the position of the image with respect to its context.
	Valid values are: bottom (the default); middle; top; left; right.
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Alternative text description used by screen reader tools
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the width of the img border in pixels.
	The default value for this attribute depends on the web browser
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When specified, the width and height attributes tell web browsers 
	to override the natural image or object size in favor of these values
      ]]></description>
    </attribute>

    <attribute>
      <name>hspace</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the amount of white space in pixels to be inserted to the
	left and right of the image. The default value is not specified but is       
	generally a small, non-zero size.
      ]]></description>
    </attribute>

    <attribute>
      <name>icon</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The identifier of the desired theme image.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>longDesc</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A verbose description of this image
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>severity</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the severity of the alarm.
	Valid values are: critical, major, minor, down, ok.
	Note, a severity of ok renders no alarm icon. This is the default value.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute or relative URL to the image to be rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

    <attribute>
      <name>vspace</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the amount of white space in pixels to be inserted above and
	below the image. The default value is not specified but is generally a
	small, non-zero size.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Image width override. When specified, the width and height attributes 
	tell web browsers to override the natural image or object size in favor 
	of these values, specified in pixels. Some browsers might not support 
	this behavior.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>alert</name>
    <tag-class>com.sun.rave.web.ui.taglib.AlertTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the <code>ui:alert</code>
tag to display an inline alert
message at the top of the rendered HTML page. Inline alert messages
permit users to correct problems or proceed with their work without
having to dismiss a window and navigate to a new location.&nbsp;
There 2 facets associated with an alert tag: <br>
&nbsp;&nbsp;&nbsp; alertImage - allows the developer to put
in their own image and/or text<br>
&nbsp;&nbsp;&nbsp; alertLink - allows the developer to put
in their own formatted link or extra text.<br>
<h3>HTML Elements and Layout</h3>
An alert message consists of an icon depicting the type of alert -
information, success, warning, or error - along with a <code>summary</code>
message and an optional <code>detail</code>
message.
<h3>Client Side Javascript
Functions</h3>
none.
<h3>Examples</h3>
<b>Example 1: An example showing
an informational alert:</b> <br>
<code>&lt;ui:alert id="msg1"
type="information" summary="Patch Installed Successfully" detail="Patch
9997-01 was successfully installed on host alpha, beta and zed."
/&gt;<br>
</code>
<br>
<b>Example 2: An example showing
an error alert with an alert link:</b><br>
<code>&lt;ui:alert id="msg2"
type="error" summary="Patch Installation Failed!"
detail="Patch 9997-01 was not installed on host alpha, beta and zed."
linkText="View Log" linkURL="/log/patch-log.txt" linkTarget="_blank"
linkToolTip="Open Window Containing Error Log"/&gt;<br>
<br>
</code><b>Example
3: An example showing the use of an alertImage facet:</b><br>
<code>&lt;ui:alert id="msg2"
type="error" summary="Patch Installation Failed!"
detail="Patch 9997-01 was not installed on host alpha, beta and
zed."&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:facet name="alertImage"&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;ui:image
id="foo" </code><code>url="../images/foo.gif"
/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
&lt;/ui:alert&gt;<br>
</code>
    ]]></description>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Alternative text description used by screen reader tools
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>detail</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Optional detailed message text for the alert. This message might include more information about the alert and instructions for what to do about the alert. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>linkAction</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that receives action from the 
        embedded hyperlink component.      
      ]]></description>
    </attribute>

    <attribute>
      <name>linkTarget</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The window (target) in which to load the link that is specified with linkText.
      ]]></description>
    </attribute>

    <attribute>
      <name>linkText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text for an optional link that is appended to the detail message.
      ]]></description>
    </attribute>

    <attribute>
      <name>linkToolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the value of the title attribute for the HTML element. The specified text
        will display as a tooltip if the mouse cursor hovers over the link that is specified
        with linkText.
      ]]></description>
    </attribute>

    <attribute>
      <name>linkURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute, relative, or context relative (starting with "/") URL to the resource to navigate
        to when the link that is specified with linkText is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>summary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Summary message text for the alert. This brief message is prominently 
         displayed next to the icon.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The type or category of alert. This type can be set to either "information", "success", "warning" or "error".
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>anchor</name>
    <tag-class>com.sun.rave.web.ui.taglib.AnchorTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="text-decoration: line-through; "></span><span
>Use the <code>ui:anchor</code> tag
to create HTML anchors in the rendered HTML page. You can then use <code>ui:hyperlink</code>
tags that jump to the locations of the anchors in the page.</span><br
>
<h3 >HTML Elements and Layout</h3>
<span style="text-decoration: line-through; "></span><span
>The <code>ui:anchor</code> tag
creates an <code>&lt;a&gt;</code> element in the rendered HTML page.
The name and id attributes of the <code>&lt;a&gt;</code> element are
both set to the value of the id attribute specified with the <code>ui:anchor</code>
tag. The name attibute is included to maintain compatibility with older
browsers.</span><br >
<h3 >Client Side Javascript Functions</h3>
<span >None.&nbsp; </span><br
>
<h3 >Examples</h3>
<h4 >Example 1: Create an anchor</h4>
<code >&lt;ui:anchor id="anchor1" /&gt;
<br>
<br>
</code><span >This generates an anchor,
with id and name set to the same
value. </span><br >
<span >&nbsp;&nbsp; </span><br
>
<code >&lt;a id="anchor1" name="anchor1"
/&gt;
</code><br >
<span style="font-style: italic; "><span
style="text-decoration: line-through;"></span></span>
<h4 >Example 2: Create a hyperlink to
that will go to the anchor above<br>
</h4>
<code >&lt;ui:hyperlink id="gotoAnchor1"
url="#anchor1" /&gt;<br>
</code>
<h4 >Example 3: Create a <span
style="text-decoration: line-through;"></span>context&nbsp;<span
style="text-decoration: line-through;"></span> relative hyperlink to
go to
the anchor
in <span style="text-decoration: line-through;"></span>Example 1</h4>
<code >&lt;ui:hyperlink id="gotoAnchor1"
url="/faces/hyperlink.jsp#anchor1" /&gt;<br>
</code><span ><br>
Note:&nbsp; In the <code>url</code>
attribute, you must specify a path that maps to the correct servlet.
However, you do not need the context. In this example, the </span><code
>/faces</code> <span
> part of the path maps to the servlet
through the JSF FacesServlet as defined in the web.xml.</span>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>body</name>
    <tag-class>com.sun.rave.web.ui.taglib.BodyTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="color: rgb(0, 0, 0);">Use the </span><code
style="color: rgb(0, 0, 0);">ui:body</code><span
style="color: rgb(51, 51, 255);"><span style="color: rgb(0, 0, 0);">
tag to create an HTML </span><code style="color: rgb(0, 0, 0);">&lt;body&gt;</code><span
style="color: rgb(0, 0, 0);">
tag and attributes in the rendered HTML page</span>.&nbsp; </span>The
ui:body tag should be used in conjunction with the <a
href="./head.html">ui:head</a> and the <a href="./page.html">ui:page</a>
tag.<br>
<h3>HTML Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">The </span><code
style="color: rgb(0, 0, 0);">ui:body</code><span
style="color: rgb(0, 0, 0);"> tag encloses the body content of the
JSP page, just as a </span><code style="color: rgb(0, 0, 0);">&lt;body&gt;</code><span
style="color: rgb(0, 0, 0);"> tag encloses the content of an HTML
page. The </span><code style="color: rgb(0, 0, 0);">ui:body</code><span
style="color: rgb(0, 0, 0);"> tag should be placed after the <code>ui:head</code>
tag
within the <code>ui:page</code>
tag. Attributes that are
specified with the <code>ui:body</code> tag are used to specify the
corresponding attributes in the rendered <code>&lt;body&gt;</code>
element.</span>
<h3>Client Side Javascript Functions</h3>
None.
<br>
<br>
<b>Example 1: Create a body tag<br>
<br>
</b><code>&lt;ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:head title="body test" &gt;<br>
&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &lt;ui:meta httpHead="refresh"
content="5" /&gt;<br>
&nbsp; &nbsp; &lt;/ui:head&gt;&nbsp; <br>
&nbsp;&nbsp;&nbsp; &lt;ui:body id="bodytest"&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ....your body content
...<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:body id="bodytest"&gt;<br>
&lt;/ui:page&gt;</code>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>focus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Specify the ID of the component that should receive focus when
      the page is loaded. If the attribute is not set, or if the value
      is null, the component which submitted the page (if any)
      receives focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>imageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Resource path of an image used to appear in the background
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onLoad</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when when this page is loaded in a browser.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onUnload</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this page is unloaded from a browser as a user exits the page.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>breadcrumbs</name>
    <tag-class>com.sun.rave.web.ui.taglib.BreadcrumbsTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Render a breadcrumb or parentage path. <br>
<h3>HTML Elements and Layout</h3>
This tag will render a breadcrumb (or parentage path) on a page. A breadcrumb or parentage path is a set of hyperlinks, displayed on a page to show the user's location within an application, and the physical or logical path to a page. The breadcrumbs can be used to navigate to other locations within the application.
<h3>Client Side Javascript Functions</h3>
none.
<h3>Examples</h3>
The pages which comprise breadcrumbs can be specified as child components of the breadcrumbs or by using the <code>pages</code> attribute. If the <code>pages</code> attribute is used, the value must an EL expression that identifies an array of <code>com.sun.rave.web.ui.Hyperlink</code>.<br>
Breadcrumbs must be used within a <code>&lt;ui:form&gt;</code> tag.
<h4>Example 1:</h4>
Using child components:<br>
<code>
<pre>
      &lt;ui:breadcrumbs id="breadcrumbs1"&gt;
        &lt;ui:hyperlink url="http://google.com" label="Google"/&gt;
        &lt;ui:hyperlink url="http://yahoo.com" label="Yahoo"/&gt;
        &lt;ui:hyperlink url="http://sun.com" label="Sun"/&gt;
      &lt;/ui:breadcrumbs&gt;
</pre>
</code>
<h4>Example 2:</h4>
Using a value binding:<br>
<code>
<pre>
      &lt;ui:breadcrumbs id="breadcrumbs2" pages="#{FieldBean.pagelist}" /&gt;
</pre>
</code>
<br>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>pages</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Value binding expression that points to an array of UIComponents containing
         the information for the pages in the breadcrumbs.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>button</name>
    <tag-class>com.sun.rave.web.ui.taglib.ButtonTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the ui:button tag to display
an input button in the rendered HTML page. The input button submits the
associated form when activated by the user. The
corresponding ActionEvent events then occur on the server. <br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span
 style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
 style="color: rgb(0, 0, 0);">This tag uses the XHTML
&lt;input&gt; element to create a button with a
text label.</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
The button component supports a client side javascript
object.&nbsp; To use this object all you need to do is get the
object by using document.getElementById() function to get the
object.&nbsp; It is recommended though you pass the result of the
getElementById() function to a local variable rather than accessing the
functions directly.&nbsp; The object supports the following
functions:
<ul>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">isMini()</span>:
Test if button style is "mini" for
the button.&nbsp; Returns a boolean.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">isPrimary(): </span>Test
if button style is "primary" for
the button.&nbsp; Returns a boolean.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">isSecondary()</span>:
    <span style="font-style: italic;">DEPRECATED
use isPrimary instead </span>Test
if button style is "secondary" for
the button.&nbsp; Returns a boolean.<br>
  </li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">setMini(mini)</span>:
Set button style&nbsp;<span
 style="text-decoration: line-through;"></span>to&nbsp;"mini"
for the button. If
the mini <span
 style="text-decoration: line-through;"></span>attribute
is set to true,
the
element is shown with mini styles.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">setPrimary(primary)</span>:
Set button style<span
 style="text-decoration: line-through;"></span>
to "primary" for the
given button. If the primary <span
 style="text-decoration: line-through;"></span>attribute
is set to
true, the element is shown with primary style.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">setSecondary(secondary)</span>:
    <span style="font-style: italic;">DEPRECATED
use setPrimary instead</span> Set
button style<span
 style="text-decoration: line-through;"></span>
to "secondary" for the
given button. If the secondary <span
 style="text-decoration: line-through;"></span>attribute
is set to
true, the element is shown with secondary styles.</li>
</ul>
There are two other common functions that are useful for a button.
<ul>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">&nbsp;common_stripStyleClass(javascriptObj,
classToRemove)</span>: Use this
function to remove a style class from a any js object that supports the
class property.&nbsp; Takes a javascript object and the style class
string to remove.<br>
  </li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">&nbsp;common_addStyleClass(this,
newType)</span>: Use this function
to add a new style class to any js object that supports the class
property. Takes a javascript object and the style class string to add.<br>
    <span style="font-style: italic;"><br>
    <br>
    </span></li>
  <span style="font-style: italic;"></span>
</ul>
<h3>Examples</h3>
<h4>Example 1: Create a primary
button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" /&gt;<br>
</code>
<h4>Example 2: Create a primary
mini button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" mini="true" /&gt;</code><br>
<h4>Example 3: Create a secondary
button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" secondary="true" /&gt;<br>
</code>
<h4>Example 4: Create a secondary
mini button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" secondary="true" isMini="true" /&gt;</code><br>
<h4>Example 5: Create a reset
button:</h4>
<code>&lt;ui:button
id="button1"
text="#{ButtonBean.text}" action="#{ButtonBean.success}" reset="true"
/&gt;<br>
</code>
<h4>Example 6: Create an image
button:</h4>
<code>&lt;ui:button
id="button1" imageURL="#{ButtonBean.image}"
action="#{ButtonBean.success}" /&gt;</code>
<br>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that processes
        application actions from this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that receives action from this, and possibly other, components.
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Alternative text description used by screen reader tools
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Indicates that activation of this component by the user is not currently 
        permitted. In this component library, the disabled attribute also causes 
        the button to be renderered using a particular style. 
      ]]></description>
    </attribute>

    <attribute>
      <name>escape</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Escape HTML markup in the button text
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming container.        
      ]]></description>
    </attribute>

    <attribute>
      <name>imageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Resource path of an image to be displayed to create the visual 
         appearance of this button instead of the standard button image. Either 
         the "imageURL" or  "text" attributes must be specified.  When an 
         imageURL value is given, the button type is set to "image".
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>mini</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Indicates that the button should be rendered using a different style 
         than normal buttons. If the value is set to true, the button shall 
         appear somewhat smaller than a normal button. Mini buttons are useful 
         in situations where a button applies to an individual field on the 
         page, rather than a section, table, or whole page.
      ]]></description>
    </attribute>

    <attribute>
      <name>noTextPadding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Indicates that padding should not be applied to the button text. By 
        default, whitespace characters are padded to button text greater than 
        or equal to 4 characters in length. If the value is set to true, no 
        padding is applied.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>primary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Indicates that the button is the most commonly used button within a 
        group.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>reset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Indicates that the button should be a HTML reset button. By default, 
        this value is false and the button is created as a submit button. If the
        value is set to true, no action listener will be invoked.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Textual label used to create the visual appearance of this button. 
        Either the "imageURL" or "text" attributes must be specified.  When a 
        text value is given, the standard button image is used, with the 
        specified text displayed on the button. 
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>calendar</name>
    <tag-class>com.sun.rave.web.ui.taglib.CalendarTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<p>Use the <code>ui:calendar</code> when the user needs to select a
    date. The calendar component displays a text field that expects a
    date as input, together with an icon that when clicked displays a
    small calendar. The user can either type directly into the
    textfield or select a date from the calendar display. 
</p>

<h3>HTML Elements and Layout</h3>
<p>
The component renders several elements: an optional
<code>&lt;label&gt;</code>, an <code>&lt;input type="text"&gt;</code>
and an <code>&lt;img&gt;</code> element for the icon. They are laid
out inside a HTML <code>&lt;table&gt;</code>. </p> <p> The pop-up
calendar is a complex component also laid out using a HTML
<code>&lt;table&gt;</code>. It has child components corresponding to
<code>&lt;ui:dropDown&gt;</code> and
<code>&lt;ui:iconHyperlink&gt;</code> (please see these for details)
and anchors <code>&lt;a&gt;</code> to represent the dates and the
"close" button. </p>

<h3>Configuring the <code>ui:calendar</code> tag </h3>

<p>Use the <code>selectedDate</code> attribute to associate the
component with a model object that represents the current value, by
setting the attribute's value to an EL expression that corresponds to
a property of a backing bean.</p>

<p>By default, the component accepts dates between the current date
    and four years out. The years shown in the popup calendar reflect
    this range. If a date outside of the range is entered into the
    textfield, the component indicates a validation error. To specify
    a different range of date, use the <code>minDate</code> and
    <code>maxDate</code> attributes. 

<p>To optionally specify a label for the component, use the
<code>label</code> attribute, or specify a label facet. </p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the value of this component when it is  marked as readonly. The default is a <code>ui:staticText</code>. </li>
    </ul>


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the TextField component. </p>

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>[JSOBJECT_NAME]_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>

<h3>Examples</h3>

<h4>Example 1: Basic Popup Calendar</h4>

<p>The component gets the options from a managed bean called
<code>CalendarBean</code>. The value of the component
    <code>selectedDate</code> is bound to a property of the managed
    bean. A label for the component as a whole (<code>label</code>) is
    shown next to the component.  
</p>


<p>
This example shows how to create a simple calendar.
</p>  
<p>
 <pre>&lt;ui:calendar id="startDate" 
              selectedDate="#{CalendarBean.startDate}"
              label="Start Date: " /&gt;</pre>
</p>                      

<p>Code for the managed bean:<p>

<h4>CalendarBean.java</h4>

<code>import java.io.Serializable;<br>
import java.util.Date;<br>
import java.util.Calendar;<br>
import javax.faces.event.ValueChangeEvent;<br>
<br>
<br>
public class CalendarBean {<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public CalendarBean() {<br>
&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; private Date startDate = null;<br>
<br>
&nbsp;&nbsp;&nbsp; public Date getStartDate() {<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return this.startDate;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
<br>
&nbsp;&nbsp;&nbsp; public void setStartDate(Date startDate)
{<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.startDate = startDate;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>


 The <code>selectAll</code> attribute indicates that the
<code>Add All</code> and <code>Remove All</code> buttons should be
shown. A label for the component as a whole (<code>label</code>) is shown
next to the component (<code>labelOnTop</code> is false). Labels have
been specified for the list of available items and for the list of
selected items. The <code>sorted</code> attribute indicates that the options on
the list will be shown in alphabetical order.</p>

<h4>Example 2: DateFormat Pattern and Range of Dates configured</h4>

<p>The component gets the options from a managed bean called
<code>TravelBean</code>. The value of the component
    <code>selectedDate</code> is bound to a property
    <code>travelDate</code>of the managed
    bean. A label for the component as a whole (<code>label</code>) is
    shown next to the component; the label is retrieved from a message
    bundle. 
</p>

<p>The component has been configured to use a pattern for date
    representation consisting of four digits for the year, two for the
    month, and two for the day, separated by dashes. This pattern, set
    using the <code>dateFormatPattern</code> attribute will be used
    regardless of locale. With this date format pattern, the default
    help string will be "YYYY-MM-DD", which is suitable for English,
    but not for other locales where other words are used, so a
    different message is retrieved for each locale
    (<code>dateFormatPattern</code>). </p> 

<p>
The component is also configured to restrict the range of dates that
    are valid, so that the first valid date is the day after the day
    the component is viewed, and the last valid date is six months
    from that date.
<p>

<pre>
    &lt;ui:calendar id="travelDate" 
        selectedDate="#{TravelBean.travelDate}"
        label="#{msgs.travelDate}"
        dateFormatPattern="yyyy-MM-dd"
        dateFormatPatternHelp="#{msgs.dateFormatPattern}"
        minDate="#{TravelBean.tomorrowsDate}"
        maxDate="#{TravelBean.sixMonthsFromNow}" /&gt;
</pre> 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	     <p>
             The binding attribute is used to configure the component through 
             Java code. This approach is intended for advanced uses, when the 
             tag attributes cannot provide the desired output. The value of the 
             binding attribute must be a JavaServer Faces EL expression that 
             resolves to a backing bean, or to a backing bean property of type 
             <code>com.sun.web.ui.component.Calendar</code>. </p>
             <p>You must assign a component id to the component instance.
	    </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Number of character columns used to render this field. 
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The converter attribute is used to specify a method to translate
      native property values to String and back for this
      component. The converter attribute value must be one of the
      following: 
      <ul>
	<li>a JavaServer Faces EL expression that resolves to a
	  backing bean or bean property that implements the
	  <code>javax.faces.converter.Converter</code> interface; or</li> 
	<li>the ID of a registered converter (a String).</li> 
      ]]></description>
    </attribute>

    <attribute>
      <name>dateFormatPattern</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      <p>The date format pattern to use (i.e. yyyy-MM-dd). The
        component uses an instance of
      <code>java.text.SimpleDateFormat</code> and you may specify 
      a pattern to be used by this component, with the following
      restriction: the format pattern must include <code>yyyy</code> (not
      <code>yy</code>), <code>MM</code>, and <code>dd</code>; and no
      other parts of time may be displayed. If a pattern is not
      specified, a locale-specific default is used.</p> 
      <p> 
      If you change the date format pattern, you may also need to
      change the <code>dateFormatPatternHelp</code> attribute. See the
      documentation for that attribute. 
      </p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>dateFormatPatternHelp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      <p>A message below the textfield for the date, indicating the
      string format to use when entering a date as text into the
      textfield.</p>  

      <p>If the <code>dateFormatPattern</code> attribute has not been
      set, there is no need to set this attribute, as an
      appropriate locale-specific help string will be shown.</p> 

      <p>However, if the default <code>dateFormatPattern</code> has
      been overridden, then you may need to override this attribute
      also. The default behavior of the component is to show the
      pattern but capitalize it, so for example, if the value of 
     <code>dateFormatPattern</code> is <code>yyyy-MM-dd</code>, 
      then the default help text will be <code>YYYY-MM-DD</code>. 
      This is likely to be inadequate for languages other than
      English, in which you may use this attribute to provide
      descriptions that are appropriate for each locale.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If set, a label is rendered adjacent to the component with the
        value of this attribute as the label text. 
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
        label attribute has been set. Valid values are 1 (largest), 2 and
        3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxDate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      <p>A <code>java.util.Date</code> object representing the last
      selectable day. The default value is four years after the
      <code>minDate</code> (which is evaluated first).</p> 
      <p>The value of this attribute is reflected in the years that
      are available for selection in the month display. In future
      releases of this component, web application users will also not
      be able to view months after this date, or select days that
      follow this date. At present such dates can be selected, but
      will not be validated when the form is submitted.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>minDate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      <p>A <code>java.util.Date</code> object representing the first
      selectable day. The default value is today's date.</p> 
      <p>The value of this attribute is reflected in the years that
      are available for selection in the month display. In future
      releases of this component, web application users will also not
      be able to view months before this date, or select days that
      precede this date. At present such dates can be selected, but
      will not be validated when the form is submitted.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when some text in this
    component value is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that modification of this component by the
        user is not currently permitted, but that it will be
        included when the form is submitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedDate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A <code>java.util.Date</code> object representing the currently
	selected calendar date. 
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>timeZone</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The <code>java.util.TimeZone</code> used with this
      component. Unless set, the default TimeZone for the locale in  
      <code>javax.faces.component.UIViewRoot</code> is used. 
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The validator attribute is used to specify a method in a backing
bean to validate input to the component. The validator attribute value
must be a JavaServer Faces EL expression that resolves to a public
method with return type void. The method must take three parameters:
</p> 
<ul>
<li>a <code>javax.faces.context.FacesContext</code></li> 
<li>a <code>javax.faces.component.UIComponent</code> (the component
whose data is to be validated)</li>  
<li>a <code>java.lang.Object</code> containing the data to be
validated.</li>  
</ul> 
<p>The backing bean where the method is defined must implement
    <code>java.io.Serializable</code> or
    <code>javax.faces.component.StateHolder</code>.</p>  
<p>The method is invoked during the Process Validations Phase.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The <code>valueChangeListener</code> attribute is used to specify a
    method to handle an value-change event that is triggered when the
    user enters data in the input component. The value of the 
    attribute value must be a JavaServer Faces EL expression that
    resolves to a backing bean method. The method must take a single
    parameter of type <code>javax.faces.event.ValueChangeEvent</code>,
    and its return type must be void. The backing bean where the
    method is defined must implement <code>java.io.Serializable</code>
    or <code>javax.faces.component.StateHolder</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>checkbox</name>
    <tag-class>com.sun.rave.web.ui.taglib.CheckboxTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<p>
Use the <code>ui:checkbox</code> tag to display a checkbox
in the rendered HTML page. The tag can be used as a single
checkbox or as one checkbox among a group of checkboxes. A group
of checkboxes represents a multiple selection list which can have any
number of checkboxes selected, or none selected. A checkbox can
represent a value of a class type such as <code>Boolean, Byte, Character,
Double, Float, Integer, Long, Short, String</code> or the primitive form
of one of these class types.
A checkbox may also represent an application defined object value.
</p>
<p>
A <code>Boolean</code> value is useful for indicating whether
an item, such as a table row, is selected. A <code>String</code>
value is useful for passing values for checkbox selections made in the
interface. An application defined <code>Object</code> value or class
instance can be used to hold more information related to a checkbox
selection.
</p>
<p>
A single checkbox can be used to represent several types of data:
</p>
<ul>
  <li>a boolean control</li>
  <li>a string value that is related to the checkbox selection</li>
  <li>an object value defined by the application</li>
</ul>
<p>
A group of checkboxes can be used to represent:
</p>
<ul>
  <li>string values that are related to the checkbox selections</li>
  <li>object values defined by the application</li>
</ul>
<p>
Note: Another tag for rendering checkboxes is
<code>ui:checkboxGroup</code>, which imposes a grid layout on a group
of checkboxes. The <code>checkbox</code> tag is useful in
situations where the <code>checkboxGroup</code> tag layout is not
desirable, such as in a table row.
</p>
<p>
</p>
<h3>Detecting a selected checkbox</h3>
<p>
The <code>checkbox</code> tag uses both the <code>selected</code>
and <code>selectedValue</code> attributes to pass information about
the checkbox's selection status. The <code>selected</code>
attribute is used to indicate that the checkbox is selected, and should
have a check mark displayed in the page. The <code>selectedValue</code>
attribute is used to pass a data value for the
checkbox. A checkbox is considered to be selected when the value of the
<code>selected</code> attribute is equal to the value of
the <code>selectedValue</code> attribute. You can display a checkbox as
selected on the initial viewing of the page by assigning the same value
to the <code>selectedValue</code> and the <code> selected</code> attributes.
</p>
<p>
If the <code>selectedValue</code> attribute is not specified or its
value is <code>null</code> then the checkbox behaves like a
boolean control. If the checkbox is selected, the value of the
<code>selected</code> attribute is a true <code>Boolean</code>
instance. If the checkbox is not selected, the value of the
<code>selected</code> attribute will be a false <code>Boolean</code>
instance.
</p>
<p><em>
Note that a value binding expression that evaluates to a
primitive value can be assigned to the <code>selected</code>
and <code>selectedValue</code> attributes.
</em>
</p>
<p>
When checkboxes are part of a group, an <code>ArrayList</code> of
selected checkboxes is maintained. If any checkboxes within a group are
selected, a request attribute whose name is the value of the <code>name</code>
attribute is created and added to the <code>RequestMap</code>. The
request attribute value is an <code>ArrayList</code> containing the
value of the <code>selectedValue</code> attribute of each selected
checkbox. If no checkboxes are selected, no request attribute is
created. The <code>selected</code> attribute of each selected checkbox
within the group will also contain the value of the <code>selectedValue</code>
attribute of the respective selected checkbox.<br/>
</p>
The <code>Checkbox</code> class provides a convenience method for
obtaining the selected checkboxes in a group:
</p>
<p>
public static ArrayList getSelected(String groupName);
</p>
<p> where <code>groupName</code> is the value of the <code>name</code>
attribtue. Note that unlike the <code>selected</code> and
<code>selectedValue</code> attributes, the return value of this method
is always an ArrayList of class instances and not primitive values.
</p>
<h3>Using a <code>checkbox</code> tag as a boolean control</h3>
<p>
If the <code>selectedValue</code> attribute is not specified or its
value is <code>null</code> then the checkbox behaves like a
boolean control.
</p>
<p>
To use the <code>checkbox</code> tag as a boolean control, do not
specify a value for the <code>selectedValue</code> attribute. The
checkbox is selected if the <code>selected</code> attribute is not
null and has the value of a true <code>Boolean</code> instance or
a <code>boolean</code> primitive value.
If the checkbox is not selected, then the value of the
<code>selected</code> attribute is a false <code>Boolean</code> instance
or <code>boolean</code> primitive.
</p>
<p>
Normally the value of the <code>selectedValue</code> attribute is
specified as the value of the &lt;input&gt; HTML element. When a
checkbox is behaving as a boolean control the value of the &lt;input&gt;
element is the <code>clientId</code> of the checkbox.
</p>
<p><em>
Note that using a boolean checkbox in a group and
referencing the request attribute for the selected checkboxes is not
useful, since the value of the request attribute will be an <code>ArrayList
</code> of indistinguishable <code>true</code> values.
</em>
</p>
<h3>Using a <code>checkbox</code> tag to represent an application defined
value</h3>
<p>
The <code>selectedValue</code> attribute can be assigned an
application defined object value to represent the value of a selected
checkbox. If the checkbox is selected, the value of the <code>selected</code>
attribute is assigned the value of the <code>selectedValue</code>
attribute.
</p>
<p>
If the value of the <code>selectedValue</code> attribute is an
application defined object, a converter must be registered
to convert to and from a <code>String</code> value. The
converter is used to encode the checkbox value
as the value of the HTML &lt;input&gt; element and to decode the
submitted value in a request. In addition the object must support an
<code>equals</code> method that returns <code>true</code> when the 
value of the <code>selectedValue</code> attribute is compared to
the <code>selected</code> attribute value in order to detect a
selected checkbox.
</p>
<h3>Using a <code>checkbox</code> tag as one control in a group</h3>
<p>
The <code>name</code> attribute determines whether a
checkbox is part of a group. A checkbox is treated as part of a group
of checkboxes if the <code>name</code> attribute of the checkbox is
assigned a value equal to the <code>name</code> attribute of the other
checkboxes in the group. In other words, all checkboxes of a group have the
same <code>name</code> attribute value. The group behaves
like a multiple selection list, where zero or more checkboxes
can be selected. The value of the name attribute must
be unique within the scope of the &lt;form&gt; element containing the
checkboxes.
</p>
<h3>Facets</h3>
<p>
The following facets are supported:
</p>
<ul>
  <li><em>image</em> If the image facet exists, it is rendered to the
      immediate right hand side of the checkbox.
  <li><em>label</em> If the label facet exists, it is rendered to the
	immediate right of the image, or to the immediate right of the
	checkbox if no image is rendered.
</ul>
<h3>Examples</h3>
<h4>Example 1: Single boolean checkbox with value binding.</h4>
<code>
&lt;ui:checkbox id="cb1" selected="#{tldRbCbExample.selectedCb1}"/&gt;
</code>
<p>
The value binding <code>#{tldRbCbExample.selectedCb1}</code> implies that
there are two methods implemented in the <code>tldRbCbExample</code>
managed bean.
<ul>
<li>public void setSelectedCb1(boolean selected)</li>
<li>public boolean getSelectedCb1()</li>
</ul>
The <code>getSelectedCb1</code> method will be called to determine the checked
state of the checkbox during rendering.<br/>
When the tag is first rendered, its initial checked state is
determined by the return value of <code>getSelectedCb1</code>. If it returns
<code>true</code> the checkbox will be checked on the HTML page and 
not checked if it returns <code>false</code><br/>
When the checkbox is checked by the user the <code>setSelectedCb1</code> method
will be called with a <code>boolean</code> argument equal to <code>true</code>.
When it is unchecked the method will be called with a <code>boolean</code>
argument equal to <code>false</code>.<br/>
</p>
<p>No image or label will be displayed by this example.</p>

<h4>Example 2: Single boolean checkbox with value binding,
that displays an image and a label.</h4>
<code>
&lt;ui:checkbox id="cb2" selected="#{tldRbCbExample.selectedCb2}"
imageURL="tree_server.gif label="Server"/&gt;
</code>
<p>
The behavior of this checkbox is the same as example one.<br/>
In this example an image and a label are displayed next to the checkbox. Both
the <code>imageURL</code> and <code>label</code> attributes may be assigned
value binding expressions instead of literal values.
</p>
<h4>Example 3: Single String valued checkbox with value binding.</h4>
<code>
&lt;ui:checkbox id="cb3" label="Printer" selectedValue="Printer"
selected="#{tldRbCbExample.selectedCb3}"/&gt;
</code>
<p>
The value binding <code>#{tldRbCbExample.selectedCb3}</code> implies that
there are two methods implemented in the <code>tldRbCbExample</code>
managed bean. Because the <code>selectedValue</code> attribute is a
<code>String</code> the expected method signatures will be:
<ul>
<li>public void setSelectedCb3(String selected)</li>
<li>public String getSelectedCb3()</li>
</ul>
The <code>getSelectedCb3</code> method will be called to determine the
checked state of the checkbox during rendering.<br/>
When the tag is first rendered, its initial checked state is determined by
the return value of <code>getSelectedCb3</code>. With a <code>String</code>
valued checkbox, this checkbox will be checked only if the
<code>getSelectedCb3</code> method returns "Printer", since that is the value
of the checkbox as dictated by the <code>selectedValue="Printer"</code>
attribute. If the <code>getSelectedCb3</code> method returns anything else,
the checkbox will not be checked.<br/>
When the checkbox is checked by the user the <code>setSelectedCb3</code>
method will be called with a <code>String</code> argument equal to "Printer".
When it is unchecked the method will be called with a null <code>String</code>
argument.
</p>
<h4>Example 4: Single Object valued checkbox with value bindings and a label.</h4>
<code>
&lt;ui:checkbox id="cb4" label="Printer"
	selectedValue="#{tldRbCbExample.selectedValueCb4}"
	selected="#{tldRbCbExample.selectedCb4}"
	converter="#{tldRbCbExample.printerConverter}"/&gt;
</code>
<p>
The value bindings <code>#{tldRbCbExample.selectedCb4}</code> and
<code>#{tldRbCbExample.selectedValueCb4}</code> imply the following methods
are implemented in the <code>tldRbCbExample</code> managed bean. Let's say
the object value is an instance of the "Printer" class, then the expected
method signatures will be:
</p>
<p>
<ul>
<li>public void setSelectedCb4(Printer selected)</li>
<li>public Printer getSelectedCb4()</li>
<li>public void setSelectedValueCb4(Printer selected)</li>
<li>public Printer getSelectedValueCb4()</li>
</ul>
</p>
A Printer class might look like:
<p>
<code><pre>
    public static class Printer {
	private String name;
	private String location;
	public Printer(String name, String location) {
	    this.name = name;
	    this.location = location;
	}
	public String getName() {
	    return name;
	}
	public String getLocation() {
	    return location;
	}
	public boolean equals(Printer p) {
	    return this.name.equals(p.getName()) &&
		    this.location.equals(p.getLocation());
	}
    };
</pre>
</code>
</p>
<p>
Since this is an application defined object value, the application must supply
a converter, as indicated in the example. The converter attribute's
value binding expression implies a method in the <code>tldRbCbExample</code>
managed bean called
</p>
<p>
<code>public Converter getPrinterConverter();</code>.
</p>
The converter class might look like:
<code><pre>
    public class PrinterConverter implements javax.faces.convert.Converter {
	public PrinterConverter() {
	}
	public String getAsString(FacesContext context, 
		UIComponent component, Object value) {
	    if (!(value instanceof Printer)) {
		throw new ConverterException("Not a Printer value");
	    }
	    return ((Printer)value).getName();
	}
	public Object getAsObject(FacesContext context, 
		UIComponent component, String value) {
	    if (!value.equals("printer1")) {
		throw new ConverterException("Unrecognized printer: " + value);
	    }
	    return printerDb.getPrinter("printer1");
	}
    };
</pre>
</code>
</p>
<p>
The <code>getSelectedCb4</code> method will be called to determine the
checked state of the checkbox during rendering.<br/> When the tag
is first rendered, its initial state is determined by the return value of
<code>getSelectedCb4</code>. With an <code>Object</code> valued checkbox,
this checkbox will be checked only if the <code>getSelectedCb4</code> method
returns a Printer instance that equals the Printer instance returned
by the <code>getSelectedValueCb4</code> method.<br/>
If the <code>getSelectedCb4</code> method returns a Printer instance that
is not equal as determined by
<code>getSelectedValueCb4().equals(getSelectedCb4())</code> the checkbox
will not be checked.<br/>
When the checkbox is checked by the user the <code>setSelectedCb4</code>
method will be called with the Printer instance returned by the converter.
</p>

<h4>Example 5: Grouped Integer valued checkboxes in a table.</h4>
<p>
The following example shows a common use case for checkboxes in
a table. The checkboxes are used to select zero or more rows
for processing. The checkbox state does not need to be
stored. The selected row indexes can be obtained directly as
<code>Integer</code> values from the <code>ArrayList</code> of
selected checkboxes maintained by the checkbox
in the action callback <code>#{tldRbCbExample.table5process}</code>.<br/>
The markup in bold is how you would specify a checkbox tag for this purpose.
The <code>selectedValue</code> value binding,
<code>#{tldRbCbExample.currentRow1}</code>
is implemented to return the current row in the <code>table5row1</code>
tableRow tag.
</p>
<p>
<code><pre>
    &lt;ui:table id="table5"&gt;
	&lt;ui:tableRow id="table5row1"
	    sourceData="#{tldRbCbExample.table5row1data}"
	    sourceVar="table5data"
	    binding="#{tldRbCbExample.table5row1}"&gt;
	    &lt;ui:tableColumn id="col1"&gt;

		&lt;f:facet name="header"&gt;
		    &lt;ui:tableHeader id="header1"
			deselectAllButton="true"
			selectAllButton="true"
			selectId="cb5"/&gt;
		&lt;/f:facet&gt;

		<b>
		&lt;ui:checkbox id="cb5" name="cb5Grp" 
			selectedValue="#{tldRbCbExample.currentRow1}"&gt;
		&lt;/ui:checkbox&gt;
		</b>

	    &lt;/ui:tableColumn&gt;
	    &lt;ui:tableColumn id="col2"&gt;
		&lt;f:facet name="header"&gt;
		    &lt;ui:staticText text="Application Data"/&gt;
		&lt;/f:facet&gt;

		&lt;ui:staticText text="#{table5data.text}"/&gt;

	    &lt;/ui:tableColumn&gt;
	&lt;/ui:tableRow&gt;
	&lt;f:facet name="tableActionsBottom"&gt;
	   &lt;ui:button id="table5process"
		action="#{tldRbCbExample.table5process}"
		text="Process Checked"/&gt;
	&lt;/f:facet&gt;
    &lt;/ui:table&gt;
</pre>
</code>
</p>
<p>
See <a href="table.html" target="tagFrame">ui:table</a> for details
on using the <code>&lt;ui:table&gt;</code> tag and other table child tags
and facets.
</p>
<p>
</p>
<p>
Normally when checkboxes are contained within a <code>ui:tableRow</code>
the application MUST provide a value binding for the <code>selected</code>
attribute and any attribute that is expected to maintain its state. This
is because the table only creates a single instance of the checkbox for
all rows. It depends on a model to provide the storage for the attribute
values, as it iterates over the rows in the dataset.<br/>
In this example, we don't need to maintain the state across requests because
the rows just need to be selected for processing. Once the processing
is complete, the checkbox no longer needs to be checked.
<p>
The following code shows how the <code>table5process</code> action
method obtains the selected checkbox values from the request map.
It calls a static member on <code>Checkbox</code> to return the
<code>ArrayList</code>
</p>
<p>
<code>public static ArrayList getSelected(String groupName)</code>
</p>
<code><pre>
    public void table5process() {

	// Checkbox.getSelected(String groupName) is
	// a static convenience method that obtains the 
	// ArrayList of selected checkboxes from the request map
	// <em>ONLY when the checkboxes are part of a group</em>.
	//
	ArrayList al = Checkbox.getSelected("cb5Grp");
	if (al != null) {
	    ListIterator li = al.listIterator();
	    while (li.hasNext()) {
		processRow(((Integer)li.next()).intValue());
	    }
	}
    }
</pre></code>
<p>
<h4>Example 6: Grouped boolean checkboxes in a table, using value bindings to
maintain the state.</h4>
<p>
This example is similar to Example 5, but it maintains the state of checkboxes
across requests, by specifying a value binding for the selected attribute.
A simple way to store the checkbox state is to store the state with the
row data.
</p>
<code>
	&lt;ui:checkbox id="cb6" selected="#{table6data.selected}"&gt;
	&lt;/ui:checkbox&gt;
</code>
<p>
The value binding <code>#{table6data.selected}</code> references a boolean
member in the row data for storing and retrieving the checkbox state.
Notice also that it is not necessary to group the checkboxes by specifying
a value for the <code>name</code> attribute. It is not useful to specify
boolean checkboxes in a group, in order to obtain the list of selected
checkboxes from the request map. The list will consist of indistinguishable
<code>true</code> values; one for each selected checkbox.
</p>
<h3>HTML Elements and Layout</h3>
<p>
A <code>checkbox</code> is rendered as at least one HTML &lt;span&gt; 
element and one &lt;input&gt; element of type <em>checkbox</em>. 
Each checkbox may consist of the following elements and components:
</p>
<ul>
  <li>a &lt;span&gt; element</li>
  <li>an &lt;input&gt; element of type <em>checkbox</em></li>
  <li>an optional image, if the <code>imageURL</code>
      attribute or an <code>image</code> facet is specified. If the
      <code>imageURL</code> is specified and no image facet exists
      a <code>com.sun.rave.web.ui.component.ImageComponent</code> is created
      and rendered. If an <code>image</code> facet is specified then the 
      component specified by the facet is rendered.</li>
  <li>an optional label, if the <code>label</code>
      attribute or a <code>label</code> facet is specified. If the
      <code>label</code> attribute is specified and no label facet exists
      a <code>com.sun.rave.web.ui.component.Label</code> is created and rendered
      If a <code>label</code> facet is specified then 
      the component specified by the facet is rendered.</li>
</ul>
<p>
The id attributes for HTML elements and components are constructed as follows,
where <em>cid</em> is the <code>clientId</code> of the component
being rendered.
</p>
<ul>
  <li> <em>cid</em><b>_span</b> for the &lt;span&gt; element</li>
  <li> <em>cid</em> for the &lt;input&gt; element</li>
  <li> <em>cid</em><b>_image</b> for the image component if created.</li>
  <li> <em>cid</em><b>_label</b> for the label component if created.</li>
</ul>
<h3>Client Side Javascript Functions </h3>
<ul>
  <li><em>checkbox_setChecked(elementId, checked)</em>: Set the 
	  checked property for a checkbox with the given element id,
	  <em>elementId</em>.
	  If <em>checked</em> is true, the checkbox is checked.
	  If <em>checked</em> is false, the checkbox is unchecked.</li>
</ul>
<p></p>
<!--
	<h3>Theme Identifiers</h3>
<p>
	<lo>
	<li>Cb for the INPUT element</li>
	<li>CbDis for the INPUT element for disabled checkbox</li>
	<li>CbLbl for a LABEL element of a checkbox</li>
	<li>CbLblDis for a LABEL element of a disabled checkbox</li>
	<li>CbImg for an IMG element of a checkbox</li>
	<li>CbImgDis for an IMG element of a disabled checkbox</li>
	</lo>
</p>
-->
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>imageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
	    A context relative path of an image to be displayed with
	    the control. If you want to be able to specify attributes
	    for the image, specify an <code>image</code> facet instead
	    of the <code>imageURL</code> attribute.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If set, a label is rendered adjacent to the component with the
      value of this attribute as the label text.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
      label attribute has been set. Valid values are 1 (largest), 2 and
      3 (smallest). The default value is 3.
      ]]></description>
    </attribute>

    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	Identifies the checkbox as participating as part
	of a group. When this attribute is specified and more than
	one checkbox within the same form has the same value for this
	attribute the checkbox behaves as a single selection of multiple
	selection list, where zero or more checkboxes can be selected.
	The value of the name attribute of the checkboxes in 
	a group must be unique within the scope of
	the &lt;form&gt; element containing the checkboxes.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when some text in this
    component value is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	This attribute identifies a selected checkbox.
	It is assigned the value of the <code>selectedValue</code>
	attribute if the checkbox is selected. This
	attribute should be bound to the same type as the<code>selectedValue</code> attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	The value of the checkbox when it is selected.
	This attribute is assigned to the value of the <code>selected</code>
	attribute when the checkbox is selected.<br>
	This attribute can be bound to a <code>String</code>, or<code>Object</code> value.<br>
	If <code>selectedValue</code> is not assigned a value, the
	checkbox behaves as a boolean control. A boolean checkbox is selected
	when the <code>selected</code> attribute is equal to a true<code>Boolean</code> instance.<br>
	If a boolean checkbox is not selected, the <code>selected</code>
	attribute is a false <code>Boolean</code> instance. </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Use the visible attribute to indicate whether the component should be 
    viewable by the user in the rendered HTML page.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>checkboxGroup</name>
    <tag-class>com.sun.rave.web.ui.taglib.CheckboxGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<p>
	Use the <code>ui:checkboxGroup</code> tag to display two or more
	check boxes in a grid layout in the rendered HTML page. The
	<code>ui:checkboxGroup</code> tag attributes that you
	specify determine how the check boxes are displayed. 
</p>
<p>
	If the <code>label</code> attribute is specified a
	<code>com.sun.rave.web.ui.component.Label</code> component
	is rendered before the first checkbox and
	identifies the checkbox group. The label component's
	<code>for</code> attribute is 
	set to the <code>id</code> attribute of the first checkbox in
	the rendered HTML page.
</p>
<p>
	The check boxes are laid out in rows and columns in an HTML 
	&lt;table&gt; element. The number of rows is defined by the length 
	of the items array. The number of columns is defined by the columns
	attribute. The default layout is a single vertical column.
</p>
<p>
</p>
<p>
	The <code>items</code> attribute must be a value binding expression.
	The value binding expression assigned to the <code>items</code>
	property evaluates to an <code>Object</code> array of 
	<code>com.sun.rave.web.ui.model.Option</code> instances. Each
	instance represents one checkbox. The <code>value</code> property
	of an <code>Option</code> instance represents the value of a
	selected checkbox.
	If the <code>items</code> array is empty nothing is rendered.
</p>
<p>	
	Zero or more check boxes may be selected.
	The <code>selected</code> attribute must also be a value binding
	expression that is evaluated to read and write an <code>Object</code>
	array. When an array is read from the value binding expression,
	it identifies the selected checkboxes. Each element in the array
	is an <code>Object</code> value. Each <code>Object</code> value must
	be equal to the value property of at least one <code>Option</code>
	instance specified in the array obtained from the value binding
	expression assigned to the <code>items</code> attribute.
</p>
<p>
	The write method of the <code>selected</code> attribute's value
	binding expression is called during the <code>UPDATE_MODEL_PHASE</code>
	of the JSF lifecyle. If one or more checkboxes are selected
	an <code>Object</code> array is passed as an argument to the
	write method. This array contains the <code>Object</code>
	values of the selected checkboxes.
</p>
	<h3>HTML Elements and Layout</h3>
<p>
	A <code>ui:checkboxGroup</code> renders one
	<code>com.sun.rave.web.ui.component.Checkbox</code> component for
	each element in the <code>items</code> array.
	See <a href="checkbox.html" target="tagFrame">ui:checkbox</a> for
	details on the HTML elements and components rendered for a 
	checkbox.
</p>
<p>
	The value of the <code>name</code> attribute of each 
	<code>Checkbox</code> component rendered is assigned the
	<code>clientId</code> of the <code>CheckboxGroup<code>
	component instance associated with this tag. The <code>id</code>
	attribute of each <code>Checkbox</code> component rendered 
	is formed as follows, where <em>cbgrpid</em> is the id of the
	<code>CheckboxGroup</code> instance and <em>N</em> is the nth
	checkbox.
</p>
	<ul>
	<li> <em>cbgrpid_N</em></li>
	</ul>
<p>
	See <a href="checkbox.html" target="tagFrame">ui:checkbox</a> for
	details on how the id properties of the components that make up the 
	checkbox are defined.
</p>
	<h3>Client Side Javascript Functions</h3>
<p>
	none.
</p>

	<h3>Example</h3>
	<b>Example 1: Create a checkbox group</b>
<p>
	<code>
	&nbsp;&lt;ui:checkboxGroup items="#{rbcbGrp.selections}"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;label="#{rbcbGrp.cbGrpLabel}"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;toolTip="cbgrp-tooltip"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;disabled="false"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;tabIndex="4"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;selected="#{rbcbGrp.cbvalue}"&gt;</br>
	&nbsp;&lt;/ui:checkboxGroup&gt;</br>
	</code>
</p>
<p>
	This example creates a checkbox group with an identifying
	label for the group before the first checkbox. The 
	data for the checkboxes is obtained from the value binding
	expression <code>#{rbcbGrp.selections}</code>. <code>rbcbGrp</code>
	is an application defined managed bean and provides the values for
	other attributes such as <code>selected</code> to receive the
	value of the selected checkboxes in the group.
</p>
	<!--
	<h3>Theme Identifiers</h3>
<p>
	<ul>
	<li>CbGrp for the TABLE element.</li>
	<li>CbGrpCpt for the TD element containing the group label</li>
	<li>CbGrpLbl for the LABEL element used as the CAPTION</li>
	<li>CbGrpLblDis for the LABEL used as the CAPTION if the group is disabled</li>
	<li>CbGrpRwEv for even TR elements</li>
	<li>CbGrpRwOd for odd TR elements</li>
	<li>CbGrpClEv for even TD elements</li>
	<li>CbGrpClOd for odd TD elements</li>
	<li>Cb for the INPUT element</li>
	<li>CbDis for the INPUT element for disabled check box </li>
	<li>CbLbl for a LABEL element of a check box</li>
	<li>CbLblDis for a LABEL element of a disabled check box</li>
	<li>CbImg for an IMG element of a check box</li>
	<li>CbImgDis for an IMG element of a disabled check box</li>
	<li>CbGrp - for the <em>span</em> element that encloses the
	  entire set of elements rendered for the <code>checkboxGroup</code>.
	</li>
	</ul>
</p>
	-->
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines how many columns may be used to lay out the check boxes.
        The value must be greater than or equal to one. The default value is one.
        Invalid values are ignored and the value is set to one.
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Specifies the options that the web application user can choose
         from. The value must be one of an array, Map or Collection
         whose members are all subclasses of<code>com.sun.rave.web.ui.model.Option</code>.  
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If set, a label is rendered adjacent to the component with the
      value of this attribute as the label text.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
      label attribute has been set. Valid values are 1 (largest), 2 and
      3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	The object that represents the selections made from the
	available options. If multiple selections are allowed, this
	must be bound to an Object array.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>dropDown</name>
    <tag-class>com.sun.rave.web.ui.taglib.DropDownTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

    <h4>About this tag</h4>

    <p>This tag renders a drop-down menu. Use the <code>selected</code>
    attribute to associate the component with a model object that
    represents the current choice, by setting the value to an EL
    expression that corresponds to a property of a
    managed bean.</p> 

    <h4>Configuring the dropdown tag</h4>

    <p>Use the <code>items</code> attribute to specify the options
    from which the web application user can choose. The value must be
    an EL expression that identifies an array, a
    <code>java.util.Collection</code> or a <code>java.util.Map</code>
    of <code>com.sun.rave.web.ui.model.Option</code>. </p> 

    <p>The first time the component is rendered, the option which
    corresponds to the value of the <code>selected</code> model object
    property is marked as selected, using the <code>equals</code>
    method on the model object. </p> 

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet.</p>


    <h4>Facets</h4>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    </ul>

    <h4>Client-side JavaScript functions</h4>

    <ul>
    <li><code>dropDown_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>: use
    this function to enable/disable the drop-down menu. <code>&lt;id&gt;</code>
    must be the generated id of the component. Set
    <code>&lt;disabled&gt;</code> to true to disable the component, 
    false to enable it. </li>
    <li><code>dropDown_changed(&lt;id&gt;)</code>: this 
    function is automatically invoked by the drop-down menu's
    <code>onchange</code> handler. <code>&lt;id&gt;</code>
    must be the generated id of the component.</li>
    </ul>

    <h4>Examples</h4>

<pre>

    &lt;ui:dropDown selected="#{flightSearch.leaveAirport}" 
                 items="#{dataBean.airports}" 
                 id="leaveAirport" 
                 tooltip="#{msgs.chooseAirport}"            label="#{msgs.chooseDepartureAirport}" /&gt;

    &lt;ui:dropDown selected="#{flightSearch.leaveAirport}" 
                 items="#{dataBean.airports}" 
 	         id="leaveAirport" 
                 tooltip="#{msgs.chooseAirport}"
                 label="#{msgs.chooseDepartureAirport}" &gt;
        &lt;f:facet name="label"&gt;
            &lt;facet component goes here&gt;
        &lt;/f:facet&gt;
    &lt;/ui:dropDown&gt;
</pre>
<p>The dataBean backing bean would include the following definition for the "airports" items:<br>
<pre>
    private Option[] airports = null;
     // Creates a new instance of backing bean //
    public DataBean() {
        airports = new Option[11];
        airports[0] = new Option("SFO", "San Francisco");
        airports[1] = new Option("OAK", "Oakland");
        airports[2] = new Option("SAN", "San Diego");
        airports[3] = new Option("BOS", "Boston");
        airports[4] = new Option("ARN", "Stockholm");
        airports[5] = new Option("MNL", "Manila");
        airports[6] = new Option("CDG", "Paris");
        airports[7] = new Option("PDX", "Portland");
        airports[8] = new Option("LAX", "Los Angeles");
        airports[9] = new Option("NRT", "Tokyo");
        airports[10] = new Option("TBD", "Future Airport");
        airports[10].setDisabled(true);
    }
    public Option[] getAirports() {
        return airports;
    }
</pre>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that processes
        application actions from this component. This attribute is
        only referenced when submitForm is true. 
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that receives action
        from this, and possibly other, components. The Action Listener is invoked only when
        submitForm is true. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Associates this component with a converter. The role of the
      converter is to convert the values of the<code>Selection</code>s and the selected Object(s) to and from
      String representations. The value of this attribute must be an
      EL expression that is a reference to a<code>javax.faces.converter.Converter</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>forgetValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this flag is set to true, then the component is always
      rendered with no initial selection. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Specifies the options that the web application user can choose
         from. The value must be one of an array, Map or Collection
         whose members are all subclasses of<code>com.sun.rave.web.ui.model.Option</code>.  
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        This attribute, if set, causes a label to be
      rendered with the component (see also the labelLevel
      attribute). If specified, a HTML <code>label</code> element is
      generated  adjacent to the <code>select</code> element
      (equivalent to using the label component). This attribute is
    ignored if a <code>label</code> facet has been specified.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
      label attribute has been set. Valid values are 1 (largest), 2 and
      3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelOnTop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is true, the label is rendered above the
      component. If it is false, the label is rendered next to the
      component. The default is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>navigateToValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this flag is set to true, then selecting an item from this
      component will cause the application to navigate using the
      DropDown's value as the action. Use this in place of defining 
      the navigation outcome using the action MethodBinding. This
      applies only if submitForm is true. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>Use this attribute to bind the
      component to a model object (cf. the binding attribute). 
      The value of this attribute must be an EL expression, and it
      must evaluate to a subclass of  <code>java.lang.Object</code>.
      Note that the object class must ovverride the equals method as
      that is used to determine which objects should be marked as
      selected.</p><p>Use the<code>selected</code> attribute if the web
      application relies on objects designed purely to represent model
      data (cf. the <code>binding</code>attribute). </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>separators</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>If you use an OptionGroup to group
      several options together, the component by default uses
      separators between the groups. To turn off the automatic
      separators, set this attribute to false.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>submitForm</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Flag indicating that the form should be submitted when the
      value of the component changes. 
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Sets the tooltip for the component. This will be
      renderered as the HTML title attribute. 
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Use the visible attribute to indicate whether the component should be 
    viewable by the user in the rendered HTML page.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>editableList</name>
    <tag-class>com.sun.rave.web.ui.taglib.EditableListTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
    <h4>About this tag</h4>

    <p>This tag renders an EditableList component. Use this component
    when web application users need to create and modify a list of
    strings. The application user can add new strings by typing them
    into the textfield and clicking the "Add" button, and remove them
    by selecting one or more items from the list and clicking the
    "Remove" button.</p>  

    <h4>Configuring the <code>ui:editableList</code> tag</h4>

    <p> Use the <code>list</code> attribute to bind the component
    to a model. The value must be an EL expression that corresponds to
    a managed bean or a property of a managed bean, and it must
    evaluate to an array of  <code>java.lang.String</code>. 
    </p> 

    <p>To set the label of the textfield, use the
    <code>fieldLabel</code> attribute. To set the label of the
    textfield, use the <code>listLabel</code> attribute. To validate
    new items, use the <code>fieldValidator</code> attribute; to
    validate the contents of the list once the user has finished
    adding and removing items, specify a <code>labelValidator</code>.</p> 

    <h4>Facets</h4>

    <ul>
    <li><code>fieldLabel</code>: use this facet to specify a custom 
    component for the textfield label.</li>
    <li><code>listLabel</code>: use this facet to specify a custom 
    component for the textfield label.</li>
    <li><code>field</code>: use this facet to specify a custom 
    component for the textfield.</li>
     <li><code>addButton</code>: use this facet to specify a custom 
    component for the add button.</li>
     <li><code>removeButton</code>: use this facet to specify a custom 
    component for the remove button.</li>
    <li><code>search</code>: use this facet to specify a custom 
    component for the search button. The component is rendered
    on the same row as the text field and the "Add" button, 
    after the "Add" button.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for display a readonly version of the component.</li>
    <li><code>header</code>: use this facet to specify a header,
    rendered in a table row above the component.</li>
    <li><code>footer</code>: use this facet to specify a header,
    rendered in a table row below the component.</li>
    </ul>

    <h4>Client-side JavaScript functions</h4>

    <ul>
    <li>NONE yet</li> 
    </ul>

    <h4>Example</h4>
<pre>
        &lt;ui:editableList id="compid"
                         list="#{ListBean.list}" 
                         fieldLabel="#{msgs.textfield_label}"
                         listLabel="#{msgs.list_label}"
                         sorted="true" 
			 searchButton="true"
                         fieldValidator="#{ListBean.validateNewItem}"
                         listValidator="#{ListBean.validateList}"/&gt;

</pre>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>fieldLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The label of the text field
      ]]></description>
    </attribute>

    <attribute>
      <name>fieldValidator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
          A validator which will be applied to entries made into the
	  textfield. Specify this to be the <code>validate()</code>
	  method of a <code>javax.faces.validator.Validator</code>, or
	  to another method with the same argument structure and
	  exceptions.  </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated labels. Valid values
	are 1 (largest), 2 and 3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>list</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
         <p>
      The object that represents the list. It must be a JavaServer
      Faces EL expression that evaluates to an array of Objects or to
      a <code>java.util.List</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>listLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The label of the list
      ]]></description>
    </attribute>

    <attribute>
      <name>listOnTop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating whether the list should be on top of the
	textfield or vice versa. By default, the textfield is on top. 
      ]]></description>
    </attribute>

    <attribute>
      <name>listValidator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
      A validator which will be applied to the contents of the list
      (e.g. to verify that the list has a minimum number of
      entries). Specify this to be the <code>validate()</code>
	  method of a <code>javax.faces.validator.Validator</code>, or
	  to another method with the same argument structure and
	  exceptions.  </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>maxLength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The maximum number of characters allowed for each string in the list. 
      ]]></description>
    </attribute>

    <attribute>
      <name>multiple</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the application user may make select
	more than one option from the listbox . 
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The number of items to display. The default value is 6. 
      ]]></description>
    </attribute>

    <attribute>
      <name>sorted</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Set this attribute to true if the list items should be
      sorted. The sorting is performed using a Collator configured
      with the locale from the FacesContext. 
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>form</name>
    <tag-class>com.sun.rave.web.ui.taglib.FormTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<p>Use the <code>ui:form</code> tag 
to create an HTML <code>&lt;form&gt;</code> element. The form can be submitted 
via a button or hyperlink control (in which case an <code>ActionEvent</code> 
will be generated on the server), or via client side scripting.</p> 
<p>The <code>virtualFormsConfig</code> attribute can be used to configure 
virtual forms. 
 A <i>virtual form</i> defines a group of input components 
(&quot;participants&quot;) and submission components (&quot;submitters&quot;) 
on a page, such that when the user interacts with one of the submitters, the participants 
are processed exclusively while the remaining inputs on the page are ignored.  
 An <i>input component</i> is any 
 component that implements <code>EditableValueHolder</code>. A 
 <i>submission component</i> 
 is any component that causes the web page to be submitted (such as a button, 
 hyperlink, or any input component that submits the page via the 
 <code>common_timeoutSubmitForm</code> scripting function). 
<i>Processing </i>an input means converting and validating it, firing 
any value change events associated with the input, and mapping the input onto 
its binding target (if the component is bound). Virtual forms provide an 
alternative to the <code>immediate</code> property. 
They are more powerful than <code>immediate</code> because they let you 
specify  multiple groups of inputs to be selectively processed (that is, you 
can specify  multiple virtual forms on a page). They are also easier to use 
than  <code>immediate</code> because they do not alter 
the JavaServer Faces lifecycle.</p>
<br> 
<h3>HTML Elements and Layout</h3> 
The rendered HTML page contains an 
HTML <code>&lt;form&gt;</code> tag and its associated 
attributes. The rendered 
form includes a hidden field for use in 
determining which form submitted the page.</p><br> 
<h3>Client Side Javascript Functions</h3> 
None. 
<br> 
<h3>Examples</h3> 
<h4>Example 1: Using a Form<br> 
</h4> 
<code>&lt;ui:page&gt;<br> 
&nbsp;&nbsp;&nbsp; &lt;ui:html&gt;<br> 
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;ui:head id="head" 
title="Hyperlink Test Page" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
&lt;ui:form id="form1"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;ui:hyperlink&nbsp;
id="hyperlinkSubmitsPage"&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
label="#{HyperlinkBean.label}" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{HyperlinkBean.determineWhatToDoFunction}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&lt;/ui:form&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:html&gt;<br>
&lt;/ui:page&gt;</code><br>
<h4>Example 2: A Page with Three Virtual Forms<br>
</h4>
<code>&lt;ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &lt;ui:head id="head" 
title="Shipping and Billing Information" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; 
&lt;ui:form id="form1" virtualFormsConfig="shipping | shippingAddressTextField 
| updateShippingButton , creditCard | creditCardDropDown | creditCardDropDown , 
billing | billingAddressTextfield creditCardDropDown | updateBillingButton"&gt; 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:label for="shippingAddressTextField" id="shippingAddressLabel" 
style="left: 48px; top: 48px; position: absolute" text="Shipping Address:"/&gt; 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:textField id="shippingAddressTextField" required="true" 
style="left: 48px; top: 72px; position: absolute"/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:button id="updateShippingButton" style="left: 48px; top: 120px; 
position: absolute" text="Update Shipping Address"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:label id="creditCardLabel" for="creditCardDropDown" 
style="left: 48px; top: 192px; position: absolute" 
text="Credit Card to Use:"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:dropDown id="creditCardDropDown" 
items="#{SessionBean1.creditCards}" style="left: 48px; top: 216px; 
position: absolute"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:label id="billingAddressLabel" for="billingAddressTextfield" 
style="left: 48px; top: 264px; position: absolute" 
text="Credit Card Billing Address:"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:textField id="billingAddressTextfield" required="true" 
style="left: 48px; top: 288px; position: absolute"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:button id="updateBillingButton" style="left: 48px; top: 336px; 
position: absolute" text="Update Billing Address"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; 
&lt;ui:button id="updateAllButton" style="left: 48px; top: 432px; position: 
absolute" text="Update All Information"/&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&lt;/ui:form&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &lt;/ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:html&gt;<br>
&lt;/ui:page&gt;</code><br>
    ]]></description>

    <attribute>
      <name>autoComplete</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use this non-XHTML compliant boolean attribute to turn off autocompletion 
      feature of Internet Explorer and Firefox browsers. Set to "false" to
      turn off completion.  The default is "true".
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>enctype</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use this attribute to set the content-type of the HTTP request
      generated by this form. You do not normally need to set this
      attribute. Its default value is
      application/x-www-form-urlencoded. If there is an upload tag 
      inside the form, the upload tag will modify the form's enctype
      attribute to multipart/form-data. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onReset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this form is reset.
      ]]></description>
    </attribute>

    <attribute>
      <name>onSubmit</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this form is submitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The form's target window.
      ]]></description>
    </attribute>

    <attribute>
      <name>virtualFormsConfig</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The configuration of the virtual forms within this literal form, represented as a String.
        Each virtual form is described by three parts, separated with pipe ("|") characters:
        the virtual form name, a space-separated list of component ids that participate in the 
        virtual form, and a space-separated list of component ids that submit the virtual form.
        Multiple such virtual form "descriptors" are separated by commas. The component ids may 
        be qualified (for instance, "table1:tableRowGroup1:tableColumn1:textField1").
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Use the visible attribute to indicate whether the component should be 
    viewable by the user in the rendered HTML page.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>frame</name>
    <tag-class>com.sun.rave.web.ui.taglib.FrameTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<span style="color: rgb(0, 0, 0);">Use the ui:frame tag inside a
ui:frameSet tag to denote a new XHTML frame. </span><br
style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML Elements and Layout</h3>
<p style="color: rgb(0, 0, 0);">If you use a ui:frame and ui:frameSet
tags you should set the ui:page tag's frame attribute to "true".<br>
</p>
This tag renders an xhtml compliant &lt;frame&gt; tag.&nbsp; <br>
<h3 style="color: rgb(0, 0, 0);">Client Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.
</span><br style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Example</h3>
<b style="color: rgb(0, 0, 0);">Example 1: Using the ui:frame tag
appropriately in a JSP page:<br>
<br>
</b><code style="color: rgb(0, 0, 0);">&lt;?xml version="1.0"
encoding="UTF-8"?&gt;<br>
&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
xmlns:h="http://java.sun.com/jsf/html"
xmlns:jsp="http://java.sun.com/JSP/Page"
xmlns:ui="http://www.sun.com/web/ui"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
contentType="text/html;charset=ISO-8859-1"
pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:page frame="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:head title="blah" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frameSet rows="10%,*" cols="10%,*" style="color:blue"
styleClass="blue" toolTip="blah"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah" url="../faces/hyperlink/hyperlink.jsp"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah1" url="../faces/hyperlink/nextpage.jsp"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah2" url="http://www.google.com"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah3" url="http://www.yahoo.com"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:frameSet&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>
&lt;/jsp:root&gt;<br>
</code><b style="color: rgb(0, 0, 0);"><span
style="font-family: monospace;"></span></b>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>frameBorder</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Set the value of the frameBorder attribute to "true" when a border is 
        needed around the frame.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>longDesc</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A URL to a long description of the frame contents. Use it for browsers that do not support frames
      ]]></description>
    </attribute>

    <attribute>
      <name>marginHeight</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the top and bottom margins in the frame
      ]]></description>
    </attribute>

    <attribute>
      <name>marginWidth</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the left and right margins in the frame
      ]]></description>
    </attribute>

    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines a unique name for the frame (to use in scripts)
      ]]></description>
    </attribute>

    <attribute>
      <name>noResize</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Set the value of the noResize attribute to "true" when  user 
        is not allowed to resize the frame.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>scrolling</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Determines scrollbar action (valid values are: yes, no, auto)
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the URL of the file to show in the frame.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>frameSet</name>
    <tag-class>com.sun.rave.web.ui.taglib.FrameSetTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<span style="color: rgb(0, 0, 0);">Use
the <code>ui:frameSet</code>
tag to define a new set of frames in the rendered HTML page. <br>
When using <code>ui:frameSet</code>
and <code>ui:frame</code>
tags in
your application, you must also set the <code>ui:page</code>
tag's
frame attribute to "true".<br>
</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">The
rendered HTML page contains
an XHTML-compliant <code>&lt;frameset&gt;</code>
element. </span><br
 style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">What
theme elements apply?</span><br
 style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.&nbsp;
</span><br
 style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Examples</h3>
<p style="color: rgb(0, 0, 0);"></p>
<h4 style="color: rgb(0, 0, 0);">Example
1: Creating a
frameset of two rows and two columns<br>
</h4>
<code style="color: rgb(0, 0, 0);">&lt;?xml
version="1.0"
encoding="UTF-8"?&gt;<br>
&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
xmlns:h="http://java.sun.com/jsf/html"
xmlns:jsp="http://java.sun.com/JSP/Page"
xmlns:ui="http://www.sun.com/web/ui"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
contentType="text/html;charset=ISO-8859-1"
pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:page frame="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:head title="blah" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frameSet rows="10%,*" cols="10%,*" style="color:blue"
styleClass="blue" toolTip="blah"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah" url="../faces/hyperlink/hyperlink.jsp"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah1" url="../faces/hyperlink/nextpage.jsp"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah2" url="http://www.google.com"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:frame toolTip="blah3" url="http://www.yahoo.com"
frameBorder="true" noResize="false"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:frameSet&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>
&lt;/jsp:root&gt;</code>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The width, in pixels, of the space around frames. The frameSpacing 
        attribute and the border attribute set the same property in different 
        browsers.  Set frameSpacing and border to the same value.
      ]]></description>
    </attribute>

    <attribute>
      <name>borderColor</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
  	 The bordercolor attribute allows you to set the color of the frame 
         borders using a hex value or a color name.      
      ]]></description>
    </attribute>

    <attribute>
      <name>cols</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Defines the number and size of columns in a frameset. The size can be 
         specified in pixels, percentage of the page width, or with an 
         asterisk (*).  Specifying * causes the columns to use available space.
         See the HTML specification for the frameset element for more details.
      ]]></description>
    </attribute>

    <attribute>
      <name>frameBorder</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Flag indicating whether frames should have borders or not. If 
         frameBorder is true, decorative borders are drawn. If frameBorder is  
         false, a space between frames shows up as the background color of the
         page.  To show no border or space between frames, you should set 
         frameBorder to false, and set frameSpacing and border to 0.
      ]]></description>
    </attribute>

    <attribute>
      <name>frameSpacing</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The width, in pixels, of the space around frames. The frameSpacing attribute 
        and the border attribute set the same property in different browsers.  
        Set frameSpacing and border to the same value. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Defines the number and size of rows in a frameset. The size can be 
         specified in pixels, percentage of the page length, or with an 
         asterisk (*).  Specifying * causes the rows to use available space.
         See the HTML specification for the frameset element for more details.    
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>head</name>
    <tag-class>com.sun.rave.web.ui.taglib.HeadTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<body onload="asd();" bgcolor="white">
<span style="color: rgb(0, 0, 0);">Use the </span><code
style="color: rgb(0, 0, 0);">ui:head</code><span
style="color: rgb(0, 0, 0);"> tag to provide information about the
document, to be used in the <code>&lt;head&gt;</code> element of the
rendered HTML page.&nbsp; The </span><code style="color: rgb(0, 0, 0);">ui:head</code><span
style="color: rgb(0, 0, 0);"> tag must be placed immediately after
the <code>ui:html</code> tag, within the <code>ui:page</code> tag.
&nbsp; The following tags can be
used as children of the <code>ui:head</code> tag:</span><br
style="color: rgb(0, 0, 0);">
<ul style="color: rgb(0, 0, 0);">
<li><a href="link.html"><code>ui:link</code></a></li>
<li><a href="meta.html"><code>ui:meta</code></a></li>
<li><code><a href="script.html">ui:script</a></code></li>
</ul>
<h3 style="color: rgb(0, 0, 0);">HTML Elements and Layout</h3>
<span style="text-decoration: line-through; color: rgb(0, 0, 0);"></span>
<p style="color: rgb(0, 0, 0);">The <code>&lt;head&gt;</code>
element is rendered in the HTML page, and can include information that
is valid for inclusion in the HTML <code>&lt;head&gt;</code> element.
For example, if you use the <code>ui:link</code> tag in the <code>ui:head</code>
tag, you can provide the URL to a style sheet. The style sheet
link&nbsp; will be rendered as a <code>&lt;link&gt;</code> element in
the <code>&lt;head&gt;</code> element of the HTML page.&nbsp; In
addition this tag will output the appropriate stylesheets for the
included components on the page.<br>
</p>
<span style="color: rgb(0, 0, 0);">The
browser does not display the information in the <code>&lt;head&gt;</code>
element to the user, with the exception of the title that is used in
the browser's title bar.&nbsp;&nbsp; </span>
<h3 style="color: rgb(0, 0, 0);">Client Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None. </span>
<h3 style="color: rgb(0, 0, 0);">Example</h3>
<b style="color: rgb(0, 0, 0);">Example 1: Create a head tag </b><br
style="color: rgb(0, 0, 0);">
<code style="color: rgb(0, 0, 0);"><br>
&lt;ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code
style="color: rgb(0, 0, 0);">&lt;ui:head
title="Name of the
page..title is required"&gt;<br>
</code><code style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;
&lt;ui:link url="/relativepath/x.css" /&gt;</code><code
style="color: rgb(0, 0, 0);"><br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;ui:script url="/relativepath/x.js" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code
style="color: rgb(0, 0, 0);">&lt;/ui:head&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code
style="color: rgb(0, 0, 0);">&lt;ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code
style="color: rgb(0, 0, 0);">....your
page content....<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; </code><code
style="color: rgb(0, 0, 0);">&lt;/ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; </code><code style="color: rgb(0, 0, 0);">&lt;/ui:html&gt;</code>
<code style="color: rgb(0, 0, 0);">&lt;/ui:page&gt;</code><span
style="color: rgb(0, 0, 0);">&nbsp;</span><small><i><br>
<br>
</i></small>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>defaultBase</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag (true or false) indicating that a default html base tag should be
        shown or not.  Changing this attribute could cause ui:anchor to not work
        properly.  The default value is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>profile</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A space separated list of URL's that contains meta data information 
        about the page	
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Title of the document to be displayed in the browser title bar.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>helpInline</name>
    <tag-class>com.sun.rave.web.ui.taglib.HelpInlineTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the <code>&lt;ui:helpInline&gt;</code> tag to display inline help.

<h3 >HTML Elements and Layout</h3>
The rendered HTML page displays the body content of the
<code>&lt;ui:helpInline&gt;</code> tag inside of an XHTML compliant
<code>&lt;div&gt;</code> element. An appropriate style class will be set for
the <code>&lt;div&gt;</code> element based upon the helpInline type.
<h3 >Client Side Javascript Functions</h3>
None.
<h3 >Examples</h3>
<h4>Example 1: Render page help</h4>
<code>&lt;ui:helpInline id="pageHelp" text="This is page inline help." /&gt;</code>

<h4>Example 2: Render field help</h4>
<code>&lt;ui:helpInline id="fieldHelp" type="field" text="This is field inline help." /&gt;</code>

<h4>Example 3: Render inline help with an embedded link</h4>
<code>&lt;ui:helpInline id="pageHelp" type="field"&gt;<br>
&nbsp;&nbsp;&lt;f:verbatim&gt;Enter a password. For more information about passwords &lt;/f:verbatim&gt;<br>
&nbsp;&nbsp;&lt;ui:imageHyperlink icon="HREF_LINK" id="helpLink" text="click here" /&gt;<br>
&lt;/ui:helpInline&gt;
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The inline help text to display.
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The type of inline help - valid values are "page" or "field". Note that
      "page" is the default.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>hiddenField</name>
    <tag-class>com.sun.rave.web.ui.taglib.HiddenFieldTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the <code>ui:hiddenField</code> tag to create a hidden field,
    which is present in the HTML, but not displayed to the user.
    Hidden fields are useful for saving state information.  

<h3>HTML Elements and Layout</h3> 

<p>The hiddenField component renders an XHTML <code>&lt;input
    type="hidden"&gt;</code> element. </p> 

    <h3>Configuring the <code>ui:hiddenField</code> Tag</h3>

<p>Use the <code>value</code> attribute to associate
the component with a model object that represents the current value,
by setting the attribute's value to a JavaServer Faces EL expression
    that corresponds to a property of a backing bean.</p>

    <h3>Facets</h3>

    <p>This component has no facets.</p> 

    <h3>Theme Identifiers</h3>

    <p>This component does not use any style classes from the theme.</p> 

    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the HiddenField component. 

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the input element rendered by this
    component.
    </td>
    </tr>
  </tbody>
</table>

    <h3>Examples</h3>

<p>This example uses a backing bean <code>FieldTest</code> with a
property <code>counter</code>. The property is an <code>int</code> but
    it is not necessary to specify a converter since the default
    JavaServer Faces converter will be used. The value of the hidden
    field may be updated through a JavaScript.  The tag generates an
    HTML input element.</p>
<pre>
&lt;ui:hiddenField id="counter" value="#{FieldTest.counter}"/&gt;
</pre>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The binding attribute is used to configure the
      component through Java code. This approach is intended for
      advanced uses, when the tag attributes cannot provide the
      desired output. The value of the binding attribute must be a
      JavaServer Faces EL expression that resolves to a backing bean,
      or to a backing bean property of type 
      <code>com.sun.rave.web.ui.component.HiddenField</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The converter attribute is used to specify a method to translate
      native property values to String and back for this
      component. The converter attribute value must be one of the
      following: 
      <ul>
	<li>a JavaServer Faces EL expression that resolves to a
	  backing bean or bean property that implements the
	  <code>javax.faces.converter.Converter</code> interface; or</li> 
	<li>the ID of a registered converter (a String).</li> 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Flag indicating that the hidden field should not send its value to the
      server. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Flag indicating that event handling for this
      component should be handled immediately (in Apply Request Values
      phase) rather than waiting until Invoke Application phase. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use the rendered attribute to indicate whether the HTML code for
      the component should be included in the rendered HTML page. If
      set to false, the rendered HTML page does not include the HTML
      for the component. If the component is not rendered, it is also
      not processed on any subsequent form submission. 
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Literal value to be rendered in this hidden field.
        If this property is specified by a value binding
        expression, the corresponding value will be updated
        if validation succeeds.
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The validator attribute is used to specify a method in a backing
bean to validate input to the component. The validator attribute value
must be a JavaServer Faces EL expression that resolves to a public
method with return type void. The method must take three parameters:
</p> 
<ul>
<li>a <code>javax.faces.context.FacesContext</code></li> 
<li>a <code>javax.faces.component.UIComponent</code> (the component
whose data is to be validated)</li>  
<li>a <code>java.lang.Object</code> containing the data to be
validated.</li>  
</ul> 
<p>The backing bean where the method is defined must implement
    <code>java.io.Serializable</code> or
    <code>javax.faces.component.StateHolder</code>.</p>  
<p>The method is invoked during the Process Validations Phase.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The current value of this component, which can be a text string or a
      JavaServer Faces EL expression that evaluates to a backing bean
      or to a property of a backing bean.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The <code>valueChangeListener</code> attribute is used to specify a
    method to handle an value-change event that is triggered when the
    user enters data in the input component. The value of the 
    attribute value must be a JavaServer Faces EL expression that
    resolves to a backing bean method. The method must take a single
    parameter of type <code>javax.faces.event.ValueChangeEvent</code>,
    and its return type must be void. The backing bean where the
    method is defined must implement <code>java.io.Serializable</code>
    or <code>javax.faces.component.StateHolder</code>.</p> 
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>html</name>
    <tag-class>com.sun.rave.web.ui.taglib.HtmlTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="text-decoration: line-through;"></span><span
 style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">Use the <code>ui:html</code>
tag to create an <code>&lt;html&gt;</code>
element in the rendered
HTML page. The </span><code
 style="color: rgb(0, 0, 0);">ui:html</code><span
 style="color: rgb(0, 0, 0);"> tag must be used as a
child of the <code>ui:page</code>
tag, following </span><code
 style="color: rgb(0, 0, 0);"></code><span
 style="color: rgb(0, 0, 0);">immediately after the <code>ui:page</code>
tag.&nbsp; This tag is required for pages that are not in a portal
enviroment and not subviews.<br>
</span><br
 style="color: rgb(0, 0, 0);">
<span
 style="font-weight: bold; color: rgb(0, 0, 0);"></span>
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span
 style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
 style="color: rgb(0, 0, 0);">The rendered HTML page
includes an </span><code
 style="color: rgb(0, 0, 0);">&lt;html&gt;</code><span
 style="color: rgb(0, 0, 0);">
tag that uses attributes indicated by the attributes you specify with
the </span><code
 style="color: rgb(0, 0, 0);">ui:html</code><span
 style="color: rgb(0, 0, 0);"> tag in the JSP page. </span><br
 style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">None.</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.
</span>
<h3 style="color: rgb(0, 0, 0);">Examples</h3>
<h4 style="color: rgb(0, 0, 0);">Example
1: Using a <code>ui:html</code>
tag<br>
</h4>
<code style="color: rgb(0, 0, 0);">&lt;ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&lt;ui:head id="blah"
title="hyperlink test page" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&lt;ui:form id="form1"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; &lt;ui:hyperlink&nbsp;
id="hyperlinkSubmitsPage"&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
label="#{HyperlinkBean.label}" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{HyperlinkBean.determineWhatToDoFunction}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&lt;/ui:form&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&lt;/ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:html&gt;<br>
&lt;/ui:page&gt;</code><br
 style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);"><br>
</span><span
 style="color: rgb(0, 0, 0);"></span><code
 style="color: rgb(0, 0, 0);"><br>
</code>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>lang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the language code for this document
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>xmlns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the XML namespace attribute.  Default value is: 
        http://www.w3.org/1999/xhtml  	
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>hyperlink</name>
    <tag-class>com.sun.rave.web.ui.taglib.HyperlinkTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the ui:hyperlink tag to display a HTML hyperlink to a URL, or a
link that submits a form. If the action attribute is used, the form is
submitted. If the url attribute is used, the link is a normal hyperlink
that sends the browser to a new location.
<br>
<p style="color: rgb(0, 0, 0);">The
<span style="color: rgb(51, 51, 255);"><code
 style="color: rgb(0, 0, 0);">ui:imageHyperlink</code><span
 style="color: rgb(0, 0, 0);"></span></span>
component
can be also be used to submit forms. If the action attribute is used,
the form is submitted. If the
url attribute is used, the link is a normal hyperlink that sends the
browser to a new location.</p>

<br>
<h3>HTML Elements and Layout</h3>
The rendered HTML page displays an XHTML <a>
element. If the link submits the
form the onclick will have some additional behavior that the user
should be
aware of. See the onclick attribute below.
<br>
</a>
<h3><a>Client
Side Javascript Functions</a></h3>
<a>None.
<br>
</a>
<h3><a>Examples</a></h3>
<h4><a>Example
1: Create a hyperlink that submits the form:</a></h4>
<code><a>&lt;ui:hyperlink
id="hyperlinktest1"
text="#{HyperlinkBean.text}" action="#{HyperlinkBean.success}"
/&gt;
<br>
<br>
</a></code><a>Note:
id can be used as a unique identifier if the hyperlink is
programatically
addressed<br>
</a>
<h4><a>Example
2: Create a hyperlink that goes to another page:</a></h4>
<code><a>&lt;ui:hyperlink
id="hyperlinktest2"
text="#{HyperlinkBean.text}" url="http://www.google.com" /&gt;
<br>
<br>
</a></code><a>Note:
url property being set signifies that this *will not*
submit to the server and will be a straight hyperlink
<i><br>
</i>
</a>
<h4><a>Example
3: Using the body of a hyperlink to render text:</a></h4>
<code><a>&lt;ui:hyperlink
id="hyperlinktest3" url="http://www.sun.com"
&gt; &lt;ui:image url="myyahoo.gif"
/&gt;&lt;ui:staticText text="more
text" /&gt;
&lt;/ui:hyperlink&gt;
</a></code>
<h4><a>Example
4: Using f:params to add additional request parameters when the
hyperlink action is invoked:</a></h4>
<code><a>&lt;ui:hyperlink&nbsp;
id="hyperlinktest1"&nbsp; text="#{HyperlinkBean.label}"
action="#{HyperlinkBean.success}" &gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:param name="testingParam1"
value="success!"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:param name="testingParam2"
value="failure!"/&gt;<br>
&lt;/ui:hyperlink&gt;<br>
<br>
</a></code><a>Note:&nbsp;
After clicking on this hyperlink, the page will be submitted and the
request parameter map will have 2 additional items in it: testingParam1
and testingParam2 with their associtated values<br>
</a><code><a></a></code>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that processes
        application actions from this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that receives action from this, and possibly other, components.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Scripting code executed when a mouse click occurs over this component.
          If the component submits the form, the script should not 
          return from this function. The return will be handled by the script 
          that is appended to the onclick. It is ok to return from this script 
          to abort the submit process if necessary.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The resource at the specified URL is displayed in the frame that is 
        specified with the target attribute. Values such as "_blank" that are 
        valid for the target attribute of a HTML anchor element are also valid 
        for this attribute in this component
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text description of the hyperlink
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         The MIME content type of the resource specified by this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute, relative, or context relative (starting with "/") URL to the 
        resource selected by this hyperlink. If not specified, clicking this 
        hyperlink will submit the surrounding form.
      ]]></description>
    </attribute>

    <attribute>
      <name>urlLang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The language code of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>iframe</name>
    <tag-class>com.sun.rave.web.ui.taglib.IFrameTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<span
 style="color: rgb(0, 0, 0);"><span
 style="text-decoration: line-through;"></span>Use
the <code>ui:iframe</code>
tag&nbsp;
to create an inline frame in the rendered HTML page. The <code>ui:iframe</code>
tag inserts a frame in which another web page can be displayed inside
the web application page. <br>
</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span
 style="text-decoration: line-through; color: rgb(0, 0, 0);"></span>
<span style="color: rgb(0, 0, 0);">The
iframe component is
rendered as an </span><code
 style="color: rgb(0, 0, 0);">&lt;iframe&gt;</code><span
 style="color: rgb(0, 0, 0);"> XHTML
element.&nbsp; The <code>ui:iframe</code>
tag can be configured by using the tag's attributes, which map to the <code>&lt;iframe&gt;</code>
properties and are similarly named. <br>
</span>
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">None.</span>
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.
</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Example</h3>
<b style="color: rgb(0, 0, 0);">Example
1: Using the ui:iframe
tag
appropriately in a JSP page:<br>
</b><b
 style="color: rgb(0, 0, 0);"><br>
</b><code
 style="color: rgb(0, 0, 0);">&lt;?xml
version="1.0"
encoding="UTF-8"?&gt;<br>
&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
xmlns:h="http://java.sun.com/jsf/html"
xmlns:jsp="http://java.sun.com/JSP/Page"
xmlns:ui="http://www.sun.com/web/ui"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
contentType="text/html;charset=ISO-8859-1"
pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:page frame="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:head title="blah" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &lt;ui:staticText id="text1" text="Below is a
frame within this page without a frameset" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &lt;ui:markup tag="br" singleton="true"
/&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &lt;ui:iframe url="http://google.com" /&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&lt;/ui:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>
&lt;/jsp:root&gt;</code>
    ]]></description>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Specifies how to align the iframe according to the surrounding text.  One
      of the following: left, right, top, middle, bottom 	
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>frameBorder</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Set the value of the frameBorder attribute to "true" when a border is 
        needed around the frame.
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Defines the height of the iframe in pixels or as a percentage of it's 
      container	
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>longDesc</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A URL to a long description of the frame contents. Use it for browsers that do not support frames
      ]]></description>
    </attribute>

    <attribute>
      <name>marginHeight</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the top and bottom margins in the frame
      ]]></description>
    </attribute>

    <attribute>
      <name>marginWidth</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the left and right margins in the frame
      ]]></description>
    </attribute>

    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines a unique name for the frame (to use in scripts)
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>scrolling</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Determines scrollbar action (valid values are: yes, no, auto)
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the URL of the file to show in the frame.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Defines the width of the iframe in pixels or as a percentage of it's 
      container	
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>image</name>
    <tag-class>com.sun.rave.web.ui.taglib.ImageComponentTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      


<code></code>Use
the <code>ui:image</code>
tag to display an inline image in the rendered
HTML page. The url attribute is used to specify the URL to the image
file that
is to be displayed.&nbsp;&nbsp; If you use an image that is a
PNG type and ends with ".png " this tag will output the correct format
for an &lt;img&gt; tag to display a PNG correctly in Internet
Explorer.&nbsp; In order to use this feature you must set the
height and width properties of this tag..<br>
<br>
The <code>ui:image</code>
tag can be used to display a theme-specific image in the
rendered HTML page. The icon attribute used in the <code>ui:image
</code>tag is
a key value that is mapped to a URL in theme properties file. The key
is used
to look up the appropriate image source and related attributes from the
current
theme. By specifying a key, you avoid the need to specify predefined
constants
such as height and width. The image can also be seamlessly changed when
a
different theme is selected.<br>
<br>
Note: currently the list of
icons that you can use is not publicly
supported, but the icon names are specified in the
<code>/com/sun/rave/web/ui/suntheme/SunTheme.properties</code>
file. The names are
listed as resource keys of the format <code>image.ICON_NAME</code>.
Use only
the part of the key that follows image. For example, if the key is
<code>image.ALARM_CRITICAL_SMALL</code>,
you should specify
<code>ALARM_CRITICAL_SMALL</code>
as the value of the icon attribute of the
<code>ui:icon</code>
tag. A list of supported icon values will be published in
the near future.<br>
<h3>HTML Elements and Layout</h3>
The rendered HTML page displays an XHTML compliant <code>&lt;img&gt;</code>
element with any applicable element attributes. The attributes can be
specified
through the <code>&lt;ui:image&gt;</code>
tag attributes.
<h3>Client Side Javascript
Functions</h3>
None.
<br>
<h3>Examples</h3>
<h4>Example 1: Create an image</h4>
<code>&lt;ui:image id="image1"
url="../images/dot.gif" /&gt;
<br>
<br>
</code>This will generate the
following markup: <br>
&nbsp;&nbsp; <br>
<code>&lt;img
src="../images/dot.gif" alt="" /&gt;
</code><br>
<br>
<h4>Example 2: Create a theme
specific image<br>
</h4>
<code>&lt;ui:image id="image2"
icon="</code><code>ALARM_CRITICAL_SMALL</code><code>"
/&gt;
</code>
    ]]></description>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the position of the image with respect to its context.
	Valid values are: bottom (the default); middle; top; left; right.
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Alternative text description used by screen reader tools
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the width of the img border in pixels.
	The default value for this attribute depends on the web browser
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When specified, the width and height attributes tell web browsers 
	to override the natural image or object size in favor of these values
      ]]></description>
    </attribute>

    <attribute>
      <name>hspace</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the amount of white space in pixels to be inserted to the
	left and right of the image. The default value is not specified but is       
	generally a small, non-zero size.
      ]]></description>
    </attribute>

    <attribute>
      <name>icon</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The identifier of the desired theme image.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>longDesc</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        A verbose description of this image
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute or relative URL to the image to be rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

    <attribute>
      <name>vspace</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the amount of white space in pixels to be inserted above and
	below the image. The default value is not specified but is generally a
	small, non-zero size.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Image width override. When specified, the width and height attributes 
	tell web browsers to override the natural image or object size in favor 
	of these values, specified in pixels. Some browsers might not support 
	this behavior.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>imageHyperlink</name>
    <tag-class>com.sun.rave.web.ui.taglib.ImageHyperlinkTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="color: rgb(51, 51, 255);"><span
 style="color: rgb(0, 0, 0);">Use the </span><code
 style="color: rgb(0, 0, 0);">ui:imageHyperlink</code><span
 style="color: rgb(0, 0, 0);">
tag to display a clickable image in the rendered HTML page. The image
is surrounded by an HTML hyperlink, allowing the image to function as a
hyperlink.&nbsp; This tag is based on a <code>ui:hyperlink</code>
tag and functions the same way.&nbsp; The main difference is this
tag will format an image with a surrounding hyperlink.&nbsp; See
the <code>ui:hyperlink</code>
tag for more examples on using a hyperlink.</span></span><br>
<br>
The
<span style="color: rgb(51, 51, 255);"><code
 style="color: rgb(0, 0, 0);">ui:imageHyperlink</code><span
 style="color: rgb(0, 0, 0);"></span></span>
component
can be also be used to submit forms. If the action attribute is used,
the form is submitted. If the
url attribute is used, the link is a normal hyperlink that sends the
browser to a new location.<br>
<br>
<span style="color: rgb(0, 0, 0);">The
<code>ui:imageHyperlink</code>
can display a clickable icon image from the current theme in the
rendered HTML page using the "icon" attribute. The <code></code>tag
allows you to use an
icon (a small image) from the current theme. Currently the list of
icons that you can use is not publicly supported, but the icon names
are specified in the <code>/com/sun/rave/web/ui/suntheme/SunTheme.properties</code>
file. The names are listed as resource keys of the format <code>image.ICON_NAME.</code>
Use only the part of the key that follows <code>image.
</code>For
example, if the key is <code>image.ALARM_CRITICAL_SMALL</code>,
you
should use <code>ALARM_CRITICAL_SMALL
</code>as the specified
icon name in the <code>ui:</code></span><span
 style="color: rgb(0, 0, 0);"><code>imageHyperlink</code>
</span><span
 style="color: rgb(0, 0, 0);"><code></code>tag.
In the near future a
supported list will be published.&nbsp; </span><br>
<span style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);"></span>
<p><span
 style="color: rgb(0, 0, 0);">The rendered HTML page
contains
an XHTML <code>&lt;a&gt;</code>
element with an <code>&lt;img&gt;</code>
element inside. <code></code>
Image attributes that are specified
with the <code>ui:imageHyperlink</code>
tag are used as attributes in
the <code>&lt;img&gt;</code>&nbsp;
element.</span><br>
</p>
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">None</span><br>
<h3>Client Side Javascript
Functions<span
 style="color: rgb(255, 153, 0);"></span><br>
</h3>
<p>None. <span
 style="color: rgb(255, 153, 0);"></span></p>
<h3>Examples&nbsp;<span
 style="color: rgb(255, 153, 0);"></span></h3>
<span style="color: rgb(255, 153, 0);"></span>
<h4>Example 1: Create an <span
 style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">imageHyperlink</span>
with yahoo gif<br>
</h4>
<span style="color: rgb(255, 153, 0);"></span><code>&lt;ui:imageHyperlink
id="imagehyperlinktest1" imageURL="./myyahoo.gif"
action="#{HyperlinkBean.getRequiredHelp}" /&gt;</code></span><span
 style="color: rgb(0, 0, 0);"><br>
</span>
<h4 style="color: rgb(0, 0, 0);">Example
2: Create an IconHyperlink using the required
indicator icon<br>
</h4>
<span style="color: rgb(0, 0, 0);">
</span><code
 style="color: rgb(0, 0, 0);">&lt;ui:iconHyperlink
id="iconhyperlinktest1" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
icon="LABEL_REQUIRED_ICON"
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{HyperlinkBean.getRequiredHelp}" /&gt;
</code><span
 style="color: rgb(0, 0, 0);"><br>
</span>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that processes
        application actions from this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that receives action from this, and possibly other, components.
      ]]></description>
    </attribute>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the position of the image with respect to its context.
	Valid values are: bottom (the default); middle; top; left; right.
      ]]></description>
    </attribute>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Alternative text description used by screen reader tools
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>border</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the width of the img border in pixels.
        The default value for this attribute depends on the client browser
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        When specified, the width and height attributes tell the client browser to override the natural image or object size in favor of these values, specified in pixels. Some browsers might not support this behavior.
      ]]></description>
    </attribute>

    <attribute>
      <name>hspace</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the amount of white space in pixels to be inserted to the left and 
	right of the image. The default value is not specified but is 
	generally a small, non-zero size.
      ]]></description>
    </attribute>

    <attribute>
      <name>icon</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The identifier of the desired theme image.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>imageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute or relative URL to the image to be rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The resource at the specified URL is displayed in the frame that is 
        specified with the target attribute. Values such as "_blank" that are 
        valid for the target attribute of a HTML anchor element are also valid 
        for this attribute in this component
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text description of the hyperlink
      ]]></description>
    </attribute>

    <attribute>
      <name>textPosition</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies where the text will be placed relative to the image. The valid 
        values currently are "right" or "left". There will be support in the 
        future for "top" and "bottom".
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         The MIME content type of the resource specified by this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute, relative, or context relative (starting with "/") URL to the 
        resource selected by this hyperlink. If not specified, clicking this 
        hyperlink will submit the surrounding form.
      ]]></description>
    </attribute>

    <attribute>
      <name>urlLang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The language code of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>value</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The current value of this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

    <attribute>
      <name>vspace</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the amount of white space in pixels to be inserted above and below the 
	image. The default value is not specified but is generally a small, 
	non-zero size.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Image width override. When specified, the width and height attributes 
	tell user agents to override the natural image or object size in favor 
	of these values.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>label</name>
    <tag-class>com.sun.rave.web.ui.taglib.LabelTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<p>Use the <code>ui:label</code>
    tag to display a label for a component. To specify which component
    the label belongs to you can do one of the following:</p> 
<ul> 
<li>Place the component to be labeled in the body of
    <code>ui:label</code>; or </li>  
<li>Set the value of the <code>for</code> attribute of <code
    >ui:label</code> to the id of the component to be labeled.</li> 
</ul> 
<p>If the tags are adjacent on the page, it is simpler to place the
    component in the body of the <code>ui:label</code> tag. </p> 

<p>Note that many components in this library have <code>label</code> 
    and <code>labelLevel</code> attributes (and sometimes
    <code>labelOnTop</code>) which can be used instead of <code
    >ui:label</code>. The main reason
    to use <code>ui:label</code> is to specify the
    appearance of the label beyond what these attributes permit. 
</p>   

<h3>HTML Elements and Layout</h3>

<p> 
The <code>ui:label</code> tag results in a HTML <code>&lt;label&gt;</code>
    or <code>&lt;span&gt;</code> element. A <code>&lt;span&gt;</code>
    element is rendered if no labeled component is found. </p> 

<p> If the tag has a body, the body must consist of tags for
    JavaServer Faces components only. The components become children
    of the <code>Label</code> component, and are rendered after the
    <code>&lt;label&gt;</code> element.</p>  

<p>If the tag has a body but no <code>for</code> attribute, a
    <code>&lt;label&gt;</code> element is rendered. Its
    <code>for</code> attribute is set to the element ID of the first
    child component that is an <code>EditableValueHolder. </code> 

<h3>Theme Identifiers</h3>

<p>The Label renderer relies on the following theme classes:</p> 

<pre>
LblLev1Txt
LblLev2Txt 
LblLev3Txt 
LblRqdDiv
</pre>

<h3>Client Side Javascript Functions</h3>

<p>None.</p> 

<h3>Example</h3>

<h4>Example 1: <code>ui:label</code> with <code>for</code> attribute</h4>

<pre> 
      &lt;ui:label id="label1" text="Label 1:" for="field1" labelLevel="2"/&gt;
      &lt;ui:field id="field1" text="#{Bean.value}" type="text" trim="true"/&gt;
</pre> 

<h4>Example 2: <code>ui:label</code> with labeled component in tag body</h4>

<pre> 
      &lt;ui:label id="label2" text="Label 2:" labelLevel="2"/&gt;
          &lt;ui:field id="field2" text="#{Bean.value}" type="text" 
                    trim="true"/&gt;
      &lt;/ui:label&gt; 
</pre> 

<h4>Example 3: Using the label attribute instead of <code>ui:label</code></h4>

<pre> 
      &lt;ui:field id="field3" text="#{Bean.value}" type="text" 
                trim="true" label="Label 3:" labelLevel="2"/&gt;
</pre> 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use this attribute to specify the labeled component. The
      attribute is only relevant if the component to be labeled is not
      a child of the <code>ui:label</code> tag. The value of the
      attribute should be the id of the component relative to the
      label, not the DOM ID of the rendered HTML element. 
      ]]></description>
    </attribute>

    <attribute>
      <name>hideIndicators</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use the hideIndicators attribute to prevent display of the
      required and invalid icons with the label. When the required
      attribute on the component to be labeled is set to true, the
      required icon is displayed next to the label. If the user
      submits the page with an invalid value for the component, the
      invalid icon is displayed. This attribute is useful when the
      component has more than one label, and only one label should
      show the icons. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Style level for this label, where lower values typically specify
        progressively larger font sizes, and/or bolder font weights.
        Valid values are 1, 2, and 3. The default label level is 2.  Any label
        level outside this range will result in no label level being added.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Scripting code executed when a mouse click
      occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>requiredIndicator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the labeled component should be marked as
        required. It is only relevant if the labeled component is not
        a child of the label tag. Set this flag to ensure that the 
      required icon shows up the first time the page is rendered. 
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The label text to be displayed for this label. This attribute
      can be set to a literal string, to a value binding expression
      that corresponds to a property of a managed bean, or to a value
      binding expression that corresponds to a message from a resource
      bundle declared using <code>f:loadBundle</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>legend</name>
    <tag-class>com.sun.rave.web.ui.taglib.LegendTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the <code>ui:legend</code>
tag to display legend, typically at the top of a page.
<br>
The legend tag has one facet:<br>
&nbsp;&nbsp;&nbsp;<code>legendImage</code> - this allows the developer to place their own image and/or text in the legend.<br>
<h3>HTML Elements and Layout</h3>
A legend consists of an icon/image followed by explanatory text describing the icon/image.
<h3>Client Side Javascript Functions</h3>
none.
<h3>Examples</h3>
<b>Example 1: An example showing the default (indicates required field) legend:</b> <br>
<code>
&lt;ui:legend id="legend1" /&gt;
</code>
<br><br>
<b>Example 2: An example showing a custom icon, text, styles:</b> <br>
<pre>
<code>&lt;ui:legend id="legend2" text="Critical Alarms" 
&nbsp;&nbsp;&nbsp;&nbsp;style="position: absolute; left:100px; color:red; font-weight:bold"/&gt;
&nbsp;&nbsp;&lt;f:facet name="legendImage"&gt;
&nbsp;&nbsp;&nbsp;&nbsp;ui:image id="alarmimage" icon="ALARM_CRITICAL_SMALL" alt="Critical Alarm"/&gt;
&nbsp;&nbsp;&lt;/f:facet&gt;
&lt;/ui:legend&gt;
</code>
</pre>
<br>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>position</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the position of the legend. Valid values are: "right" (the default) and "left".
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The explanatory text that is displayed in the legend. If not specified, the required field legend text is displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>link</name>
    <tag-class>com.sun.rave.web.ui.taglib.LinkTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">Use the </span><code
 style="color: rgb(0, 0, 0);">ui:link</code><span
 style="color: rgb(0, 0, 0);"> tag to insert header
references to
other documents related to this HTML page. The <code>ui:link</code>
tag must be used inside the <code>ui:head</code>
tag, and can be used
multiple times for references to multiple documents. A common use for
the <code>ui:link</code>
tag is to link to an external stylesheet, but
it can also be used to provide information about the document's
relationship to other documents.&nbsp; There are a
number of useful defaults making it simpler to specify an HTML link
using this tag.
</span><br
 style="color: rgb(0, 0, 0);">
<br>
<strong></strong><br>
<h3>HTML Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">The
rendered HTML page contains </span><code
 style="color: rgb(0, 0, 0);">&lt;link&gt;</code><span
 style="color: rgb(0, 0, 0);"> element, along with any
attributes
specified through the <code>ui:link</code>
tag attributes.&nbsp; </span>
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">None.</span>
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.</span>
<h3 style="color: rgb(0, 0, 0);">Example</h3>
<b style="color: rgb(0, 0, 0);">Example
1: Create a context relative link to a stylesheet</b><br
 style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<code style="color: rgb(0, 0, 0);">&lt;ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;
&lt;ui:head id="blah"
title="hyperlink test page"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; <span
 style="font-weight: bold;">&lt;ui:link
url="/context-relative-path/tomyfile/stylesheet.css"&gt;</span><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:head&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&lt;/ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:html&gt;<br>
&lt;/ui:page&gt;</code>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>charset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the character encoding (charset) of the target URL. Default 
        value is "ISO-8859-1".
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>media</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the type of display device for which the referenced document 
        is designed.  The media attribute is useful for specifying different 
        stylesheets for print and viewing on a screen.  The default value is 
        "screen".
      ]]></description>
    </attribute>

    <attribute>
      <name>rel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Defines the relationship between the current document and the 
         targeted document. Default is "stylesheet". Other possible values 
         are described at w3.org.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specifies the MIME type of the target resource.  Default is: "text/css"
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         The absolute or relative target URL of the resource.
      ]]></description>
    </attribute>

    <attribute>
      <name>urlLang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines the ISO language code of the human language used in the target 
        URL file. For example, valid values might be en, fr, es.  
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>listbox</name>
    <tag-class>com.sun.rave.web.ui.taglib.ListboxTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      


    <h4>About this tag</h4>

    <p>This tag renders a listbox. Use the <code>selected</code>
    attribute to associate the component with a model object that
    represents the current choice, by setting the value to an EL
    expression that corresponds to a property of a
    managed bean.</p> 

    <h4>Configuring the listbox tag</h4>

    <p>Use the <code>multiple</code> attribute to specify whether the
    component accepts multiple selections. By default this is set to
    false. If multiple selections are allowed, the model object
    property must be either an array of primitives, an array of
    objects, or a (subclass of) <code>java.util.List</code>.</p> 

    <p>Use the <code>items</code> attribute to specify the options
    from which the web application user can choose. The value must be
    an EL expression that identifies an array, a
    <code>java.util.Collection</code> or a <code>java.util.Map</code>
    of <code>com.sun.rave.web.ui.Option</code>. </p> 

    <p>The first time the component is rendered, the options which
    correspond to the value of the <code>selected</code> model object
    property is marked as selected, using the <code>equals</code>
    method on the model object. </p> 

    <p>The number of list items simultaneously shown can be specified
    using the <code>rows</code> attribute, and the component will be
    rendered using a monospaced font if the <code>useMonospace</code>
    attribute is set to true.</p>

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet.</p>

    <h4>Facets</h4>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    </ul>

    <h4>Client-side JavaScript functions</h4>

    <ul>
    <li><code>listbox_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>: use
    this function to enable/disable the listbox. <code>&lt;id&gt;</code>
    must be the generated id of the component. Set
    <code>&lt;disabled&gt;</code> to true to disable the component, 
    false to enable it. </li>
    <li><code>listbox_changed(&lt;id&gt;)</code>: this 
    function is automatically invoked by the listbox's
    <code>onchange</code> handler. <code>&lt;id&gt;</code>
    must be the generated id of the component.</li>
    </ul>

    <h4>Examples</h4>
<pre>

    &lt;ui:listbox selected="#{flightSearch.leaveAirport}" 
                 items="#{dataBean.airports}" 
                 rows="6"
                 id="leaveAirport" 
                 toolTip="#{msgs.chooseAirport}"
                 label="#{msgs.chooseDepartureAirport)" /&gt;

    &lt;ui:listbox selected="#{flightSearch.leaveAirport}" 
                 items="#{dataBean.airports}" 
                 rows="6"
 	         id="leaveAirport" 
                 toolTip="#{msgs.chooseAirport}"
                 label="#{msgs.chooseDepartureAirport)" &gt;
        &lt;f:facet name="label"&gt;
            &lt;facet component goes here&gt;
        &lt;/f:facet&gt;
    &lt;/ui:listbox&gt;
</pre>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Associates this component with a converter. The role of the
      converter is to convert the values of the<code>Selection</code>s and the selected Object(s) to and from
      String representations. The value of this attribute must be an
      EL expression that is a reference to a<code>javax.faces.converter.Converter</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Specifies the options that the web application user can choose
         from. The value must be one of an array, Map or Collection
         whose members are all subclasses of<code>com.sun.rave.web.ui.model.Option</code>.  
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        This attribute, if set, causes a label to be
      rendered with the component (see also the labelLevel
      attribute). If specified, a HTML <code>label</code> element is
      generated  adjacent to the <code>select</code> element
      (equivalent to using the label component). This attribute is
    ignored if a <code>label</code> facet has been specified.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
      label attribute has been set. Valid values are 1 (largest), 2 and
      3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelOnTop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is true, the label is rendered above the
      component. If it is false, the label is rendered next to the
      component. The default is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>monospace</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      A property which indicates whether monospaced fonts should be
      used. 
      ]]></description>
    </attribute>

    <attribute>
      <name>multiple</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the application user may make select
	more than one option from the listbox . 
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The number of items to display. The default value is 12. 
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>Use this attribute to bind the
      component to a model object. The value of this attribute must be
      an EL expression. </p><p>If the listbox allows multiple selections (see the <code>multiple</code> attribute), then the EL expression must
      evaluate to one of the following types:</p><ul><li><code>java.lang.Object[]</code></li><li>An array of primitives</li><li><code>java.util.List</code>, or a subclass thereof</li></ul><p>Note that if you use a <code>java.util.List</code> to
         represent the value, you must specify a converter for the
	 type of the List members unless they are Strings. For any
	 other type, even if you use a default convert, you must
	 configure it explicitly. For arrays, the component can locate
	 the default converters. </p><p>If the listbox allows single selections, then the EL
      expression must be a subclass of to a java.lang.Object.</p><p>If using a custom model class and custom converter, note that
      the model class must ovverride the equals method, as that is 
      used to determine which objects should be marked as selected.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>separators</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>If you use an OptionGroup to group
      several options together, the component by default uses
      separators between the groups. To turn off the automatic
      separators, set this attribute to false.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Sets the tooltip for the component. This will be
      renderered as the HTML title attribute. 
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Use the visible attribute to indicate whether the component should be 
    viewable by the user in the rendered HTML page.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>markup</name>
    <tag-class>com.sun.rave.web.ui.taglib.MarkupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<p
 style="color: rgb(0, 0, 0);"><span
 style="text-decoration: line-through;"></span>Use
the <code>ui:markup </code>tag
to insert any type of XML markup
in the rendered HTML page. The <code>ui:markup</code>
tag allows you to insert HTML
elements into the JSP page where HTML is not permitted inside a JSF
tag.&nbsp; <br>
</p>
<h3 style="color: rgb(0, 0, 0);">Configuring
the markup tag <br>
</h3>
<p style="color: rgb(0, 0, 0);">Use
the <code>tag</code>
attribute to specify the type of
HTML element to insert.&nbsp; For instance, to insert a <code>&lt;p&gt;</code>
tag, set the attribute to <code>tag="p"</code>
in the <code>ui:markup</code>
tag.&nbsp; Note that you do not
include the angle brackets.</p>
<p style="color: rgb(0, 0, 0);">If
the HTML element you are
inserting is a singleton element, you must specify the <code>singleton</code>
attribute.&nbsp; The singleton attribute causes the trailing<code>
/&gt;</code>
to be generated in the rendered HTML. For example, the&nbsp; <code>&lt;br&gt;</code>
element is a singleton element, which must be rendered as <code>&lt;br
/&gt; </code>to be XHTML
compliant.</p>
<p style="color: rgb(0, 0, 0);">If
you want to specify
additional HTML attributes for the element you are inserting, use the <code>extraAttributes</code>
attribute. <br>
</p>
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">The
rendered HTML page includes
the HTML element that was specified in the </span><code
 style="color: rgb(0, 0, 0);">ui:markup</code><span
 style="color: rgb(0, 0, 0);"> tag's </span><code
 style="color: rgb(0, 0, 0);">tag</code><span
 style="color: rgb(0, 0, 0);"> attribute, along with
any HTML
attributes that were included in the <code>extraAttributes</code>
attribute.<br>
</span>
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers<br>
</h3>
<p style="color: rgb(0, 0, 0);">None.</p>
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript
Functions&nbsp;</h3>
<span style="color: rgb(0, 0, 0);">None.</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Examples</h3>
<span style="color: rgb(0, 0, 0);"></span>
<h4 style="color: rgb(0, 0, 0);">Example
1:&nbsp; Insert a
singleton element <br>
</h4>
<pre style="color: rgb(0, 0, 0);"><code> &lt;ui:markup tag="br" singleton="true" /&gt;</code><code><br></code></pre>
<p style="color: rgb(0, 0, 0);">This
generates <code>&lt;br
/&gt;</code>.</p>
<code style="color: rgb(0, 0, 0);"></code>
<h4 style="color: rgb(0, 0, 0);">Example
2: Insert a <code>&lt;div&gt;</code>
element with a style attribute <br>
</h4>
<code style="color: rgb(0, 0, 0);"></code><code
 style="color: rgb(0, 0, 0);">&nbsp;&nbsp;&nbsp;
&lt;ui:markup
tag="div"
style="color:blue" /&gt; <br>
</code>
<p style="color: rgb(0, 0, 0);">This
generates <code>&lt;div
style="color:blue" &gt;</code></p>
<code style="color: rgb(0, 0, 0);"></code>
<h4 style="color: rgb(0, 0, 0);">Example
3: Insert a <code>&lt;h3&gt;</code>
with HTML attributes<br>
</h4>
<pre style="color: rgb(0, 0, 0);"><code>&nbsp; &nbsp; </code><code>&lt;ui:markup tag="h3" extraAttributes="onclick='alert(&amp;quot;foobar&amp;quot;);'" &gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText text="Example" /&gt;<br>&nbsp;&nbsp;&nbsp; &lt;/ui:markup&gt;</code></pre>
<code style="color: rgb(0, 0, 0);"></code><span
 style="color: rgb(0, 0, 0);">This generates a
level 3 head titled Example that
will display the alert with "foobar" in it when clicked.</span>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>extraAttributes</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Add the rest of the attribute name="value" type pairs inside this 
        attribute.  The inserted attributes will need to be escaped.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>singleton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that tag is a singleton tag and that it should end with
        a trailing /
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tag</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Name of the HTML element to render.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>message</name>
    <tag-class>com.sun.rave.web.ui.taglib.MessageTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the <code>ui:message</code> tag to display message associated with a component.<br>
<h3>HTML Elements and Layout</h3>
A message consists of a summary and a detailed text. <br>
<h3>Client Side Javascript Functions</h3>
none.<br>
<h3>Examples</h3>
<b>Example 1: An example showing how to display validation errors:</b> <br>
<code><br>
&lt;ui:staticText text="Validator checks that the value is between 0-10 inclusive. /&gt;<br>
&lt;ui:message for="form1:textTest1"/&gt;<br>
<br>
&lt;ui:field id="textTest1" label="Enter a number:" 
text="#{FieldTest.number}" validator="#{FieldTest.checkNumber}"/&gt;<br>
</code>
<br>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>for</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Identifier of the component this message is associated with.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>showDetail</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag to determine whether to show the detail message. 
      ]]></description>
    </attribute>

    <attribute>
      <name>showSummary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag to determine whether to show the summary message.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>messageGroup</name>
    <tag-class>com.sun.rave.web.ui.taglib.MessageGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the <code>ui:messageGroup</code> tag to display a list of messages that are not (necessarily) associated with any single component.<br>
<h3>HTML Elements and Layout</h3>
A message group consists of a list of messages. <br>
<h3>Client Side Javascript Functions</h3>
none.<br>
<h3>Examples</h3>
<b>Example 1: An example showing how to show a list of global errors at the top of the page:</b> <br>
<code><br>
&lt;ui:messageGroup showGlobalOnly="true"/&gt;<br>
<br>
&lt;ui:staticText text="Validator checks that the value is between 0-10 inclusive. /&gt;<br>
&lt;ui:message for="form1:textTest1"/&gt;<br>
<br>
&lt;ui:field id="textTest1" label="Enter a number:" 
text="#{FieldTest.number}" validator="#{FieldTest.checkNumber}"/&gt;<br>
</code>
<br>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>showDetail</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag to determine whether to show the detail message. 
      ]]></description>
    </attribute>

    <attribute>
      <name>showGlobalOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag to determine whether to show the global message. 
      ]]></description>
    </attribute>

    <attribute>
      <name>showSummary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag to determine whether to show the summary message.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>meta</name>
    <tag-class>com.sun.rave.web.ui.taglib.MetaTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">Use the </span><code
 style="color: rgb(0, 0, 0);">ui:meta</code><span
 style="color: rgb(0, 0, 0);"> tag to create an
HTML </span><code
 style="color: rgb(0, 0, 0);">&lt;meta&gt;</code><span
 style="color: rgb(0, 0, 0);"> element in the
rendered HTML page.
The </span><code
 style="color: rgb(0, 0, 0);">&lt;meta&gt;</code><span
 style="color: rgb(0, 0, 0);">
element
provides meta-information about your page, such as descriptions and
keywords for search engines and refresh rates.&nbsp; The </span><code
 style="color: rgb(0, 0, 0);">ui:meta</code><span
 style="color: rgb(0, 0, 0);">
tag must
be inside a </span><code
 style="color: rgb(0, 0, 0);"><a
 href="http://smpt.east/%7Esmorgan/lockhart/tlddoc/ui/head.html">ui:head</a></code><span
 style="color: rgb(0, 0, 0);">
tag.
</span><br
 style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">&nbsp;</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout
</h3>
<span
 style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
 style="color: rgb(0, 0, 0);">The rendered HTML
page
contains an
HTML </span><code
 style="color: rgb(0, 0, 0);">&lt;meta&gt;</code><span
 style="color: rgb(0, 0, 0);"> tag and its
associated attributes.</span>
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">None.</span><br>
<h3>Client Side Javascript
Functions</h3>
None. <span style="color: rgb(255, 153, 0);"></span>
<h3>Example</h3>
<b>Example 1: Create a Meta tag<br>
<br>
<span style="color: rgb(255, 153, 0);"></span></b>
<div style="margin-left: 40px;"><code>....<br>
&lt;ui:head title="meta example" &gt;<br>
</code><code>&nbsp;&nbsp;&nbsp;
&lt;ui:meta httpEquiv="refresh"
content="5" /&gt;
<br>
&lt;/ui:head&gt;<br>
....</code><br>
</div>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>content</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The content attribute is used to specify the data to  associate with a 
        name attribute or httpEquiv attribute in the ui:meta tag. 
      ]]></description>
    </attribute>

    <attribute>
      <name>httpEquiv</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The httpEquiv attribute is used to specify a value for the http-equiv 
        attribute of an HTML Meta element. The http-equiv attribute specifies 
        HTTP properties that the web server can use in the HTTP response header.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The identifier that is assigned to a property in the meta element.  
        The content attribute provides the actual content of the property that 
        is identified by the name attribute.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>scheme</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines a format to be used to interpret the value of the content 
        attribute.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>orderableList</name>
    <tag-class>com.sun.rave.web.ui.taglib.OrderableListTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<p> Use the <code>ui:orderableList</code> tag to create a list with
    buttons that allow the items on the list to be reordered.</p> 

    <h3>HTML Elements and Layout</h3>

<p>The textField component renders an XHTML fragment consisting of a
<code>select</code>element representing a list, an <code>input
type="hidden"</code> element which represents the current order of the
list items, two or four <code>input type="submit"</code> elements for the
buttons, and a <code>label</code> element for the label. The buttons are
organized using a <code>table</code>, and the whole component is laid
out using <code>div</code>s.  </p>

    <h3>Configuring the <code>ui:orderableList</code> Tag</h3>


    <p>Use the <code>list</code> attribute to associate the component
    with a set of orderable items. The value of the list attribute
    must be a JavaServer Faces EL expression that evaluates to an
    array of Objects or to a <code>java.util.List</code>.</p>

    <p>To allow users to select more than one item to move at a time, 
    set <code>multiple</code> to true. To display buttons which moves
    the selected items to the top and bottom of the list, set 
    <code>moveTopBottom</code> to true.</code> 

    <p>To specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet. To place
    the label above the component, set <code>labelOnTop</code> to
    true.</p> 

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the value of this component when it is
    marked as readonly. The default is a
    <code>ui:staticText</code>. </li>
     <li><code>moveUpButton</code>: use this facet to specify a custom 
    component for the button that moves items up one step.</li>
     <li><code>moveDownButton</code>: use this facet to specify a custom 
    component for the button that moves items down one step.</li>
     <li><code>moveTopButton</code>: use this facet to specify a custom 
    component for the button that moves items to the top.</li>
     <li><code>moveBottomButton</code>: use this facet to specify a custom 
    component for the button that moves items to the bottom.</li>
    </ul>

    <h3>Client-side JavaScript functions</h3>


    <p>The functions below must be invoked on the JavaScript object
    that corresponds to the orderableList. The name of this object is
    <code>OrderableList_</code><em>id</em> where <em>id</em> is the
    DOM ID of the OrderableList component (the id of the outermost
    <code>div</code> with the colons replaced by underscores,
    e.g. <code>OrderableList_form_taskOrder</code>.</p> 
 </p>
    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code><em>object</em>.updateValue()</code>
    </td>
    <td style="vertical-align: top">
    Use this method to update the hidden field which represents the
    component value in any JavaScript function that changes the order
    of the items on the list. 
    </td>
    </tr>
    <tr>
    <td style="vertical-align">
    <code><em>object</em>.moveUp()</code>
    </td>
    <td style="vertical-align: top">
    Moves the selected items up one step and updates the component
    value. 
    </td>
    </tr>
    <tr>
    <td style="vertical-align">
    <code><em>object</em>.moveDown()</code>
    </td>
    <td style="vertical-align: top">
    Moves the selected items down one step and updates the component
    value. 
    </td>
    </tr>
    <tr>
    <td style="vertical-align">
    <code><em>object</em>.moveTop()</code>
    </td>
    <td style="vertical-align: top">
    Moves the selected items to the top of the list and updates the
    component value. 
    </td>
    </tr>
    <tr>
    <td style="vertical-align">
    <code><em>object</em>.moveBottom()</code>
    </td>
    <td style="vertical-align: top">
    Moves the selected items to the bottom of the list and updates the
    component value. 
    </td>
    </tr>

    <tr>
    <td style="vertical-align">
    <code><em>object</em>.updateButtons()</code>
    </td>
    <td style="vertical-align: top">
    Use this method to update which buttons are selected in any
    JavaScript method that programmatically selects elements on the
    list. 
    </td>
    </tr>
  </tbody>
</table>

    <h3>Example</h3>
<h4>Example 1: OrderableList with Move to Top and Move to Bottom
    Buttons</h4> 

<p>This example uses a backing bean called
    <code>AutomatedTasks</code> with a property <code>taskList</code>
    which represents a list of tasks.  Users are allowed to 
    select more than one task to move. Buttons to move the items to
    the top and to the bottom are shown in addition to the default
    move up and move down buttons. </p> 

<pre>
    &lt;ui:orderableList id="taskOrder"
                      list="#{AutomatedTasks.taskList}"
                      label="Task execution order: "
                      multiple="true"
                      moveTopBottom="true"/&gt;

</pre>

<h4>Example 1: OrderableList with Move to Top and Move to Bottom
    Buttons</h4> 

<p>This example uses a backing bean called <code>Volunteers</code> and
    a property <code>rotationOrder</code> which is an ordered list of
    objects representing individual persons. A converter is used to
    derive a string representation of the person. Only the default 
    move up and move down buttons are shown. </p> 

<pre>
    &lt;ui:orderableList id="callUpOrder"
                      list="#{Volunteers.rotationOrder}"
                      label="Call Up Order:" &gt;
        &lt;f:converter converterId="org.example.Person"/&gt;
    &lt;ui:orderableList&gt;
</pre>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The binding attribute is used to configure the
      component through Java code. This approach is intended for
      advanced uses, when the tag attributes cannot provide the
      desired output. The value of the binding attribute must be a
      JavaServer Faces EL expression that resolves to a backing bean,
      or to a backing bean property of type 
      <code>com.sun.rave.web.ui.component.OrderableList</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The converter attribute is used to specify a method to translate
      native property values to String and back for this
      component. The converter attribute value must be one of the
      following: 
      <ul>
	<li>a JavaServer Faces EL expression that resolves to a
	  backing bean or bean property that implements the
	  <code>javax.faces.converter.Converter</code> interface; or</li> 
	<li>the ID of a registered converter (a String).</li> 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Flag indicating that activation of this component by the user is not currently permitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Flag indicating that event handling for this
      component should be handled immediately (in Apply Request Values
      phase) rather than waiting until Invoke Application phase. 
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If set, a label is rendered adjacent to the component with the
        value of this attribute as the label text. 
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated labels. Valid values
	are 1 (largest), 2 and 3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelOnTop</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is true, the label is rendered above the
      component. If it is false, the label is rendered next to the
      component. The default is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>list</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
         <p>
      The object that represents the list. It must be a JavaServer
      Faces EL expression that evaluates to an array of Objects or to
      a <code>java.util.List</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>moveTopBottom</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is true, the Move to Top and Move to Bottom
      buttons are shown. The default is false.
      ]]></description>
    </attribute>

    <attribute>
      <name>multiple</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the application user may make select
	more than one option from the listbox . 
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use the rendered attribute to indicate whether the HTML code for
      the component should be included in the rendered HTML page. If
      set to false, the rendered HTML page does not include the HTML
      for the component. If the component is not rendered, it is also
      not processed on any subsequent form submission. 
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The number of items to display. The default value is 6. 
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Position of this element in the tabbing order for the current
      document. The tabbing order determines the sequence in which
      elements receive focus when the tab key is pressed. The tabIndex
      value must be an integer between 0 and 32767.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The validator attribute is used to specify a method in a backing
bean to validate input to the component. The validator attribute value
must be a JavaServer Faces EL expression that resolves to a public
method with return type void. The method must take three parameters:
</p> 
<ul>
<li>a <code>javax.faces.context.FacesContext</code></li> 
<li>a <code>javax.faces.component.UIComponent</code> (the component
whose data is to be validated)</li>  
<li>a <code>java.lang.Object</code> containing the data to be
validated.</li>  
</ul> 
<p>The backing bean where the method is defined must implement
    <code>java.io.Serializable</code> or
    <code>javax.faces.component.StateHolder</code>.</p>  
<p>The method is invoked during the Process Validations Phase.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The <code>valueChangeListener</code> attribute is used to specify a
    method to handle an value-change event that is triggered when the
    user enters data in the input component. The value of the 
    attribute value must be a JavaServer Faces EL expression that
    resolves to a backing bean method. The method must take a single
    parameter of type <code>javax.faces.event.ValueChangeEvent</code>,
    and its return type must be void. The backing bean where the
    method is defined must implement <code>java.io.Serializable</code>
    or <code>javax.faces.component.StateHolder</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>page</name>
    <tag-class>com.sun.rave.web.ui.taglib.PageTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      


<span style="color: rgb(0, 0, 0);">Use the ui:page tag to indicate the
beginning of the part of the JSP page that is used by the Sun Java Web
UI Components. All the JSF components used in the page must be nested
within the ui:page tag. You must use the ui:html and ui:head tags
first, after the opening of the ui:page tag.&nbsp;&nbsp;Then you must use either
the ui:body tag or the ui:frameset tag.&nbsp;&nbsp;The ui:page tag takes care of 
generating the preamble for the HTML page.</span><br>
<h3 style="color: rgb(0, 0, 0);">HTML Elements and Layout</h3>

<p style="color: rgb(0, 0, 0);">If the application is used in
a servlet environment, the rendered HTML will include <code>&lt;?xml&gt;</code>
and <code>&lt;!DOCTYPE&gt;</code> headers. The content of the headers
is determined by the <code>ui:page</code>
attributes that you
specify.&nbsp; Use the frameset and xhtml attributes to create the <code>&lt;!DOCTYPE&gt;</code>
header that you want.&nbsp; For example, if you set frameset and xhtml
attributes to true, the rendered <code>&lt;!DOCTYPE&gt;</code> header
will indicate XHTML Frameset, as in the following example:<br>
</p>
<pre style="color: rgb(0, 0, 0);">&lt;!DOCTYPE HTML <br> PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"<br> "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;<br><br></pre>
<span style="color: rgb(0, 0, 0);">If you set both attributes to
false,&nbsp; the rendered <code>&lt;!DOCTYPE&gt;</code>
header will indicate HTML Transitional,&nbsp; as in the following
example:<br>
</span>
<pre style="color: rgb(0, 0, 0);" wrap="">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</pre>
<p style="color: rgb(0, 0, 0);">You can also use the frameset and xhtml
attributes
to specify&nbsp; XHTML
Transitional and HTML Frameset.<br>
</p>
<h3 style="color: rgb(0, 0, 0);">Client Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.
</span><br style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Example</h3>
<b style="color: rgb(0, 0, 0);">Example 1: Using the page tag
appropriately in a JSP page:<br>
<br>
</b><code style="color: rgb(0, 0, 0);">&lt;?xml version="1.0"
encoding="UTF-8"?&gt;<br>
&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
xmlns:h="http://java.sun.com/jsf/html"
xmlns:jsp="http://java.sun.com/JSP/Page"
xmlns:ui="http://www.sun.com/web/ui"&gt;<br>
&lt;jsp:directive.page contentType="text/html;charset=ISO-8859-1"
pageEncoding="UTF-8"/&gt;<br>
&lt;f:view&gt;<br>
&nbsp; <span style="font-weight: bold;">&lt;ui:page&gt;</span><br>
&nbsp;&nbsp;&nbsp; &lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; <span style="font-weight: bold;">......<br>
&nbsp;&nbsp;&nbsp; &lt;</span>/ui:html&gt;<br>
&nbsp; &lt;/ui:page&gt;<br>
&lt;/f:view&gt;<br>
</code><b style="color: rgb(0, 0, 0);"><span
style="font-family: monospace;"></span></b>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>frame</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Use the frame attribute to
indicate whether the page should render frames. If this attribute is
true, the rendered HTML page includes a </span><code
style="color: rgb(0, 0, 0);">&lt;frameset&gt;</code><span
style="color: rgb(0, 0, 0);"> element. If false, the rendered page
uses a </span><code style="color: rgb(0, 0, 0);">&lt;body&gt;</code><span
style="color: rgb(0, 0, 0);"> tag.&nbsp; This attribute also
influences the rendering of the <code>&lt;!DOCTYPE&gt;</code>
declaration. If frameset is true, the <code>&lt;!DOCTYPE&gt;</code> will
be one of the following,
depending on the setting of xhtml attribute.<br><pre style="color: rgb(0, 0, 0);">&lt;!DOCTYPE html <br> PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"<br> "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;<br><br>&lt;!DOCTYPE html <br> PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN"<br> "http://www.w3.org/TR/html4/DTD/frameset.dtd"&gt;<br></pre>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>xhtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        XHTML transitional page or HTML transitional page. This attribute influences
        the rendering of the <code>&lt;!DOCTYPE&gt;</code> declaration. If xhtml
        is true, the <code>&lt;!DOCTYPE&gt;</code> will be one of the following,
        depending on the setting of frameset attribute.<br><pre style="color: rgb(0, 0, 0);">&lt;!DOCTYPE html <br> PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"<br> "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"</pre><pre style="color: rgb(0, 0, 0);">&lt;!DOCTYPE html <br> PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"<br> "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</pre>
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>pageAlert</name>
    <tag-class>com.sun.rave.web.ui.taglib.PageAlertTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="color: rgb(0, 0, 0);">Use
the <code>ui:pageAlert</code>
tag to display a full page alert. A page alert differs from the
inline alert (see </span><a
 href="file:///Users/smorgan/syncdocs/ui/alert.html"
 style="color: rgb(0, 0, 0);">ui:alert</a><span
 style="color: rgb(0, 0, 0);">) in that the content of
the page
that invokes the pageAlert is replaced by the alert page. An inline
alert is a smaller alert that is inserted in the page that invokes the
alert. </span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">A
page alert consists of:
</span>
<ul style="color: rgb(0, 0, 0);">
  <li><span
 style="text-decoration: line-through; font-weight: bold;"></span>an
icon depicting the type of alert - question, information,
warning, or error</li>
  <li>a page title next to the icon</li>
  <li>a summary message</li>
  <li>a detailed message</li>
  <li>one input component - (one text
field, one text area, one checkbox,
one set of radio buttons, one drop-down menu, or one scrolling list)</li>
  <li>a page separator line<br>
  </li>
  <li>a set of page level buttons</li>
</ul>
<p style="color: rgb(0, 0, 0);"><br>
<span style="color: rgb(0, 0, 0);">The input field and the set of
buttons are optional items, which must be specified with facets. </span><br>
</p>
<p style="color: rgb(0, 0, 0);">The
following diagram shows
the locations of each of the page alert areas, and the facets that are
supported for specified areas.</p>
<table style="color: rgb(0, 0, 0);"
 border="1" width="100%">
  <tbody>
    <tr>
      <td width="100%">Alert
Icon (or optional <code>pageAlertImage</code> facet), Page Title Text (or 
optional <code>pageAlertTitle</code> facet)</td>
    </tr>
    <tr>
      <td colspan="2" width="100%">Alert
summary<span
 style="text-decoration: line-through;"></span></td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Detailed
message<br>
      </td>
    </tr>
    <tr>
      <td colspan="2" width="100%">Optional
      <code>pageAlertInput</code>
facet<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">Page separator (or optional
      <code>pageAlertSeparator</code>
facet)<br>
      </td>
    </tr>
    <tr>
      <td colspan="2" align="right"
 width="100%">Optional <code>pageAlertButtons </code>facet</td>
    </tr>
  </tbody>
</table>
<p style="color: rgb(0, 0, 0);">&nbsp;</p>
<h3 style="color: rgb(0, 0, 0);">Facets</h3>
<span style="color: rgb(0, 0, 0);">The
<code>ui:pageAlert</code>
tag supports the following facets.</span><br>
<br>
<table style="text-align: left; width: 100%;"
 border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><code
 style="color: rgb(0, 0, 0);">pageAlertTitle</code></td>
      <td
 style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
a custom component to use to display the title of the alert.<span
 style="color: rgb(255, 153, 0);"></span><br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code
 style="color: rgb(0, 0, 0);">pageAlertInput</code></td>
      <td
 style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
a component to use in the body of the full page alert. This facet can be
used to display an input component
 for the user to perform tasks related
to the alert, for example.<br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;"><code
 style="color: rgb(0, 0, 0);">pageAlertButtons</code></td>
      <td
 style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
components to use for the buttons at the bottom of the alert page. This
facet can be used to display a back button, for example. If you want to specify more than
one button, you might find it helpful to enclose the button components
in a <code>ui:panelGroup</code> component.<br>
      </td>
    </tr>
    <tr>
      <td
 style="vertical-align: top; color: rgb(0, 0, 0);"><code>pageAlertSeparator<br>
      </code></td>
      <td
 style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
a component to use for the page separator that is displayed above the
page buttons. The component included in this facet replaces the default
page separator.<br>
      </td>
    </tr>
    <tr>
      <td
 style="vertical-align: top; color: rgb(0, 0, 0);"><code>pageAlertImage<br>
      </code></td>
      <td
 style="vertical-align: top; color: rgb(0, 0, 0);">Specifies
a component to use to display the alert icon. The component included
in this facet replaces the default icon.<br>
      </td>
    </tr>
  </tbody>
</table>
<br>
<h3>Client Side Javascript
Functions</h3>
None. <span style="color: rgb(255, 153, 0);"></span><br>
<h3>Examples</h3>
<h4><span
 style="color: rgb(0, 0, 0);">Example 1:</span>&nbsp;
Simple example, with alert message and a back button.</h4>
<code></code>
<pre>	&lt;ui:pageAlert id="pagealert" title="Error!" type="error"<br>            summary="Server Not Responding." <br>            detail="The server jurassic is not responding. Verify that the power cable is connected."&gt;<br>	  &lt;f:facet name="pageAlertButtons"&gt;<br>              &lt;ui:button text="Back" action="indexPage" /&gt;<br>	&lt;/ui:pageAlert&gt;</pre>
<h4><span style="color: rgb(255, 153, 0);"></span><span
 style="color: rgb(0, 0, 0);">Example 2:</span>
With
input field and one page button.</h4><code></code>
<pre>	&lt;ui:pageAlert id="pagealert" title="Password Expired!" type="warning"<br>            summary="Password expired." <br>            detail="Your password has expired. Enter a new password"&gt;<br>	  &lt;f:facet name="pageAlertButtons"&gt;<br>              &lt;ui:button text="Go to Login Page" action="success" /&gt; <br>          &lt;/f:facet&gt;<br>          &lt;f:facet name="pageAlertInput"&gt;<br>            &lt;ui:panelGroup id="pageAlertStuff"&gt;<br>              &lt;ui:label text="New Password:" for="passwordField"/&gt;<br>              &lt;ui:field id="passwordField" type="password"/&gt;<br>            &lt;/ui:panelGroup&gt;<br>          &lt;/f:facet&gt; <br>	&lt;/ui:pageAlert&gt;<br></pre>
    ]]></description>

    <attribute>
      <name>alt</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Alternative text description used by screen reader tools
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The binding attribute is used to configure the
      component through Java code. This approach is intended for
      advanced uses, when the tag attributes cannot provide the
      desired output. The value of the binding attribute must be a
      JavaServer Faces EL expression that resolves to a backing bean,
      or to a backing bean property of type 
      <code>com.sun.rave.web.ui.component.PageAlert</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>detail</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Optional detailed message text for the alert. This message might include more information about the alert and instructions for what to do about the alert. 
      ]]></description>
    </attribute>

    <attribute>
      <name>escape</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the message text should be escaped so that it is 
        not interpreted by the browser.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>summary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Summary message text for the alert. This brief message is displayed under the page alert title.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text to display as the page title
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The type or category of alert. The type attribute can be set to one of the following:  "question", "information", "warning" or "error". The default type is error.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>pageSeparator</name>
    <tag-class>com.sun.rave.web.ui.taglib.PageSeparatorTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="color: rgb(0, 0, 0);"><span
 style="text-decoration: line-through;"></span>Use
the <code>ui:pageSeparator</code>
tag to create a horizontal line that separates items on the
page.&nbsp; The
tag can be used as a standalone tag to
insert a new horizontal line in a page,
or used within the facet of another tag to override a default page
separator.&nbsp; For example, the <code>ui:pageSeparator</code>
tag
can be used in the <a
 href="http://smpt.east/%7Esmorgan/lockhart/tlddoc/ui/pageAlert.html"><code>ui:pageAlert</code></a>
tag's <code>pageAlertSeparator</code>
facet. </span><br
 style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);"><br>
</span>
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">This
tag renders a horizontal
line inside</span><span
 style="text-decoration: line-through; font-weight: bold; color: rgb(0, 0, 0);"></span><span
 style="color: rgb(0, 0, 0);"> an
HTML table that will
size according to the size of the page.</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">TBD</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.
</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Example</h3>
<span style="color: rgb(0, 0, 0);"></span><b
 style="color: rgb(0, 0, 0);">Example
1: Using <span
 style="text-decoration: line-through;"></span>
a standalone
ui:pageSeparator tag<span
 style="text-decoration: line-through;"></span><br>
<br>
</b><code
 style="color: rgb(0, 0, 0);">&lt;?xml
version="1.0"
encoding="UTF-8"?&gt;<br>
&lt;jsp:root version="1.2" xmlns:f="http://java.sun.com/jsf/core"
xmlns:h="http://java.sun.com/jsf/html"
xmlns:jsp="http://java.sun.com/JSP/Page"
xmlns:ui="http://www.sun.com/web/ui"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;jsp:directive.page
contentType="text/html;charset=ISO-8859-1"
pageEncoding="UTF-8"/&gt;&lt;f:view&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:page frame="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:head title="blah" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:body&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &lt;ui:pageSeparator id="mypageseparator"
/&gt;<br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;
&lt;/ui:body&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:html&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;/ui:page&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:view&gt;<br>
&lt;/jsp:root&gt;<br>
<br>
<br>
</code><b
 style="color: rgb(0, 0, 0);"></b>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelGroup</name>
    <tag-class>com.sun.rave.web.ui.taglib.PanelGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
    <p> Use the <code>ui:panelGroup</code> tag to display a group of components
	that are separated by a common separator.  This tag is often useful for
	providing a consistently formatted layout of a group of components.</p>
    <h3>HTML Elements and Layout</h3>
    <p>	By default the PanelGroup component is rendered with a
	<code><span></code> element surrounding the group of child
	components.  You can change the rendered element to a
	<code><div></code> by setting the <code>block</code> attribute to
	<code>true</code>.  When a <code><div></code> is used, the
	panel group is displayed on a new line.  Note that if you use a
	component in the <code>ui:panelGroup</code> tag that renders a block
	element such as a <code><p></code>, that component is always
	displayed on its own line.  The behavior of child block elements is
	independent of the setting of the block attribute.</p>

    <p> PanelGroup is a NamingContainer.</p>

    <h3>Theme Identifiers</h3>

    <p> Not Applicable </p>

    <h3>Client Side Javascript Functions</h3>

    <p> Not Applicable </p>

    <h3>Examples:</h3>

    <h4>Example 1: Buttons in a panelGroup that uses default separator</h4>

    <p>	The default separator is a return character.</p>

    <code>
	<ui:panelGroup id="myPanelGroup1"><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button1" text="Button 1" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button2" text="Button 2" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button3" text="Button 3" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button4" text="Button 4" /><br />
	</ui:panelGroup>
    </code>

    <h4>Example 2: Specifying a separator with the <code>separator</code>
	attribute</h4>

    <p>	This example uses the separator attribute to specify a separator
	consisting of a pipe character surrounded by spaces.</p>

    <code>
	<ui:panelGroup id="myPanelGroup2" separator=" | "><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button1" text="Button 1" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button2" text="Button 2" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button3" text="Button 3" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button4" text="Button 4" /><br />
	</ui:panelGroup>
    </code>

    <h4>Example 3: Specifying a separator with the <code>separator</code>
	facet</h4>

    <p>	This example shows how to use the <code>separator</code> facet and
	the <code>block</code> attribute.</p>

    <code>
	<ui:panelGroup id="myPanelGroup3" block="true"><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <facet name="separator"><br />
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
		<h:outputText value="==" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    </f:facet><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button1" text="Button 1" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button2" text="Button 2" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button3" text="Button 3" /><br />
	    &nbsp;&nbsp;&nbsp;&nbsp;
	    <ui:button id="button4" text="Button 4" /><br />
	</ui:panelGroup>
    </code>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>block</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        By default, the panelGroup component is rendered on the same line as the component
        that comes before it and the component that follows, in a flow layout.  If the block attribute
        is set to true, the panelGroup component is rendered on its own line. The components
        before it and after it are on different lines. The block attribute has no effect on the 
        panelGroup component's children.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>separator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The String of characters that should be inserted between each UIComponent that is 
      a child of this component. If this attribute is not specified, then a newline will be
      inserted between each component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>panelLayout</name>
    <tag-class>com.sun.rave.web.ui.taglib.PanelLayoutTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
    <p> Use the <code>ui:panelLayout</code> tag to display a group of components
	that are related, in either flow layout, or using absolute positioning.  
        This tag is often useful for
	providing a consistently formatted layout of a group of components.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>panelLayout</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use absolute grid positioning, or flow layout
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>passwordField</name>
    <tag-class>com.sun.rave.web.ui.taglib.PasswordFieldTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<p> Use the <code>ui:passwordField</code>  tag to create an input
    field where the characters entered are echoed back with a
    replacement character, so as to mask the input. </p> 

    <h3>HTML Elements and Layout</h3>

<p>The textField component renders an XHTML <code>&lt;input
    type="password"&gt;</code> element.</p>  

    <h3>Configuring the <code>ui:passwordField</code> Tag</h3>

<p>Use the <code>password</code> attribute to associate
the component with a model object that represents the current value,
by setting the attribute's value to an EL expression that corresponds
    to a property of a managed bean.</p>

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet. </p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the value of this component when it is
    marked as readonly. The default is a <code>ui:staticText</code>. </li>

    </ul>

    <h3>Theme Identifiers</h3> 

    <p>The input element has a style class "TxtFld", or "TxtFldDis"
    when the field is disabled. If a label attribute is specified, the
    label element's class attribute is set to "LblLvl1Txt", "LblLvl2Txt" or
    "LblLvl3Txt" depending on the label level.</p> 


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the PasswordField component. </p>

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr> <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the input element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>

    <h3>Example</h3>

<p>This example uses a backing bean <code>User</code> with a
property <code>password</code>. The tag generates a label followed by
text input field. The required attribute is set to true, which causes
an icon to be rendered next to the label to indicate that the
application user must enter a value in the text field. The icon, label
  and input elements are enclosed by a span.</p>
<pre>
     &lt;ui:passwordField id="password" 
                       password="#{User.password}" 
                       label="Password:" 
                       required="true"/&gt;
</pre>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The binding attribute is used to configure the
      component through Java code. This approach is intended for
      advanced uses, when the tag attributes cannot provide the
      desired output. The value of the binding attribute must be a
      JavaServer Faces EL expression that resolves to a backing bean,
      or to a backing bean property of type 
      <code>com.sun.rave.web.ui.component.PasswordField</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Number of character columns used to render this field. 
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The converter attribute is used to specify a method to translate
      native property values to String and back for this
      component. The converter attribute value must be one of the
      following: 
      <ul>
	<li>a JavaServer Faces EL expression that resolves to a
	  backing bean or bean property that implements the
	  <code>javax.faces.converter.Converter</code> interface; or</li> 
	<li>the ID of a registered converter (a String).</li> 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Flag indicating that activation of this component by the user is not currently permitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Flag indicating that event handling for this component should be handled immediately (in Apply Request Values phase) rather than waiting until Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If set, a label is rendered adjacent to the component with the
        value of this attribute as the label text. 
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
        label attribute has been set. Valid values are 1 (largest), 2 and
        3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxLength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The maximum number of characters that can be entered for this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when some text in this
    component value is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>password</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Literal value to be rendered in this input field.  If this property is specified by a value binding
        expression, the corresponding value will be updated if validation succeeds.
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that modification of this component by the
        user is not currently permitted, but that it will be
        included when the form is submitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use the rendered attribute to indicate whether the HTML code for
      the component should be included in the rendered HTML page. If
      set to false, the rendered HTML page does not include the HTML
      for the component. If the component is not rendered, it is also
      not processed on any subsequent form submission. 
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Position of this element in the tabbing order for the current
      document. The tabbing order determines the sequence in which
      elements receive focus when the tab key is pressed. The tabIndex
      value must be an integer between 0 and 32767.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>trim</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that any leading and trailing blanks will be
        trimmed prior to conversion to the destination data type.
        Default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The validator attribute is used to specify a method in a backing
bean to validate input to the component. The validator attribute value
must be a JavaServer Faces EL expression that resolves to a public
method with return type void. The method must take three parameters:
</p> 
<ul>
<li>a <code>javax.faces.context.FacesContext</code></li> 
<li>a <code>javax.faces.component.UIComponent</code> (the component
whose data is to be validated)</li>  
<li>a <code>java.lang.Object</code> containing the data to be
validated.</li>  
</ul> 
<p>The backing bean where the method is defined must implement
    <code>java.io.Serializable</code> or
    <code>javax.faces.component.StateHolder</code>.</p>  
<p>The method is invoked during the Process Validations Phase.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The <code>valueChangeListener</code> attribute is used to specify a
    method to handle an value-change event that is triggered when the
    user enters data in the input component. The value of the 
    attribute value must be a JavaServer Faces EL expression that
    resolves to a backing bean method. The method must take a single
    parameter of type <code>javax.faces.event.ValueChangeEvent</code>,
    and its return type must be void. The backing bean where the
    method is defined must implement <code>java.io.Serializable</code>
    or <code>javax.faces.component.StateHolder</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>property</name>
    <tag-class>com.sun.rave.web.ui.taglib.PropertyTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      


<h3>HTML Elements and Layout</h3>

<p> The <code>Property</code> component was written to be used within the
    <code>PropertySheetSection</code> component, which is in turn used within
    the context of a <code>PropertySheet</code> component.  The
    <code>Property</code> component allows you to encapsulate a logic
    "property" and help you lay it out on the page.  A "property" has a number
    of configuration options, including: the property content; an optional
    label; the ability to stretch the property to include the label area (in
    addition to the content area of the "property"; the ability to mark a
    property required; and the ability to associate help text with the property
    to inform your end user how to interact with the property.</p>

<p> Help text can be provided for each property by supplying the
    <code>helpText</code> attribute.  This attribute may be a literal String
    or a <code>ValueBinding</code> expression.  The help text will appear
    below the content of the "property".  Optionally, the helpText may also
    be provided as a facet named "helpText".  This allows advanced users to
    have more control over the types of content provided in the helpText
    area.</p>

<p> The label may be provided via the <code>label</code> attribute.  The label
    will be rendered to the left of the content area of the "property".  The
    label area will not exist if the <code>overlapLabel</code> attribute is set
    to true.  Optionally advanced users may provide a label facet named
    "label".  This allows developers to have more control over the content of
    the label area.</p>

<p> The <code>labelAlign</code> attribute can use used to specify "left" or
    "right" alignment of the label table cell.</p>

<p> Setting the <code>noWrap</code> attribute to true specifies that the label
    should not be wraped to a new line.</p>

<p> The <code>overlapLabel</code> attribute causes the content of the property
    to be stretched into the label area as well as the content area.  This may
    be useful for titles which should span the entire width, or other cases
    where you need the whole width of the <code>PropertySheet</code>.</p>

<h3>Client Side Javascript Functions</h3>

<p> None.</p>

<h3>Examples</h3>

<h4>Example 1</h4> 

<p>The label is specified via the label attribute. The components of
    the content area are specified as children of the
    <code>ui:property</code> tag.  </p> 

<pre> 
   &lt;ui:property id="prop1" label="Log file name: "&gt;           
       &lt;ui:textField id="logfile" required="true"/&gt;
       &lt;h:message id="logfile_error" for="logfile" showDetail="true"/&gt; 
   &lt;/ui:property&gt;
</pre>

<h4>Example 2</h4> 

<p>The components of the content area are specified as children of the
<code>ui:property</code> tag. The label is specified via a label
facet, to label the dropDown in the content area.  </p>

<pre>            
   &lt;ui:property id="prop2"&gt;    
       &lt;f:facet name="label"&gt;
           &lt;ui:label id="prop2label" 
                     text="Select update frequency"
                     for="unit"/&gt;
       &lt;/f:facet&gt;   
       &lt;ui:textField id="frequency" 
                     text="#{Logger.frequency.number}"
                     label="Every "/&gt;
       &lt;ui:dropDown id="unit" 
                    selected="#{Logger.frequency.unit}"  
                    items="#{Logger.frequency.units}"  
                    required="true"/&gt;
       &lt;h:message id="msg1"_msg4b" for="frequency" showDetail="true"/&gt; 
       &lt;h:message id="msg2" for="unit" showDetail="true"/&gt; 
   &lt;/ui:property&gt;
</pre> 

<h4>Example 3</h4> 

<p>The components of the content area are specified inside a
    PanelGroup child component. </p>
<pre> 
   &lt;ui:property id="prop3" label="Admin Server URI"&gt; 
       &lt;ui:panelGroup id="pg"&gt;
           &lt;ui:textField id="uri" text="#{Server.uri}" required="true"/&gt;
           &lt;h:message id="msg3" for="uri" showDetail="true"/&gt; 
       &lt;/ui:panelGroup&gt;                               
   &lt;/ui:property&gt;
</pre> 


<h4>Example 4</h4> 


<p>The components of the content area are specified inside a
    PanelGroup inside a facet.</p>           

<pre> 
   &lt;ui:property id="prop3" label="Admin Server URI"&gt; 
       &lt;f:facet name="content"&gt;
           &lt;ui:panelGroup id="pg"&gt;
               &lt;ui:textField id="uri" text="#{Server.uri}" required="true"/&gt;
               &lt;h:message id="msg3" for="uri" showDetail="true"/&gt; 
           &lt;/ui:panelGroup&gt;                               
       &lt;/f:facet&gt;                       
   &lt;/ui:property&gt;

</pre> 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>helpText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	  The help text will appear below the content of the "property".
	  Optionally, the helpText may also be provided as a facet named
	  "helpText".  This allows advanced users to have more control over
	  the types of content provided in the helpText area.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	Use this attribute to specify the text of the label of this
      property. The <code>for</code> attribute of the label will be
      the first input element in the content area of this component. 
      To label a different component, use the label facet instead.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelAlign</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	Specifies the label alignment for the label of this component.  The
	label itself may be added via the label property or the label facet.
	The value will typically be "left" or "right".
      ]]></description>
    </attribute>

    <attribute>
      <name>noWrap</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	Specifies if the label component should not wrap.  The label itself
	may be added via the label property or the label facet.
      ]]></description>
    </attribute>

    <attribute>
      <name>overlapLabel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	  This indicates whether the property should overlap into the label
	  area or not.  Default: false -- do not extend into the label area.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>propertySheet</name>
    <tag-class>com.sun.rave.web.ui.taglib.PropertySheetTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<h3>HTML Elements and Layout</h3>

<p> The <code>PropertySheet</code> component is a <code>NamingContainer</code>
    used to layout <code>PropertySheetSection</code> components on a page.
    Each <code>PropertySheetSection</code> may in turn have any number of
    <code>Property</code> components within it.  This allows you to easily
    format a page with a number of input or read-only fields.
    <code>PropertySheetSection</code>s allow you to group <code>Property</code>
    components together and provide a <code>label</code> for the set of
    enclosed <code>Property</code>s.</p>

<p> The <code>PropertySheet</code> allows each
    <code>PropertySheetSection</code> to have an optional "jump link" from the
    top of the <code>PropertySheet</code> to each
    <code>PropertySheetSection</code> within the <code>PropertySheet</code>.
    This is accomplished by supplying the attribute <code>jumpLinks</code> with
    a value of true.  If not specified, this attribute defaults to false.</p>

<h3>Client Side Javascript Functions</h3>

<p> None.</p>

<h3>Example:</h3>

<h4>Example 1: Create a simple <code>PropertySheet</code> which contains 2 <code>PropertySheetSection</code> components each containing 2 <code>Property</code> components:</h4>

<p>
    <code>
    <pre>
	&lt;ui:propertySheet id="propSheetExample1" jumpLinks="true"&gt;
	    &lt;ui:propertySheetSection id="firstSection" label="Search Criteria"&gt;
		&lt;ui:property id="Property1" label="Instance Name: " labelAlign="right" noWrap="true" overlapLabel="false"&gt;
		    &lt;ui:dropDown id="servers" required="true" items="#{BackingFileChoice.servers}" /&gt;
		    &lt;f:verbatim&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&lt;/f:verbatim&gt;
		    &lt;ui:label id="logFileLabel" labelLevel="2" text="Log File: " /&gt;
		    &lt;ui:dropDown id="logFile" items="#{BackingFileChoice.archivedLogFiles}" /&gt;
		&lt;/ui:property&gt;
		&lt;ui:property id="Property2" label="Log Level: " labelAlign="right" noWrap="true" overlapLabel="false" helpText="#{bundle.['log.level.help']}"&gt;
		    &lt;f:facet name="content"&gt;
			&lt;ui:dropDown id="logLevel" items="#{BackingFileChoice.logLevel}" /&gt;
		    &lt;/f:facet&gt;
		&lt;/ui:property&gt;
	    &lt;/ui:propertySheetSection&gt;
	    &lt;ui:propertySheetSection id="secondSection" label="Advanced Options"&gt;
		&lt;ui:property id="Property3" label="Logger: " labelAlign="right" noWrap="true" overlapLabel="false" helpText="Select one or more module logs to view"&gt;
		    &lt;ui:listbox id="logger" items="#{BackingFileChoice.loggers}" rows="5" /&gt;
		&lt;/ui:property&gt;
		&lt;ui:property id="Property4" noWrap="true" overlapLabel="false" helpText="Select one or more module logs to view"&gt;
		    &lt;ui:checkbox id="limitLongLogs" label="Limit excessively long messages" /&gt;
		&lt;/ui:property&gt;
	    &lt;/ui:propertySheetSection&gt;
	&lt;/ui:propertySheet&gt;
    </pre>
    </code>
</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>jumpLinks</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	This boolean attribute allows you to control whether jump links
		will be created at the top of this <code>PropertySheet</code>
		or not.  The default is NOT to create the links -- setting this
		attribute to "true" turns this feature on.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>requiredFields</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	  This property indicates whether a required field legend should be
	  displayed at the top right-hand side of the property sheet.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>propertySheetSection</name>
    <tag-class>com.sun.rave.web.ui.taglib.PropertySheetSectionTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<h3>HTML Elements and Layout</h3>

<p> The <code>PropertySheetSection</code> component was written to be used
    within the <code>PropertySheet</code> component.  It allows you to group
    <code>Property<code> components together in sections within the
    <code>PropertySheet</code> component.</p>

<p> When you use this component to create a grouping of <code>Property</code>
    components, you may provide a description for the
    <code>PropertySheetSection</code>.  This is done via the
    <code>label</code> attribute.  Set this attribute to the desired value,
    which, of course, may be a ValueBinding expression or a literal String.</p>

<h3>Client Side Javascript Functions</h3>

<p> None.</p>

<h3>Example:</h3>

<p> For an example, please see the documentation for the <code>propertySheet</code> Tag.</p>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	This attribute allows you to provide a label or title for the section
	this <code>PropertySheetSection</code> defines for the<code>PropertySheet</code> component.  The value may be a literal
	String, or it may be a ValueBinding expression (useful for
	localization).</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>radioButton</name>
    <tag-class>com.sun.rave.web.ui.taglib.RadioButtonTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<p>
Use the <code>ui:radioButton</code> tag to display a radio button
in the rendered HTML page. The tag can be used as a single
radio button or as one radio button among a group of radio buttons.
A group of radio buttons represents a single selection list.
A radio button can represent a value of a class type such as
<code>Boolean, Byte, Character, Double,
Float, Integer, Long, Short, String</code> or the primitive form of one of
these class types. A radio button may also represent an application defined 
object value.
</p>
A <code>Boolean</code> value is useful for indicating whether
an item, such as a table row, is selected. A <code>String</code>
value is useful for passing a value for the radio button selection made in the
interface. An application defined <code>Object</code> value or class
instance can be used to hold more information related to the radio button
selection.
</p>
<p>
A group of radio buttons is the common way to use the the
<code>radioButton</code> tag. It can be used to represent different
types of data:
</p>
<ul>
  <li>a group of boolean controls where only one control is selected at a
  time.</li>
  <li>string values that are related to the radio button selection</li>
  <li>object values defined by the application</li>
</ul>
<p><em>
Note: It is not common to use a <code>radioButton</code> tag that is not
in a group. If a single radio button is not in a group, once it
is selected by the user in the interface, the user cannot deselect it.
This is because a radio button is defined to be a single selection
among several where one radio button is always selected. Since there
are no other radio buttons grouped with the single radio button, the user
cannot select an alternative, to cause the selected
radio button to be deselected.
</em></p>
<p>
Note: Another tag for rendering radio buttons is
<code>ui:radioButtonGroup</code>, which imposes a grid layout on a group
of radio buttons. The <code>radioButton</code> tag is useful in
situations where the <code>radioButtonGroup</code> tag layout is not
desirable, such as in a table row where only one row among several may be
selected.
</p>
<h3>Detecting a selected radio button</h3>
<p>
The <code>radioButton</code> tag uses both the <code>selected</code>
and <code>selectedValue</code> attributes to pass information about
the radio button's selection status. The <code>selected</code>
attribute is used to indicate that the radio button is selected, and should
have a check mark displayed in the page. The <code>selectedValue</code>
attribute is used to pass a data value for the
radio button. A radio button is considered to be selected when the value of the
<code>selected</code> attribute is equal to the value of
the <code>selectedValue</code> attribute. You can display a radio button as
selected on the initial viewing of the page by assigning the same value
to the <code>selectedValue</code> and the <code> selected</code> attributes.
</p>
<p>
If the <code>selectedValue</code> attribute is not specified or its
value is <code>null</code> then the radio button behaves like a
boolean control. If the radio button is selected, the value of the
<code>selected</code> attribute is a true <code>Boolean</code>
instance. If the radio button is not selected, the value of the
<code>selected</code> attribute will be a false <code>Boolean</code>
instance.
</p>
<p><em>
Note that a value binding expression that evaluates to a
primitive boolean value can be assigned to the <code>selected</code>
and <code>selectedValue</code> attributes.
</em>
</p>
<p>
When a radio button is part of a group, the value of the selected
radio button is maintained as a request attribute value in the 
<code>RequestMap</code>. The attribute name is the value of the
<code>name</code> attribute. The value of the request attribute
is the value of the <code>selectedValue</code> attribute of the
selected radio button. The value of the <code>selected</code> attribute
will also be equal to the <code>selectedValue</code> attribute of the
selected radio button. If no radio button is selected, no request
attribute will be created.<br>
The <code>RadioButton</code> class provides a convenience method for
obtaining the selected radio button in a group:
</p>
<p>
public static Object getSelected(String groupName);
</p>
<p> where <code>groupName</code> is the value of the <code>name</code>
attribtue. Note that unlike the <code>selected</code> and
<code>selectedValue</code> attributes, the return value of this method
is always a class instance and not a primitive value.
</p>
<p><em>
Note that the <code>radioButton</code> does not enforce that
at least one radio button is always be selected.
The application must ensure this behavior if necessary.
</em></p>
<h3>Using a <code>radioButton</code> tag as a boolean control</h3>
<p>
If the <code>selectedValue</code> attribute is not specified or its
value is <code>null</code> then the radio button behaves like a
boolean control.
</p>
<p>
To use the <code>radioButton</code> tag as a boolean control, do not
specify a value for the <code>selectedValue</code> attribute. The
radio button is selected if the <code>selected</code> attribute is not
null and has the value of a true <code>Boolean</code> instance or 
<code>boolean</code> primitive. If the radio button is not selected,
then the value of the <code>selected</code> attribute is a false
<code>Boolean</code> instance or <code>boolean</code> primitive.
</p>
<p>
Normally the value of the <code>selectedValue</code> attribute is
specified as the value of the &lt;input&gt; HTML element. When a
radio button is behaving as a boolean control the value of the &lt;input&gt;
element is the <code>clientId</code> of the radio button.
</p>
<p><em>
Note that using a boolean radio button in a group and
referencing the request attribute for the selected radio button is not
useful, since the value of the request attribute will be an
indistinguishable <code>Boolean</code> <code>true</code> value.</em>
</p>
<h3>Using a <code>radioButton</code> tag to represent an application defined
value</h3>
<p>
The <code>selectedValue</code> attribute can be assigned an
application defined object value to represent the value of a selected
radio button. If the radio button is selected, the value of the
<code>selected</code> attribute is assigned the value of the
<code>selectedValue</code> attribute.
</p>
<p>
If the value of the <code>selectedValue</code> attribute is an
application defined object, a converter must be registered
to convert to and from a <code>String</code> value. The
converter is used to encode the radio button value
as the value of the HTML &lt;input&gt; element and to decode the
submitted value in a request. In addition the object must support an
<code>equals</code> method that returns <code>true</code> when the
value of the <code>selectedValue</code> attribute is compared to
the <code>selected</code> attribute value in order to detect a
selected radio button.
</p>
<h3>Using a <code>radioButton</code> tag as one control in a group</h3>
<p>
The <code>name</code> attribute determines whether a
radio button is part of a group. A radio button is treated as part of a group
of radio buttons if the <code>name</code> attribute of the radio button is
assigned a value equal to the <code>name</code> attribute of the other
radio buttons in the group. In other words, all radio buttons of a group
have the same <code>name</code> attribute value. The group behaves
like a single selection list, where only one radio button
can be selected. The value of the name attribute must
be unique within the scope of the &lt;form&gt; element containing the
radio buttons.
</p>

<h3>Facets</h3>
<p>
The following facets are supported:
<ul>
  <li><em>image</em> If the image facet exists, it is rendered to the
      immediate right hand side of the radio button.
  <li><em>label</em> If the label facet exists, it is rendered to the
	immediate right of the image, or to the immediate right of the
	radio button if no image is rendered.
</ul>
</p>
<h3>Examples</h3>
<h4>Example 1: Two grouped boolean radio buttons with value bindings.</h4>
<code>
&lt;ui:radioButton id="rb0" name="rb1grp"
    selected="#{tldRbCbExample.selectedRb0}"/&gt;<br/>
&lt;br/&gt;<br/>
&lt;ui:radioButton id="rb1" name="rb1grp"
    selected="#{tldRbCbExample.selectedRb1}"/&gt;
</code>
<p>
The value bindings imply that
there are two methods implemented in the <code>tldRbCbExample</code>
managed bean for each value binding.
</p>
<ul>
<li>public void setSelectedRb0(boolean selected)</li>
<li>public boolean getSelectedRb0()</li>
<li>public void setSelectedRb1(boolean selected)</li>
<li>public boolean getSelectedRb1()</li>
</ul>
<p>
The "getSelected" methods will be called to determine the checked
state of the radio buttons during rendering.<br/>
When the tags are first rendered, the initial checked state is
determined by the return value of the "getSelected" methods, only one of
which should return true.
The radio button whose "getSelected" method returns 
<code>true</code> will be checked in the HTML page and not checked if it
returns <code>false</code>.
When one of the radio buttons is checked by the user its "setSelected" method
will be called with a <code>boolean</code> argument equal to <code>true</code>.
The other radio button's "setSelected" method will be called
with a <code>boolean</code> argument equal to <code>false</code>.<br/>
</p>
<p>
No image or label will be displayed by this example.
</p>
<h4>Example 2: Two grouped boolean radio buttons with value bindings,
that display an image and a label.</h4>
<code>
&lt;ui:radioButton id="rb2" name="rb2grp" 
    imageURL="tree_server.gif" label="Server"
    selected="#{tldRbCbExample.selectedRb2}"/&gt;<br/>
&lt;br/&gt;<br/>
&lt;ui:radioButton id="rb3" name="rb2grp"
    imageURL="pool_tree.gif" label="Pool"
    selected="#{tldRbCbExample.selectedRb3}"/&gt;
</code>
<p>
The behavior of these radio buttons is the same as example one.<br/>
In this example an image and a label are displayed next to both 
radio buttons. Both
the <code>imageURL</code> and <code>label</code> attributes may be assigned
value binding expressions instead of literal values.
</p>
<h4>Example 3: Two grouped String valued radio buttons with value bindings 
and labels.</h4>
<code>
&lt;ui:radioButton id="rb4" name="rb3grp" 
	label="Print" selectedValue="Print"
	selected="#{tldRbCbExample.selectedRb4}"/&gt;<br/>
&lt;br/&gt;<br/>
&lt;ui:radioButton id="rb5" name="rb3grp"
	label="Fax" selectedValue="Fax"
	selected="#{tldRbCbExample.selectedRb5}"/&gt;
</code>
<p>
The value bindings imply that
there are two methods implemented in the <code>tldRbCbExample</code>
managed bean for each value binding.
Because the <code>selectedValue</code> attribute is a
<code>String</code> the expected method signatures will be:
</p>
<ul>
<li>public void setSelectedRb4(String selected)</li>
<li>public String getSelectedRb4()</li>
<li>public void setSelectedRb5(String selected)</li>
<li>public String getSelectedRb5()</li>
</ul>
<p>
The "getSelected" methods will be called to determine the checked
state of the radio buttons during rendering.<br/>
When the tags are first rendered, the initial checked state is
determined by the return value of the "getSelected" methods.<br/>
With a <code>String</code> valued radio button, a radio button will 
be checked only if the "getSelected" method returns the value of its
<code>selectedValue</code> attribute.<br/>
For example if <code>getSelectedRb4</code> returns "Print", the
radio button "rb4" will be checked. <code>getSelectedRb5</code> must 
not return "Fax" and should return <code>null</code> in order for "rb4" to 
remain checked.<br/>
Alternatively if <code>getSelectedRb4</code> returns <code>null</code>
<code>getSelectedRb5</code> should return "Fax", and radio button "rb5"
will be checked.
</p>
<p>
When the radio button is checked by the user the "setSelected"
methods will be called with a <code>String</code> argument equal to the
value of the <code>selectedValue</code> attribute of the radio button.<br/>
When it is unchecked the method will be called with a <code>null</code>
<code>String</code>
argument.<br/>
For example if radio button "rb4" is checked by the user
<code>setSelectedRb4</code> will be called with "Print" as the argument and
<code>setSelectedRb5</code> will be called with a <code>null</code> argument.
</p>
<h4>Example 4: Two grouped object valued radio buttons with value bindings
and labels.</h4>
<code>
&lt;ui:radioButton id="rb6" name="rb4grp" label="Print"
	selectedValue="#{tldRbCbExample.selectedValueRb6}"
	selected="#{tldRbCbExample.selectedRb6}"
	converter="#{tldRbCbExample.rbConverter}"/&gt;<br/>
&lt;br/&gt;<br/>
&lt;ui:radioButton id="rb7" name="rb4grp" label="Fax"
	selectedValue="#{tldRbCbExample.selectedValueRb7}"
	selected="#{tldRbCbExample.selectedRb7}"
	converter="#{tldRbCbExample.rbConverter}"/&gt;
</code>
<p>
The value bindings imply that
there are two methods implemented in the <code>tldRbCbExample</code>
managed bean for each value binding.
Let's say the object value for "rb6" is an instance of the "Printer" class,
and "rb7" an instance of the "Fax" class, then the expected
method signatures will be:
</p>
<p>
<ul>
<li>public void setSelectedRb6(Printer selected)</li>
<li>public Printer getSelectedRb6()</li>
<li>public void setSelectedValueRb7(Fax selected)</li>
<li>public Printer getSelectedValueRb7()</li>
</ul>
</p>
A Printer class might look like:
<p>
<code><pre>
    public class Printer implements Device {
	private String name;
	private String location;
	public Printer(String name, String location) {
	    this.name = name;
	    this.location = location;
	}
	public String getName() {
	    return name;
	}
	public String getLocation() {
	    return location;
	}
	public int getType() {
	    return Device.PRINTER;
	}
	public boolean equals(Printer p) {
	    return this.name.equals(p.getName()) &&
		    this.location.equals(p.getLocation()) &&
		    p.getType() == Device.PRINTER;
	}
    };
</pre>
</code>
</p>
A Fax class might look like:
<p>
<code><pre>
    public class Fax implements Device {
	private String name;
	private String phoneNumber;
	public Printer(String name, String phoneNumber) {
	    this.name = name;
	    this.phoneNumber = phoneNumber;
	}
	public String getName() {
	    return name;
        }
	public String getPhoneNumber() {
	    return phoneNumber;
	}
	public int getType() {
	    return Device.FAX;
	}
	public boolean equals(Fax f) {
	    return this.name.equals(f.getName()) &&
		    this.phoneNumber.equals(f.getPhoneNumber()) &&
		    f.getType() == Device.FAX;
	}
    };
</pre>
</code>
</p>
<p>
Since this radio button represents an application defined object value,
the application must provide a converter instance. The converter attribute's
value binding expression implies a method in the <code>tldRbCbExample</code>
managed bean called
</p>
<p>
<code>public Converter getRbConverter();</code>
</p>
The converter class might look like:
<code><pre>
    public class RbConverter implements javax.faces.convert.Converter {
	public RbConverter() {
	}
	public String getAsString(FacesContext context, 
		UIComponent component, Object value) {
	    if (!value instanceof Device) {
		throw new ConverterException("Not a Device value");
	    }
	    return String.valueOf(((Device)value).getType());
	}
	public Object getAsObject(FacesContext context, 
		UIComponent component, String value) {
	    if (value == null) {
		return null;
	    }
	    // value is the String representation of "getType"
	    //
	    int type = Integer.parseInt(value);
	    switch (type) {
	    case Device.PRINTER:
		return deviceDb.getClosestPrinter();
	    break;
	    case Device.FAX:
		return deviceDb.getFax();
	    break;
	    default:
		throw new ConverterException("No such device : " + value);
	    break;
	    }
	}
    };
</pre>
</code>
<p>
The "getSelected" methods will be called to determine the checked
state of the radio buttons during rendering.<br/>
When the tags are first rendered, the initial checked state is
determined by the return value of the "getSelected" methods.<br/>
With <code>Object</code> valued radio buttons,
a radio button will be checked only if the "getSelected" method
returns an object instance that equals the object instance returned
by the "getSelectedValue" method.<br/>
For example if <code>getSelectedRb6</code> returns the <code>Printer</code>
instance value of "rb6"'s <code>selectedValue</code> attribute, then
"rb6" will be checked. <code>getSelectedRb7</code> should return
<code>null</code>. If the <code>getSelectedRb6</code> method returns a
<code>Printer</code> instance that is not equal as determined by
<code>getSelectedValueRb6().equals(getSelectedRb6())</code> the radio button
will not be checked.<br/>
When the radio button is checked by the user the "setSelectedValue"
methods will be called with the object instance returned by the converter.<br/>
For example if "rb6" is checked by the user, <code>setSelectedRb6</code> will
be called with a <code>Printer</code> instance returned by the converter.
<code>setSelectedRb7</code> will be called with a <code>null</code>
argument.
</p>
<p>
Note that when radio buttons are part of a group the value of the
selected radio button can be obtained directly from the request map.
For example, processing the selection could take place in the action
method of a submit button tag:
</p>
<p>
<code><pre>
    public void submit() {

	// RadioButton.getSelected(String groupName) is
	// a static convenience method that obtains the 
	// selected radio button value from the request map
	// <em>ONLY when the radio button is part of a group</em>.
	//
	Object selection = RadioButton.getSelected("rb4grp");

	// Assume at least one radio button will be selected.
	//
	processSelection((Device)selection);
    }
</pre></code>
</p>
<h4>Example 5: Grouped Integer valued radio buttons in a table.</h4>
<p>
The following example shows a common use case for radio buttons in
a table. The radio buttons are used to select at most one row
for processing. The radio button state does not need to be
stored. The selected row index can be obtained directly in the
<code>#{tldRbCbExample.table5process}</code> method, using the
<code>RadioButton.getSelected(String groupName)</code> convenience
method. The markup in bold is how you would specify a radio button tag
for this purpose.  The <code>selectedValue</code> value binding,
<code>#{tldRbCbExample.currentRow1}</code>
is implemented to return the current row in the <code>table5row1</code>
tableRow tag.
</p>
<p>
Note that this example will not initially select a radio button
which is normally not the way radio buttons are used; one is usually
always checked.
</p>
<p>
<code><pre>
    &lt;ui:table id="table5"&gt;
	&lt;ui:tableRow id="table5row1"
	    sourceData="#{tldRbCbExample.table5row1data}"
	    sourceVar="table5data"
	    binding="#{tldRbCbExample.table5row1}"&gt;
	    &lt;ui:tableColumn id="col1"&gt;

		&lt;f:facet name="header"&gt;
		    &lt;ui:tableHeader id="header1"
			deselectAllButton="true"
			selectAllButton="true"
			selectId="rb5"/&gt;
		&lt;/f:facet&gt;

		<b>
		&lt;ui:radioButton id="rb8" name="rb5grp" 
			selectedValue="#{tldRbCbExample.currentRow1}"&gt;
		&lt;/ui:radioButton&gt;
		</b>

	    &lt;/ui:tableColumn&gt;
	    &lt;ui:tableColumn id="col2"&gt;
		&lt;f:facet name="header"&gt;
		    &lt;ui:staticText text="Application Data"/&gt;
		&lt;/f:facet&gt;

		&lt;ui:staticText text="#{table5data.text}"/&gt;

	    &lt;/ui:tableColumn&gt;
	&lt;/ui:tableRow&gt;
	&lt;f:facet name="tableActionsBottom"&gt;
	   &lt;ui:button id="table5process"
		action="#{tldRbCbExample.table5process}"
		text="Process Checked"/&gt;
	&lt;/f:facet&gt;
    &lt;/ui:table&gt;
</pre>
</code>
</p>
<p>
See <a href="table.html" target="tagFrame">ui:table</a> for details
on using the  <code>&lt;ui:table&gt;</code> tag and other table child tags
and facets.
</p>
<p>
</p>
<p>
Normally when radio buttons are contained within a <code>ui:tableRow</code>
the application MUST provide a value binding for the <code>selected</code>
attribute and any attribute that is expected to maintain its state. This
is because the table only creates a single instance of the radio button for
all rows. It depends on a model to provide the storage for the attribute
values, as it iterates over the rows in the dataset.<br/>
In this example, we don't need to maintain the state across requests because
a row is only selected for processing. Once the processing
is complete, the radio button no longer needs to be checked.
<p>
The following code shows how the <code>table5process</code> action
method obtains the selected radio button value from the request map.
It calls a static member on <code>RadioButton</code> to return the
<code>Integer</code> row index.
</p>
<code><pre>
    public void table5process() {

	// RadioButton.getSelected(String groupName) is
	// a static convenience method that obtains the 
	// selected radio button value from the request map
	// <em>ONLY when the radio button is part of a group</em>.
	//
	Integer row = (Integer)RadioButton.getSelected("rb5grp");
	if (row != null) {
	    processRow(row.intValue());
	}
    }
</pre></code>
<p>
<h4>Example 6: Grouped boolean radio buttons in a table, using value bindings to
maintain the state.</h4>
<p>
This example is similar to Example 5, but it maintains the state of the radio
buttons across requests, by specifying a value binding for the selected
attribute.  A simple way to store the radio button state, is to store the
state with the row data. The following code replaces the "ui:radioButton"
code in the previous example.
</p>
<code>
	&lt;ui:radioButton id="rb6" name="rb6grp"
		selected="#{table6data.selected}"&gt;
	&lt;/ui:radioButton&gt;
</code>
<p>
The value binding <code>#{table6data.selected}</code> references a boolean
member in the row data for storing and retrieving the radio button state.
</p>

<h3>HTML Elements and Layout</h3>
<p>
A <code>radioButton</code> is rendered as at least one HTML &lt;span&gt;
element and one &lt;input&gt; element of type <em>radio</em>.
Each radio button may consist of the following elements:
</p>
<ul>
    <li>a &lt;span&gt; element</li>
    <li>an &lt;input&gt; element of type <em>radio</em></li>
    <li>an optional image if the <code>imageURL</code>
    attribute or an <code>image</code> facet is specified. If the 
    <code>imageURL</code> attribute is specified a
    <code>com.sun.rave.web.ui.component.ImageComponent</code> component is created
    and rendered. If an <code>image</code> facet is specified then the 
    component specified by the facet is rendered.</li>
    <li>an optional label if a <code>label</code>
    attribute or a <code>label</code> facet is specified.
    If the <code>label</code> attribute is
    specified a <code>com.sun.rave.web.ui.component.Label</code> component is
    created and rendered. If a <code>label</code> facet is specified then 
    the component specified by the facet is rendered.</li>
</ul>
<p>
The id attributes for HTML elements are constructed as follows,
where <em>rid</em> is the <code>clientId</code> of the 
component being rendered.
<p>
<ul>
<li> <em>rid_span</em> for the &lt;span&gt; element
</li>
<li> <em>rid</em> for the &lt;input element
</li>
<li> <em>rid</em><b>_image</b> for the image component if created.</li>
<li> <em>rid</em><b>_label</b> for the label component if created.</li>
</li>
</ul>
</p>
<p>
Note that the value of the <code>style</code> and <code>styleClass</code>
attributes of a radio button will be assigned to the containing 
&lt;span&gt; HTML element's <code>style</code> and <code>class</code> attributes
respectively.
</p>
<h3>Client Side Javascript Functions </h3>
<p>
<ul>
    <li><em>radioButton_setChecked(elementId, checked)</em>: Set the checked
    property for a radio button with the given element id, <em>elementId</em>.
    If <em>checked</em> is true the radio button is checked.
    If <em>checked</em> is false the radio button is unchecked.</li>
</ul>
</p>

<!--
	<h3>Theme Identifiers</h3>
<p>
	<lo>
	<li>Rb for the INPUT element</li>
	<li>RbDis for the INPUT element for disabled radio button</li>
	<li>RbLbl for a LABEL element of a radio button</li>
	<li>RbLblDis for a LABEL element of a disabled radio button</li>
	<li>RbImg for an IMG element of a radio button</li>
	<li>RbImgDis for an IMG element of a disabled radio button</li>
	</lo>
</p>
-->
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>imageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>
	    A context relative path of an image to be displayed with
	    the control. If you want to be able to specify attributes
	    for the image, specify an <code>image</code> facet instead
	    of the <code>imageURL</code> attribute.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If set, a label is rendered adjacent to the component with the
      value of this attribute as the label text.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
      label attribute has been set. Valid values are 1 (largest), 2 and
      3 (smallest). The default value is 3.
      ]]></description>
    </attribute>

    <attribute>
      <name>name</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	Identifies the radio button as participating as part
	of a group. When this attribute is specified and more than
	one radio button within the same form has the same value for this
	attribute the radio button behaves as a single selection of single
	selection list, where only one radio button can be selected.
	The value of the name attribute of the radio buttons in 
	a group must be unique within the scope of
	the &lt;form&gt; element containing the radio buttons.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when some text in this
    component value is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	This attribute identifies a selected radio button.
	It is assigned the value of the <code>selectedValue</code>
	attribute if the radio button is selected. This
	attribute should be bound to the same type as the<code>selectedValue</code> attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedValue</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	The value of the radio button when it is selected.
	This attribute is assigned to the value of the <code>selected</code>
	attribute when the radio button is selected.<br>
	This attribute can be bound to a <code>String</code>, or<code>Object</code> value.<br>
	If <code>selectedValue</code> is not assigned a value, the
	radio button behaves as a boolean radio button. A boolean radio button
	is selected when the <code>selected</code> attribute is equal to a true<code>Boolean</code> instance.<br>
	If a boolean radio button is not selected, the <code>selected</code>
	attribute is a false <code>Boolean</code> instance. </p>
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Use the visible attribute to indicate whether the component should be 
    viewable by the user in the rendered HTML page.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>radioButtonGroup</name>
    <tag-class>com.sun.rave.web.ui.taglib.RadioButtonGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
<p>
	Use the <code>ui:radioButtonGroup</code> tag to display two or more 
	radio buttons in a grid layout in the rendered HTML page. The 
	<code>ui:radioButtonGroup</code> tag attributes that
	you specify determine how the radio buttons are displayed. 
</p>
<p>
	If the <code>label</code> attribute is specified a
	<code>com.sun.rave.web.ui.component.Label</code> component
	is rendered before the first radio button and
	identifies the radio button group. The label component's
	<code>for</code> attribute is 
	set to the <code>id</code> attribute of the first radio button in
	the rendered HTML page.
</p>
<p>
	The radio buttons are laid out in rows and columns in an HTML
	&lt;table&gt;
	element. The number of rows is defined by the length of the items
	array. The number of columns is defined by the columns attribute. The
	default layout is a single vertical column.
</p>
<p>
	The <code>items</code> attribute must be a value binding expression.
	The value binding expression assigned to the <code>items</code>
	property evaluates to an <code>Object</code> array of 
	<code>com.sun.rave.web.ui.model.Option</code> instances.
	Each
	instance represents one radio button. The <code>value</code> property
	of an <code>Option</code> instance represents the value of a
	selected radio button.
	If the <code>items</code> array is empty nothing is rendered.
</p>
<p>	
	At least one radio button should be selected by the application.
	The <code>selected</code> attribute must also be a value binding
	expression that is evaluated to read and write an <code>Object</code>.
	When an <code>Object</code> value is read from the value binding
	expression, it identifies the selected radio button.
	The <code>Object</code> value must
	be equal to the value property of at least one <code>Option</code>
	instance specified in the array obtained from the value binding
	expression assigned to the <code>items</code> attribute.
</p>
<p>
	The write method of the <code>selected</code> attribute value
	binding expression is called during the <code>UPDATE_MODEL_PHASE</code>
	of the JSF lifecyle. If a radio button is selected
	an <code>Object</code> value is passed as an argument to the
	write method. The <ccode>Object</code> value is the 
	value of the selected radio button.
</p>

	<h3>HTML Elements and Layout</h3>
<p>
	A <code>ui:radioButtonGroup</code> renders one
	<code>com.sun.rave.web.ui.component.RadioButton</code> component for
	each element in the <code>items</code> array. 
	See <a href="radioButton.html" target="tagFrame">ui:radioButton</a> for
	details on the HTML elements and components rendered for a 
	radio button.
</p>
<p>
	The value of the <code>name</code> attribute of each 
	<code>RadioButton</code> component rendered is assigned the
	<code>clientId</code> of the <code>RadioButtonGroup</code>
	component instance associated with this tag. The <code>id</code>
	attribute of each <code>RadioButton</code> component rendered
	is formed as follows, where <em>rbgrpid</em> is the id of the
	<code>RadioButtonGroup</code> instance and <em>N</em> is the nth
	radio button.
</p>
	<ul>
	<li> <em>rbgrpid_N</em></li>
	</ul>
<p>
	See <a href="radioButton.html" target="tagFrame">ui:radioButton</a> for
	details on how the id properties of the components that make up the 
	radio button are defined.
</p>
        <h3>Client Side Javascript Functions</h3>
<p>
	none.
</p>
	<h3>Example</h3>
	<b>Example 1: Create a radio button group</b>
	<p>
	<code>
	&nbsp;&lt;ui:radioButtonGroup items="#{rbcbGrp.selections}"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;label="#{rbcbGrp.rbGrpLabel}"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;toolTip="rbgrp-tooltip"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;tabIndex="1"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;columns="3"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;labelLevel="2"</br>
	&nbsp;&nbsp;&nbsp;&nbsp;selected="#{rbcbGrp.selection}"&gt;</br>
	&nbsp;&lt;/ui:radioButtonGroup&gt;</br>
	</code>
	</p>
	<p>
	This example creates a radio button group with an identifying
	label for the group before the first radio button. The 
	data for the radio buttons is obtained from the value binding
	expression <code>#{rbcbGrp.selections}</code> where <code>rbcbGrp</code>
	is an application defined managed bean. The bean provides the values for
	other attributes such as <code>selected</code> to receive the
	value of the selected radio button in the group.
	</p>

	<!--
	<h3>CSS style selectors</h3>
<p>
	<ul>
	<li>RbGrp for the TABLE element.</li>
	<li>RbGrpCpt for the TD element containing the group label</li>
	<li>RbGrpLbl for the LABEL element used as the CAPTION</li>
	<li>RbGrpLblDis for the LABEL used as the CAPTION if the group is disabled</li>
	<li>RbGrpRwEv for even TR elements</li>
	<li>RbGrpRwOd for odd TR elements</li>
	<li>RbGrpClEv for even TD elements</li>
	<li>RbGrpClOd for odd TD elements</li>
	<li>Rb for the INPUT element</li>
	<li>RbDis for the INPUT element for disabled radio button </li>
	<li>RbLbl for a LABEL element of a radio button</li>
	<li>RbLblDis for a LABEL element of a disabled radio button</li>
	<li>RbImg for an IMG element of a radio button</li>
	<li>RbImgDis for an IMG element of a disabled radio button</li>
	</ul>
</p>
	-->
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Defines how many columns may be used to layout the radio buttons.
	The value must be greater than or equal to one. The
	default value is one. Invalid values are ignored and the value
	is set to one.
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>items</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Specifies the options that the web application user can choose
         from. The value must be one of an array, Map or Collection
         whose members are all subclasses of<code>com.sun.rave.web.ui.model.Option</code>.  
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If set, a label is rendered adjacent to the component with the
      value of this attribute as the label text.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
      label attribute has been set. Valid values are 1 (largest), 2 and
      3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If this attribute is set to true, the value of the component is
      rendered as text, preceded by the label if one was defined. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	The object that represents the selection made from the
	available options. This attribute
	must be bound to an Object.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a validator method that will be called
          during Process Validations to perform correctness checks on the
          value of this component.  The expression must evaluate to a public
          method that takes FacesContext, UIComponent, and Object parameters,
          with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          MethodBinding representing a value change listener method that will be
          notified when a new value has been set for this input component.  The
          expression must evaluate to a public method that takes a
          ValueChangeEvent parameter, with a return type of void.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>script</name>
    <tag-class>com.sun.rave.web.ui.taglib.ScriptTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="text-decoration: line-through;"></span><span
 style="color: rgb(0, 0, 0);">Use the </span><code
 style="color: rgb(0, 0, 0);">ui:script</code><span
 style="color: rgb(0, 0, 0);"> tag to create a </span><code
 style="color: rgb(0, 0, 0);">&lt;script&gt;</code><span
 style="color: rgb(0, 0, 0);"> element in the rendered
HTML page.
The </span><code
 style="color: rgb(0, 0, 0);">ui:script</code><span
 style="color: rgb(0, 0, 0);"> tag must be used within
the </span><code
 style="color: rgb(0, 0, 0);">ui:head</code><span
 style="color: rgb(0, 0, 0);"> tag, or within the </span><code
 style="color: rgb(0, 0, 0);">ui:body</code><span
 style="color: rgb(0, 0, 0);"> tag.&nbsp; The </span><code
 style="color: rgb(0, 0, 0);">ui:script</code><span
 style="color: rgb(0, 0, 0);"> tag can be used to
refer to a
Javascript file, by using the url attribute. The tag can also be used
embed Javascript code within the rendered HTML page. </span>
<p style="color: rgb(0, 0, 0);">The
client-side script allows
you to perform some interactive functions such as input checking before
the page is submitted. <br>
</p>
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span
 style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
 style="color: rgb(0, 0, 0);">The rendered HTML page
contains a <code>&lt;script&gt;</code>
element with any attributes
specified through the <code>ui:script</code>
tag attributes.&nbsp; <br>
<br>
</span>
<h3 style="color: rgb(0, 0, 0);">Theme
Identifiers</h3>
<span style="color: rgb(0, 0, 0);">None.<br>
</span>
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
<span style="color: rgb(0, 0, 0);">None.
</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Example</h3>
<b style="color: rgb(0, 0, 0);">Example
1: Create a script tag to a file</b><br
 style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<code style="color: rgb(0, 0, 0);">
&lt;ui:script url="/pathtomyjs/myjavascript.js" /&gt;
</code><i
 style="color: rgb(0, 0, 0);"><br>
</i><br
 style="color: rgb(0, 0, 0);">
<b style="color: rgb(0, 0, 0);">Example
2: Create a script tag with embedded script (Not Recommended)</b><br
 style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<code style="color: rgb(0, 0, 0);">
&lt;ui:script&gt;
<br>
<code style="color: rgb(0, 0, 0);">
&nbsp;&nbsp;&nbsp;&nbsp;&lt;f:verbatim&gt;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function foo(text) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(text);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&lt;/f:verbatim&gt;</code><br>
&lt;/ui:script&gt;</code><br>
<br><span style="color: rgb(0, 0, 0);">Note: If the embeded script includes characters like "<" or "&", the script
code should be placed in an external file (see Example 1).
</span><br>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>charset</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Defines the character (charset) encoding of the target URL.
         See iana.org for a complete list of character encodings. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Indicates the MIME type of the script.  Default is "text/javascript"
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Defines the absolute or relative URL to a file that contains the 
         script.  Use this attribute to refer to a file instead of inserting the 
         script into your HTML document
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>skipHyperlink</name>
    <tag-class>com.sun.rave.web.ui.taglib.SkipHyperlinkTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

Use the <code>ui:skipLink</code>
tag to render a single-pixel transparent image (not visible within the browser page) which is hyperlinked to an anchor beyond the section to skip. This tag is used to achieve 508-compliance (paragraph o). It is designed to be used by components such as masthead, tabs, calendar and other components with repetitive links.
<br>
<h3>HTML Elements and Layout</h3>
<p>The rendered HTML page displays an image hyperlink at the top, followed by an anchor at the end of the region to skip.
</p>
<h3>Theme Identifiers</h3>
None.
<h3>Client-side JavaScript functions</h3>
None.
<h3>Examples</h3>
<b>Example 1: An example showing how to skip over the masthead:</b><br>
<code>
  &lt;ui:skipHyperlink id="skip1234" description="skip over the masthead" &gt;
	&lt;ui:masthead id=masthead1" productImageURL="../images/webconsole.png"
                      productImageDescription="Java Web Console" 
                      userInfo="test_user" serverInfo="test_server" /&gt;
  &lt;/ui: skipHyperlink&gt;
</code>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>description</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Textual description of the purpose of this skip hyperlink, including a description of the section that is being skipped.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>staticText</name>
    <tag-class>com.sun.rave.web.ui.taglib.StaticTextTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<span style="color: rgb(51, 51, 255);"><span
style="color: rgb(0, 0, 0);">Use the </span><code
style="color: rgb(0, 0, 0);">ui:staticText</code><span
style="color: rgb(0, 0, 0);">
tag to display text that is not interactive in the rendered HTML
page.&nbsp; The text can be plain static text, or be formatted using
parameters to insert variable text in the rendered HTML. The JSF core
tag </span><code style="color: rgb(0, 0, 0);">f:param</code><span
style="color: rgb(0, 0, 0);"> can be used along with view beans to
provide
the variable data.</span><br>
</span></p>
<p><code></code>If there are one or more
params, the component will convert the list of parameter values to an <code>Object</code>
array, and call <code>MessageFormat.format()</code>, passing the value
of the param
of this component as the first argument, the value of the
array of parameter
values as the second argument, and render the result. See <code>MessageFormat.format()</code>for
details.<code> </code>Otherwise, render
the text of
this component unmodified.</p>
<span style="color: rgb(255, 153, 0);"></span>
<h3>HTML Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">The rendered HTML page includes
a </span><code style="color: rgb(0, 0, 0);">&lt;span&gt;</code><span
style="color: rgb(0, 0, 0);"> element that contains the resulting
text.&nbsp; In the </span><code style="color: rgb(0, 0, 0);">&lt;span&gt;</code><span
style="color: rgb(0, 0, 0);"> element, the class and style
attribute values are set to the values specified with the </span><code
style="color: rgb(0, 0, 0);">ui:staticText</code><span
style="color: rgb(0, 0, 0);"> tag's styleclass and style
attributes.</span>
<h3>Client Side Javascript Functions</h3>
None.
<br>
<h3>Examples</h3>
<h4>Example 1: Render plain old text<br>
</h4>
<div style="margin-left: 40px;"><code>&lt;ui:staticText
id="statictext1" text="#{bean.someText}" /&gt; </code><br>
<code></code><code>&lt;ui:staticText id="statictext1" text="some text
to display" /&gt;</code><code></code><br>
<code></code></div>
<h4>Example 2: Use Params to format a whole line<br>
</h4>
<code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText id="blah"
text="At {1,time} on {1,date}, there was {2} on planet
{0,number,integer}."&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param
id="b1" value="#{HyperlinkBean.myInt}"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param
id="b2" value="#{HyperlinkBean.date}"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param
id="b3" value="2
fools"/&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:staticText&gt;<br>
<br>
</code>The above will render:&nbsp; <span id="form1:blah">"At 8:36:18
AM on Dec 13, 2004, there was 2 fools on planet 7." <br>
</span>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Converter instance registered with this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>escape</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Escape the text so it won't be interpreted by the browser as HTML markup
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text value of this component
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>tab</name>
    <tag-class>com.sun.rave.web.ui.taglib.TabTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

The tab tag is used for inserting a Tab component into a TabSet.
The tab tag simply extends <a href="hyperlink.html">ui:hyperlink</a> differing
only in the value rendered by default for the class attriubte<br>
<h3>HTML Elements and Layout</h3>
The tab tag will render an XHTML anchor tag. Its output is identical to that of
<a href="hyperlink.html">ui:hyperlink</a> except for the value of the class
attribute
<br>
<h3>Client Side Javascript Functions</h3>
none.
<br>
<h3>Examples</h3>
<p><em>Please see <a href="tabSet.html">the tabSet tlddoc</a> for an example of 
defining tabs via a TabSet component binding</em></p>
<p><strong>Define three tabs as part of a TabSet</strong></p>
<p><code>&lt;ui:tabSet id="MyTabs" selected="tab1" &gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id="tab1" 
text="Tab 1" action="#{TabSetBean.tab1Clicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id="tab2"
text="Tab 2" action="#{TabSetBean.tab2Clicked}" /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id="tab3"
text="Tab 3" action="#{TabSetBean.tab3Clicked}" /&gt;<br>
&lt;/ui:tabSet &gt;<br>
</code></p>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that processes
        application actions from this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Method binding representing a method that receives action from this, and possibly other, components.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that, if this component is activated by the user,
          notifications should be delivered to interested listeners and actions
          immediately (that is, during Apply Request Values phase) rather than
          waiting until Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectedChildId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The id of this tab's currently selected Tab child or null if one is not selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The resource at the specified URL is displayed in the frame that is 
        specified with the target attribute. Values such as "_blank" that are 
        valid for the target attribute of a HTML anchor element are also valid 
        for this attribute in this component
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The text description of the hyperlink
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>type</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         The MIME content type of the resource specified by this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Absolute, relative, or context relative (starting with "/") URL to the 
        resource selected by this hyperlink. If not specified, clicking this 
        hyperlink will submit the surrounding form.
      ]]></description>
    </attribute>

    <attribute>
      <name>urlLang</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The language code of the resource designated by this hyperlink.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Use the visible attribute to indicate whether the component should be 
    viewable by the user in the rendered HTML page.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>tabSet</name>
    <tag-class>com.sun.rave.web.ui.taglib.TabSetTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<h3>About This Tag</h3>

<p>The TabSet renders a set of Tab children. It keeps track of the currently
selected child Tab as well as applying any specified ActionListener.</p>

<h3>Configuring the TabSet Tag</h3>

<p>The TabSet can currently be used in one of two ways: via a component binding to a
TabSet and group of child Tab components (defined in a backing bean); or by specifying the
TabSet and child Tabs directly in your JSP.</p><p>Examples of both are shown in the Examples
section below. It is anticipated that the component binding method will be more
common as this allows a single set of Tabs to be easily shared among many pages. In
either case, the initial selection for the TabSet component can be specified using the
&quot;selected&quot; property. Note that if an ActionListener is applied to the TabSet
component, it adds the specified ActionListener to each of its child Tab components action
listener lists.</p>

<h3>Facets</h3>

<p>None at this time</p>

<h3>Client Side Javascript Functions</h3>

<p>None at this time</p>

<h3>Examples</h3>

<p><strong>Example 1: Define the TabSet via a component binding</strong><br>
One way a TabSet component can be specified is via a JSF component binding to an instance
defined in a backing bean. The contents of the JSP in this case will simply be something
like:</p>

<p><code>&lt;ui:tabSet binding=&quot;#{TabSetBean.sportsTabSet}&quot; /&gt;</code></p>

<p>The code in the corresponding backing bean instance would look something like:</p>

<p><code>import java.util.List;<br>
import java.lang.Class;<br>
import javax.faces.FactoryFinder;<br>
import javax.faces.el.MethodBinding;<br>
import javax.faces.event.ActionEvent;<br>
import javax.faces.application.Application;<br>
import javax.faces.application.ApplicationFactory;<br>
import com.sun.rave.web.ui.component.Tab;<br>
import com.sun.rave.web.ui.component.TabSet;</p>

<p>public class TabSetBean {<br>
&nbsp;&nbsp;&nbsp; private TabSet sportsTabSet = null;<br>
<br>
&nbsp;&nbsp;&nbsp;  // Creates a new instance of TabSetBean //<br>
&nbsp;&nbsp;&nbsp; public TabSetBean() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet = new TabSet();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List kids = sportsTabSet.getChildren();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tab level1Tab = new Tab(&quot;Baseball&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level1Tab.setId(&quot;Baseball&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tab level2Tab = addTab(level1Tab,
&quot;National&quot;); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Mets&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Pirates&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Cubs&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab,
&quot;American&quot;); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Yankees&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Tigers&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Mariners&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab, &quot;AAA&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Spinners&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Renegades&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Clippers&quot;); <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kids.add(level1Tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level1Tab = new Tab(&quot;Football&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level1Tab.setId(&quot;Football&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab, &quot;NFC&quot;);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Giants&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Bears&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Falcons&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab, &quot;AFC&quot;);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Jets&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Patriots&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Colts&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab,
&quot;College&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Wolverines&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Hurricanes&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Buckeyes&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kids.add(level1Tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class[] args = new Class[] { ActionEvent.class
};<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MethodBinding binding =
createBinding(&quot;#{TabSetBean.tabClicked}&quot;, args);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet.setActionListener(binding); <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet.setSelected(&quot;Jets&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; private MethodBinding createBinding(String expr, Class[] args) { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ApplicationFactory factory =
(ApplicationFactory)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application app = factory.getApplication();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return app.createMethodBinding(expr, args);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; private Tab addTab(Tab parent, String newTabLabel) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tab tab = new Tab(newTabLabel);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tab.setId(newTabLabel); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent.getChildren().add(tab);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return tab;<br>
&nbsp;&nbsp;&nbsp; } </p>

<p>&nbsp;&nbsp;&nbsp; public void tabClicked(ActionEvent event) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String clickedTabId = event.getComponent().getId():<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String selectedTabId = sportsTabSet.getSelected();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ... do sometehing based upon the clicked or
selected tab id ...<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; public TabSet getSportsTabSet() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sportsTabSet;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; public void setSportsTabSet(TabSet tabs) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet = tabs;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code></p>

<p><strong>Example 2: Define the TabSet in your JSP</strong><br>
A tabSet can also be defined directly in your JSP. The following example defines a set of tabs with
three level one tabs (labelled &quot;One&quot;, &quot;Two&quot; and &quot;Three&quot;). Each
level one tab also has two level two tab childeren (labelled &quot;XxxA&quot; and
&quot;XxxB&quot; where X is the top level tab number. The initially selected Tab for this
TabSet will be &quot;TwoA&quot;.</p>

<p><code>&lt;ui:tabSet selected=&quot;TwoA&quot;&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;One&quot; text=&quot;One&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;OneA&quot; text=&quot;One
A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;OneB&quot; text=&quot;One
B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tab&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;Two&quot; text=&quot;Two&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;TwoA&quot; text=&quot;Two
A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;TwoB&quot; text=&quot;Two
B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tab&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;Three&quot; text=&quot;Three&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;ThreeA&quot;
text=&quot;Three A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;ThreeB&quot;
text=&quot;Three B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tab&gt; <br>
&lt;/ui:tabSet&gt;</code></p>
    ]]></description>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Use the actionListener attribute to cause the hyperlink to fire an
        event. The value must be an EL expression and it must evaluate to the 
        name of a public method that takes an ActionEvent parameter and returns
        void. 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>lite</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Render a style of tabs that isn't so visually "heavy".  This property
        must be used in conjunction with the "mini" property set to true
        in order to work.
      ]]></description>
    </attribute>

    <attribute>
      <name>mini</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Specify "true" if this TabSet should have the mini style
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The id of the selected tab
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>table</name>
    <tag-class>com.sun.rave.web.ui.taglib.TableTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
Use the <code>ui:table</code>
tag to create a table that can be configured to perform actions on
objects in the table, and to manipulate the rows and columns of the
table. The table component features behaviors that let the user sort,
filter, and paginate the table objects, and provides actions that can
be performed on selected objects. The component also allows you to
implement developer-defined custom actions. <br>
<p>Note that the <code>ui:table</code>
tag is not intended to be used to create HTML tables that are used
purely to handle page layout. The
table component renders a
table with
a well-defined structure, including a title, column headings, and
borders. You can use tags
such as <code><a href="propertySheet.html">ui:propertySheet</a></code>
and <code><a href="panelGroup.html">ui:panelGroup</a></code>
for page
layout if
possible.<br>
</p>
<p>The table component
implements Sun's user interface (UI) guidelines for web
applications. The guidelines describe in detail how the table should
appear and behave, including the placement of titles, group headers,
and actions. The table component's default behavior implements the UI
guidelines. The component is also extensible through JavaServer Faces
facets to
allow the component to be used for tables that do not need to adhere
strictly to the UI guidelines.<br>
</p>
<p>The <code>ui:table</code>
tag must be used with the <a href="tableRowGroup.html"><code>ui:tableRowGroup</code></a>
and <a href="tableColumn.html"><code>ui:tableColumn</code></a>
tags. The <code>ui:table</code>
tag is
used to define the structure and actions of the table, and is a
container for <code>ui:tableRowGroup</code>
tags.&nbsp; The <code>ui:tableRowGroup</code> tag is used to define
the rows of the table, and is a container for <code>ui:tableColumn</code>
tags. The <code>ui:tableColumn</code> tag is used to define the
columns of the table. <br>
</p>
<h3>HTML Elements and Layout</h3>
The table component renders
an XHTML <code>&lt;table&gt;</code> element.&nbsp; Depending upon the
attributes specified with the <code>ui:table</code> tag, the table
component can also render a title in a <code>&lt;caption&gt;</code>
element, and image hyperlinks for the various buttons for sorting and
pagination.&nbsp; The table component does not render table rows except
for
the rows that contain
the view-changing and pagination controls. <br>
<h3>Table Structure<code></code><br>
</h3>
<p>Tables are composed of several
discrete areas. You can use&nbsp;
<code>ui:table</code> tag attributes to cause the table component to
create the default layout for each
area. The default layout strictly adheres to UI guidelines.&nbsp; The
layout for
each area can also be customized by using facets.&nbsp; Some areas
require you to use facets to implement the content you want in those
areas. Descriptions of
the table areas are shown below, followed by a <a href="#diagram">diagram</a>
that shows the placement of the areas.<br>
</p>
<ul>
<li>
<p>Title - displays a title for the table,
which you can also use to include information about paginated rows and
applied
filters. Use the <code>title</code> attribute to specify the title
content. Use the <code>itemsText</code> attribute to specify the text
displayed for the table title for an unpaginated table.&nbsp;<span
style="font-weight: bold; color: rgb(255, 0, 0);"></span><span
style="color: rgb(255, 0, 0);"> </span>Use
the <code>filterText</code>
attribute to specify text to include in the title about the filter that
is applied.&nbsp; <span style="color: rgb(102, 102, 204);"></span>You
can override the default implementation of the
title bar
with a different component by using the <code>title</code>
facet.&nbsp; <br style="color: rgb(255, 153, 0);">
</p>
</li>
<li>
<p>Action Bar (top) - in the first row of the table, displays
controls that operate on the
table and its data. This area contains the following sub areas:</p>
</li>
<ul>
<li>
<p>Actions - displays local actions that apply to
the objects in the table. You must provide the components for each
action, by specifying them in the <code>actionsTop</code>
facet.&nbsp; You can specify the same actions for the Action Bar
(bottom) area in the <code>actionsBottom</code> facet.<br>
</p>
</li>
</ul>
<ul>
<li>
<p>View-Changing
Controls - displays controls for changing the view of the
table data, such as custom filtering and sorting. This area
contains the following&nbsp; sub areas: <br>
</p>
</li>
<ul>
<li>
<p> Filter - displays a drop down menu of filter options,
which allow users to select criteria to be used to determine the items
to display. The component provides a default implementation for adding
options when the Custom filter becomes active, to display the filter
panel, etc. However, you must implement your filters
through custom options. An example
filter is shown in <span style="color: rgb(255, 153, 0);"><a
href="table.html#Filter.java">Filter.java.</a></span></p>
</li>
<li>Clear Sort - displays a button that is used to remove
all sorting of the table.&nbsp; Use the <code>clearTableSortButton</code>
attribute to display the clear table sort button. </li>
<li>
<p><span
style="color: rgb(255, 0, 0); text-decoration: line-through;"></span>Sort
- displays a
toggle button for the sort panel. Clicking this button
opens and closes an embedded panel with custom sort
options. The panel
opens inside the table below the Action Bar (top).&nbsp; Use the <code>sortPanelToggleButton
</code>attribute
to display the default sort button with a default
layout of the sort panel.&nbsp; You can
provide custom content for the sort panel by using the <code>sortPanel</code>
facet. </p>
</li>
<li>
<p>Preferences
- displays a toggle button for setting the
user's preferences. Clicking this
button opens and closes an embedded
panel with view preferences. The preferences panel opens inside
the table below
the Action Bar (top). You must provide the content of
the preferences panel by using the <code>preferencesPanel</code>
facet. There is no
default implementation of the preferences panel content, and therefore
no attribute to specify that the button should be displayed. <br>
</p>
</li>
</ul>
<li>
<p>Vertical Pagination - The Vertical Pagination area displays a
paginate button, which allows users to switch between viewing the table
as multiple pages, or as a single scrolling page.&nbsp; You can specify
the <code>paginateButton</code>&nbsp; attributes to display the
default paginate button.&nbsp; Note that the Vertical
Pagination area is limited to this button. You cannot use extra
pagination controls in this area, as you can in the bottom Pagination
area.&nbsp;</p>
</li>
</ul>
<li>
<p>Action Bar (bottom)</p>
</li>
<ul>
<li>
<p>Actions - displays local actions that apply to
the objects in the table. You must provide the implementation for each
table action, by using the <code>actionsBottom</code> facet . The
same actions can exist for the Table both the "Action
Bar
(top)" and "Action Bar
(bottom)" sections</p>
</li>
<li>
<p>Pagination Controls
- displays controls for pagination, including the
paginate button, which allows users to switch between viewing the table
as multiple pages, or as a single scrolling page. The Pagination area
also includes buttons for turning the pages in sequence, jumping to a
specific page, and jumping to the first or last page. You can specify
the <code>paginateButton</code> and <code>paginateControls</code>
attributes to display the default layout&nbsp; of the Pagination area. <code></code></p>
</li>
</ul>
<li>
<p>Footer -&nbsp; displays a footer across all columns at the
bottom of the table. You can specify the <code>footerText</code>
attribute to display footer content with a default layout, or specify a
component for the footer by using the <code>footer</code> facet.</p>
</li>
</ul>
<a name="diagram"></a>The
following diagram shows
the relative location of the table areas and facets that can be used
for each area. The areas that are specified with the <code>ui:table</code>
tag&nbsp; attributes are highlighted<span
style="color: rgb(102, 102, 204);"> </span>in blue.&nbsp; The grayed
out area
is controlled with ui:<code>tableRowGroup</code> and <code>ui:tableColumn</code>
tags, but is shown here for context.<br>
<br>
<br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="2">
<tbody>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);"
rowspan="1" colspan="1"><span style="color: rgb(0, 0, 0);">Title
Bar <code>title</code> <br>
</span></td>
</tr>
<tr style="color: rgb(0, 0, 0);">
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);"
rowspan="1" colspan="1">Action
Bar (top) &nbsp;
<table style="text-align: left; width: 100%;" border="1"
cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;">Actions <code>actionsTop </code></td>
<td style="vertical-align: top;">View-Changing Controls<br>
<table style="text-align: left; width: 100%;" border="1"
cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;">Filter<br>
<code>filter</code></td>
<td style="vertical-align: top;">Sort<br>
<code></code></td>
<td style="vertical-align: top;">Clear Sort </td>
<td style="vertical-align: top;">Preferences</td>
</tr>
</tbody>
</table>
</td>
<td style="vertical-align: top;">Vertical
Pagination <code></code></td>
</tr>
<tr style="color: rgb(0, 0, 0);">
<td style="vertical-align: top;" rowspan="1" colspan="3">Embedded
Panels <code>filterPanel sortPanel preferencesPanel</code></td>
</tr>
</tbody>
</table>
<code></code> </td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">
<table style="text-align: left; height: 223px; width: 100%;"
border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Header <br>
</td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Header<br>
</td>
</tr>
<tr style="color: rgb(153, 153, 153);">
<td
style="vertical-align: top; background-color: rgb(232, 232, 232);"
rowspan="1" colspan="2">Group
Header Bar&nbsp; </td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
style="font-style: italic;">Table
data</span> <code></code><br>
<code> <br>
<br>
<br>
</code></td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
style="font-style: italic;">Table
data </span><code></code><br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Footer</td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Footer <br>
</td>
</tr>
<tr style="color: rgb(153, 153, 153);">
<td
style="vertical-align: top; background-color: rgb(232, 232, 232);"
rowspan="1" colspan="2">Group
Footer Bar&nbsp; <br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
Column Footer </td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
Column Footer </td>
</tr>
<tr>
<td style="vertical-align: top;" rowspan="1" colspan="2">Action
Bar (bottom)<br>
<table style="text-align: left; width: 100%;" border="1"
cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;">Actions <code>actionsBottom</code><br>
</td>
<td style="vertical-align: top;">Pagination Controls<br>
</td>
</tr>
</tbody>
</table>
</td>
</tr>
</tbody>
</table>
<big><span style="color: rgb(0, 0, 0);"> </span></big></td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);"
rowspan="1" colspan="1"><span style="color: rgb(0, 0, 0);">Footer<code></code></span><code>
</code></td>
</tr>
</tbody>
</table>
<ul>
</ul>
<h3 style="color: rgb(0, 0, 0);">Buttons and Controls</h3>
<span style="color: rgb(0, 0, 0);">The following attributes can
be specified to add buttons and controls to the table:</span><br
style="color: rgb(0, 0, 0);">
<ul style="color: rgb(0, 0, 0);">
<li>
<p><code>clearSortButton </code>adds a button to the View-Changing
Controls area that clears any sorting of the
table.</p>
</li>
<li>
<p><code>deselectMultipleButton&nbsp; </code>adds a button for
tables in which multiple rows can be
selected, to allow users to deselect all table rows that are currently
displayed.</p>
</li>
<li>
<p><code>deselectSingleButton </code>adds a button for tables in
which only a single table row
can be selected at a time, to allow users to deselect a column of radio
buttons </p>
</li>
<li>
<p><code>paginateButton </code>adds a button
to allow users to switch between
viewing all data on a single page (unpaginated) or to see data in
multiple pages (paginated).</p>
</li>
<li>
<p><code>paginationControls </code>adds table
pagination controls to allow users to change which page is
displayed.</p>
</li>
<li>
<p><code>selectMultipleButton </code>adds a button that is used
for selecting multiple rows.&nbsp;<br>
</p>
</li>
<li>
<p><code>sortPanelToggleButton</code>&nbsp; adds a button that is
used to open and close the sort panel. </p>
</li>
</ul>
<span style="color: rgb(0, 0, 0);">
</span>
<h3 style="color: rgb(0, 0, 0);">Cell Spacing and Shading</h3>
<p style="color: rgb(0, 0, 0);">The following attribute can be
specified to change the spacing and shading weight of the table:</p>
<ul style="color: rgb(0, 0, 0);">
<li>
<p><code>cellPadding&nbsp;</code> specifies the amount of
whitespace that
should be placed between the cell contents and the cell borders in all
the cells of the table. </p>
</li>
<li>
<p><code>cellSpacing&nbsp;</code> specifies the amount of
whitespace
that should be placed between cells, and between the edges of the table
content area and the sides of the table. </p>
</li>
<li>
<p><code>lite&nbsp;</code> renders the table in a style
that makes the table look lighter weight.</p>
</li>
</ul>
<span style="color: rgb(0, 0, 0);">
</span>
<h3 style="color: rgb(0, 0, 0);">Headers</h3>
<p style="color: rgb(0, 0, 0);">The table component allows
for multiple headers. The following types of headers are supported:<br>
</p>
<ul style="color: rgb(0, 0, 0);">
<li>Column header - confined to the column for which
it is defined, and displayed by default at the top of the
table,
below the Action Bar and above all row groups.&nbsp; Column headers are
controlled with
attributes in the <code>ui:tableColumn</code> tag. User interface
guidelines recommend
that column headers are rendered once for each table. In tables with
multiple groups, the column headers should be defined in the <code>ui:tableColumn</code>
tags that are contained in the first <code>ui:tableRowGroup</code>
tag.
See the <a href="tableColumn.html"><code>ui:tableColumn</code>
documentation</a> for more
information. <br>
</li>
</ul>
<ul style="color: rgb(0, 0, 0);">
<li>Group header - spans across all table columns,
and is displayed above each row group. The first group header is
displayed below the column headers, above the table data.&nbsp; Group
headers for any other groups specified in the table are displayed above
the data rows for the group. Group headers are set in the <code>ui:tableRowGroup</code>
tag.&nbsp; See the <a href="tableRowGroup.html"><code>ui:tableRowGroup</code>
documentation</a> for more
information.</li>
</ul>
<h3 style="color: rgb(0, 0, 0);">Footers</h3>
<p style="color: rgb(0, 0, 0);">The table component allows
for multiple footers. The following types of footers are supported:<br>
</p>
<ul>
<li style="color: rgb(0, 0, 0);">
<p>Footer - spans the full
width of the table, and displayed at the bottom of the table. Only one
table footer is displayed in each table. The table footer&nbsp; is
defined in the <code>ui:table</code> tag.<br>
</p>
</li>
<li style="color: rgb(0, 0, 0);">
<p>Column footer - confined to the
column for which it is defined, and displayed by default at the bottom
of the column. In tables with multiple groups of rows, each group can
display its own column footer. The column footer is defined in <code>ui:tableColumn</code>
tags. See the <a href="tableColumn.html"><code>ui:tableColumn</code>
documentation</a> for more
information.</p>
</li>
<li>
<p><span style="color: rgb(0, 0, 0);">Table column footer -
confined to the column for which
it is defined, and displayed by default near the bottom of the table,
below all row groups, and above the Action Bar (bottom). User interface
guidelines recommend
that table column footers are rendered once for each table. In tables
with multiple groups, the table column footers should be defined in the
<code>ui:tableColumn</code> tags that are contained in the first <code>ui:tableRowGroup</code>
tag. See the </span><a href="tableColumn.html"
style="color: rgb(0, 0, 0);"><code>ui:tableColumn</code>
documentation</a><span style="color: rgb(102, 102, 204);"><span
style="color: rgb(0, 0, 0);"> for more
information. </span><br>
</span> </p>
</li>
</ul>
<h3>Facets</h3>
The <code>ui:table</code> tag supports the following facets, which
allow you to customize the
layout&nbsp; of the component.<br>
<br>
<span style="color: rgb(255, 153, 0);"></span><br>
<table style="width: 100%;" border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;"><span style="font-weight: bold;">Facet
Name</span><code><br>
</code></td>
<td style="vertical-align: top; font-weight: bold;">Table Item
Implemented by the Facet<br>
</td>
</tr>
<tr>
<td><code>actionsBottom</code></td>
<td>Actions area of
the Action Bar (bottom).<br>
</td>
</tr>
<tr>
<td><code>actionsTop</code></td>
<td>Actions area of
the Action Bar (top).<br>
</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>Drop down menu for
selecting a filter, in the Filter area of the Action Bar
(top).<br>
</td>
</tr>
<tr>
<td><code>filterPanel</code></td>
<td>Embedded panel for
specifying custom filter options, which is displayed when user selects
the Custom Filter option from the filter drop down menu. The
Custom Filter option is a recommended option that you can provide in
the drop down component that you specify in the filter
facet.&nbsp; The Custom Filter can be used to give users greater
control over filtering. The <a href="table.html#TableFilter">Filter
example</a>
explains filters in more detail.<span style="color: rgb(255, 153, 0);"><br>
</span></td>
</tr>
<tr>
<td><code>footer</code></td>
<td>Footer that spans
the
width of the table. <br>
</td>
</tr>
<tr>
<td><code>preferencesPanel</code></td>
<td>Panel displayed when
the preferences
toggle button is
clicked, to allow users to specify
preferences for viewing the table.<br>
</td>
</tr>
<tr>
<td><code>sortPanel</code></td>
<td>Panel displayed when
the sort toggle
button is clicked, to
allow users to specify sort
options.<br>
</td>
</tr>
<tr>
<td><code>title</code></td>
<td>Title in the top bar
of
the table.<br>
</td>
</tr>
</tbody>
</table>
<br>
<h3><a name="JavaScript"></a>Client-side
JavaScript
Functions</h3>
<p>The following JavaScript
functions are available in any page that uses the <code>ui:table</code>
tag. After the table is rendered, the functions you specify in the JSP
page can be invoked directly on the rendered HTML elements. For
example:
</p>
<code>var table =
document.getElementById("form1:table1");<br>
var count = table.getAllSelectedRowsCount();<br>
<br>
</code>
Note:
To use the JavaScript functions, <code>formElements.js</code> file
must be included in the page. The file is automatically included
by
the basic components such as the button and dropDown components.<br>
<br>
<span style="color: rgb(255, 153, 0);"><br>
</span>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;"><span style="font-weight: bold;">Function
Name</span><br>
</td>
<td style="vertical-align: top; font-weight: bold;">Purpose<br>
</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>confirmSelectedRows(message)<br>
</code></td>
<td style="vertical-align: top;">Confirm the number of
selected rows affected by an action such as edit, archive, etc. </td>
</tr>
<tr>
<td style="vertical-align: top;"><code>confirmDeleteSelectedRows()</code></td>
<td style="vertical-align: top;">Confirm the number of
selected rows affected by a delete action.</td>
</tr>
<tr>
<td><code><span style="">filterMenuChanged()</span></code></td>
<td>Toggle the filter panel when the user selects Custom
Filter in the Filter menu.<span style="color: rgb(102, 102, 204);"> </span>
</td>
</tr>
<tr>
<td><code>getAllSelectedRowsCount()</code></td>
<td> Get the number of
selected rows in the table, including the rows that are rendered
in the
current page, and rows that are hidden from view on other pages.<br>
</td>
</tr>
<tr>
<td><code>getAllHiddenSelectedRowsCount()</code></td>
<td>Get the number of
selected rows in the table that are on pages that are not currently
displayed. <br>
</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>getAllRenderedSelectedRowsCount()</code></td>
<td style="vertical-align: top;">Get the number of
selected rows
that are currently rendered in the table. This function does not count
the rows that are hidden from view on other pages. Note that rows might
be rendered but not visible, and invisible rows are counted.&nbsp; See
the description of the <code>visible </code>and <code>rendered </code>attributes.
<br>
</td>
</tr>
<tr>
<td><code>initAllRows()</code></td>
<td>Initialize all rows displayed
in the table when the state
of selected components change,
such as when checkboxes or radiobuttons are used to select or deselect
all rows. <br>
</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>toggleFilterPanel()</code></td>
<td style="vertical-align: top;">Open and close the custom filter
panel.</td>
</tr>
<tr>
<td style="vertical-align: top;"><code>togglePreferencesPanel()</code></td>
<td style="vertical-align: top;">Open and close the table
preferences panel.</td>
</tr>
</tbody>
</table>
<ul>
</ul>
<ul>
</ul>
<br>
<h3>Notes about <code>ui:table</code> tag</h3>
<h4><span style="font-weight: bold;">Life Cycle</span></h4>
See the <a href="tableRowGroup.html#Lifecycle">Lifecycle
description </a>in
the documentation for the <code>ui:tableRowGroup</code> component.<br>
<h4><span style="font-weight: bold;"><a name="LayoutTables"></a>Layout
Tables</span></h4>
<span style="color: rgb(0, 0, 0);">You should not use the </span><code
style="color: rgb(0, 0, 0);">ui:table</code><span
style="color: rgb(0, 0, 0);"> tag for page layout. The table
component renders elements for a table title, columns headers, and row
headers. These elements should not be used in a layout table, and
create an
accessibility issue.&nbsp; Use a standard HTML </span><code
style="color: rgb(0, 0, 0);">&lt;table&gt;</code><span
style="color: rgb(0, 0, 0);"> element, a </span><code
style="color: rgb(0, 0, 0);">ui:propertySheet</code><span
style="color: rgb(0, 0, 0);"> tag, or the JavaServer Faces </span><code
style="color: rgb(0, 0, 0);">h:dataTable</code><span
style="color: rgb(0, 0, 0);"> tag to perform page layout. If
your application needs to iterate over the same components as in
jato:tiledView, use a custom tag.&nbsp; The JSP Standard Tag Library
(JSTL) <code>forEach</code> tag might also be useful, but there are
interoperability issues with JSTL and JavaServer Faces, so use with
caution. </span><br>
<h4><span style="font-weight: bold;">Nested Tables</span></h4>
<span style="text-decoration: line-through;"></span>
<span style="color: rgb(0, 0, 0);">Although it is technically
possible to nest tables with the <code>ui:tabl</code>e tag, you should
not use the table component to layout multiple tables for the following
reasons:<br>
</span>
<ul style="color: rgb(0, 0, 0);">
<li>
<p>Nested tables create
accessibility issues, as described in <a href="#LayoutTables">Layout
Tables.</a></p>
</li>
<li>
<p>UI guidelines do not
support nested tables.</p>
</li>
<li>
<p>Styles used by the
table component might not display properly because they are not
intended to be nested.</p>
</li>
<li>
<p>Table sorting is not
supported in nested tables.&nbsp; The table component does not
support complex components that maintain state not defined by the
JavaServer Faces <code>EditableValueHolder</code> interface. Since a
single
component instance is
used when iterating over DataProvider rows, only the state of an <code>EditableValueHolder</code>
can be maintained. <br>
</p>
</li>
</ul>
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">If you need to display similar
types of data using the same table
layout, you should use a group table. Sorting is supported for group
tables because they are
configured using separate tableRowGroup instances.</span><br
style="color: rgb(0, 0, 0);">
<span style="font-weight: bold; color: rgb(0, 0, 0);"><br>
Validation</span><br style="color: rgb(0, 0, 0);">
<p style="color: rgb(0, 0, 0);">To maintain state, the table
component submits the surrounding form.
For example, when the table is sorted, the form is submitted to update
checkbox values. Likewise, the form might be submitted to update text
field values when the table component must display a new page of a
paginated table.&nbsp; These components cannot be updated if validation
fails for any reason. If a component requires a value to be entered,
and no value is entered, validation fails.&nbsp; <br>
</p>
<p style="color: rgb(0, 0, 0);">Consider the case where a
required text field and
table
appear on the same page. If the user clicks on a table sort button
while the required text field has no value, the sort action is never
invoked because a value was required and validation failed. <br>
</p>
<p style="color: rgb(0, 0, 0);">To prevent this validation issue,
you can do either of the following:<br>
</p>
<ul style="color: rgb(0, 0, 0);">
<li>Place the table and the required component in separate forms, to
allow the table data to be submitted separately from the required
field. The table can then be sorted without triggering a validation
failure on a required text field that has no value because the text
field's form is not submitted.&nbsp; However, the values of one form
are lost when the other form is submitted, which is expected HTML
behavior. In this example, if a user places a value in a required text
field and then sorts the table, the value in the text field is
lost.&nbsp; <br>
</li>
</ul>
<ul style="color: rgb(0, 0, 0);">
<li>Place the table in a virtual
form by setting the <code>internalVirtualForm</code>
method of the Table component to true.&nbsp; For example: <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp; <code>// Set table component.<br>
&nbsp;&nbsp;&nbsp; public void setTable(Table table) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.table = table;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This binding is used only
for the internal virtual form example.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table.setInternalVirtualForm(true);<br>
&nbsp;&nbsp;&nbsp; }</code><br>
<br>
A virtual form allows the table data to be
submitted separately from the
other components on the page, just as using two separate HTML forms
would allow.&nbsp; Placing
the table in a virtual form allows the table sort action to complete
because validation for the required text field is not processed. This
behavior is similar to that caused by setting the <code>immediate</code>
property of a
button, but allows
table children to be updated so that selected checkbox values may be
sorted, for example. The
advantage to using a virtual form is that the values of the other
components on the page are not lost when table data is submitted.<br>
</li>
</ul>
<p style="margin-left: 40px; color: rgb(0, 0, 0);">
</p>
<h4 style="color: rgb(0, 0, 0);"><span style="font-weight: bold;">Value
Bindings</span></h4>
<span style="color: rgb(0, 0, 0);">Value
expressions that use DataProviders must use the following syntax:
</span><br style="color: rgb(0, 0, 0);">
<code style="color: rgb(0, 0, 0);">#{sourceVar['PERSON.NAME']}<br>
#{sourceVar.value['PERSON.NAME']}<br>
</code>
<p style="color: rgb(0, 0, 0);">Note
that the word <code>value</code> is between the DataProvider and the
FieldKey to bind. The&nbsp; brackets [] are required
only if the FieldKey contains dot syntax.&nbsp; <br>
</p>
<span style="color: rgb(0, 0, 0);">For example:</span><br
style="color: rgb(0, 0, 0);">
<ul style="color: rgb(0, 0, 0);">
<li>To
bind to a FieldKey named <code>last</code>, where the <code>sourceVar</code>
property of the table component is <code>names</code>:<br>
<p><code>#{names.value.last}</code></p>
</li>
</ul>
<div style="margin-left: 40px; color: rgb(0, 0, 0);"><code></code></div>
<code style="color: rgb(0, 0, 0);"></code><br
style="color: rgb(0, 0, 0);">
<ul style="color: rgb(0, 0, 0);">
<li>To
bind to a property named <code>test</code>, where the backing bean is
named <code>TableBean</code>.</li>
</ul>
<div style="margin-left: 40px; color: rgb(0, 0, 0);"><code>#{TableBean.test}</code><br>
<code></code></div>
<h4 style="color: rgb(0, 0, 0);"><span style="font-weight: bold;">Method
Bindings</span></h4>
<span style="color: rgb(0, 0, 0);">A JavaServer Faces issue prevents
method bindings from
working in a DataProvider. To work around the issue, you can bind to a
method in a backing bean, and use that method to retrieve values from
the DataProvider. </span><span
style="font-weight: bold; color: rgb(0, 0, 0);"><br>
<br>
</span><span style="color: rgb(0, 0, 0);">For example, the
following
syntax to bind to a DataProvider does not work:</span><br
style="color: rgb(0, 0, 0);">
<br>
<code>&lt;ui:hyperlink text="#{name.last}" action="#{name.action}"/&gt;</code><br>
<br>
Instead of using a DataProvider to handle the action (which breaks the
MVC paradigm), bind the action to a method in the backing bean. For
example:<br>
<br>
<code>&lt;ui:hyperlink text="#{name.last}"
action="#{TableBean.action}"/&gt;</code><br>
<br>
In the <code>TableBean.action</code> method, you may invoke the
following code to
retrieve values from the DataProvider:<br>
<br>
<code>public String action() {<br>
&nbsp;&nbsp;&nbsp; FacesContext context =
FacesContext.getCurrentInstance();<br>
&nbsp;&nbsp;&nbsp; ValueBinding vb =
context.getApplication().createValueBinding("#{name.first}");<br>
&nbsp;&nbsp;&nbsp; String first = (String) (vb.getValue(context));<br>
&nbsp;&nbsp;&nbsp; return "whatever";<br>
}</code><br>
<br>
If you have an instance of the DataProvider, you can also invoke the
following code to retrieve values: <br>
<br>
<code>public String action() {<br>
&nbsp;&nbsp;&nbsp; FacesContext context =
FacesContext.getCurrentInstance();<br>
&nbsp;&nbsp;&nbsp; ValueBinding vb =
context.getApplication().createValueBinding("#{name.tableRow}");<br>
&nbsp;&nbsp;&nbsp; RowKey row = (RowKey) (vb.getValue(context));<br>
&nbsp;&nbsp;&nbsp; String first = (String)
provider.getFieldKey("first"), row)<br>
}</code><br>
<h4 style="color: rgb(0, 0, 0);"><span style="font-weight: bold;">Logging</span></h4>
To see messages logged by the table component, set the following global
defaults in your JDK's "jre/lib/logging.properties" file.
Alternatively, you can use a different file by specifying a filename
with the java.util.logging.config.file system property (e.g., setenv
CATALINA_OPTS -Djava.util.logging.config.file=myFile).<br>
<br>
<code></code><code>java.util.logging.ConsoleHandler.level = FINE <br>
com.sun.rave.web.ui.event.TablePaginationActionListener.level = FINE <br>
com.sun.rave.web.ui.event.TableSelectPhaseListener.level = FINE <br>
com.sun.rave.web.ui.event.TableSortActionListener.level = FINE <br>
com.sun.rave.web.ui.component.Table.level = FINE<br>
com.sun.rave.web.ui.component.TableActions.level = FINE <br>
com.sun.rave.web.ui.component.TableColumn.level = FINE <br>
com.sun.rave.web.ui.component.TableFooter.level = FINE <br>
com.sun.rave.web.ui.component.TableHeader.level = FINE <br>
com.sun.rave.web.ui.component.TablePanels.level = FINE <br>
com.sun.rave.web.ui.component.TableRowGroup.level = FINE <br>
com.sun.rave.web.ui.renderer.TableActionsRenderer.level = FINE <br>
com.sun.rave.web.ui.renderer.TableColumnRenderer.level = FINE <br>
com.sun.rave.web.ui.renderer.TableFooterRenderer.level = FINE <br>
com.sun.rave.web.ui.renderer.TableHeaderRenderer.level = FINE <br>
com.sun.rave.web.ui.renderer.TablePanelsRenderer.level = FINE <br>
com.sun.rave.web.ui.renderer.TableRenderer.level = FINE <br>
com.sun.rave.web.ui.renderer.TableRowGroupRenderer.level = FINE<br>
</code><code></code><br>
<h3 style="color: rgb(0, 0, 0);">Examples</h3>
<span style="color: rgb(0, 0, 0);">The following examples use a
backing bean called </span><a href="table.html#Example:_TableBean_"
style="color: rgb(0, 0, 0);">TableBean</a><span
style="color: rgb(0, 0, 0);">
and </span><a href="table.html#UtilityClasses"
style="color: rgb(0, 0, 0);">some
utility classes</a><span style="color: rgb(0, 0, 0);">, which are
included after the examples.&nbsp;
Additional examples are shown in the </span><code
style="color: rgb(0, 0, 0);"><a href="tableRowGroup.html">ui:tableRowGroup</a></code><span
style="color: rgb(0, 0, 0);">
and </span><code style="color: rgb(0, 0, 0);"><a
href="tableColumn.html">ui:tableColumn</a></code><span
style="color: rgb(0, 0, 0);">
documents.</span><br style="color: rgb(0, 0, 0);">
<br>
<span style="font-weight: bold;">Examples in this file:</span>
<div style="margin-left: 40px;">
<p><a href="table.html#BasicTable">Example
1: Basic Table</a></p>
<p><a href="table.html#CustomTitle">Example
2: Custom Title in Table</a></p>
<p><a href="table.html#PaginatedTable">Example
3: Paginated Table</a></p>
<p><a href="table.html#TableSortPanel">Example
4: Table Sort Panel</a></p>
<p><a href="table.html#TablePreferences">Example
5: Table Preferences</a></p>
<p><a href="table.html#TableFilter">Example
6: Table Filter</a></p>
<p><a href="table.html#TableActions">Example
7: Table Actions</a></p>
</div>
<p style="font-weight: bold;">Supporting files:</p>
<div style="margin-left: 40px;">
<p><a href="table.html#Example:_TableBean_">TableBean
backing bean </a></p>
<p><a href="table.html#UtilityClasses">Utility
classes used in the examples</a></p>
</div>
<h4><a name="BasicTable"></a>Example 1: Basic Table</h4>
This example shows how to create a basic
table.<br>
<br>
<code>&lt;!-- Basic Table --&gt;<br>
&lt;ui:table id="table1" title="Basic Table"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<br>
<a name="CustomTitle"></a><span style="font-weight: bold;">Example 2:
Custom Title</span><br>
<span style="color: rgb(0, 0, 0);">This example shows how
to
create a custom title for a table, using the <code></code><code>title</code>
facet. When
you
use the
title
attribute as shown in the <a href="#BasicTable">BasicTable</a>
example, the
component provides a default title implementation which can include
information regarding paginated rows and applied
filters. This example implements the title with a <code>ui:staticText</code>
tag in
the <code>title</code> facet.</span><br>
<code><br>
&lt;!-- Custom Title --&gt;<br>
&lt;ui:table id="table1"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&nbsp; &lt;!-- Title --&gt;<br>
&nbsp; &lt;f:facet name="title"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:staticText text="Custom Title"/&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
&lt;/ui:table&gt;</code><br>
<h4><a name="PaginatedTable"></a>Example 3: Paginated Table<br>
</h4>
This example shows how to create a paginated
table. The default number of rows to be displayed for a paginated table
is 25 per page.<span style="color: rgb(102, 102, 204);"> </span>You
can override this value with
the
<code>rows</code> attribute<span style="color: rgb(102, 102, 204);"> </span>in
the <code>ui:tableRowGroup</code> tag. <br>
<br>
Note: The rows attribute is used only for paginated tables.<br>
<br>
<code>&lt;!-- Paginated Table --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; paginateButton="true"<br>
&nbsp;&nbsp;&nbsp; paginationControls="true"<br>
&nbsp;&nbsp;&nbsp; title="Paginated Table"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"
sourceVar="name" rows="5"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<h4><a name="TableSortPanel"></a>Example 4: Sort Panel<br>
</h4>
This example shows how to add
the sort panel. You
can use the
default sort panel by setting the
<code>sortPanelToggleButton</code>
attribute to true. This button opens an embedded panel in the table,
displaying a default implementation.&nbsp;&nbsp; The default
implementation shows
one, two, or three drop down menus that represent the primary,
secondary, and
tertiary sorts. The menus
list the column headers for each sortable column. If a column is not
sortable, it is not shown as a sortable option. If there are
only two sortable columns, only the primary and secondary drop down
menus are shown. If there is only one sort, only the
primary drop down menu is shown. Next to each sort menu is a menu to
select ascending or descending sort order.<span
style="color: rgb(102, 102, 204);"><br>
</span>
<p> </p>
<code>&lt;!-- Sort Panel --&gt;<br>
&lt;ui:table id="table"<br>
&nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
&nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
&nbsp;&nbsp;&nbsp; title="Sort Panel"&gt;<br>
&nbsp; &lt;!-- Insert tableRowGroup tag here --&gt;<br>
&lt;/ui:table&gt;</code><br>
<br>
To override the default sort panel, use the <code>sortPanel</code>
facet.&nbsp; The sort panel toggle
button is shown when you use the facet, so you do not
need to specify the <code>sortPanelToggleButton</code>
attribute. <br>
<code></code>
<h4><a name="TablePreferences"></a>Example 5: Table Preferences<br>
</h4>
<code></code>This example shows how
to add the preferences toggle button and the table panel. The
preferences panel toggle button is
shown only when you use the <code>preferencesPanel</code>
facet.
The button opens an embedded panel in the table, displaying the
contents that you provide in the <code>preferencesPanel</code> facet. <br
style="color: rgb(102, 102, 204);">
<br style="color: rgb(102, 102, 204);">
In this example, the preferences panel is used to set
the number
of paginated rows with the rows attribute of <code>ui:tableRowGroup</code>.
See the <a href="#Preferences.java">Preferences.java</a> example
utility class, which provides functionality for preferences for
this example.<br>
<code></code><br>
<code>&lt;!-- Preferences --&gt;<br>
&lt;ui:table id="table1" paginationControls="true"
title="Preferences"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rows="#{TableBean.groupA.preferences.rows}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
<br>
&nbsp; &lt;!-- Preferences Panel --&gt;<br>
&nbsp; &lt;f:facet name="preferencesPanel"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:subview id="preferencesPanel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
page="preferencesPanel.jsp"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
&lt;/ui:table&gt;</code><br>
<br style="color: rgb(102, 102, 204);">
<span style="font-weight: bold;">preferencesPanel.jsp</span><br
style="color: rgb(102, 102, 204);">
<br>
This example shows the contents of the <code>preferencesPanel.jsp</code>
file included in the JSP page example above.<br>
<br>
<code>&lt;!-- Preferences Panel --&gt;<br>
&lt;ui:textField id="rows"<br>
&nbsp;&nbsp;&nbsp; columns="5"<br>
&nbsp;&nbsp;&nbsp; label="Rows Per Page:"<br>
&nbsp;&nbsp;&nbsp; labelLevel="2"<br>
&nbsp;&nbsp;&nbsp; onKeyPress="if (event.keyCode==13) {var
e=document.getElementById('form1:table1:preferencesPanel:submit'); if
(e != null) e.click(); return false}"<br>
&nbsp;&nbsp;&nbsp;
text="#{TableBean.groupA.preferences.preference}"/&gt;<br>
&lt;ui:markup tag="div" styleClass="TblPnlBtnDiv"&gt;<br>
&nbsp; &lt;ui:button id="submit"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{TableBean.groupA.preferences.applyPreferences}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; primary="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="OK"/&gt;<br>
&nbsp; &lt;ui:button id="cancel"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onClick="togglePreferencesPanel();
return false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Cancel"/&gt;<br>
&lt;/ui:markup&gt;<br>
<br>
&lt;!-- Note: If the user presses the enter key while the text field
has focus,<br>
&nbsp;&nbsp;&nbsp;&nbsp; the page will be submitted incorrectly, unless
we capture the onKeyPress<br>
&nbsp;&nbsp;&nbsp;&nbsp; event and invoke the click method of the
submit button. --&gt;</code><br>
<br>
<span style="font-weight: bold;">preferences.js</span><br>
<br>
This example shows the contents of the preferences.js file used in the <code>tablePreferencesPanel.jsp</code>&nbsp;
example
above. The <code>togglePreferencesPanel()</code> JavaScript function
is used with
the <code>onClick</code> attribute of a <code>ui:button</code> tag.<br>
<br>
<code>// Use this function to toggle the preferences panel open or
closed. This<br>
// functionality requires the filterId of the table component to be set.<br>
function togglePreferencesPanel() {<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; table.togglePreferencesPanel();<br>
}</code><br>
<h4><a name="TableFilter"></a>Example 6: Table Filter<br>
</h4>
<p>This example shows how to add filters using a filter drop down
menu and the filter panel. In this example, the filter
panel is used to set a custom filter.
The custom filter removes all rows from the view that do not match the
given last name. <span style="color: rgb(0, 0, 0);">See the </span><a
href="#Filter.java" style="color: rgb(0, 0, 0);">Filter.java</a><span
style="color: rgb(0, 0, 0);">
example, which provides the&nbsp; functionality for filters for
this example.</span></p>
<p style="color: rgb(0, 0, 0);">Basic
filters
are filters that
you define for the users of your application. Custom filters enable
users to specify the data to be used by the table component to
determine which table entries to display.&nbsp; You specify the basic
filter names as items in a <a href="dropDown.html"><code>ui:dropDown</code>
</a>tag in the <code>filter</code>
facet. If you want to allow users to use a custom filter, include a
"Custom Filter" item as one of the <code>ui:dropDown</code>
items. <br>
</p>
<p style="color: rgb(0, 0, 0);">If you
include a "Custom Filter" item in
the Filter drop down menu, you can allow users to
open a filter panel to filter the table data using a custom
filter.&nbsp; When the Custom
Filter option is selected, an embedded panel in the table is
opened,
displaying the contents that you provide in the <code>filterPanel</code>
facet. The default
custom filter functionality requires you to use the
<code>filterMenuChanged</code> JavaScript function for the <code>onChange</code>
event in the <code>ui:dropDown</code> tag.&nbsp; After the custom
filter is
applied, you should display a non-selectable "Custom
Filter Applied" item in
the
filter drop down menu,&nbsp;
to indicate that a custom filter has been applied. You should also set
the <code>filterText</code> attribute. The table component updates the
table title to
indicate that a basic or custom
filter has been applied by inserting the text <span
style="font-style: italic;">&lt;filterText&gt;</span> Filter Applied. </p>
<p style="color: rgb(0, 0, 0);">The
default
custom filter
functionality depends on a specific value assigned to the
Custom Filter item in the dropDown component. The table component
provides a method named <code>getFilterOptions()</code> to add the
item text and value for the custom filter option to the drop down list.
You can use <code>getFilterOptions()</code> in your backing
bean to append either the
"Custom Filter" or "Custom Filter Applied" item to the basic filter
items. <br>
</p>
<p style="color: rgb(0, 0, 0);">In the <a href="#Filter.java">Filter.java</a>
util example, the
"Custom Filter" and "Custom Filter Applied" items are
assigned
based on&nbsp;the
boolean value <code style="text-decoration: line-through;"></code>
provided
to <code>getFilterOptions(</code><code>)</code>. If
this&nbsp;value is true,
the
"Custom Filter Applied" item value is added. If the value is false,
"Custom Filter" item value is added. The <code>filterMenuChanged</code>
JavaScript function, assigned to the dropDown component's <code>onChange</code>
event,&nbsp; behaves differently depending on
which item is added.&nbsp; See the comments in <a href="#filters.js">filters.js&nbsp;</a>for
more information. <br>
</p>
<p style="color: rgb(0, 0, 0);">The
default custom filter functionality
also depends on the id of the
<code>ui:dropDown</code> tag in the <code>filter</code>
facet. Note that if you use the <code>ui:dropDown</code> tag as the
only component
in the filter facet, the <code>filterId</code> is optional. If you use
a custom
component, or use the <code>ui:dropDown</code> as a child component,
you must
specify a filterID.</p>
<span style="color: rgb(0, 0, 0);">The table
implements functionality to reset the dropDown menu. If you
use the <code>filterId</code> attribute, the menu can be reset
whenever the sort and preferences toggle buttons are clicked. You can
also use the filterMenuChanged JavaScript function to reset the menu at
some other time.&nbsp;&nbsp; Note:
This functionality requires the </span><code
style="color: rgb(0, 0, 0);">selected</code><span
style="color: rgb(0, 0, 0);"> value of the <code>ui:dropDown</code>
tag to be set in order
to
restore the default selected value when the embedded filter panel is
closed.</span><br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);"><br>
</span><span style="color: rgb(102, 102, 204);"><span
style="color: rgb(0, 0, 0);">The filter
code can be placed in a util class, as shown in the </span><a
href="#Filter.java" style="color: rgb(0, 0, 0);">Filter.java</a><span
style="color: rgb(0, 0, 0);"> example, or in a backing bean.</span><span
style="font-weight: bold;"><br>
</span></span><span style="color: rgb(102, 102, 204);"></span><br>
<code>&lt;!-- Filter --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; filterText="#{TableBean.groupA.filter.filterText}"<br>
&nbsp;&nbsp;&nbsp; paginateButton="true"<br>
&nbsp;&nbsp;&nbsp; paginationControls="true"<br>
&nbsp;&nbsp;&nbsp; title="Filter"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
binding="#{TableBean.groupA.tableRowGroup}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rows="5"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
<br>
&nbsp; &lt;!-- Filter --&gt;<br>
&nbsp; &lt;f:facet name="filter"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:dropDown submitForm="true" id="filter"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{TableBean.groupA.filter.applyBasicFilter}" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
items="#{TableBean.groupA.filter.filterOptions}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onChange="if
(filterMenuChanged() == false) return false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.filter.basicFilter}"/&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
<br>
&nbsp; &lt;!-- Filter Panel --&gt;<br>
&nbsp; &lt;f:facet name="filterPanel"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:subview id="filterPanel"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
page="filterPanel.jsp"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
&lt;/ui:table&gt;</code><br>
<br>
<span style="font-weight: bold;">filterPanel.jsp</span><br>
<br>
This example shows the contents of the <code>filterPanel.jsp</code><span
style="font-weight: bold;"> </span>file included in the JSP page in
the example above.<br>
<code><br>
&lt;!-- Filter Panel --&gt;<br>
&lt;ui:textField id="customFilter"<br>
&nbsp;&nbsp;&nbsp; columns="50"<br>
&nbsp;&nbsp;&nbsp; label="Show only rows containing last name:"<br>
&nbsp;&nbsp;&nbsp; labelLevel="2"<br>
&nbsp;&nbsp;&nbsp; onKeyPress="if (event.keyCode==13) {var
e=document.getElementById('form1:table1:filterPanel:submit'); if (e !=
null) e.click(); return false}"<br>
&nbsp;&nbsp;&nbsp; text="#{TableBean.groupA.filter.customFilter}"/&gt;<br>
&lt;ui:markup tag="div" styleClass="TblPnlBtnDiv"&gt;<br>
&nbsp; &lt;ui:button id="submit"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{TableBean.groupA.filter.applyCustomFilter}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; primary="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="OK"/&gt;<br>
&nbsp; &lt;ui:button id="cancel"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mini="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; onClick="toggleFilterPanel(); return
false"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Cancel"/&gt;<br>
&lt;/ui:markup&gt;<br>
<br>
&lt;!-- Note: If the user presses the enter key while the text field
has focus,<br>
&nbsp;&nbsp;&nbsp;&nbsp; the page will be submitted incorrectly, unless
we capture the onKeyPress<br>
&nbsp;&nbsp;&nbsp;&nbsp; event and invoke the click method of the
submit button. --&gt;</code><br>
<br>
<span style="font-weight: bold;"><a name="filters.js"></a>filters.js</span><br>
<br>
This example shows the contents of the <code>filters.js</code><span
style="font-weight: bold;"> </span>file used in the <code>filterPanel.jsp<br>
</code>example above. The <code>toggleFilterPanel()</code>
JavaScript function is used with the <code>onClick</code> attribute of
a <code>ui:button</code> tag to allow the user to close the
filter panel without specifying a filter.<br>
<br>
<code>// Toggle the filter panel from the filter menu.<br>
//<br>
// If the "Custom Filter" option has been selected, the filter panel is
<br>
// toggled. In this scenario, false is returned indicating the onChange
event,<br>
// generated by the filter menu, should not be allowed to continue.<br>
// <br>
// If the "Custom Filter Applied" option has been selected, no action
is taken.<br>
// Instead, the filter menu is reverted back to the original selection.
In this<br>
// scenario, false is also returned indicating the onChange event,
generated by<br>
// the filter menu, should not be allowed to continue.<br>
//<br>
// For all other selections, true is returned indicating the onChange
event, <br>
// generated by the filter menu, should be allowed to continue.<br>
function filterMenuChanged() {<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; return table.filterMenuChanged();<br>
}<br>
<br>
// Use this function to toggle the filter panel open or closed. This<br>
// functionality requires the filterId of the table component to be
set. In <br>
// addition, the selected value must be set as well to restore the
default<br>
// selected value when the embedded filter panel is closed.<br>
function toggleFilterPanel() {<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; table.toggleFilterPanel();<br>
}</code><br>
<h4><a name="TableActions"></a>Example 7: Table Actions<br>
</h4>
<span style="color: rgb(0, 0, 0);">This example shows how to add
actions </span><span style="color: rgb(102, 102, 204);"><span
style="color: rgb(0, 0, 0);">to a table by using the </span><code
style="color: rgb(0, 0, 0);">actionsTop</code><span
style="color: rgb(0, 0, 0);">
and </span><code style="color: rgb(0, 0, 0);">actionsBottom</code><span
style="color: rgb(0, 0, 0);">
facets. Four buttons and a drop down menu are added to the Action Bar
(top) and Action Bar (bottom). When the page is initially
displayed, all actions
are disabled. When the user selects at least one checkbox, the actions
are enabled. If the user deselects all checkboxes, the actions are
disabled again. </span><br>
<br>
<span style="color: rgb(0, 0, 0);">Note that this example defines a
JavaScript function called </span><code style="color: rgb(0, 0, 0);">disableActions</code><span
style="color: rgb(0, 0, 0);">, which is shown in </span><a
href="table.html#actions.js" style="color: rgb(0, 0, 0);">actions.js.
</a><span style="color: rgb(0, 0, 0);">The </span></span><code
style="color: rgb(0, 0, 0);">disableActions</code><span
style="color: rgb(0, 0, 0);"> function is
defined by the developer, and is not part of the table component. </span><br
style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">When the
user clicks on a checkbox, a JavaScript <code>disableActions</code>
function is invoked
with the <code>onClick</code> event.&nbsp; The JavaScript <code>setTimeout</code>
function
is used to ensure checkboxes are selected immediately, instead of
waiting for
the JavaScript function to complete.
See the <a href="#Actions.java">Actions.java</a> example, which
provides functionality for table actions in this example.</span><br
style="color: rgb(0, 0, 0);">
<br>
<code>&lt;!-- Actions --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp;
deselectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp; paginateButton="true"<br>
&nbsp;&nbsp;&nbsp; paginationControls="true"<br>
&nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp;
selectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp; title="Actions"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
binding="#{TableBean.groupA.tableRowGroup}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rows="5"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:checkbox id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
<br>
&nbsp; &lt;!-- Actions (Top) --&gt;<br>
&nbsp; &lt;f:facet name="actionsTop"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsTop"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
page="actionsTop.jsp"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
<br>
&nbsp; &lt;!-- Actions (Bottom) --&gt;<br>
&nbsp; &lt;f:facet name="actionsBottom"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsBottom"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
page="actionsBottom.jsp"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
&lt;/ui:table&gt;</code><code><br>
<br>
</code><span style="font-weight: bold;">actionsTop.jsp</span><br>
<br>
This example shows the contents of the <code>actionsTop.jsp</code><span
style="font-weight: bold;"> </span>file included&nbsp; in the <code>actionsTop</code>
facet in the JSP page in the example above.<br>
<br>
<code>&lt;!-- Actions (Top) --&gt;<br>
&lt;ui:button id="action1"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.delete}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmDeleteSelectedRows() == false)
return false"<br>
&nbsp;&nbsp;&nbsp; text="Delete"/&gt;<br>
&lt;ui:button id="action2"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
false"<br>
&nbsp;&nbsp;&nbsp; text="Action 2"/&gt;<br>
&lt;ui:button id="action3"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
false"<br>
&nbsp;&nbsp;&nbsp; text="Action 3"/&gt;<br>
&lt;ui:button id="action4"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
false"<br>
&nbsp;&nbsp;&nbsp; text="Action 4"/&gt;<br>
&lt;ui:dropDown submitForm="true" id="moreActions"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.moreActions}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp;
items="#{TableBean.groupA.actions.moreActionsOptions}"<br>
&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.actions.moreActions}"/&gt;</code><br>
<br>
<span style="font-weight: bold;">actionsBottom.jsp</span><br>
<br>
This example shows the contents of the <code>actionsBottom.jsp</code><span
style="font-weight: bold;"> </span>file included&nbsp; in the <code>actionsBottom</code>
facet in the JSP page in the example above.<br>
<br>
<code>&lt;!-- Actions (Bottom) --&gt;<br>
&lt;ui:button id="action1"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.delete}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmDeleteSelectedRows() == false)
return false"<br>
&nbsp;&nbsp;&nbsp; text="Delete"/&gt;<br>
&lt;ui:button id="action2"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
false"<br>
&nbsp;&nbsp;&nbsp; text="Action 2"/&gt;<br>
&lt;ui:button id="action3"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
false"<br>
&nbsp;&nbsp;&nbsp; text="Action 3"/&gt;<br>
&lt;ui:button id="action4"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.action}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp; onClick="if (confirmSelectedRows() == false) return
false"<br>
&nbsp;&nbsp;&nbsp; text="Action 4"/&gt;<br>
&lt;ui:dropDown submitForm="true" id="moreActions"<br>
&nbsp;&nbsp;&nbsp; action="#{TableBean.groupA.actions.moreActions}"<br>
&nbsp;&nbsp;&nbsp; disabled="#{TableBean.groupA.actions.disabled}"<br>
&nbsp;&nbsp;&nbsp;
items="#{TableBean.groupA.actions.moreActionsOptions}"<br>
&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.actions.moreActions}"/&gt;</code><br>
<br>
<span style="font-weight: bold;">select.js</span><br>
<br>
This example shows the contents of the <code>select.js</code><span
style="font-weight: bold;"> </span>file used in the example above.<br>
<br>
<code>// Use this function to initialize all rows displayed in the
table when the<br>
// state of selected components change (i.e., checkboxes or
radiobuttons used to<br>
// de/select rows of the table). This functionality requires the
selectId <br>
// property of the tableColumn component to be set.<br>
// <br>
// Note: Use setTimeout when invoking this function. This will ensure
that <br>
// checkboxes and radiobutton are selected immediately, instead of
waiting for <br>
// the onClick event to complete. For example: <br>
//<br>
// onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
function initAllRows() {<br>
&nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; table.initAllRows();<br>
}</code><br>
<br>
<span style="font-weight: bold;"><a name="actions.js"></a></span><span
style="font-weight: bold;">actions.js</span><br>
<br>
This example shows the contents of the <code>actions.js</code><span
style="font-weight: bold;"> </span>file used in the example above.<br>
<br>
<code>// Set disabled state of table actions. If a selection has been
made, actions<br>
// are enabled. If no selection has been made, actions are disabled.<br>
// <br>
// Note: Use setTimeout when invoking this function. This will ensure
that <br>
// checkboxes and radiobutton are selected immediately, instead of
waiting for <br>
// the onClick event to complete. For example: <br>
//<br>
// onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
function disableActions() {<br>
&nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; var selections = table.getAllSelectedRowsCount(); //
Hidden &amp; visible selections.<br>
&nbsp;&nbsp;&nbsp; var disabled = (selections &gt; 0) ? false : true;<br>
<br>
&nbsp;&nbsp;&nbsp; // Set disabled state for top actions.<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsTop:action1").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsTop:action2").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsTop:action3").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsTop:action4").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
dropDown_setDisabled("form1:table1:actionsTop:moreActions", disabled);<br>
<br>
&nbsp;&nbsp;&nbsp; // Set disabled state for bottom actions.<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsBottom:action1").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsBottom:action2").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsBottom:action3").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
document.getElementById("form1:table1:actionsBottom:action4").setDisabled(disabled);<br>
&nbsp;&nbsp;&nbsp;
dropDown_setDisabled("form1:table1:actionsBottom:moreActions",
disabled);<br>
}<br>
<br>
//<br>
// Use this function to confirm the number of selected components
(i.e., <br>
// checkboxes or radiobuttons used to de/select rows of the table),
affected by<br>
// a delete action. This functionality requires the selectId property
of the<br>
// tableColumn component and hiddenSelectedRows property of the
tableRowGroup<br>
// component to be set.<br>
// <br>
// If selections are hidden from view, the confirmation message
indicates the<br>
// number of selections not displayed in addition to the total number of<br>
// selections. If selections are not hidden, the confirmation message
indicates<br>
// only the total selections.<br>
function confirmDeleteSelectedRows() {<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; return table.confirmDeleteSelectedRows();<br>
}<br>
<br>
// Use this function to confirm the number of selected components
(i.e., <br>
// checkboxes or radiobuttons used to de/select rows of the table),
affected by<br>
// an action such as edit, archive, etc. This functionality requires
the <br>
// selectId property of the tableColumn component and hiddenSelectedRows<br>
// property of the tableRowGroup component to be set.<br>
// <br>
// If selections are hidden from view, the confirmation message
indicates the<br>
// number of selections not displayed in addition to the total number of<br>
// selections. If selections are not hidden, the confirmation message
indicates<br>
// only the total selections.<br>
function confirmSelectedRows() {<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; return table.confirmSelectedRows("\n\nArchive all
selections?");<br>
}</code><br>
<h3>faces_config.xml Entry for Managed Bean</h3>
The previous examples are based on managed beans, such as the example
below, added to the<code>
faces_config.xml </code>file.<br>
<br>
<code>&lt;!DOCTYPE faces-config PUBLIC<br>
&nbsp;&nbsp;&nbsp; '-//Sun Microsystems, Inc.//DTD JavaServer Faces
Config 1.0//EN'<br>
&nbsp;&nbsp;&nbsp; 'http://java.sun.com/dtd/web-facesconfig_1_1.dtd'&gt;<br>
<br>
&lt;faces-config&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;The
backing bean for the table example&lt;/description&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-name&gt;TableBean&lt;/managed-bean-name&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-class&gt;table.TableBean&lt;/managed-bean-class&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
&lt;/faces-config&gt;</code><br>
<h3><a name="Example:_TableBean_"></a>TableBean<br>
</h3>
<code>package table;<br>
<br>
import com.sun.rave.web.ui.component.Alarm;<br>
<br>
import java.util.ArrayList;<br>
<br>
import table.util.Group;<br>
import table.util.Name;<br>
<br>
// Backing bean for table examples.<br>
public class TableBean {<br>
&nbsp;&nbsp;&nbsp; // Group util for table examples.<br>
&nbsp;&nbsp;&nbsp; private Group groupA = null; // List (rows 0-19).<br>
&nbsp;&nbsp;&nbsp; private Group groupB = null; // Array (rows 0-9).<br>
&nbsp;&nbsp;&nbsp; private Group groupC = null; // Array (rows 10-19).<br>
<br>
&nbsp;&nbsp;&nbsp; // Alarms.<br>
&nbsp;&nbsp;&nbsp; private static final Alarm down = new
Alarm(Alarm.SEVERITY_DOWN);<br>
&nbsp;&nbsp;&nbsp; private static final Alarm critical = new
Alarm(Alarm.SEVERITY_CRITICAL);<br>
&nbsp;&nbsp;&nbsp; private static final Alarm major = new
Alarm(Alarm.SEVERITY_MAJOR);<br>
&nbsp;&nbsp;&nbsp; private static final Alarm minor = new
Alarm(Alarm.SEVERITY_MINOR);<br>
&nbsp;&nbsp;&nbsp; private static final Alarm ok = new
Alarm(Alarm.SEVERITY_OK);<br>
<br>
&nbsp;&nbsp;&nbsp; // Data for table examples.<br>
&nbsp;&nbsp;&nbsp; protected static final Name[] names = {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("William",
"Dupont", down),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Anna", "Keeney",
critical),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Mariko", "Randor",
major),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("John", "Wilson",
minor),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Lynn",
"Seckinger", ok),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Richard",
"Tattersall", down),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Gabriella",
"Sarintia", critical),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Lisa", "Hartwig",
major),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Shirley", "Jones",
minor),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Bill", "Sprague",
ok),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Greg", "Doench",
down),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Solange",
"Nadeau", critical),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Heather",
"McGann", major),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Roy", "Martin",
minor),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Claude",
"Loubier", ok),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Dan", "Woodard",
down),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Ron", "Dunlap",
critical),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Keith",
"Frankart", major),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Andre", "Nadeau",
minor),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Name("Horace",
"Celestin", ok),<br>
&nbsp;&nbsp;&nbsp; };<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public TableBean() {<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Group util created with a List containing all
names.<br>
&nbsp;&nbsp;&nbsp; public Group getGroupA() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (groupA != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return groupA;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create List with all
names.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ArrayList newNames = new
ArrayList();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = names.length -
1; i &gt;= 0; i--) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
newNames.add(names[i]);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (groupA = new
Group(newNames));<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Group util created with an array containing a
subset of names.<br>
&nbsp;&nbsp;&nbsp; public Group getGroupB() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (groupB != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return groupB;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an array with
subset of names (i.e., 0-9).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name[] newNames = new
Name[10];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.arraycopy(names, 0,
newNames, 0, 10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (groupB = new
Group(newNames));<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Group util created with an array containing a
subset of names.<br>
&nbsp;&nbsp;&nbsp; public Group getGroupC() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (groupC != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return groupC;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create an array with
subset of names (i.e., 10-19).<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Name[] newNames = new
Name[10];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.arraycopy(names, 10,
newNames, 0, 10);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (groupC = new
Group(newNames));<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
<h3><a name="UtilityClasses"></a>Utility Classes used in the examples</h3>
The following utility classes are used in the examples for the table
tags:<code> ui:table</code>, <code>ui:tableRowGroup</code>, and <code>ui:tableColumn.<br>
</code><code></code>
<p><a href="#Group.java">Group.java</a><br>
<a href="#Actions.java">Actions.java</a><br>
<a href="#Filter.java">Filter.java</a><br>
<a href="#Name.java">Name.java</a><br>
<a href="#Select.java">Select.java</a><br>
<a href="#Preferences.java">Preferences.java</a><br>
</p>
<h4><a name="Group.java"></a>Group.java Utility Class<br>
</h4>
<code>package table.util;<br>
<br>
import com.sun.data.provider.TableDataProvider;<br>
import com.sun.data.provider.impl.ObjectArrayDataProvider;<br>
import com.sun.data.provider.impl.ObjectListDataProvider;<br>
import com.sun.rave.web.ui.component.Checkbox;<br>
import com.sun.rave.web.ui.component.TableRowGroup;<br>
<br>
import java.util.List;<br>
<br>
// This class contains data provider and util classes. Note that not
all util<br>
// classes are used for each example.<br>
public class Group {<br>
&nbsp;&nbsp;&nbsp; private TableRowGroup tableRowGroup = null; //
TableRowGroup component.<br>
&nbsp;&nbsp;&nbsp; private TableDataProvider provider = null; // Data
provider.<br>
&nbsp;&nbsp;&nbsp; private Checkbox checkbox = null; // Checkbox
component.<br>
&nbsp;&nbsp;&nbsp; private Preferences prefs = null; // Preferences
util.<br>
&nbsp;&nbsp;&nbsp; private Messages messages = null; // Messages util.<br>
&nbsp;&nbsp;&nbsp; private Actions actions = null; // Actions util.<br>
&nbsp;&nbsp;&nbsp; private Filter filter = null; // Filter util.<br>
&nbsp;&nbsp;&nbsp; private Select select = null; // Select util.<br>
&nbsp;&nbsp;&nbsp; private Clean clean = null; // Clean util.<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public Group() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actions = new Actions(this);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; filter = new Filter(this);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; select = new Select(this);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; clean = new Clean(this);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prefs = new Preferences();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; messages = new Messages();<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Construct an instance using given Object array.<br>
&nbsp;&nbsp;&nbsp; public Group(Object[] array) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider = new
ObjectArrayDataProvider(array);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Construct an instance using given List.<br>
&nbsp;&nbsp;&nbsp; public Group(List list) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; provider = new
ObjectListDataProvider(list);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get data provider.<br>
&nbsp;&nbsp;&nbsp; public TableDataProvider getNames() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return provider;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Actions util.<br>
&nbsp;&nbsp;&nbsp; public Actions getActions() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return actions;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Filter util.<br>
&nbsp;&nbsp;&nbsp; public Filter getFilter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return filter;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Messages util.<br>
&nbsp;&nbsp;&nbsp; public Messages getMessages() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return messages;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Preferences util.<br>
&nbsp;&nbsp;&nbsp; public Preferences getPreferences() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return prefs;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Select util.<br>
&nbsp;&nbsp;&nbsp; public Select getSelect() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return select;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get tableRowGroup component.<br>
&nbsp;&nbsp;&nbsp; public TableRowGroup getTableRowGroup() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return tableRowGroup;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set tableRowGroup component.<br>
&nbsp;&nbsp;&nbsp; public void setTableRowGroup(TableRowGroup
tableRowGroup) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.tableRowGroup =
tableRowGroup;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get checkbox component.<br>
&nbsp;&nbsp;&nbsp; public Checkbox getCheckbox() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return checkbox;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set checkbox component.<br>
&nbsp;&nbsp;&nbsp; public void setCheckbox(Checkbox checkbox) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.checkbox = checkbox;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><span style="font-family: monospace;"></span><br>
<h4><a name="Actions.java"></a>Actions.java Utility Class<br>
</h4>
<code>package table.util;<br>
<br>
import com.sun.data.provider.FieldKey;<br>
import com.sun.data.provider.RowKey;<br>
import com.sun.data.provider.TableDataProvider;<br>
import com.sun.data.provider.impl.ObjectListDataProvider;<br>
import com.sun.rave.web.ui.model.Option;<br>
<br>
import java.util.List;<br>
import java.util.Map;<br>
<br>
import javax.faces.context.FacesContext;<br>
<br>
// This class provides functionality for table actions.<br>
public class Actions {<br>
&nbsp;&nbsp;&nbsp; private Group group = null; // Group util.<br>
<br>
&nbsp;&nbsp;&nbsp; // Action menu items.<br>
&nbsp;&nbsp;&nbsp; protected static final Option[] moreActionsOptions =
{<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION0",
"&amp;#8212; More Actions &amp;#8212;"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION1",
"Action 1"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION2",
"Action 2"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION3",
"Action 3"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("ACTION4",
"Action 4"),<br>
&nbsp;&nbsp;&nbsp; };<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public Actions(Group group) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.group = group;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Action button event.<br>
&nbsp;&nbsp;&nbsp; public void action() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String message = null;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get hyperlink parameter
used for embedded actions example.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Map map =
FacesContext.getCurrentInstance().getExternalContext()<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
.getRequestParameterMap();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String param = (String)
map.get("param");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (param != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
message = "Embedded Action Selected: Parameter = " + param;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
message = "Table Action Selected";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
group.getMessages().setMessage(message);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Action to remove rows from ObjectListDataProvider.<br>
&nbsp;&nbsp;&nbsp; public void delete() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Since mutiple examples
are using the same beans, the binding<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // simply tells us that
checkbox state is maintained arcoss pages.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(group.getSelect().isKeepSelected()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
If we got here, then we're maintaining state across pages.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
delete(group.getTableRowGroup().getSelectedRowKeys());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
If we got here, then we're using the phase listener and must<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
take filtering, sorting, and pagination into account.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
delete(group.getTableRowGroup().getRenderedSelectedRowKeys());<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set disabled value for table actions.<br>
&nbsp;&nbsp;&nbsp; public boolean getDisabled() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If there is at least one
row selection, actions are enabled.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boolean result = true;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (group.getTableRowGroup()
== null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return result;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Since mutiple examples
are using the same beans, the binding<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // simply tells us that
checkbox state is maintained arcoss pages.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(group.getSelect().isKeepSelected()) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
If we got here, then we're maintaining state across pages.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
result = group.getTableRowGroup().getSelectedRowsCount() &lt; 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
If we got here, then we're using the phase listener and must<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
take filtering, sorting, and pagination into account.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
result = group.getTableRowGroup().getRenderedSelectedRowsCount() &lt; 1;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return result;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get action.<br>
&nbsp;&nbsp;&nbsp; public String getMoreActions() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Per the UI guidelines,
always snap back to "More Actions...".<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return "ACTION0";<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get action menu options.<br>
&nbsp;&nbsp;&nbsp; public Option[] getMoreActionsOptions() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return moreActionsOptions;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Action menu event.<br>
&nbsp;&nbsp;&nbsp; public void moreActions() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
group.getMessages().setMessage("More Actions Menu Selected");<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set action.<br>
&nbsp;&nbsp;&nbsp; public void setMoreActions(String action) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Do nothing.<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; //
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>
&nbsp;&nbsp;&nbsp; // Private methods<br>
&nbsp;&nbsp;&nbsp; //
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>
<br>
&nbsp;&nbsp;&nbsp; // Action to remove rows from ObjectListDataProvider.<br>
&nbsp;&nbsp;&nbsp; private void delete(RowKey[] rowKeys) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rowKeys == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableDataProvider provider =
group.getNames();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int i = 0; i &lt;
rowKeys.length; i++) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
RowKey rowKey = rowKeys[i];<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(provider.canRemoveRow(rowKey)) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
provider.removeRow(rowKey);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((ObjectListDataProvider)
provider).commitChanges(); // Commit.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; group.getSelect().clear();
// Clear phase listener.<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
<h4><a name="Filter.java"></a>Filter.java Utility Class<br>
</h4>
<code>package table.util;<br>
<br>
import com.sun.data.provider.FilterCriteria;<br>
import com.sun.data.provider.impl.CompareFilterCriteria;<br>
import com.sun.rave.web.ui.component.Table;<br>
import com.sun.rave.web.ui.model.Option;<br>
<br>
// This class provides functionality for table filters.<br>
//<br>
// This util class sets filters directly on the TableRowGroup component
using <br>
// FilterCriteria; however, there is also a FilteredTableDataProvider
class that<br>
// can used for filtering outside of the table. The table will pick up
what ever <br>
// filter has been applied automatically, for example:<br>
//<br>
// // Some choice of TableDataProvider.<br>
// TableDataProvider provider = new ...<br>
//<br>
// // This wraps and filters an existing TableDataProvider.<br>
// FilteredTableDataProvider filteredProvider = new
FilteredTableDataProvider();<br>
// filteredProvider.setTableDataProvider(provider);<br>
//<br>
// // Set FilteredTableDataProvider in the TableRowGroup component.<br>
// tableRowGroup.setSourceData(filteredProvider);<br>
//<br>
// The table component itself has no idea that there is any filtering
going on, <br>
// but the filtering functionality has been encapsulated in the data
provider. <br>
// The developer can then use different FilterCriteria types to apply
filters,<br>
// for example:<br>
//<br>
// CompareFilterCriteria cfc = new ...<br>
// RegexFilterCriteria rxfc = new ...<br>
// filteredProvider.setFilterCriteria(new FilterCriteria[] { cfc, fxfc
});<br>
public class Filter {<br>
&nbsp;&nbsp;&nbsp; private String customFilter = null; // Custom filter.<br>
&nbsp;&nbsp;&nbsp; private String basicFilter = null; // Basic filter
menu option.<br>
&nbsp;&nbsp;&nbsp; private String filterText = null; // Filter text.<br>
&nbsp;&nbsp;&nbsp; private Group group = null; // Group util.<br>
<br>
&nbsp;&nbsp;&nbsp; // Filter menu items.<br>
&nbsp;&nbsp;&nbsp; protected static final Option[] filterOptions = {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("FILTER0", "All
Items"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("FILTER1",
"Filter 1"),<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Option("FILTER2",
"Filter 2"),<br>
&nbsp;&nbsp;&nbsp; };<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public Filter(Group group) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.group = group;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // UI guidelines state that a "Custom Filter" option
should be added to the<br>
&nbsp;&nbsp;&nbsp; // filter menu, used to open the table filter panel.
Thus, if the <br>
&nbsp;&nbsp;&nbsp; // CUSTOM_FILTER option is selected, Javascript
invoked via the onChange<br>
&nbsp;&nbsp;&nbsp; // event will open the table filter panel.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // UI guidelines also state that a "Custom Filter
Applied" option should be <br>
&nbsp;&nbsp;&nbsp; // added to the filter menu, indicating that a
custom filter has been <br>
&nbsp;&nbsp;&nbsp; // applied. In this scenario, set the selected
property of the filter menu <br>
&nbsp;&nbsp;&nbsp; // as CUSTOM_FILTER_APPLIED. This selection should
persist until another <br>
&nbsp;&nbsp;&nbsp; // menu option has been selected.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // Further, UI guidelines state that the table title
should indicate that a <br>
&nbsp;&nbsp;&nbsp; // custom filter has been applied. To add this text
to the table title, set <br>
&nbsp;&nbsp;&nbsp; // the filter property.<br>
<br>
&nbsp;&nbsp;&nbsp; // Basic filter event.<br>
&nbsp;&nbsp;&nbsp; public void applyBasicFilter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(basicFilter.equals("FILTER1")) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
filterText = "Filter 1";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else if
(basicFilter.equals("FILTER2")) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
filterText = "Filter 2";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
filterText = null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Clear all filters since
we don't have an example here.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Note: TableRowGroup
ensures pagination is reset per UI guidelines.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
group.getTableRowGroup().setFilterCriteria(null);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Custom filter event.<br>
&nbsp;&nbsp;&nbsp; public void applyCustomFilter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; basicFilter =
Table.CUSTOM_FILTER_APPLIED; // Set filter menu option.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; filterText = "Custom";<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Filter rows that do not
match custom filter.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CompareFilterCriteria
criteria = new CompareFilterCriteria(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
group.getNames().getFieldKey("last"), customFilter);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Note: TableRowGroup
ensures pagination is reset per UI guidelines.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
group.getTableRowGroup().setFilterCriteria(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new
FilterCriteria[] {criteria});<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get basic filter.<br>
&nbsp;&nbsp;&nbsp; public String getBasicFilter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Note: the selected value
must be set to restore the default selected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // value when the embedded
filter panel is closed. Further, the selected<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // value should never be set
as "Custom Filter...".<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (basicFilter != null
&amp;&amp; !basicFilter.equals(Table.CUSTOM_FILTER))<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ?
basicFilter : "FILTER0";<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set basic filter.<br>
&nbsp;&nbsp;&nbsp; public void setBasicFilter(String value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; basicFilter = value;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get custom filter.<br>
&nbsp;&nbsp;&nbsp; public String getCustomFilter() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return customFilter;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set custom filter.<br>
&nbsp;&nbsp;&nbsp; public void setCustomFilter(String value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; customFilter = value;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get filter menu options.<br>
&nbsp;&nbsp;&nbsp; public Option[] getFilterOptions() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get filter options based
on the selected filter menu option.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
Table.getFilterOptions(filterOptions,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
basicFilter == Table.CUSTOM_FILTER_APPLIED);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get filter text.<br>
&nbsp;&nbsp;&nbsp; public String getFilterText() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return filterText;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
<h4><a name="Name.java"></a>Name.java Utility Class<br>
</h4>
<code>package table.util;<br>
<br>
import com.sun.rave.web.ui.component.Alarm;<br>
import com.sun.rave.web.ui.theme.ThemeImages;<br>
<br>
public class Name {<br>
&nbsp;&nbsp;&nbsp; private String last = null; // Last name.<br>
&nbsp;&nbsp;&nbsp; private String first = null; // First name.<br>
&nbsp;&nbsp;&nbsp; private Alarm alarm = null; // Alarm.<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public Name(String first, String last) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.last = last;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.first = first;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Construct an instance with given alarm severity.<br>
&nbsp;&nbsp;&nbsp; public Name(String first, String last, Alarm alarm) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this(first, last);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.alarm = alarm;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get first name.<br>
&nbsp;&nbsp;&nbsp; public String getFirst() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (alarm != null) ? " "
+ first : first;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set first name.<br>
&nbsp;&nbsp;&nbsp; public void setFirst(String first) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.first = first;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get last name.<br>
&nbsp;&nbsp;&nbsp; public String getLast() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return last;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set last name.<br>
&nbsp;&nbsp;&nbsp; public void setLast(String last) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.last = last;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get alarm.<br>
&nbsp;&nbsp;&nbsp; public Alarm getAlarm() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return alarm;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get alarm.<br>
&nbsp;&nbsp;&nbsp; public void setAlarm(Alarm alarm) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.alarm = alarm;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get alarm severity.<br>
&nbsp;&nbsp;&nbsp; public String getSeverity() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return alarm.getSeverity();<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get alarm severity.<br>
&nbsp;&nbsp;&nbsp; public void setSeverity(String severity) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alarm.setSeverity(severity);<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
<h4><a name="Select.java"></a>Select.java Utility Class<br>
</h4>
<code>package table.util;<br>
<br>
import com.sun.data.provider.FieldKey;<br>
import com.sun.data.provider.RowKey;<br>
import com.sun.data.provider.TableDataProvider;<br>
import com.sun.rave.web.ui.event.TableSelectPhaseListener;<br>
<br>
import javax.faces.context.FacesContext;<br>
import javax.faces.el.ValueBinding;<br>
<br>
// This class provides functionality for select tables.<br>
//<br>
// Note: UI guidelines recomend that rows should be unselected when no
longer in<br>
// view. For example, when a user selects rows of the table and
navigates to<br>
// another page. Or, when a user applies a filter or sort that may hide<br>
// previously selected rows from view. If a user invokes an action to
delete<br>
// the currently selected rows, they may inadvertently remove rows not<br>
// displayed on the current page. Using TableSelectPhaseListener ensures<br>
// that invalid row selections are not rendered by clearing selected
state<br>
// after the render response phase.<br>
public class Select {<br>
&nbsp;&nbsp;&nbsp; private TableSelectPhaseListener tspl = null; //
Phase listener.<br>
&nbsp;&nbsp;&nbsp; private Group group = null; // Group util.<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public Select(Group group) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.group = group;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tspl = new
TableSelectPhaseListener();<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Clear selected state from phase listener (e.g.,
when deleting rows).<br>
&nbsp;&nbsp;&nbsp; public void clear() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tspl.clear();<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Test flag indicating that selected objects should
not be cleared.<br>
&nbsp;&nbsp;&nbsp; public boolean isKeepSelected() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return tspl.isKeepSelected();<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set flag indicating that selected objects should
not be cleared.<br>
&nbsp;&nbsp;&nbsp; public void keepSelected(boolean keepSelected) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tspl.keepSelected(keepSelected);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get selected property.<br>
&nbsp;&nbsp;&nbsp; public Object getSelected() {<br>
&nbsp;&nbsp;&nbsp; return tspl.getSelected(getTableRow());<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set selected property.<br>
&nbsp;&nbsp;&nbsp; public void setSelected(Object object) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RowKey rowKey =
getTableRow();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rowKey != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tspl.setSelected(rowKey, object);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get selected value property.<br>
&nbsp;&nbsp;&nbsp; public Object getSelectedValue() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RowKey rowKey =
getTableRow();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (rowKey != null) ?
rowKey.getRowId() : null;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get the selected state -- Sort on checked state
only.<br>
&nbsp;&nbsp;&nbsp; public boolean getSelectedState() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Typically, selected state
is tested by comparing the selected and <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // selectedValue properties.
In this example, however, the phase <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // listener value is not
null when selected.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
getSelectedState(getTableRow());<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get the selected state.<br>
&nbsp;&nbsp;&nbsp; public boolean getSelectedState(RowKey rowKey) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
tspl.isSelected(rowKey);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get current table row.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // Note: To obtain a RowKey for the current table
row, the use the same <br>
&nbsp;&nbsp;&nbsp; // sourceVar property given to the TableRowGroup
component. For example, if <br>
&nbsp;&nbsp;&nbsp; // sourceVar="name", use "#{name.tableRow}" as the
expression string.<br>
&nbsp;&nbsp;&nbsp; private RowKey getTableRow() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesContext context =
FacesContext.getCurrentInstance();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ValueBinding vb =
context.getApplication().createValueBinding(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{name.tableRow}");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (RowKey)
vb.getValue(context);<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
<h4><a name="Preferences.java"></a>Preferences.java Utility Class<br>
</h4>
<code>package table.util;<br>
<br>
// This class provides functionality for table preferences.<br>
public class Preferences {<br>
&nbsp;&nbsp;&nbsp; private String preference = null; // Rows preference.<br>
&nbsp;&nbsp;&nbsp; private int rows = 5; // Rows per page.<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public Preferences() {<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Table preferences event.<br>
&nbsp;&nbsp;&nbsp; public void applyPreferences() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int
rows = Integer.parseInt(preference);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if
(rows &gt; 0) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.rows = rows;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } catch
(NumberFormatException e) {}<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get rows per page.<br>
&nbsp;&nbsp;&nbsp; public int getRows() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return rows;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get preference.<br>
&nbsp;&nbsp;&nbsp; public String getPreference() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
Integer.toString(rows);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set preference.<br>
&nbsp;&nbsp;&nbsp; public void setPreference(String value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preference = value;<br>
&nbsp;&nbsp;&nbsp; }<br>
}
</code><br>
<br>
    ]]></description>

    <attribute>
      <name>augmentTitle</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Flag indicating that the table title should be augmented with the range of items 
currently displayed and the total number of items in the table. For example, 
"(1 - 25 of 200)". If the table is not currently paginated, the title is 
augmented with the number of displayed items. For example, "(18)". When set to 
false, any values set for <code>itemsText</code> and <code>filterText</code> 
are overridden.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The binding attribute is used to configure the component through Java code. This
approach is intended for advanced uses, when the tag attributes cannot provide 
the desired output. The value of the binding attribute must be a JavaServer 
Faces EL expression that resolves to a backing bean, or to a backing bean 
property of type <code>com.sun.rave.web.ui.component.Table</code>. You must assign a 
component id to the component instance.
      ]]></description>
    </attribute>

    <attribute>
      <name>cellPadding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Sets the whitespace between the borders and the contents of a cell
      ]]></description>
    </attribute>

    <attribute>
      <name>cellSpacing</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Sets the whitespace between cells and also at the edges of the table 
      ]]></description>
    </attribute>

    <attribute>
      <name>clearSortButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
In the View-Changing Controls area of the Action Bar, display a button that 
clears any sorting of the table. When the button is clicked, the table items 
return to the order they were in when the page was initially rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>deselectMultipleButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
In the Action Bar, display a deselect button for tables in which multiple rows 
can be selected, to allow users to deselect all table rows that are currently 
displayed. This button is used to deselect a column of checkboxes using the id 
that was given to the selectId attribute of the <code>ui:tableColumn</code> tag.
      ]]></description>
    </attribute>

    <attribute>
      <name>deselectMultipleButtonOnClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Scripting code that is executed when the user clicks the deselect multiple 
button. You should use the JavaScript <code>setTimeout()</code> function to 
invoke the script to ensure that checkboxes are deselected immediately, instead 
of waiting for the script to complete.
      ]]></description>
    </attribute>

    <attribute>
      <name>deselectSingleButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
In the Action Bar, display a deselect button for tables in which only a single 
table row can be selected at a time. This button is used to deselect a column of 
radio buttons using the id that was given to the selectId attribute of the 
<code>ui:tableColumn</code> tag.
      ]]></description>
    </attribute>

    <attribute>
      <name>deselectSingleButtonOnClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Scripting code that is executed when the user clicks the deselect single button.
You should use the JavaScript <code>setTimeout()</code> function to invoke the 
script to ensure that the radio button is deselected immediately, instead of 
waiting for the script to complete.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraActionBottomHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;td&gt; </code>HTML element that  
is rendered for the Action Bar (bottom). Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"style=`myActionBarStyle'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraActionTopHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;td&gt; </code>HTML element that 
is rendered for the Action Bar (top). Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"style=`myActionBarStyle'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraFooterHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;td&gt; </code>HTML element that 
is rendered for the table footer. Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"nowrap=`nowrap'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraPanelHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;td&gt; </code>HTML element that 
is rendered for an embedded panel. Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraTitleHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;caption&gt;</code> HTML element 
that is rendered for the table title. Use only code that is valid in an HTML 
<code>&lt;caption&gt;</code> element. The code you specify is inserted in the 
HTML element, and is not checked for validity. For example, you might set this 
attribute to <code>"style=`myTitleStyle'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>filterId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The element id to be applied to the outermost HTML element that is rendered 
for the dropDown component used to display filter options. The id must be 
fully qualified. This id is required for JavaScript functions to set the 
dropDown styles when the embedded filter panel is opened, and to reset the 
default selected value when the panel is closed. Note that if you use the 
<code>ui:dropDown</code> tag as the only component in the <code>filter</code> 
facet, the <code>filterId</code> is optional. If you use a custom component, or 
use the <code>ui:dropDown</code> as a child component, you must specify a 
filterID.
      ]]></description>
    </attribute>

    <attribute>
      <name>filterPanelFocusId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The element id used to set focus when the filter panel is open.
      ]]></description>
    </attribute>

    <attribute>
      <name>filterText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Text to be inserted into the table title bar when a filter is applied. This text 
is expected to be the name of the filter that the user has selected. The 
attribute value should be a JavaServer Faces EL expression that resolves to a 
backing bean property whose value is set in your filter code. The value of the 
filterText attribute is inserted into the table title, as follows: Your Table's 
Title <span style="font-style: italic;">filterText</span> Filter Applied.
      ]]></description>
    </attribute>

    <attribute>
      <name>footerText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text to be displayed in the table footer, which expands across the width of 
the table.
      ]]></description>
    </attribute>

    <attribute>
      <name>hiddenSelectedRows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Flag indicating that selected rows might be currently hidden from view. UI 
guidelines recommend that rows that are not in view are deselected. For example, 
when users select rows of the table and navigate to another page, the selected 
rows should be deselected automatically. Or, when a user applies a filter or 
sort that hides previously selected rows from view, those selected rows should 
be deselected. By deselecting hidden rows, you prevent the user from 
inadvertantly invoking an action on rows that are not displayed.
<br/><br/>
However, sometimes state must be maintained aross table pages. If your table 
must maintain state, you must set the hiddenSelectedRows attribute to true. The 
attribute causes text to be displayed in the table title and footer to indicate 
the number of selected rows that are currently hidden from view. This title and 
footer text is also displayed with a count of 0 when there are no hidden 
selections, to make the user aware of the possibility of hidden selections.
<br/><br/>
Note: When hiddenSelectedRows is false, the descending sort button for the 
select column is disabled when the table is paginated. Disabling this button 
prevents a sort from placing selected rows on a page other than the current 
page.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>itemsText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Text to add to the title of an unpaginated table. For example, if your table 
title is "Critical" and there are 20 items in the table, the default unpaginated 
table title would be Critical (20). If you specify itemsText="alerts", the title 
would be Critical (20 alerts).
      ]]></description>
    </attribute>

    <attribute>
      <name>lite</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Renders the table in a style that makes the table look lighter weight, generally 
by omitting the shading around the table and in the title bar.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>paginateButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Show table paginate button to allow users to switch between viewing all data on 
a single page (unpaginated) or to see data in multiple pages (paginated).
      ]]></description>
    </attribute>

    <attribute>
      <name>paginationControls</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Show the table pagination controls, which allow users to change which page is 
displayed. The controls include an input field for specifying the page number, a 
Go button to go to the specified page, and buttons for going to the first, last, 
previous, and next page.
      ]]></description>
    </attribute>

    <attribute>
      <name>preferencesPanelFocusId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The element id used to set focus when the preferences panel is open.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectMultipleButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Show the button that is used for selecting multiple rows. The button is 
displayed in the Action Bar (top), and allows users to select all rows currently 
displayed. The button selects a column of checkboxes using the id specified in 
the selectId attribute of the <code>ui:tableColumn</code> tag.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectMultipleButtonOnClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Scripting code executed when the user clicks the mouse on the select multiple 
button.
      ]]></description>
    </attribute>

    <attribute>
      <name>sortPanelFocusId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The element id used to set focus when the sort panel is open.
      ]]></description>
    </attribute>

    <attribute>
      <name>sortPanelToggleButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Show the button that is used to open and close the sort panel.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>summary</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Summary text that describes the table for accessibility purposes
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>title</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text displayed for the table title.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Set the width of the table on the page (deprecated in HTML 4.0) 
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>tableColumn</name>
    <tag-class>com.sun.rave.web.ui.taglib.TableColumnTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
Use the <code>ui:tableColumn</code>
tag to define the column cells of a table, inside a <a
href="tableRowGroup.html"><code>ui:table</code></a>
tag.&nbsp; A <code>ui:tableRowGroup</code> must include at least one <code>ui:tableColumn</code>
tag.<br>
<p><span style="color: rgb(0, 0, 0);">The <code>ui:table</code>
tag is
used to define the structure and actions of the table, and is a
container for <a href="tableRowGroup.html"><code>ui:tableRowGroup</code></a>
which define the rows of a table.&nbsp; The <code>ui:tableRowGroup</code>
tag is a container for <code></code></span><span
style="color: rgb(0, 0, 0);"><code>ui:tableColumn</code></span><span
style="color: rgb(0, 0, 0);"><code></code>
tags, which are used&nbsp;<code></code>to define the
columns of the table.&nbsp;</span><span
style="color: rgb(102, 102, 204);"><span style="color: rgb(0, 0, 0);">
The </span><a href="table.html" style="color: rgb(0, 0, 0);">documentation
for the <code>ui:table</code> tag</a><span style="color: rgb(0, 0, 0);">
contains detailed information
about the table component.&nbsp; This page provides details about how
to define table columns only.</span><br>
</span></p>
<p>
</p>
<p>
</p>
<h3>HTML Elements and Layout</h3>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">The tableColumn component is
used to define attributes for XHTML <code>&lt;td&gt;</code>
elements, which are used
to display table data cells. However, the rendering of
column headers and footers is handled by the tableRowGroup component.
The <a href="#diagram">diagram</a> shows the table layout, and
highlights the areas that are defined with the <code>ui:tableColumn</code>
tag. </span><br>
<br>
<a name="diagram"></a><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="2">
<tbody>
<tr style="color: rgb(192, 192, 192);">
<td
style="vertical-align: top; background-color: rgb(153, 153, 153);"
rowspan="1" colspan="1">Title
Bar&nbsp;</td>
</tr>
<tr style="color: rgb(153, 153, 153);">
<td
style="vertical-align: top; background-color: rgb(208, 208, 208);"
rowspan="1" colspan="1">Action
Bar (top)&nbsp;&nbsp;</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">
<table style="text-align: left; width: 100%;" border="1"
cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;">Column Header <big><span
style="color: rgb(0, 0, 0);"><small>(specified </small></span></big>with
<code>headerText</code>
attribute or <code>header</code> facet <big><span
style="color: rgb(0, 0, 0);"><small>in first <code>ui:tableColumn</code>
tag in&nbsp; <code>ui:tableRowGroup</code> tag)</small></span></big></td>
<td style="vertical-align: top;">Column Header <big><span
style="color: rgb(0, 0, 0);"><small>(specified </small></span></big>with
<code>headerText</code>
attribute or <code>header</code> facet <big><span
style="color: rgb(0, 0, 0);"><small>in second <code>ui:tableColumn</code>
tag in <code>ui:tableRowGroup</code> tag)</small></span></big></td>
</tr>
<tr style="color: rgb(153, 153, 153);">
<td
style="vertical-align: top; background-color: rgb(232, 232, 232);"
rowspan="1" colspan="2">Group
Header Bar&nbsp;</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
style="font-style: italic;">Table
data</span> <code><br>
<br>
<br>
<br>
<br>
</code></td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);"><span
style="font-style: italic;">Table
data</span> <code></code></td>
</tr>
<tr>
<td style="vertical-align: top;">Column Footer<span
style="color: rgb(0, 0, 0);"> (specified </span>with <code>footerText</code>
attribute or <code>footer</code>
facet <span style="color: rgb(0, 0, 0);">in first <code>ui:tableColumn</code>
tag in <code>ui:tableRowGroup</code> tag)</span></td>
<td style="vertical-align: top;">Column Footer <span
style="color: rgb(0, 0, 0);">(specified </span>with <code>footerText</code>
attribute or <code>footer</code>
facet <span style="color: rgb(0, 0, 0);">in second <code>ui:tableColumn</code>
tag in <code>ui:tableRowGroup</code> tag)</span></td>
</tr>
<tr style="color: rgb(153, 153, 153);">
<td
style="vertical-align: top; background-color: rgb(232, 232, 232);"
rowspan="1" colspan="2">Group
Footer Bar&nbsp;</td>
</tr>
<tr>
<td style="vertical-align: top;">Table
Column Footer (specified with <code>tableFooterText</code>
attribute <code></code>or <code>tableFooter</code> facet in <code>ui:tableColumn</code>
tag)</td>
<td style="vertical-align: top;">Table
Column Footer (specified with <code>tableFooterText</code>
attribute <code></code>or <code>tableFooter</code> facet <code></code>in
<code>ui:tableColumn</code>
tag)</td>
</tr>
</tbody>
</table>
<big><span style="color: rgb(0, 0, 0);"> </span></big></td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(208, 208, 208);"><span
style="color: rgb(153, 153, 153);">Action
Bar (bottom)&nbsp;</span><small> </small> </td>
</tr>
<tr style="color: rgb(192, 192, 192);">
<td
style="vertical-align: top; background-color: rgb(153, 153, 153);"
rowspan="1" colspan="1">Footer<code></code><code> </code></td>
</tr>
</tbody>
</table>
<br style="color: rgb(102, 102, 204);">
<h4 style="color: rgb(0, 0, 0);">Column Header</h4>
<span style="color: rgb(0, 0, 0);">The Column Header area
displays
a header for each table column.&nbsp; If you specify the text of a
column header with the <code>headerText</code> attribute in the <code>ui:tableColumn</code>
tag, the default implementation of the header is rendered. You can
specify a separate component to provide column header content by using
the <code>header</code>
facet, which overrides the <code>headerText</code> attribute.&nbsp;
You can add extra HTML code to the
header's rendered<code> &lt;td&gt;</code> element with the <code>extraHeaderHtml</code>
attribute.<br>
<br>
The following <code>ui:tableColumn</code> attributes can be used to
change
the appearance and behavior for sorting of the Column Header:<br>
</span>
<ul style="color: rgb(0, 0, 0);">
<li>
<p><code>sort</code>
specifies a sort key and makes a column sortable.&nbsp; </p>
<p> </p>
</li>
<li>
<p><code>sortIcon</code>
specifies a theme identifier to select a different image to use as the
sort icon that is displayed in the header of a sortable column.</p>
</li>
<li>
<p><code>sortImageURL</code>
specifies the path to an image to use as the sort icon that is
displayed in the header of a
sortable column.</p>
</li>
<li>
<p><code>descending</code> when set to true causes the column
to be sorted in descending order.</p>
</li>
<li><code>severity </code>specifies the severity of an alarm
in each cell, and causes the column to&nbsp; sort on the severity value
if used with the <code>sort</code> attribute. <code></code></li>
</ul>
<span style="color: rgb(0, 0, 0);">
</span>
<h4 style="color: rgb(0, 0, 0);">Column Footer</h4>
<span style="color: rgb(0, 0, 0);">The Column Footers area
displays a footer for each table column.
If you specify the text of a column footer with the <code>footerText</code>
attribute in the <code>ui:tableColumn</code> tag, the default
implementation of the footer is rendered. You can specify a separate
component to provide footer content by using the <code>footer</code>
facet, which overrides the <code>footerText</code> attribute.&nbsp;
You can add extra HTML code to the
footer's rendered<code> &lt;td&gt;</code> element with the <code>extraFooterHtml</code>
attribute.<br>
</span>
<h4 style="color: rgb(0, 0, 0);">Table Column Footer</h4>
<span style="color: rgb(0, 0, 0);">The Table Column
Footers area displays column footers at the
bottom of the table.
The table column footers are useful in tables with multiple groups of
rows. If you specify the text of table column footers with the <code>tableFooterText</code>
attribute, the default implementation of the footer is rendered.&nbsp;
You can specify a separate component to provide the content for a table
column footer by
using the <code>tableFooter</code> facet, which overrides the <code>tableFooterText</code>
attribute.&nbsp; You
can add extra HTML code to the table footer's rendered<code> &lt;td&gt;</code>
element with the <code>extraTableFooterHtml</code> attribute.<br>
</span>
<h4 style="color: rgb(0, 0, 0);">Alignment and Formatting
of Cells</h4>
<span style="color: rgb(0, 0, 0);">In addition to defining the
headers and footers for columns, the
<code>ui:tableColumn</code> tag can be used to set other aspects of the
table's
appearance and&nbsp; behavior.&nbsp; <br>
<br>
The following attributes affect
the alignment of table cells:<br>
</span>
<ul style="color: rgb(0, 0, 0);">
<li><code>align </code>specifies the horizontal alignment
for
the cell data in the
column</li>
<li><code>alignKey </code>specifies a particular data element on
which to align the
cell data <br>
</li>
<li><code>char </code>specifies a character to use for
horizontal alignment of cell data<br>
</li>
<li><code>charOff </code>specifies the offset of
the first
occurrence of
the alignment character</li>
<li><code>valign </code>specifies the vertical alignment
for
the content of each cell</li>
</ul>
<span style="color: rgb(0, 0, 0);">
Attributes that can be used to make the column headers more accessible
for adaptive technologies include:<br>
</span>
<ul style="color: rgb(0, 0, 0);">
<li> <code>scope</code> set
to a keyword to specify the portion of the table that this header
applies to. <br>
</li>
<li><code>rowHeader</code>
set to true to specify that the content of the column's cells applies
to the row in which the
cell is located. </li>
</ul>
<span style="color: rgb(0, 0, 0);">Attributes that affect other
aspects of cells include:</span><br style="color: rgb(0, 0, 0);">
<ul style="color: rgb(0, 0, 0);">
<li><code>abbr</code>&nbsp;
specifies an abbreviated form of the cell's content, to
be used when the browser has little space to render the content.<br>
</li>
<li><code>embeddedActions</code>
when set to true causes separators to be rendered
between multiple action hyperlinks.</li>
<li><code>emptyCell</code> when
set to
true causes an unexpectedly empty cell to be
rendered with an appropriate image.</li>
<li><code>spacerColumn</code> when
set to true causes the column to be rendered as a blank column to
enhance table spacing.<code><br>
</code></li>
<li><code>height </code>specifies
the height of a column's cells.<code><br>
</code></li>
<li><code>width </code>specifies
the width of a column's cells.<code><br>
</code></li>
<li><code>nowrap </code>prevents
the content of the cell from wrapping to a new line.<br>
</li>
</ul>
<h4 style="color: rgb(0, 0, 0);">Selection Column</h4>
<span style="color: rgb(0, 0, 0);">To make table rows selectable,
the first column of the table should display only checkboxes or radio
buttons that the user clicks to select the row. When you set the <code>selectId</code>
attribute in the <code>ui:tableColumn</code> tag and include a <code>ui:checkbox</code>
or <code>ui:radioButton</code> tag as a child of the <code>ui:tableColumn</code></span><span
style="color: rgb(102, 102, 204);"><span style="color: rgb(0, 0, 0);">
tag, the first column is rendered
appropriately.&nbsp; See the</span><a href="#SelectSingleRow"
style="color: rgb(0, 0, 0);"> Select Single
Row example </a><span style="color: rgb(0, 0, 0);">for more
information. </span><br style="color: rgb(0, 0, 0);">
<br>
</span>
<h3>Facets</h3>
<span style="color: rgb(0, 0, 0);">The </span><code
style="color: rgb(0, 0, 0);">ui:tableColumn</code><span
style="color: rgb(0, 0, 0);"> tag supports the following facets,
which
allow you to customize the
layout of the component.</span><br style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<table style="width: 100%; color: rgb(0, 0, 0);" border="1"
cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;"><span style="font-weight: bold;">Facet
Name</span><code><br>
</code></td>
<td style="vertical-align: top; font-weight: bold;">Table Item
Implemented by the Facet<br>
</td>
</tr>
<tr>
<td><code>footer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
</code></td>
<td>Footer that is displayed at the bottom of the column within
the group of rows. The footer applies to the column of cells that are
defined
by the <code>ui:tableColumn</code>
tag.&nbsp; This facet can be used to replace the default footer for the
column.<br>
</td>
</tr>
<tr>
<td><code>header</code></td>
<td>Header that applies to the column of cells that are defined
by the <code>ui:tableColumn</code>
tag. This facet can be used to replace the default header for the
column. </td>
</tr>
<tr>
<td style="vertical-align: top;"><code>tableFooter<br>
</code></td>
<td style="vertical-align: top;">Footer that is displayed at the
bottom of the table, below the last group of rows, above the Action Bar
and overall table footer. The table footer content should apply to the
column for all the groups of rows in the table.&nbsp; This facet can be
used to replace the default table footer for the
column. </td>
</tr>
</tbody>
</table>
<br style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Client Side JavaScript
Functions</h3>
<span style="color: rgb(0, 0, 0);">See the </span><a
href="table.html#JavaScript" style="color: rgb(0, 0, 0);"><code>ui:table</code>
tag's
JavaScript documentation</a><span style="color: rgb(0, 0, 0);">.&nbsp;
The same functions are used for the
<code>ui:tableColumn</code> tag.</span><br>
<br>
<h3>Examples
</h3>
<span style="color: rgb(0, 0, 0);">The following examples use a
backing bean called </span><a href="table.html#Example:_TableBean_"
style="color: rgb(0, 0, 0);">TableBean</a><span
style="color: rgb(0, 0, 0);">,
which is shown in the <code>ui:table</code> tag documentation. </span><a
href="table.html#UtilityClasses" style="color: rgb(0, 0, 0);">Utility
classes</a><span style="color: rgb(0, 0, 0);"> used in the examples are
included
in this page, after the examples.&nbsp;
Additional examples are shown in the </span><code
style="color: rgb(0, 0, 0);"><a href="table.html#Examples">ui:table</a></code><span
style="color: rgb(0, 0, 0);">
and </span><code style="color: rgb(0, 0, 0);"><a
href="tableRowGroup.html">ui:tableRowGroup</a></code><span
style="color: rgb(0, 0, 0);">
documents.<br>
<br>
All examples assume that the <code>ui:table</code> tag is contained
within an HTML <code>&lt;form&gt;</code> element so that actions can
submit form data. <br>
</span><br style="color: rgb(0, 0, 0);">
<span style="font-weight: bold; color: rgb(0, 0, 0);">Examples in
this file:<br>
<br>
</span>
<div style="margin-left: 40px; color: rgb(0, 0, 0);"><a
href="tableColumn.html#SortableTable">Example
1: Sortable Table</a><br>
<p><a href="tableColumn.html#SelectSingleRow">Example
2: Select Single
Row</a><br>
</p>
<p><a href="tableColumn.html#SelectMultipleRows">Example
3: Select
Multiple Rows</a><br>
</p>
<p><a href="#HiddenSelectedRows">Example 4: Hidden Selected Rows</a><br>
</p>
<a href="#SpacerColumn">Example
5: Spacer Columns</a><br>
<p><a href="#EmptyCells">Example 6: Empty Cells</a><br>
</p>
<p><a href="#EmbeddedActions">Example 7:&nbsp; Embedded Actions</a><br>
</p>
<p><a href="#Alarms">Example 8: Alarms</a><br>
</p>
<p><a href="#MultiColumnHeaders">Example 9: Multiple Column Headers and
Footers</a><br>
</p>
</div>
<span style="font-weight: bold; color: rgb(0, 0, 0);">Supporting
files:</span>
<div style="margin-left: 40px;">
<p style="color: rgb(0, 0, 0);"><a href="table.html#Example:_TableBean_">TableBean
backing bean in <code>ui:table</code> documentation<br>
</a></p>
<p><a href="table.html#UtilityClasses" style="color: rgb(0, 0, 0);">Utility
classes in <code>ui:table</code> documentation</a><a
href="table.html#UtilityClasses"><span style="color: rgb(0, 0, 0);"> </span><br>
</a></p>
</div>
<h3><a name="SortableTable"></a>Example 1: Sortable Table<br>
</h3>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">This example shows how to
implement table sorting, and uses the </span><a
href="table.html#Example:_TableBean_" style="color: rgb(0, 0, 0);">TableBean</a><span
style="color: rgb(0, 0, 0);"> and <a href="table.html#Name.java">Name.java</a>
code shown in the <code>ui:table</code> documentation. Notice that the
<code>ui:table</code>
tag includes the <code>clearSortButton</code> attribute to enable
users to clear any sorts applied to the table.<br>
<br>
The value binding objects that you assign to the <code>sort</code>
attribute in <code>ui:tableColumn</code> must be the proper data type
for sorting to work as expected. For example, you should not use String
objects for numeric data because the digits will be sorted according to
their ASCII values. Sorting the numbers as strings causes the number 2
to be displayed before the number 11, for example.&nbsp; Be sure to
sort using objects such as Number, Character, Date, Boolean, etc.</span><br
style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">You can use a FieldKey id or
value binding to define criteria for sorting the contents of
TableDataProvider. However, when sorting a column of checkboxes or
radio buttons, you must use a value binding because values are external
to the data (i.e., TableDataProvider does not contain FieldKey ids for
a selected checkbox value).&nbsp; <br>
<br>
User interface
guidelines recommend not setting a default initial sort. However, if
you want to set a default initial sort, you can do so by using the <code>addSort(SortCriteria)</code>
method of TableRowGroup. When the table is rendered, the data is sorted
and the primary sort column is highlighted.&nbsp; </span><br
style="color: rgb(0, 0, 0);">
<br style="color: rgb(102, 102, 204);">
<span style="color: rgb(102, 102, 204);"></span><code>&lt;!-- Sortable
Table --&gt;<br>
&lt;ui:table id="table1" <br>
&nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
&nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
&nbsp;&nbsp;&nbsp; title="Sortable Table"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<h3><a name="SelectSingleRow"></a>Example 2: Select Single Row</h3>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">This example shows a column of
radioButton components that are used to select
a single table row. Dynamic row highlighting is set by invoking an
<code>initAllRows()</code> JavaScript function whenever the state of
the radio button
changes. The <code>initAllRows()</code>
function is defined in <a href="#select.js"><code>select.js</code>
shown below</a>. The
radio button state is maintained through the <code>selected</code>
attribute of the
<code>ui:tableRowGroup</code> tag. This example does not maintain state
across paginated
pages.</span><br style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">Note: UI guidelines recommend
that items should not remain selected when they cannot be seen by the
user. Using the
<code>com.sun.rave.web.ui.event.TableSelectPhaseListener</code> object
ensures that rows that are hidden from view are
deselected because the phase listener clears the selected state after
the
rendering phase. The <code>TableSelectPhaseListener</code>
object is used in this example in </span><a
href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java
in the <code>ui:table</code> documentation</a><span
style="color: rgb(0, 0, 0);">.&nbsp; Also refer to the JavaDoc
for <code>TableSelectPhaseListener</code> for more information.&nbsp; </span><br
style="color: rgb(0, 0, 0);">
<br>
<code>&lt;!-- Single Select Row --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; deselectSingleButton="true"<br>
&nbsp;&nbsp;&nbsp; paginateButton="true"<br>
&nbsp;&nbsp;&nbsp; paginationControls="true"<br>
&nbsp;&nbsp;&nbsp; title="Select Single Row"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:radioButton id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<br>
<span style="font-weight: bold;"><a name="select.js"></a>select.js</span><br>
<br>
This example shows the contents of the <code>select.js</code> file
used in the
example above.<br>
<br>
<code>// Use this function to initialize all rows displayed in the
table when the<br>
// state of selected components change (i.e., checkboxes or
radiobuttons used to<br>
// de/select rows of the table). This functionality requires the
selectId <br>
// property of the tableColumn component to be set.<br>
// <br>
// Note: Use setTimeout when invoking this function. This will ensure
that <br>
// checkboxes and radiobutton are selected immediately, instead of
waiting for <br>
// the onClick event to complete. For example: <br>
//<br>
// onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
function initAllRows() {<br>
&nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; table.initAllRows();<br>
}</code><br>
<h3><a name="SelectMultipleRows"></a>Example 3: Select Multiple Rows<br>
</h3>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">This example shows a column of
checkbox components that are used to select multiple table rows.
Dynamic row highlighting is set by
invoking an
<code>initAllRows()</code> JavaScript function whenever the state of
the checkbox
changes. The <code>initAllRows()</code>
function is defined in&nbsp; <a href="#select.js"><code>select.js </code>in
the previous example</a>. The checkbox state is maintained
through the <code>selected</code> attribute of the
<code>ui:tableRowGroup</code> tag. This example does not maintain state
across paginated
pages.</span><br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);"><br>
Note: UI guidelines recommend
that items should not remain selected when they cannot be seen by the
user. Using the
<code>com.sun.rave.web.ui.event.TableSelectPhaseListener</code> object
ensures that rows that are hidden from view are
deselected because the phase listener clears the selected state after
the
rendering phase. The <code>TableSelectPhaseListener</code>
object is used in this example in </span><a
href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java</a><span
style="color: rgb(0, 0, 0);">,
shown in the </span><code style="color: rgb(0, 0, 0);">ui:table</code><span
style="color: rgb(0, 0, 0);"> documentation.&nbsp; Also refer to the
JavaDoc
for <code>TableSelectPhaseListener</code> for more information.&nbsp; </span><br>
<br>
<code>&lt;!-- Select Multiple Rows --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp; paginateButton="true"<br>
&nbsp;&nbsp;&nbsp; paginationControls="true"<br>
&nbsp;&nbsp;&nbsp; title="Select Multiple Rows"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"
sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:checkbox id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<span style="text-decoration: line-through;"></span>
<h3><a name="HiddenSelectedRows"></a>Example 4: Hidden Selected Rows<br>
</h3>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">This example is the same as <a
href="#SelectMultipleRows">Example 3: Select Multiple Rows</a> except
that it maintains state across paginated pages, and shows how to deal
appropriately with the possibility of hiding rows that have been
selected.&nbsp; As in the previous example, the first column is a
column of checkboxes that can be used to select multiple rows. The
checkbox state is maintained through the <code>selected</code>
attribute of
the
<code>ui:tableRowGroup</code> tag.&nbsp; Dynamic row highlighting is
set by
invoking an
<code>initAllRows()</code> JavaScript function whenever the state of
the checkbox
changes. The <code>initAllRows()</code>
function is defined in&nbsp; <a href="tableColumn.html#select.js"><code>select.js
</code>in the previous example</a>. </span><br
style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">If your table must maintain state,
you must set the <code>hiddenSelectedRows</code> attribute to true in
the <code>ui:table</code> tag as shown in this example. The attribute
causes text to be
displayed in the table title and footer to indicate the number of
selected rows that are currently hidden from view.&nbsp; See the </span><a
href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java</a><span
style="color: rgb(0, 0, 0);">
</span><span style="color: rgb(102, 102, 204);"><span
style="color: rgb(0, 0, 0);">utility class in the </span><code
style="color: rgb(0, 0, 0);">ui:table</code><span
style="color: rgb(0, 0, 0);">
documentation.</span></span><br>
<br>
<code></code><span
style="font-weight: bold; text-decoration: line-through;"></span><code>&lt;!--
Hidden Selected Rows --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp;
deselectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp; hiddenSelectedRows="true"<br>
&nbsp;&nbsp;&nbsp; paginateButton="true"<br>
&nbsp;&nbsp;&nbsp; paginationControls="true"<br>
&nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp;
selectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp; title="Hidden Selected Rows"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
binding="#{TableBean.groupA.tableRowGroup}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:checkbox id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
binding="#{TableBean.groupA.checkbox}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
<br>
&nbsp; &lt;!-- Actions (Top) --&gt;<br>
&nbsp; &lt;f:facet name="actionsTop"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsTop"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
page="actionsTop.jsp"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
<br>
&nbsp; &lt;!-- Actions (Bottom) --&gt;<br>
&nbsp; &lt;f:facet name="actionsBottom"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:subview id="actionsBottom"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;jsp:include
page="actionsBottom.jsp"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:subview&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
&lt;/ui:table&gt;</code><br>
<h3><a name="SpacerColumn"></a>Example 5: Spacer Column<br>
</h3>
<span style="color: rgb(0, 0, 0);">This example shows how to
create a blank column to use for spacing in a table. The spacer column
is especially useful in two-column tables. A property table, which is
used to display properties for a single object, typically includes two
data columns. The
first column identifies the properties of the object, and the second
column displays the values for each of the properties. Because tables
created with the <code>ui:table</code> tag expand to the width of the
browser window, the two data columns might become so wide that the
properties and their values are not close together, and readability is
reduced. To solve this problem, you can add a spacer column to one side
of the table.<br>
<br>
In the example, the third column includes the <code>spacerColumn</code>
attribute set to true, and the <code>width </code>attribute set to
70%. The column has no header or footer text, and no data. This column
acts to always keep
the data
of the first two columns in close proximity.&nbsp; If a column header
and footer are required, provide an empty string for the <code>headerText</code>
and
<code>footerText</code> attributes. Set the width attribute to a value
that achieves the desired spacing. </span><br>
<br>
<code>&lt;!-- Spacer Column --&gt;<br>
&lt;ui:table id="table1" title="Spacer Column"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col3" spacerColumn="true"
width="70%"/&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<h3><a name="EmptyCells"></a>Example 6: Empty Cells<br>
</h3>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">This example shows how to
display a theme-specific icon that indicates an empty cell, when
the content of a table cell is not applicable or is unexpectedly empty.
UI guidelines
suggest that the empty cell icon should not be used for a value that is
truly null, such as an
empty alarm cell or a comment field that is blank. In addition, the
icon should not be used for cells that
contain user interface elements such as checkboxes or drop-down lists
when these elements are not applicable. Instead, the elements should
not be displayed so the cell is left empty.</span><br
style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">In this example, the <code>emptyCell
</code>attribute is set to
an expression that evaluates to true in every fifth row. In your
application, it is up to you to decide how to
test if the cell is truly empty. For example, you could use this
syntax: <code>emptyCell="#{name.value.last == null}"</code></span><br
style="color: rgb(0, 0, 0);">
<code style="color: rgb(102, 102, 204);"></code><code><br>
&lt;!-- Empty Cells --&gt;<br>
&lt;ui:table id="table1" title="Empty Cells"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupB.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name" rows="5"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
emptyCell="#{name.tableRow.rowId % 5 == 0}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:checkbox id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupB.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupB.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
emptyCell="#{name.tableRow.rowId % 5 == 0}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
emptyCell="#{name.tableRow.rowId % 5 == 0}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<h3><a name="EmbeddedActions"></a>Example 7: Embedded Actions<br>
</h3>
<span style="color: rgb(0, 0, 0);">This example shows how to add
embedded actions to a table. If the
</span><code style="color: rgb(0, 0, 0);">ui:tableColumn</code><span
style="color: rgb(0, 0, 0);"> tag contains more than one tag
such as&nbsp;</span><code style="color: rgb(0, 0, 0);"></code><code
style="color: rgb(0, 0, 0);">ui:hyperlink</code><span
style="color: rgb(0, 0, 0);"> that a</span><code
style="color: rgb(0, 0, 0);"></code><span style="color: rgb(0, 0, 0);">re
used as embedded actions, you
should set the <code>ui:tableColumn</code> tag's </span><code
style="color: rgb(0, 0, 0);">embeddedActions </code><span
style="color: rgb(0, 0, 0);">attribute to
true. This attribute causes an action separator image to be displayed
between each of the rendered hyperlinks, as recommended in UI
guidelines.</span><br style="color: rgb(0, 0, 0);">
<br>
<code>&lt;!-- Embedded Actions --&gt;<br>
&lt;ui:table id="table1" title="Embedded Actions"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0" embeddedActions="true"
headerText="Actions"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:hyperlink id="action1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{TableBean.groupB.actions.action}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Action
1"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param name="param"
value="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:hyperlink&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:hyperlink id="action2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
action="#{TableBean.groupB.actions.action}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; text="Action
2"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;f:param name="param"
value="#{name.tableRow.rowId}"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:hyperlink&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"
headerText="Last Name" rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2" alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<h3><a name="Alarms"></a>Example 8: Alarms<br>
</h3>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">This example shows how to add
alarms to table data cells. The second </span><code
style="color: rgb(0, 0, 0);">ui:tableColumn</code><span
style="color: rgb(0, 0, 0);"> tag includes a </span><code
style="color: rgb(0, 0, 0);">ui:alarm</code><span
style="color: rgb(0, 0, 0);"> tag to render the alarm icon. The </span><code
style="color: rgb(0, 0, 0);">ui:tableColumn</code><span
style="color: rgb(0, 0, 0);"> tag's </span><code
style="color: rgb(0, 0, 0);">severity</code><span
style="color: rgb(0, 0, 0);">&nbsp; attribute is set to true, which
causes the
table data cell to appear highlighted according to level of
severity.&nbsp;
Note also that the column
is set to sort on the severity of the alarms. See
the <a href="table.html#Example:_TableBean_">TableBean</a>
backing bean
and&nbsp; </span><a style="color: rgb(0, 0, 0);"
href="table.html#Name.java">Name.java</a><span
style="color: rgb(0, 0, 0);"> utlity class example in the </span><code
style="color: rgb(0, 0, 0);">ui:table</code><span
style="color: rgb(0, 0, 0);"> documentation for the model data. </span><br
style="color: rgb(255, 153, 0);">
<br>
<code>&lt;!-- Alarms --&gt;<br>
&lt;ui:table id="table1" title="Alarms"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1" <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"
sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
severity="#{name.value.severity}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="alarm"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:alarm id="alarm"
severity="#{name.value.severity}"/&gt; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<h3><a name="MultiColumnHeaders"></a>Example 9: Multiple Column Headers
&amp; Footers<br>
</h3>
This example shows how to use nested tableColumn components to create
multiple headers and footers. The column header of the parent
tableColumn component will span the nested tableColumn children. Not
all attributes are supported in this configuration. Typically, only the
header, footer, tableFooter, and sort would apply to a header and
spaning multuple columns. Sorting is supported, but is recommended only
for tableColumn children. Further, nesting tableColumn components will
render; however, the styles used here support one level of nexting.<br>
<br>
<span style="color: rgb(0, 0, 0);">This example shows how to use
nested <code>ui:tableColumn</code> tags to create
multiple headers and footers. The third <code>ui:tableColumn</code>
(col3) contains four nested columns col3a, col3b, col3c, and col3d. The
column header specified in col3 spans the four nested columns.&nbsp;
However, not
all <code>ui:tableColumn</code></span><span
style="color: rgb(102, 102, 204);"><span style="color: rgb(0, 0, 0);">
attributes are supported when the
tags are nested. Typically, only the
header, footer, tableFooter, and sort would apply to a header and
spaning multiple columns. Sorting in the parent tableColumn is
supported, but for usability, sorting is recommended only for
tableColumn children. In addition, nesting of more than one level of
tableColumn components will render, but the CSS styles only support one
level of nesting.&nbsp;&nbsp;&nbsp;</span>
<br style="color: rgb(0, 0, 0);">
</span><br>
<code>&lt;!-- Multiple Headers &amp;amp; Footers --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
&nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp;
deselectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp; footerText="Table Footer"<br>
&nbsp;&nbsp;&nbsp; paginateButton="true"<br>
&nbsp;&nbsp;&nbsp; paginationControls="true"<br>
&nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp;
selectMultipleButtonOnClick="setTimeout('disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
&nbsp;&nbsp;&nbsp; title="Multiple Headers &amp;amp; Footers"&gt;<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
binding="#{TableBean.groupA.tableRowGroup}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rows="#{TableBean.groupA.preferences.rows}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupA.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort="#{TableBean.groupA.select.selectedState}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:checkbox id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupA.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupA.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"
headerText="First Name"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col3" headerText="Task
Status"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;!-- Nested Columns --&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col3a"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="A"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
footerText="ColFtrA"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sortIcon="ALARM_CRITICAL_MEDIUM"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tableFooterText="TblFtrA"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="a"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col3b"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="B"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
footerText="ColFtrB"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sortIcon="ALARM_MAJOR_MEDIUM"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tableFooterText="TblFtrB"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="b"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col3c"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="C"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
footerText="ColFtrC"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sortIcon="ALARM_MINOR_MEDIUM"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tableFooterText="TblFtrC"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="c"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col3d"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="D"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
footerText="ColFtrD"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sortIcon="ALARM_DOWN_MEDIUM"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tableFooterText="TblFtrD"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="d"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><span style="font-family: monospace;"></span><br>
<h3 style="color: rgb(0, 0, 0);">faces_config.xml Entry for
Managed Beans</h3>
<span style="color: rgb(0, 0, 0);">The examples use the <a
href="table.html#Example:_TableBean_">TableBean</a>
managed bean, which requires the following entry to be added to the </span><code
style="color: rgb(0, 0, 0);">faces_config.xml</code><span
style="color: rgb(0, 0, 0);"> file. </span><br>
<br>
<code>&lt;!DOCTYPE faces-config PUBLIC <br>
&nbsp;&nbsp;&nbsp; '-//Sun Microsystems, Inc.//DTD JavaServer Faces
Config 1.0//EN' <br>
&nbsp;&nbsp;&nbsp; 'http://java.sun.com/dtd/web-facesconfig_1_1.dtd'&gt;<br>
<br>
&lt;faces-config&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;The
backing bean for the table example&lt;/description&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-name&gt;TableBean&lt;/managed-bean-name&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-class&gt;table.TableBean&lt;/managed-bean-class&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
&lt;/faces-config&gt;</code>
<br>
    ]]></description>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Sets the horizontal alignment (left, right, justify, center) for the cell contents
      ]]></description>
    </attribute>

    <attribute>
      <name>alignKey</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>alignKey</code> attribute to specify the FieldKey id or FieldKey 
to be used as an identifier for a specific data element on which to align the 
table cell data in the column. If <code>alignKey</code> specifies a 
FieldKey, the FieldKey is used as is; otherwise, a FieldKey is created using 
the <code>alignKey</code> value that you specify. Alignment is based on 
the object type of the data element. For example, Date and Number objects are 
aligned "right", Character and String objects are aligned "left", and Boolean 
objects are aligned "center". All columns, including select columns, are 
aligned "left" by default. Note that the align property overrides this value.
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The binding attribute is used to configure the component through Java code. 
This approach is intended for advanced uses, when the tag attributes cannot 
provide the desired output. The value of the binding attribute must be a 
JavaServer Faces EL expression that resolves to a backing bean, or to a 
backing bean property of type <code>com.sun.rave.web.ui.component.TableColumn</code>. 
You must assign a component id to the component instance.
      ]]></description>
    </attribute>

    <attribute>
      <name>descending</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>descending</code> attribute to specify that the first 
user-applied sort is descending. By default, the first time a user clicks a 
column's sort button or column header, the sort is ascending. Note that this 
not an initial sort. The data is initially displayed unsorted.
      ]]></description>
    </attribute>

    <attribute>
      <name>embeddedActions</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Set the <code>embeddedActions</code> attribute to true when the column includes 
more than one embedded action. This attribute causes a separator image to be 
displayed between the action links. This attribute is overridden by the 
<code>emptyCell</code> attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>emptyCell</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>emptyCell</code> attribute to cause a theme-specific image to be 
displayed when the content of a table cell is not applicable or is unexpectedly 
empty. You should not use this attribute for a value that is truly null, such 
as an empty alarm cell or a comment field that is blank. In addition, the image 
should not be used for cells that contain user interface elements such as 
checkboxes or drop-down lists when these elements are not applicable. Instead, 
the elements should simply not be displayed so the cell is left empty.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraFooterHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;td&gt;</code> HTML element that 
is rendered for the column footer. Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"nowrap=`nowrap'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraHeaderHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;th&gt;</code> HTML element that 
is rendered for the column header. Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"nowrap=`nowrap'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraTableFooterHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;td&gt;</code> HTML element that 
is rendered for the table column footer. Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"nowrap=`nowrap'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>footerText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text to be displayed in the column footer.
      ]]></description>
    </attribute>

    <attribute>
      <name>headerText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text to be displayed in the column header.
      ]]></description>
    </attribute>

    <attribute>
      <name>height</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Set the cell height in pixels (deprecated in HTML 4.0)
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>noWrap</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Disable word wrapping (deprecated in HTML 4.0)
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>rowHeader</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>rowHeader</code> attribute to specify that the cells of the 
column are acting as row headers. Row headers are cells that "label" the row. 
For example, consider a table where the first column contains checkboxes, and 
the second column contains user names. The third and subsequent columns contain 
attributes of those users. The content of the cells in the user name column are 
acting as row headers. The <code>ui:tableColumn</code> tag for the user name 
column should set the <code>rowHeader</code> attribute to true. If a table 
contains, for example, a system log with time stamp and log entry columns, 
neither column is acting as a row header, so the <code>rowHeader</code> 
attribute should not be set. 
<br><br>
By default, most column cells are rendered by the table component with HTML 
<code>&lt;td scope="col"&gt;</code> elements. The exceptions are columns that 
contain checkboxes or radio buttons and spacer columns, all of which are 
rendered as <code>&lt;td&gt;</code> elements without a scope property. 
<br><br>
When you set the <code>rowHeader</code> attribute, the column cells are 
rendered as <code>&lt;th scope="row"&gt;</code> elements, which enables 
adaptive technologies such as screen readers to properly read the table to 
indicate that the contents of these cells are headers for the rows.
      ]]></description>
    </attribute>

    <attribute>
      <name>scope</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Indicates that information in a cell is also acting as a header
      ]]></description>
    </attribute>

    <attribute>
      <name>selectId</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>selectId</code> attribute in select columns, which contain 
checkboxes or radio buttons for selecting table rows. The value of 
<code>selectId</code> must match the <code>id</code> attribute of the checkbox 
or radioButton component that is a child of the tableColumn component. A fully 
qualified ID based on the tableColumn component ID and the 
<code>selectId</code> for the current row will be dynamically created for the 
<code>&lt;input&gt;</code> element that is rendered for the checkbox or radio 
button. The <code>selectId</code> is required for functionality that supports 
the toggle buttons for selecting rows. The <code>selectId</code> also 
identifies the column as a select column, for which the table component 
uses different CSS styles.
      ]]></description>
    </attribute>

    <attribute>
      <name>severity</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>severity</code> attribute when including the <code>ui:alarm</code> 
component in a column, to match the severity of the alarm. Valid values are 
described in the <code>ui:alarm</code> documentation. When the 
<code>severity</code> attribute is set in the tableColumn, the table 
component renders sort tool tips to indicate that the column will be sorted 
least/most severe first, and the table cell appears hightlighted according to 
the level of severity. This functionality is overridden by the 
<code>emptyCell</code> attribute.
      ]]></description>
    </attribute>

    <attribute>
      <name>sort</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>sort</code> attribute to specify a FieldKey id or SortCriteria 
that defines the criteria to use for sorting the contents of a 
TableDataProvider. If SortCriteria is provided, the object is used for sorting 
as is. If an id is provided, a FieldIdSortCriteria is created for sorting. In 
addition, a value binding can also be used to sort on an object that is 
external to TableDataProvider, such as the selected state of a checkbox or 
radiobutton. When a value binding is used, a ValueBindingSortCriteria object 
is created for sorting. All sorting is based on the object type associated with 
the data element (for example, Boolean, Character, Comparator, Date, Number, 
and String). If the object type cannot be determined, the object is compared as 
a String. The <code>sort</code> attribute is required for a column to be shown 
as sortable.
      ]]></description>
    </attribute>

    <attribute>
      <name>sortIcon</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The theme identifier to use for the sort button that is displayed in the column 
header. Use this attribute to override the default image.
      ]]></description>
    </attribute>

    <attribute>
      <name>sortImageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Absolute or relative URL to the image used for the sort button that is 
displayed in the column header.
      ]]></description>
    </attribute>

    <attribute>
      <name>spacerColumn</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>spacerColumn</code> attribute to use the column as a blank column 
to enhance spacing in two or three column tables. When the 
<code>spacerColumn</code> attribute is true, the CSS styles applied to the 
column make it appear as if the columns are justified. If a column header and 
footer are required, provide an empty string for the <code>headerText</code> 
and <code>footerText</code> attributes. Set the <code>width</code> attribute to 
justify columns accordingly.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tableFooterText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text to be displayed in the table column footer. The table column footer is 
displayed once per table, and is especially useful in tables with multiple 
groups of rows.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>valign</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Vertical alignment (top, middle, bottom) for the content of each cell in the column 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

    <attribute>
      <name>width</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Set the width of the column in either pixels or percent(deprecated in HTML 4.0) 
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>tableRowGroup</name>
    <tag-class>com.sun.rave.web.ui.taglib.TableRowGroupTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
Use the <code>ui:tableRowGroup</code>
tag to define the rows of a table, inside a <a href="table.html"><code>ui:table</code></a>
tag.&nbsp; A table must include at least one tableRowGroup component to
contain the table row content. <br>
<p style="color: rgb(0, 0, 0);">The <code>ui:table</code>
tag is
used to define the structure and actions of the table, and is a
container for <code>ui:tableRowGroup</code>
tags.&nbsp; The <code>ui:tableRowGroup</code> tag is a container for <code></code><a
href="tableColumn.html"><code>ui:tableColumn</code></a><code></code>
tags, which are used&nbsp;<code></code>to define the
columns of the table.&nbsp; The <a href="table.html">documentation
for the <code>ui:table</code> tag</a> contains detailed information
about the table component.&nbsp; This page provides details about how
to create table rows only.<br>
</p>
<p style="color: rgb(0, 0, 0);">When you use one <code>ui:tableRowGroup</code>
tag in the <code>ui:table</code> tag, you create a basic table.&nbsp;
Examples of basic tables are shown in the <a table.html=""><code>ui:table</code>
tag documentation</a>. When
you use multiple <code>ui:tableRowGroup</code> tags, you create a
group table, which is discussed in detail in this document.<br>
</p>
<p style="color: rgb(0, 0, 0);">
</p>
<h3 style="color: rgb(0, 0, 0);">HTML Elements and Layout</h3>
<span style="color: rgb(0, 0, 0);">The tableRowGroup component is used
to define attributes for XHTML </span><code
style="color: rgb(0, 0, 0);">&lt;tr&gt;</code>
<span style="color: rgb(0, 0, 0);">&nbsp;
elements, which
are used
to display&nbsp;rows of data. You can specify multiple <code>ui:tableRowGroup</code>
tags to create groups of rows. Each group is visually separate from the
other groups, but all rows of the table can be sorted and filtered at
once, within their respective groups. <br>
<br>
UI guidelines recommend
that
column headers and table column footers are
only rendered
once for each table. Column headers typically appear at the top of the
table,
below the Action Bar and above all row groups. Table column footers
appear only at the
bottom of the table, below all row groups. The column headers and
table column footers are defined in the <code>headerText</code>
and <code>tableFooterText</code> attributes of the <code>ui:tableColumn</code>
tags. To ensure that these headers and footers are rendered only once,
you should define the&nbsp;
<code>headerText</code>
and <code>tableFooterText</code> attributes only in the <code>ui:tableColumn</code>
tags inside the
first <code>ui:tableRowGroup</code> tag in the
table.&nbsp; See the </span><a href="tableColumn.html"
style="color: rgb(0, 0, 0);"><code>ui:tableColumn</code>
documentation</a><span style="color: rgb(0, 0, 0);"> for more
information. </span><br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);"><br>
The following <a href="tableRowGroup.html#diagram">diagram</a>
shows the placement of the areas of a table, and highlights the areas
that are defined with <code>ui:tableRowGroup</code> tags. This diagram
depicts two row groups.</span><br>
<br>
<a name="diagram"></a><br>
<table style="text-align: left; width: 100%;" border="1" cellpadding="2"
cellspacing="2">
<tbody>
<tr style="color: rgb(204, 204, 204);">
<td
style="vertical-align: top; background-color: rgb(153, 153, 153);"
rowspan="1" colspan="1">Title
Bar&nbsp;</td>
</tr>
<tr style="color: rgb(153, 153, 153);">
<td
style="vertical-align: top; background-color: rgb(208, 208, 208);"
rowspan="1" colspan="1">Action
Bar (top)&nbsp;&nbsp;</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">
<table style="text-align: left; height: 223px; width: 100%;"
border="1" cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Header <br>
</td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Header<br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);"
rowspan="1" colspan="2">Group
Header Bar (specified with <code>headerText</code>
attribute and <code>header</code> facet in first <code>ui:tableRowGroup</code>
tag) </td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">Table
data
specified in <code>ui:tableRowGroup</code><br>
<code> <br>
<br>
<br>
</code></td>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);">Table
data
specified in <code>ui:tableRowGroup</code><br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Footer</td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Footer <br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(210, 224, 235);"
rowspan="1" colspan="2">Group
Footer Bar&nbsp; <br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(163, 184, 203);"
rowspan="1" colspan="2">Group Header Bar<br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(163, 184, 203);">Table
data specified in <code>ui:tableRowGroup</code><br>
<br>
<br>
<br>
<br>
</td>
<td
style="vertical-align: top; background-color: rgb(163, 184, 203);">Table
data specified in <code>ui:tableRowGroup</code><br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Footer<br>
</td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Column
Footer</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(163, 184, 203);"
rowspan="1" colspan="2">Group Footer Bar<br>
</td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
Column Footer </td>
<td
style="vertical-align: top; background-color: rgb(232, 232, 232); color: rgb(153, 153, 153);">Table
Column Footer </td>
</tr>
</tbody>
</table>
<big><span style="color: rgb(0, 0, 0);"> </span></big></td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(208, 208, 208);"><span
style="color: rgb(153, 153, 153);">Action
Bar (bottom)&nbsp;</span><small> </small> </td>
</tr>
<tr>
<td
style="vertical-align: top; background-color: rgb(153, 153, 153);"
rowspan="1" colspan="1"><span style="color: rgb(0, 0, 0);"><span
style="color: rgb(204, 204, 204);">Footer</span><code></code></span><code>
</code></td>
</tr>
</tbody>
</table>
<span style="text-decoration: line-through;"></span><br>
<h4 style="color: rgb(0, 0, 0);">Group Header Bar</h4>
<span style="color: rgb(0, 0, 0);">The Group Header Bar displays
a header by default at the top of each group of rows.&nbsp; The text of
the group header
is specified with the <code>headerText</code> attribute. You can
specify a separate component to provide header content by using the <code>header</code>
facet, which overrides the <code>headerText</code> attribute.&nbsp;
You can
use the following <code>ui:tableRowGroup</code> attributes to change
the appearance of the group header:<br>
</span>
<ul style="color: rgb(0, 0, 0);">
<li>
<p><code>aboveColumnHeader</code>
set to true makes the group header display above the column header.</p>
</li>
<li>
<p><code>selectMultipleToggleButton</code>
set to true adds a checkbox that allows users to
select and deselect all rows in the group</p>
</li>
<li>
<p><code>collapsed</code>
set to true causes the group to be rendered with the rows hidden, and
only the group header is visible.&nbsp; </p>
<p> </p>
</li>
<li>
<p><code>groupToggleButton</code>
set to true adds a button image that allows users to expand and
collapse
the group of rows. When the group collapses, all the rows are hidden
and only the header is visible. </p>
<p> </p>
</li>
<li>
<p><code>extraHeaderHtml</code>
can be used to append HTML code to the <code>&lt;tr&gt;</code> element
that is rendered for the group header</p>
</li>
</ul>
<span style="color: rgb(0, 0, 0);">Note: Detailed descriptions of
the
attributes are in the attributes table at the end of this document.<br>
</span>
<h4 style="color: rgb(0, 0, 0);">Group Footer Bar</h4>
<p style="color: rgb(0, 0, 0);">The Group Footer Bar
displays an optional footer below each group of rows. The text of the
group footer is specified with the <code>footerText</code> attribute.
You can specify a separate component to provide the footer content by
using the <code>footer</code> facet, which overrides the <code>footerText</code>
attribute.&nbsp; You can use the following
<code>ui:tableRowGroup</code>
attributes to change
the appearance of the group footer:<br>
<code><br>
</code></p>
<ul style="color: rgb(0, 0, 0);">
<li><code>aboveColumnFooter</code>
set to true makes the group footer display above the column footer.</li>
<li>
<p>&nbsp;<code>extraFooterHtml</code> can be used to
append HTML code to the <code>&lt;tr&gt;</code> element that is
rendered for the group footer</p>
</li>
</ul>
<h4 style="color: rgb(0, 0, 0);">Table Data</h4>
<p><span style="color: rgb(0, 0, 0);">The table data is specified with
the <code>sourceData</code> and <code>sourceVar</code> attributes.
The <code>sourceData</code> attribute specifies the source of the data
that populates the table. The <code>sourceVar</code> attribute
specifies the name of the request-scope variable to use for exposing
the model data when iterating over table rows. Each table in a JSP page
must use a unique <code>sourceVar</code> value. See the <a
href="#Lifecycle">Life Cycle section </a>for more information about
these attributes.&nbsp; &nbsp; </span><span
style="color: rgb(102, 102, 204);"><span
style="color: rgb(255, 153, 0);">
</span></span><span style="color: rgb(102, 102, 204);"> </span></p>
<h3>Facets</h3>
<span style="color: rgb(0, 0, 0);">The </span><code
style="color: rgb(0, 0, 0);">ui:tableRowGroup</code><span
style="color: rgb(0, 0, 0);"> tag supports the following facets,
which
allow you to customize the
layout&nbsp; of the component.</span><br style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<table style="width: 100%; color: rgb(0, 0, 0);" border="1"
cellpadding="2" cellspacing="2">
<tbody>
<tr>
<td style="vertical-align: top;"><span style="font-weight: bold;">Facet
Name</span><code><br>
</code></td>
<td style="vertical-align: top; font-weight: bold;">Table Item
Implemented by the Facet<br>
</td>
</tr>
<tr>
<td><code>footer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
</code></td>
<td>Footer that applies to the group of rows defined by the <code>ui:tableRowGroup</code>
tag.&nbsp; This facet can be used to&nbsp; replace the default footer.<br>
</td>
</tr>
<tr>
<td><code>header</code></td>
<td>Header that applies to the group of rows defined by the <code>ui:tableRowGroup</code>
tag. This facet can be used to replace the default header. </td>
</tr>
</tbody>
</table>
<br>
<h3 style="color: rgb(0, 0, 0);">Client Side JavaScript
Functions</h3>
<span style="color: rgb(0, 0, 0);">See the </span><a
href="table.html#JavaScript" style="color: rgb(0, 0, 0);"><code>ui:table</code>
tag's
JavaScript documentation</a><span style="color: rgb(0, 0, 0);">.&nbsp;
The same functions are used for the
<code>ui:tableRowGroup</code> tag.</span><br>
<ul>
</ul>
<h3>Notes for the <code>ui:tableRowGroup</code> tag</h3>
All examples assume that<span style="color: rgb(102, 102, 204);"></span>
the <code>ui:table</code> tag is contained within a HTML <code>&lt;form&gt;</code>
element so actions can<span style="text-decoration: line-through;"></span><span
style="color: rgb(102, 102, 204);"></span> submit form data.
For basic table and sort
examples,<span style="text-decoration: line-through;"></span>
see the <a href="table.html"><code>ui:table</code>
tag documentation</a>
and <a href="tableColumn.html"><code>ui:tableColumn</code>
documentation</a>. <br>
<h4><span style="font-weight: bold;"><a name="Lifecycle"></a>Life Cycle</span></h4>
<span style="text-decoration: line-through;"></span>The <code>sourceData</code>
property of tableRowGroup is invoked at
least twice during
the JavaServer Faces life cycle. The <code>sourceData</code> is
invoked once during
one of the Apply Request Values, Process Validations, or Update Model
Values phases, and once during the Render Response phase. In order to
process the
previously displayed children during the Apply Request Values, Process
Validations, or Update Model Values phases,
the table
must use the same DataProvider that was used to render the previous
page. For
example, suppose that sorting, filtering, and pagination were applied
on the previous page, and
rows 10-20 of 1000 were currently displayed. You want to update only
the currently
displayed components, rows 10-20. To do this, you must not update the
DataProvider until the Invoke Application phase or Render Response
phases, when it is safe to render new
data.<br>
<p style="color: rgb(0, 0, 0);">Note that if the underlying
DataProvider has changed in any way, processing of the previously
displayed children might not be possible during the Apply Request
Values, Process
Validations, or Update Model Values phases. In addition, if the
DataProvider is null or empty, no children will be processed and
their <code>processDecodes()</code>, <code>processValidators()</code>,
and <code>processUpdates()</code> methods will not be invoked. If a
component has not been decoded (in the Apply Request Values phase),
action events might not be received and component properties such as
hyperlink query parameters cannot be retrieved.&nbsp; Also, if a
component has not been updated (in the Update Model Values phase),
submitted values cannot be retrieved for checkboxes, radio buttons,
etc. </p>
<span style="color: rgb(0, 0, 0);">When obtaining data is
expensive, consider caching the DataProvider. A cached DataProvider
persists across requests if the backing bean uses session scope, or if
the application uses server-side state saving and the <code>TableRowGroup.setSourceData</code>
method is set. Note that a phase listener may be used to initialize the
DataProvider during the Invoke Application Phase. However, when the
underlying DataProvider has changed in any way, UI guidelines recommend
that pagination is reset to the first page. You can use the
tableRowGroup component's <code>setFirst()</code> method to set the
first row to be displayed.<br>
<br>
</span>
<h3 style="color: rgb(0, 0, 0);"><a name="Examples"></a>Examples</h3>
<span style="color: rgb(0, 0, 0);">The following examples use a
backing bean called </span><a href="table.html#Example:_TableBean_"
style="color: rgb(0, 0, 0);">TableBean</a><span
style="color: rgb(0, 0, 0);">,
which is shown in the <code>ui:table</code> tag documentation. </span><a
href="tableRowGroup.html#UtilityClasses" style="color: rgb(0, 0, 0);">Utility
classes</a><span style="color: rgb(0, 0, 0);"> used in the examples are
included
in this <code>ui:tableRowGroup</code> page, after the examples.&nbsp;
Additional examples are shown in the </span><code
style="color: rgb(0, 0, 0);"><a href="table.html#Examples">ui:table</a></code><span
style="color: rgb(0, 0, 0);">
and </span><code style="color: rgb(0, 0, 0);"><a
href="tableColumn.html">ui:tableColumn</a></code><span
style="color: rgb(0, 0, 0);">
documents.</span><br style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="font-weight: bold; color: rgb(0, 0, 0);">Examples in
this file:<br>
<br>
</span>
<div style="margin-left: 40px; color: rgb(0, 0, 0);"><a
href="#GroupTable">Example 1: Group Table</a><br>
<p><a href="#DynamicTable">Example 2: Dynamic Table</a><br>
</p>
<p><a href="#DynamicGroupTable">Example 3: Dynamic Group Table</a><br>
</p>
</div>
<span style="font-weight: bold; color: rgb(0, 0, 0);">
</span>
<p style="font-weight: bold; color: rgb(0, 0, 0);">Supporting
files:</p>
<div style="margin-left: 40px; color: rgb(0, 0, 0);">
<p><a href="table.html#Example:_TableBean_">TableBean
backing bean in <code>ui:table</code> documentation<br>
</a></p>
<p><a href="tableRowGroup.html#UtilityClasses">Utility
classes used in the examples</a></p>
</div>
<h4><a name="GroupTable"></a>Example 1: Group Table<br>
</h4>
<span style="text-decoration: line-through;"></span><span
style="color: rgb(0, 0, 0);">This example shows how to
create a group table. A group table contains rows of data that are
arranged in discrete sections or groups
within the table.&nbsp; In a
basic table, each column typically has a header and perhaps a footer.
However, in a group table, each group of rows can have its own header
and footer. In addition, a group table can display table column footers
and
an overall table footer below all
data groups.&nbsp; The table column footers are specified in <code>ui:tableColumn</code>
tags and the overall footer is specified in the <code>ui:table</code>
tag. See the <a href="#diagram">diagram </a>of the
table areas. </span><br style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">Additional
attributes should be
used in the <code>ui:tableColumn</code> tags within each <code>ui:tableRowGroup</code>
tag to specify
functionality. For
example, the <code>selectId</code> and <code>sort</code>&nbsp;
attributes allow column
headers to sort on all row groups at once.&nbsp; <br>
<br>
The example uses the backing bean called TableBean for the table data.
See the
</span><a href="table.html#Example:_TableBean_"
style="color: rgb(0, 0, 0);">TableBean
backing bean in <code>ui:table</code> documentation</a><span
style="color: rgb(0, 0, 0);">.</span><br style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<span style="color: rgb(0, 0, 0);">Note: UI guidelines recommend
that items should not remain selected when they cannot be seen by the
user. Using the
<code>com.sun.rave.web.ui.event.TableSelectPhaseListener</code> object
ensures that rows that are hidden from view are
deselected because the phase listener clears the table state after the
rendering phase. Although
pagination is not used for a group table, the <code>TableSelectPhaseListener</code>
object is used in this example in the Select util, which is shown in </span><a
href="table.html#Select.java" style="color: rgb(0, 0, 0);">Select.java
in the <code>ui:table</code> documentation</a><span
style="color: rgb(0, 0, 0);">.&nbsp; Also refer to the JavaDoc
for <code>TableSelectPhaseListener</code> for more information.&nbsp; </span><br
style="color: rgb(0, 0, 0);">
<br>
<code>&lt;!-- Group Table --&gt;<br>
&lt;ui:table id="table1"<br>
&nbsp;&nbsp;&nbsp; clearSortButton="true"<br>
&nbsp;&nbsp;&nbsp; deselectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp; selectMultipleButton="true"<br>
&nbsp;&nbsp;&nbsp; sortPanelToggleButton="true"<br>
&nbsp;&nbsp;&nbsp; footerText="Table Footer"&gt;<br>
<br>
&nbsp; &lt;!-- Title --&gt;<br>
&nbsp; &lt;f:facet name="title"&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:staticText text="Group Table"/&gt;<br>
&nbsp; &lt;/f:facet&gt;<br>
<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
binding="#{TableBean.groupB.tableRowGroup}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Group Footer"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Group Header"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupB.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectMultipleToggleButton="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupB.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupToggleButton="true"&gt;<br>
<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extraHeaderHtml="nowrap='nowrap'"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extraFooterHtml="nowrap='nowrap'"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extraTableFooterHtml="nowrap='nowrap'"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="ColFtr"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort="#{TableBean.groupB.select.selectedState}"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:checkbox id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupB.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupB.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extraHeaderHtml="nowrap='nowrap'"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="Last Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; headerText="First Name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
<br>
&nbsp; &lt;ui:tableRowGroup id="rowGroup2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
binding="#{TableBean.groupC.tableRowGroup}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; collapsed="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupC.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectMultipleToggleButton="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceData="#{TableBean.groupC.names}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sourceVar="name"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; groupToggleButton="true"&gt;<br>
<br>
&nbsp;&nbsp;&nbsp; &lt;!-- Row group header --&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:facet name="header"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:panelGroup id="groupHeader"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:markup tag="span"
extraAttributes="class='TblGrpLft'"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:staticText styleClass="TblGrpTxt" text="Group Header"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:markup&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:markup tag="span"
extraAttributes="class='TblGrpRt'"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;ui:staticText styleClass="TblGrpMsgTxt" text="Right-Aligned
Text"/&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:markup&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/ui:panelGroup&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
<br>
&nbsp;&nbsp;&nbsp; &lt;!-- Row group footer --&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;f:facet name="footer"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
styleClass="TblGrpFtrRowTxt" text="Group Footer"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/f:facet&gt;<br>
<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col0"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extraHeaderHtml="nowrap='nowrap'"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extraFooterHtml="nowrap='nowrap'"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extraTableFooterHtml="nowrap='nowrap'"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="ColFtr"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; selectId="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
sort="#{TableBean.groupC.select.selectedState}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
tableFooterText="TblColFtr"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:checkbox id="select"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
onClick="setTimeout('initAllRows()', 0)"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selected="#{TableBean.groupC.select.selected}"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
selectedValue="#{TableBean.groupC.select.selectedValue}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col1"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowHeader="true"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="last"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tableFooterText="Table
Column Footer"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.last}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tableColumn id="col2"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alignKey="first"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; footerText="Column Footer"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort="first"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tableFooterText="Table
Column Footer"&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:staticText
text="#{name.value.first}"/&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tableColumn&gt;<br>
&nbsp; &lt;/ui:tableRowGroup&gt;<br>
&lt;/ui:table&gt;</code><br>
<br>
<span style="font-weight: bold;">select.js</span><br>
<br>
This example shows the contents of the <code>select.js</code><span
style="font-weight: bold;"> </span>file used in the example above.<br>
<code><br>
// Use this function to initialize all rows displayed in the table when
the<br>
// state of selected components change (i.e., checkboxes or
radiobuttons used to<br>
// de/select rows of the table). This functionality requires the
selectId <br>
// property of the tableColumn component to be set.<br>
// <br>
// Note: Use setTimeout when invoking this function. This will ensure
that <br>
// checkboxes and radiobutton are selected immediately, instead of
waiting for <br>
// the onClick event to complete. For example: <br>
//<br>
// onClick="setTimeout('initAllRows(); disableActions()', 0)"<br>
function initAllRows() {<br>
&nbsp;&nbsp;&nbsp; // Disable table actions by default.<br>
&nbsp;&nbsp;&nbsp; var table = document.getElementById("form1:table1");<br>
&nbsp;&nbsp;&nbsp; table.initAllRows();<br>
}</code><br>
<h4><a name="DynamicTable"></a>Example 2: Dynamic Table<br>
</h4>
<span style="color: rgb(0, 0, 0);">This example shows how to use
the <code>ui:table</code> tag to create a binding to a backing
bean to
dynamically create a table layout. The dynamic table is created as
needed and can be changed each time the page is rendered.&nbsp;&nbsp; </span><br
style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<code style="color: rgb(0, 0, 0);">&lt;ui:table id="table1"
binding="#{DynamicTableBean.table}"/&gt;<br>
<br>
<br>
</code><span style="color: rgb(0, 0, 0);">The backing bean,
DynamicTableBean, is
shown in the following </span><a href="#DynamicTableBean"
style="color: rgb(0, 0, 0);"><code>DynamicTableBean.java</code></a><span
style="color: rgb(0, 0, 0);"> class. This bean is used only to
create the table layout, and shows how to use the tableRowGroup
component directly
through Java code instead of through the JSP tag&nbsp; </span><code
style="color: rgb(0, 0, 0);">ui:tableRowGroup.</code><span
style="color: rgb(0, 0, 0);"> The <a href="#Dynamic.java">Dynamic.java</a>
utility class provides the functionality for adding properties to the
table.&nbsp; The table
also uses methods that are
defined in the </span><a href="table.html#Example:_TableBean_"
style="color: rgb(0, 0, 0);">TableBean
shown in the <code>ui:table</code> documentation</a><span
style="color: rgb(0, 0, 0);">.</span><br>
<h4><code style="color: rgb(102, 102, 204);"><a name="DynamicTableBean"></a><span
style="color: rgb(0, 0, 0);"></span></code><span
style="color: rgb(0, 0, 0);">DynamicTableBean.java Backing Bean</span><br>
</h4>
<h4><code style="font-weight: normal;">package table;<br>
<br>
import com.sun.rave.web.ui.component.Table;<br>
import com.sun.rave.web.ui.component.TableRowGroup;<br>
<br>
import table.util.Dynamic;<br>
<br>
// Backing bean for dynamic table examples.<br>
//<br>
// Note: To simplify the example, this bean is used only to create the
table <br>
// layout. The resulting table will use methods already defined in
TableBean.<br>
public class DynamicTableBean {<br>
&nbsp;&nbsp;&nbsp; private Dynamic dynamic = null; // Dynamic util.<br>
&nbsp;&nbsp;&nbsp; private Table table = null; // Table component.<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public DynamicTableBean() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dynamic = new Dynamic();<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Table component.<br>
&nbsp;&nbsp;&nbsp; public Table getTable() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (table == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Get table row group.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
TableRowGroup rowGroup1 = dynamic.getTableRowGroup("rowGroup1",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.names}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selectedState}", null);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Set table row group properties.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dynamic.setTableRowGroupChildren(rowGroup1,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selectedState}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selected}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selectedValue}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.actions.action}", true);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Get table.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table = dynamic.getTable("table1", "Dynamic Table");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table.getChildren().add(rowGroup1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return table;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set Table component.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param table The Table component.<br>
&nbsp;&nbsp;&nbsp; public void setTable(Table table) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.table = table;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
</h4>
<code>
</code>
<h4><a name="DynamicGroupTable"></a>Example 3: Dynamic Group Table<br>
</h4>
This example shows how to<span style="color: rgb(0, 0, 0);"> use
the <code>ui:table</code> tag to create a binding to a backing
bean to
dynamically create a group table layout. </span><span
style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
style="color: rgb(0, 0, 0);">The dynamic group table is created
as
needed and can be changed each time the page is rendered.</span><br
style="color: rgb(0, 0, 0);">
<br style="color: rgb(0, 0, 0);">
<code style="color: rgb(0, 0, 0);">&lt;ui:table id="table1"
binding="#{DynamicGroupTableBean.table}"/&gt;<br>
<br>
</code><span style="color: rgb(0, 0, 0);">The backing bean,
DynamicGroupTableBean, is
shown in the following </span><a href="#DynamicGroupTableBean"
style="color: rgb(0, 0, 0);"><code>DynamicGroupTableBean.java</code></a><span
style="color: rgb(0, 0, 0);"> class. This bean is used only to
create the table layout, and shows how to use the tableRowGroup
component directly
through Java code instead of through the JSP tag&nbsp; </span><code
style="color: rgb(0, 0, 0);">ui:tableRowGroup.</code><span
style="color: rgb(0, 0, 0);"> The <code><a
href="tableRowGroup.html#Dynamic.java">Dynamic.java</a></code>
utility
class provides the functionality for adding
properties to the table.&nbsp; The table also
uses methods that are
defined in the </span><a href="table.html#Example:_TableBean_"
style="color: rgb(0, 0, 0);">TableBean
shown in the <code>ui:table</code> documentation</a><span
style="color: rgb(0, 0, 0);">.</span><br>
<h4><code style="color: rgb(102, 102, 204);"><a
name="DynamicGroupTableBean"></a><span style="color: rgb(0, 0, 0);"></span></code><span
style="color: rgb(0, 0, 0);">DynamicGroupTableBean.java Backing Bean</span></h4>
<code>package table;<br>
<br>
import table.util.Dynamic;<br>
<br>
import com.sun.rave.web.ui.component.StaticText;<br>
import com.sun.rave.web.ui.component.Table;<br>
import com.sun.rave.web.ui.component.TableRowGroup;<br>
<br>
// Backing bean for dynamic group table examples.<br>
//<br>
// Note: To simplify the example, this bean is used only to create the
table <br>
// layout. The resulting table will use methods already defined in
TableBean.<br>
public class DynamicGroupTableBean {<br>
&nbsp;&nbsp;&nbsp; private Dynamic dynamic = null; // Dynamic util.<br>
&nbsp;&nbsp;&nbsp; private Table table = null; // Table component.<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public DynamicGroupTableBean() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dynamic = new Dynamic();<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Table component.<br>
&nbsp;&nbsp;&nbsp; public Table getTable() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (table == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Get table row group.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
TableRowGroup rowGroup1 = dynamic.getTableRowGroup("rowGroup1",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.names}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selectedState}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Group Header");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
TableRowGroup rowGroup2 = dynamic.getTableRowGroup("rowGroup2",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupC.names}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupC.select.selectedState}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Group Header");<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Set table row group properties.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dynamic.setTableRowGroupChildren(rowGroup1, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selectedState}", <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selected}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupB.select.selectedValue}", null, true);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
dynamic.setTableRowGroupChildren(rowGroup2, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupC.select.selectedState}", <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupC.select.selected}",<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{TableBean.groupC.select.selectedValue}", null, false);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Set select and row group toggle buttons.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup1.setSelectMultipleToggleButton(true); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup2.setSelectMultipleToggleButton(true); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup1.setGroupToggleButton(true);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup2.setGroupToggleButton(true);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Get table.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table = dynamic.getTable("table1", null);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table.getChildren().add(rowGroup1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table.getChildren().add(rowGroup2);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
Add title facet.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
StaticText title = new StaticText();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
title.setText("Dynamic Group Table");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table.getFacets().put(Table.TITLE_FACET, title);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return table;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set Table component. <br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param table The Table component.<br>
&nbsp;&nbsp;&nbsp; public void setTable(Table table) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.table = table;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
<h3 style="color: rgb(0, 0, 0);">faces_config.xml Entry for
Managed Beans</h3>
The examples are based on managed beans, such as the example
below, added to the
<code>faces_config.xml</code> file.<br>
<span style="color: rgb(255, 153, 0);"><br>
</span><code>&lt;!DOCTYPE faces-config PUBLIC <br>
&nbsp;&nbsp;&nbsp; '-//Sun Microsystems, Inc.//DTD JavaServer Faces
Config 1.0//EN' <br>
&nbsp;&nbsp;&nbsp; 'http://java.sun.com/dtd/web-facesconfig_1_1.dtd'&gt;<br>
<br>
&lt;faces-config&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;Backing
bean for the group table example&lt;/description&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-name&gt;TableBean&lt;/managed-bean-name&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-class&gt;table.TableBean&lt;/managed-bean-class&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
<br>
&nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;Backing
bean for the dynamic table example&lt;/description&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-name&gt;DynamicTableBean&lt;/managed-bean-name&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-class&gt;table.DynamicTableBean&lt;/managed-bean-class&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
<br>
&nbsp;&nbsp;&nbsp; &lt;managed-bean&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description&gt;Backing
bean for the dynamic group table example&lt;/description&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-name&gt;DynamicGroupTableBean&lt;/managed-bean-name&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-class&gt;table.DynamicGroupTableBean&lt;/managed-bean-class&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;managed-bean-scope&gt;session&lt;/managed-bean-scope&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/managed-bean&gt;<br>
&lt;/faces-config&gt;</code><br>
<h3><a name="UtilityClasses"></a>Utility Classes used in the examples</h3>
The&nbsp; following utility class is used in the group table
examples shown in this page.<br>
<p><a href="table.html#Group.java"><code></code></a></p>
<a href="tableRowGroup.html#Dynamic.java">Dynamic.java</a><br>
<br>
The following utility classes are shown in the <code>ui:table</code>
documentation, and used in the examples for the table
tags<code> ui:table</code>, <code>ui:tableRowGroup</code>, and <code>ui:tableColumn.<br>
</code><br>
<code></code><a href="table.html#Group.java">Group.java
</a><br>
<a href="table.html#Name.java">Name.java
</a><a href="table.html#Group.java"><code></code></a><br>
<a href="table.html#Select.java">Select.java
</a><br>
<h4><a name="Dynamic.java"></a><span style="color: rgb(0, 0, 0);">Dynamic.java
Utility Class</span><br>
</h4>
<code>package table.util;<br>
<br>
import com.sun.rave.web.ui.component.Checkbox;<br>
import com.sun.rave.web.ui.component.Hyperlink;<br>
import com.sun.rave.web.ui.component.StaticText;<br>
import com.sun.rave.web.ui.component.Table;<br>
import com.sun.rave.web.ui.component.TableColumn;<br>
import com.sun.rave.web.ui.component.TableRowGroup;<br>
<br>
import javax.faces.context.FacesContext;<br>
import javax.faces.component.UIComponent;<br>
import javax.faces.component.UIParameter;<br>
import javax.faces.el.ValueBinding;<br>
<br>
// This class provides functionality for dynamic tables.<br>
public class Dynamic {<br>
&nbsp;&nbsp;&nbsp; public static final String CHECKBOX_ID = "select";<br>
&nbsp;&nbsp;&nbsp; public static final String HYPERLINK_ID = "link";<br>
<br>
&nbsp;&nbsp;&nbsp; // Default constructor.<br>
&nbsp;&nbsp;&nbsp; public Dynamic() {<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Note: When using tags in a JSP page,
UIComponentTag automatically creates<br>
&nbsp;&nbsp;&nbsp; // a unique id for the component. However, when
dynamically creating <br>
&nbsp;&nbsp;&nbsp; // components, via a backing bean, the id has not
been set. In this <br>
&nbsp;&nbsp;&nbsp; // scenario, allowing JSF to create unique Ids may
cause problems with<br>
&nbsp;&nbsp;&nbsp; // Javascript and components may not be able to
maintain state properly. <br>
&nbsp;&nbsp;&nbsp; // For example, if a component was assigned "_id6"
as an id, that means <br>
&nbsp;&nbsp;&nbsp; // there were 5 other components that also have
auto-generated ids. Let us <br>
&nbsp;&nbsp;&nbsp; // assume one of those components was a complex
component that, as part of <br>
&nbsp;&nbsp;&nbsp; // its processing, adds an additional non-id'd child
before redisplaying the<br>
&nbsp;&nbsp;&nbsp; // view. Now, the id of this component will be
"_id7" instead of "_id6". <br>
&nbsp;&nbsp;&nbsp; // Assigning your own id ensures that conflicts do
not occur.<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Table component. <br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param id The component id.<br>
&nbsp;&nbsp;&nbsp; // @param title The table title text.<br>
&nbsp;&nbsp;&nbsp; public Table getTable(String id, String title) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get table.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Table table = new Table();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table.setDeselectMultipleButton(true); // Show deselect multiple button.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
table.setSelectMultipleButton(true); // Show select multiple button.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table.setTitle(title); //
Set title text.<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return table;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get TableRowGroup component with header.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param id The component id.<br>
&nbsp;&nbsp;&nbsp; // @param sourceData Value binding expression for
model data.<br>
&nbsp;&nbsp;&nbsp; // @param selected Value binding expression for
selected property.<br>
&nbsp;&nbsp;&nbsp; // @param header Value binding expression for row
group header text.<br>
&nbsp;&nbsp;&nbsp; public TableRowGroup getTableRowGroup(String id,
String sourceData,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String selected, String header) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get table row group.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableRowGroup rowGroup = new
TableRowGroup();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rowGroup.setId(id); // Set
id.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup.setSourceVar("name"); // Set source var.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup.setHeaderText(header); // Set header text.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(rowGroup,
"selected", selected); // Set row highlight.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(rowGroup,
"sourceData", sourceData); // Set source data.<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return rowGroup;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get TableColumn component.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param id The component id.<br>
&nbsp;&nbsp;&nbsp; // @param sort Value binding expression for column
sort.<br>
&nbsp;&nbsp;&nbsp; // @param align The field key for column alignment.<br>
&nbsp;&nbsp;&nbsp; // @param header The column header text.<br>
&nbsp;&nbsp;&nbsp; // @param selectId The component id used to select
table rows.<br>
&nbsp;&nbsp;&nbsp; public TableColumn getTableColumn(String id, String
sort, String align,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String header, String selectId) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get table column.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col = new
TableColumn();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setId(id); // Set id.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setSelectId(selectId);
// Set id used to select table rows.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setHeaderText(header);
// Set header text.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col.setAlignKey(align); //
Set align key.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(col, "sort",
sort); // Set sort.<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return col;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Checkbox component used for select column.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param id The component id.<br>
&nbsp;&nbsp;&nbsp; // @param selected Value binding expression for
selected property.<br>
&nbsp;&nbsp;&nbsp; // @param selectedValue Value binding expression for
selectedValue property.<br>
&nbsp;&nbsp;&nbsp; public Checkbox getCheckbox(String id, String
selected, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String selectedValue) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get checkbox.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Checkbox cb = new Checkbox();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cb.setId(id); // Set id here
and set row highlighting below.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
cb.setOnClick("setTimeout('initAllRows()', 0)");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(cb,
"selected", selected); // Set selected.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(cb,
"selectedValue", selectedValue); // Set selected value.<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return cb;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get Hyperlink component.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param id The component id.<br>
&nbsp;&nbsp;&nbsp; // @param text Value binding expression for text.<br>
&nbsp;&nbsp;&nbsp; // @param action Method binding expression for
action.<br>
&nbsp;&nbsp;&nbsp; // @param parameter Value binding expression for
parameter.<br>
&nbsp;&nbsp;&nbsp; public Hyperlink getHyperlink(String id, String
text, String action,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String parameter) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get hyperlink.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hyperlink hyperlink = new
Hyperlink();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hyperlink.setId(id); // Set
id.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(hyperlink,
"text", text); // Set text.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setMethodBinding(hyperlink,
"action", action); // Set action.<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Create paramerter.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIParameter param = new
UIParameter();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param.setId(id + "_param");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param.setName("param");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(param,
"value", parameter); // Set parameter.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
hyperlink.getChildren().add(param);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return hyperlink;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Get StaticText component.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param text Value binding expression for text.<br>
&nbsp;&nbsp;&nbsp; public StaticText getText(String text) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get static text.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StaticText staticText = new
StaticText();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setValueBinding(staticText,
"text", text); // Set text.<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return staticText;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Set TableRowGroup children.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param rowGroup The TableRowGroup component.<br>
&nbsp;&nbsp;&nbsp; // @param cbSort Value binding expression for cb
sort.<br>
&nbsp;&nbsp;&nbsp; // @param cbSelected Value binding expression for cb
selected property.<br>
&nbsp;&nbsp;&nbsp; // @param cbSelectedValue Value binding expression
for cb selectedValue property.<br>
&nbsp;&nbsp;&nbsp; // @param action The Method binding expression for
hyperlink action.<br>
&nbsp;&nbsp;&nbsp; // @param showHeader Flag indicating to display
column header text.<br>
&nbsp;&nbsp;&nbsp; public void setTableRowGroupChildren(TableRowGroup
rowGroup, String cbSort,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String cbSelected, String
cbSelectedValue, String action,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
boolean showHeader) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // UI guidelines recomend no
headers for second row group.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String header1 = showHeader
? "Last Name" : null;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String header2 = showHeader
? "First Name" : null;<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get columns.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col1 =
getTableColumn(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"col0", cbSort, null, null, CHECKBOX_ID);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col2 =
getTableColumn(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"col1", "#{name.value.last}", "last", header1,
null);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TableColumn col3 =
getTableColumn(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"col2", "#{name.value.first}", "first", header2, null);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Get column components.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Checkbox cb =
getCheckbox(CHECKBOX_ID, cbSelected, cbSelectedValue);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; StaticText firstName =
getText("#{name.value.first}");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If action was provided,
add a hyperlink; otherwise, use static text.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (action != null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Hyperlink lastName = getHyperlink(HYPERLINK_ID, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{name.value.last}", action,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"#{name.value.last}");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
col2.getChildren().add(lastName);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
StaticText lastName = getText("#{name.value.last}");<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
col2.getChildren().add(lastName);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add Children.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col1.getChildren().add(cb);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
col3.getChildren().add(firstName);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup.getChildren().add(col1);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup.getChildren().add(col2);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rowGroup.getChildren().add(col3);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Helper method to set value bindings.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param component The UIComponent to set a value
binding for.<br>
&nbsp;&nbsp;&nbsp; // @param name The name of the value binding.<br>
&nbsp;&nbsp;&nbsp; // @param value The value of the value binding.<br>
&nbsp;&nbsp;&nbsp; protected void setValueBinding(UIComponent
component, String name, <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String value) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (value == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesContext context =
FacesContext.getCurrentInstance();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
component.setValueBinding(name, context.getApplication().<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
createValueBinding(value));<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; // Helper method to set method bindings.<br>
&nbsp;&nbsp;&nbsp; //<br>
&nbsp;&nbsp;&nbsp; // @param component The UIComponent to set a value
binding for.<br>
&nbsp;&nbsp;&nbsp; // @param name The name of the method binding.<br>
&nbsp;&nbsp;&nbsp; // @param action The action of the method binding.<br>
&nbsp;&nbsp;&nbsp; protected void setMethodBinding(UIComponent
component, String name,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String action) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (action == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FacesContext context =
FacesContext.getCurrentInstance();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
component.getAttributes().put(name, context.getApplication().<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
createMethodBinding(action, new Class[0]));<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>
<br>
    ]]></description>

    <attribute>
      <name>aboveColumnFooter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Set the <code>aboveColumnFooter</code> attribute to true to display the group 
footer bar above the column footers bar. The default is to display the group 
footer below the column footers.
      ]]></description>
    </attribute>

    <attribute>
      <name>aboveColumnHeader</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Set the <code>aboveColumnHeader</code> attribute to true to display the group 
header bar above the column headers bar. The default is to display the group 
header below the column headers.
      ]]></description>
    </attribute>

    <attribute>
      <name>align</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Sets the horizontal alignment (left, right, justify, center) for the cell contents 
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The binding attribute is used to configure the component through Java code. 
This approach is intended for advanced uses, when the tag attributes cannot 
provide the desired output. The value of the binding attribute must be a 
JavaServer Faces EL expression that resolves to a backing bean, or to a 
backing bean property of type <code>com.sun.rave.web.ui.component.TableRowGroup</code>. 
You must assign a component id to the component instance.
      ]]></description>
    </attribute>

    <attribute>
      <name>collapsed</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the collapsed attribute to initially render the group as collapsed, so that 
the data rows are hidden and only the header row is visible. The default is to 
show the group expanded.
      ]]></description>
    </attribute>

    <attribute>
      <name>emptyDataMsg</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text to be displayed when the table does not contain data. The text is 
displayed left-aligned in a single row that contains one cell that spans all 
columns. The <code>emptyDataMsg</code> text might be something similar to "No 
items found." If users can add items to the table, the message might include 
instructions, such as "This table contains no files. To add a file to monitor, 
click the New button."
      ]]></description>
    </attribute>

    <attribute>
      <name>extraFooterHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;tr&gt;</code> HTML element that 
is rendered for the group footer. Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"nowrap=`nowrap'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>extraHeaderHtml</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Extra HTML code to be appended to the <code>&lt;tr&gt;</code> HTML element that 
is rendered for the group header. Use only code that is valid in an HTML 
<code>&lt;td&gt;</code> element. The code you specify is inserted in the HTML 
element, and is not checked for validity. For example, you might set this 
attribute to <code>"nowrap=`nowrap'"</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>first</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>first</code> attribute to specify which row should be the first 
to be displayed. This value is used only when the table is paginated. By 
default, the first row (0) is displayed first. The value of this property is 
maintained as part of the table's state, and the value is updated when the user 
clicks on buttons to page through the table.
      ]]></description>
    </attribute>

    <attribute>
      <name>footerText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text to be displayed in the group footer.
      ]]></description>
    </attribute>

    <attribute>
      <name>groupToggleButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>groupToggleButton</code> attribute to display a button in the 
group header to allow users to collapse and expand the group of rows.
      ]]></description>
    </attribute>

    <attribute>
      <name>headerText</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The text to be displayed in the group header.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>multipleColumnFooters</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>multipleColumnFooters</code> attribute when the 
<code>ui:tableRowGroup</code> contains nested <code>ui:tableColumn</code> tags, 
and you want the footers of all the <code>ui:tableColumn</code> tags to be 
shown. The default is to show the footers of only the innermost level of nested 
<code>ui:tableColumn</code> tags.
      ]]></description>
    </attribute>

    <attribute>
      <name>multipleTableColumnFooters</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>multipleTableColumnFooters</code> attribute when the 
<code>ui:tableRowGroup</code> contains nested <code>ui:tableColumn</code> tags, 
and you want the table footers of all the <code>ui:tableColumn</code> tags to 
be shown. The default is to show the table footers of only the innermost level 
of nested <code>ui:tableColumn</code> tags.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The number of rows per page</span> to be displayed for a paginated table. The 
default value is 25 per page.
      ]]></description>
    </attribute>

    <attribute>
      <name>selectMultipleToggleButton</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>selectMultipleToggleButton</code> attribute to display a button 
in the group header to allow users to select all rows of the group at once. 
The button toggles a column of checkboxes using the id that is given to the 
<code>selectId</code> attribute of the <code>ui:tableColumn</code> tag.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Flag indicating that the current row is selected. If the value is set to true, 
the row will appear highlighted.
      ]]></description>
    </attribute>

    <attribute>
      <name>sourceData</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The <code>sourceData</code> attribute is used to specify the data source to 
populate the table. The value of the <code>sourceData</code> attribute must be 
a JavaServer Faces EL expression that resolves to a backing bean of type 
<code>com.sun.data.provider.TableDataProvider</code>.
<br><br>
The sourceData property is referenced during multiple phases of the JavaServer 
Faces life cycle while iterating over the rows. The TableDataProvider object 
that is bound to this attribute should be cached so that the object is not 
created more often than needed.
      ]]></description>
    </attribute>

    <attribute>
      <name>sourceVar</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>sourceVar</code> attribute to specify the name of the 
request-scope attribute under which model data for the current row will be 
exposed when iterating. During iterative processing over the rows of data in 
the data provider, the TableDataProvider for the current row is exposed as a 
request attribute under the key specified by this property. Note: This 
value must be unique for each table in the JSP page.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClasses</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Use the <code>styleClasses</code> attribute to specify a list of CSS style 
classes to apply to the rows of the group. You can apply all the styles in the 
list to each row by separating the class names with commas. Each row looks the 
same when commas are used to delimit the styles. You can apply alternating 
styles to individual rows by separating the style class names with spaces. You 
can create a pattern of shading alternate rows, for example, to improve 
readability of the table. For example, if the list has two elements, the first 
style class in the list is applied to the first row, the second class to the 
second row, the first class to the third row, the second class to the fourth 
row, etc. The tableRowGroup component iterates through the list of styles and 
repeats from the beginning until a style is applied to each row. 
      ]]></description>
    </attribute>

    <attribute>
      <name>tableDataFilter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The <code>tableDataFilter</code> attribute is used to define filter critera and 
mechanism for filtering the contents of a TableDataProvider. The value of the 
<code>tableDataFilter</code> attribute must be a JavaServer Faces EL expression 
that resolves to a backing bean of type 
<code>com.sun.data.provider.TableDataFilter</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>tableDataSorter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
The <code>tableDataSorter</code> attribute is used to define sort critera and 
the mechanism for sorting the contents of a TableDataProvider. The value of the 
<code>tableDataSorter</code> attribute must be a JavaServer Faces EL expression 
that resolves to a backing bean of type 
<code>com.sun.data.provider.TableDataSorter</code>.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>valign</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Vertical alignment (top, middle, bottom) for the content of each cell in the column 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>textArea</name>
    <tag-class>com.sun.rave.web.ui.taglib.TextAreaTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<p>Use the <code>ui:textArea</code> tag to create a multiple-line
    input field for text.</p>    

<h3>HTML Elements and Layout</h3>

<p>The textArea component renders an HTML &lt;textarea&gt; element.</p> 

    <h3>Configuring the <code>ui:textArea</code> Tag</h3>

<p>Use the <code>text</code> attribute to associate
the component with a model object that represents the current value,
by setting the attribute's value to a JavaServer Faces EL expression
    that evaluates to a backing bean or a backing bean property.</p>

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet.</p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the readOnly value of this component.</li>
    </ul>

    <h3>Theme Identifiers</h3> 

    <p>The input element has a style class "TxtAra", or "TxtAraDis"
    when the field is disabled. If a label attribute is specified, the
    label element's class attribute is set to "LstAln" followed by
    "LblLvl1Txt", "LblLvl2Txt" or "LblLvl3Txt" depending on the label
    level.</p>  


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the TextArea component. 

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the textArea element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>


    <h3>Examples</h3>

<p> This example uses a backing bean <code>FieldTest</code> with a property
    string. The tag generates a textarea with a label "Comment:". The
    rows and columns attributes have been set, to ensure that the
    component has the same size on all browsers. </p> 
<pre>
     &lt;ui:textArea id="textarea" type="textarea"
               label="Comment:" 
               text="#{FieldTest.string}"
               rows="5" columns="50"/&gt;
</pre>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The binding attribute is used to configure the
      component through Java code. This approach is intended for
      advanced uses, when the tag attributes cannot provide the
      desired output. The value of the binding attribute must be a
      JavaServer Faces EL expression that resolves to a backing bean,
      or to a backing bean property of type 
      <code>com.sun.rave.web.ui.component.TextArea</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Number of character columns used to render this field. 
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The converter attribute is used to specify a method to translate
      native property values to String and back for this
      component. The converter attribute value must be one of the
      following: 
      <ul>
	<li>a JavaServer Faces EL expression that resolves to a
	  backing bean or bean property that implements the
	  <code>javax.faces.converter.Converter</code> interface; or</li> 
	<li>the ID of a registered converter (a String).</li> 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
Flag indicating that activation of this component by the user is not currently permitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Flag indicating that event handling for this component should be
      handled immediately (in Apply Request Values phase) rather than
      waiting until Invoke Application phase. 
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If set, a label is rendered adjacent to the component with the
        value of this attribute as the label text.
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
        label attribute has been set. Valid values are 1 (largest), 2 and
        3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxLength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The maximum number of characters that can be entered for this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when some text in this
    component value is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that modification of this component by the
        user is not currently permitted, but that it will be
        included when the form is submitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use the rendered attribute to indicate whether the HTML code for
      the component should be included in the rendered HTML page. If
      set to false, the rendered HTML page does not include the HTML
      for the component. If the component is not rendered, it is also
      not processed on any subsequent form submission. 
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>rows</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Number of rows used to render the textarea. You should set a value
    for this attribute to ensure that it is rendered correctly in all
    browsers.  Browsers vary in the default number of rows used for
    textarea fields.  
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        

Position of this element in the tabbing order for the current
      document. The tabbing order determines the sequence in which
      elements receive focus when the tab key is pressed. The tabIndex
      value must be an integer between 0 and 32767.
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Text to be initially displayed in this input field. This
attribute's value can be a string, or a JavaServer Faces EL expression
that resolves to a backing bean or a backing bean property. If the
value is a reference to a backing bean, the bean will be updated if
the user enters a new valid value in the field. If the string you want
to use is in a message bundle, bind this attribute to a backing bean
and initialize the relevant bean property from the message bundle.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>trim</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that any leading and trailing blanks will be
        trimmed prior to conversion to the destination data type.
        Default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The validator attribute is used to specify a method in a backing
bean to validate input to the component. The validator attribute value
must be a JavaServer Faces EL expression that resolves to a public
method with return type void. The method must take three parameters:
</p> 
<ul>
<li>a <code>javax.faces.context.FacesContext</code></li> 
<li>a <code>javax.faces.component.UIComponent</code> (the component
whose data is to be validated)</li>  
<li>a <code>java.lang.Object</code> containing the data to be
validated.</li>  
</ul> 
<p>The backing bean where the method is defined must implement
    <code>java.io.Serializable</code> or
    <code>javax.faces.component.StateHolder</code>.</p>  
<p>The method is invoked during the Process Validations Phase.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The <code>valueChangeListener</code> attribute is used to specify a
    method to handle an value-change event that is triggered when the
    user enters data in the input component. The value of the 
    attribute value must be a JavaServer Faces EL expression that
    resolves to a backing bean method. The method must take a single
    parameter of type <code>javax.faces.event.ValueChangeEvent</code>,
    and its return type must be void. The backing bean where the
    method is defined must implement <code>java.io.Serializable</code>
    or <code>javax.faces.component.StateHolder</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>textField</name>
    <tag-class>com.sun.rave.web.ui.taglib.TextFieldTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

<p> Use the <code>ui:textField</code>  tag to create an input field for a single line of text.</p> 

    <h3>HTML Elements and Layout</h3>

<p>The textField component renders an XHTML <code>&lt;input
    type="text"&gt;</code>element.</p>  

    <h3>Configuring the <code>ui:textField</code> Tag</h3>

<p>Use the <code>text</code> attribute to associate the component with
a model object that represents the current value, by setting the
attribute's value to an EL expression that corresponds to a property
of a backing bean.</p>

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet. </p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the value of this component when it is
    marked as readonly. The default is a <code>ui:staticText</code>. </li>
    </ul>


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the TextField component. </p>

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td> </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the input element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>


    <h3>Examples</h3>

<h4>Example 1: Text field with label and required icon</h4>

<p>This example uses a backing bean <code>FieldTest</code> with a
property <code>string</code>. The tag generates a label followed by
text input field. The required attribute is set to true, which causes
an icon to be rendered next to the label to indicate that the
application user must enter a value in the text field. The icon, label
  and input elements are enclosed by a span.</p>
<pre>
     &lt;ui:textField id="textfield" label="Enter a value:" 
               text="#{FieldTest.string}" 
               required="true"/&gt;
</pre>

<h4>Example 2:  Text field using a validator</h4> 

<p>
This example uses a backing bean <code>FieldTest</code> with a
    property <code>number</code>. The number property is an
    <code>int</code>, which means that the value must be converted to
    be displayed. It is not necessary to specify a Converter instance,
    however, since standard JSF conversion deals with this case. A
    Validator has been set to verify that any value entered by the
    user is within a certain range. The HTML elements are rendered as
    in example 1.</p> 

<pre>
     &lt;ui:textField id="test2" label="Enter a number:" 
               text="#{FieldTest.number}" 
               validator="#{FieldTest.checkNumberRange}"/&gt;
</pre>
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The binding attribute is used to configure the
      component through Java code. This approach is intended for
      advanced uses, when the tag attributes cannot provide the
      desired output. The value of the binding attribute must be a
      JavaServer Faces EL expression that resolves to a backing bean,
      or to a backing bean property of type 
      <code>com.sun.rave.web.ui.component.TextField</code>. 
      ]]></description>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Number of character columns used to render this field. 
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The converter attribute is used to specify a method to translate
      native property values to String and back for this
      component. The converter attribute value must be one of the
      following: 
      <ul>
	<li>a JavaServer Faces EL expression that resolves to a
	  backing bean or bean property that implements the
	  <code>javax.faces.converter.Converter</code> interface; or</li> 
	<li>the ID of a registered converter (a String).</li> 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Flag indicating that activation of this component by the user is
      not currently permitted. 
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        Flag indicating that event handling for this
      component should be handled immediately (in Apply Request Values
      phase) rather than waiting until Invoke Application phase. 
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If set, a label is rendered adjacent to the component with the
        value of this attribute as the label text. 
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
        label attribute has been set. Valid values are 1 (largest), 2 and
        3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxLength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The maximum number of characters that can be entered for this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when some text in this
    component value is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that modification of this component by the
        user is not currently permitted, but that it will be
        included when the form is submitted.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Use the rendered attribute to indicate whether the HTML code for
      the component should be included in the rendered HTML page. If
      set to false, the rendered HTML page does not include the HTML
      for the component. If the component is not rendered, it is also
      not processed on any subsequent form submission. 
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Position of this element in the tabbing order for the current
      document. The tabbing order determines the sequence in which
      elements receive focus when the tab key is pressed. The tabIndex
      value must be an integer between 0 and 32767.
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Text to be initially displayed in this input field. This
attribute's value can be a string, or a JavaServer Faces EL expression
that resolves to a backing bean or a backing bean property. If the
value is a reference to a backing bean, the bean will be updated if
the user enters a new valid value in the field. If the string you want
to use is in a message bundle, bind this attribute to a backing bean
and initialize the relevant bean property from the message bundle.
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>trim</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that any leading and trailing blanks will be
        trimmed prior to conversion to the destination data type.
        Default value is true.
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The validator attribute is used to specify a method in a backing
bean to validate input to the component. The validator attribute value
must be a JavaServer Faces EL expression that resolves to a public
method with return type void. The method must take three parameters:
</p> 
<ul>
<li>a <code>javax.faces.context.FacesContext</code></li> 
<li>a <code>javax.faces.component.UIComponent</code> (the component
whose data is to be validated)</li>  
<li>a <code>java.lang.Object</code> containing the data to be
validated.</li>  
</ul> 
<p>The backing bean where the method is defined must implement
    <code>java.io.Serializable</code> or
    <code>javax.faces.component.StateHolder</code>.</p>  
<p>The method is invoked during the Process Validations Phase.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The <code>valueChangeListener</code> attribute is used to specify a
    method to handle an value-change event that is triggered when the
    user enters data in the input component. The value of the 
    attribute value must be a JavaServer Faces EL expression that
    resolves to a backing bean method. The method must take a single
    parameter of type <code>javax.faces.event.ValueChangeEvent</code>,
    and its return type must be void. The backing bean where the
    method is defined must implement <code>java.io.Serializable</code>
    or <code>javax.faces.component.StateHolder</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>themeLinks</name>
    <tag-class>com.sun.rave.web.ui.taglib.ThemeLinksTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
    Use this tag to render references to theme resource files on a
    page where the <code>ui:head</code> component cannot be used. 

    <h3>Configuring the <code>ui:themeLinks</code> Tag</h3>

<p>If no attributes are specified, the component renders a
    <code>link</code> to the CSS stylesheet class(es) and a
    <code>script</code> element with a reference to the JavaScript
    functions definition file required by the Sun Java Web UI
    Components. </p> 

<p>To suppress rendering of the <code>script</code> element, set the 
<code>javaScript</code> attribute value to false. </p> 

<p>To suppress rendering of the <code>link</code> element, set the 
<code>styleSheet</code> attribute value to false. </p> 

<p>To render a style element with an inline import of the stylesheet
    definitions, set the 
<code>styleSheetInline</code> attribute value to true. </p> 

    <h3>Example</h3>

<pre> 
&lt;head&gt;
&lt;title&gt;ThemeLinks test&lt;/title&gt;
&lt;ui:themeLinks styleSheetInline="true"/&gt;
&lt;/head&gt;
</pre> 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The binding attribute must be a ValueBinding expression that resolves 
        to the UIComponent that is to be used for this tag. This binding allows 
        the Java bean that contains the UIComponent to manipulate the 
        UIComponent and its properties and children. This attribute is intended 
        for advanced uses.  
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>javaScript</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If the <code>javaScript</code> attribute is true, a <code>script</code>
      element with a reference to the JavaScript file that defines the
      client side behaviour of the Sun Java Web UI Components is
      rendered. The default value is true. This component is primarily
	    intended for portlet 
      environments. In a web application, this functionality is
      automatically provided by the <code>ui:head</code>
      component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleSheet</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If the <code>styleSheet</code> attribute is true, a <code>link</code>
      element with a reference to the CSS stylesheet that defines the
      appearance of the Sun Java Web UI Components is
      rendered. The default value is true.
      This component is primarily intended for portlet
      environments. In a web application, this functionality is
      automatically provided by the <code>ui:head</code>
      component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>styleSheetInline</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      If the <code>styleSheetInline</code> attribute is true, the
      stylesheet that defines the appearance of the Sun Java Web UI
      Components is rendered inline. The default value is true.
      This component is primarily
      intended for portlet environments. In a web application, this
      functionality is automatically provided by the
      <code>ui:head</code> component. 
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>tree</name>
    <tag-class>com.sun.rave.web.ui.taglib.TreeTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      

    <p> Use the <code>ui:tree</code> tag to display a tree structure in the
	rendered HTML page.  Trees are often used for navigating in a web
	application.</p>

    <h3>HTML Elements and Layout</h3>

    <p>	The Tree component defines and renders a tree structure. A tree
	structure is commonly used for navigation through data, as in file
	system navigators.  The base, or root, of the tree is shown at the top,
	with the branches going downward.</p>

    <p>	The tree is rendered with <code>&lt;div&gt;</code> XHTML elements which
	define rows as well as nesting within the tree.</p>

    <p> The <code>ui:tree</code> tag is the root of the tree, and acts as a
	container for the <code>ui:treeNode</code> tags. The
	<code>ui:treeNode</code> tags add branches, or nodes, to the tree. In
	the rendered web page, nodes can be expanded and collapsed when you
	click on small icons next to the nodes. In addition, the node is
	highlighted when you click on the node's hyperlink to indicate the node
	has focus.</p>

    <p>	The <code>ui:tree</code> tag provides the ability to render the tree
	root in any of the following ways:</p>

    <ul><li>As a single root, with a title bar to make the root visually
	    distinctive. You must specify attributes or facets in the
	    <code>ui:tree</code> tag to allow the title bar to be rendered.</li>
	<li>As a single root, without a title bar.  The root looks like any
	    other container node in the tree. You must omit attributes and
	    facets in the <code>ui:tree</code> tag, and specify a single
	    <code>ui:treeNode</code> as the root node, with other
	    <code>ui:treeNode</code> tags contained within the first
	    <code>ui:treeNode</code>.</li>
	<li>As a multi-root tree, without a title bar. There is no single top
	    node, but two or more at the same level. You must omit attributes
	    and facets in the <code>ui:tree</code> tag and include multiple
	    <code>ui:treeNode</code> tags.</li></ul>

    <h4>Defining a Title Bar for the Single Root Tree</h4>

    <p>	The title bar consists of the following elements:</p>

    <ul><li>A shaded background color determined by the theme.</li>
	<li>An optional graphic to the left of the title bar's text.</li>
	<li>Text or a hyperlink for the content of the title bar.</li></ul>

    <p>	The title bar can be defined with either <code>ui:tree</code> tag
	attributes or facets. The title bar is rendered if the
	tree component includes <code>imageURL</code> property for the graphic,
	the <code>text</code> property for the title text, the
	<code>content</code> facet, or the <code>image</code> facet.</p>

    <p>	The graphic and title text areas can be overridden with the following
	facets:</p>

    <ul><li style="clear: both">
	    <div style="float:left; width: 100px; font-weight: bold;">
		<code>content</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 75%;">
		Specifies the text or hyperlink for the title bar. When the
		<code>content</code> facet is used, the text and hyperlink
		properties have no effect.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 100px; font-weight: bold;">
		<code>image</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 75%;">
		Specifies the image area. When the <code>image</code> facet is
		used, image properties have no effect.</div></li></ul>
    <br style="clear: both" />

    <h4>Defining a Tree with Multiple Roots</h4>

    <p>	To define a tree that has multiple roots rather than a single top root,
	you must use the <code>ui:tree</code> tag only as a container. You
	should not specify attributes for the graphic or title text, or use
	facets in the <code>ui:tree</code> tag.</p>

    <p>	You can use <code>ui:treeNode</code> tags as containers for other
	<code>ui:treeNode</code> tags, but should not use one to contain all
	the others to avoid the appearance of a single root.</p>

<!--
    <h3>Theme Identifiers</h3>

    <p>	The following identifiers are written as class values in the html.
	The locations are described below.</p>

    <ul><li><code>Tree</code> for the outer <code>&lt;div&gt;</code> around the
	    tree component.</li>
	<li><code>TreeContent</code> for the <code>&lt;div&gt;</code> around the
	    content area of the tree (or tree node) component.  This is the same
	    area that may be replaced by the <code>content</code> facet.</li>
--	<li><code>TreeParentLink</code> </li> --
--	<li><code>TreeLink</code> </li> --
--	<li><code>TreeLinkSpace</code> </li> --
--	<li><code>TreeImg</code> </li> --
	<li><code>TreeImgHeight</code> ensures each tree row is the correct
	    height.</li>
	<li><code>TreeRootRow</code> for the <code>&lt;div&gt;</code> around
	    the title bar.</li>
	<li><code>TreeRootRowHeader</code> for the <code>&lt;div&gt;</code>
	    above the title bar.  This may be used to make the title bar
	    taller.</li>
	<li><code>TreeRow</code> for the <code>&lt;div&gt;</code> around each
	    tree node component.  This includes the tree node and all its child
	    tree nodes.</li>
--	<li><code>TreeSelLink</code> </li> --
--	<li><code>TreeSelRow</code> </li> --
--	<li><code>TreeSelText</code> </li> --
	</ul>
-->


    <h3>Client Side Javascript Functions</h3>

    <p>	The JavaScript functions listed in the following table are defined in a
	file that is referenced automatically by the Tree component.  The
	functions are called automatically in the rendered HTML.  You can also
	call these functions independently; you may choose to do this to select
	or expand/collapse a TreeNode on the client.</p>

    <ul><li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>clearHightlight(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function clears the highlighting for a particular
		TreeNode.  The <code>treeNode</code> passed in should be the
		&lt;div&gt; around the html for the <code>TreeNode</code>.  This
		may be obtained by calling
		<code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.
		</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>expandCollapse(treeNode, event)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function expands or collapses the given tree node.  It
		expects the source of the given event object (if supplied) to
		be a tree handle image.  It will change this image to point in
		the correct direction (right or down).  This implementation
		depends on the tree handle image names including
		"tree_handleright" and "tree_handledown" in them.  Swapping
		"right" and "down" in these names must change the handle
		direction to right and down respectively.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>getParentTreeNode(treeId)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function returns the parent TreeNode of the given
		TreeNode.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>getSelectedTreeNode(treeId)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function returns the selected TreeNode given the treeId of
		the Tree.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>getTree(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function provides access to the Tree object containing the
		given TreeNode.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>highlight(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function highlights the given TreeNode.  The
		<code>treeNode</code> passed in is the &lt;div&gt; around
		the html for the TreeNode and may be obtained by calling
		<code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.
		</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>highlightParent(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function highlights the parent TreeNode of the given
		TreeNode.  It only does so if the given TreeNode is <b>not</b>
		visible.  The parent is considered the first visible parent of
		this TreeNode.  The <code>treeNode</code> passed in is the
		&lt;div&gt; around the html for the child <code>TreeNode</code>
		and may be obtained by calling
		<code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.
		</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>isAnHref(event)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This method checks to see if the event.target is an href, or if
		any of the parent nodes which contain it is an href.  To
		considered an href, it must be an "A" tag with an "href"
		attribute containing atleast 4 characters.  (Note: Browsers will
		add on the protocol if you supply a relative URL such as one
		starting with a '#', '/', or filename).</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>isTreeHandle(event)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function determines if the event source was a tree handle
		image.  This implementation depends on the tree handle image
		file name containing "tree_handle" and no other images
		containing this string.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>onTreeNodeClick(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function Takes in the TreeNode &lt;div&gt; object that was
		clicked in order to process the highlighting changes that are
		necessary.  This object may be obtained by calling
		<code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.
		If this function is invoked from the TreeNode &lt;div&gt; object
		itself (as is the case when this method is implicitly called),
		the TreeNode object is simply the <code>this</code> variable.
		</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>selectTreeNode(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function may be used to select the given TreeNode.  It will
		clear the previous TreeNode and select the given one.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>treeNodeIsExpanded(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function determines if the given TreeNode is expanded.  It
		returns <code>true</code> if it is, <code>false</code>
		otherwise.</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>unhighlightParent(treeNode)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function un-applies parent highlighting to the parent
		TreeNode of the given TreeNode.  It only does so if the given
		TreeNode is <b>not</b> visible.  The parent is considered the
		first visible parent of this TreeNode.  The
		<code>treeNode</code> passed in is the &lt;div&gt; element
		around the html for the TreeNode and may be obtained by calling
		<code>getElementById("&lt;TreeNode.getClidentId()&gt;")</code>.
		</div></li>
	<li style="clear: both">
	    <div style="float:left; width: 275px; font-weight: bold;">
		<code>updateHightlight(id)</code></div>
	    <div style="float:left; width: 30px;"><code>--</code></div>
	    <div style="float:right; width: 65%;">
		This function updates the highlighting for the given Tree client
		id.  This function provides a way to restore the highlighting
		when a Tree is reloaded in a window (necessary each page load).
		</div></li></ul>
    <br style="clear: both" />

    <h3>Example:</h3>

    <p>	Below is an example showing how a tree may be defined in a JSP
	page:</p>

    <p>
	<code>
	    <pre>
&lt;ui:tree id="MyTree" text="hi"&gt;
    &lt;f:facet name="image"&gt;
	&lt;ui:image id="image" icon="TREE_SERVER" /&gt;
    &lt;/f:facet&gt;
    &lt;ui:treeNode id="Node0" text="About..." /&gt;
    &lt;ui:treeNode id="Node1" expanded="true" text="External URLs"&gt;
	&lt;f:facet name="image"&gt;
	    &lt;ui:image id="image" icon="TREE_SERVER" /&gt;
	&lt;/f:facet&gt;
	&lt;ui:treeNode id="Node1_1" text="Sun Microsystems, Inc." url="http://www.sun.com" target="external"&gt;
	    &lt;f:facet name="image"&gt;
		&lt;ui:image id="image" icon="TREE_STORAGE_MAJOR" /&gt;
	    &lt;/f:facet&gt;
	&lt;/ui:treeNode&gt;
	&lt;ui:treeNode id="Node1_2" text="Search Engines"&gt;
	    &lt;ui:treeNode id="Node1_2_1" text="Google" url="http://www.google.com" imageURL="../images/google.jpg" target="external" /&gt;
	    &lt;ui:treeNode id="Node1_2_2" text="Yahoo!" url="http://www.yahoo.com" imageURL="../images/yahoo.jpg" target="external" /&gt;
	    &lt;ui:treeNode id="Node1_2_3" text="Lycos" url="http://www.lycos.com" target="external"&gt;
		&lt;f:facet name="image"&gt;
		    &lt;ui:image id="image" url="http://ly.lygo.com/ly/srch/hp/dog_web_34x35.gif" height="16" width="16" /&gt;
		&lt;/f:facet&gt;
	    &lt;/ui:treeNode&gt;
	&lt;/ui:treeNode&gt;
    &lt;/ui:treeNode&gt;
&lt;/ui:tree&gt;
	    </pre>
	</code>
    </p>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies the <code>action</code> for the <code>Hyperlink</code> and
	for the <code>HyperlinkImage</code> of this component.  The<code>Hyperlink</code> may alternately be defined via the
	"<code>content</code>" facet, and the image via the
	"<code>image</code>" facet.  See <code>Hyperlink</code> documentation
	for more information on how to use <code>action</code>.</p><p>	This property will not apply to the facets when a facet is used.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       Method binding to a method that is invoked when this tree node is toggled
       open or close
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>clientSide</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
	Specifies if this <code>Tree</code> should run on the client, or if it
	should interact with the server.  If it runs on the client, then
	clicking on the tree icon to expand or collapse portions of the tree
	will happen only on the client (browser).  Otherwise, it will make a
	request to the server each time the tree is expanded or collapsed.
      ]]></description>
    </attribute>

    <attribute>
      <name>expandOnSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that folder / container nodes will automatically expand
	when they are selected. This attribute is true by default. If you want a tree's container
        nodes to expand only when the handle icons are clicked, set expandOnSelect to false.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>imageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies <code>imageURL</code> for the <code>ImageHyperlink</code>
	of this component.  The image may alternately be defined
	via the "<code>image</code>" facet.  The "<code>image</code>" facet may
	be an <code>IconHyperlink</code> component to utilize<code>Theme</code> images.</p>  This property will not apply to the
	facet when the facet used.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Indicate that event handling for this component should be
         handled immediately (in Apply Request Values phase) rather than
         waiting until Invoke Application phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Indicates that the user must select a value for this tree.
      ]]></description>
    </attribute>

    <attribute>
      <name>selected</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
         Specifies the client id of the selected tree node.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p> Specifies the target for the <code>Hyperlink</code> and the<code>ImageHyperlink</code> of this component.  The<code>Hyperlink</code> may alternately be defined via the
	"<code>content</code>" facet  of this tree node, and the image via the
	"<code>image</code>" facet.</p><p>	This property will not apply to the facet when a facet is used.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The text displayed at root of the tree
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies the <code>url</code> for the <code>Hyperlink</code> and the<code>ImageHyperlink</code> for this component.  The<code>Hyperlink</code> may alternately be defined via the
	"<code>content</code>" facet, and the image via the
	"<code>image</code>" facet.</p><p>	This property will not apply to the facet when a facet is used.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>treeNode</name>
    <tag-class>com.sun.rave.web.ui.taglib.TreeNodeTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      
    <h3>HTML Elements and Layout</h3>

    <p> The <code>TreeNode</code> component is designed to be used as a child
	of a <code>Tree</code> or another <code>TreeNode</code> component.
	This allows <code>TreeNode</code>s to form a tree structure.  When the
	tree structure is rendered, the <code>TreeNode</code> component
	represents a "node" in the tree.  The <code>TreeNode</code> component
	is responsible for rendering:</p>

    <ul><li>A row of the tree lines that connect to other tree nodes.</li>
	<li>An expand / collapse <code>IconHyperlink</code> if there is atleast
	    1 child <code>TreeNode</code> (this will show or hide its child
	    <code>TreeNode</code>(s)).</li>
	<li>An optional <code>ImageHyperlink</code> that pertains to the
	    content of the tree node.</li>
	<li>Text or a <code>Hyperlink</code> for the content of the
	    <code>TreeNode</code>.</li></ul>

    <p>	Portions of the <code>TreeNode</code> may be overriden using facets.
	The following facets are supported:</p>

    <ul><li><div style="float:left; width: 100px;"><code>image</code></div>
	    <div style="float:left; width: 50px;"><code>--</code></div>
	    Replaces the <code>ImageHyperlink</code> which pertains to the
	    content of the <code>TreeNode</code>.  When used properties that
	    pertain to the <code>ImageHyperlink</code> will not have any
	    effect.</li>
	<li><div style="float:left; width: 100px;"><code>content</code></div>
	    <div style="float:left; width: 50px;"><code>--</code></div>
	    Replaces the static text/<code>Hyperlink</code> area.  When used
	    properties that pertain to this area will not have any
	    effect.</li></ul>


    <h3>Client Side Javascript Functions</h3>

    <p> None (although the <code>Tree</code> component does contain JavaScript functions).</p>


    <h3>Example:</h3>

    <p> For an example, please see the documentation for the <code>Tree</code> Tag.</p>
    ]]></description>

    <attribute>
      <name>action</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies the <code>action</code> for the <code>Hyperlink</code> and
	for the <code>HyperlinkImage</code> of this component.  The<code>Hyperlink</code> may alternately be defined via the
	"<code>content</code>" facet, and the image via the
	"<code>image</code>" facet.  See <code>Hyperlink</code> documentation
	for more information on how to use <code>action</code>.</p><p>	This property will not apply to the facets when a facet is used.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>actionListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       Method binding to a method that is invoked when this tree node is toggled
       open or close
      ]]></description>
    </attribute>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>expanded</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies if this <code>TreeNode</code> will be expanded or collapsed,
	in other words if its child <code>TreeNode</code>s should be
	displayed.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
    </attribute>

    <attribute>
      <name>imageURL</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies <code>imageURL</code> for the <code>ImageHyperlink</code>
	of this component.  The image may alternately be defined
	via the "<code>image</code>" facet.  The "<code>image</code>" facet may
	be an <code>IconHyperlink</code> component to utilize<code>Theme</code> images.</p>  This property will not apply to the
	facet when the facet used.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>target</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p> Specifies the target for the <code>Hyperlink</code> and the<code>ImageHyperlink</code> of this component.  The<code>Hyperlink</code> may alternately be defined via the
	"<code>content</code>" facet  of this tree node, and the image via the
	"<code>image</code>" facet.</p><p>	This property will not apply to the facet when a facet is used.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>text</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies the <code>text</code> for this component.  If a<code>url</code> or <code>action</code> is also specified, these
	properties will be used to create a <code>Hyperlink</code> as the
	content of this component.  If neither the<code>action</code> or <code>url</code> properties are specified, this
	property will be used to display static text as the content for this
	component.</p><p>	Alternately, the "<code>content</code>" facet may be used to specify
	the content for this component.  If this facet is used, this
	property has no effect.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>url</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        <p>	Specifies the <code>url</code> for the <code>Hyperlink</code> and the<code>ImageHyperlink</code> for this component.  The<code>Hyperlink</code> may alternately be defined via the
	"<code>content</code>" facet, and the image via the
	"<code>image</code>" facet.</p><p>	This property will not apply to the facet when a facet is used.</p>
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


  <tag>

    <name>upload</name>
    <tag-class>com.sun.rave.web.ui.taglib.UploadTag</tag-class>
    <body-content>JSP</body-content>
    <description><![CDATA[
      


<p>Use the ui:upload tag to create a component that can be used to
browse the local file system for a file, and upload a copy of the
file's contents to the web application.</p> 


<h3>HTML Elements and Layout</h3> 

<p>The Upload component produces an XHTML &lt;input type="file"&gt;
    element, which displays a text input field with an adjacent Browse button.
    The user can type a file name or click the Browse button to select
    a file.  When the form is submitted, the file is uploaded.  Note
    that this tag requires the use of a filter.</p> 


<h3>Configuring the UploadFilter</h3> 

<p>In order for the <code>ui:upload</code> tag to work, you must
    configure the web application to use the
    <code>com.sun.rave.web.ui.util.UploadFilter</code>. 
Configure the filter by declaring a filter element in the web application's
 deployment descriptor, <code>web.xml</code>.</p> 
 <pre> 
  &lt;filter&gt;
    &lt;filter-name&gt;UploadFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;com.sun.rave.web.ui.util.UploadFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
 </pre>
<p>Map the filter to the FacesServlet by adding the following filter
    mapping in the same file, for example</p>
<pre>
  &lt;filter-mapping&gt;
    &lt;filter-name&gt;UploadFilter&lt;/filter-name&gt;
    &lt;servlet-name&gt;FacesServlet&lt;/servlet-name&gt;
  &lt;/filter-mapping&gt;
 </pre> 
<p>The UploadFilter uses the Apache commons fileupload package. You
    can optionally configure the parameters of the DiskFileUpload
    class by specifying init parameters on the UploadFilter. The
    following parameters are available: 
<ul> 
<li><code>maxSize</code> The maximum allowed upload size in bytes. 
If negative, there is no maximum. The default value is 1,000,000.</li> 

<li><code>sizeThreshold</code>The implementation of the uploading 
 functionality uses temporary storage of the file contents before the 
 Upload component stores them per its configuration. In the temporary 
 storage, smaller files are stored in memory while larger files are 
 written directly to disk . Use this parameter 
 to specify an integer value of the cut-off where files should be 
 written to disk. The default value is 4096 bytes.</li> 
<li><code>tmpDir</code> Use this directory to specify the directory to 
be used for temporary storage of files. The default behaviour is to use
the directory specified in the system property "java.io.tmpdir". </li> 
</ul> 

    <h3>The <code>UploadedFile</code> model object</h3>

<p>The contents of the uploaded file, together with some information
about it are stored in an instance of
<code>com.sun.rave.web.ui.model.UploadedFile</code>. Using this object you
can get the content of the file as a String or write the contents to
disk, as well as get properties such as the name and the size of the
file. In the interest of conserving memory, the contents and file data
are only available during the HTTP request in which the file was
uploaded.</p>

<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF">
<TH ALIGN="left" COLSPAN="2">
<B>UploadedFile Method Summary</B></TH>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><code>dispose</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dispose of the resources associated with the file upload (this will
 happen automatically when the resource is garbage collected).</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><code>getAsString</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use this method to retrieve the contents of the file as a String</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;byte[]</CODE></FONT></TD>
<TD><CODE><B><code>getBytes</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use this method to retrieve the contents of the file as an array of bytes.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><code>getContentType</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the content-type that the browser communicated with the request
 that included the uploaded file.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.io.InputStream</CODE></FONT></TD>
<TD><CODE><B><code>getInputStream</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a <CODE>InputStream</CODE> for reading the file.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;java.lang.String</CODE></FONT></TD>
<TD><CODE><B><code>getOriginalName</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use this method to retrieve the name that the file has on the web 
 application user's local system.</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;long</CODE></FONT></TD>
<TD><CODE><B><code>getSize</code></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The size of the file in bytes</TD>
</TR>
<TR BGCOLOR="white">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>&nbsp;void</CODE></FONT></TD>
<TD><CODE><B><code>write</code></B>(java.io.File&nbsp;file)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Write the contents of the uploaded file to a file on the server host.</TD>
</TR>
</TABLE>
&nbsp;
<P>

    <h3>Configuring the  <code>ui:upload</code> tag</h3>


<p>To access the contents of the uploaded file from the
    <code>ui:upload</code> tag you have two
    options:</p> 
<ul> 
<li>Bind the <code>uploadedFile</code> attribute to managed bean
    property of type <code>com.sun.rave.web.ui.model.UploadedFile</code>. 
    Have the setter or an action method process the file.</li> 
<li>Specify a valueChangeListener on the Upload component. 
    The method invoked by the value change listener has access to the
    new value of the component.</code>
    method. </li> 
</ul> 

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet. </p>

<h3>Client Side Javascript Functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the Upload component. 

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the input element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>


<h3>Examples</h3>

<h4>Get the contents of the file as a String (using a managed bean)</h4>

<p>On the form that controls the upload:</p> 
<pre> 
&lt;ui:upload id="upload2"
           uploadedFile = "#{FileUploadBean.uploadedFile}"
           label="Choose a file: "
           required="true"/&gt;
</pre> 

<p>On the page that displays the results of the upload:</p> 
<pre> 
&lt;ui:staticText id="text"
               text ="File contents are bound to string: " &gt;
&lt;ui:staticText id="text"
               text ="#{FileUploadBean.stringContent}"/&gt;

</pre> 
<p> The managed bean looks like this:</p> 
<pre> 
import java.io.Serializable;
import com.sun.rave.web.ui.model.UploadedFile;

public class FileUploadBean implements Serializable {
     //
     // Holds value of property uploadedFile.
     //
    transient private UploadedFile uploadedFile;

     //
     // Getter for property stringContent.
     // @return Value of property stringContent.
     //
    public String getStringContent() {
        return uploadedFile.getAsString();
    }

     //
     // Getter for property uploadedFile.
     // @return Value of property uploadedFile.
     //
    public UploadedFile getUploadedFile() {
        return this.uploadedFile;
    }

     //
     // Setter for property uploadedFile.
     // @param uploadedFile New value of property uploadedFile.
     //
    public void setUploadedFile(UploadedFile uploadedFile) {
        this.uploadedFile = uploadedFile;
    }
}
</pre> 

<h4>Write the contents of the file to disk (using a ValueChangeListener)</h4>

<p>On the form that controls the upload:</p> 
<pre> 
&lt;ui:upload id="upload1"
           label="Choose a file: "
           valueChangeListener="#{FileUploadedListener.processValueChange}"/&gt;
</pre> 

<p>Code for the ValueChangeListener</p> 
<pre>
import java.io.File; 
import java.io.Serializable;
import javax.faces.event.AbortProcessingException; 
import javax.faces.event.ValueChangeEvent;
import com.sun.rave.web.ui.model.UploadedFile;

public class FileUploadedListener implements ValueChangeListener, Serializable {
        public void processValueChange(ValueChangeEvent event) 
        throws AbortProcessingException {  Object value = event.getNewValue(); 
        if(value != null && value instanceof UploadedFile) {
            UploadedFile uploadedFile = (UploadedFile)value;
            String name = uploadedFile.getOriginalName();
            if(name == null || name.length() == 0) {
                name = "tmp.tmp";
            }
            String suffix = name.substring(name.indexOf("."));
            if(suffix.length() == 0) {
                suffix = ".tmp";
            }
            String prefix = name.substring(0, name.indexOf("."));
            try {
                File tmpFile = File.createTempFile(prefix, suffix);
                uploadedFile.write(tmpFile);
            } catch(Exception ex) {
                // report the problem
            }         
        }
    }
}
</pre> 
    ]]></description>

    <attribute>
      <name>binding</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value of the binding attribute must be a JSF EL
      expression that resolves to a Managed Bean or a ManagedBean
      property of type <code>com.sun.rave.web.ui.component.Upload</code>. 
      The bean can then manipulate the UIComponent, its properties
      and its children. This attribute is intended for advanced
      uses.
      ]]></description>
    </attribute>

    <attribute>
      <name>columns</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      Number of character columns used to render this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>converter</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
      The converter attribute is used to specify a method to translate
      native property values to String and back for this
      component. The converter attribute value must be one of the
      following: 
      <ul>
	<li>a JavaServer Faces EL expression that resolves to a
	  backing bean or bean property that implements the
	  <code>javax.faces.converter.Converter</code> interface; or</li> 
	<li>the ID of a registered converter (a String).</li> 
      ]]></description>
    </attribute>

    <attribute>
      <name>disabled</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Flag indicating that the user is not permitted to activate this
        component, and that the component's value will not be submitted with the
        form.
      ]]></description>
    </attribute>

    <attribute>
      <name>id</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          The component identifier for this component.  This value must be
          unique within the closest parent component that is a naming
          container.
      ]]></description>
    </attribute>

    <attribute>
      <name>immediate</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that this component's value must be
          converted and validated immediately (that is, during
          Apply Request Values phase), rather than waiting
          until Process Validations phase.
      ]]></description>
    </attribute>

    <attribute>
      <name>label</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        If set, a label is rendered adjacent to the component with the
        value of this attribute as the label text. 
      ]]></description>
    </attribute>

    <attribute>
      <name>labelLevel</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        Sets the style level for the generated label, provided the
        label attribute has been set. Valid values are 1 (largest), 2 and
        3 (smallest). The default value is 2.
      ]]></description>
    </attribute>

    <attribute>
      <name>maxLength</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        The maximum number of characters that can be entered for this field.
      ]]></description>
    </attribute>

    <attribute>
      <name>onBlur</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this element loses focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onChange</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the element
    value of this component is changed.
      ]]></description>
    </attribute>

    <attribute>
      <name>onClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onDblClick</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse double click
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onFocus</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when this component  receives focus. An
    element receives focus when the user selects the element by pressing
    the tab key or clicking the mouse. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses down on a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyPress</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses and releases a key while
    the component has focus.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onKeyUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a key while the
    component has focus. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseDown</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user presses a mouse button while the
    mouse pointer is on the component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseMove</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the mouse pointer while
    over the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOut</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when a mouse out movement
    occurs over this component.
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseOver</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user moves the  mouse pointer into
    the boundary of this component. 
      ]]></description>
    </attribute>

    <attribute>
      <name>onMouseUp</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when the user releases a mouse button while
    the mouse pointer is on the component.  
      ]]></description>
    </attribute>

    <attribute>
      <name>onSelect</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Scripting code executed when some text in this
    component value is selected.
      ]]></description>
    </attribute>

    <attribute>
      <name>readOnly</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        If readOnly is true, the name of the uploaded file
      will be displayed.
      ]]></description>
    </attribute>

    <attribute>
      <name>rendered</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating whether or not this component should be
          rendered (during Render Response Phase), or processed
          on any subsequent form submit.
      ]]></description>
    </attribute>

    <attribute>
      <name>required</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
          Flag indicating that the user is required to provide a submitted
          value for this input component.
      ]]></description>
    </attribute>

    <attribute>
      <name>style</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
        CSS style(s) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>styleClass</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
       CSS style class(es) to be applied when this component is rendered.
      ]]></description>
    </attribute>

    <attribute>
      <name>tabIndex</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    The position of this component in the tabbing order sequence
      ]]></description>
    </attribute>

    <attribute>
      <name>toolTip</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
    Display the text as a tooltip for this component
      ]]></description>
    </attribute>

    <attribute>
      <name>uploadedFile</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        The value of this attribute must be a JSF EL expression, and
	     	     it must resolve to an object of type
<code>com.sun.rave.web.ui.model.UploadedFile</code>. See the JavaDoc for
this class for details. 
      ]]></description>
    </attribute>

    <attribute>
      <name>validator</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The validator attribute is used to specify a method in a backing
bean to validate input to the component. The validator attribute value
must be a JavaServer Faces EL expression that resolves to a public
method with return type void. The method must take three parameters:
</p> 
<ul>
<li>a <code>javax.faces.context.FacesContext</code></li> 
<li>a <code>javax.faces.component.UIComponent</code> (the component
whose data is to be validated)</li>  
<li>a <code>java.lang.Object</code> containing the data to be
validated.</li>  
</ul> 
<p>The backing bean where the method is defined must implement
    <code>java.io.Serializable</code> or
    <code>javax.faces.component.StateHolder</code>.</p>  
<p>The method is invoked during the Process Validations Phase.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>valueChangeListener</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
<p>The <code>valueChangeListener</code> attribute is used to specify a
    method to handle an value-change event that is triggered when the
    user enters data in the input component. The value of the 
    attribute value must be a JavaServer Faces EL expression that
    resolves to a backing bean method. The method must take a single
    parameter of type <code>javax.faces.event.ValueChangeEvent</code>,
    and its return type must be void. The backing bean where the
    method is defined must implement <code>java.io.Serializable</code>
    or <code>javax.faces.component.StateHolder</code>.</p> 
      ]]></description>
    </attribute>

    <attribute>
      <name>visible</name>
      <required>false</required>
      <rtexprvalue>false</rtexprvalue>
      <description><![CDATA[
        
     Use the visible attribute to indicate whether the component should be
    viewable by the user in the rendered HTML page. If set to false, the
    HTML code for the component is present in the page, but the component
    is hidden with style attributes. By default, visible is set to true, so
    HTML for the component HTML is included and visible to the user. If the
    component is not visible, it can still be processed on subsequent form
    submissions because the HTML is present.
      ]]></description>
    </attribute>

  </tag>


</taglib>
