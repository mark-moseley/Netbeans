<?xml version="1.0" encoding="UTF-8"?>
<!--

DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<project name="xtest-unit" basedir="." default="all">

    <condition property="do.we.need.to.parse.project.xml.file" >
        <and>
            <or>
                <not><isset property="code.name.base.dashes" /></not>
                <not><isset property="module.run.classpath" /></not>
            </or>
            <isfalse value="${xtest.distexec}"/>
        </and>
    </condition>
    <available file="../nbproject/project.properties" property="do.we.need.to.process.properties.file" />

    <target name="init-nbproject-property-files">
        <!-- Synch the following property loads with NbModuleProject.makeEvalDefs: -->
        <property file="../nbproject/private/private.properties"/>
        <property file="../nbproject/project.properties"/>
    </target>
    
    <target name="init-read-property-files" depends="init-nbproject-property-files" if="do.we.need.to.process.properties.file" >
        <!-- #45947 - properties from project.properties with test-unit-sys-prop
            prefix are treated as system properties. -->
        <property name="temp.properties.path" location="${xtest.workdir}/sys/temp.properties"/>
        <copy file="../nbproject/project.properties" tofile="${temp.properties.path}"/>
        <replace file="${temp.properties.path}" token="test-unit-sys-prop." value="xtest.userdata|"/>
        <property file="${temp.properties.path}"/>
        <!-- Properties with prefix "xtest.userdata|" are written to the
            ${xtest.workdir}/sys/userdata.properties in module_harness.xml#write-property 
            target and then loaded as system properties before test execution. -->
        <delete file="${temp.properties.path}"/>
        <!-- #45947 end -->
    </target>
    
    <target name="init-parse-project-xml" depends="init-read-property-files" if="do.we.need.to.parse.project.xml.file" >
        <!-- Use harness instead of nbbuild/nbantext.jar" -->
        <property name="harness.dir" location="${netbeans.dest.dir}/harness"/>
        <taskdef name="parseprojectxml" classname="org.netbeans.nbbuild.ParseProjectXml" classpath="${harness.dir}/tasks.jar"/>
        <parseprojectxml project=".." 
                         codenamebasedashesproperty="code.name.base.dashes" 
                         modulerunclasspathproperty="module.run.classpath">
            <testtype name="unit" 
                      folder="test.unit.folder" 
                      runtimecp="test.unit.runtime.cp" 
                      compilecp="test.unit.compile.cp"/>
        </parseprojectxml>
    </target>
        
    <target name="init" depends="init-parse-project-xml,init-read-property-files">
        <property name="module.jar.dir" value="modules"/>
        <property name="module.jar.basename" value="${code.name.base.dashes}.jar"/>
        <property name="module.jar" value="${module.jar.dir}/${module.jar.basename}"/>
        <property name="build.compiler.debug" value="true"/>
        <property name="javac.source" value="1.5"/>
        <property name="build.compiler.source" value="${javac.source}"/> 
        <property name="build.compiler.deprecation" value="true"/>
        <property name="build.sysclasspath" value="ignore"/>
    </target>
    
    <target name="init-cp" depends="init">
        <!-- These properties cannot be undefined. -->
        <property name="cp.extra" value=""/>
        <property name="test.unit.cp.extra" value=""/>
        <property name="test.unit.run.cp.extra" value=""/>
        <path id="test.unit.compile.cp">
            <pathelement path="${module.run.classpath}"/>
            <pathelement location="${cluster}/${module.jar}"/>
            <pathelement path="${cp.extra}"/>
            <pathelement path="${test.unit.cp.extra}"/>
            <pathelement path="${test.unit.compile.cp}"/>
        </path>
        <path id="test.unit.run.cp">
            <path refid="test.unit.compile.cp"/>
            <pathelement path="${test.unit.run.cp.extra}"/>
            <pathelement path="${test.unit.runtime.cp}"/>
        </path>
    </target>
    
    <!-- ========= -->
    <!-- Compilers -->
    <!-- ========= -->
    
    <target name="default-compiler">
        <!-- Build tests but not build module sources. -->
        <ant dir=".." target="do-test-build" />
        <packageTests/>
    </target>
    
    <!-- ========= -->
    <!-- Executors -->
    <!-- ========= -->
    
    <target name="run-unit-test" depends="run-unit-test-dist,run-unit-test-nodist"/>

    <!-- Run unit tests from binary distribution. -->
   <target name="run-unit-test-dist" if="xtest.distexec">
        <property name="extra.test.libs" location="${test.dist.dir}/extralibs"/>
        <property file="test.properties"/>
        <validatepath path="${test.unit.run.cp}"/>
        <!-- convert properties from test-unit-sys-prop.* to xtest.userdata|  -->
        <property name="temp.properties.path" location="${xtest.workdir}/sys/temp.properties"/>
        <copy file="test.properties" tofile="${temp.properties.path}"/>
        <replace file="${temp.properties.path}" token="test-unit-sys-prop." value="xtest.userdata|"/>
        <property file="${temp.properties.path}"/>
        <path id="test.unit.run.cp.merged">
            <pathelement path="${test.unit.run.cp}"/>
            <pathelement path="${extra.test.libs.dir}"/>
        </path>
        
        <property name="test.unit.run.cp.merged" refid="test.unit.run.cp.merged"/>
        <validatepath path="${test.unit.run.cp.merged}"/>
        
        <executeTests pluginname="jvm">
            <classpath>
                <pathelement path="${test.unit.run.cp.merged}"/>
            </classpath>
        </executeTests>
    </target>

    
    <!-- Run unit tests from module - no binary distribution. -->
    <target name="run-unit-test-nodist" unless="xtest.distexec" depends="init-parse-project-xml">
        <property file="${test.dist.dir}/unit/${cluster.dir}/${code.name.base.dashes}/test.properties"/>
        <!-- If property test.unit.run.cp not defined in test.properties, set it from test.unit.run.cp path id. -->
        <property name="test.unit.run.cp" refid="test.unit.run.cp"/>
 
      <path id="test.unit.run.cp.merged">
            <pathelement path="${test.unit.run.cp}"/>
            <pathelement path="${cp.extra}"/>
            <pathelement path="${test.unit.cp.extra}"/>
        </path>
        <property name="test.unit.run.cp.merged" refid="test.unit.run.cp.merged"/>
        <executeTests pluginname="jvm">
            <classpath>
                <pathelement path="${test.unit.run.cp.merged}"/> 
            </classpath>
        </executeTests>
    </target>
    
</project>
