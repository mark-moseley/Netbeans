<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2008 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<project name="projectized" basedir=".">

    <import file="../default.xml"/>
    <import file="common.xml"/>
    
    <target name="common-init" depends="default.init"/>
    <target name="init" depends="basic-init,files-init,build-init,-javac-init,-init-proxy"/>
    
    <condition property="proxy.host+port">
        <and>
            <isset property="proxy.host"/>
            <isset property="proxy.port"/>
        </and>
    </condition>
    
    <target name="-init-proxy" if="proxy.host+port">
        <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
    </target>

    <target name="jdk-5-check" depends="-jdk-init" if="have-jdk-1.6" unless="permit.jdk6.builds">
        <property name="user.build.properties" location="${nb_all}/nbbuild/user.build.properties"/>
        <property name=".nbbuild.properties" location="${user.home}/.nbbuild.properties"/>
        <fail>You are attempting to build NetBeans using JDK 6 (or higher).
This is forbidden as it may lead to accidental usage of JDK 6+ APIs.
Either run Ant with JDK 5, or set nbjdk.home=&lt;JDK 5 home&gt; in ${user.build.properties}
(can be set from IDE by opening a module project's Properties dialog and picking the right Java Platform in Libraries).
You can alternatively set this property in ${.nbbuild.properties} to affect all checkouts on this machine.
If you are sure you want to build with JDK 6+ anyway, use: -Dpermit.jdk6.builds=true</fail>
    </target>

    <target name="build-init" depends="basic-init,jdk-5-check">
        <taskdef name="downloadbinaries" classname="org.netbeans.nbbuild.extlibs.DownloadBinaries" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <downloadbinaries cache="${binaries.cache}" server="${binaries.server}">
            <manifest dir=".">
                <include name="external/binaries-list"/>
            </manifest>
        </downloadbinaries>
        <property name="public.package.jar.dir" location="${nb_all}/nbbuild/build/public-package-jars"/>
        <mkdir dir="${public.package.jar.dir}"/>
        <property name="test.dist.dir" location="${nb_all}/nbbuild/build/testdist"/>
        <parseprojectxml
                project="."
                publicpackagesproperty="public.packages"
                friendsproperty="friends"
                javadocpackagesproperty="module.javadoc.packages"
                moduledependenciesproperty="module.dependencies"
                moduleclasspathproperty="module.classpath"
                publicpackagejardir="${public.package.jar.dir}"
                modulerunclasspathproperty="module.run.classpath"
                domainproperty="nbm.domain"
                classpathextensionsproperty="class.path.extensions">
            <testtype name="unit" 
                      folder="test.unit.folder" 
                      runtimecp="test.unit.runtime.cp" 
                      compilecp="test.unit.compile.cp"
                      compiledep = "test.unit.testdep"
/>

            <testtype name="qa-functional" 
                      folder="test.qa-functional.folder" 
                      runtimecp="test.qa-functional.runtime.cp" 
                      compilecp="test.qa-functional.compile.cp"
                      compiledep="test.qa-functional.testdep"/>
        </parseprojectxml>
        <property name="spec.version.base.fatal.warning" value="true"/>
        <condition property="is.regular">
            <not>
                <or>
                    <isset property="is.autoload"/>
                    <isset property="is.eager"/>
                    <equals arg1="${module.jar.dir}" arg2="core"/>
                    <equals arg1="${module.jar.dir}" arg2="lib"/>
                </or>
            </not>
        </condition>
        <property name="build.compiler.debug" value="true"/>
        <property name="build.compiler.debuglevel" value="source,lines,vars"/>
        <property name="build.compiler.deprecation" value="true"/>
        <property name="build.sysclasspath" value="ignore"/>
        <property name="build.compiler.optimize" value="off"/>
        <property name="build.package.compress" value="false"/>
        <property name="build.package.index" value="false"/>
        <property name="manifest.mf" location="manifest.mf"/>
        <property name="src.dir" location="src"/>
        <property name="build.classes.dir" location="build/classes"/>
        <property name="build.classes.dir.ml" location="build/ml/classes"/>
        <property name="nbm" value="${code.name.base.dashes}.nbm"/>
        <property name="nbm.homepage" value="http://www.netbeans.org/"/>
        <property name="nbm.distribution" value="${dist.base}/${nbm}"/>
        <property name="nbm.module.author" value=""/>
        <property name="nbm.release.date" value=""/>
        <property name="nbm.needs.restart" value="false"/>
        <property name="nbm.is.global" value=""/>
        <property name="nbm_alias" value="nb_ide"/>
        <condition property="nbm.target.dir" value="${basedir}/build">
             <not>
                 <isset property="base.nbm.target.dir"/>
             </not>
        </condition>
        <property name="nbm.target.dir" location="${base.nbm.target.dir}/${cluster.dir}"/>
         <!-- don't set 'extra' cluster for external modules -->
        <condition property="nbm.target.cluster" value="${cluster.dir}">
            <not>
                <equals arg1="${cluster.dir}" arg2="${cluster.dir.fallback}"/>
            </not>
        </condition>
        <property name="jnlp.dest.dir" location="${nb_all}/nbbuild/build/jnlp"/>
        <property name="build.javahelp.dir" location="build/javahelp"/>
        <property name="javahelp.base" value="${code.name.base.slashes}/docs"/>
        <property name="javahelp.search" value="JavaHelpSearch"/>
        <property name="javahelp.excludes" value="credits.html"/>
        <property name="netbeans.zipped.sources.dir" value="build/sources"/>
        <property name="locales" value=""/>
        <property name="brandings" value=""/>
        <property name="locjar.locales" value="${locales}"/>
        <property name="locjar.brands" value="${brandings}"/>
        <property name="locjhindexer.locales" value="${locales}"/>
        <property name="locmakenbm.locales" value="${locales}"/>
        <property name="locmakenbm.brands" value="${brandings}"/>
        <path id="javacimpl">
            <fileset dir="${nb_all}/apisupport.harness/external">
                <include name="*javac*.jar"/>
            </fileset>
        </path>
        <!-- Define bootcp for Mac, in order to compile retouche based tests in project which need modified javac -->
        <pathconvert property="retouche.javac">
            <fileset dir="${nb_all}/libs.javacapi/external">
                <include name="*javac*.jar"/>
            </fileset>
            <fileset dir="${nb_all}/libs.javacimpl/external">
                <include name="*javac*.jar"/>
            </fileset>
            <fileset dir="${nbjdk.home}/../Classes" erroronmissingdir="false">
                <include name="*.jar"/>
            </fileset>
        </pathconvert>
        <condition property="bootclasspath.mac" value="${retouche.javac}">
            <and>
                <os family="mac"/>
                <istrue value="${requires.nb.javac}"/>
            </and>
        </condition>
        <taskdef name="custom-javac" classname="org.netbeans.nbbuild.CustomJavac" classpath="${nb_all}/nbbuild/nbantext.jar"/>
    </target>

    <!-- See: http://wiki.netbeans.org/wiki/view/DevFaqExternalLibrariesUpdated -->
    <target name="-release.files" depends="projectized-common.-release.files">
        <taskdef name="releasefilesextra" classname="org.netbeans.nbbuild.extlibs.ReleaseFilesExtra" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <releasefilesextra property="release.files.extra"/>
    </target>
    <target name="release" depends="projectized-common.release">
        <taskdef name="releasefilescopy" classname="org.netbeans.nbbuild.extlibs.ReleaseFilesCopy" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <releasefilescopy cluster="${cluster}"/>
    </target>

    <target name="test-lib-init" depends="init">
        <path id="test.unit.lib.cp"/>
        <!-- The IDE is so big that anything enabling all clusters will exceed the JVM's defaults! -->
        <!-- Any changes please propagate into nbbuild/testdist/release/one-module.xml test.run.args property -->
        <property name="test.run.args" value="-ea -XX:PermSize=32m -XX:MaxPermSize=200m -Xmx256m"/>
    </target>

    <target name="-conditional-javadoc-init" depends="-conditional-16-init">
        <condition property="skip.javadoc">
            <or>
                <isset property="skip.16"/>
                <and>
                    <isset property="config.javadoc.cluster"/>
                    <not>
                        <equals arg1="${cluster.dir}" arg2="${config.javadoc.cluster}"/>
                    </not>
                </and>                
            </or>
        </condition>
    </target>
    
    <target name="-conditional-javadoc-warn" depends="-conditional-javadoc-init" if="skip.16">
        <echo level="error" message="Cannot build javadoc for module ${basedir} as it requires JDK 1.6"/>
    </target>

    <target name="javadoc" depends="build-init,-javadoc-init,-conditional-javadoc-warn" unless="skip.javadoc">
        <path id="javadoc.classpath">
            <path refid="cp"/>
            <path path="${module.run.classpath}"/><!-- XXX #157320: JDK 5 bug workaround -->
        </path>
        <!-- This should become an import at some point, perhaps: -->
        <ant dir="${nb_all}/nbbuild/javadoctools" antfile="template.xml" target="javadoc">
            <property name="javadoc.base" location="."/>
            <property name="javadoc.name" value="${code.name.base.dashes}" />
            <property name="javadoc.packages" value="${module.javadoc.packages}"/>
            <property name="javadoc.classpath" refid="javadoc.classpath"/>
            <property name="javadoc.project" location="nbproject/project.xml"/>
        </ant>
    </target>

    <target name="-verify-apichanges" if="javadoc.apichanges" depends="basic-init">
        <xmlvalidate file="${javadoc.apichanges}" failonerror="true"/>
        <xslt in="${javadoc.apichanges}" out="build/apichanges.html" style="${nb_all}/nbbuild/javadoctools/apichanges.xsl">
            <param name="javadoc-url-base" expression="."/>
        </xslt>
        <!-- XXX could perhaps validate arch.xml too, if it exists -->
    </target>

    <target name="check-sources-exist" depends="build-init">
        <available file="${src.dir}" property="sources.exist"/>
    </target>
    
<!-- Disabled, the version 17 of apitest does not handle well changed JDKs,
     for example it failed in openide/nodes for 1.5.0_11, 1.5.0_12 and Mac's 1.5.0_07

    <target name="netbeans" depends="projectized-common.netbeans,check-sigtest"/>
-->    
    <target name="sources-zip" depends="build-init, check-sources-exist" if="sources.exist" description="Simple sources zip creation intended for use in maven repository.">
        <mkdir dir="${netbeans.zipped.sources.dir}"/>
        <zip zipfile="${netbeans.zipped.sources.dir}/${code.name.base.dashes}.zip"
             basedir="${src.dir}"/>
    </target>

    
    <target name="javadoc-nb" depends="init,javadoc" if="netbeans.home">
        <nbbrowse file="${netbeans.javadoc.dir}/${code.name.base.dashes}/index.html"/>
    </target>
    
    <target name="netbeans-javadoc" depends="netbeans,javadoc" />
    
    <target name="-conditional-16-init" depends="basic-init">
        <condition property="skip.16">
            <and>
                <equals arg1="1.6" arg2="${javac.target}"/>
                <not>
                    <available classname="java.util.NavigableMap"/>
                </not>
            </and>
        </condition>
    </target>
    
    <target name="-conditional-nbm-warn" depends="-conditional-16-init" if="skip.16">
        <echo level="error" message="Cannot build NBM for module ${basedir} as it requires JDK 1.6"/>
    </target>
    
    <target name="conditional-nbm" unless="skip.16" depends="-conditional-nbm-warn">
        <antcall target="nbm"/>
    </target>

    <target name="-create-dest-dir-nbm" depends="init">
        <mkdir dir="${nbm.target.dir}"/> 
    </target>

    <target name="-create-license.file" depends="init">
        <mkdir dir="build"/>
        <property name="license.file.override" location="build/license"/>
        <property name="extra.license.files" value=""/>
        <taskdef name="releasefileslicense" classname="org.netbeans.nbbuild.extlibs.ReleaseFilesLicense" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <releasefileslicense license="${license.file.override}" standardlicense="${nb_all}/nbbuild/standard-nbm-license.txt" extralicensefiles="${extra.license.files}"/>
    </target>

    <target name="nbm" depends="-create-dest-dir-nbm,-create-license.file,projectized-common.nbm"/>
    
    <target name="run" depends="netbeans">
        <ant dir="${nb_all}/nbbuild" target="tryme"/>
    </target>
    <!-- apisupport/project could calls this for the debug action. -->
    <!-- You can also call it directly from the nbbuild/misc pseudoproject. -->
    <target name="debug" depends="netbeans">
        <ant dir="${nb_all}/nbbuild" target="tryme-debug"/>
    </target>
    
    <target name="profile" depends="netbeans" >
        <fileset id="profiler.roots.module" dir="${cluster}">
            <include name="${module.jar}"/>
        </fileset>
        <ant dir="${nb_all}/nbbuild" target="tryme-profile" >
            <property name="profiler.roots.path" value="profiler.roots.module" />
            <reference refid="profiler.roots.module" />
        </ant>
    </target>
    
    <target name="reload" depends="netbeans">
        <ant dir="${nb_all}/nbbuild" target="tryme">
            <property name="tryme.debug.args" value="--reload ${cluster}/${module.jar}"/>
        </ant>
    </target>
    
    <target name="reload-in-ide" depends="netbeans">
        <nbinstaller module="${cluster}/${module.jar}" action="reinstall"/>
    </target>
    
    <target name="javahelp" depends="init" if="has.javahelp">
        <mkdir dir="${build.javahelp.dir}/${javahelp.base}/${javahelp.search}"/>
        <copy todir="${build.javahelp.dir}">
            <fileset dir="javahelp"/>
        </copy>
        <jhindexer basedir="${build.javahelp.dir}/${javahelp.base}"
                   db="${build.javahelp.dir}/${javahelp.base}/${javahelp.search}">
            <classpath>
                <pathelement location="${nb_all}/nbbuild/nbantext.jar"/>
                <fileset dir="${nb_all}">
                    <include name="apisupport.harness/external/jsearch*.jar"/>
                </fileset>
                <fileset dir="${netbeans.dest.dir}">
                    <include name="harness/jsearch*.jar"/>
                </fileset>
            </classpath>
            <include name="**/*.html"/>
            <exclude name="${javahelp.search}/"/>
            <exclude name="${javahelp.excludes}"/>
        </jhindexer>
        <!-- Add ide.css for easy previewing only; usersguide provides it in distro: -->
        <!-- (XXX maybe the viewer task can automagically do this...) -->
        <mkdir dir="${build.javahelp.dir}/org/netbeans/modules/usersguide"/>
        <copy tofile="${build.javahelp.dir}/org/netbeans/modules/usersguide/ide.css"
              file="${nb_all}/usersguide/javahelp/org/netbeans/modules/usersguide/ide.css"
              failonerror="false"/>
        <mkdir dir="${cluster}/${javahelp.jar.dir}"/>
        <jar jarfile="${cluster}/${javahelp.jar}" compress="true">
            <fileset dir="${build.javahelp.dir}">
                <!-- XXX this does not exclude the folder, unfortunately... -->
                <exclude name="org/netbeans/modules/usersguide/ide.css"/>
            </fileset>
        </jar>
    </target>

    <target name="netbeans-ml" depends="check-run-mlbuild,jar-ml,netbeans-extra-ml,javahelp-ml,files-init">
        <property name="module.files.toString" refid="module.files"/>
        <echo level="verbose">Basic matching module files: ${module.files.toString}</echo>
        <genlist outputfiledir="${cluster}" module="${module.jar}" locales="${locales}" brandings="${brandings}">
            <fileset dir="${cluster}">
                <patternset refid="module.files"/>
            </fileset>
        </genlist>
    </target>
    
    <target name="netbeans-extra-ml"/>
    
    <target name="check-run-mlbuild" depends="build-init">
        <!-- try to determine if src.dir property has been set
             in project.properties or build-init target -->
        <property name="default.src.dir" location="${nb_all}/${module.name}/src"/>
        <condition property="used.default.src.dir" value="true">
            <equals arg1="${src.dir}" arg2="${default.src.dir}"/>
        </condition>
        <property name="nb_all.native" location="${nb_all}"/>
        <property name="nb_all.tfsrc.native" location="${nb_all}/translatedfiles/src"/>
        <!-- convert custom src.dir path to path in translatedfiles module -->
        <path id="src.dir">
            <pathelement location="${src.dir}"/>
        </path>
        <pathconvert property="custom.src.dir" refid="src.dir">
            <map from="${nb_all.native}" to="${nb_all.tfsrc.native}"/>
        </pathconvert>
        <condition property="translated.src.candir" value="${custom.src.dir}">
            <not>
                <isset property="used.default.src.dir"/>
            </not>
        </condition>
        <condition property="translated.src.candir" value="${nb_all}/translatedfiles/src/${module.name}/src">
            <isset property="used.default.src.dir"/>
        </condition>
        <property name="translated.src.dir" location="${translated.src.candir}"/>
        <available file="${translated.src.dir}" type="dir" property="translated.src.dir.exist"/>
        <condition property="run.ml.build" value="true">
            <and>
                <isset property="translated.src.dir.exist"/>
                <isset property="locjar.locales"/>
                <length string="${locjar.locales}" when="greater" length="0"/>
            </and>
        </condition>
    </target>
    
    <target name="pre-jar-ml" depends="build-init,check-run-mlbuild" if="run.ml.build"/>
    
    <target name="jar-ml" depends="build-init,check-run-mlbuild,pre-jar-ml" if="run.ml.build">
        <mkdir dir="${build.classes.dir.ml}"/>
        <copy todir="${build.classes.dir.ml}">
            <fileset dir="${translated.src.dir}" excludes="**/*.properties"/>
        </copy>
        <locjar jarfile="${cluster}/${module.jar}"
                basedir="${build.classes.dir.ml}"
                compress="${build.package.compress}"/>
    </target>
    
    
    <target name="check-run-ml-javahelp" if="run.ml.build">
        <condition property="run.ml.javahelp">
            <and>
                <available file="${nb_all}/translatedfiles/src/${module.name}/javahelp" type="dir"/>
                <isset property="locjar.locales"/>
                <isset property="locjhindexer.locales"/>
                <isset property="has.javahelp"/>
                <isset property="run.ml.build"/>
            </and>
        </condition>
    </target>
    
    <target name="javahelp-ml" depends="build-init,check-run-ml-javahelp" if="run.ml.javahelp">
        <mkdir dir="${build.javahelp.dir}-ml/"/>
        <copy todir="${build.javahelp.dir}-ml">
            <fileset dir="${nb_all}/translatedfiles/src/${module.name}/javahelp"/>
        </copy>
        <property name="locjhindexer.jhall" value="${nb_all}/apisupport.harness/external/jsearch*.jar"/>
        <locjhindexer locales="${locales}"
                      basedir="${build.javahelp.dir}-ml/${javahelp.base}"
                      dbdir="${javahelp.search}"/>
        <mkdir dir="${cluster}/${javahelp.jar.dir}/locale"/>
        <locjar basedir="${build.javahelp.dir}-ml"
                compress="${build.package.compress}"
                jarfile="${cluster}/${javahelp.jar.dir}/${code.name.base.dashes}.jar"/>
    </target>

    <target name="check-javahelp" depends="javahelp" description="Validate helpset for various errors." if="has.javahelp">
        <fail unless="javahelp.hs">Must set javahelp.hs property</fail>
        <taskdef name="checkhelpsets" classname="org.netbeans.nbbuild.CheckHelpSets">
            <classpath>
                <pathelement location="${nb_all}/nbbuild/nbantext.jar"/>
                <fileset dir="${nb_all}/javahelp/external">
                    <include name="jh*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
        <checkhelpsets>
            <!-- XXX need to check against real files (since there may be some processing) but should use a link mapper: -->
            <fileset dir="${build.javahelp.dir}">
                <include name="${javahelp.base}/${javahelp.hs}"/>
            </fileset>
        </checkhelpsets>
    </target>

    <!-- XXX need target to preview javahelp in a viewer like this: -->
    <!--
    HelpSet hs = new HelpSet(someClassLoader, f.toURI().toURL());
    String title = hs.getTitle();
    if (title == null) {
        title = f.getAbsolutePath();
    }
    JDialog dlg = new JDialog(WindowManager.getDefault().getMainWindow(), title, false);
    dlg.getContentPane().add(new JHelp(hs), BorderLayout.CENTER);
    dlg.setSize(920, 660); // match min size of IDE's viewer
    dlg.pack();
    dlg.addWindowListener(this);
    dlg.show();
    synchronized (this) {
        wait();
    }
    // ...
    public synchronized void windowClosing(WindowEvent ev) {
        notify();
    }
    -->

    <target name="ecj-lint" depends="init">
        <condition property="bootclasspath.opt" value="-bootclasspath ${nbjdk.bootclasspath}">
            <isset property="nbjdk.bootclasspath"/>
        </condition>
        <property name="bootclasspath.opt" value=""/>
        <property name="ecj.warn.opts" value="-warn:+uselessTypeCheck"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="ecj -d none -source ${javac.source} ${bootclasspath.opt} -classpath ${module.classpath}${path.separator}${cp.extra} ${src.dir} ${ecj.warn.opts} 2>&amp;1 |
                        perl -we 'undef $/; $_ = &lt;STDIN>; s/^(?:-+\n)?\d+\. (?:WARNING|ERROR) in (.+)\n \(at line (\d+)\)\n(.*)\n(.*)\n(.*)(?:\n-+)?$/$1:$2: $5\n$3\n$4/gm; print $_'"/>
        </exec>
    </target>

    <target name="fix-cddl-gpl" depends="build-init">
        <property name="license.root.dir" location="${basedir}"/>
        <tstamp>
            <format property="YEAR" pattern="yyyy"/>
        </tstamp>
        <checklicense>
            <fileset dir="${license.root.dir}"/>
            <fileset dir="${src.dir}"/>
            
            <convert 
                token='^([ \t]*[^ \n]+[ \t]?)?[ \t]*The contents of this file are subject to the terms of the Common Development' 
                prefix='true'
            >
                <line text='DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.'/>
                <line text=''/>
                <line text='Copyright 1997-${YEAR} Sun Microsystems, Inc. All rights reserved.'/>
                <line text=''/>
            </convert>

            <convert token='and Distribution License.*name *of *copyright *owner\]"'>
                <line text=''/>
                <line text='The contents of this file are subject to the terms of either the GNU'/>
                <line text='General Public License Version 2 only ("GPL") or the Common'/>
                <line text='Development and Distribution License("CDDL") (collectively, the'/>
                <line text='"License"). You may not use this file except in compliance with the'/>
                <line text='License. You can obtain a copy of the License at'/>
                <line text='http://www.netbeans.org/cddl-gplv2.html'/>
                <line text='or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the'/> 
                <line text='specific language governing permissions and limitations under the'/>
                <line text='License.  When distributing the software, include this License Header'/>
                <line text='Notice in each file and include the License file at'/>
                <line text='nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this'/>
                <line text='particular file as subject to the "Classpath" exception as provided'/>
                <line text='by Sun in the GPL Version 2 section of the License file that'/>
                <line text='accompanied this code. If applicable, add the following below the'/>
                <line text='License Header, with the fields enclosed by brackets [] replaced by'/>
                <line text='your own identifying information:'/>
                <line text='"Portions Copyrighted [year] [name of copyright owner]"'/>
                <line text=''/>
                <line text='Contributor(s):'/>
            </convert>
            
            <convert token="All Rights Reserved.">
                <line text="All Rights Reserved."/>
                <line text=''/>
                <line text='If you wish your version of this file to be governed by only the CDDL'/>
                <line text='or only the GPL Version 2, indicate your decision by adding'/>
                <line text='"[Contributor] elects to include this software in this distribution'/>
                <line text='under the [CDDL or GPL Version 2] license." If you do not indicate a'/>
                <line text='single choice of license, a recipient has the option to distribute'/>
                <line text='your version of this file under either the CDDL, the GPL Version 2 or'/>
                <line text='to extend the choice of license to its licensees as provided above.'/>
                <line text='However, if you add GPL Version 2 code and therefore, elected the GPL'/>
                <line text='Version 2 license, then the option applies only if the new code is'/>
                <line text='made subject to such option by the copyright holder.'/>
            </convert>
        </checklicense>

        <checklicense fragment="Common Development" fail="whenpresent">
            <fileset dir="${license.root.dir}"/>
            <fileset dir="${src.dir}"/>
        </checklicense>
    </target>
    
    <target name="-sigtest-init" depends="build-init">
        <property name="sigtest.basedir" location="nbproject"/>
        <property name="sigtest.output.dir" location="build/test/sigtest/results"/>
        <mkdir dir="${sigtest.basedir}"/>
        <property name="sigtest.file" location="${sigtest.basedir}/${code.name.base.dashes}.sig"/>
        <property name="sigtest.public.packages" value="${public.packages}"/>
        <property name="sigtest.fail.on.error" value="true"/>
        <taskdef name="sigtest" classname="org.netbeans.nbbuild.Sigtest" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <property name="sigtest.jar" location="${nb_all}/nbbuild/external/apitest.jar"/> 
        <property file="${manifest.mf}" prefix="mf."/>
        <condition property="mf.OpenIDE-Module-Specification-Version" value="${spec.version.base}"> <!-- fallback -->
            <isset property="spec.version.base"/>
        </condition>

        <path id="sigtest.class.path.ref">
            <path path="${module.run.classpath}"/>
            <path path="${cp.extra}"/>
            <path path="${cluster}/${module.jar}"/>
        </path>
        <pathconvert refid="sigtest.class.path.ref" property="sigtest.class.path">
            
        </pathconvert>    
        <condition property="sigtest.skip.check.condition">
            <or>
                <equals arg1="${sigtest.skip.check}" arg2="true"/>
                <equals arg1="${sigtest.gen.fail.on.error}" arg2="false"/>
                <not>
                    <available file="${sigtest.file}"/>
                </not>
            </or>
        </condition>

        <typedef name="exportedapi" classname="org.netbeans.nbbuild.ExportedAPICondition" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <condition property="sigtest.mail" value="api-changes@netbeans.org">
            <or>
                <exportedapi/>
                <not><isset property="nbm.domain"/></not>
            </or>
        </condition>
        <property name="sigtest.mail" value="cvs@${nbm.domain}.netbeans.org"/>

        <echo>sigtest check: ${module.name}; cnb: ${code.name.base.dashes}; email: ${sigtest.mail}</echo>
    </target>

    <target name="gen-sigtest" depends="-sigtest-init">
        <property name="sigtest.gen.fail.on.error" value="${sigtest.fail.on.error}"/>
        <mkdir dir="${sigtest.output.dir}"/>
        <sigtest fileName="${sigtest.file}"
                 sigtestJar="${sigtest.jar}"
                 classpath="${sigtest.class.path}"
                 version="${mf.OpenIDE-Module-Specification-Version}"
                 action="generate"
                 packages="${sigtest.public.packages}"
                 report="${sigtest.output.dir}/generate-${code.name.base.dashes}.xml"
                 failonerror="${sigtest.gen.fail.on.error}"
        />
    </target>

    <target name="check-sigtest" depends="-sigtest-init" unless="sigtest.skip.check.condition">
        <property name="sigtest.check.type" value="check"/>
        <mkdir dir="${sigtest.output.dir}"/>
        <sigtest fileName="${sigtest.file}"
                 sigtestJar="${sigtest.jar}"
                 classpath="${sigtest.class.path}"
                 version="${mf.OpenIDE-Module-Specification-Version}"
                 action="${sigtest.check.type}"
                 packages="${sigtest.public.packages}"
                 report="${sigtest.output.dir}/${code.name.base.dashes}.xml"
                 failonerror="${sigtest.fail.on.error}"
        />
    </target>

    <target name="findbugs-init" depends="build-init">       
        <property name="findbugs.home" location="${nb_all}/nbbuild/external/findbugs"/>
        <ant dir="${findbugs.home}" inheritall="false"/>
    </target>
    
    <target name="findbugs" depends="build-init,jar,findbugs-init">
        <property name="report.dir" location="${nb_all}/nbbuild/build/findbugs"/>
        <mkdir dir="${report.dir}"/>
        <property name="report.file" location="${report.dir}/${code.name.base.dashes}.xml"/>
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpath="${findbugs.home}/lib/findbugs-ant.jar"/>

        <path id="findbugs.class.path.ref">
            <path path="${module.run.classpath}"/>
            <path path="${cp.extra}"/>
            <path path="${cluster}/${module.jar}"/>
        </path>
        <pathconvert refid="findbugs.class.path.ref" property="findbugs.class.path"/>

        <echo>Findbugs module: ${module.name}</echo>
        <findbugs home="${findbugs.home}"
              output="xml"
              outputFile="${report.file}"
              failOnError="true"
              jvmargs="-Xmx256m">
            <auxClasspath path="${findbugs.class.path}" />
            <sourcePath path="${src.dir}" />
            <class location="${build.classes.dir}" />
        </findbugs>
        <condition property="findbugs.error" value="true">
            <isfileselected file="${report.file}">
                <size value="0"/>
            </isfileselected>
        </condition>
        <antcall target="findbugs.delete"/>
    </target>
    
    <target name="findbugs.delete" if="findbugs.error">
        <delete file="${report.file}" failonerror="false"/>
    </target>
</project>
