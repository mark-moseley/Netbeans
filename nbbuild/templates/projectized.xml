<?xml version="1.0" encoding="UTF-8"?>
<!--
The contents of this file are subject to the terms of the Common Development
and Distribution License (the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at http://www.netbeans.org/cddl.html
or http://www.netbeans.org/cddl.txt.

When distributing Covered Code, include this CDDL Header Notice in each file
and include the License file at http://www.netbeans.org/cddl.txt.
If applicable, add the following below the CDDL Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.
-->
<project name="projectized" basedir=".">

    <import file="../default.xml"/>
    <import file="common.xml"/>

    <target name="common-init" depends="default.init"/>
    <target name="init" depends="basic-init,files-init,build-init,-init-proxy"/>
    
    <condition property="proxy.host+port">
        <and>
            <isset property="proxy.host"/>
            <isset property="proxy.port"/>
        </and>
    </condition>
    
    <target name="-init-proxy" if="proxy.host+port">
        <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
    </target>

    <target name="jdk-5-check" depends="-jdk-init" if="have-jdk-1.6" unless="permit.jdk6.builds">
        <property name="user.build.properties" location="${nb_all}/nbbuild/user.build.properties"/>
        <fail>You are attempting to build NetBeans using JDK 6 (or higher).
This is forbidden as it may lead to accidental usage of JDK 6+ APIs.
Either run Ant with JDK 5, or set nbjdk.home=&lt;JDK 5 home&gt; in ${user.build.properties}
(can be set from IDE by opening a module project's Properties dialog and picking the right Java Platform in Libraries).
If you are sure you want to build with JDK 6+ anyway, use: -Dpermit.jdk6.builds=true</fail>
    </target>

    <target name="build-init" depends="basic-init,jdk-5-check">
        <property name="public.package.jar.dir" location="${nb_all}/nbbuild/build/public-package-jars"/>
        <mkdir dir="${public.package.jar.dir}"/>
        <property name="test.dist.dir" location="${nb_all}/nbbuild/build/testdist"/>
        <parseprojectxml
                project="."
                publicpackagesproperty="public.packages"
                friendsproperty="friends"
                javadocpackagesproperty="module.javadoc.packages"
                moduledependenciesproperty="module.dependencies"
                moduleclasspathproperty="module.classpath"
                publicpackagejardir="${public.package.jar.dir}"
                modulerunclasspathproperty="module.run.classpath"
                domainproperty="nbm.domain"
                classpathextensionsproperty="class.path.extensions">
            <testtype name="unit" 
                      folder="test.unit.folder" 
                      runtimecp="test.unit.runtime.cp" 
                      compilecp="test.unit.compile.cp"
                      compiledep = "test.unit.testdep"
/>

            <testtype name="qa-functional" 
                      folder="test.qa-functional.folder" 
                      runtimecp="test.qa-functional.runtime.cp" 
                      compilecp="test.qa-functional.compile.cp"/>         
        </parseprojectxml>
        <condition property="is.regular">
            <not>
                <or>
                    <isset property="is.autoload"/>
                    <isset property="is.eager"/>
                    <equals arg1="${module.jar.dir}" arg2="core"/>
                    <equals arg1="${module.jar.dir}" arg2="lib"/>
                </or>
            </not>
        </condition>
        <property name="build.compiler.debug" value="true"/>
        <property name="build.compiler.debuglevel" value="source,lines,vars"/>
        <property name="build.compiler.deprecation" value="true"/>
        <property name="build.sysclasspath" value="ignore"/>
        <property name="build.compiler.optimize" value="off"/>
        <property name="build.package.compress" value="false"/>
        <property name="build.package.index" value="false"/>
        <property name="manifest.mf" location="manifest.mf"/>
        <property name="src.dir" location="src"/>
        <property name="build.classes.dir" location="build/classes"/>
        <property name="nbm" value="${code.name.base.dashes}.nbm"/>
        <property name="nbm.homepage" value="http://${nbm.domain}.netbeans.org/"/>
        <property name="nbm.distribution" value="${dist.base}/${nbm}"/>
        <property name="nbm.module.author" value=""/>
        <property name="nbm.release.date" value=""/>
        <property name="nbm.needs.restart" value="false"/>
        <property name="nbm.is.global" value=""/>
        <condition property="nbm.target.dir" value="${basedir}/build">
             <not>
                 <isset property="base.nbm.target.dir"/>
             </not>
        </condition>
        <property name="nbm.target.dir" location="${base.nbm.target.dir}/${cluster.dir}"/>
         <!-- don't set 'extra' cluster for external modules -->
        <condition property="nbm.target.cluster" value="${cluster.dir}">
            <not>
                <equals arg1="${cluster.dir}" arg2="${cluster.dir.fallback}"/>
            </not>
        </condition>
        <path id="cp">
            <pathelement path="${module.classpath}"/>
            <pathelement path="${cp.extra}"/>
        </path>
        <property name="build.javahelp.dir" location="build/javahelp"/>
        <property name="javahelp.base" value="${code.name.base.slashes}/docs"/>
        <property name="javahelp.search" value="JavaHelpSearch"/>
        <property name="javahelp.excludes" value="credits.html"/>
        <property name="netbeans.zipped.sources.dir" value="build/sources"/>
    </target>
    
    <!-- See: http://wiki.netbeans.org/wiki/view/DevFaqExternalLibrariesUpdated -->
    <target name="-release.files" depends="projectized-common.-release.files">
        <taskdef name="releasefilesextra" classname="org.netbeans.nbbuild.extlibs.ReleaseFilesExtra" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <releasefilesextra property="release.files.extra"/>
    </target>
    <target name="release" depends="projectized-common.release">
        <taskdef name="releasefilescopy" classname="org.netbeans.nbbuild.extlibs.ReleaseFilesCopy" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <releasefilescopy cluster="${cluster}"/>
    </target>

    <target name="test-lib-init" depends="init">
        <!-- xtest.home is set externally when run using XTest. -->
        <property name="xtest.home" location="${nb_all}/xtest"/>
        <path id="test.unit.lib.cp">
            <!-- XXX check if these files exist, and if not, run xtest/build.xml -->
            <pathelement location="${xtest.home}/lib/junit.jar"/>
            <pathelement location="${xtest.home}/lib/nbjunit.jar"/>
            <pathelement location="${xtest.home}/lib/nbjunit-ide.jar"/>
            <pathelement location="${xtest.home}/lib/insanelib.jar"/>
        </path>
    </target>

    <target name="-conditional-javadoc-init" depends="-conditional-16-init">
        <condition property="skip.javadoc">
            <or>
                <isset property="skip.16"/>
                <and>
                    <isset property="config.javadoc.cluster"/>
                    <not>
                        <equals arg1="${cluster.dir}" arg2="${config.javadoc.cluster}"/>
                    </not>
                </and>                
            </or>
        </condition>
    </target>
    
    <target name="-conditional-javadoc-warn" depends="-conditional-javadoc-init" if="skip.16">
        <echo level="error" message="Cannot build javadoc for module ${basedir} as it requires JDK 1.6"/>
    </target>

    <target name="javadoc" depends="build-init,-javadoc-init,-conditional-javadoc-warn" unless="skip.javadoc">
        <!-- This should become an import at some point, perhaps: -->
        <ant dir="${nb_all}/nbbuild/javadoctools" antfile="template.xml" target="javadoc">
            <property name="javadoc.base" location="."/>
            <property name="javadoc.name" value="${code.name.base.dashes}" />
            <property name="javadoc.packages" value="${module.javadoc.packages}"/>
            <property name="javadoc.classpath" refid="cp"/>
            <property name="javadoc.project" location="nbproject/project.xml"/>
        </ant>
    </target>

    <target name="check-sources-exist" depends="build-init">
        <available file="${src.dir}" property="sources.exist"/>
    </target>
    
    <target name="sources-zip" depends="build-init, check-sources-exist" if="sources.exist" description="Simple sources zip creation intended for use in maven repository.">
        <mkdir dir="${netbeans.zipped.sources.dir}"/>
        <zip zipfile="${netbeans.zipped.sources.dir}/${code.name.base.dashes}.zip"
             basedir="${src.dir}"/>
    </target>

    
    <target name="javadoc-nb" depends="init,javadoc" if="netbeans.home">
        <nbbrowse file="${netbeans.javadoc.dir}/${code.name.base.dashes}/index.html"/>
    </target>
    
    <target name="netbeans-javadoc" depends="netbeans,javadoc" />
    
    <target name="-conditional-16-init" depends="basic-init">
        <condition property="skip.16">
            <and>
                <equals arg1="1.6" arg2="${javac.target}"/>
                <not>
                    <available classname="java.util.NavigableMap"/>
                </not>
            </and>
        </condition>
    </target>
    
    <target name="-conditional-nbm-warn" depends="-conditional-16-init" if="skip.16">
        <echo level="error" message="Cannot build NBM for module ${basedir} as it requires JDK 1.6"/>
    </target>
    
    <target name="conditional-nbm" unless="skip.16" depends="-conditional-nbm-warn">
        <antcall target="nbm"/>
    </target>

    <target name="-create-dest-dir-nbm" depends="init">
        <mkdir dir="${nbm.target.dir}"/> 
    </target>

    <target name="-create-license.file" depends="init">
        <mkdir dir="build"/>
        <property name="license.file.override" location="build/license"/>
        <property name="extra.license.files" value=""/>
        <taskdef name="releasefileslicense" classname="org.netbeans.nbbuild.extlibs.ReleaseFilesLicense" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        <releasefileslicense license="${license.file.override}" standardlicense="${nb_all}/nbbuild/standard-nbm-license.txt" extralicensefiles="${extra.license.files}"/>
    </target>

    <target name="nbm" depends="-create-dest-dir-nbm,-create-license.file,projectized-common.nbm"/>
    
    <!-- apisupport/project could calls this for the debug action. -->
    <!-- You can also call it directly from the nbbuild/misc pseudoproject. -->
    <target name="debug" depends="netbeans">
        <ant dir="${nb_all}/nbbuild" target="tryme-debug"/>
    </target>
    
    <target name="profile" depends="netbeans" >
        <fileset id="profiler.roots.module" dir="${cluster}">
            <include name="${module.jar}"/>
        </fileset>
        <ant dir="${nb_all}/nbbuild" target="tryme-profile" >
            <property name="profiler.roots.path" value="profiler.roots.module" />
            <reference refid="profiler.roots.module" />
        </ant>
    </target>
    
    <target name="reload" depends="netbeans">
        <ant dir="${nb_all}/nbbuild" target="tryme">
            <property name="tryme.debug.args" value="--reload ${cluster}/${module.jar}"/>
        </ant>
    </target>
    
    <target name="reload-in-ide" depends="netbeans">
        <nbinstaller module="${cluster}/${module.jar}" action="reinstall"/>
    </target>
    
    <target name="javahelp" depends="init" if="has.javahelp">
        <mkdir dir="${build.javahelp.dir}/${javahelp.base}/${javahelp.search}"/>
        <copy todir="${build.javahelp.dir}">
            <fileset dir="javahelp"/>
        </copy>
        <jhindexer basedir="${build.javahelp.dir}/${javahelp.base}"
                   db="${build.javahelp.dir}/${javahelp.base}/${javahelp.search}">
            <classpath>
                <fileset dir="${nb_all}/apisupport/harness/external">
                    <include name="jsearch*.jar"/>
                </fileset>
            </classpath>
            <include name="**/*.html"/>
            <exclude name="${javahelp.search}/"/>
            <exclude name="${javahelp.excludes}"/>
        </jhindexer>
        <!-- Add ide.css for easy previewing only; usersguide provides it in distro: -->
        <!-- (XXX maybe the viewer task can automagically do this...) -->
        <mkdir dir="${build.javahelp.dir}/org/netbeans/modules/usersguide"/>
        <copy tofile="${build.javahelp.dir}/org/netbeans/modules/usersguide/ide.css"
              file="${nb_all}/usersguide/javahelp/org/netbeans/modules/usersguide/ide.css"
              failonerror="false"/>
        <mkdir dir="${cluster}/${javahelp.jar.dir}"/>
        <jar jarfile="${cluster}/${javahelp.jar}" compress="true">
            <fileset dir="${build.javahelp.dir}">
                <!-- XXX this does not exclude the folder, unfortunately... -->
                <exclude name="org/netbeans/modules/usersguide/ide.css"/>
            </fileset>
        </jar>
    </target>

    <target name="check-javahelp" depends="javahelp" description="Validate helpset for various errors." if="has.javahelp">
        <fail unless="javahelp.hs">Must set javahelp.hs property</fail>
        <taskdef name="checkhelpsets" classname="org.netbeans.nbbuild.CheckHelpSets">
            <classpath>
                <pathelement location="${nb_all}/nbbuild/nbantext.jar"/>
                <fileset dir="${nb_all}/core/javahelp/external">
                    <include name="jh*.jar"/>
                </fileset>
            </classpath>
        </taskdef>
        <checkhelpsets>
            <!-- XXX need to check against real files (since there may be some processing) but should use a link mapper: -->
            <fileset dir="${build.javahelp.dir}">
                <include name="${javahelp.base}/${javahelp.hs}"/>
            </fileset>
        </checkhelpsets>
    </target>

    <!-- XXX need target to preview javahelp in a viewer like this: -->
    <!--
    HelpSet hs = new HelpSet(someClassLoader, f.toURI().toURL());
    String title = hs.getTitle();
    if (title == null) {
        title = f.getAbsolutePath();
    }
    JDialog dlg = new JDialog(WindowManager.getDefault().getMainWindow(), title, false);
    dlg.getContentPane().add(new JHelp(hs), BorderLayout.CENTER);
    dlg.setSize(920, 660); // match min size of IDE's viewer
    dlg.pack();
    dlg.addWindowListener(this);
    dlg.show();
    synchronized (this) {
        wait();
    }
    // ...
    public synchronized void windowClosing(WindowEvent ev) {
        notify();
    }
    -->

    <target name="ecj-lint" depends="init">
        <condition property="bootclasspath.opt" value="-bootclasspath ${nbjdk.bootclasspath}">
            <isset property="nbjdk.bootclasspath"/>
        </condition>
        <property name="bootclasspath.opt" value=""/>
        <property name="cp.extra" value=""/>
        <property name="ecj.warn.opts" value="-warn:+uselessTypeCheck"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="ecj -d none -source ${javac.source} ${bootclasspath.opt} -classpath ${module.classpath}${path.separator}${cp.extra} ${src.dir} ${ecj.warn.opts} 2>&amp;1 |
                        perl -we 'undef $/; $_ = &lt;STDIN>; s/^(?:-+\n)?\d+\. (?:WARNING|ERROR) in (.+)\n \(at line (\d+)\)\n(.*)\n(.*)\n(.*)(?:\n-+)?$/$1:$2: $5\n$3\n$4/gm; print $_'"/>
        </exec>
    </target>

    <target name="fix-cddl" depends="build-init">
        <property name="license.root.dir" location="${basedir}"/>
        <checklicense >
            <cvsfileset dir="${license.root.dir}"/>
            <cvsfileset dir="${src.dir}"/>
            
    <convert 
        token='^([ \t]*[^ \n]+[ \t]?)?[ \t]*Sun Public License N?otice' 
        prefix='true'
    >
        <line text='The contents of this file are subject to the terms of the Common Development'/>
        <line text='and Distribution License (the License). You may not use this file except in'/>
        <line text='compliance with the License.'/>
    </convert>
    <convert 
     token='The *contents *of *this *file *are
 *subject *to *the *Sun *Public.*available.*at.*([hH][tT][tT][pP][^:]*://www.sun.com/|http://jalopy.sf.net/license-spl.html)'
    >
        <line text='You can obtain a copy of the License at http://www.netbeans.org/cddl.html'/>
        <line text='or http://www.netbeans.org/cddl.txt.'/>
        <line text=''/>
        <line text='When distributing Covered Code, include this CDDL Header Notice in each file'/>
        <line text='and include the License file at http://www.netbeans.org/cddl.txt.'/>
        <line text='If applicable, add the following below the CDDL Header, with the fields'/>
        <line text='enclosed by brackets [] replaced by your own identifying information:'/>
        <line text='"Portions Copyrighted [year] [name of copyright owner]"'/>
   </convert>
   <convert token='1997-[0-2][09][09][0-9]' replace='1997-2007'/>
   <convert token='Original\n[^A-Za-z]*Code' replace='Original\nSoftware' replaceall='true'/>
   <convert token='Original Code' replace='Original Software' replaceall='true'/>
        </checklicense>

        <checklicense fragment="Sun Public License" fail="whenpresent">
            <cvsfileset dir="${license.root.dir}"/>
            <cvsfileset dir="${src.dir}"/>
        </checklicense>
    </target>

    <target name="fix-cddl-gpl" depends="build-init">
        <property name="license.root.dir" location="${basedir}"/>
        <checklicense>
            <cvsfileset dir="${license.root.dir}"/>
            <cvsfileset dir="${src.dir}"/>
            
            <convert 
                token='^([ \t]*[^ \n]+[ \t]?)?[ \t]*The contents of this file are subject to the terms of the Common Development' 
                prefix='true'
            >
                <line text='DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.'/>
                <line text=''/>
                <line text='Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.'/>
                <line text=''/>
            </convert>

            <convert token="and Distribution License.*name *of *copyright *owner\]">
                <line text=''/>
                <line text='The contents of this file are subject to the terms of either the GNU'/>
                <line text='General Public License Version 2 only ("GPL") or the Common'/>
                <line text='Development and Distribution License("CDDL") (collectively, the'/>
                <line text='"License"). You may not use this file except in compliance with the'/>
                <line text='License. You can obtain a copy of the License at'/>
                <line text='https://netbeans.dev.java.net/public/CDDL+GPL.html'/>
                <line text='or nbbuild/licenses/GPL-2-CP. See the License for the'/> 
                <line text='specific language governing permissions and limitations under the'/>
                <line text='License.  When distributing the software, include this License Header'/>
                <line text='Notice in each file and include the License file at'/>
                <line text='nbbuild/licenses/GPL-2-CP.  Sun designates this'/>
                <line text='particular file as subject to the "Classpath" exception as provided'/>
                <line text='by Sun in the GPL Version 2 section of the License file that'/>
                <line text='accompanied this code. If applicable, add the following below the'/>
                <line text='License Header, with the fields enclosed by brackets [] replaced by'/>
                <line text='your own identifying information:'/>
                <line text='"Portions Copyrighted [year] [name of copyright owner]"'/>
                <line text=''/>
                <line text='Contributor(s):'/>
            </convert>
            
            <convert token="All Rights Reserved.">
                <line text="All Rights Reserved."/>
                <line text=''/>
                <line text='If you wish your version of this file to be governed by only the CDDL'/>
                <line text='or only the GPL Version 2, indicate your decision by adding'/>
                <line text='"[Contributor] elects to include this software in this distribution'/>
                <line text='under the [CDDL or GPL Version 2] license." If you do not indicate a'/>
                <line text='single choice of license, a recipient has the option to distribute'/>
                <line text='your version of this file under either the CDDL, the GPL Version 2 or'/>
                <line text='to extend the choice of license to its licensees as provided above.'/>
                <line text='However, if you add GPL Version 2 code and therefore, elected the GPL'/>
                <line text='Version 2 license, then the option applies only if the new code is'/>
                <line text='made subject to such option by the copyright holder.'/>
            </convert>
        </checklicense>

        <checklicense fragment="Common Development" fail="whenpresent">
            <cvsfileset dir="${license.root.dir}"/>
            <cvsfileset dir="${src.dir}"/>
        </checklicense>
    </target>
    
    <target name="test-init-qa-functional" depends="init,test-preinit,test-lib-init">
        <property name="test.qa-functional.dir" location="test/qa-functional"/>
        <property name="test.qa-functional.src.dir" location="${test.qa-functional.dir}/src"/>
        <property name="build.test.qa-functional.dir" location="build/test/qa-functional"/>
        <property name="build.test.qa-functional.classes.dir" location="${build.test.qa-functional.dir}/classes"/>
        <property name="build.test.qa-functional.results.dir" location="${build.test.qa-functional.dir}/results"/>
        
        <property name="test.filter.trace" value="true"/>
        <property name="test.dist.dir" location="${nb_all}/nbbuild/build/testdist"/>
           <!-- if project.xml doesn't contain test dependencies -->
        <property name="test.qa-functional.folder" location="build/test/qa-functional/dist"/>
        <property name="test.qa-functional.out.folder" location="${test.qa-functional.folder}"/>
        <property name="extra.test.libs.dir" location="${test.dist.dir}/extralibs"/> 
        
        <!-- path reference used in both compiler and executor -->
        <path id="test.qa-functional.cp">
            <!-- Cannot use <path refid="cp"/> since that uses ${module.classpath} and we want ${module.run.classpath}: -->
            <pathelement path="${test.qa-functional.compile.cp}"/>
            <pathelement path="${cp.extra}"/>
            <pathelement location="${cluster}/${module.jar}"/>
            <path refid="test.unit.lib.cp"/>
            <pathelement path="${test.qa-functional.cp.extra}"/>
            <pathelement path="${nb_all}/jellytools/builds/jelly2-nb.jar"/>
            <pathelement location="${nb_all}/jemmy/builds/jemmy.jar"/>
        </path>
        <path id="test.qa-functional.run.cp">
            <pathelement path="${test.qa-functional.runtime.cp}"/>
            <pathelement path="${test.qa-functional.run.cp.extra}"/>
            <pathelement path="${nb_all}/jellytools/builds/jelly2-nb.jar"/>
            <pathelement location="${nb_all}/jemmy/builds/jemmy.jar"/>
        </path>
    </target>

    <target name="test-build-qa-functional" depends="jar,do-test-build-qa-functional,test-build-datajar-qa-functional"/>
        

    <target name="do-test-build-qa-functional" depends="init,test-init-qa-functional">
        <fail>
          Missing test dependency 
          Runtime classpath: ${test.unit.runtime.cp}
          Compile classpath: ${test.unit.compile.cp} 
         <condition>
            <or>
             <contains string="${test.qa-functional.runtime.cp}" substring="-missing-Module-Entries-:" />
             <contains string="${test.qa-functional.compile.cp}" substring="-missing-Module-Entries-:" />
            </or>
        </condition>
         </fail>

        <mkdir dir="${build.test.qa-functional.classes.dir}"/>
        <javac srcdir="${test.qa-functional.src.dir}" destdir="${build.test.qa-functional.classes.dir}"
               debug="true" deprecation="${build.compiler.deprecation}" encoding="UTF-8"
               source="${javac.source}" target="${javac.target}" optimize="${build.compiler.optimize}" includeantruntime="false">
               <exclude name="**/jars/**"/><!-- XXX for core only; fix in core, not here -->
               <exclude name="**/data/**"/><!-- XXX for openide/util and co. -->
            <classpath refid="test.qa-functional.cp"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <copy todir="${build.test.qa-functional.classes.dir}">
            <fileset dir="${test.qa-functional.src.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy todir="${build.test.qa-functional.dir}">
            <fileset dir="${test.qa-functional.dir}">
                <include name="data/**"/>
            </fileset>
        </copy>
        
        <available file="${test.qa-functional.dir}/data" type="dir" property="exists.test.qa-functional.data"/>
        <!-- test distribution -->
               <mkdir dir="${nb_all}/nbbuild/build/testdist"/>
               <mkdir dir="${test.dist.dir}/extralibs"/>
           <mkdir dir="${test.qa-functional.out.folder}"/>
           <jar destfile="${test.qa-functional.out.folder}/tests.jar" basedir="${build.test.qa-functional.classes.dir}"/>            
           <!-- create properties -->
           <taskdef name="shorterpaths" classname="org.netbeans.nbbuild.ShorterPaths" classpath="${nb_all}/nbbuild/nbantext.jar"/>
            <shorterpaths inref="test.qa-functional.run.cp" 
                           out="test.qa-functional.run.cp.short" 
                           extralibs="extra.test.libs.short" 
                           extralibsdir="${extra.test.libs.dir}"
                           testproperties="${test.qa-functional.out.folder}/test.properties">

                <replacement dir="${netbeans.dest.dir}" name="netbeans.dest.dir"/>
                <replacement dir="${test.dist.dir}" name="test.dist.dir"/>
                <replacement dir="${java.home}" name="java.home"/>
                <replacement dir="${java.home.parent}" name="java.home.parent"/>
            </shorterpaths>
             <copy todir="${test.qa-functional.out.folder}">
                <fileset dir="${test.qa-functional.dir}/..">
                  <include name="build-qa-functional.xml"/>
                  <include name="build.xml"/>
                  <include name="cfg-qa-functional.xml"/>
                </fileset>
            </copy>
    </target>
    
    <target name="test-build-datajar-qa-functional" depends="do-test-build-qa-functional" if="exists.test.qa-functional.data">
           <zip destfile="${test.qa-functional.out.folder}/data.zip" basedir="${test.qa-functional.dir}/data"/> 
    </target>

    <target name="test-clean" depends="test-unit-clean,test-qa-functional-clean" description="Clean all tests"/>

    <target name="test-unit-clean" >
        <property name="test.unit.out.folder" location="${test.dist.dir}/unit/${cluster.dir}/${code.name.base.dashes}"/>
        <delete dir="${test.unit.out.folder}"/>
    </target>
    
    <target name="test-qa-functional-clean" >
        <property name="test.qa-functional.out.folder" location="${test.dist.dir}/qa-functional/${cluster.dir}/${code.name.base.dashes}"/>
        <delete dir="${test.qa-functional.out.folder}"/>
    </target>
    
    <target name="build-all-tests" depends="test-condition,test-build-condition,test-build-qa-functional-condition" if="contains.test" description="build all test types">
    </target>
    
        <!-- it sets these conditions 
           1. contains.unit.test  - contains unit tests
           2. contains.qa-functional.test - contains tests
           3. contains.test - project contains at least one test type
        -->
    <target name="test-condition" depends="init">
        <available file="test/cfg-unit.xml" property="contains.unit.test.cfg"/>
        <available file="test/cfg-qa-functional.xml" property="contains.qa-functional.test.cfg"/>
        <available file="test/build-unit.xml" property="contains.unit.test.build"/>
        <available file="test/build-qa-functional.xml" property="contains.qa-functional.test.build"/>
        <available file="test/build-unit.xml" property="contains.unit.test.build"/>
        <available file="test/build.xml" property="contains.test.build"/>
        <available file="test/unit/src" property="contains.unit.test.src"/>
        <available file="test/qa-functional/src" property="contains.qa-functional.test.src"/>

        <condition property="contains.unit.test">
            <and>
                <isset property="contains.unit.test.cfg"/>
                <isset property="contains.unit.test.build"/>
                <isset property="contains.test.build"/>
                <isset property="contains.unit.test.src"/>
            </and>
        </condition>
        
        <condition property="contains.qa-functional.test">
            <and>
                <isset property="contains.qa-functional.test.cfg"/>
                <isset property="contains.qa-functional.test.build"/>
                <isset property="contains.test.build"/>
                <isset property="contains.qa-functional.test.src"/>
            </and>
        </condition>

        <condition property="contains.test">
             <or>
                 <isset property="contains.unit.test"/>
                 <isset property="contains.qa-functional.test"/>
             </or>
         </condition>          
    </target>
    
    <target name="test-build-condition" if="contains.unit.test" depends="test-init" description="build unit tests if exists">
        <antcall target="test-build-datajar"/>
        <convertimport file="${test.unit.out.folder}/build-unit.xml" 
                       oldname="xtest-unit.xml"
                       newpath="../../../nbbuild/templates/xtest-unit.xml"/>
        <convertimport file="${test.unit.out.folder}/build.xml" 
                       oldname="xtest.xml"
                       newpath="../../../nbbuild/templates/xtest.xml"/>
         <copy file="${nb_all}/nbbuild/templates/testdist/unit-unit.xml" tofile="${test.unit.out.folder}/unit-unit.xml"/>
    </target>
    <target name="test-build-qa-functional-condition" if="contains.qa-functional.test" depends="test-init-qa-functional" description="build qa-functional test if exists">
        <antcall target="test-build-datajar-qa-functional"/>
        <convertimport file="${test.qa-functional.out.folder}/build-qa-functional.xml" 
                       oldname="xtest-qa-functional.xml"
                       newpath="../../../nbbuild/templates/xtest-qa-functional.xml"/>
        <convertimport file="${test.qa-functional.out.folder}/build.xml" 
                       oldname="xtest.xml"
                       newpath="../../../nbbuild/templates/xtest.xml"/>
    </target>
</project>
