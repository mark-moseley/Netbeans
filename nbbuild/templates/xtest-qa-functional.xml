<?xml version="1.0"?>
<!--
The contents of this file are subject to the terms of the Common Development
and Distribution License (the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at http://www.netbeans.org/cddl.html
or http://www.netbeans.org/cddl.txt.

When distributing Covered Code, include this CDDL Header Notice in each file
and include the License file at http://www.netbeans.org/cddl.txt.
If applicable, add the following below the CDDL Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="xtest-qa-functional" basedir="." default="all">
    
    <!-- Root folder of modules -->
    <dirname property="nb_all" file="${ant.file.xtest-qa-functional}/../.."/>

    <!-- If jellytools repository available and jar not up to date, build jelly2-nb.jar -->
    <condition property="need.to.build.jellytools">
        <and>
            <available file="${nb_all}/jellytools/src" type="dir"/>
            <not>
                <uptodate targetfile="${nb_all}/jellytools/jelly2-nb.jar" >
                    <srcfiles dir= "${nb_all}/jellytools/src"/>
                </uptodate>
            </not>
        </and>
    </condition>
        
    <condition property="do.we.need.to.parse.project.xml.file" >
        <and>
            <or>
                <not><isset property="test.qa-functional.runtime.cp" /></not>
                <not><isset property="test.qa-functional.compile.cp" /></not>
            </or>
            <isfalse value="${xtest.distexec}"/>
        </and>
    </condition>
    
    <target name="init-parse-project-xml" if="do.we.need.to.parse.project.xml.file">
        <!-- Use harness instead of nbbuild/nbantext.jar" -->
        <property name="harness.dir" location="${netbeans.dest.dir}/harness"/>
        <taskdef name="parseprojectxml" classname="org.netbeans.nbbuild.ParseProjectXml" classpath="${harness.dir}/tasks.jar"/>
        <parseprojectxml project="..">
            <testtype name="qa-functional" 
                      folder="test.qa-functional.folder" 
                      runtimecp="test.qa-functional.runtime.cp" 
                      compilecp="test.qa-functional.cp"/>         
        </parseprojectxml>
    </target>
        
    <target name="init" depends="init-parse-project-xml,init-distribution-env">
        <property file="../nbproject/private/private.properties"/>
        <property file="../nbproject/project.properties"/>
        <property name="build.compiler.debug" value="true"/>
        <property name="build.compiler.source" value="${ant.java.version}"/>
        <property name="build.compiler.deprecation" value="true"/>
        <property name="build.sysclasspath" value="ignore"/>
    </target>
    
   <target name="init-distribution-env" if="exists.test.properties" depends="check-distribution">
        <property name="test.dist.dir" location="../.."/>
        <property name="extra.test.libs" location="${test.dist.dir}/extralibs"/>
        <property name="jemmy.jar" location="${extra.test.libs}/jemmy.jar"/>
        <property name="jelly.jar" location="${extra.test.libs}/jelly2-nb.jar"/>
        <property file="test.properties"/>
    </target>
    
    <target name="check-distribution">
        <available file="test.properties" property="exists.test.properties"/>
    </target>

    <target name="build-jellytools" if="need.to.build.jellytools">
        <!-- <ant dir="${nb_all}/jellytools" target="jar-library" inheritAll="false"/> -->
        <!-- The following is used instead of above because inheritAll="false"
        doesn't work for all properties. Properties xtest.home and xtest.testtype
        has to be null to not scan module binaries because modules jemmy.module and
        nbjunit are not within IDE binaries (see
        nbbuild/antsrc/org/netbeans/nbbuild/ModuleListParser.java).
        -->
        <java classname="org.apache.tools.ant.Main" classpath="${java.class.path}" fork="true">
            <arg value="-f"/>
            <arg value="${nb_all}/jellytools/build.xml"/>
            <arg value="jar-library"/>
        </java>
    </target>
    
    <target name="init-cp" depends="init,build-jellytools">
        <!-- Used built jar preferably. If not available use the latest from CVS. -->
        <available file="${nb_all}/jellytools/jelly2-nb.jar" property="jelly.jar" value="${nb_all}/jellytools/jelly2-nb.jar"/>
        <property name="jelly.jar" location="${nb_all}/jellytools/builds/jelly2-nb.jar"/>
        <property name="jemmy.jar" location="${nb_all}/jemmy/builds/jemmy.jar"/>
        
        <!-- path reference used in both compiler and executor -->
        <path id="jemmy.and.jelly.path">
            <pathelement location="${jemmy.jar}"/>
            <pathelement location="${jelly.jar}"/>
        </path>
        <!-- These properties cannot be undefined. -->
        <property name="test.qa-functional.cp" value=""/>
        <property name="test.qa-functional.cp.extra" value=""/>
        <path id="test.qa-functional.compile.cp">
            <pathelement path="${test.qa-functional.cp}"/>
            <path refid="jemmy.and.jelly.path"/>
            <pathelement path="${test.qa-functional.cp.extra}"/>
        </path>
        <!-- These properties cannot be undefined. -->
        <property name="test.qa-functional.run.cp.extra" value=""/>
        <property name="test.qa-functional.runtime.cp" value=""/>
        <path id="test.qa-functional.run.cp">
<!--  don't add modules to xtest classpath when tests are run in test mode          
<pathelement path="${test.qa-functional.runtime.cp}"/>-->
            <path refid="jemmy.and.jelly.path"/>
            <pathelement path="${test.qa-functional.run.cp.extra}"/>
        </path>
    </target>
    
    <!-- ========= -->
    <!-- Compilers -->
    <!-- ========= -->
    
    <target name="qa-functional-compiler" depends="build-jellytools">
        <!-- Build tests but don't build module sources. -->
        <ant dir=".." target="do-test-build-qa-functional" />
        <packageTests/>
    </target>
    
    <!-- ========= -->
    <!-- Executors -->
    <!-- ========= -->
    
    <target name="runidetest" depends="init-cp">
        <property name="test.qa-functional.run.cp.extra" value=""/>
        <executeTests pluginname="ide">
            <classpath refid="test.qa-functional.run.cp"/>
        </executeTests>
    </target>
    
    <!-- ================ -->
    <!-- Run in IDE's JVM -->
    <!-- ================ -->

    <target name="internal-execution" depends="init-cp">
        <taskdef name="internalExecution" classname="org.netbeans.xtest.plugin.ide.IdeInternalExecutionTask" 
                 classpath="${xtest.home}/plugins/ide/lib/xtest-ide-plugin.jar"/>

        <!-- Root directory where tests are built in. It means there will be
             separate folder for each test type: ${compile.destdir.root}/${xtest.testtype}/classes.
             Originally defined in module_harness.xml.             
        -->
        <property name="compile.destdir.root" location="../build/test"/>
        <!-- Destination directory for compiled tests. Used in basic_compiler_targets.xml. -->
        <property name="compile.destdir" location="${compile.destdir.root}/${xtest.testtype}/classes"/>
        <!-- JUnit, NbJUnit, NBJUnit-ide and Insane should be in classpath by default -->
        <property name="junit.classpath" value="${xtest.home}/lib/junit.jar:${xtest.home}/lib/nbjunit.jar:${xtest.home}/lib/nbjunit-ide.jar:${xtest.home}/lib/insanelib.jar"/>

        <!-- This target runs main method of given class in IDE's JVM. 
            You have -->
        <internalExecution classname="${classname}">
            <classpath>
                <path refid="test.qa-functional.run.cp"/>
                <pathelement path="${compile.destdir}"/>
                <pathelement path="${junit.classpath}"/>
            </classpath>
        </internalExecution>
    </target>
    
    <!-- ===================== -->
    <!-- Run code tests by jvm -->
    <!-- ===================== -->
   <target name="run-code-test" depends="init-cp,run-code-test-dist,run-code-test-nodist"/>
   <target name="run-code-test-dist" if="xtest.distexec">
        <property file="test.properties"/>
        <validatepath path="${test.unit.run.cp}"/>
        <!-- convert properties from test-unit-sys-prop.* to xtest.userdata|  -->
        <property name="temp.properties.path" location="${xtest.workdir}/sys/temp.properties"/>
        <copy file="test.properties" tofile="${temp.properties.path}"/>
        <replace file="${temp.properties.path}" token="test-unit-sys-prop." value="xtest.userdata|"/>
        <property file="${temp.properties.path}"/>
        <executeTests pluginname="jvm">
            <classpath>
                <pathelement path="${test.unit.run.cp}"/>
            </classpath>
        </executeTests>
    </target>
    
    <!-- Run unit tests from module - no binary distribution. -->
    <target name="run-code-test-nodist" unless="xtest.distexec" depends="init-parse-project-xml">
        <property file="${test.dist.dir}/unit/${cluster.dir}/${code.name.base.dashes}/test.properties"/>
        <executeTests pluginname="jvm">
            <classpath>
                <path path="${test.qa-functional.runtime.cp}"/>
                <pathelement path="${test.qa-functional.cp.extra}"/>
                <pathelement path="${test.qa-functional.run.cp.extra}"/>
            </classpath>
        </executeTests>
    </target>

    <!-- ====================== -->
    <!-- Run IDE with AppServer -->
    <!-- ====================== -->
    
    <!--  Run IDE with special property pointing to Sun Application server installation.
          AppServer has to be installed at expected location and if there exist
          a cleaning script, default domain is deleted and re-created.  -->
    <target name="runidetest-with-appserver" depends="set-appserver-path,clean-appserver-domain">
        <antcall target="runidetest">
            <param name="xtest.ide.commandline.suffix" value="-J-Dcom.sun.aas.installRoot=&quot;${j2ee.appserver.path}&quot;"/>
        </antcall>   
    </target>

    <target name="set-appserver-path" unless="j2ee.appserver.path">
        <condition property="j2ee.appserver.path" value="e:\\space\\AppServer">
            <os family="windows"/>
        </condition>
        <condition property="j2ee.appserver.path" value="/space/appserver">
            <os family="unix"/>
        </condition>
        <available file="${j2ee.appserver.path}/domains/domain1" property="j2ee.appserver.present"/>
        <fail unless="j2ee.appserver.present" message="AppServer was not found in ${j2ee.appserver.path}. Set property j2ee.appserver.path to point to AppServer installation directory."/>
    </target>

    <!-- Stop all running domains, clear and create default AppServer domain. -->
    <target name="clean-appserver-domain" depends="-init-clean-appserver-domain, -run-clean-appserver-domain, -inform-user"/>
        
    <target name="-init-clean-appserver-domain">
        <condition property="windows">
            <os family="windows" />
        </condition>
        <condition property="unix">
            <os family="unix" />
        </condition>
        <condition property="clean.script.exec" value="e:\\space\\scripts\\cleanAS.bat">
            <os family="windows" />
        </condition>
        <condition property="clean.script.exec" value="/space/scripts/cleanAS.sh">
            <os family="unix" />
        </condition>
        <available file="${clean.script.exec}" property="clean.script.exists" type="file"/>
    </target>
    
    <target name="-run-clean-domain-windows" if="windows">
        <exec executable="${clean.script.exec}"/>
    </target>
    
    <target name="-run-clean-domain-unix" if="unix">
        <exec executable="sh" >
            <arg value="${clean.script.exec}"/>
        </exec>
    </target>

    <target name="-run-clean-appserver-domain" if="clean.script.exists">
        <echo>Cleaning default domains...</echo>
        <antcall target="-run-clean-domain-windows" inheritall="true"/>
        <antcall target="-run-clean-domain-unix" inheritall="true"/>
    </target>
    
    <target name="-inform-user" unless="clean.script.exists">
        <echo>Continuing with default domain, data in this domain will be modified....</echo>
    </target>
</project>

