<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2008 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<!DOCTYPE someant  [
  <!ENTITY links SYSTEM "javadoctools/links.xml">
  <!ENTITY properties SYSTEM "javadoctools/properties.xml">
  <!ENTITY replaces SYSTEM "javadoctools/replaces.xml">
  <!ENTITY disallowed-links SYSTEM "javadoctools/disallowed-links.xml">
]>

<project name="nbbuild" default="build-nozip" basedir=".">

  <import file="default.xml"/>

  <!-- To make people happy who want to do `ant clean all': -->
  <target name="all" depends="build,commit-validation" description="Build the IDE and run basic validation tests."/>

  <target name="all-nozip" depends="build-nozip,commit-validation" description="Build the IDE (no ZIP file, unpacked) and run basic validation tests."/>

  <target name="assure-ant">
      <fail message="You need Ant version 1.7.0 or later to build NetBeans.">
          <condition>
              <not>
                  <antversion atleast="1.7.0"/>
              </not>
          </condition>
      </fail>
  </target>
  
  <!-- Fallback for ant.core.lib - it is not set in some cases - 124554 -->
  <available property="ant.core.lib" value="${ant.home}/lib/ant.jar" file="${ant.home}/lib/ant.jar"/>
  <!-- if the previous location is not correct than find the ant.jar from the java.class.path value -->
  <pathconvert property="ant.core.lib">
    <mapper type="regexp" from="${path.separator}([^${path.separator}]*ant.jar)${path.separator}" to="\1"/>
    <path location="${path.separator}${java.class.path}${path.separator}"/>
  </pathconvert>

  <target name="-load-build-properties">
    <property file="build.properties"/>
  </target>

  <target name="bootstrap"
          description="Bootstrap NetBeans-specific Ant extensions."
          depends="-jdk-init,assure-ant,-load-build-properties">
    <fail message="You need JDK 1.5 to build NetBeans">
        <condition>
            <not>
                <isset property="have-jdk-1.5"/>
            </not>
        </condition>
    </fail>

    <mkdir dir="build/antclasses"/>
    <javac srcdir="antsrc" destdir="build/antclasses" deprecation="true" debug="${build.compiler.debug}" source="1.5" target="1.5">
        <classpath>
            <pathelement location="${ant.core.lib}"/>
        </classpath>
        <include name="org/netbeans/nbbuild/HgExec.java"/>
        <include name="org/netbeans/nbbuild/ValidateHgConfiguration.java"/>
        <include name="org/netbeans/nbbuild/extlibs/DeregisterExternalHook.java"/>
        <include name="org/netbeans/nbbuild/extlibs/DownloadBinaries.java"/>
        <compilerarg line="-Xlint -Xlint:-serial"/>
    </javac>
    <taskdef name="validate-hg-configuration" classname="org.netbeans.nbbuild.ValidateHgConfiguration" classpath="build/antclasses"/>
    <validate-hg-configuration root=".."/>
    <taskdef name="deregisterexternalhook" classname="org.netbeans.nbbuild.extlibs.DeregisterExternalHook" classpath="build/antclasses"/>
    <deregisterexternalhook root=".."/>
    <taskdef name="downloadbinaries" classname="org.netbeans.nbbuild.extlibs.DownloadBinaries" classpath="build/antclasses"/>
    <downloadbinaries cache="${binaries.cache}" server="${binaries.server}">
        <manifest dir="${nb_all}">
            <include name="*/external/binaries-list"/>
            <include name="contrib/*/external/binaries-list"/>
        </manifest>
    </downloadbinaries>

    <echo message="Bootstrapping NetBeans-specific Ant extensions..."/>
    <path id="bootstrap-cp">
     <pathelement location="${ant.core.lib}"/>
     <fileset dir="..">
        <!-- For JavaHelp indexing: -->
        <include name="apisupport.harness/external/jsearch*.jar"/>
        <!-- For JavaHelp link checking: -->
        <include name="javahelp/external/jh*.jar"/>
      </fileset>
    </path>
    <!-- Sanity check: -->
    <pathconvert pathsep=":" property="class.files.in.antsrc">
        <path>
            <fileset dir="antsrc">
                <include name="**/*.class"/>
            </fileset>
        </path>
    </pathconvert>
    <fail>
        <condition>
            <not>
                <equals arg1="${class.files.in.antsrc}" arg2=""/>
            </not>
        </condition>
        You have stray *.class files in ${basedir}/antsrc which you must remove.
        Probably you failed to clean your sources before updating. Try: ant clean
    </fail>
    <!-- OK, continue: -->
    <available property="have.javahelp" file="../apisupport.harness/external" type="dir"/>
    <javac srcdir="antsrc" destdir="build/antclasses" deprecation="true" debug="${build.compiler.debug}" source="1.5" target="1.5">
      <classpath refid="bootstrap-cp"/>
      <exclude name="**/CheckHelpSets.java" unless="have.javahelp"/>
      <exclude name="**/CheckHelpSetsBin.java" unless="have.javahelp"/>
      <compilerarg line="-Xlint -Xlint:-serial"/>
    </javac>
    <jar jarfile="nbantext.jar">
      <fileset dir="build/antclasses"/>
      <fileset dir="antsrc">
        <exclude name="**/*.java"/>
        <exclude name="**/package.html"/>
        <exclude name="package-list"/>
      </fileset>
    </jar>
  </target>

  <target name="init-module-list" depends="bootstrap">
    <!-- Define modules. -->
    <resolve name="modules" value="config.modules.${moduleconfig}"/>
    <resolve name="fixedmodules" value="config.fixedmodules.${moduleconfig}"/>
    <property name="allmodules" value="${fixedmodules},${modules}"/>
  </target>

  <target name="set-buildnumber" unless="buildnumber">
    <tstamp>
    	<format property="buildnumber" pattern="yyMMdd"/>
    </tstamp>
    <tstamp>
    	<format property="buildday" pattern="d MMM yyyy" locale="en" />
    </tstamp>
  </target>

  <target name="init" depends="init-module-list,set-buildnumber,init-tasks">
    <fail message="You need to have some modules checked out to build NetBeans. For example, try running the 'checkout' target.">
        <condition>
            <not>
                <available file="../o.n.core"/>
            </not>
        </condition>
    </fail>
    <taskdef name="nbmerge" classname="org.netbeans.nbbuild.NbMerge" classpath="nbantext.jar"/>
    <taskdef name="for-each" classname="org.netbeans.nbbuild.ForEach" classpath="nbantext.jar"/>
    <taskdef name="getdependsclusters" classname="org.netbeans.nbbuild.GetDependsClusters" classpath="nbantext.jar"/>
    <taskdef name="repeat" classname="org.netbeans.nbbuild.Repeat" classpath="nbantext.jar"/>

    <!-- Overridable. Note: need not necessarily be a number at all): -->
    <property name="buildnum" value="dev-${buildnumber}"/>
    <property name="sanitystart.args" value="-J-Dnetbeans.close=true ${sanitystart.args.additional}"/>

    <!-- Set up automatic all-* targets: -->
    <taskdef name="insert-module-all-targets" classname="org.netbeans.nbbuild.InsertModuleAllTargets" classpath="nbantext.jar"/>
    <property name="verify.checkout" value="true"/> 
    <insert-module-all-targets checkModules="${verify.checkout}"/>
  </target>
  
  <target name="all-installer" description="Dummy target for build system compatibility"/>

  <target name="all-translatedfiles" depends="init">
    <echo message="Building module translatedfiles..."/>
    <getdependsclusters name="dependsClusters" list="${nb.clusters.list}"/>
    <antcall target="build-one-cluster-dependencies" inheritAll="false">
      <param name="one.cluster.dependencies" value="${dependsClusters}"/>
      <param name="one.cluster.name" value="this-cluster"/>
    </antcall>
    <ant dir="../translatedfiles" target="netbeans"/>
  </target>

  <target name="all-xtest" depends="init">
    <getdependsclusters name="dependsClusters" list="${clusters.list}"/>
    <antcall target="build-one-cluster-dependencies" inheritAll="false">
      <param name="one.cluster.dependencies" value="${dependsClusters}"/>
      <param name="one.cluster.name" value="this-cluster"/>
    </antcall>
    <ant dir="../nbjunit"/>
    <echo message="Building module xtest..."/>
    <ant dir="../xtest" antfile="build.xml" target="netbeans"/>
  </target>
  
  <!-- this is project is not a netbeans module project, so we do a no-op
       here.  The code in appsrvbridge gets built by XXX -->
  <target name="all-serverplugins/sun/appsrvbridge" depends="init">
    <echo message="Building module serverplugins/sun/appsrvbridge... NO-OP"/>
  </target>

  <!-- build NBMs for selected modules -->
  <target name="build-nbms" depends="init" description="Build all NBMs, all modules have to be built before proceed">
      <mkdir dir="nbms" />
      <property name="base.nbm.target.dir" location="nbms" />
      
      <pathconvert property="modules.fullpath" >
          <path>
              <dirset dir="${nb_all}" includes="${allmodules}" />
          </path>
          <mapper type="identity" />
      </pathconvert>
      
      <sortsuitemodules unsortedmodules="${modules.fullpath}" sortedmodulesproperty="modules.sorted"/>
      
      <pathconvert property="modules.foreach" dirsep="/" pathsep=",">
          <path path="${modules.sorted}" />
          <mapper>
              <globmapper handledirsep="true" from="${nb_all}/*" to="*" />
          </mapper>
      </pathconvert>
      
      <for-each startdir=".." target="conditional-nbm" locations="${modules.foreach}"/>
  </target>
  <target name="nbm"/><!-- dummy target -->
  <target name="conditional-nbm"/><!-- dummy target -->
  
  <property name="jnlp.signjar.keystore" location="build/default.keystore" />
  <available property="jnlp.signjar.keystore.exists" file="${jnlp.signjar.keystore}" />
  <target name="jnlp-generate-keystore" depends="init" unless="jnlp.signjar.keystore.exists" >
    <property name="jnlp.signjar.alias" value="jnlp" />
    <property name="jnlp.signjar.password" value="netbeans" />
    <property name="jnlp.signjar.vendor" value="CN=NetBeans, OU=NetBeans, O=netbeans.org, C=US" />
    
    <mkdir dir="${jnlp.signjar.keystore}/../" />
    <echo message="Going to create default keystore in ${jnlp.signjar.keystore}" />
    <genkey 
        alias="${jnlp.signjar.alias}"
        keystore="${jnlp.signjar.keystore}"
        storepass="${jnlp.signjar.password}"
        dname="${jnlp.signjar.vendor}"
    />
  </target>

  <target name="build-jnlp" depends="init,jnlp-generate-keystore" description="Create a JNLP distribution.">
      <property name="jnlp.dest.dir" location="build/jnlp" />
      <mkdir dir="${jnlp.dest.dir}" />
      <makeurl property="jnlp.codebase" file="${jnlp.dest.dir}"/> <!-- fallback value unless otherwise configured -->
      <for-each startdir=".." target="jnlp" locations="${config.modules.jnlp}"/>
      <taskdef name="verifyjnlp" classname="org.netbeans.nbbuild.VerifyJNLP" classpath="nbantext.jar"/>
      <verifyjnlp>
          <fileset dir="${jnlp.dest.dir}" includes="*.jnlp"/>
      </verifyjnlp>
  </target>
  
  <!-- build javadoc for selected modules -->
  <target name="build-javadoc" depends="init" description="Builds Javadoc documentation for modules; on branches pass e.g. -Djavadoc.web.root=http://www.netbeans.org/download/release35/javadoc">
      <pathconvert property="modules.fullpath" >
          <path>
              <dirset dir="${nb_all}" includes="${config.javadoc.netbeans}" />
          </path>
          <mapper type="identity" />
      </pathconvert>
      
      <sortsuitemodules unsortedmodules="${modules.fullpath}" sortedmodulesproperty="modules.sorted"/>
      
      <pathconvert property="modules.foreach" dirsep="/" pathsep=",">
          <path path="${modules.sorted}" />
          <mapper>
              <globmapper handledirsep="true" from="${nb_all}/*" to="*" />
          </mapper>
      </pathconvert>
      
      <property name="export.interfaces" location="${netbeans.javadoc.dir}/../ModulesExportedInterfaces" />
      <property name="export.apichanges" location="${netbeans.javadoc.dir}/../APIChanges" />
      <mkdir dir="${export.interfaces}" />
      <mkdir dir="${export.apichanges}" />
      
      <for-each startdir=".." target="netbeans-javadoc" locations="${modules.foreach}"/>

      <antcall inheritall="true" inheritrefs="true" target="javadoc-generate-xml" />
      <antcall inheritall="true" inheritrefs="true" target="javadoc-generate-html" />
      <antcall inheritall="true" inheritrefs="true" target="javadoc-check-broken-links" />


      <property name="javadoc.web.zip" value="NetBeans-${buildnum}-javadoc-web.zip"/>
      <property name="javadoc.zip" value="NetBeans-${buildnum}-javadoc.zip"/>
      <condition property="skip.javadoc.web.zip" value="true">
          <equals arg1="${javadoc.web.zip}" arg2=""/>
      </condition>


      <antcall inheritall="true" inheritrefs="true" target="javadoc-build-zip-web"/>
      <antcall inheritall="true" inheritrefs="true" target="javadoc-build-zip-lite"/>
  </target>

  <target name="javadoc-build-zip-web" depends="init" unless="skip.javadoc.web.zip">
    <zip destfile="${javadoc.web.zip}" update="true" duplicate="preserve" compress="true">
      <zipfileset dir="${netbeans.javadoc.dir}" filemode="644" prefix="">
        <include name="**/*"/>
      </zipfileset>
    </zip>
  </target>
  <target name="javadoc-build-zip-lite" depends="init">
    <zip destfile="${javadoc.zip}" update="true" duplicate="preserve" compress="true">
      <zipfileset dir="build/tmp" filemode="644" prefix="">
        <include name="overview-summary.html"/>
      </zipfileset>
      <zipfileset dir="${netbeans.javadoc.dir}" filemode="644" prefix="">
        <include name="**/*"/>
        <exclude name="*.zip"/>
        <exclude name="overview-summary.html"/>
        <exclude name="tmp/**"/>
      </zipfileset>
    </zip>
  </target>
  
  <!-- build source zips for selected modules - useful for populating maven repository only-->
  <target name="build-source-zips" depends="init" description="Builds source zips for maven repository inclusion.">
      <pathconvert property="modules.fullpath" >
          <path>
              <dirset dir="${nb_all}" includes="${config.modules.stable},${config.fixedmodules.stable}" />
          </path>
          <mapper type="identity" />
      </pathconvert>
      
      <sortsuitemodules unsortedmodules="${modules.fullpath}" sortedmodulesproperty="modules.sorted"/>
      
      <pathconvert property="modules.foreach" dirsep="/" pathsep=",">
          <path path="${modules.sorted}" />
          <mapper>
              <globmapper handledirsep="true" from="${nb_all}/*" to="*" />
          </mapper>
      </pathconvert>
      
      <property name="netbeans.zipped.sources.dir" location="build/source-zips" />
      
      <for-each startdir=".." target="sources-zip" locations="${modules.foreach}"/>
  </target>
  
      
  <target name="javadoc-generate-xml" depends="init" >
      <echo file="${export.apichanges}/header.gen" >&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;changes&gt;
</echo>
      
      <echo file="${export.apichanges}/footer.gen" >
        &lt;/changes&gt;
      </echo>
      
      <concat destfile="${netbeans.javadoc.dir}/apichanges.xml" >
          <fileset dir="${export.apichanges}" includes="header.gen" />
          <fileset dir="${export.apichanges}" includes="*" excludes="*.gen" />
          <fileset dir="${export.apichanges}" includes="footer.gen" />
      </concat>

      
      <echo file="${export.interfaces}/header.gen" >&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;apis&gt;
</echo>
      
      <echo file="${export.interfaces}/footer.gen" >
        &lt;/apis&gt;
      </echo>
      
      <concat destfile="${netbeans.javadoc.dir}/modules.xml" >
          <fileset dir="${export.interfaces}" includes="header.gen" />
          <fileset dir="${export.interfaces}" includes="*" excludes="*.gen" />
          <fileset dir="${export.interfaces}" includes="footer.gen" />
      </concat>
      
    <taskdef 
        name="javadoc-index" 
        classpath="nbantext.jar" 
        classname="org.netbeans.nbbuild.JavadocIndex"
    />

        
    <javadoc-index target="${netbeans.javadoc.dir}/allclasses.xml" > 
        <packageslist dir="${netbeans.javadoc.dir}" >
            <include name="**/allclasses-noframe.html" />
        </packageslist>
    </javadoc-index>
  </target>
  
  
  <target name="javadoc-generate-html" depends="init" >            
      <tstamp>
        <format property="modules-javadoc-date" pattern="d MMM yyyy" locale="en" />
      </tstamp>
      
      <style 
        in="${netbeans.javadoc.dir}/modules.xml" 
        out="${netbeans.javadoc.dir}/usecases.html" 
        style="javadoctools/export2usecases.xsl"
      >
        <param name="date" expression="${modules-javadoc-date}"/>
      </style>
      
      <style 
        in="${netbeans.javadoc.dir}/apichanges.xml" 
        out="${netbeans.javadoc.dir}/apichanges.html" 
        style="javadoctools/export2apichanges.xsl"
      >
        <param name="date" expression="${modules-javadoc-date}"/>
        <param name="changes-since-year" expression="${previous.release.year}"/>
        <param name="changes-since-day" expression="${previous.release.day}"/>
        <param name="changes-since-month" expression="${previous.release.month}"/>
        <param name="include-introduction" expression="true" />
      </style>

      <tstamp>
        <format property="atom-date" pattern="yyyy-MM-dd'T'HH:mm:ss'Z'" timezone="UTC"/>
      </tstamp>
      <style 
        in="${netbeans.javadoc.dir}/apichanges.xml" 
        out="${netbeans.javadoc.dir}/apichanges.atom" 
        style="javadoctools/export2apichanges-atom.xsl"
      >
        <param name="date" expression="${atom-date}"/>
      </style>
      
    <copy file="javadoctools/netbeans.css" tofile="${netbeans.javadoc.dir}/netbeans.css" />
    <condition property="javadoc.style.sheet.exists" >
        <available file="${netbeans.javadoc.dir}/org-openide-util/javadoc.css" />
    </condition>
    
    <fail unless="javadoc.style.sheet.exists" >
    The org-openide-util/javadoc.css has to exist as we are refering to
    it from to master module javadoc pages. If it does not anymore, update
    the javadoctools/export*.xsl templates.
    </fail>

      <style 
        in="${netbeans.javadoc.dir}/allclasses.xml" 
        out="${netbeans.javadoc.dir}/allclasses-frame.html" 
        style="javadoctools/export2allclasses.xsl"
      >
      </style>
      
      <style 
        in="${netbeans.javadoc.dir}/modules.xml" 
        out="${netbeans.javadoc.dir}/overview-frame.html" 
        style="javadoctools/export2allmodules.xsl"
      >
        <param name="date" expression="${modules-javadoc-date}"/>
      </style>
      
      <style 
        in="${netbeans.javadoc.dir}/modules.xml" 
        out="${netbeans.javadoc.dir}/layers.html" 
        style="javadoctools/export2layer.xsl"
      >
        <param name="date" expression="${modules-javadoc-date}"/>
      </style>
      
      <style 
        in="${netbeans.javadoc.dir}/modules.xml" 
        out="${netbeans.javadoc.dir}/overview-summary.html" 
        style="javadoctools/export2html.xsl"
      >
        <param name="date" expression="${modules-javadoc-date}"/>
        <param name="download" expression="true"/>
      </style>
      
      <style 
        in="${netbeans.javadoc.dir}/modules.xml" 
        out="build/tmp/overview-summary.html"
        style="javadoctools/export2html.xsl"
      >
        <param name="date" expression="${modules-javadoc-date}"/>
        <param name="download" expression="false"/>
      </style>
      
    <!-- at the end geneate the index.html so people know where to start -->      
    <echo file="${netbeans.javadoc.dir}/index.html" ><![CDATA[
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
<HTML><HEAD><TITLE>NetBeans API Index</TITLE>
<link type="application/atom+xml" rel="alternate" href="apichanges.atom">
</HEAD>
<FRAMESET cols="20%,80%" title="" onLoad="top.loadFrames()">
<FRAMESET rows="30%,70%" title="" onLoad="top.loadFrames()">
<FRAME src="overview-frame.html" name="packageListFrame" title="All Modules">
<FRAME src="allclasses-frame.html" name="packageFrame" title="All classes">
</FRAMESET>
<FRAME src="overview-summary.html" name="classFrame" title="Module, package, class and interface descriptions" scrolling="yes">
<NOFRAMES>
<H2>Frame Alert</H2>
<P>
This document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client.
Link to <A HREF="overview-summary.html">Non-frame version.</A>
</NOFRAMES>
</FRAMESET>
</HTML>
]]></echo>
        &properties;

        <replace dir="${netbeans.javadoc.dir}">
            <include name="*.html"/>
            <replacefilter token="@JDK@" value="http://java.sun.com/j2se/1.5.0/docs/api"/>
            &replaces;   
            <replacefilter token="http://root/" value="." />
            <replacefilter token="$${javadoc.web.root}" value="." />
        </replace>
    
    <echo message="Javadoc index has been generated to ${netbeans.javadoc.dir}/index.html" />
  </target>
  
  
  <target name="javadoc-check-broken-links" depends="init" unless="javadoc.skip.brokenlinks.check" >
        <taskdef name="checklinks" classname="org.netbeans.nbbuild.CheckLinks">
            <classpath>
                <pathelement location="nbantext.jar"/>
            </classpath>
        </taskdef>
        <property name="javadoc.check.forbidden.links" value="true" />
        <checklinks 
        	basedir="${netbeans.javadoc.dir}" 
          checkexternal="${javadoc.check.external.links}" 
          checkforbidden="${javadoc.check.forbidden.links}" 
          checkspaces="false" 
          report="${netbeans.javadoc.dir}/checklinks-errors.xml"
        >
            <include name="*/overview-summary.html"/>
            <include name="*/apichanges.html"/>
            <include name="*/architecture-summary.html"/>
            <include name="*/**/package-summary.html"/>
            <include name="*/**/doc-files/**/*.html"/>
            <include name="*.html" />
                
            &disallowed-links;
        </checklinks>
  </target>

  <target name="check-javahelpbin" depends="init" description="Validate intermodule links in helpsets.">
      <taskdef name="checkhelpsetsbin" classname="org.netbeans.nbbuild.CheckHelpSetsBin">
        <classpath>
          <pathelement location="${nb_all}/nbbuild/nbantext.jar"/>
            <fileset dir="${nb_all}/javahelp/external">
              <include name="jh*.jar"/>
            </fileset>
        </classpath>
      </taskdef>
      <checkhelpsetsbin>
        <fileset dir="netbeans">
          <include name="*/modules/*.jar"/>
        </fileset>
      </checkhelpsetsbin>
  </target>

  <target name="build-messaging" depends="init">
    <echo message="Starting a build for NetBeans (build ${buildnum}, config '${moduleconfig}') ..."/>
    <echo message="Selected modules: ${modules}"/>
    <echo message="OS: ${os.name} ${os.version}  Locale: ${user.language}_${user.region}"/>
    <echo message="Java: ${nbjdk.home}"/>
  </target>
  
  <!-- Use of nbmerge target has the effect of automatically depending on all-X for every module. -->
  <!-- It also runs deltree(dir=wherever) and copydir(src=../X/netbeans,dest=wherever) to create the IDE install. -->

  <target name="build-nozip" depends="clean-cluster-flags,build-clusters,create-license-summary" description="Build the IDE but do not create a final ZIP file.">
    <loadproperties srcFile="${clusters.list.file}" />
     
    <loadproperties srcfile="${netbeans.dest.dir}/moduleCluster.properties" />
        
    <mkdir dir="${netbeans.dest.dir}/bin" />
    <copy file="../ide/launcher/unix/netbeans" todir="${netbeans.dest.dir}/bin" />
    <chmod file="${netbeans.dest.dir}/bin/netbeans" perm="ugo+rx"/>
    <copy file="../ide/launcher/windows/netbeans.exe" todir="${netbeans.dest.dir}/bin" />
    <copy file="../ide/launcher/windows/nb.exe" todir="${netbeans.dest.dir}/bin" />
    <!-- if anybody knows better place for icons, let me know: jtulach@netbeans.org -->

    <mkdir dir="${netbeans.dest.dir}/etc" />
    <copy file="../ide/launcher/netbeans.conf" todir="${netbeans.dest.dir}/etc" overwrite="true"/>
    <copy file="../ide/launcher/netbeans.clusters" todir="${netbeans.dest.dir}/etc" overwrite="true"/>

    <echo message="${netbeans.dest.dir}/${nb.cluster.platform.dir}/lib/nbexec" />
    <fixcrlf eol="lf" srcdir="${netbeans.dest.dir}" >
      <include name="etc/netbeans.conf" />
      <include name="etc/netbeans.clusters" />
      <include name="bin/netbeans" />      
      <include name="${nb.cluster.platform.dir}/lib/nbexec" />      
    </fixcrlf>

    <echo file="${netbeans.dest.dir}/${nb.cluster.nb.dir}/build_info">NetBeans dev build
------------------
Number:   ${buildnumber}
Date:     ${buildday}
Branding:
Branch:   trunk
Tag:
</echo>
    <taskdef name="hgexec" classname="org.netbeans.nbbuild.HgExec" classpath="nbantext.jar"/>
    <hgexec dir=".." outputproperty="hg.id" errorproperty="hg.id.err" failonerror="false" failifexecutionfails="false" resultproperty="hg.id.exit">
      <arg value="id"/>
    </hgexec>
    <condition property="hg.id.line" value="Hg ID:    ${hg.id}&#10;">
      <equals arg1="${hg.id.exit}" arg2="0"/>
    </condition>
    <property name="hg.id.line" value=""/>
    <echo file="${netbeans.dest.dir}/${nb.cluster.nb.dir}/build_info" append="true">${hg.id.line}</echo>
  </target>
  
  <target name="build" depends="build-nozip"
          description="Create a complete build including a ZIP distribution (but do not try it).">
    <delete file="NetBeans-${buildnum}.zip"/>
    <delete file="NetBeans-${buildnum}-build-extra-data.zip"/>
    <delete file="NetBeans-${buildnum}-javadoc-web.zip"/>
    <delete file="NetBeans-${buildnum}-javadoc.zip"/>

    <property name="nb-extra-files" value="*.built,test/**,extra/**"/>

    <!-- package the zip file -->
    <zip destfile="NetBeans-${buildnum}.zip" update="true" duplicate="preserve">
      <zipfileset file="${netbeans.dest.dir}/bin/netbeans" filemode="755" prefix="${netbeans.dest}/bin"/>
      <zipfileset file="${netbeans.dest.dir}/${nb.cluster.platform.dir}/lib/nbexec" filemode="755" prefix="${netbeans.dest}/${nb.cluster.platform.dir}/lib"/>
      <zipfileset dir="${netbeans.dest.dir}" filemode="755" prefix="${netbeans.dest}">
        <include name="${nb.cluster.java.dir}/ant/bin/"/>
        <exclude name="**/*.bat"/>
        <exclude name="**/*.cmd"/>
      </zipfileset>
      <zipfileset dir="${netbeans.dest.dir}" filemode="755" prefix="${netbeans.dest}">
        <include name="**/*.sh"/>
      </zipfileset>
      <zipfileset dir="${netbeans.dest.dir}" prefix="${netbeans.dest}" excludes="${nb-extra-files}"/>
    </zip>
    
    <!-- package the zip file with extra files not to be included in regular product package-->
    <!--
    <zip destfile="NetBeans-${buildnum}-build-extra-data.zip" update="true" duplicate="preserve">
        <zipfileset dir="${netbeans.dest.dir}" prefix="${netbeans.dest}" includes="${nb-extra-files}"/>
    </zip>
    -->

    <echo>Build created; see NetBeans-${buildnum}.zip (in nbbuild/).
If you like, you may run the IDE straight from
the ${netbeans.dest}/bin/ directory.
(For example, type: ant tryme)
    </echo>
  </target>

  <target name="delete-and-merge" depends="merge-delete,merge" />   

  <target name="merge-delete" depends="init">
    <delete dir="${netbeans.dest}" />
  </target>
  
  <target name="merge" depends="build-messaging">
    <mkdir dir="${netbeans.dest.dir}"/>
    <nbmerge failonerror="${stop.when.broken.modules}" 
             dest="${netbeans.dest}" 
             topdir=".." 
             fixedmodules="${fixedmodules}" 
             modules="${modules}"
             builtmodulesproperty="${built.modules.property}" 
             targetprefix="all-" 
             mergedependentmodules="${merge.dependent.modules}" >
    </nbmerge>
    <chmod perm="ugo+x">
      <fileset dir="${netbeans.dest.dir}">
        <include name="bin/netbeans"/>
        <include name="bin/**/*.pl"/>
        <include name="jakarta-tomcat-*/bin/*.sh"/>
      </fileset>
    </chmod>
  </target>


  <target name="-build-platform" depends="init">
      <delete file="${netbeans.dest.dir}/nb.cluster.platform.built"/>
      <delete file="${netbeans.dest.dir}/nb.cluster.harness.built"/>
      <run-depend-build clusters-to-build="nb.cluster.platform,nb.cluster.harness"/>
  </target>
  
  <target name="build-platform" description="Build the NetBeans Platform (platform and harness clusters).">
      <ant dir="." target="-build-platform" inheritAll="false">
          <property name="cluster.config" value="platform"/>
      </ant>
  </target>
  
  <target name="build-cluster" depends="init">
    <run-depend-build clusters-to-build="${cluster-name}"/>
  </target>

  <macrodef name="run-depend-build">
    <attribute name="clusters-to-build"/>
    <sequential>
      <repeat target="build-one-cluster" name="one.cluster.name" values="@{clusters-to-build}" /> 
    </sequential>
  </macrodef>

  <target name="build-clusters" depends="init">
     <run-depend-build clusters-to-build="${nb.clusters.list}"/> 
  </target>

  <target name="build-one-cluster-dependencies-check">
    <condition property="${one.cluster.name}-hasNoDependencies">
      <equals arg1="${one.cluster.dependencies}" arg2="" trim="true"/>
    </condition>
    <resolve name="test.prop" value="${one.cluster.name}-hasNoDependencies"/>
  </target>

  <target name="build-one-cluster-dependencies" 
          depends="build-one-cluster-dependencies-check"
          unless="${one.cluster.name}-hasNoDependencies">
    <run-depend-build clusters-to-build="${one.cluster.dependencies}"/> 
  </target>

  <target name="build-one-cluster-check">
    <condition property="${one.cluster.name}-is-built">
      <available file="${netbeans.dest.dir}/${one.cluster.name}.built"/>
    </condition>
    <resolve name="test1.prop" value="${one.cluster.name}-is-built"/>
  </target>

  <target name="build-one-cluster" unless="${one.cluster.name}-is-built" depends="build-one-cluster-check">
    <echo message="Building ${one.cluster.name} modules"/>
    <resolve name="one-cluster-modules" value="${one.cluster.name}"/>
    <resolve name="one-cluster-dependencies" value="${one.cluster.name}.depends"/>
    <echo>${one-cluster-modules}</echo>
    <echo>Dependencies: ${one-cluster-dependencies}</echo>
    <insert-module-all-targets/> <!-- we are in a subproject, so need to reinsert the targets... XXX <antcall> and thus <repeat> apparently reparses the Ant script from disk! -->
    <antcall target="build-one-cluster-dependencies" inheritAll="false">
      <param name="one.cluster.dependencies" value="${one-cluster-dependencies}"/>
      <param name="one.cluster.name" value="${one.cluster.name}"/>
    </antcall>
    <mkdir dir="${netbeans.dest.dir}"/>
    <nbmerge failonerror="${stop.when.broken.modules}" 
             dest="${netbeans.dest.dir}" 
             topdir="${nb_all}" 
             fixedmodules="${one-cluster-modules}"
             builtmodulesproperty="${built.modules.property}" 
             targetprefix="all-" 
             mergedependentmodules="false">
    </nbmerge>
    <touch file="${netbeans.dest.dir}/${one.cluster.name}.built"/>
  </target>

  <target name="zipclusters" depends="init">
    <mkdir dir="${netbeans.build.dir}/zips"/>
    <repeat target="zip-one-cluster" name="one.cluster.name" values="${clusters.list}" /> 

    <!-- package the misc files -->
    <zip destfile="${netbeans.build.dir}/zips/${clusters.prefix}-misc-${buildnum}.zip" update="true" duplicate="preserve">
      <zipfileset dir="${netbeans.dest.dir}" filemode="755">
         <include name="bin/netbeans"/>
      </zipfileset>
      <zipfileset dir="${netbeans.dest.dir}">
        <include name="bin/**"/>
        <include name="etc/**/"/>
      </zipfileset>
    </zip>
  </target>

  <target name="zip-one-cluster">
    <taskdef name="setclusterpatternset" classname="org.netbeans.nbbuild.SetClusterPatternSet" classpath="nbantext.jar"/>
    <taskdef name="setcluster" classname="org.netbeans.nbbuild.SetCluster" classpath="nbantext.jar"/>
    <loadproperties srcFile="${clusters.list.file}" />
    <loadproperties srcFile="cluster-description.properties" />
    <setcluster cluster="${one.cluster.name}" name="one.cluster.dir" />
    
    <setclusterpatternset cluster="${one.cluster.name}" name="${one.cluster.name}.files" trackingpath="${netbeans.dest.dir}" clusterdir="${one.cluster.dir}"/>
    
    <resolve name="zipcluster.file" value="${one.cluster.name}.pkg.filename"/>
    <zip destfile="${netbeans.build.dir}/zips/${clusters.prefix}-${zipcluster.file}-${buildnum}.zip" update="true" duplicate="preserve">
      <zipfileset dir="${netbeans.dest.dir}" filemode="755">
        <include name="${one.cluster.dir}/lib/nbexec"/>
      </zipfileset>
      <zipfileset dir="${netbeans.dest.dir}" filemode="755">
        <include name="${one.cluster.dir}/ant/bin/*"/>
        <exclude name="${one.cluster.dir}/ant/bin/*.bat"/>
        <exclude name="${one.cluster.dir}/ant/bin/*.cmd"/>
      </zipfileset>
      <zipfileset dir="${netbeans.dest.dir}">
        <patternset refID="${one.cluster.name}.files"/>
      </zipfileset>
    </zip>
  </target>

  <target name="build-nozip-ml" depends="bootstrap" description="Build the Multilanguage IDE but do not create a final ZIP file.">
    <taskdef name="resolvelist" classname="org.netbeans.nbbuild.ResolveList" classpath="nbantext.jar"/>
    <resolvelist name="modules.for.mlbuild.list" list="${nb.clusters.list}"/>

    <pathconvert property="modules.fullpath" >
        <path>
            <dirset dir="${nb_all}" includes="${modules.for.mlbuild.list}" />
        </path>
        <mapper type="identity" />
    </pathconvert>
      
    <subant target="netbeans-ml" buildpath="${modules.fullpath}">
        <property name="netbeans.dest.dir" value="${netbeans.dest.dir}"/>
    </subant>
  </target>
  
  <target name="build-zip-ml" depends="bootstrap,set-buildnumber,check-locales-set,build-nozip-ml"
          description="Create a compleate multilanguage build including a ZIP distributions">
      <fail message="Property locales must be set to reasonable value" unless="locales.is.set"/>
      <echo message="nb.clusters.list is ${nb.clusters.list}"/>
      <taskdef name="repeat" classname="org.netbeans.nbbuild.Repeat"
               classpath="nbantext.jar"/>
      <property name="buildnum" value="dev-${buildnumber}"/>
      <repeat target="pack-one-cluster-ml" name="one.cluster.name.ml" values="${nb.clusters.list}"/>
  </target>
  
  <target name="pack-one-cluster-ml" if="one.cluster.name.ml">
      <resolve name="one.cluster.dir.ml.pre" value="${one.cluster.name.ml}.dir"/>
      <pathconvert property="one.cluster.dir.ml" setonempty="false">
          <path path="${one.cluster.dir.ml.pre}"/>
          <chainedmapper>
          <filtermapper>
              <replacestring from="," to="_"/>
              <replacestring from="-" to="_"/>
              <replacestring from="." to="_"/>
          </filtermapper>
          <flattenmapper/>
          </chainedmapper>
      </pathconvert>
      <echo message="one.cluster.name.ml is ${one.cluster.name.ml}" level="verbose"/>
      <echo message="one.cluster.dir.ml is ${one.cluster.dir.ml}" level="verbose"/>
      <echo message="one.cluster.dir.ml.pre is ${one.cluster.dir.ml.pre}" level="verbose"/>
      <mkdir dir="build/ml"/>
      <delete file="build/ml/NetBeans-${one.cluster.dir.ml}-${buildnum}.zip"/>
      <repeat target="pack-one-locale-for-cluster" name="one.locale" values="${locales}"/>
  </target>

  <target name="pack-one-locale-for-cluster" if="one.locale">
      <echo message="cluster-locale is ${one.cluster.dir.ml}-${one.locale}" level="verbose"/>
      <zip destfile="build/ml/NetBeans-${one.cluster.dir.ml}-${buildnum}.zip" update="true" duplicate="preserve">
          <zipfileset dir="${netbeans.dest.dir}/${one.cluster.dir.ml.pre}" prefix="${netbeans.dest}">
              <include name="**/locale/*_${one.locale}.*"/>
          </zipfileset>
      </zip>    
  </target>

  <target name="check-locales-set">
      <condition property="locales.is.set" value="true">
          <and>
              <isset property="locales"/>
              <length string="${locales}" when="ge" length="2" trim="yes"/>
          </and>
      </condition>
  </target>

  <target name="build-nbms-ml" depends="bootstrap,set-buildnumber,init-tasks">
      <taskdef name="repeat" classname="org.netbeans.nbbuild.Repeat"
               classpath="${nb_all}/nbbuild/nbantext.jar"/>
      <property name="buildnum" value="dev-${buildnumber}"/>
      <mkdir dir="build/ml/nbms"/>
      <property name="netbeans.dest.dir.ml" location="build/ml/nbms"/>
      <delete dir="build/ml/nbms"/>
      <mkdir dir="build/ml/nbms"/>
      <copy todir="build/ml/nbms">
          <fileset dir="build/ml">
              <include name="NetBeans-*-${buildnum}.zip"/>
          </fileset>
      </copy>
      <pathconvert property="dlocales" setonempty="false">
          <path path="${locales}"/>
          <chainedmapper>
          <filtermapper>
              <replacestring from="," to="_"/>
              <replacestring from="-" to="_"/>
          </filtermapper>
          <flattenmapper/>
          </chainedmapper>
      </pathconvert>
      <tstamp>
      	  <format property="spec.version" pattern="yyyy.M.d.kmm" locale="en" />
      </tstamp>
      <echo level="verbose" message="dlocales is ${dlocales}"/>
      <echo level="verbose" message="locales is ${locales}"/>
      <echo level="verbose" message="spec.version is ${spec.version}"/>
      <delete file="build/ml/cluster-nbms-ml.properties"/>
      <repeat target="build-one-nbm-ml" name="one.cluster.name.ml" values="${nb.clusters.list}"/>
      <antcall target="build-one-nbm-ml" inheritall="false">
          <param name="is.kit" value="true"/>
          <param name="locales" value="${locales}"/>
          <param name="dlocales" value="${dlocales}"/>
          <param name="one.cluster.name.ml" value="nb.cluster.nb"/>
          <param name="nb.cluster.nb" value="${nb.cluster.nb}"/>
          <param name="nb.clusters.list" value="${nb.clusters.list}"/>
          <param name="spec.version" value="${spec.version}"/>
          <param name="netbeans.dest.dir.ml" value="${netbeans.dest.dir.ml}"/>
          <param name="buildnumber" value="${buildnumber}"/>
      </antcall>
      <taskdef name="makeupdatedesc" classname="org.netbeans.nbbuild.MakeUpdateDesc"
               classpath="${nb_all}/nbbuild/nbantext.jar"/>
      <makeupdatedesc desc="nbms/catalog.xml" distbase=".">
          <fileset dir="nbms">
              <include name="*.nbm"/>
          </fileset>
      </makeupdatedesc>
  </target>

  <target name="-check-ml-nbm-props">
      <condition property="run.ml.nbm.build" value="true">
          <and>
              <isset property="locales"/>
              <isset property="dlocales"/>
              <isset property="one.cluster.name.ml"/>
              <isset property="nb.clusters.list"/>
              <isset property="spec.version"/>
              <isset property="netbeans.dest.dir.ml"/>
              <isset property="buildnumber"/>
          </and>
      </condition>
  </target>
  
  <target name="-unpack-cluster-ml-zipfile" unless="is.kit">
      <unzip dest="${netbeans.dest.dir.ml}" src="build/ml/NetBeans-${cluster.package.dir}-${buildnum}.zip">
          <mapper type="glob" from="netbeans/*" to="${one.cluster.dir.ml}/*"/>
      </unzip>
  </target>
  
  <target name="-create-cluster-ml-nbm-metadata" unless="is.kit">
      <echo file="build/ml/nbms/tmp/manifest.mf">OpenIDE-Module: ${code.name}
OpenIDE-Module-Localizing-Bundle: ${code.name.base.slashes}/Bundle.properties
OpenIDE-Module-Specification-Version: ${spec.version}
</echo>
      <echo file="build/ml/nbms/classes/${code.name.base.slashes}/Bundle.properties">
OpenIDE-Module-Name=NetBeans 6.0 ${one.cluster.dir.ml} cluster localization (${locales})
OpenIDE-Module-Display-Category=Localization
OpenIDE-Module-Short-Description=NetBeans 6.0 ${one.cluster.dir.ml} cluster localization (${locales})
OpenIDE-Module-Long-Description=Delivers ${locales} localization for all modules in ${one.cluster.dir.ml} cluster of NetBeans 6.0
</echo>
  </target>
  
    <target name="-create-kit-ml-nbm-metadata" if="is.kit">
      <echo file="build/ml/nbms/tmp/manifest.mf">OpenIDE-Module: ${code.name}
OpenIDE-Module-Localizing-Bundle: ${code.name.base.slashes}/Bundle.properties
OpenIDE-Module-Specification-Version: ${spec.version}
OpenIDE-Module-Module-Dependencies: ${kit.deps}
</echo>
       <echo file="build/ml/nbms/classes/${code.name.base.slashes}/Bundle.properties">
OpenIDE-Module-Name=NetBeans 6.0 ${locales} localization kit
OpenIDE-Module-Display-Category=Localization
OpenIDE-Module-Short-Description=NetBeans 6.0 ${locales} localization kit
OpenIDE-Module-Long-Description=Delivers ${locales} localization of whole NetBeans 6.0
</echo>
  </target>

  <target name="build-one-nbm-ml" depends="init-tasks,-check-ml-nbm-props" if="run.ml.nbm.build">
      <property file="build/ml/cluster-nbms-ml.properties"/>
      <echo level="verbose" message="kit.deps is ${kit.deps}"/>
      <echo level="verbose" message="locales is ${locales}"/>
      <echo level="verbose" message="dlocales is ${dlocales}"/>
      <echo level="verbose" message="nb.clusters.list is ${nb.clusters.list}"/>
      <echo level="verbose" message="netbeans.dest.dir.ml is ${netbeans.dest.dir.ml}"/>
      <echo level="verbose" message="spec.version is ${spec.version}"/>

      <resolve name="one.cluster.dir.ml" value="${one.cluster.name.ml}.dir"/>
      <pathconvert property="cluster.package.dir" setonempty="false">
          <path path="${one.cluster.dir.ml}"/>
          <chainedmapper>
          <filtermapper>
              <replacestring from="," to="_"/>
              <replacestring from="-" to="_"/>
              <replacestring from="." to="_"/>
          </filtermapper>
          <flattenmapper/>
          </chainedmapper>
      </pathconvert>
      <delete dir="build/ml/nbms"/>
      <delete dir="${netbeans.dest.dir.ml}"/>
      <mkdir dir="${netbeans.dest.dir.ml}"/>
      <antcall target="-unpack-cluster-ml-zipfile"/>
      <property name="cluster" location="${netbeans.dest.dir.ml}/${one.cluster.dir.ml}"/>
      <condition property="code.name.base" value="org.netbeans.localization.${cluster.package.dir}.${dlocales}">
          <not>
              <isset property="is.kit"/>
          </not>
      </condition>
      <condition property="code.name.base" value="org.netbeans.localization.kit.${cluster.package.dir}.${dlocales}">
          <isset property="is.kit"/>
      </condition>

      <pathconvert property="code.name.base.slashes" setonempty="false">
          <path path="${code.name.base}"/>
          <chainedmapper>
              <flattenmapper/>
              <filtermapper>
                  <replacestring from="." to="/"/>
              </filtermapper>
          </chainedmapper>
      </pathconvert>
      <pathconvert property="code.name.base.dashes" setonempty="false">
          <path path="${code.name.base}"/>
          <chainedmapper>
              <flattenmapper/>
              <filtermapper>
                  <replacestring from="." to="-"/>
              </filtermapper>
          </chainedmapper>
      </pathconvert>
      <property name="public.packages" value="${code.name.base}.*"/>
      <property name="code.name" value="${code.name.base}/1"/>
      <mkdir dir="build/ml/nbms/classes/${code.name.base.slashes}"/>
      <mkdir dir="build/ml/nbms/tmp"/>
      <antcall target="-create-cluster-ml-nbm-metadata"/>
      <antcall target="-create-kit-ml-nbm-metadata"/>
      <property name="is.autoload" value="false"/>
      <property name="is.eager" value="false"/>
      <condition property="module.jar.dir" value="modules">
          <!-- set module.jar.dir property only when building kit NBM - leads to
               AutoUpdate-Show-In-Client manifest attribute is set to true -->
          <isset property="is.kit"/>
      </condition>
      <property name="module.jar" value="modules/${code.name.base.dashes}.jar"/>
      <mkdir dir="${cluster}/modules"/>
      <jarwithmoduleattributes jarfile="${cluster}/${module.jar}"
          compress="${build.package.compress}" 
          index="${build.package.index}" 
          manifest="build/ml/nbms/tmp/manifest.mf">
          <fileset dir="build/ml/nbms/classes"/>
      </jarwithmoduleattributes>
      <createmodulexml xmldir="${cluster}/config/Modules">
          <enabled dir="${cluster}">
              <include name="${module.jar}"/>
          </enabled>
      </createmodulexml>
      <patternset id="module.files">
          <!-- include name="${module.jar}"/ -->
          <include name="**/*.jar"/>
          <include name="config/Modules/${code.name.base.dashes}.xml"/>
      </patternset>

      <property name="module.files.toString" refid="module.files"/>
      <echo level="verbose">Basic matching module files (${code.name.base.dashes}): ${module.files.toString}</echo>
      <genlist outputfiledir="${cluster}" module="${module.jar}">
          <fileset dir="${cluster}">
              <patternset refid="module.files"/>
          </fileset>
      </genlist>
      <property name="license.file.override" location="build/ml/nbms/license"/>
      <property name="extra.license.files" value=""/>
      <taskdef name="releasefileslicense" classname="org.netbeans.nbbuild.extlibs.ReleaseFilesLicense" classpath="${nb_all}/nbbuild/nbantext.jar"/>
      <releasefileslicense license="${license.file.override}" standardlicense="${nb_all}/nbbuild/standard-nbm-license.txt" extralicensefiles="${extra.license.files}"/>
      <taskdef name="makenbm" classname="org.netbeans.nbbuild.MakeNBM" classpath="${nb_all}/nbbuild/nbantext.jar"/>
      <property name="nbm_alias" value="nb_ide"/>
      <makenbm file="build/ml/${code.name.base.dashes}.nbm"
               productdir="${cluster}"
               module="${module.jar}"
               homepage="http://translatedfiles.netbeans.org/"
               distribution="http://translatedfiles.netbeans.org/"
               needsrestart="true"
               global="true"
               targetcluster="${one.cluster.dir.ml}"
               releasedate=""
               moduleauthor="">
          <license file="${license.file.override}"/>
          <signature keystore="${keystore}" storepass="${storepass}" alias="${nbm_alias}"/>
      </makenbm>
      <move todir="nbms" file="build/ml/${code.name.base.dashes}.nbm"/>
      <property file="build/ml/cluster-nbms-ml.properties"/>
      <condition property="new.kit.deps" value="${code.name} &gt; ${spec.version}">
          <and>
              <not>
                  <isset property="kit.deps"/>
              </not>
              <not>
                  <isset property="is.kit"/>
              </not>
          </and>
      </condition>
      <condition property="new.kit.deps" value="${kit.deps},${code.name} &gt; ${spec.version}">
          <and>
              <isset property="kit.deps"/>
              <not>
                  <isset property="is.kit"/>
              </not>
          </and>
      </condition>
      <condition property="new.kit.deps" value="${kit.deps}">
          <isset property="is.kit"/>
      </condition>
      <propertyfile file="build/ml/cluster-nbms-ml.properties">
          <entry key="kit.deps" value="${new.kit.deps}"/>
      </propertyfile>
  </target>

  <target name="create-rpms-proto">
    <mkdir dir="${netbeans.build.dir}/rpms"/>
    <repeat target="create-one-rpm-proto" name="one.cluster.name" values="${clusters.list}" /> 
  </target>
    
  <target name="create-one-rpm-proto">
    <taskdef name="setcluster" classname="org.netbeans.nbbuild.SetCluster" classpath="nbantext.jar"/>
    <loadproperties srcFile="cluster.properties" />
    <loadproperties srcFile="cluster-description.properties" />
    <setcluster cluster="${one.cluster.name}" name="one.cluster.dir" />
    <mkdir dir="${netbeans.build.dir}/rpms"/>
    
    <resolve name="pkg.name" value="${one.cluster.name}.pkg.name"/>
    <resolve name="pkg.version" value="${one.cluster.name}.pkg.version"/>
    <resolve name="pkg.desc" value="${one.cluster.name}.pkg.desc"/>
    <resolve name="pkg.vendor" value="${one.cluster.name}.pkg.vendor"/>
    <resolve name="pkg.email" value="${one.cluster.name}.pkg.email"/>
    <resolve name="pkg.rpm.name" value="${one.cluster.name}.pkg.rpm.name"/>
    <resolve name="pkg.rpm.requires" value="${one.cluster.name}.pkg.rpm.requires"/>
    <resolve name="pkg.rpm.group" value="${one.cluster.name}.pkg.rpm.group"/>
    <resolve name="pkg.rpm.url" value="${one.cluster.name}.pkg.rpm.url"/>
    <resolve name="pkg.rpm.copyright" value="${one.cluster.name}.pkg.rpm.copyright"/>
    <resolve name="pkg.rpm.map" value="${one.cluster.name}.pkg.rpm.map"/>
    <resolve name="pkg.rpm.prefix" value="${one.cluster.name}.pkg.rpm.prefix"/>
    
    <echo file="${netbeans.build.dir}/rpms/${pkg.rpm.name}.spec">
%define global_product_version ${pkg.version}
%define global_product_release 00
%define _prefix ${pkg.rpm.prefix}
Version: %{global_product_version}
Release: %{global_product_release}
Group: ${pkg.rpm.group}
Copyright: ${pkg.rpm.copyright}
Vendor: ${pkg.vendor}
URL: ${pkg.rpm.url}
Prefix: %_prefix
AutoReqProv: no
Name: ${pkg.rpm.name}
Summary: ${pkg.name}
%description 
${pkg.desc}

%files

%erpm_map ${pkg.rpm.map} nb_destdir

%dir ${pkg.rpm.map}

${pkg.rpm.map}/${one.cluster.dir}</echo>
  </target>

  <target name="create-svr4s-proto">
    <mkdir dir="${netbeans.build.dir}/rpms"/>
    <repeat target="create-one-svr4-proto" name="one.cluster.name" values="${clusters.list}" /> 
  </target>

  <target name="create-one-svr4-proto">
    <taskdef name="setcluster" classname="org.netbeans.nbbuild.SetCluster" classpath="nbantext.jar"/>
    <loadproperties srcFile="cluster.properties" />
    <loadproperties srcFile="cluster-description.properties" />
    <setcluster cluster="${one.cluster.name}" name="one.cluster.dir" />
    <mkdir dir="${netbeans.build.dir}/svr4s"/>
    
    <resolve name="pkg.name" value="${one.cluster.name}.pkg.name"/>
    <resolve name="pkg.version" value="${one.cluster.name}.pkg.version"/>
    <resolve name="pkg.desc" value="${one.cluster.name}.pkg.desc"/>
    <resolve name="pkg.vendor" value="${one.cluster.name}.pkg.vendor"/>
    <resolve name="pkg.email" value="${one.cluster.name}.pkg.email"/>
    <resolve name="pkg.svr4.pkg" value="${one.cluster.name}.pkg.svr4.pkg"/>
    <resolve name="pkg.svr4.maxinst" value="${one.cluster.name}.pkg.svr4.maxinst"/>
    <resolve name="pkg.svr4.sunw_pkgvers" value="${one.cluster.name}.pkg.svr4.sunw_pkgvers"/>
    <resolve name="pkg.svr4.hotline" value="${one.cluster.name}.pkg.svr4.hotline"/>
    <resolve name="pkg.svr4.classes" value="${one.cluster.name}.pkg.svr4.classes"/>
    <resolve name="pkg.svr4.basedir" value="${one.cluster.name}.pkg.svr4.basedir"/>
    <resolve name="pkg.svr4.pkginst" value="${one.cluster.name}.pkg.svr4.pkginst"/>
    <resolve name="pkg.svr4.category" value="${one.cluster.name}.pkg.svr4.category"/>
<echo file="${netbeans.build.dir}/svr4s/${pkg.svr4.pkg}.spec">
PKG=${pkg.svr4.pkg}
NAME=${pkg.name}
ARCH=sparc
VERSION=${pkg.version}
MAXINST=${pkg.svr4.maxinst}
CATEGORY=${pkg.svr4.category}
SUNW_PKGVERS=${pkg.svr4.sunw_pkgvers}
DESC=${pkg.desc}
VENDOR=${pkg.vendor}
HOTLINE=${pkg.svr4.hotline}
EMAIL=${pkg.email}
CLASSES=${pkg.svr4.classes}
BASEDIR=${pkg.svr4.basedir}
PKGINST=${pkg.svr4.pkginst}</echo>
  </target>
    
  <target name="sanity-check" depends="testuserdir-delete,sanity-start" description="Test whether the build can start up without problems."/>
    <target name="-testuserdir-delete-init" depends="init">
      <property name="test.user.dir.lock" location="${test.user.dir}/lock"/>
      <available property="app.running" file="${test.user.dir.lock}"/>
    </target>
    <target name="-testuserdir-delete-ok" depends="-testuserdir-delete-init" unless="app.running">
      <delete dir="${test.user.dir}"/>
    </target>
    <target name="-testuserdir-delete-fail" depends="-testuserdir-delete-init" if="app.running">
      <!-- #66799: best to warn about this condition... -->
      <fail>Will not delete ${test.user.dir} because ${test.user.dir.lock} still exists; kill any running process and delete lock file if necessary</fail>
    </target>
  <target name="testuserdir-delete" depends="-testuserdir-delete-ok,-testuserdir-delete-fail" description="Clean temporary testing user directory."/>
  <target name="sanity-start" depends="init,maybe-build-nozip,-jdk-init">
    <mkdir dir="${test.user.dir}"/>
    <echo>Starting the IDE as a sanity check...</echo>
    <echo>WARNING - the sanity-start target is deprecated. Use commit-validation instead.</echo>
    <!-- XXX better would be to scan start log for stacktraces and just show those; -->
    <!-- possibly after filtering for duplicates or something like this. -->
    <!-- Timeout is ten minutes; should be enough for valid start, while preventing -->
    <!-- a deadlock from hanging an automated build: -->
    <exec osfamily="windows" executable="${netbeans.dest.dir}/bin/nb.exe" failonerror="yes" timeout="600000">
      <arg value="--jdkhome"/>
      <arg file="${nbjdk.home}"/>
      <arg value="--userdir"/>
      <arg file="${test.user.dir}"/>
      <arg line="${sanitystart.args}"/>
    </exec>
    <exec osfamily="unix" dir="." executable="sh" failonerror="yes" timeout="600000">
      <arg value="${netbeans.dest.dir}/bin/netbeans"/>
      <arg value="--jdkhome"/>
      <arg file="${nbjdk.home}"/>
      <arg value="--userdir"/>
      <arg file="${test.user.dir}"/>
      <arg line="${sanitystart.args}"/>
    </exec>
    <echo>Finished starting the IDE, pay attention to any reported errors.</echo>
  </target>

  <target name="check-for-build"  >
    <available property="have-build" file="${netbeans.dest.dir}/bin/netbeans"/>
  </target>
  <target name="maybe-build-nozip" depends="check-for-build" unless="have-build">
    <ant dir="${basedir}" target="build-nozip"/>
  </target>

  <target name="nozip-check" 
          depends="build-nozip,sanity-check">
    <echo>WARNING - the nozip-check target is deprecated. Use all-nozip instead.</echo>
  </target>

  <target name="tryme-setup-debug-args" if="debug.port" >
    <property name="debug.pause" value="n" />
    <property name="debug.server" value="y" />
    
    <property name="tryme.debug.args" value="-J-Xdebug -J-Xnoagent -J-Xrunjdwp:transport=dt_socket,suspend=${debug.pause},server=${debug.server},address=${debug.port}" />
  </target>
          
  <target name="tryme-debug" depends="-jdk-presetdef-nbjpdastart" description="Start IDE in debugger. May only be called from within IDE.">
    <nbjpdastart name="NetBeans" addressproperty="debug.port" transport="dt_socket">
      <classpath>
        <fileset dir="${netbeans.dest.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </nbjpdastart>
    <property name="debug.server" value="n"/>
    <antcall target="tryme"/>
  </target>
    
  <target name="tryme-profile" depends="-jdk-presetdef-nbprofiledirect" description="Start IDE in debugger. May only be called from within IDE.">
    <property name="profiler.roots.path" value="profiler.roots.all" />
    <fileset id="profiler.roots.all" dir="${netbeans.dest.dir}">
        <include name="**/*.jar"/>
    </fileset>
    <nbprofiledirect 
        jvmargsprefix="-J" 
        jvmargsproperty="profiler.jvmargs" 
        mainclass="org.netbeans.Main"
    >
      <classpath>
        <fileset dir="${netbeans.dest.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <rootspath>
          <fileset refid="${profiler.roots.path}" />
      </rootspath>
    </nbprofiledirect>
    
    <antcall target="tryme">
        <param name="tryme.args" value="${profiler.jvmargs}"/>
    </antcall>
  </target>
  
  <target name="tryme" depends="-load-build-properties,tryme-setup-debug-args,-jdk-init"
          description="Try running the IDE interactively.
It is possible to use -Ddebug.port=3234 -Ddebug.pause=y to start the system in debug mode" 
   >
    <property name="tryme.debug.args" value="" />
    <property environment="env"/>
    <condition property="run.env.display" value="${env.NBDISPLAY}" else="${env.DISPLAY}">
	<isset property="env.NBDISPLAY"/>
    </condition>
    <exec osfamily="windows" executable="${netbeans.dest.dir}/bin/nb.exe" failonerror="yes">
      <arg value="--jdkhome"/>
      <arg file="${nbjdk.home}"/>
      <arg value="--userdir"/>
      <arg file="${test.user.dir}"/>
      <arg line="${tryme.args}"/>
      <arg line="${tryme.debug.args}" />
    </exec>
    <exec osfamily="unix" dir="." executable="sh" failonerror="yes">
      <arg value="${netbeans.dest.dir}/bin/netbeans"/>
      <arg value="--jdkhome"/>
      <arg file="${nbjdk.home}"/>
      <arg value="--userdir"/>
      <arg file="${test.user.dir}"/>
      <arg line="${tryme.args}"/>
      <arg line="${tryme.debug.args}" />
      <env key="DISPLAY" value="${run.env.display}"/>
    </exec>
  </target>
  
  <target name="all-l10n-kits" depends="l10n-kit">
  </target>
  
  <target name="l10n-kit" depends="bootstrap,set-buildnumber,init-tasks" description="Builds the L10N kit">
    <taskdef name="l10n" classname="org.netbeans.nbbuild.L10nTask"
             classpath="nbantext.jar"/>
    <mkdir dir="build"/>
    <property name="l10n.kit" location="build/l10n.zip"/>
    <property name="nbms.location" location="nbms"/>
    <l10n nbmsdir="${nbms.location}" tmpdir="tmp" patternsFile="l10n.patterns" kitFile="${l10n.kit}"/>
  </target>
  
  <target name="hg-l10n-kit">
    <property name="l10n.kit" location="build/l10n.zip"/>
    <mkdir dir="build"/>
    <zip destfile="${l10n.kit}">
        <fileset dir="${nb_all}" includesfile="${nb_all}/installer/l10n.list"/>
        <fileset dir="${nb_all}" includesfile="${nb_all}/nbi/l10n.list"/>
        <fileset dir="${nb_all}" includesfile="${nb_all}/ide.branding/l10n.list"/>
    </zip>
  </target>

    <target name="clean-untracked-files" depends="bootstrap" description="Removes files from clusters which are not listed as belonging to any NBM.">
        <taskdef name="ducf" classname="org.netbeans.nbbuild.DeleteUnreferencedClusterFiles" classpath="nbantext.jar"/>
        <mkdir dir="build"/>
        <ducf report="build/ducf.xml">
            <clusters dir="${netbeans.dest.dir}">
                <include name="*"/>
            </clusters>
            <selection excludes="build_info"/>
        </ducf>
    </target>

  <target name="-cleanall" depends="init-module-list,init-tasks">
    <taskdef name="cleanall" classname="org.netbeans.nbbuild.CleanAll" classpath="nbantext.jar"/>
    <cleanall topdir=".." 
              modules="${allmodules}" 
              targetname="clean"
              resolvedependencies="${resolve.clean.dependencies}"
              deptargetprefix="all-"
              failonerror="${stop.when.clean.error}" />
  </target>

  <target name="clean" depends="bootstrap" description="Clean everything possible.">
      <taskdef name="try-else" classname="org.netbeans.nbbuild.TryElse" classpath="nbantext.jar"/>
      <try-else first="-hg-clean" second="-real-clean"/>
  </target>

  <target name="-clean-external">
    <subant target="clean">
      <fileset dir="..">
        <include name="*/external/build.xml"/>
        <include name="contrib/*/external/build.xml"/>
      </fileset>
    </subant>
    <taskdef name="downloadbinaries" classname="org.netbeans.nbbuild.extlibs.DownloadBinaries" classpath="nbantext.jar"/>
    <downloadbinaries cache="${binaries.cache}" server="${binaries.server}" clean="true">
        <manifest dir="${nb_all}">
            <include name="*/external/binaries-list"/>
            <include name="contrib/*/external/binaries-list"/>
        </manifest>
    </downloadbinaries>
  </target>

  <target name="-real-clean" depends="-cleanall,localclean,-clean-external">
    <echo message="Cleaning old builds..."/>
    <delete>
      <fileset dir=".">
        <include name="NetBeans-*.log"/>
        <include name="NetBeans-*.zip"/>
        <include name="nbproject/private/*.ser"/>
      </fileset>
    </delete>
    <!-- This step must be last: -->
    <echo message="Cleaning NetBeans-specific Ant extensions..."/>
    <delete file="nbantext.jar" quiet="true"/>
    <delete dir="build/antclasses"/>
  </target>

  <target name="clean-cluster-flags" unless="do-not-rebuild-clusters">
    <mkdir dir="${netbeans.dest.dir}"/>
    <delete includeEmptyDirs="true">
      <fileset dir="${netbeans.dest.dir}">
        <include name="*.built"/>
      </fileset>
    </delete>
  </target>

  <target name="localclean" depends="clean-cluster-flags">
    <delete dir="${test.user.dir}"/>
    <delete dir="build"/>
    <delete file="moduledefs-tmp.properties"/>
    <delete dir="nbms" />
    <delete dir="${netbeans.dest.dir}"/>
  </target>

  <target name="-hg-clean">
    <fail message="Not running in a Mercurial checkout.">
      <condition>
        <not>
          <available type="dir" file="../.hg"/>
        </not>
      </condition>
    </fail>
    <taskdef name="hgexec" classname="org.netbeans.nbbuild.HgExec" classpath="nbantext.jar"/>
    <antcall target="-do-hg-clean">
      <!-- <include name="."/> does not seem to work in a dirset -->
      <param name="basedir" location=".."/>
    </antcall>
    <subant target="-do-hg-clean" genericantfile="build.xml">
      <dirset dir="..">
        <include name="contrib"/>
        <include name="misc"/>
      </dirset>
    </subant>
  </target>
  <target name="-do-hg-clean">
    <echo>Cleaning untracked files in ${basedir}...</echo>
    <hgexec failonerror="yes" outputproperty="hg.unknown.files">
      <arg value="--cwd"/>
      <arg file="."/>
      <arg value="--config"/>
      <arg value="defaults.status="/>
      <arg value="status"/>
      <arg value="--unknown"/>
      <arg value="--no-status"/>
    </hgexec>
    <fail message="Will not run clean; checkout contains unknown and not ignored files (did you forget to hg add?):&#10;${hg.unknown.files}">
        <condition>
            <not>
                <equals arg1="${hg.unknown.files}" arg2=""/>
            </not>
        </condition>
    </fail>
    <hgexec failonerror="yes">
      <arg value="--cwd"/>
      <arg file="."/>
      <arg value="--config"/>
      <arg value="extensions.purge="/>
      <arg value="clean"/>
      <arg value="--all"/>
      <arg value="--exclude"/>
      <!-- Do not use **/nbproject/private/ as this will match some test/{results,work} dirs: -->
      <arg value="glob:{*/nbproject/private/**,*/*/nbproject/private/**,**/user.build.properties,nbbuild/misc/build-site-local.sh}"/>
    </hgexec>
  </target>

  <target name="rebuild-cluster" depends="init" description="Builds only one cluster with dependencies ; takes e.g. '-Drebuild.cluster.name=nb.cluster.visualweb' as parameter">
    <delete file="netbeans/${rebuild.cluster.name}.built" failonerror="false"/>
    <fail unless="${rebuild.cluster.name}" message="You need to specify e.g.: -Drebuild.cluster.name=nb.cluster.visualweb"/>
    <antcall target="build-one-cluster">
      <param name="one.cluster.name" value="${rebuild.cluster.name}"/>
    </antcall>
  </target>

  <target name="build-vw" depends="init" description="Build only the Visual Web modules.">
    <delete file="netbeans/nb.cluster.visualweb.built" failonerror="false"/>
    <antcall target="build-one-cluster">
      <param name="one.cluster.name" value="nb.cluster.visualweb"/>
      <param name="nb.cluster.visualweb-hasNoDependencies" value="true"/>
    </antcall>
  </target>
  
    <target name="localtest" depends="bootstrap">
        <mkdir dir="build/test/unit/classes"/>
        <path id="test.cp">
            <pathelement path="../libs.junit4/external/junit-4.5.jar:netbeans/harness/modules/org-netbeans-modules-nbjunit.jar:${ant.core.lib}:nbantext.jar"/>
        </path>
        <javac srcdir="test/unit/src" destdir="build/test/unit/classes" debug="true" source="1.5">
            <classpath refid="test.cp"/>
        </javac>
        <copy todir="build/test/unit/classes">
            <fileset dir="test/unit/src" excludes="**/*.java"/>
        </copy>
        <mkdir dir="build/test/unit/results"/>
        <property name="includes" value="**/*Test"/>
        <junit showoutput="true" fork="true" tempdir="build/test/unit/results">
            <batchtest todir="build/test/unit/results">
                <fileset dir="build/test/unit/classes">
                    <include name="${includes}.class"/>
                </fileset>
            </batchtest>
            <classpath>
                <pathelement location="build/test/unit/classes"/>
                <path refid="test.cp"/>
                <pathelement location="netbeans/harness/modules/org-netbeans-insane.jar"/>
                <fileset dir="../o.apache.tools.ant.module/external/lib" includes="*.jar"/>
            </classpath>
            <sysproperty key="nb_all" file=".."/>
            <sysproperty key="netbeans.dest.dir.work" file="${netbeans.dest.dir}"/>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
        </junit>
    </target>
  <target name="localtest-single-nb-debug" depends="bootstrap,-jdk-presetdef-nbjpdastart">
      <fail>Not implemented</fail>
  </target>

  <target name="clean-cluster" description="Clean only one cluster - takes clean.cluster.name as parameters">
    <fail message="specify -Dclean.cluster.name= property" unless="clean.cluster.name"/>
    <resolve name="modules.to.clean" value="${clean.cluster.name}"/>
    <antcall target="cleanall" inheritAll="false">
      <param name="allmodules" value="${modules.to.clean}"/>
    </antcall>
    <delete file="netbeans/${clean.cluster.name}.built" failonerror="false"/>
  </target>


  <target name="clean-vw" depends="init" description="Clean only Visual Web modules">
    <antcall target="cleanall" inheritAll="false">
      <param name="allmodules" value="${nb.cluster.visualweb}"/>
    </antcall>
  </target>


<!-- This section contains properties and targets used to build -->
<!-- Solaris packages.                                          -->

  <property name="solpkg-pkgproto" value="pkgproto"/>
  <property name="solpkg-pkgmk" value="pkgmk"/>
  <property name="solpkg-proto-file" value="prototype"/>
  <property name="solpkg-actual-dir" value="to-be-specified"/>
  <property name="solpkg-pkg-dir" value="to-be-specified"/>
  <property name="solpkg-pkg-dest-dir" value="to-be-specified"/>

  <!-- You can run this target to create the prototype file and create -->
  <!-- the package, or if you need to modify the prototype file before -->
  <!-- building the package, you can run the two subtargets            -->
  <!-- separately.                                                     -->
  <target name="solpkg-build" depends="solpkg-pkgproto,solpkg-pkgmk"
          description="Generate a prototype file and create a Solaris package."/>

  <!-- This creates the pkg prototype file for a given directory and -->
  <!-- its files.                                                    -->
  <target name="solpkg-pkgproto"
          description="Generate a prototype file.">
    <exec executable="rm" failonerror="yes">
      <arg value="-rf"/>
      <arg value="${solpkg-proto-file}"/>
    </exec>
    <exec executable="${solpkg-pkgproto}" output="${solpkg-proto-file}" 
          failonerror="yes">
      <arg value="${solpkg-actual-dir}=${solpkg-pkg-dir}"/>
    </exec>
  </target>

  <!-- This creates the Solaris pkg for a given prototype file, pkginfo -->
  <!-- file, and directory.                                             -->
  <target name="solpkg-pkgmk"
          description="Create a Solaris package.">
    <exec executable="${solpkg-pkgmk}" failonerror="yes">
      <arg value="-o"/>
      <arg value="-f"/>
      <arg value="${solpkg-proto-file}"/>
      <arg value="-r"/>
      <arg value="${solpkg-actual-dir}"/>
      <arg value="-d"/>
      <arg value="${solpkg-pkg-dest-dir}"/>
    </exec>
  </target>

<!-- End of Solaris package section. -->


<!-- Localized builds -->
  <target name="all-dutch" depends="set-dutch-locale,all"/>
  <target name="all-russian" depends="set-russian-locale,all"/>
  <target name="all-french" depends="set-french-locale,all"/>
  <target name="all-ja-zh" depends="set-ja-zh_CN-locales,all"/>
  
  <target name="set-ja-zh_CN-locales">
        <property name="locales" value="ja,zh_CN"/>
        <property name="locjar.locales" value="${locales}"/>
        <property name="locmakenbm.locales"   value="${locales}"/>
        <property name="locjhindexer.locales" value="${locales}"/>
        <property name="localized.build.locales" value="${locales}"/>
  </target>
  
  <target name="set-dutch-locale">
        <property name="locales" value="nl"/>
        <property name="locjar.locales" value="${locales}"/>
        <property name="locmakenbm.locales"   value="${locales}"/>
        <property name="locjhindexer.locales" value="${locales}"/>
        <property name="localized.build.locales" value="${locales}"/>
  </target>

  <target name="set-russian-locale">
        <property name="locales" value="ru"/>
        <property name="locjar.locales" value="${locales}"/>
        <property name="locmakenbm.locales"   value="${locales}"/>
        <property name="locjhindexer.locales" value="${locales}"/>
        <property name="localized.build.locales" value="${locales}"/>
  </target>

  <target name="set-french-locale">
        <property name="locales" value="fr"/>
        <property name="locjar.locales" value="${locales}"/>
        <property name="locmakenbm.locales"   value="${locales}"/>
        <property name="locjhindexer.locales" value="${locales}"/>
        <property name="localized.build.locales" value="${locales}"/>
  </target>
  
<!-- end of localized builds -->


  <target name="print-selected-modules" depends="init-module-list" description="Prints list of modules to build in selected moduleconfig.">
    <taskdef name="resolvelist" classname="org.netbeans.nbbuild.ResolveList" classpath="nbantext.jar"/>
    <resolvelist name="modules.for.selected.list" list="${nb.clusters.list}"/>
    <echo message="modules=${modules.for.selected.list}"/>
  </target>

  <target name="check-commit-validation">
    <condition property="run.validation" >
        <and>
          <or>
            <not>
              <isset property="nb.run.validation"/>
            </not>
            <istrue value="${nb.run.validation}"/>
          </or>
        </and>
    </condition>
  </target>
  
  <target 
    name="unit-validation" 
    description="Invokes all existing unit tests in all IDE modules.
 Useful when one wants to deeply verify that his changes
 work"
  >
    <ant dir="../xtest/instance" target="runtests" >
      <property name="xtest.config" value="unit-nb" />
    </ant>
  </target>
  
  <target 
    name="commit-validation" 
    depends="commitValidation,no-commit-validation" 
    description="Runs tests to validate IDE before commit."
  />

  <target name="all-commitValidation" description="dummy target for build error recognition facility"/>
  
  <!-- keep this target name at least for a while for backward compat -jglick -->
  <target name="commitValidation" depends="all-commitValidation,check-commit-validation" if="run.validation">
    <property name="build.test.results.dir" location="build/test/results"/>
    <mkdir dir="${build.test.results.dir}"/>
    <subant target="test" >
        <property name="test.config" value="commit"/>
        <property name="continue.after.failing.tests" value="true"/>
        <property name="build.test.unit.results.dir" location="${build.test.results.dir}"/>
        <property name="build.test.qa-functional.results.dir" location="${build.test.results.dir}"/>
        <dirset dir="..">
            <include name="o.n.core"/>
            <include name="core.windows"/>
            <include name="javahelp"/>
            <include name="ide.kit"/>
        </dirset>
    </subant>
    <pathconvert property="failed.tests" pathsep="${line.separator}">
        <fileset dir="${build.test.results.dir}">
            <include name="TEST-*.xml"/>
            <not>
                <and>
                    <contains text='errors="0"'/>
                    <contains text='failures="0"'/>
                </and>
            </not>
        </fileset>
    </pathconvert>
    <junitreport todir="${build.test.results.dir}">
            <fileset dir="${build.test.results.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.test.results.dir}/html"/>
    </junitreport>
    <fail message="There were failed tests:${line.separator}${failed.tests} ${line.separator}${line.separator}Test report html: ${build.test.results.dir}/html/index.html">
        <condition>
            <not>
                <or>
                    <equals arg1="${failed.tests}" arg2=""/>
                    <equals arg1="${continue.after.failing.tests}" arg2="true"/>
                </or>
            </not>
        </condition>
    </fail>
  </target>

  <target name="no-commit-validation" depends="check-commit-validation" unless="run.validation">
    <echo>
        *** WARNING ***
        You may not commit any changes into the repository without running the commit validation test suite.
        For more information: http://www.netbeans.org/community/guidelines/commit.html
    </echo>
  </target>

    <target name="verify-libs-and-licenses" depends="bootstrap" description="Verify the contents of third-party libraries and licenses.">
        <taskdef name="verifylibsandlicenses" classname="org.netbeans.nbbuild.extlibs.VerifyLibsAndLicenses" classpath="nbantext.jar"/>
        <mkdir dir="build"/>
        <verifylibsandlicenses report="build/verifylibsandlicenses.xml" nball=".."/>
    </target>

    <target name="create-license-summary" depends="bootstrap" description="Create a summary of the licenses used by libraries in the build.">
        <taskdef name="createlicensesummary" classname="org.netbeans.nbbuild.extlibs.CreateLicenseSummary" classpath="nbantext.jar"/>
        <mkdir dir="build"/>
        <createlicensesummary report="build/createlicensesummary.xml" nball=".." build="${netbeans.dest.dir}" summary="${netbeans.dest.dir}/THIRDPARTYLICENSE-generated.txt"/>
    </target>

  <target name="sanity-build-from-source-pkg" depends="build-source">
    <available file="${netbeans.build.dir}/${cluster.name}-src-${buildnum}.zip"
               property="pkg.available"/>
    <fail message="Source package ${netbeans.build.dir}/${cluster.name}-src-${buildnum}.zip not available" unless="pkg.available"/>
    <delete dir="testbuild"/>
    <mkdir dir="testbuild"/>
    <unzip dest="testbuild" src="${netbeans.build.dir}/${cluster.name}-src-${buildnum}.zip"/>
    <property name="one.cluster.name" value="${cluster.name}"/>
    <propertyset id="sanity-build">
      <propertyref name="one.cluster.name"/>
    </propertyset>
    <echoproperties destfile="testbuild/nbbuild/user.properties">
        <propertyset refid="sanity-build"/>
    </echoproperties>

    <!-- it should call build of the refered cluster and not just hardcoded platform -->
    <ant antfile="testbuild/nbbuild/build.xml" inheritall="false" target="build-one-cluster">
      <property file="testbuild/nbbuild/user.properties"/>
    </ant>
    <delete dir="testbuild"/>
  </target>

  <target name="build-source"
    depends="init,set-buildnumber"
    description="Packages sources needed to compile given by cluster.name (can be specified by -Dcluster.name=nb.cluster.platform"
    if="cluster.name"
  >
    <property name="buildnum" value="dev-${buildnumber}"/>
    <echo message="Packaging sources of ${cluster.name} modules"/>
    <resolve name="cluster-modules" value="${cluster.name}"/>
    <resolve name="harness-modules" value="nb.cluster.harness"/>
    
    <mkdir dir="${netbeans.build.dir}"/>
    <dirset id="source.dirset" dir="${nb_all}" includes="${cluster-modules},${harness-modules},ide,nbbuild"/>
    <pathconvert property="source.dirs" pathsep="," refid="source.dirset">
      <regexpmapper from="${nb_all}/(.*)$" to="\1/**/*" handledirsep="yes"/>
    </pathconvert>
    <zip zipfile="${netbeans.build.dir}/${cluster.name}-src-${buildnum}.zip" duplicate="preserve">
      <zipfileset dir="${nb_all}" includes="${source.dirs}">
          <exclude name="*/build/**/*"/>
          <exclude name="nbbuild/netbeans/**"/>
      </zipfileset>
    </zip>
  </target>

  <target name="build-source-config"
    depends="init,set-buildnumber"
    description="Packages sources needed to compile one cluster.config">
    <property name="buildnum" value="${buildnumber}"/>
    <echo message="Packaging sources of ${cluster.config} modules"/>

    <taskdef name="resolvelist" classname="org.netbeans.nbbuild.ResolveList" classpath="nbantext.jar"/>
    <resolvelist name="modules.for.checkout.list" list="${nb.clusters.list}"/>
    <resolve name="harness-modules" value="nb.cluster.harness"/>
    
    <mkdir dir="${netbeans.build.dir}"/>
    <dirset id="source.dirset" dir="${nb_all}" includes="${modules.for.checkout.list},${harness-modules},nbbuild,ide"/>
    <pathconvert property="source.dirs" pathsep="," refid="source.dirset">
      <regexpmapper from="${nb_all}/(.*)$" to="\1/**/*" handledirsep="yes"/>
    </pathconvert>
    <zip zipfile="${netbeans.build.dir}/${cluster.config}-src-${buildnum}.zip" duplicate="preserve">
      <zipfileset dir="${nb_all}" includes="${source.dirs}">
          <exclude name="*/build/**/*"/>
          <exclude name="nbbuild/netbeans/**"/>
      </zipfileset>
    </zip>
  </target>

  <target name="generate-golden-files-init" depends="init,bootstrap" >
    <property name="generated.files.dir" location="build/generated" />
    <mkdir dir="${generated.files.dir}" />
  </target>
  <target name="generate-golden-files" depends="generate-golden-files-init" >
    <property name="deps.max.friends" value="40"/> <!-- so high because of xml.wsdl.bindingsupport.api (21), gsf.api (30) -->
    
    <taskdef name="deps" classname="org.netbeans.nbbuild.ModuleDependencies" classpath="nbantext.jar"/>
    
    <deps>
      <!-- XXX this is ridiculous; task ought to figure out clusters from project properties! -->
      <input name="platform" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.platform.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="ide" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.ide.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="gsf" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.gsf.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="java" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.java.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="websvccommon" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.websvccommon.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="apisupport" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.apisupport.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="j2ee" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.j2ee.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="nb" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.nb.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="harness" >
        <jars dir="${netbeans.dest.dir}" >
          <include name="${nb.cluster.harness.dir}/**/*.jar" />
        </jars>
      </input>
      <input name="mobility">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.mobility.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="profiler">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.profiler.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="ruby">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.ruby.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="soa">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.soa.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="identity">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.identity.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="uml">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.uml.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="visualweb">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.visualweb.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="xml">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.xml.dir}/**/*.jar"/>
        </jars>
      </input>
      <input name="cnd">
        <jars dir="${netbeans.dest.dir}">
          <include name="${nb.cluster.cnd.dir}/**/*.jar"/>
        </jars>
      </input>
      
      <output type="group-dependencies" file="${generated.files.dir}/cluster-deps.txt" />
      <output type="group-implementation-dependencies" file="${generated.files.dir}/cluster-impl-deps.txt" />
      <output type="modules" file="${generated.files.dir}/modules.txt" />
      <output type="dependencies" file="${generated.files.dir}/deps.txt" />
      <output type="implementation-dependencies" file="${generated.files.dir}/impl-deps.txt" />
      <output type="public-packages" file="${generated.files.dir}/public-packages.txt" />
      <output type="shared-packages" file="${generated.files.dir}/shared-packages.txt" />
      <output type="friend-packages" file="${generated.files.dir}/friend-packages.txt" />
      <output type="group-friend-packages" file="${generated.files.dir}/group-friend-packages.txt" />
      <output type="kits" file="${generated.files.dir}/kits.txt" />
      <output type="kit-dependencies" file="${generated.files.dir}/kit-deps.txt" />
    </deps>

    <taskdef name="test-deps" classname="org.netbeans.nbbuild.ModuleTestDependencies" classpath="nbantext.jar"/>
    <test-deps output="${generated.files.dir}/test-deps.txt"/>
  </target>
  
  <target name="generate-files-layout" depends="generate-golden-files-init" >
    
    <property name="check.files.layout.generated" location="${generated.files.dir}/files-layout.txt" />
  
    <property name="check-file-layout-root" location="${netbeans.dest.dir}" />
    <fileset id="check-file-layout" dir="${check-file-layout-root}" casesensitive="yes" >
        <!-- XXX can't we just exclude the handful of things we do not care about? -->
        <include name="platform*/**" />
        <include name="ide*/**" />
        <include name="java*/**" />
        <include name="apisupport*/**" />
        <include name="enterprise*/**" />
        <include name="nb*/**" />
        <include name="harness*/**" />
        <include name="profiler*/"/>
        <include name="uml*/"/>
        <include name="visualweb*/"/>
        <include name="ruby*/"/>
        <include name="mobility*/"/>
        <exclude name="mobility*/emulators-inst/wtk22_*.zip"/> <!-- XXX #110820 -->
        <include name="soa*/"/>
        <include name="identity*/"/>
        <include name="xml*/"/>
        <include name="cnd*/"/>
        <exclude name="*.built"/>
    </fileset>
    
    <pathconvert property="check-file-layout" refid="check-file-layout" dirsep="/" pathsep="," >
        <map from="${check-file-layout-root}${file.separator}" to="" />
    </pathconvert>
    <echo message="${check-file-layout}${line.separator}" file="${check.files.layout.generated}" />
    <replace file="${check.files.layout.generated}" token="," value="${line.separator}" />
    <replace file="${check.files.layout.generated}" token="\" value="/" />
  </target>
  

  <target name="check-module-configs" depends="bootstrap" description="Sanity-check build.properties and cluster.properties.">
    <taskdef name="checkmoduleconfigs" classname="org.netbeans.nbbuild.CheckModuleConfigs" classpath="nbantext.jar"/>
    <checkmoduleconfigs nbroot=".."/>
  </target>

  <target name="index-layer-paths" depends="generate-golden-files-init" description="Create index of layer paths.">
      <property name="build" location="netbeans"/>
      <fail message="You must create a build first.">
          <condition>
              <not>
                  <available file="${build}" type="dir"/>
              </not>
          </condition>
      </fail>
      <taskdef name="layerindex" classname="org.netbeans.nbbuild.LayerIndex" classpath="nbantext.jar"/>
      <layerindex output="${generated.files.dir}/layers.txt">
          <modules dir="${build}">
              <include name="**/*.jar"/>
              <exclude name="testtools/"/>
          </modules>
      </layerindex>
  </target>

  <target name="display-l10n-list-matches" description="Show which files are actually matched by an l10n.list in some module.">
    <property name="nbroot" location=".."/>
    <input addproperty="module">Select a top-level module (e.g. "java") to display results for:</input>
    <property name="listfile" location="${nbroot}/${module}/l10n.list"/>
    <echo>${listfile}:1: Matches follow... (click on hyperlinks from IDE!)</echo>
    <echo>(warning: 'exclude' directives not honored here yet)</echo><!-- XXX use filtersets or something to fix -->
    <apply parallel="false" executable="sh">
        <arg value="-c"/>
        <arg value="echo $0:1"/>
        <fileset dir="${nbroot}" includesfile="${listfile}"/>
    </apply>
  </target>
  
  <target name="increment-spec-versions" depends="bootstrap,init-module-list" description="Increment all standard module specification versions. Pass -Dbranch=true if not on the trunk.">
    <property name="branch" value="false"/>
    <taskdef name="incrspecvers" classname="org.netbeans.nbbuild.IncrementSpecificationVersions" classpath="nbantext.jar"/>
    <incrspecvers nbroot=".." modules="${allmodules}" branch="${branch}"/>
  </target>

  <target name="build-test-dist" depends="bootstrap,init-module-list,init-tasks" description="Built test distribution">
      <!-- if is 'false' it will ignore compilation error in subant  -->
     <property name= "test.fail.on.error" value="true"/>
     <pathconvert property="modules.fullpath" >
          <path>
              <dirset dir="${nb_all}" includes="${allmodules}"/>
          </path>
          <mapper type="identity" />
      </pathconvert>
      <sortsuitemodules unsortedmodules="${modules.fullpath}" sortedmodulesproperty="modules.sorted" sorttests="true"/>
      <mkdir dir="build"/>
      <taskdef name="subant-junit" classname="org.netbeans.nbbuild.SubAntJUnitReport" classpath="nbantext.jar"/>
      <subant-junit buildpath="${modules.sorted}" target="test-build" failonerror="${test.fail.on.error}" report="build/build-all-tests.xml"/>
      <!-- copy templates -->
      <copy todir="${test.dist.dir}">
          <fileset dir="testdist/release"/>
      </copy>
      <mkdir dir="build/testdistclasses"/>
      <javac srcdir="testdist/src" destdir="build/testdistclasses" deprecation="true" debug="${build.compiler.debug}" source="1.5" target="1.5">
          <classpath>
              <pathelement location="${ant.core.lib}"/>
          </classpath>
          <compilerarg line="-Xlint -Xlint:-serial"/>
      </javac>
      <jar jarfile="${test.dist.dir}/tasks.jar">
          <fileset dir="build/testdistclasses"/>
      </jar>
      <zip basedir="${test.dist.dir}" destfile="build/testdist.zip"/>
  </target>      

  <target name="commit-validation-vw" description="Run the Visual Web sanity tests">
      <ant dir="../visualweb.kit/test" target="build-test-tools" inheritall="true"/>
      <ant dir="../visualweb.kit/test" target="commit-validation" inheritall="false"/> 
  </target>

  <target name="sigtests-init" depends="bootstrap">
    <taskdef name="resolvelist" classname="org.netbeans.nbbuild.ResolveList" classpath="nbantext.jar"/>
    <resolvelist name="modules.for.sigtests.list" list="${nb.clusters.list}"/>

    <pathconvert property="modules.fullpath" >
        <path>
            <dirset dir="${nb_all}" includes="${modules.for.sigtests.list}" />
        </path>
        <mapper type="identity" />
    </pathconvert>
  </target>
  
  <target name="gen-sigtests" depends="sigtests-init"
    description="Generates snaphost of API of all modules"
  >
    <echo message="Generating signature files for ${cluster.config} modules"/>
    <property name="sigtest.basedir" location="build/sigtest/snapshot"/>
    <property name="sigtest.output.dir" location="build/sigtest/generate"/>
    
    <subant target="gen-sigtest" buildpath="${modules.fullpath}" failonerror="false">
      <property name="ant.core.lib" value="${ant.core.lib}"/>
      <property name="sigtest.basedir" value="${sigtest.basedir}"/>
      <property name="sigtest.output.dir" location="${sigtest.output.dir}"/>
    </subant>
  </target>

  <target name="gen-sigtests-release" depends="bootstrap"
    description="Generates signature files into stable API modules directories"
  >
    <echo message="Generating signature files into stable API modules directories"/>

    <pathconvert property="modules.fullpath" >
        <path>
            <dirset dir="${nb_all}" includes="${config.javadoc.stable}" />
        </path>
        <mapper type="identity" />
    </pathconvert>
    
    <subant target="gen-sigtest" buildpath="${modules.fullpath}">
      <property name="ant.core.lib" value="${ant.core.lib}"/>
    </subant>
  </target>
  
  <target name="check-sigtests-release" depends="bootstrap"
    description="Checks signature files of stable API modules"
  >
    <echo message="Checking signature files of stable API modules"/>
    
    <property name="sigtest.output.dir" location="build/sigtest/check-release"/>
    <property name="fail.on.error" value="true"/>
    <delete dir="${sigtest.output.dir}"/>
    <mkdir dir="${sigtest.output.dir}"/>
    <pathconvert property="modules.fullpath" >
        <path>
            <dirset dir="${nb_all}" includes="${config.javadoc.stable}" />
        </path>
        <mapper type="identity" />
    </pathconvert>
    <subant target="check-sigtest" buildpath="${modules.fullpath}" failonerror="${fail.on.error}">
        <property name="sigtest.output.dir" value="${sigtest.output.dir}"/>
        <property name="ant.core.lib" value="${ant.core.lib}"/>
    </subant>
  </target>

  <target name="check-sigtests">
    <echo message="Checking signature files for ${cluster.config} modules"/>
    <property name="sigtest.output.dir" location="build/sigtest/check-snapshot"/>
    <antcall target="-do-check-sigtests">
        <param name="sigtest.check.type" value="strictcheck"/>
        <param name="sigtest.output.dir" value="${sigtest.output.dir}"/>
    </antcall>
    <junitreport todir="${sigtest.output.dir}">
        <fileset dir="${sigtest.output.dir}">
            <include name="*.xml"/>
        </fileset>
        <report todir="${sigtest.output.dir}/html" format="frames"/>
    </junitreport>
    <echo message="Report generated to ${sigtest.output.dir}/html/index.html"/>
  </target>
  
  <target name="-do-check-sigtests" depends="sigtests-init">
    <fail unless="sigtest.check.type"/>
    <fail unless="sigtest.output.dir"/>

    <property name="sigtest.basedir" location="build/sigtest/snapshot"/>
    
    <mkdir dir="${sigtest.basedir}"/>
    <delete dir="${sigtest.output.dir}"/>
    <mkdir dir="${sigtest.output.dir}"/>
    <subant target="check-sigtest" buildpath="${modules.fullpath}" failonerror="false">
        <property name="sigtest.output.dir" value="${sigtest.output.dir}"/>
        <property name="ant.core.lib" value="${ant.core.lib}"/>
        <property name="sigtest.basedir" value="${sigtest.basedir}"/>
    </subant>
  </target>

  <target name="findbugs">
    <echo message="Running findbugs for ${cluster.config} modules"/>
    <taskdef name="resolvelist" classname="org.netbeans.nbbuild.ResolveList" classpath="nbantext.jar"/>
    <resolvelist name="modules.for.findbugs.list" list="${nb.clusters.list}"/>

    <pathconvert property="modules.fullpath" >
        <path>
            <dirset dir="${nb_all}" includes="${modules.for.findbugs.list}" />
        </path>
        <mapper type="identity" />
    </pathconvert>
    <subant target="findbugs" buildpath="${modules.fullpath}"/>
  </target>
  
  <target name="generate-uc-catalog" depends="bootstrap">
    <taskdef name="makeupdatedesc"
         classname="org.netbeans.nbbuild.MakeUpdateDesc"
         classpath="${nb_all}/nbbuild/nbantext.jar"/>
      <property name="nbms.location" location="nbms"/>
      <property name="catalog.file" location="catalog.xml"/>
      <property name="catalog.base.url" value="http://bits.netbeans.org/"/>
<!--      <genau config="ausrc/modules.setup" nbmLocation="${nbms.location}" catalog="${catalog.file}" catalogDeploymentLocation="${catalog.base.url}"/>-->
      <makeupdatedesc desc="${catalog.file}" distbase="${catalog.base.url}" automaticgrouping="true">
          <fileset dir="${nbms.location}">
              <include name="**/*.nbm"/>
          </fileset>
      </makeupdatedesc>
      <gzip src="${catalog.file}" destfile="${catalog.file}.gz"/>
  </target>

</project>
