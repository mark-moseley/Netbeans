/*
 * __NAME__.java
 *
 * Created on __DATE__, __TIME__
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package Templates.Classes;

import java.io.IOException;
import java.net.URLEncoder;
import org.netbeans.saas.RestConnection;
import org.netbeans.saas.RestResponse;

/**
 * GoogleMap Resource
 *
 * @author __USER__
 */
public class __NAME__ {
    
    /**
     * Returns HTML text to access GoogleMap.
     * @param apiKey.
     * @param address - address string to generate map for.
     * @param zoom.
     */
    public static RestResponse getGoogleMap(String key, String address, Integer zoom) throws IOException {
        try {
            String encoded = URLEncoder.encode(address, "UTF-8");
            GeoCoder coder = new GeoCoder(encoded, key);
            GeoCode code = coder.invoke();

            String mapRep =
                    "<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'\n"+
                    "  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'>\n"+
                    "<html xmlns='http://www.w3.org/1999/xhtml'>\n"+
                    "  <head>\n"+
                    "    <meta http-equiv='content-type' content='text/html; charset=utf-8'/>\n"+
                    "    <title>Google Maps JavaScript API Example</title>\n"+
                    "    <script src='http://maps.google.com/maps?file=api&amp;v=2&amp;key="+key+"'\n"+
                    "      type='text/javascript'></script>\n"+
                    "    <script type='text/javascript'>\n"+
                    "    //<![CDATA[\n"+
                    "    function load() {\n"+
                    "      if (GBrowserIsCompatible()) {\n"+
                    "        var map = new GMap2(document.getElementById('map'));\n"+
                    "        var point = new GLatLng("+code.getLatitude()+", "+code.getLongitude()+");\n"+
                    "        map.addControl(new GSmallMapControl());\n"+
                    "        map.addControl(new GMapTypeControl());\n"+
                    "        map.setCenter(point, " + zoom + ");\n"+ 
                    "        var marker = createMarker(point);\n"+
                    "        map.addOverlay(marker);\n"+
                    "        marker.openInfoWindowHtml(\"" + address + "\");\n"+          
                    "      }\n"+
                    "    }\n"+
                    "    function createMarker(point) {\n" +
                    "      var marker = new GMarker(point);\n"+
                    "      GEvent.addListener(marker, \"click\", function() {\n"+
                    "         marker.openInfoWindowHtml(\"" + address + "\");\n"+
                    "      });\n"+
                    "      return marker;\n"+
                    "    }\n"+
                    "    //]]>\n"+
                    "    </script>\n"+
                    "  </head>\n"+
                    "  <body onload='load()' onunload='GUnload()'>\n"+
                    "    <div id='map' style='width: 500px; height: 300px'></div>\n"+
                    "  </body>\n"+
                    "</html>";
             return new RestResponse(mapRep.getBytes());
        } catch (Exception ex) {
            throw new IOException(ex.getMessage());
        }
    }
    
    public static class GeoCoder {
        
        public final static String GEOCODE_URL = "http://maps.google.com/maps/geo";
        private String location;
        private String key;
    
        /** Creates a new instance of GeoCoder */
        public GeoCoder(String location, String key) {
            this.location = location;
            this.key = key;
        }
        
        /**
         *
         * @return geocode
         */
        public GeoCode invoke() throws IOException {
            String[][] params = new String[][] {
                {"q", location},
                {"output", "xml"},
                {"key", key}
            };
            RestConnection cl = new RestConnection(GEOCODE_URL, params);
            RestResponse response = cl.get();
            String codeStr = response.getDataAsString();
            return new GeoCode(codeStr);
        }
    }
    
    public static class GeoCode {
        
        private double longitude ;
        private double latitude;
        
        /** Creates a new instance of GeoCode */
        public GeoCode(String xmlStr) {
            int ts = xmlStr.indexOf("<coordinates>");
            int te = xmlStr.indexOf("</coordinates>");
            String codeStr = "";
            if(ts != -1 && te != -1)
                codeStr = xmlStr.substring(ts+13, te);
            String[] codes = codeStr.split(",");
            if(codes.length>1) {
                this.longitude = Double.parseDouble(codes[0]);
                this.latitude = Double.parseDouble(codes[1]);
            }
        }
        
        /**
         *
         * @return longitude
         */
        public double getLongitude() {
            return this.longitude;
        }
        
        /**
         *
         * @return latitude
         */
        public double getLatitude() {
            return this.latitude;
        }
        
    }    
}
