# This module is part of NetBeans and is open-source.
# You can see http://www.netbeans.org/about/legal/index.html for details.
#
# You may use the binary however you like. The source file license is:
#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.

# Sample ResourceBundle properties file

# Libraries Panel
ADD_PROJECT_BUTTON_TXT=Add Project...
ADD_PROJECT_BUTTON_TT=Add the output from another project to the link line
ADD_PROJECT_BUTTON_MN=A
ADD_STANDARD_LIBRARY_BUTTON_TXT=Add Standard Library...
ADD_STANDARD_LIBRARY_BUTTON_TT=Add a standard library to the link line
ADD_STANDARD_LIBRARY_BUTTON_MN=S
ADD_LIBRARY_BUTTON_TXT=Add Library...
ADD_LIBRARY_BUTTON_TT=Add a library (m, gnome, ...) to the link line
ADD_LIBRARY_BUTTON_MN=L
ADD_LIBRARY_FILE_BUTTON_TXT=Add Library File...
ADD_LIBRARY_FILE_BUTTON_TT=Add a library file (/usr/lib/libodbc.a) to the link line
ADD_LIBRARY_FILE_BUTTON_MN=B
ADD_OPTION_BUTTON_TXT=Add Option...
ADD_OPTION_BUTTON_TT=Add an option to the link line
ADD_OPTION_BUTTON_MN=O
DOWN_OPTION_BUTTON_MN=w

ADD_PROJECT_DIALOG_TITLE=Add Project
ADD_PROJECT_DIALOG_AD=Add Project Dialog
ADD_BUTTON_TXT=Add Project
SELECT_STATNDARD_LIBRARY_DIALOG_TITLE=Select Standard Library
SELECT_LIBRARY_CHOOSER_TITLE=Select Library
SELECT_LIBRARY_FILE_CHOOSER_TITLE=Select Library File
SELECT_CHOOSER_BUTTON=Select
SELECT_OPTION_DIALOG_TITLE=Select Option
LIBRARIES_AND_OPTIONS_TXT=Libraries and Options:
LIBRARIES_AND_OPTIONS_MN=p

# Projects Panel
ADD_PROJECTS_BUTTON_TXT=Add...
ADD_PROJECTS_BUTTON_TT=Add project to the list of required projects
ADD_PROJECTS_BUTTON_MN=A
PROJECTS_TXT=Projects:
PROJECTS_MN=P


# LibraryOptionPanel
STATIC_BINDINGS_TXT=Static Bindings
STATIC_BINDINGS_MN=S
DYNAMIC_BINDINGS_TXT=Dynamic Bindings
DYNAMIC_BINDINGS_MN=D
OTHER_OPTION_TXT=Other Option
OTHER_OPTION_MN=O

#Make Artifact Chooser
PROJECT_NAME_TXT=Project Name:
PROJECT_LIBRARY_FILES_TXT=Configurations:
PROJECT_LIBRARY_FILES_MN=f
PROJECT_LIBRARY_FILES_AD=Configurations
ADD_ITSELF_ERROR=Cannot add reference to itself.
ADD_CYCLIC_ERROR=Cannot add cyclic references.

# OptionsPanel
ALL_OPTIONS_TXT=All Options:
ALL_OPTIONS_MN=A
INHERIT_TXT=Inherit from project
INHERIT_MN=I
INHERIT_AD=Inherit from project
ADDITIONAL_OPTIONS_TXT=Additional Options:
ADDITIONAL_OPTIONS_AD=Additional Options
ADDITIONAL_OPTIONS_MN=O

#StdLibPanel
STANDARD_LIBRARIES_TXT=Standard Libraries:
STANDARD_LIBRARIES_MN=S
MANAGE_LIBRARIES_TXT=Manage Libraries...
MANAGE_LIBRARIES_MN=M

#TableEditorPanel
CLICK_TO_CHANGE=Configuration - click to change...
ITEM=Item
CONFIGURATION=Configuration
BUILD=Build
BROKEN=Broken:

# StdLibPanel
LIBRARY_LIST_SD=List of standard libraries
LIBRARY_LIST_NM=Standard Libraries

# LibraryOptionPanel
LINKER_OPTIONS_PANEL_SD=linker Options Dialog
LINKER_OPTIONS_DYNAMIC_RB_SD=Add dynamic linker option
LINKER_OPTIONS_STATIC_RB_SD=Add static linker option
LINKER_OPTIONS_OTHER_RB_SD=Add other linker option
LINKER_OPTIONS_OTHER_TF_SD=Other linker option

# ProjectPropPanel
ProjectPropPanel.sourceRootLabel.text=Source Folders:
ProjectPropPanel.sourceRootLabel.mn=o
ProjectPropPanel.projectLabel.text=Project Location:
ProjectPropPanel.projectLabel.ad=Project Location
ProjectPropPanel.projectLabel.mn=L
ADD_BUTTON_MN=d
ADD_BUTTON_TXT=Add

# {0} - name of configuration
ProjectPropPanel.encodingLabel.text=&Encoding:

# Packaging
PackagingFilesPanel.addButton.text=New
PackagingFilesPanel.addButton.mn=n
PackagingFilesPanel.addButton.ad=Add empty entry
PackagingFilesPanel.addFileOrDirButton.text=Add File or Directory
PackagingFilesPanel.addFileOrDirButton.mn=A
PackagingFilesPanel.addFileOrDirButton.ad=Add File or Directory
PackagingFilesPanel.addFilesButton.text=Add Files from Directory
PackagingFilesPanel.addFilesButton.mn=F
PackagingFilesPanel.addFilesButton.ad=Add Files from Directory
PackagingFilesPanel.addLinkButton.text=Add Softlink
PackagingFilesPanel.addLinkButton.mn=k
PackagingFilesPanel.addLinkButton.ad=Add Softlink
PackagingFilesPanel.addParameterButton.text=Add Parameter
PackagingFilesPanel.addParameterButton.mn=A
PackagingFilesPanel.addParameterButton.ad=Add Parameter
PackagingFilesPanel.duplicateButton.text=Duplicate
PackagingFilesPanel.duplicateButton.mn=p
PackagingFilesPanel.duplicateButton.ad=Duplicate entry
PackagingFilesPanel.listlabel.text=Files:
PackagingFilesPanel.listlabel.mn=s
AddNewLinkDialogTitle=Add New Softlink
PackagingInfoPanel.listlabel.text=Parameters:
PackagingInfoPanel.listlabel.mn=m
Softlink_tt=Softlink: {0}
Directory_tt=Directory: {0}
File_tt=File: {0}

PACKAGING_ARCH_DOC=A comma-separated list of alphanumeric tokens that indi\
         cate  the  architecture associated with the package. The \
         pkgmk(1) tool can be used to create or modify this value \
         when  actually  building the package. The maximum length \
         of a token is 16 characters  and  it  cannot  include  a \
         comma. \
 \
         Solaris's installation software meaningfully  uses  only \
         one architecture token of the form: \
 \
           <instruction_set_architecture>[.<platform_group>] \
 \
         where platform_group is intended only for  Solaris  ins\
         tallation  packages.  Third  party  application software \
         should restrict itself to ARCH values from the following \
         Solaris-supported  instruction  set architectures (uname \
         -p): sparc, i386, and ppc. Examples of Solaris' platform \
         groups  (uname  -m)  are sun4u for the SPARC instruction \
         set and i86pc for the i386 instruction set. See uname(1) \
         and isalist(1) for more details.
PACKAGING_CATEGORY_DOC=A comma-separated list of categories under which a pack\
         age  can be displayed. A package must at least belong to \
         the  system  or  application  category.  Categories  are \
         case-insensitive  and  can  contain  only alphanumerics. \
         Each category is limited in length to 16 characters.
PACKAGING_NAME_DOC=Text that specifies the package name (maximum length  of \
         256  ASCII  characters).  Use  the NAME parameter as the \
         foundation for describing the functionality and  purpose \
         of  the package; spell out any acronyms and avoid inter\
         nal product/project code names. The DESC  parameter  can \
         then  be used to expand the descriptive information. Use \
         the NAME parameter to state as specifically as  possible \
         the  use  of  the package, why a user would need to load \
         it, and so on.
PACKAGING_PKG_DOC=Abbreviation for the package being installed. All  char\
         acters in the abbreviation must be alphanumeric. You can \
         also use the - and + characters in the abbreviation. The \
         first character cannot be numeric, a + or a -. \
         The abbreviation is limited to a maximum  length  of  32 \
         characters. install, new, and all are reserved abbrevia\
         tions. It is customary to make the  first  four  letters \
         unique to your company, such as the company's stock sym\
         bol.
PACKAGING_VERSION_DOC=Text that specifies the current version associated  with \
         the  software  package.  The maximum length is 256 ASCII \
         characters and the first  character  cannot  be  a  left \
         parenthesis.  The pkgmk(1) tool can be used to create or \
         modify this value when actually  building  the  package. \
         Current  Solaris  software  practice  is  to assign this \
         parameter monotonically increasing Dewey decimal  values \
         of the form: \
           <major_revision>.<minor_revision>[.<micro_revision>] \
         where all the revision fields are integers. The version\
         ing  fields  can  be  extended to an arbitrary string of \
         numbers in Dewey-decimal format, if necessary.
PACKAGING_BASEDIR_DOC=The pathname to a default directory where  "relocatable" \
         files  can  be  installed.  If blank, the package is not \
         relocatable and any files that have  relative  pathnames \
         are  not  installed.  An  administrator can override the \
         default directory.
PACKAGING_CLASSES_DOC=A space-separated list of classes defined for a package. \
         The  order of the list determines the order in which the \
         classes  are  installed.  Classes   listed   first   are \
         installed first (on a media by media basis). This param\
         eter can be modified by the request script.
PACKAGING_DESC_DOC=Text that describes the package (maximum length  of  256 \
         ASCII  characters). This parameter value is used to pro\
         vide the installer with a description of what the  pack\
         age  contains  and  should build on the description pro\
         vided in the NAME parameter.  Try to make the two param\
         eters  work  together  so  that  a pkginfo -l provides a \
         fairly comprehensive textual description of the package.
PACKAGING_EMAIL_DOC=An  electronic  address  where  further  information  is \
         available or bugs can be reported (maximum length of 256 \
         ASCII characters).
PACKAGING_HOTLINE_DOC=Phone number and/or mailing address where further infor\
         mation  can be received or bugs can be reported (maximum \
         length of 256 ASCII characters).
PACKAGING_INTONLY_DOC=Indicates that the  package  should  only  be  installed \
         interactively when set to any non-null value.
PACKAGING_ISTATES_DOC=A list of allowable run states for package  installation \
         (for  example,  "S s 1" allows run states of S, s or 1). \
         The Solaris operating environment supports the run  lev- \
         els  s,  S,  0, 1, 2, 3, 5, and 6. Applicable run levels \
         for this parameter are s, S, 1, 2, and 3.  See  init(1M) \
         for details.
PACKAGING_MAXINST_DOC=The maximum number of package instances that  should  be \
         allowed  on a machine at the same time. By default, only \
         one instance of a package  is  allowed.  This  parameter \
         must  be  set  in  order to have multiple instances of a \
         package. In order to support multiple instances of pack\
         ages (for example, packages that differ in their ARCH or \
         VERSION parameter value), the value  of  this  parameter \
         must  be  high  enough  to  allow for all instances of a \
         given package, including multiple versions coexisting on \
         a software server.
PACKAGING_ORDER_DOC=A list of classes  defining  the  order  in  which  they \
         should  be put on the medium. Used by pkgmk(1) in creat\
         ing the package. Classes not defined in this  field  are \
         placed  on  the  medium using the standard ordering pro\
         cedures.
PACKAGING_PSTAMP_DOC=Production stamp used to mark the pkgmap(4) file on  the \
         output  volumes.  Provides  a  means  for distinguishing \
         between production copies of a version if more than  one \
         is in use at a time. If PSTAMP is not defined, the \
         default is used. The default consists of the UNIX system \
         machine  name  followed  by  the string "YYYYMMDDHHMMSS" \
         (year, month, date, hour, minutes, seconds).
PACKAGING_RSTATES_DOC=A list of allowable run states for package removal  (for \
         example,  "S  s  1" allows run states of S, s or 1). The \
         Solaris operating environment supports the run levels s, \
         S,  0, 1, 2, 3, 5, and 6. Applicable run levels for this \
         parameter are s,  S,  1,  2,  and  3  See  init(1M)  for \
         details.
PACKAGING_SUNW_ISA_DOC=Solaris-only optional parameter that indicates a \
         software package contains 64-bit objects if it is set to \
         sparcv9. If this parameter is not set, the  default ISA \
         (instruction set architecture) is set to the value of \
         the ARCH parameter.
PACKAGING_SUNW_LOC_DOC=Solaris-only  optional  parameter  used  to  indicate  a \
         software  package  containing  localization  files for a \
         given product or application. The parameter value  is  a \
         comma-separated  list of locales supported by a package. \
         It is only used  for  packages  containing  localization \
         files,  typically  the message catalogues. The allowable \
         values for this string field  are  those  found  in the \
         table  of  Standard Locale Names located in the Interna\
         tional Language Environments Guide. \
 \
           SUNW_LOC="<locale_name>,<locale_name>,..,\ \
           <locale_name>" \
 \
         where \
 \
           <locale_name>::= <language>[_<territory>]\ \
           [.<codeset>] \
           <language>::= the set of names from ISO 639 \
           <territory>::= the set of territories specified \
           in ISO 3166 \
           <codeset>::= is a string corresponding to the coded \
           character set \
 \
         Since a value of C specifies the traditional UNIX system \
         behavior  (American  English, en_US), packages belonging \
         to the C locale are viewed  as  non-localized  packages, \
         and   thus  must  not  have  SUNW_LOC  and  SUNW_PKGLIST \
         included in their pkginfo file.  See also  the  SUNW_LOC \
         parameter  in  packagetoc(4)  and setlocale(3C) for more \
         information. This keyword is not recognized by the  add\
         on software utility Software Manager.
PACKAGING_SUNW_PKG_DIR_DOC=A value set by pkgadd that contains the location of  the \
         installing  package.  This  value  is  provided  to  any \
         install time package procedure scripts that need to know \
         where  the installing package is located. This parameter \
         should never be set manually from within a pkginfo file.
PACKAGING_SUNW_PKG_ALLZONES_DOC=Defines whether  a  package,  when  installed,  must  be \
         installed  and  must be identical in all zones. Assigned \
         value can be true or false. The default value is  false. \
         The   setting   of  SUNW_PKG_ALLZONES  has  the  effects \
         described below. See man -s4 pkginfo for further details.
PACKAGING_SUNW_PKG_HOLLOW_DOC=Defines whether a package should be visible in any  non\
         global  zone if that package is required to be installed \
         and be identical in all zones (for  example,  a  package \
         that  has SUNW_PKG_ALLZONES=true). Assigned value can be \
         true or false.  The default value is false. The  package \
         is not required to be installed, but if it is installed, \
         the setting of SUNW_PKG_HOLLOW has the effects described \
         below. See man -s4 pkginfo for further details.
PACKAGING_SUNW_PKG_THISZONE_DOC=Defines whether a  package  must  be  installed  in  the \
         current  zone only. Assigned value can be true or false. \
         The   default   value   is   false.   The   setting   of \
         SUNW_PKG_THISZONE has the effects described below. See man -s4 pkginfo for further details.
PACKAGING_SUNW_PKGLIST_DOC=Solaris-only optional  parameter  used  to  associate  a \
         localization  package to the package(s) from which it is \
         derived. It is required whenever the SUNW_LOC  parameter \
         is  defined.  This parameter value is an comma-separated \
         list of package abbreviations of the form: \
 \
           SUNW_PKGLIST="pkg1[:version],pkg2[:version],..." \
 \
         where version (if specified) should  match  the  version \
         string in the base package specified (see VERSION param- \
         eter in this manual page).  When  in  use,  SUNW_PKGLIST \
         helps  determine  the order of package installation. The \
         packages listed in the parameter  are  installed  before \
         the  localization package in question is installed. When \
         left blank, SUNW_PKGLIST="", the package is  assumed  to \
         be  required  for  the locale to function correctly. See \
         the SUNW_PKGLIST parameter  in  packagetoc(4)  for  more \
         information.  This keyword is not recognized by the add\
         on software utility Software Manager.
PACKAGING_SUNW_PKGTYPE_DOC=Solaris-only  parameter  for  Sun  internal  use   only. \
         Required  for  packages  part  of  the Solaris operating \
         environment releases which install  into  the  /,  /usr, \
         /usr/kvm,  and  /usr/openwin  file  systems. The Solaris \
         operating environment installation  software  must  know \
         which packages are part of which file system to properly \
         install a  server/client  configuration.  The  currently \
         allowable  values for this parameter are root, usr, kvm, \
         and ow.  If no SUNW_PKGTYPE parameter  is  present,  the \
         package  is  assumed to be of BASEDIR=/opt. SUNW_PKGTYPE \
         is optional only for packages  which  install  into  the \
         /opt  name  space  as  is  the  case for the majority of \
         Solaris add-on software. See the SUNW_PKGTYPE  parameter \
         in packagetoc(4) for further information.
PACKAGING_SUNW_PKGVERS_DOC=Solaris-only parameter  indicating  of  version  of  the \
         Solaris operating environment package interface. \
 \
           SUNW_PKGVERS="<sunw_package_version>" \
 \
         where <unw_package_version> has the form x.y[.z] and  x, \
         y,  and  z  are  integers.  For  packages built for this \
         release and previous releases, use SUNW_PKGVERS="1.0".
PACKAGING_SUNW_PRODNAME_DOC=Solaris-only parameter indicating the name of  the  pro\
         duct  this  package  is  a part of or comprises (maximum \
         length of 256  ASCII  characters).  A  few  examples  of \
         currently   used   SUNW_PRODNAME  values  are:  "SunOS", \
         "OpenWindows", and "Common Desktop Environment".
PACKAGING_SUNW_PRODVERS_DOC=Solaris-only parameter indicating the version or release \
         of  the  product  described  in  SUNW_PRODNAME  (maximum \
         length of 256  ASCII  characters).  For  example,  where \
         SUNW_PRODNAME="SunOS", and the Solaris 2.x Beta release, \
         this string could be "5.x BETA", while for  the  Solaris \
         2.x  FCS release, the string would be "5.x". For Solaris \
         10, the string is "5.10". If the SUNW_PRODNAME parameter \
         is NULL, so should be the SUNW_PRODVERS parameter.
PACKAGING_ULIMIT_DOC=If set, this parameter is passed as an argument  to  the \
         ulimit(1)  command (see limit(1)), which establishes the \
         maximum size of a file during installation.
PACKAGING_VENDOR_DOC=Used to identify the  vendor  that  holds  the  software \
         copyright (maximum length of 256 ASCII characters).
PACKAGING_VSTOCK_DOC=The vendor stock number, if any,  that  identifies  this \
         product (maximum length of 256 ASCII characters).

PackagingNewEntryPanel.entryLabel.text=Name:
PackagingNewEntryPanel.valueLabel.text=Value:
PackagingFilesOuterPanel.filePermLabel.text=Regular Files:
PackagingFilesOuterPanel.ownerLabel.text=Owner:
PackagingFilesOuterPanel.groupLabel.text=Group:
PackagingFilesOuterPanel.defaultValues.text=Default File Properties (used when adding files or directories):
PackagingFilesOuterPanel.exePermLabel.text=Exe Files:
PackagingFilesOuterPanel.topDirectoryLabel.text=Top Directory:
PackagingFilesOuterPanel.topDirectoryTextField.text=MyPackage
PackagingFilesOuterPanel.column.0.text=Type
PackagingFilesOuterPanel.column.1.text=File or Directory Path in Package
PackagingFilesOuterPanel.column.2.text=Original File or Link
PackagingFilesOuterPanel.column.3.text=Permission
PackagingFilesOuterPanel.column.4.text=Owner
PackagingFilesOuterPanel.column.5.text=Group
FileChooserFileTitle=Add File or Directory
FileChooserFilesTitle=Add Files from Directory
FileChooserButtonText=Select
PackagingInfoPanel.column.0.text=Name
PackagingInfoPanel.column.1.text=Value
AddNewParameterDialogTitle=Add New Parameter
PackagingAddingFilesProgressPanel.Stop.Button.text=Stop
PackagingAddingFilesProgressPanel.Stop.Button.mn=S
PackagingAddingFilesProgressPanel.title=Adding Files...

# PackagingPanel
DefaultArchictureValue=Architecture...
InfoPanelText=Info
FilePanelText=Files

# PackagingNodeProp
FilesTextZero=0 Files
FilesTextOne={0} File: {1}
FilesTextMany={0} Files: {1}
PackagingPanel.tabbedPane.AccessibleContext.accessibleName=FilesSndInfoPanel
PackagingPanel.tabbedPane.AccessibleContext.accessibleDescription=Files and Info Panels
PackagingInfoOuterPanel.docTextArea.AccessibleContext.accessibleName=DocArea
PackagingInfoOuterPanel.docTextArea.AccessibleContext.accessibleDescription=Documentation Area
PackagingNewEntryPanel.docArea.AccessibleContext.accessibleName=DocArea
PackagingNewEntryPanel.docArea.AccessibleContext.accessibleDescription=Documentation Area
PackagingNewEntryPanel.entryComboBox.AccessibleContext.accessibleName=ParameterComboBox
PackagingNewEntryPanel.entryComboBox.AccessibleContext.accessibleDescription=Parameter Chooser
PackagingNewEntryPanel.entryValueTextField.AccessibleContext.accessibleDescription=Parameter Value
PackagingFilesOuterPanel.topDirectoryTextField.AccessibleContext.accessibleDescription=Top Directory
PackagingFilesOuterPanel.exePermTextField.AccessibleContext.accessibleDescription=Executable Permission
PackagingFilesOuterPanel.filePermTextField.AccessibleContext.accessibleDescription=File Permission
PackagingFilesOuterPanel.ownerTextField.AccessibleContext.accessibleDescription=File Owner
PackagingFilesOuterPanel.groupTextField.AccessibleContext.accessibleDescription=File Group
PackagingNewLinkPanel.nameLabel.text=Name of link:
PackagingNewLinkPanel.linkLabel.text=->
PackagingNewLinkPanel.nameTextField.text=
PackagingNewLinkPanel.linkTextField.text=
PackagingNewLinkPanel.link.text=What it links to:
PackagingNewLinkPanel.nameTextField.AccessibleContext.accessibleDescription=Name of link
PackagingNewLinkPanel.linkTextField.AccessibleContext.accessibleDescription=What it links to
PackagingAddingFilesProgressPanel.fileLabel.text=File added:
PackagingAddingFilesProgressPanel.fileTextField.AccessibleContext.accessibleDescription=File being added
PackagingAddingFilesProgressPanel.AccessibleContext.accessibleName=ProgressPanel
PackagingAddingFilesProgressPanel.AccessibleContext.accessibleDescription=Progress Panel
PackagingAddingFilesProgressPanel.progressBar.AccessibleContext.accessibleName=ProgressBar
PackagingAddingFilesProgressPanel.progressBar.AccessibleContext.accessibleDescription=Progress Bar
PackagingFilesOuterPanel.jLabel4.text=Owner and Group
PackagingFilesOuterPanel.rLabel3.text=r
PackagingFilesOuterPanel.wLabel3.text=w
PackagingFilesOuterPanel.eLabel3.text=e
PackagingFilesOuterPanel.rLabel1.text=r
PackagingFilesOuterPanel.wLabel1.text=w
PackagingFilesOuterPanel.eLabel1.text=e
PackagingFilesOuterPanel.rLabel2.text=r
PackagingFilesOuterPanel.wLabel2.text=w
PackagingFilesOuterPanel.eLabel2.text=e
