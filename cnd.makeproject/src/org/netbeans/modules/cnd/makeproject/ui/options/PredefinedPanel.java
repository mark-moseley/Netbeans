/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.cnd.makeproject.ui.options;

import java.util.Vector;
import java.awt.GridBagConstraints;
import java.util.List;
import javax.swing.JFileChooser;
import org.netbeans.modules.cnd.api.utils.FileChooser;
import org.netbeans.modules.cnd.makeproject.api.compilers.CCCCompiler;
import org.netbeans.modules.cnd.makeproject.ui.utils.ListEditorPanel;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.netbeans.modules.cnd.makeproject.MakeOptions;
import org.netbeans.modules.cnd.makeproject.api.platforms.Platforms;
import org.netbeans.modules.cnd.makeproject.api.platforms.Platform;
import org.openide.util.NbBundle;

public class PredefinedPanel extends javax.swing.JPanel {
    private IncludesPanel includesPanel;
    private DefinitionsPanel definitionsPanel;
    private Platform platform;
    private CCCCompiler compiler;
    private ParserSettingsPanel parserSettingsPanel;
    
    /** Creates new form PredefinedPanel */
    public PredefinedPanel(CCCCompiler compiler, ParserSettingsPanel parserSettingsPanel) {
        initComponents();
        this.compiler = compiler;
        this.parserSettingsPanel = parserSettingsPanel;
        platform = Platforms.getPlatform(MakeOptions.getInstance().getPlatform());
        updatePanels(platform);
        
        resetButton.getAccessibleContext().setAccessibleDescription(getString("RESET_BUTTON_AD"));
    }
    
    private void updatePanels(Platform platform) {
        List includesList = compiler.getSystemIncludeDirectories(platform);
        String[] includes = (String[])includesList.toArray(new String[includesList.size()]);
                
        if (includesPanel != null)
            remove(includesPanel);
        GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        add(includesPanel = new IncludesPanel(includes), gridBagConstraints);
        
        List definesList = compiler.getSystemPreprocessorSymbols(platform);
        String[] defines = (String[])definesList.toArray(new String[definesList.size()]);
        
        if (definitionsPanel != null)
            remove(definitionsPanel);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        add(definitionsPanel = new DefinitionsPanel(defines), gridBagConstraints);
    }
    
    public void save() {
        Vector includes = includesPanel.getListData();
        compiler.setSystemIncludeDirectories(platform, includes);
        Vector definitions = definitionsPanel.getListData();
        compiler.setSystemPreprocessorSymbols(platform, definitions);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        resetButton = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        resetButton.setMnemonic(java.util.ResourceBundle.getBundle("org/netbeans/modules/cnd/makeproject/ui/options/Bundle").getString("RESET_BUTTON_MN").charAt(0));
        resetButton.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/cnd/makeproject/ui/options/Bundle").getString("RESET_BUTTON_TXT"));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        add(resetButton, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        String txt = getString("RESET_QUESTION"); // NOI18N
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(txt, getString("RESET_DIALOG_TITLE"), NotifyDescriptor.YES_NO_OPTION); // NOI18N
        if (DialogDisplayer.getDefault().notify(d) == NotifyDescriptor.YES_OPTION) {
            compiler.resetSystemIncludesAndDefines(platform);
            updatePanels(platform);
            validate();
            repaint();
            parserSettingsPanel.fireFilesPropertiesChanged();
        }
    }//GEN-LAST:event_resetButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables
    
    private class IncludesPanel extends ListEditorPanel {
	public IncludesPanel(Object[] objects) {
	    super(objects);
	    getDefaultButton().setVisible(false);
	}

	public Object addAction() {
	    String seed = null;
	    if (FileChooser.getCurrectChooserFile() != null)
		seed = FileChooser.getCurrectChooserFile().getPath();
            if (seed == null)
                seed = System.getProperty("user.home"); // NOI18N
	    FileChooser fileChooser = new FileChooser(getString("SelectDirectoryTxt"), getString("SelectTxt"), JFileChooser.DIRECTORIES_ONLY, null, seed, true);
	    int ret = fileChooser.showOpenDialog(this);
	    if (ret == JFileChooser.CANCEL_OPTION)
		return null;
	    String itemPath = fileChooser.getSelectedFile().getPath();
	    return itemPath;
	}

	public String getListLabelText() {
	    return getString("IncludeDirectoriesTxt");
	}
	public char getListLabelMnemonic() {
	    return getString("IncludeDirectoriesMn").charAt(0);
	}
    
	public String getAddButtonText() {
	    return getString("AddButtonTxt");
	}
	public char getAddButtonMnemonics() {
	    return getString("IAddButtonMn").charAt(0);
	}
    
        public char getCopyButtonMnemonics() {
            return getString("ICopyButtonMn").charAt(0);
        }
	public Object copyAction(Object o) {
	    return new String((String)o);
	}
        
	public String getRenameButtonText() {
	    return getString("EditButtonTxt");
	}
	public char getRenameButtonMnemonics() {
	    return getString("EditButtonMn").charAt(0);
	}
	public void editAction(Object o) {
	    String s = (String)o;

	    NotifyDescriptor.InputLine notifyDescriptor = new NotifyDescriptor.InputLine(getString("EditDialogLabelDir"), getString("EditDialogTitle")); // NOI18N
	    notifyDescriptor.setInputText(s);
	    DialogDisplayer.getDefault().notify(notifyDescriptor);
	    if (notifyDescriptor.getValue() != NotifyDescriptor.OK_OPTION)
		return;
	    String newS = notifyDescriptor.getInputText();
	    Vector vector = getListData();
	    Object[] arr = getListData().toArray();
	    for (int i = 0; i < arr.length; i++) {
		if (arr[i] == o) {
		    vector.remove(i);
		    vector.add(i, newS);
		    break;
		}
	    }
	}
        
        public char getRemoveButtonMnemonics() {
            return getString("IRemoveButtonMn").charAt(0);
        }
        
        public char getUpButtonMnemonics() {
            return getString("IUpButtonMn").charAt(0);
        }

        public char getDownButtonMnemonics() {
            return getString("IDownButtonMn").charAt(0);
        }
    }
    private class DefinitionsPanel extends ListEditorPanel {
	public DefinitionsPanel(Object[] objects) {
	    super(objects);
	    getDefaultButton().setVisible(false);
	}

	public Object addAction() {
	    NotifyDescriptor.InputLine notifyDescriptor = new NotifyDescriptor.InputLine(getString("EditDialogLabelDef"), getString("AddDialogTitle"));
	    DialogDisplayer.getDefault().notify(notifyDescriptor);
	    if (notifyDescriptor.getValue() != NotifyDescriptor.OK_OPTION)
		return null;
	    String def = notifyDescriptor.getInputText();
            if (def.length() != 0)
                return def;
            else
                return null;
	}

	public String getListLabelText() {
	    return getString("MacroDefinitionsTxt");
	}
	public char getListLabelMnemonic() {
	    return getString("MacroDefinitionsMn").charAt(0);
	}
    
	public String getAddButtonText() {
	    return getString("AddButtonTxt");
	}
	public char getAddButtonMnemonics() {
	    return getString("MAddButtonMn").charAt(0);
	}
    
        public char getCopyButtonMnemonics() {
            return getString("MCopyButtonMn").charAt(0);
        }
	public Object copyAction(Object o) {
	    return new String((String)o);
	}
        
	public char getRenameButtonMnemonics() {
	    return getString("MditButtonMn").charAt(0);
	}
	public String getRenameButtonText() {
	    return getString("EditButtonTxt");
	}
	public void editAction(Object o) {
	    String s = (String)o;

	    NotifyDescriptor.InputLine notifyDescriptor = new NotifyDescriptor.InputLine(getString("EditDialogLabelDef"), getString("EditDialogTitle")); // NOI18N
	    notifyDescriptor.setInputText(s);
	    DialogDisplayer.getDefault().notify(notifyDescriptor);
	    if (notifyDescriptor.getValue() != NotifyDescriptor.OK_OPTION)
		return;
	    String newS = notifyDescriptor.getInputText();
	    Vector vector = getListData();
	    Object[] arr = getListData().toArray();
	    for (int i = 0; i < arr.length; i++) {
		if (arr[i] == o) {
		    vector.remove(i);
		    vector.add(i, newS);
		    break;
		}
	    }
	}

        public char getRemoveButtonMnemonics() {
            return getString("MRemoveButtonMn").charAt(0);
        }
        
        public char getUpButtonMnemonics() {
            return getString("MUpButtonMn").charAt(0);
        }

        public char getDownButtonMnemonics() {
            return getString("MDownButtonMn").charAt(0);
        }
    }
    
    private static String getString(String s) {
        return NbBundle.getMessage(PredefinedPanel.class, s);
    }
}
