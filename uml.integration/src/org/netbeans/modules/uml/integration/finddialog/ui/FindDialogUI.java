/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */


package org.netbeans.modules.uml.integration.finddialog.ui;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.Box;
import javax.swing.JCheckBox;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.WindowConstants;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.netbeans.modules.uml.ui.support.commondialogs.IErrorDialog;
import org.netbeans.modules.uml.ui.support.commondialogs.MessageIconKindEnum;
import org.netbeans.modules.uml.core.metamodel.core.foundation.IElement;
import org.netbeans.modules.uml.core.metamodel.diagrams.IProxyDiagram;
import org.netbeans.modules.uml.core.support.umlutils.ETList;

import org.netbeans.modules.uml.integration.finddialog.FindController;
import org.netbeans.modules.uml.integration.finddialog.FindResults;
import org.netbeans.modules.uml.integration.finddialog.FindUtilities;
import org.netbeans.modules.uml.ui.support.ProductHelper;
import org.netbeans.modules.uml.ui.support.finddialog.DefaultFindDialogResource;
import org.netbeans.modules.uml.ui.swing.commondialogs.JCenterDialog;
import org.netbeans.modules.uml.ui.swing.commondialogs.SwingErrorDialog;
import org.openide.awt.Mnemonics;
import org.openide.util.NbBundle;

public class FindDialogUI extends JCenterDialog
{
    /** Creates new form finddialog */
    public FindDialogUI(java.awt.Frame parent, boolean modal, FindController controller )
    {
        super(parent, modal);
        setController(controller);
        initComponents();
        initTextFieldListeners();
        initDialog();
        center(parent);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;
        
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        textLabel = new javax.swing.JLabel();
        m_FindCombo = new javax.swing.JComboBox();
        jPanel16 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        m_LoadExternalCheck = new javax.swing.JCheckBox();
        m_MatchCaseCheck = new javax.swing.JCheckBox();
        m_XpathCheck = new javax.swing.JCheckBox();
        m_WholeWordCheck = new javax.swing.JCheckBox();
        m_SearchAliasCheck = new javax.swing.JCheckBox();
        jPanel17 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        m_SearchElementsRadio = new javax.swing.JRadioButton();
        m_SearchDescriptionsRadio = new javax.swing.JRadioButton();
        m_ProjectList = new javax.swing.JList();
        jPanel9 = new javax.swing.JPanel();
        m_WorkspaceRadio = new javax.swing.JRadioButton();
        m_ProjectLabel = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        resultLabel = new javax.swing.JLabel();
        FindTableModel model = new FindTableModel(this);
        m_ResultsTable = new JFindTable(model, this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        jPanel12 = new javax.swing.JPanel();
        m_NavigateCheck = new javax.swing.JCheckBox();
        m_Status = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        m_FindButton = new javax.swing.JButton();
        m_CloseButton = new javax.swing.JButton();
        
        setTitle(DefaultFindDialogResource.getString("IDS_PROJNAME2"));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });
        
        jPanel1.setLayout(new GridBagLayout());
        jPanel4.setLayout(new GridBagLayout());
        
        
        //CBeckham -  added to dynamicaly adjust panel size for larger fonts
        // Note...getFoint.getSize will not return the ide parm -fontsize
        //in most cases of localized version, the user will use the -fontsize to start the ide
        //regaqrdless of what the os font size setting is, however in some remote cases the user
        //may actaully have the OS fontsize setting high
        int fontsize;
        java.awt.Font f =
                javax.swing.UIManager.getFont("controlFont"); //NOI18N
        if (f != null)
        {
            fontsize = f.getSize();
        }
        else
        {
            fontsize = 12;
        }
        int width  = 450;
        int height = 400;
        int multiplyer = 2;
        
//			java.awt.Font theFont = new java.awt.Font("Dialog", 0, fontsize);
        
        if (fontsize > 17 ) multiplyer =3;
        width  = width  + Math.round(width*(multiplyer*fontsize/100f));
        height = height + Math.round(height*(multiplyer*fontsize/100f));
        setSize(width,height);
        // CBeckham - end of add
        
        
        
        // text label
//			textLabel.setFont(theFont);
        textLabel.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_FINDWHAT")));
        textLabel.setLabelFor(m_FindCombo);
        DefaultFindDialogResource.setMnemonic(textLabel, DefaultFindDialogResource.getString("IDS_FINDWHAT"));
        DefaultFindDialogResource.setFocusAccelerator(m_FindCombo, DefaultFindDialogResource.getString("IDS_FINDWHAT"));
        textLabel.setName("findLabel");
        gridBagConstraints.weightx=0;
        gridBagConstraints.insets=new Insets(0,4,0,0);
        jPanel4.add(textLabel,gridBagConstraints);
        
        // combo box
        m_FindCombo.setEditable(true);
        m_FindCombo.setMaximumRowCount(10);
//			m_FindCombo.setFont(theFont);
        gridBagConstraints.weightx=9;
        gridBagConstraints.fill=GridBagConstraints.BOTH;
        gridBagConstraints.insets=new Insets(0,5,0,0);
        jPanel4.add(m_FindCombo,gridBagConstraints);
        
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=0;
        gridBagConstraints.weightx=2.0;
        gridBagConstraints.weighty=1.0;
        gridBagConstraints.insets=new Insets(2,5,0,5);
        gridBagConstraints.fill=GridBagConstraints.BOTH;
        jPanel1.add(jPanel4,gridBagConstraints);
        //jPanel1.add(jPanel16);
        
        // check boxes
        jPanel3.setLayout(new GridBagLayout());
//			m_LoadExternalCheck.setFont(theFont);
        m_LoadExternalCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_LOADEXTERNAL")));
        DefaultFindDialogResource.setMnemonic(m_LoadExternalCheck, DefaultFindDialogResource.getString("IDS_LOADEXTERNAL"));
//			m_LoadExternalCheck.getAccessibleContext().setAccessibleDescription(
//					NbBundle.getMessage(DefaultFindDialogResource.class, "ACSN_LoadExternalCheck"));
        
        m_LoadExternalCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onLoadExternalCheck(evt);
            }
        });
        //jPanel3.add(m_LoadExternalCheck);
        
        m_MatchCaseCheck.setSelected(isMatchCase());
        m_Controller.setCaseSensitive(m_MatchCaseCheck.isSelected());
        
        m_MatchCaseCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_MATCHCASE")));
        DefaultFindDialogResource.setMnemonic(m_MatchCaseCheck, DefaultFindDialogResource.getString("IDS_MATCHCASE"));
//			m_MatchCaseCheck.setFont(theFont);
        m_MatchCaseCheck.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_MatchCaseCheck"));
        
        m_MatchCaseCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onMatchCaseCheck(evt);
            }
        });
        
        //kris - if "LongSearch" property is set to NEVER, then force the case
        // sensitivity to true and disable it so that it can not be changed. To
        // enable this checkbox, the user box set the "LongSearch" property to
        // "Yes" or "Ask Me".
        if (! matchCaseEnabled()) {
            m_Controller.setCaseSensitive(true) ;
            ProductHelper.getPreferenceManager().setPreferenceValue("FindDialog", "CaseSensitivity", "PSK_YES");
            m_MatchCaseCheck.setSelected(true) ;
            m_MatchCaseCheck.setEnabled(false) ;
        }
        
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=0;
        gridBagConstraints.weighty=0.5;
        jPanel3.add(m_MatchCaseCheck,gridBagConstraints);
        
        m_XpathCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_XPATHEXPRESSION")));
        DefaultFindDialogResource.setMnemonic(m_XpathCheck, DefaultFindDialogResource.getString("IDS_XPATHEXPRESSION"));
//			m_XpathCheck.setFont(theFont);
        m_XpathCheck.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_XpathCheck"));
        m_XpathCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onXPathCheck(evt);
            }
        });
        gridBagConstraints.gridx=1;
        gridBagConstraints.gridy=0;
        gridBagConstraints.weighty=0.5;
        jPanel3.add(m_XpathCheck,gridBagConstraints);
        
        m_WholeWordCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_MATCHWHOLE")));
        DefaultFindDialogResource.setMnemonic(m_WholeWordCheck, DefaultFindDialogResource.getString("IDS_MATCHWHOLE"));
//			m_WholeWordCheck.setFont(theFont);
        m_WholeWordCheck.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_WholeWordCheck"));
        m_WholeWordCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onWholeWordCheck(evt);
            }
        });
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=1;
        gridBagConstraints.weighty=0.5;
        jPanel3.add(m_WholeWordCheck,gridBagConstraints);
        
        m_SearchAliasCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_SEARCHALIAS")));
        DefaultFindDialogResource.setMnemonic(m_SearchAliasCheck, DefaultFindDialogResource.getString("IDS_SEARCHALIAS"));
//			m_SearchAliasCheck.setFont(theFont);
        m_SearchAliasCheck.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_SearchAliasCheck"));
        m_SearchAliasCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onAliasCheck(evt);
            }
        });
        gridBagConstraints.gridx=1;
        gridBagConstraints.gridy=1;
        gridBagConstraints.weighty=0.5;
        jPanel3.add(m_SearchAliasCheck,gridBagConstraints);
        
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=1;
        gridBagConstraints.weightx=1.0;
        gridBagConstraints.weighty=0.5;
        gridBagConstraints.insets=new Insets(0,0,5,5);
        gridBagConstraints.fill=GridBagConstraints.HORIZONTAL;
        jPanel1.add(jPanel3,gridBagConstraints);
        
        jPanel7.setLayout(new java.awt.GridBagLayout());
        jPanel6.setLayout(new java.awt.GridBagLayout());
        
        m_ProjectLabel.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_PROJECTS")));
        DefaultFindDialogResource.setMnemonic(m_ProjectLabel, DefaultFindDialogResource.getString("IDS_PROJECTS"));
        m_ProjectLabel.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_ProjectLabel"));
        m_ProjectLabel.setLabelFor(m_ProjectList);
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets=new Insets(0,5,0,5);
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        
        jPanel6.add(m_ProjectLabel, gridBagConstraints);
        // project list
        
        m_ProjectList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        m_ProjectList.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPrjList = new JScrollPane(m_ProjectList);
        jScrollPrjList.setMinimumSize(new Dimension(30,80));
        jScrollPrjList.setPreferredSize(new Dimension(50,80));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
//			jPanel6.add(m_ProjectList, gridBagConstraints);
        jPanel6.add(jScrollPrjList, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets=new Insets(0,0,0,5);
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=0;
        gridBagConstraints.weightx=6;
        gridBagConstraints.weighty=1;
        jPanel7.add(jPanel6, gridBagConstraints);
        
        // element/description radio buttons
        jPanel9.setLayout(new GridBagLayout());
        javax.swing.border.TitledBorder bord = new javax.swing.border.TitledBorder(DefaultFindDialogResource.getString("IDS_SEARCHIN"));
//			bord.setTitleFont(theFont);
        jPanel9.setBorder(bord);
        
//			m_SearchElementsRadio.setFont(theFont);
        // default the dialog to have the element radio button checked
        m_SearchElementsRadio.setSelected(true);
        m_SearchElementsRadio.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_ELEMENTS")));
        DefaultFindDialogResource.setMnemonic(m_SearchElementsRadio, DefaultFindDialogResource.getString("IDS_ELEMENTS"));
        m_SearchElementsRadio.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_Search_Element"));
        m_SearchElementsRadio.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onSearchElementsRadio(evt);
            }
        });
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=0;
        gridBagConstraints.insets=new Insets(10,0,5,0);
        jPanel9.add(m_SearchElementsRadio,gridBagConstraints);
        
//			m_SearchDescriptionsRadio.setFont(theFont);
        m_SearchDescriptionsRadio.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_DESCRIPTIONS")));
        DefaultFindDialogResource.setMnemonic(m_SearchDescriptionsRadio, DefaultFindDialogResource.getString("IDS_DESCRIPTIONS"));
        m_SearchDescriptionsRadio.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_Search_Description"));
        m_SearchDescriptionsRadio.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onSearchDescriptionsRadio(evt);
            }
        });
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=1;
        gridBagConstraints.insets=new Insets(5,0,12,0);
        jPanel9.add(m_SearchDescriptionsRadio,gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.gridx=1;
        gridBagConstraints.gridy=0;
        gridBagConstraints.weightx=1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        //gridBagConstraints.insets=new Insets(5,0,0,0);
        jPanel7.add(jPanel9, gridBagConstraints);
        
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=2;
        gridBagConstraints.weightx=2.0;
        gridBagConstraints.weighty=1.0;
        gridBagConstraints.fill=GridBagConstraints.BOTH;
        gridBagConstraints.insets=new Insets(2,5,5,5);
        jPanel1.add(jPanel7,gridBagConstraints);
        
        // results grid
        jPanel11.setLayout(new GridBagLayout());
//			m_ResultsTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
//			m_ResultsTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        Mnemonics.setLocalizedText(resultLabel,
                NbBundle.getMessage(DefaultFindDialogResource.class, "LBL_SearchResult"));
        resultLabel.setLabelFor(m_ResultsTable);
        resultLabel.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "LBL_SearchResult"));
        
        jScrollPane2 = new JScrollPane(m_ResultsTable);
        GridBagConstraints gridBagConstraints2 = new java.awt.GridBagConstraints();
        gridBagConstraints2.gridx=0;
        gridBagConstraints2.gridy=0;
        gridBagConstraints2.insets=new Insets(5,0,5,0);
        gridBagConstraints2.fill = GridBagConstraints.BOTH;
        jPanel11.add(resultLabel, gridBagConstraints2);
        
        gridBagConstraints2.gridx=0;
        gridBagConstraints2.gridy=1;
        gridBagConstraints2.fill = GridBagConstraints.BOTH;
//			gridBagConstraints2.insets=new Insets(0,5,0,5);
        gridBagConstraints2.weightx = 1.0;
        gridBagConstraints2.weighty = 1.0;
        jPanel11.add(jScrollPane2, gridBagConstraints2);
        
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=2;
        
        
        
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=3;
        gridBagConstraints.weightx=2.0;
        gridBagConstraints.weighty=4.0;
        gridBagConstraints.fill=GridBagConstraints.BOTH;
        gridBagConstraints.insets=new Insets(2,10,5,5);
        jPanel1.add(jPanel11,gridBagConstraints);
        
        // navigate check
        jPanel12.setLayout(new GridBagLayout());
//			m_NavigateCheck.setFont(theFont);
        // default the navigate button to true
        m_NavigateCheck.setSelected(true);
        m_NavigateCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_NAVIGATE")));
        DefaultFindDialogResource.setMnemonic(m_NavigateCheck, DefaultFindDialogResource.getString("IDS_NAVIGATE"));
        m_NavigateCheck.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "IDS_NAVIGATE"));
        m_NavigateCheck.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onNavigateCheck(evt);
            }
        });
        gridBagConstraints.weightx=1;
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=0;
        gridBagConstraints.fill=GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel12.add(m_NavigateCheck,gridBagConstraints);
        
        
        // status
//			m_Status.setEditable(false);
        m_Status.setMaximumSize(new java.awt.Dimension(2147483647, 20));
//			m_Status.setFont(theFont);
        m_Status.getAccessibleContext().setAccessibleName(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSN_StatusTextField"));
        m_Status.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSN_StatusTextField"));
        gridBagConstraints.weightx=1;
        gridBagConstraints.fill=GridBagConstraints.BOTH;
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=1;
        gridBagConstraints.insets=new Insets(0,5,0,5);
        jPanel12.add(m_Status,gridBagConstraints);
        
        gridBagConstraints.gridx=0;
        gridBagConstraints.gridy=4;
        gridBagConstraints.weightx=2.0;
        gridBagConstraints.weighty=1.0;
        gridBagConstraints.fill=GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets=new Insets(2,10,0,5);
        jPanel1.add(jPanel12,gridBagConstraints);
        //jPanel1.add(Box.createVerticalStrut(5),gridBagConstraints);
        
        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
        
        // find/close buttons
//			Dimension buttonSize = new Dimension(75, 25);
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));
        jPanel2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        
//			m_FindButton.setFont(theFont);
        m_FindButton.setEnabled(false);
        m_FindButton.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_FIND")));
        DefaultFindDialogResource.setMnemonic(m_FindButton, DefaultFindDialogResource.getString("IDS_FIND"));
        m_FindButton.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "IDS_FIND"));
        m_FindButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onFindButton(evt);
            }
        });
        getRootPane().setDefaultButton(m_FindButton);
        jPanel2.add(Box.createVerticalStrut(9));
        jPanel2.add(m_FindButton);
        
//			m_CloseButton.setFont(theFont);
        m_CloseButton.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_CLOSE")));
        DefaultFindDialogResource.setMnemonic(m_CloseButton, DefaultFindDialogResource.getString("IDS_CLOSE"));
        m_CloseButton.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "IDS_CLOSE"));
        m_CloseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                setVisible(false);
                dispose();
            }
        });
        jPanel2.add(Box.createVerticalStrut(3));
        jPanel2.add(m_CloseButton);
        
        getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);
        
//			pack();
        Dimension buttonSize = getMaxButtonWidth();
        m_FindButton.setMaximumSize(buttonSize);
        m_FindButton.setPreferredSize(buttonSize);
        m_CloseButton.setPreferredSize(buttonSize);
        m_CloseButton.setMaximumSize(buttonSize);
        
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.getAccessibleContext().setAccessibleDescription(
                NbBundle.getMessage(DefaultFindDialogResource.class, "ACSD_FindDialog"));
    }
    
    
    private void initTextFieldListeners()
    {
        class TextChangeListener implements DocumentListener
        {
            private JTextField textField;
            TextChangeListener(JTextField textField)
            {
                this.textField = textField;
            }
            public void changedUpdate(DocumentEvent e)
            {
                documentChanged();
            }
            public void insertUpdate(DocumentEvent e)
            {
                documentChanged();
            }
            public void removeUpdate(DocumentEvent e)
            {
                documentChanged();
            }
            private void documentChanged()
            {
                updateState();
            }
        }
        ((JTextField)m_FindCombo.getEditor().getEditorComponent()).getDocument().addDocumentListener(
                new TextChangeListener((JTextField)m_FindCombo.getEditor().getEditorComponent()));
    }
    
    private void updateState()
    {
        if (!update)
        {
            update = true;
            return;
        }
        String text = ((JTextField)m_FindCombo.getEditor().getEditorComponent()).getText().trim();
        
        m_FindButton.setEnabled(!"".equals(text));
    }
    
    
    private Dimension getMaxButtonWidth()
    {
        Dimension ret = null;
        Dimension d = m_FindButton.getPreferredSize();
        double max  = d.width;
        
        d = m_CloseButton.getPreferredSize();
        if(d.width > max)
        {
            max = d.width;
            ret = d;
        }
        return ret;
    }
    
    
    private void onLoadExternalCheck(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JCheckBox)
        {
            JCheckBox box = (JCheckBox)obj;
            boolean checkboxState = box.isSelected();
            if (checkboxState)
            {
                m_Controller.setExternalLoad(true);
            }
            else
            {
                m_Controller.setExternalLoad(false);
            }
        }
    }
    
    private void onXPathCheck(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JCheckBox)
        {
            JCheckBox box = (JCheckBox)obj;
            boolean checkboxState = box.isSelected();
            if (checkboxState)
            {
                m_Controller.setKind(1);
                m_Controller.setCaseSensitive(true);
                m_MatchCaseCheck.setEnabled(false);
                m_SearchDescriptionsRadio.setEnabled(false);
                m_SearchElementsRadio.setEnabled(false);
                m_SearchAliasCheck.setEnabled(false);
                m_WholeWordCheck.setEnabled(false);
            }
            else
            {
                m_Controller.setKind(0);
                m_Controller.setCaseSensitive(m_MatchCaseCheck.isSelected());
                m_MatchCaseCheck.setEnabled(true);
                m_SearchDescriptionsRadio.setEnabled(true);
                m_SearchElementsRadio.setEnabled(true);
                m_SearchAliasCheck.setEnabled(true);
                m_WholeWordCheck.setEnabled(true);
            }
        }
    }
    
    private void onAliasCheck(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JCheckBox)
        {
            JCheckBox box = (JCheckBox)obj;
            boolean checkboxState = box.isSelected();
            if (checkboxState)
            {
                m_Controller.setSearchAlias(true);
                m_SearchElementsRadio.setSelected(true);
                m_SearchDescriptionsRadio.setSelected(false);
                m_SearchDescriptionsRadio.setEnabled(false);
            }
            else
            {
                m_Controller.setSearchAlias(false);
                m_SearchDescriptionsRadio.setEnabled(true);
            }
        }
    }
    
    private void onWholeWordCheck(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JCheckBox)
        {
            JCheckBox box = (JCheckBox)obj;
            boolean checkboxState = box.isSelected();
            if (checkboxState)
            {
                m_Controller.setWholeWordSearch(true);
            }
            else
            {
                m_Controller.setWholeWordSearch(false);
                
            }
        }
    }
    
    private void onMatchCaseCheck(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JCheckBox)
        {
            JCheckBox box = (JCheckBox)obj;
            boolean checkboxState = box.isSelected();
            if (checkboxState)
            {
                m_Controller.setCaseSensitive(true);
                ProductHelper.getPreferenceManager().setPreferenceValue("FindDialog", "CaseSensitivity", "PSK_YES");
            }
            else
            {
                m_Controller.setCaseSensitive(false);
                //if ("PSK_NEVER".equals(ProductHelper.getPreferenceManager().getPreferenceValue("FindDialog", "LongSearch")))
                ProductHelper.getPreferenceManager().setPreferenceValue("FindDialog", "CaseSensitivity", "PSK_NO");
            }
        }
    }
    
    private void onSearchElementsRadio(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JRadioButton)
        {
            m_Controller.setResultType(0);
            m_SearchElementsRadio.setSelected(true);
            m_SearchDescriptionsRadio.setSelected(false);
            m_SearchAliasCheck.setEnabled(true);
        }
    }
    
    private void onSearchDescriptionsRadio(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JRadioButton)
        {
            m_Controller.setResultType(1);
            m_SearchDescriptionsRadio.setSelected(true);
            m_SearchElementsRadio.setSelected(false);
            m_SearchAliasCheck.setSelected(false);
            m_SearchAliasCheck.setEnabled(false);
        }
    }
    
    private void onNavigateCheck(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JCheckBox)
        {
            JCheckBox box = (JCheckBox)obj;
            boolean checkboxState = box.isSelected();
            if (checkboxState)
            {
                m_Controller.setDiagramNavigate(true);
            }
            else
            {
                m_Controller.setDiagramNavigate(false);
            }
        }
    }
    
    private void onFindButton(java.awt.event.ActionEvent evt)
    {
        Object obj = evt.getSource();
        if (obj instanceof JButton)
        {
            try
            {
                FindUtilities.startWaitCursor(getContentPane());
                onFindButton();
            }
            catch (Exception ex)
            {
                JOptionPane.showMessageDialog(this,
                        DefaultFindDialogResource.getString("IDS_ERROR1"),
                        DefaultFindDialogResource.getString("IDS_PROJNAME2"),
                        JOptionPane.INFORMATION_MESSAGE);
            }
            finally
            {
                FindUtilities.endWaitCursor(getContentPane());
            }
        }
    }
    
    
    private void onFindButton() throws Exception
    {
        m_Status.setText("");
        // clear the grid
        clearGrid();
        String searchStr = (String)m_FindCombo.getSelectedItem();
        update=false;
        // Save the values of the search combo
        FindUtilities.saveSearchString("LastSearchStrings", m_FindCombo);
        // reset what is in the search combo
        FindUtilities.populateComboBoxes("LastSearchStrings", m_FindCombo);
        if (searchStr != null && searchStr.length() > 0)
        {
            boolean continueFlag = true;
            int count = m_ProjectList.getSelectedIndex();
            if (count == -1)
            {
                continueFlag = false;
                String msg = FindUtilities.translateString("IDS_ERROR2");
                String title = FindUtilities.translateString("IDS_PROJNAME2");
                IErrorDialog pTemp = new SwingErrorDialog(this);
                if (pTemp != null)
                {
                    pTemp.display(msg, MessageIconKindEnum.EDIK_ICONINFORMATION, title);
                }
            }
            
            if (continueFlag)
            {
                // do the search
                m_Controller.setSearchString(searchStr);
                m_Controller.clearProjectList();
                FindUtilities.loadProjectListOfController(m_ProjectList, m_Controller);
                FindResults pResults = new FindResults();
                m_Controller.search(pResults);
                if (pResults != null)
                {
                    ETList<IElement> pElements = pResults.getElements();
                    ETList<IProxyDiagram> pDiagrams = pResults.getDiagrams();
                    if ( (pElements != null) && (pDiagrams != null))
                    {
                        // show the results
                        ETList< Object > findResults = FindUtilities.loadResultsIntoArray(pResults);
                        FindTableModel model = new FindTableModel(this, findResults);
                        m_ResultsTable.setModel(model);
                        
                        int countD = pDiagrams.size();
                        if (pElements.size() > 0 || countD > 0)
                        {
                            long totalC = pElements.size() + countD;
                            String strMsg = totalC + " ";
                            strMsg += FindUtilities.translateString("IDS_NUMFOUND");
                            m_Status.setText(strMsg);
                            //
                            // This is special code to aid in the automating testing.  We had no way to access
                            // the information in the grid from the automated scripts and/or VisualTest, so
                            // if a flag is set in the registry, we will dump the results of the grid to a
                            // specified file
                            //
                            /* TODO
                            if( GETDEBUGFLAG_RELEASE(_T("DumpGridResults"), 0))
                            {
                             CComBSTR file = CRegistry::GetItem( CString(_T("DumpGridResultsFile")), CString(_T("")));
                                 if (file.Length())
                                 {
                                     m_FlexGrid->SaveGrid(file, flexFileCommaText, CComVariant(FALSE));
                                 }
                             }
                             */
                        }
                        else
                        {
                            String noneStr = FindUtilities.translateString("IDS_NONEFOUND");
                            m_Status.setText(noneStr);
                        }
                    }
                    else
                    {
                        String canStr = FindUtilities.translateString("IDS_CANCELLED");
                        m_Status.setText(canStr);
                    }
                }
                else
                {
                    String str2 = FindUtilities.translateString("IDS_NONEFOUND2");
                    m_Status.setText(str2);
                }
                
            }
            update = false;
            m_FindCombo.setSelectedItem(searchStr);
        }
        else
        {
            m_Status.setText(NbBundle.getMessage(
                    DefaultFindDialogResource.class,"IDS_ERROR1"));
        }
        update = true;
        m_FindCombo.getEditor().selectAll();
    }
    
    public void onDblClickFindResults(int row, FindTableModel model, boolean isShift)
    {
        m_Status.setText("");
        boolean hr = FindUtilities.onDblClickFindResults(row, model, m_Controller, isShift);
        if (!hr)
        {
            String msg =  FindUtilities.translateString("IDS_NOPRESELEMENTS");
            m_Status.setText(msg);
        }
    }
    
    private void clearGrid()
    {
        // clear the results
        FindTableModel model = new FindTableModel(this, null);
        m_ResultsTable.setModel(model);
    }
    
    private void initDialog()
    {
        m_Status.setText("");
        FindUtilities.populateProjectList(m_ProjectList);
        FindUtilities.selectProjectInList( m_ProjectList );
        FindUtilities.populateComboBoxes("LastSearchStrings", m_FindCombo);
        m_FindCombo.getEditor().selectAll();
    }
    
    public void setController(FindController controller)
    {
        m_Controller = controller;
        m_Controller.setDialog(this);
    }
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt)
    {
        setVisible(false);
        dispose();
    }
    
    private boolean isMatchCase()
    {
        //kris - this is a new hidden property that simply remember the state of
        // the case sensitivity option. It is no longer driven off the "LongSearch"
        // property.
        return "PSK_YES".equals(ProductHelper.getPreferenceManager().getPreferenceValue("FindDialog", "CaseSensitivity"));
    }
    
    private boolean matchCaseEnabled () {
        return !"PSK_NEVER".equals(ProductHelper.getPreferenceManager().getPreferenceValue("FindDialog", "LongSearch"));
        
    }
    
    // Variables declaration - do not modify
    private javax.swing.JButton m_FindButton;
    private javax.swing.JButton m_CloseButton;
    private javax.swing.JLabel textLabel;
    private javax.swing.JComboBox m_FindCombo;
    private javax.swing.JCheckBox m_LoadExternalCheck;
    private javax.swing.JCheckBox m_MatchCaseCheck;
    private javax.swing.JCheckBox m_NavigateCheck;
    private javax.swing.JList m_ProjectList;
    private javax.swing.JLabel m_ProjectLabel;
    private javax.swing.JLabel resultLabel;
    private javax.swing.JTable m_ResultsTable;
    private javax.swing.JCheckBox m_SearchAliasCheck;
    private javax.swing.JRadioButton m_SearchDescriptionsRadio;
    private javax.swing.JRadioButton m_SearchElementsRadio;
    private javax.swing.JLabel m_Status;
    private javax.swing.JCheckBox m_WholeWordCheck;
    private javax.swing.JRadioButton m_WorkspaceRadio;
    private javax.swing.JCheckBox m_XpathCheck;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPrjList;
    
    // End of variables declaration
    private FindController m_Controller = null;
    private boolean update = true;
}
