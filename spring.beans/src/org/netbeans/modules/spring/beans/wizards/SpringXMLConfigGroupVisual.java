/*
 * SpringXMLConfigGroupVisual.java
 *
 * Created on 21 February, 2008, 8:15 PM
 */

package org.netbeans.modules.spring.beans.wizards;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import org.netbeans.api.project.Project;
import org.netbeans.modules.spring.api.beans.ConfigFileGroup;
import org.openide.util.NbBundle;

/**
 *
 * @author  Rohan Ranade (Rohan.Ranade@Sun.COM)
 */
public class SpringXMLConfigGroupVisual extends javax.swing.JPanel {
    private Project p;
    
    /** Creates new form SpringXMLConfigGroupVisual */
    public SpringXMLConfigGroupVisual(Project p, List<ConfigFileGroup> configFileGroups) {
        initComponents();
        this.p = p;
        groupsTable.getParent().setBackground(groupsTable.getBackground());
        groupsTable.setModel(new ConfigGroupSelectionTableModel(configFileGroups));
        groupsTable.getColumnModel().getColumn(0).setMaxWidth(60);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupsScrollPanel = new javax.swing.JScrollPane();
        groupsTable = new javax.swing.JTable();
        groupsLabel = new javax.swing.JLabel();

        groupsTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        groupsTable.setShowHorizontalLines(false);
        groupsTable.setShowVerticalLines(false);
        groupsTable.getTableHeader().setResizingAllowed(false);
        groupsTable.getTableHeader().setReorderingAllowed(false);
        groupsScrollPanel.setViewportView(groupsTable);

        groupsLabel.setText(org.openide.util.NbBundle.getMessage(SpringXMLConfigGroupVisual.class, "LBL_Config_File_Selection")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(groupsLabel)
                .addContainerGap(36, Short.MAX_VALUE))
            .add(groupsScrollPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(groupsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(groupsScrollPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel groupsLabel;
    private javax.swing.JScrollPane groupsScrollPanel;
    private javax.swing.JTable groupsTable;
    // End of variables declaration//GEN-END:variables
    
    
    public Collection<ConfigFileGroup> getSelectedConfigFileGroups() {
        return ((ConfigGroupSelectionTableModel)groupsTable.getModel()).getSelectedGroups();
    }
    
    private static final class ConfigGroupSelectionTableModel implements TableModel {
        
        private List<ConfigFileGroup> groups;
        private boolean[] selected;

        public ConfigGroupSelectionTableModel(List<ConfigFileGroup> groups) {
            this.groups = groups;
            selected = new boolean[groups.size()];
        }

        public int getRowCount() {
            return groups.size();
        }

        public int getColumnCount() {
            return 2;
        }

        public String getColumnName(int columnIndex) {
            return (columnIndex == 0) ? "" : NbBundle.getMessage(SpringXMLConfigGroupVisual.class, "LBL_Config_File_Group"); // NOI18N
        }

        public Class<?> getColumnClass(int columnIndex) {
            return (columnIndex == 0) ? Boolean.class : ConfigFileGroup.class;
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return columnIndex == 0;
        }

        public Object getValueAt(int rowIndex, int columnIndex) {
            return (columnIndex == 0) ? selected[rowIndex] : groups.get(rowIndex).getName();
        }

        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            selected[rowIndex] = (Boolean)aValue;
        }

        public void addTableModelListener(TableModelListener l) {
        }

        public void removeTableModelListener(TableModelListener l) {
        }
        
        public List<ConfigFileGroup> getSelectedGroups() {
            List<ConfigFileGroup> selectedGroups = new ArrayList<ConfigFileGroup>(groups.size());
            for (int i = 0; i < groups.size(); i++) {
                if (selected[i]) {
                    selectedGroups.add(groups.get(i));
                }
            }
            
            return selectedGroups;
        }
    }
}
