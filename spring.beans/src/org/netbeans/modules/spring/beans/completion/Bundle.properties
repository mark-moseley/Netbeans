# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

DESC_autowire_no=No autowiring at all. Bean references must be defined via a <code>ref</code> element. \
This is the default, and changing this is discouraged for larger deployments, since explicitly \
specifying collaborators gives greater control and clarity. To some extent, it is a form of \
documentation about the structure of a system.
DESC_autowire_byName=Autowiring by property name. This option will inspect the container and look for \
a bean named exactly the same as the property which needs to be autowired. For example, if you have a \
bean definition which is set to autowire by name, and it contains a <i>master</i> property (that is, it has a \
<i>setMaster(..)</i> method), Spring will look for a bean definition named master, and use it to set the \
property.
DESC_autowire_byType=Allows a property to be autowired if there is exactly one bean of the property type \
in the container. If there is more than one, a fatal exception is thrown, and this indicates that you may \
not use <i>byType</i> autowiring for that bean. If there are no matching beans, nothing happens; the \
property is not set. If this is not desirable, setting the <code>dependency-check="objects"</code> \
attribute value specifies that an error should be thrown in this case.
DESC_autowire_constructor=This is analogous to <i>byType</i>, but applies to constructor arguments. \
If there isn't exactly one bean of the constructor argument type in the container, a fatal error is \
raised.
DESC_autowire_autodetect=Chooses <i>constructor</i> or <i>byType</i> through introspection of the \
bean class. If a default constructor is found, the <i>byType</i> mode will be applied.
DESC_def_dep_check_none=No dependency checking. Properties of the bean which have no value specified \
for them are simply not set.
DESC_def_dep_check_simple=Dependency checking is performed for primitive types and collections \
(everything except collaborators).
DESC_def_dep_check_objects=Dependency checking is performed for collaborators only.
DESC_def_dep_check_all=Dependency checking is done for collaborators, primitive types and collections.
LBL_Unnamed=(unnamed)
# 0 - a bean name
LBL_BeanLabel=Bean <b><code>{0}</b></code>
# 0 - a bean name
# 1 - a comma-separated list of aliases
LBL_BeanLabelWithAliases=Bean <b></code>{0}</b></code> (aliases: <code>{1}</code>)
