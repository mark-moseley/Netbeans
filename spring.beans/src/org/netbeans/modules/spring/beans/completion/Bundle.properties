DESC_autowire_no=No autowiring at all. Bean references must be defined via a <code>ref</code> element. \
This is the default, and changing this is discouraged for larger deployments, since explicitly \
specifying collaborators gives greater control and clarity. To some extent, it is a form of \
documentation about the structure of a system.
DESC_autowire_byName=Autowiring by property name. This option will inspect the container and look for \
a bean named exactly the same as the property which needs to be autowired. For example, if you have a \
bean definition which is set to autowire by name, and it contains a <i>master</i> property (that is, it has a \
<i>setMaster(..)</i> method), Spring will look for a bean definition named master, and use it to set the \
property.
DESC_autowire_byType=Allows a property to be autowired if there is exactly one bean of the property type \
in the container. If there is more than one, a fatal exception is thrown, and this indicates that you may \
not use <i>byType</i> autowiring for that bean. If there are no matching beans, nothing happens; the \
property is not set. If this is not desirable, setting the <code>dependency-check="objects"</code> \
attribute value specifies that an error should be thrown in this case.
DESC_autowire_constructor=This is analogous to <i>byType</i>, but applies to constructor arguments. \
If there isn't exactly one bean of the constructor argument type in the container, a fatal error is \
raised.
DESC_autowire_autodetect=Chooses <i>constructor</i> or <i>byType</i> through introspection of the \
bean class. If a default constructor is found, the <i>byType</i> mode will be applied.
DESC_def_dep_check_none=No dependency checking. Properties of the bean which have no value specified \
for them are simply not set.
DESC_def_dep_check_simple=Dependency checking is performed for primitive types and collections \
(everything except collaborators).
DESC_def_dep_check_objects=Dependency checking is performed for collaborators only.
DESC_def_dep_check_all=Dependency checking is done for collaborators, primitive types and collections.
LBL_Bean_Implementation_Class=Class
LBL_Bean_File_Path=File
LBL_Bean_Id=Id
LBL_Bean_Names=Alias