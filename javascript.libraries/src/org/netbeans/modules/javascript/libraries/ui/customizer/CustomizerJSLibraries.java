/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */
package org.netbeans.modules.javascript.libraries.ui.customizer;

import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.libraries.Library;
import org.netbeans.api.project.libraries.LibraryChooser;
import org.netbeans.api.project.libraries.LibraryManager;
import org.netbeans.modules.javascript.libraries.util.JSLibraryProjectUtils;
import org.netbeans.spi.project.ui.support.ProjectCustomizer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbBundle;

/**
 *
 * @author  Quy Nguyen <quynguyen@netbeans.org>
 */
public final class CustomizerJSLibraries extends JPanel {

    private final ProjectCustomizer.Category category;
    private final Project project;
    private final DefaultListModel libraryListModel;

    /** Creates new form JavaScriptLibrariesCustomizer */
    public CustomizerJSLibraries(ProjectCustomizer.Category category, Project project) {
        this.category = category;
        this.project = project;
        this.libraryListModel = new DefaultListModel();
        
        initComponents();

        Set<String> libraryNames = JSLibraryProjectUtils.getJSLibraryNames(project);
        boolean isBroken = false;

        for (String name : libraryNames) {
            NamedLibrary namedLib = new NamedLibrary(name);
            if (namedLib.getLibrary() == null || !namedLib.getLibrary().getType().equals("javascript")) {
                isBroken = true;
            }
            libraryListModel.addElement(namedLib);
        }

        librariesJList.setModel(libraryListModel);
        librariesJList.addListSelectionListener(
                new ListSelectionListener() {

                    public void valueChanged(ListSelectionEvent e) {
                        updateRemoveButtonState();
                    }
                });

        updateRemoveButtonState();
        
        if (isBroken) {
            fireBrokenReferencesChange();
        }
    }

    private void fireBrokenReferencesChange() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        libLocationJLabel = new javax.swing.JLabel();
        libLocationJTextField = new javax.swing.JTextField();
        librariesListLabel = new javax.swing.JLabel();
        libTableScrollPane = new javax.swing.JScrollPane();
        librariesJList = new javax.swing.JList();
        addLibraryJButton = new javax.swing.JButton();
        removeLibraryJButton = new javax.swing.JButton();

        libLocationJLabel.setLabelFor(libLocationJTextField);
        org.openide.awt.Mnemonics.setLocalizedText(libLocationJLabel, org.openide.util.NbBundle.getMessage(CustomizerJSLibraries.class, "CustomizerJSLibraries.libLocationJLabel.text")); // NOI18N

        libLocationJTextField.setEditable(false);
        libLocationJTextField.setText(JSLibraryProjectUtils.getJSLibrarySourcePath(project));

        librariesListLabel.setLabelFor(librariesJList);
        org.openide.awt.Mnemonics.setLocalizedText(librariesListLabel, org.openide.util.NbBundle.getMessage(CustomizerJSLibraries.class, "CustomizerJSLibraries.librariesListLabel.text")); // NOI18N

        librariesJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        libTableScrollPane.setViewportView(librariesJList);

        org.openide.awt.Mnemonics.setLocalizedText(addLibraryJButton, org.openide.util.NbBundle.getMessage(CustomizerJSLibraries.class, "CustomizerJSLibraries.addLibraryJButton.text")); // NOI18N
        addLibraryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLibraryJButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeLibraryJButton, org.openide.util.NbBundle.getMessage(CustomizerJSLibraries.class, "CustomizerJSLibraries.removeLibraryJButton.text")); // NOI18N
        removeLibraryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLibraryJButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(libLocationJLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(libLocationJTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(librariesListLabel)
                            .add(libTableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(addLibraryJButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(removeLibraryJButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(libLocationJLabel)
                    .add(libLocationJTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(38, 38, 38)
                .add(librariesListLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(addLibraryJButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(removeLibraryJButton))
                    .add(libTableScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void addLibraryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLibraryJButtonActionPerformed

    Object[] objs = libraryListModel.toArray();
    Set<Library> currentLibs = new LinkedHashSet<Library>();
    for (Object o : objs) {
        Library lib = ((NamedLibrary)o).getLibrary();
        if (lib != null) {
            currentLibs.add(lib);
        }
    }
    
    LibraryChooser.Filter filter = JSLibraryProjectUtils.createDefaultFilter(currentLibs);
    LibraryManager manager = JSLibraryProjectUtils.getLibraryManager(project);
    
    Set<Library> addedLibraries = LibraryChooser.showDialog(manager, filter, null);
    
    if (addedLibraries != null) {
        List<Library> confirmedLibraries = new ArrayList<Library>();
        List<String> confirmedLibraryNames = new ArrayList<String>();
        
        for (Library library : addedLibraries) {
            boolean addLibrary = true;
            if (!JSLibraryProjectUtils.isLibraryFolderEmpty(project, library)) {
                Object result = JSLibraryProjectUtils.displayLibraryOverwriteDialog(library);
                addLibrary = (result == NotifyDescriptor.YES_OPTION);
            }

            if (addLibrary) {
                boolean foundMatch = false;
                for (int i = 0; i < libraryListModel.getSize(); i++) {
                    NamedLibrary namedLib = (NamedLibrary)libraryListModel.getElementAt(i);
                    if (namedLib.getLibraryName().equals(library.getName()) && namedLib.getLibrary() == null) {
                        foundMatch = true;
                        libraryListModel.removeElementAt(i);
                        libraryListModel.add(i, new NamedLibrary(library));
                        
                        fireBrokenReferencesChange();
                        break;
                    }
                }
                
                if (!foundMatch) {
                    libraryListModel.addElement(new NamedLibrary(library));
                    confirmedLibraryNames.add(library.getName());
                }
                
                confirmedLibraries.add(library);
            }
        }

        if (confirmedLibraries.size() > 0) {
            JSLibraryProjectUtils.addJSLibraryMetadata(project, confirmedLibraryNames);
            JSLibraryProjectUtils.extractLibrariesWithProgress(project, confirmedLibraries, JSLibraryProjectUtils.getJSLibrarySourcePath(project));
        }
    }
}//GEN-LAST:event_addLibraryJButtonActionPerformed

private void removeLibraryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLibraryJButtonActionPerformed

    int[] removedLibIndices = librariesJList.getSelectedIndices();
    assert removedLibIndices.length > 0;
    
    List<NamedLibrary> removedLibraries = new ArrayList<NamedLibrary>();
    for (int i = removedLibIndices.length-1; i >= 0; i--) {
        removedLibraries.add(((NamedLibrary)libraryListModel.getElementAt(removedLibIndices[i])));
    }
    
    List<Library> confirmedLibraries = new ArrayList<Library>();
    Set<NamedLibrary> removeLibraryMetadata = new LinkedHashSet<NamedLibrary>();
    removeLibraryMetadata.addAll(removedLibraries);
    
    for (NamedLibrary namedLibrary : removedLibraries) {
        Library library = namedLibrary.getLibrary();
        if (library == null) {
            continue;
        }
        
        boolean removeLibrary;
        if (!JSLibraryProjectUtils.isLibraryFolderEmpty(project, library)) {
            Object result = JSLibraryProjectUtils.displayLibraryDeleteConfirm(library);
            removeLibrary = (result == NotifyDescriptor.YES_OPTION);
            
            if (result == NotifyDescriptor.CANCEL_OPTION) {
                removeLibraryMetadata.remove(library);
            }
        } else {
            removeLibrary = true;
        }
        
        if (removeLibrary) {
            confirmedLibraries.add(library);
        }
    }
    
    if (removeLibraryMetadata.size() > 0) {
        for (int i = removedLibIndices.length-1; i >= 0; i--) {
            NamedLibrary namedLib = (NamedLibrary)libraryListModel.getElementAt(removedLibIndices[i]);
            if (removeLibraryMetadata.contains(namedLib)) {
                libraryListModel.remove(removedLibIndices[i]);
            }
        }
        
        List<String> metadataNames = new ArrayList<String>();
        for (NamedLibrary lib : removeLibraryMetadata) {
            metadataNames.add(lib.getLibraryName());
        }
        JSLibraryProjectUtils.removeJSLibraryMetadata(project, metadataNames);
    }
    
    if (confirmedLibraries.size() > 0) {
        JSLibraryProjectUtils.deleteLibrariesWithProgress(project, confirmedLibraries, JSLibraryProjectUtils.getJSLibrarySourcePath(project));
    }
}//GEN-LAST:event_removeLibraryJButtonActionPerformed

    private static final class NamedLibrary {

        private Library library;
        private String libraryName;
        
        public NamedLibrary(String libraryName) {
            this.libraryName = libraryName;
            this.library = LibraryManager.getDefault().getLibrary(libraryName);
        }
        
        public NamedLibrary(Library lib) {
            this.library = lib;
            this.libraryName = lib.getName();
        }

        public Library getLibrary() {
            return library;
        }
        
        public void setLibrary(Library library, String libraryName) {
            this.library = library;
            this.libraryName = libraryName;
        }
        
        public String getLibraryName() {
            return libraryName;
        }
        
        @Override
        public String toString() {
            if (library != null) {
                return library.getDisplayName();
            } else {
                return NbBundle.getMessage(CustomizerJSLibraries.class, "CustomizerJSLibraries_MissingReference", libraryName);
            }
        }

        @Override
        public int hashCode() {
            return libraryName.hashCode();
        }

        @Override
        public boolean equals(Object obj) {
            if (obj instanceof NamedLibrary) {
                return ((NamedLibrary)obj).getLibraryName().equals(this.getLibraryName());
            } else {
                return false;
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addLibraryJButton;
    private javax.swing.JLabel libLocationJLabel;
    private javax.swing.JTextField libLocationJTextField;
    private javax.swing.JScrollPane libTableScrollPane;
    private javax.swing.JList librariesJList;
    private javax.swing.JLabel librariesListLabel;
    private javax.swing.JButton removeLibraryJButton;
    // End of variables declaration//GEN-END:variables
    
    private void updateRemoveButtonState() {
        removeLibraryJButton.setEnabled(librariesJList.getSelectedIndex() >= 0);
    }
}
