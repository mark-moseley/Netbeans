/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.javascript.libraries.ui.customizer;

import java.io.File;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.libraries.Library;
import org.netbeans.modules.javascript.libraries.util.JSLibraryProjectUtils;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;

/**
 *
 * @author  Quy Nguyen<quynguyen@netbeans.org>
 */
public final class LibraryDirectoryPanel extends JPanel {
    private final String libraryDisplayName;
    private final File projectFld;
    private final Project project;
    
    /** Creates new form LibraryDirectoryPanel */
    public LibraryDirectoryPanel(Library library, Project project, final JButton okButton) {
        this.libraryDisplayName = library.getDisplayName();
        this.projectFld = FileUtil.toFile(project.getProjectDirectory());
        this.project = project;
        
        initComponents();
        
        final String projectDir = FileUtil.getFileDisplayName(project.getProjectDirectory());
        final String baseDir = JSLibraryProjectUtils.getJSLibrarySourcePath(project);
        
        destinationField.setText(JSLibraryProjectUtils.getDefaultRelativeLibraryPath(project, library));
        destinationField.getDocument().addDocumentListener(new DocumentListener() {

            public void insertUpdate(DocumentEvent e) {
                processTextChange(projectDir, baseDir, okButton);
            }

            public void removeUpdate(DocumentEvent e) {
                processTextChange(projectDir, baseDir, okButton);
            }

            public void changedUpdate(DocumentEvent e) {
                processTextChange(projectDir, baseDir, okButton);
            }
            
        });
        
        processTextChange(projectDir, baseDir, okButton);
    }
    
    public String getDestination() {
        String path = destinationField.getText();
        if (path.endsWith(File.separator) || path.endsWith("/")) {
            path.substring(0, path.length()-1);
        }
        
        return path;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        browseButton = new javax.swing.JButton();
        selectionLabel = new javax.swing.JLabel();
        libraryNameLabel = new javax.swing.JLabel();
        destinationField = new javax.swing.JTextField();
        errorMessage = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(LibraryDirectoryPanel.class, "LibraryDirectoryPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        selectionLabel.setLabelFor(destinationField);
        org.openide.awt.Mnemonics.setLocalizedText(selectionLabel, org.openide.util.NbBundle.getMessage(LibraryDirectoryPanel.class, "LibraryDirectoryPanel.selectionLabel.text")); // NOI18N

        libraryNameLabel.setText(org.openide.util.NbBundle.getMessage(LibraryDirectoryPanel.class, "LibraryDirectoryPanel.libraryNameLabel.text", new Object[] {this.libraryDisplayName})); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(selectionLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(destinationField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(browseButton))
                    .add(libraryNameLabel)
                    .add(errorMessage, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(libraryNameLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(selectionLabel)
                    .add(browseButton)
                    .add(destinationField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 34, Short.MAX_VALUE)
                .add(errorMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed

    updateFolder(destinationField);
}//GEN-LAST:event_browseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField destinationField;
    private javax.swing.JLabel errorMessage;
    private javax.swing.JLabel libraryNameLabel;
    private javax.swing.JLabel selectionLabel;
    // End of variables declaration//GEN-END:variables

    public void fileCreationFailed() {
        errorMessage.setText(NbBundle.getMessage(LibraryDirectoryPanel.class, "LibraryDirectoryPanel_CouldNotCreateError"));
        errorMessage.setVisible(true);
    }
    
    private void processTextChange(String projectDir, String webRoot, JButton okButton) {
        File fileName = new File(destinationField.getText());
        File folder = fileName.isAbsolute() ? fileName : new File(projectFld, fileName.getPath());
        
        try {
            folder = folder.getCanonicalFile();
        } catch (IOException ex) {
            errorMessage.setText(NbBundle.getMessage(LibraryDirectoryPanel.class, "LibraryDirectoryPanel_InvalidFolderError"));
            errorMessage.setVisible(true);
            okButton.setEnabled(false);
            return;
        }
        
        String fullPath = FileUtil.normalizeFile(folder).getAbsolutePath();
        fullPath = fullPath.endsWith(File.separator) ? fullPath : fullPath + File.separator;
        webRoot = webRoot.endsWith(File.separator) ? webRoot : webRoot + File.separator;
        projectDir = projectDir.endsWith(File.separator) ? projectDir : projectDir + File.separator;
        
        
        if (fullPath.startsWith(webRoot) || fullPath.startsWith(projectDir)) {
            errorMessage.setText("");
            errorMessage.setVisible(false);
            okButton.setEnabled(true);
        } else {
            errorMessage.setText(NbBundle.getMessage(LibraryDirectoryPanel.class, "LibraryDirectoryPanel_OutOfRangeError"));
            errorMessage.setVisible(true);
            okButton.setEnabled(false);
        }
    }
    
    private void updateFolder(JTextField textField) {
        JFileChooser chooser = new JFileChooser();
        FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        File fileName = new File(textField.getText());
        File folder = fileName.isAbsolute() ? fileName : new File(projectFld, fileName.getPath());
        if (folder.exists()) {
            chooser.setSelectedFile(folder);
        } else {
            chooser.setSelectedFile(projectFld);
        }
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File selected = FileUtil.normalizeFile(chooser.getSelectedFile());
            String newFolder;
            
            newFolder = selected.getPath();
            textField.setText(newFolder);
        }
    }
    
}
