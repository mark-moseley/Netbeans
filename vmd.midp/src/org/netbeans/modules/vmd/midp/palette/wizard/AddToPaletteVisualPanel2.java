/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 */
package org.netbeans.modules.vmd.midp.palette.wizard;

import javax.swing.*;
import java.util.*;
import java.util.List;
import java.awt.*;

/**
 * @author David Kaspar
 */
public final class AddToPaletteVisualPanel2 extends JPanel {

    private Collection<ComponentInstaller.Item> items;

    public AddToPaletteVisualPanel2() {
        initComponents();
        list.setCellRenderer (new ItemRenderer ());
    }

    public String getName() {
        return "Select Classes";
    }

    public void setItems (Collection<ComponentInstaller.Item> items) {
        this.items = items;
        reload ();
    }

    public void reload () {
        final ArrayList<ComponentInstaller.Item> lst;
        if (! cLibraries.isSelected ())
            lst = new ArrayList<ComponentInstaller.Item> (items);
        else {
            lst = new ArrayList<ComponentInstaller.Item> ();
            for (ComponentInstaller.Item item : items)
                if (item.isInSource ())
                    lst.add (item);
        }
        Collections.sort (lst, new Comparator<ComponentInstaller.Item>() {
            public int compare (ComponentInstaller.Item o1, ComponentInstaller.Item o2) {
                return o1.getFQN ().compareTo (o2.getFQN ());
            }
        });
        list.setModel (new AbstractListModel() {
            public int getSize () { return lst.size (); }
            public Object getElementAt (int i) { return lst.get (i); }
        });
        if (lst.size () > 0)
            list.setSelectionInterval (0, lst.size () - 1);
    }

    public List<ComponentInstaller.Item> getSelectedItems () {
        ArrayList<ComponentInstaller.Item> lst = new ArrayList<ComponentInstaller.Item> ();
        for (Object o : list.getSelectedValues ())
            lst.add ((ComponentInstaller.Item) o);
        return lst;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        bSelectAll = new javax.swing.JButton();
        bDeselectAll = new javax.swing.JButton();
        cLibraries = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "&Found MIDP Classes - select those you want to add:");

        jScrollPane1.setViewportView(list);

        org.openide.awt.Mnemonics.setLocalizedText(bSelectAll, "&Select All");
        bSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bSelectAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(bDeselectAll, "&Deselect All");
        bDeselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDeselectAllActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cLibraries, "Show Components from &Libraries");
        cLibraries.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        cLibraries.setMargin(new java.awt.Insets(0, 0, 0, 0));
        cLibraries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cLibrariesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 13, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(bSelectAll)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(bDeselectAll))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, cLibraries))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cLibraries)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(bDeselectAll)
                    .add(bSelectAll))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void cLibrariesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cLibrariesActionPerformed
    reload ();
}//GEN-LAST:event_cLibrariesActionPerformed

private void bDeselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDeselectAllActionPerformed
    list.setSelectedIndices(new int[0]);
}//GEN-LAST:event_bDeselectAllActionPerformed

private void bSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bSelectAllActionPerformed
    int size = list.getModel().getSize();
    if (size > 0)
        list.setSelectionInterval(0, size - 1);
}//GEN-LAST:event_bSelectAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bDeselectAll;
    private javax.swing.JButton bSelectAll;
    private javax.swing.JCheckBox cLibraries;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list;
    // End of variables declaration//GEN-END:variables

    private static class ItemRenderer extends DefaultListCellRenderer {

        public Component getListCellRendererComponent (JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            return super.getListCellRendererComponent (list, ((ComponentInstaller.Item) value).getFQN (), index, isSelected, cellHasFocus);
        }

    }

}

