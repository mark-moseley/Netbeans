/*
 * DataSetDatabindingElement.java
 *
 * Created on June 3, 2008, 4:20 PM
 */
package org.netbeans.modules.vmd.midp.propertyeditors;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListDataListener;
import org.netbeans.modules.vmd.api.model.DesignComponent;
import org.netbeans.modules.vmd.api.model.DesignDocument;
import org.netbeans.modules.vmd.api.model.PropertyValue;
import org.netbeans.modules.vmd.midp.components.MidpDocumentSupport;
import org.netbeans.modules.vmd.midp.components.MidpTypes;
import org.netbeans.modules.vmd.midp.components.categories.DatabindingCategoryCD;
import org.netbeans.modules.vmd.midp.components.general.ClassCD;

/**
 *
 * @author Karol Harezlak
 */
class DataSetElementUI extends javax.swing.JPanel {

    private static String NULL = "<null>"; //TODO Localized
    private String dataSetPropertyName;
    private String dataSetExpression;

    /** Creates new form DataSetDatabindingElement */
    DataSetElementUI(String dataSetPropertyName, String dataSetexpression) {
        this.dataSetPropertyName = dataSetPropertyName;
        this.dataSetExpression = dataSetexpression;
        initComponents();
        jComboBoxDataSets.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                changeComponentsState((String) jComboBoxDataSets.getSelectedItem());
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxDataSets = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldExpression = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabelExpression = new javax.swing.JLabel();

        jComboBoxDataSets.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxDataSets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDataSetsActionPerformed(evt);
            }
        });

        jLabel1.setText(org.openide.util.NbBundle.getMessage(DataSetElementUI.class, "DataSetElementUI.jLabel1.text")); // NOI18N

        jTextFieldExpression.setText(org.openide.util.NbBundle.getMessage(DataSetElementUI.class, "DataSetElementUI.jTextFieldExpression.text")); // NOI18N
        jTextFieldExpression.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText(org.openide.util.NbBundle.getMessage(DataSetElementUI.class, "DataSetElementUI.jLabel3.text")); // NOI18N

        jLabelExpression.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelExpression.setText(org.openide.util.NbBundle.getMessage(DataSetElementUI.class, "DataSetElementUI.jLabelExpression.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBoxDataSets, 0, 229, Short.MAX_VALUE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(jLabel3))
                    .add(layout.createSequentialGroup()
                        .add(53, 53, 53)
                        .add(jLabelExpression, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(1, 1, 1)
                        .add(jTextFieldExpression, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBoxDataSets, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 28, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelExpression)
                    .add(jTextFieldExpression, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(160, 160, 160))
        );
    }// </editor-fold>//GEN-END:initComponents

private void jComboBoxDataSetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDataSetsActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jComboBoxDataSetsActionPerformed
    
    void updateComponent(final DesignComponent component) {
        component.getDocument().getTransactionManager().readAccess(new Runnable() {

            public void run() {
                final DesignDocument document = component.getDocument();
                
                if (document == null)
                    return;
                final List<String> names = new ArrayList<String>();
                names.add(NULL);
                final Collection<DesignComponent> components = MidpDocumentSupport.getCategoryComponent(document, DatabindingCategoryCD.TYPEID).getComponents();
                for (DesignComponent c : components) {
                    names.add( (String) c.readProperty(ClassCD.PROP_INSTANCE_NAME).getPrimitiveValue());
                }
                jComboBoxDataSets.setModel(new ComboBoxModel() {
                    
                    private String selectedItem;
                    
                    public void setSelectedItem(final Object item) {
                        if (item instanceof String) {
                            component.getDocument().getTransactionManager().readAccess(new Runnable() {

                                public void run() {
                                    String n = (String) item;
                                    for (DesignComponent c : components ) {
                                        if (c.readProperty(ClassCD.PROP_INSTANCE_NAME).getPrimitiveValue().equals(n) || n.equals(NULL)) {
                                            selectedItem = (String) item;
                                            break;
                                        }
                                    }
                                }
                            });
                        } else if (item == null) {
                            this.selectedItem = NULL;
                        } else {
                            throw new IllegalArgumentException("Setting argumant is not String type"); //NOI18N
                        }
                    }

                    public Object getSelectedItem() {
                        return this.selectedItem;
                        
                    }

                    public int getSize() {
                        return names.size();
                    }

                    public Object getElementAt(int index) {  
                        return names.get(index);
                    }

                    public void addListDataListener(ListDataListener l) {
                    }

                    public void removeListDataListener(ListDataListener l) {
                    }
                });
                final DesignComponent dataSet = component.readProperty(dataSetPropertyName).getComponent();
                if (dataSet == null)
                    return;
              String name = (String) dataSet.readProperty(ClassCD.PROP_INSTANCE_NAME).getPrimitiveValue();
              changeComponentsState(name);
            }
        });
    }
           
    void saveToModel(final DesignComponent component) {
        final DesignDocument document = component.getDocument();
        document.getTransactionManager().writeAccess(new Runnable() {
            public void run() {
                String n = (String) jComboBoxDataSets.getSelectedItem();
                final Collection<DesignComponent> components = MidpDocumentSupport.getCategoryComponent(document, DatabindingCategoryCD.TYPEID).getComponents();
                for (DesignComponent c : components ) {
                    if (c.readProperty(ClassCD.PROP_INSTANCE_NAME).getPrimitiveValue().equals(n)) {
                        component.writeProperty(dataSetPropertyName, PropertyValue.createComponentReference(c));
                        component.writeProperty(dataSetExpression, MidpTypes.createStringValue(c.readProperty(ClassCD.PROP_INSTANCE_NAME)+"."+jTextFieldExpression.getText())); //NOI18N
                        break;
                    }
                }
            }
        });
    }
    
    void resetValuesInModel(final DesignComponent component) {
        final DesignDocument document = component.getDocument();
        document.getTransactionManager().writeAccess(new Runnable() {
            public void run() {
                component.writeProperty(dataSetPropertyName, PropertyValue.createNull()); 
                component.writeProperty(dataSetExpression, PropertyValue.createNull());
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBoxDataSets;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelExpression;
    private javax.swing.JTextField jTextFieldExpression;
    // End of variables declaration//GEN-END:variables
    
     private void changeComponentsState(String name) {                   
                if (name != null) {
                    enableComponents(name);
                } else {
                    disableComponents();
                }
                safeRepaint();
    }
    
    
    private void enableComponents(String name) {
        jComboBoxDataSets.setSelectedItem(name);
        jLabelExpression.setText(name + "."); //NOI18N
        jTextFieldExpression.setEnabled(true);
    }
    
    private void disableComponents() {
        jComboBoxDataSets.setSelectedItem(null);
        jTextFieldExpression.setText(null);
        jLabelExpression.setText(NULL + "."); //NOI18N
        jTextFieldExpression.setEnabled(false);
    }
    
    private void safeRepaint() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                DataSetElementUI.this.repaint();
            }
        });
    } 
    
}
