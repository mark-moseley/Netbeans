# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.



########### tokens #############################################################

AST {
    process:org.netbeans.modules.languages.html.HTML.process;
}


TOKEN:php_comment:( "/*" - "*/" )
TOKEN:php_line_comment:( ("#"|"//") [^ "\n" "\r"]* )
TOKEN:php_keyword:(
    "__CLASS__" |
    "__FILE__" |
    "__FUNCTION__" |
    "__LINE__" |
    "__METHOD__" |
    "abstract" |
    "and" |
    "array" |
    "as" |
    "break" |
    "case" |
    "catch" |
    "cfunction" |
    "class" |
    "clone" |
    "const" |
    "continue" |
    "declare" |
    "default" |
    "do" |
    "echo" |
    "else" |
    "elseif" |
    "enddeclare" |
    "endfor" |
    "endforeach" |
    "endif" |
    "endswitch" |
    "endwhile" |
    "exception" |
    "extends" |
    "final" |
    "for" |
    "foreach" |
    "function" |
    "global" |
    "if" |
    "implements" |
    "interface" |
    "list" |
    "new" |
    "old_function" |
    "or" |
    "php_user_filter" |
    "print" |
    "private" |
    "protected" |
    "public" |
    "return" |
    "static" |
    "switch" |
    "throw" |
    "try" |
    "use" |
    "while" |
    "xor"
)

TOKEN:php_builtin_function: (
    "define" |
    "defined" |
    "die" |
    "empty" |
    "eval" |
    "exit" |
    "isset" |
    "unset"
)

TOKEN:php_include_keyword: (
    "include" |
    "include_once" |
    "require" |
    "require_once"
)

TOKEN:php_type_cast: (
    ( "(" [" " "\t"]* "array" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "bool" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "boolean" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "float" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "int" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "integer" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "real" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "object" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "string" [" " "\t"]* ")" )
)

TOKEN:php_operator: (
    "=" | "+=" | "-=" | "*=" | "/=" | ".=" | "%=" | "&=" | "|=" | "^=" | "~=" | "<<=" | ">>=" |
    "==" | "!=" | "===" | "!==" | "<>" | ">" | "<" | ">=" | "<=" | 
    "<<" | ">>" | "++" | "--" |
    "&&" | "||" | "->" | "=>" | "::" |
    "?" | ":" | "*" | "/" | "-" | "+" | "." | "," |
    "(" | ")" | "[" | "]" | "!" | "@" | "%" | "^" | "&" |
    "~" | "|" | "\\"
)

TOKEN:php_separator: ( [";" "{" "}"] )

TOKEN:php_string:( "\"" [^ "\"" "\n" "\r"]* "\"" )
TOKEN:php_string: ( "\'" [^ "\'" "\n" "\r"]* "\'" )
TOKEN:php_string: ("`" [^ "`" "\n" "\r"]* "`" )
TOKEN:php_number:( ["0" - "9"] ["0" - "9" "."]* )
TOKEN:php_integer:( ["0" - "9"] ["0" - "9"]* )
TOKEN:php_whitespace:( [" " "\t" "\n" "\r"]+ )
TOKEN:php_variable:( 
    "$" ["a"-"z" "A"-"Z" "_"] 
    ["a"-"z" "A"-"Z" "0"-"9" "_"]*
)
TOKEN:php_identifier:( 
    ["a"-"z" "A"-"Z" "_"] 
    ["a"-"z" "A"-"Z" "0"-"9" "_"]*
)

TOKEN:php_delimiter: ( "?>" | "%>" ):<DEFAULT>

########### grammar ############################################################

SKIP:php_whitespace
SKIP:php_comment
SKIP:php_line_comment

S = ( SourceElement ) +;

SourceElement = Statement;

Statement = Block | BreakStatement | ClassDefinition | ContinueStatement | DoStatement |
    EchoStatement | EmptyStatement | ExpressionStatement | ForEachStatement | ForStatement |
    FunctionDefinition | GlobalStatement | IfStatement | InterfaceDefinition |
    ReturnStatement | SwitchStatement | StaticStatement | WhileStatement;

Block = "{" StatementList "}";
StatementList = ( Statement )*;

BreakStatement = "break" [ <php_integer> ] ";";

ContinueStatement = "continue" [ <php_integer> ] ";";

DoStatement = "do" Statement WhileCommon ";";

EchoStatement = ("echo" | "print") EchoArguments ";";
EchoArguments = ( "(" [ Expression ] ")" ) | [ Expression ( "," Expression )* ];

EmptyStatement = ";";

ExpressionStatement = Expression ";";

ForEachStatement = ForeachCommon ( ForeachStatementCurly | ForeachStatementColon );
ForeachStatementCurly = Statement;
ForeachStatementColon = ":" StatementList "endforeach" ";";
ForeachCommon = "foreach" "(" Expression "as" <php_variable> [ "=>" <php_variable> ] ")";

ForStatement = ForCommon ( ForStatementCurly | ForStatementColon );
ForCommon = "for" "(" Expression ";" Expression ";" Expression ")";
ForStatementCurly =  Statement;
ForStatementColon = ":" StatementList "endfor" ";";

GlobalStatement = "global" <php_variable> ( "," <php_variable> )* ";";

IfStatement = IfCommon ( IfStatementCurly | IfStatementColon );
IfCommon = "if" "(" Expression ")";
IfStatementCurly = Statement ( "elsif" "(" Expression ")" Statement )* [ "else" Statement ];
IfStatementColon = ":" StatementList
    ( "elsif" "(" Expression ")" ":" StatementList )* [ "else" ":" StatementList ] "endif" ";";

ReturnStatement = "return" [ Expression ] ";";

SwitchStatement = SwitchCommon ( SwitchStatementCurly | SwitchStatementColon );
SwitchCommon = "switch" "(" Expression ")";
SwitchStatementCurly = "{" ( CaseClause )* [ DefaultClause ] ( CaseClause )* "}";
CaseClause = "case" Expression ":" StatementList;
DefaultClause = "default" ":" StatementList;
SwitchStatementColon = ":" ( CaseClause )* [ DefaultClause ] ( CaseClause )* "endswitch" ";";

StaticStatement = "static" StaticVariable "=" Expression ";";
StaticVariable = <php_variable>;

WhileStatement = WhileCommon ( WhileStatementCurly | WhileStatementColon );
WhileCommon = "while" "(" Expression ")";
WhileStatementCurly = Statement;
WhileStatementColon = ":" StatementList "endwhile" ";";

Expression = LogicalORExpression | DefineExpression;
LogicalORExpression = LogicalXORExpression ( "or" LogicalXORExpression )*;
LogicalXORExpression = LogicalANDExpression ( "xor" LogicalANDExpression )*;
LogicalANDExpression = AssignmentExpression ( "and" AssignmentExpression )*;
AssignmentExpression = ConditionalExpression ( AssignmentOperator ConditionalExpression )*;
AssignmentOperator = "=" | "+=" | "-=" | "*=" | "/=" | ".=" | "%=" | "&=" | "|=" | "^=" | "~=" | "<<=" | ">>=";
ConditionalExpression = LogicalORORExpression [ "?" Expression ":" Expression ];
LogicalORORExpression = LogicalANDANDExpression ( "||" LogicalANDANDExpression )*;
LogicalANDANDExpression = BitwiseORExpression ( "&&" BitwiseORExpression )*;
BitwiseORExpression = BitwiseXORExpression ( "|" BitwiseXORExpression )*;
BitwiseXORExpression = BitwiseANDExpression ( "^" BitwiseANDExpression )*;
BitwiseANDExpression = EqualityExpression ( "&" EqualityExpression )*;
EqualityExpression = RelationalExpression [ EqualityOperator RelationalExpression ];
EqualityOperator = "==" | "!=" | "<>" | "===" | "!==";
RelationalExpression = BitShiftExpression [ RelationalOperator BitShiftExpression ];
RelationalOperator = "<" | "<=" | ">" | ">=";
BitShiftExpression = AdditiveExpression ( BitShiftOperator AdditiveExpression )*;
BitShiftOperator = "<<" | ">>";
AdditiveExpression = MultiplicativeExpression ( AdditiveOperator MultiplicativeExpression )*;
AdditiveOperator = "+" | "-" | ".";
MultiplicativeExpression = PostfixExpression ( MultiplicativeOperator PostfixExpression )*;
MultiplicativeOperator = "*" | "/" | "%";
PostfixExpression = UnaryExpression [ "++" | "--" ];
UnaryExpression = LeftHandSideExpression | ( UnaryOperator UnaryExpression );
UnaryOperator = "!" | "~" | "-" | "++" | "--" | "@" | <php_type_cast>;
LeftHandSideExpression = CallExpression | NewExpression | BuiltInCallExpression |
        IncludeExpression | ArrayExpression;
CallExpression = PrimaryExpression ( MemberOperator | Arguments )*;
DefineExpression = "define" "(" ConstantName "," Expression [ "," Expression ] ")";
ConstantName = <php_string>;

ArrayExpression = "array" "(" [ ArrayElement ( "," ArrayElement )* ] ")";
ArrayElement = AssociativeArrayElement | Expression;
AssociativeArrayElement = ArrayId "=>" Expression;
ArrayId = <php_integer> | <php_string>;

BuiltInCallExpression = <php_builtin_function> Arguments;

IncludeExpression = <php_include_keyword> IncludeArgument;
IncludeArgument = Expression;

NewExpression = [ "&" ] "new" <php_identifier> Arguments;
MemberOperator = "[" [ Expression ] "]" | ClassMemberOperator;
ClassMemberOperator = "->" <php_identifier>;
Arguments = "(" [ Expression ( "," Expression )* ] ")";
PrimaryExpression = ConstantExpression | ClassStaticPrimaryExpression | <php_variable> |
    "(" Expression ")";
ConstantExpression = <php_number> | <php_string> | "null" | "true" | "false";
ClassStaticPrimaryExpression = <php_identifier> [ "::" ( <php_identifier> | <php_variable> )];

FunctionDefinition = FunctionDeclarartion FunctionBody;
FunctionDeclarartion = "function" [ "&" ] FunctionName "(" FormalParameterList ")";
FunctionName = <php_identifier>;
FormalParameterList = [ FormalParameter ( "," FormalParameter )*];
FormalParameter = [ "&" ] <php_variable> [ "=" ConstantExpression ];
FunctionBody = Block;

InterfaceDefinition = "interface" ClassName [ "extends"  <php_identifier> ( "," <php_identifier> )* ] InterfaceBody;
InterfaceBody = "{" [ InterfaceStatementList ] "}";
InterfaceStatementList = InterfaceStatement ";" (InterfaceStatement ";")*;
InterfaceStatement = FunctionDeclarartion | ClassConstDeclaration;
ClassConstDeclaration = "const" <php_identifier> "=" ConstantExpression;

ClassDefinition = [ "abstract" ] "class" ClassName [ "extends"  <php_identifier> ]
    [ "implements" <php_identifier> ( "," <php_identifier> )* ] ClassBody;
ClassName = <php_identifier>;
ClassBody = "{" ( ClassStatement )* "}";
ClassStatement = (( ClassVarDeclaration | ClassConstDeclaration | AbstractFunctionDeclarartion) ";" ) |
    ClassDefinition | FunctionDefinition | InterfaceDefinition;
ClassVarDeclaration = ( "var" | "public" | "protected" | "private" ) <php_variable> [ "=" ConstantExpression];
AbstractFunctionDeclarartion = "abstract" FunctionDeclarartion;

########## Errors ##############################################################

MARK:ERROR: {
    type:"Error";
    message:"LBL_SYNTAX_ERROR";
}

MARK:error: {
    type:"Error";
    message:"LBL_UNEXPECTED_CHARACTER";
}

BUNDLE "org.netbeans.modules.languages.php.resources.Bundle"

########### code folding #######################################################

FOLD:ClassBody: {
    expand_type_action_name:"Expand Classes";
    collapse_type_action_name:"Collapse Classes";
}
FOLD:FunctionBody: {
    expand_type_action_name:"Expand Methods";
    collapse_type_action_name:"Collapse Methods";
}
FOLD:InterfaceBody: {
    expand_type_action_name:"Expand Classes";
    collapse_type_action_name:"Collapse Classes";
}
FOLD:php_comment: {
    expand_type_action_name:"Expand Comments";
    collapse_type_action_name:"Collapse Comments";
}
FOLD:php_line_comment: {
    expand_type_action_name:"Expand Comments";
    collapse_type_action_name:"Collapse Comments";
}

########### navigator ##########################################################

NAVIGATOR:FunctionDeclarartion: {
    display_name: org.netbeans.modules.languages.php.Php.functionName;
    icon: "org/netbeans/modules/languages/resources/method.gif";
    isLeaf: "true";
}

# NAVIGATOR:VariableDeclaration: {
#    display_name: "$php_identifier$";
#    tooltip: "$js_identifier$ $Initializer$";
#    icon: "/org/netbeans/modules/languages/resources/variable.gif";
#}

NAVIGATOR:ClassDefinition: {
    display_name: org.netbeans.modules.languages.php.Php.className;
    icon: "org/netbeans/modules/languages/resources/class.gif";
    isLeaf: "false";
}

NAVIGATOR:DefineExpression: {
    display_name: org.netbeans.modules.languages.php.Php.constantName;
    icon: "org/netbeans/modules/languages/php/resources/constant.gif";
    isLeaf: "true";
 
}

NAVIGATOR:InterfaceDefinition: {
    display_name: org.netbeans.modules.languages.php.PhpView.className;
    icon: "org/netbeans/modules/languages/resources/class.gif";
    isLeaf: "false";
}
########### colors #############################################################

COLOR:end_element: {
    color_name: "element";
    default_coloring: "keyword";
}
COLOR:element_end: {
    color_name: "element";
    default_coloring: "keyword";
}
    
COLOR:attribute_value: {
    default_coloring: "string";
}
COLOR:line_comment: {
    default_coloring: "comment";
}
COLOR:php_variable: {
    foreground_color: "0x098618";
}
COLOR:ClassMemberOperator: {
    color_name: "php_variable";
    foreground_color: "0x0dc223";
}

COLOR:php_separator: {
    color_name: "php_operator";
}

COLOR:php_builtin_function: {
    default_coloring: "keyword";
}

COLOR:php_include_keyword: {
    default_coloring: "keyword";
}

COLOR:php_type_cast: {
    default_coloring: "keyword";
}

COMPLETE "(:)"
COMPLETE "{:}"
COMPLETE "\":\""
COMPLETE "':'"
COMPLETE "[:]"

INDENT "(:)"
INDENT "{:}"
INDENT "[:]"
INDENT "\\s*(((if|while)\\s*\\(|else\\s*|else\\s+if\\s*\\(|for\\s*\\(.*\\))[^{;]*)"

#STORE:php_identifier: {
#    context:"Folder";
#    name:"$PropertyName$";
#}

