# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.

AST {
  skip_embedded:"true";
} 

########### tokens #############################################################


TOKEN:php_comment:( "/*" - "*/" )
TOKEN:php_line_comment:( ("#"|"//") [^ "\n" "\r"]* )
TOKEN:php_keyword:(
    "abstract" |
    "and" |
    "array" |
    "as" |
    "break" |
    "case" |
    "catch" |
    "class" |
    "const" |
    "continue" |
    "declare" |
    "default" |
    "do" |
    "echo" |
    "else" |
    "elseif" |
    "enddeclare" |
    "endfor" |
    "endforeach" |
    "endif" |
    "endswitch" |
    "endwhile" |
    "extends" |
    "final" |
    "for" |
    "foreach" |
    "function" |
    "global" |
    "if" |
    "implements" |
	"instanceof" | 
    "interface" |
    "list" |
    "new" |
    "old_function" |
    "or" |
    "private" |
    "protected" |
    "public" |
    "return" |
    "static" |
    "switch" |
    "throw" |
    "try" |
    "while" |
    "xor"
)

TOKEN:php_magic_constants: (
    "__CLASS__" |
    "__FILE__" |
    "__FUNCTION__" |
    "__LINE__" |
    "__METHOD__" 
)

TOKEN:php_builtin_function: (
	"define" |
    "defined" |
    "empty" |
    "eval" |
    "isset" |
    "unset"
)

TOKEN:php_without_arg_function: (
	"die" |
	"exit"
)

TOKEN:php_language_construct_keyword: (
    "include" |
    "include_once" |
    "require" |
    "require_once" |
    "print" |
    "clone"
)

TOKEN:php_type_cast: (
    ( "(" [" " "\t"]* "array" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "bool" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "boolean" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "float" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "int" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "integer" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "real" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "object" [" " "\t"]* ")" ) |
    ( "(" [" " "\t"]* "string" [" " "\t"]* ")" )
)

TOKEN:php_operator: (
    "=" | "+=" | "-=" | "*=" | "/=" | ".=" | "%=" | "&=" | "|=" | "^=" | "~=" | "<<=" | ">>=" |
    "==" | "!=" | "===" | "!==" | "<>" | ">" | "<" | ">=" | "<=" | 
    "<<" | ">>" | "++" | "--" |
    "&&" | "||" | "->" | "=>" | "::" |
    "?" | ":" | "*" | "/" | "-" | "+" | "." | "," |
    "(" | ")" | "[" | "]" | "!" | "@" | "%" | "^" | "&" |
    "~" | "|" | "\\"
)

TOKEN:php_separator: ( [";" "{" "}"] )

TOKEN:php_string:( 
    "\"" ( 
        ( "\\" . ) | ( [^ "\"" "\\"] )  
    )* "\""
)
TOKEN:php_string:( 
    "\'" ( 
        ( "\\" . ) | ( [^ "\'"  "\\"] )  
    )* "\'"
)
TOKEN:php_string:( 
    "`" ( 
        ( "\\" . ) | ( [^ "`"  "\\" ] ) 
    )* "`"
)

<DEFAULT>:TOKEN:php_eod_operator: ( "<<<" ) : <EOD>

<EOD> {
	TOKEN:php_whitespace:( [" " "\t" "\n" "\r"]+ )
	TOKEN:php_eod_string: {
		call: org.netbeans.modules.languages.php.Php.getEODString;
	}
}

# Not absolutely correct php number definition.
# extra '.' are allowed in floating point and hexadecimal number.
# Otherwise extra '.' is treated is correct, 
# but several tokens after it as incorrect.
#
# Note: the only strange case is e.g. '5.5.E4' that is processed as correct
#       and printed by php as '5.5E4'
TOKEN:php_number:(  "0" | 
                    ( ["1" - "9"] ["0" - "9"]* ) |
                    ( ["0" - "9"]+ ["e" "E"] ["+" "-"]? ["0" - "9"]+ ) |
                    ( ["0" - "9"]+ "." ["0" - "9" "."]* ( ["e" "E"] ["+" "-"]? ["0" - "9" "."]+ )? ) |
                    ( "." ["0" - "9" "."]+ ( ["e" "E"] ["+" "-"]? ["0" - "9" "."]+ )? ) |
                    ( "0" ["0"-"7"]+ ) |
                    ( "0" ["x" "X"] ["0"-"9" "a"-"f" "A"-"F" "."]+ )
                 )
TOKEN:php_integer:( ( ["1" - "9"] ["0" - "9"]* ) |
                    ( "0" ["0"-"7"]+ ) |
                    ( "0" ["x" "X"] ["0"-"9" "a"-"f" "A"-"F"]+ ) 
                  )

TOKEN:php_whitespace:( [" " "\t" "\n" "\r"]+ )

# This is not exactly correct definition for variable. Variable could not be just '$'.
# But correct definition lead to fully broken grammatic AST for php file 
# when it contain single "$"  ( normal situation for code completion ), so 
# let's  consider "$" as variable and add error about bad variable via top level
# parser.
TOKEN:php_variable:( 
    "$" | ( "$" ["a"-"z" "A"-"Z" "_" "$" ]
    ["a"-"z" "A"-"Z" "0"-"9" "_" "$" ]* )
)
TOKEN:php_identifier:( 
    ["a"-"z" "A"-"Z" "_"] 
    ["a"-"z" "A"-"Z" "0"-"9" "_"]*
)
TOKEN:php_variable_variable: (
	"$" ["a"-"z" "A"-"Z" "0"-"9" "_" "$" ]* "{"
)

########### grammar ############################################################

SKIP:php_whitespace
SKIP:php_comment
SKIP:php_line_comment

S = ( SourceElement ) +;

SourceElement = Statement;

Statement = Block | BreakStatement | ClassDefinition | ContinueStatement | DoStatement |
    EchoStatement | EmptyStatement | ExpressionStatement | ForEachStatement | ForStatement |
    DeclareStatement | FunctionDefinition | GlobalStatement | IfStatement | InterfaceDefinition |
    ReturnStatement | SwitchStatement | StaticStatement | WhileStatement;

Block = "{" StatementList "}";
StatementList = ( Statement )*;

BreakStatement = "break" [ <php_integer> ] ";";

ContinueStatement = "continue" [ <php_integer> ] ";";

DoStatement = "do" Statement WhileCommon ";";

EchoStatement = EchoExpression ";";
EchoExpression = EchoIdentifier EchoArguments;
EchoIdentifier = ( "echo" | "print" );
EchoArguments =  Expression ( "," Expression )* ;

EmptyStatement = ";";

ExpressionStatement = Expression ";";

ForEachStatement = ForeachCommon ( ForeachStatementCurly | ForeachStatementColon );
ForeachStatementCurly = Statement;
ForeachStatementColon = ":" StatementList "endforeach" ";";
ForeachCommon = "foreach" "(" Expression "as" VariableDeclaration 
	[ "=>" VariableDeclaration ] ")";
VariableDeclaration = Variable;
Variable = ( <php_variable_variable> Expression "}" ) | SimpleVariable ; 
SimpleVariable = <php_variable>;

ForStatement = ForCommon ( ForStatementCurly | ForStatementColon );
ForCommon = "for" "(" ForExpression ";" ForExpression ";" ForExpression ")";
ForExpression = Expression ( "," Expression )*;
ForExpression = ;
ForStatementCurly =  Statement;
ForStatementColon = ":" StatementList "endfor" ";";

DeclareStatement = DeclareCommon ( DeclareStatementCurly | DeclareStatementColon );
DeclareCommon = "declare" "(" Expression ")";
DeclareStatementCurly = Statement;
DeclareStatementColon = ":" StatementList "enddeclare";

GlobalStatement = "global" VariableDeclaration ( "," VariableDeclaration )* ";";

IfStatement = IfCommon ( IfStatementCurly | IfStatementColon );
IfCommon = "if" "(" Expression ")";
IfStatementCurly = Statement ( ElseIfCurly )* [ ElseCurly ];
ElseIfCurly = "elseif" "(" Expression ")" Statement ;
ElseCurly = "else" Statement;
IfStatementColon = ":" StatementList ( ElseIfColon )* [ ElseColon ] "endif" ";";
ElseIfColon = "elseif" "(" Expression ")" ":" StatementList;
ElseColon = "else" ":" StatementList;

ReturnStatement = "return" [ Expression ] ";";

SwitchStatement = SwitchCommon ( SwitchStatementCurly | SwitchStatementColon );
SwitchCommon = "switch" "(" Expression ")";
SwitchStatementCurly = "{" ( CaseClause )* [ DefaultClause ] ( CaseClause )* "}";
CaseClause = "case" Expression ( (":" StatementList) | ";" );
DefaultClause = "default" ":" StatementList;
SwitchStatementColon = ":" ( CaseClause )* [ DefaultClause ] ( CaseClause )* "endswitch" ";";

StaticStatement = "static" StaticVariable ( "," StaticVariable )* ";";
StaticVariable = <php_variable> [ "=" Expression ];

WhileStatement = WhileCommon ( WhileStatementCurly | WhileStatementColon );
WhileCommon = "while" "(" Expression ")";
WhileStatementCurly = Statement;
WhileStatementColon = ":" StatementList "endwhile" ";";

Expression = AssignmentExpression ;
LogicalORExpression = LogicalXORExpression [ "or" ORExp ];
ORExp = LogicalORExpression;
LogicalXORExpression = LogicalANDExpression [ "xor" XORExp ];
XORExp = LogicalXORExpression;
LogicalANDExpression = ConditionalExpression [ "and" ANDExp ];
ANDExp = LogicalANDExpression;
AssignmentExpression = LogicalORExpression [ AssignmentOperator AssExp ];
AssExp= AssignmentExpression;
AssignmentOperator = "=" | "+=" | "-=" | "*=" | "/=" | ".=" | "%=" | "&=" | "|=" | "^=" | "~=" | "<<=" | ">>=";
ConditionalExpression = LogicalORORExpression [ "?" Expression ":" Expression ];
LogicalORORExpression = LogicalANDANDExpression [ "||" ORORExp ];
ORORExp = LogicalORORExpression;
LogicalANDANDExpression = BitwiseORExpression [ "&&" ANDANDExp ];
ANDANDExp = LogicalANDANDExpression;
BitwiseORExpression = BitwiseXORExpression [ "|" BitORExp ];
BitORExp = BitwiseORExpression;
BitwiseXORExpression = BitwiseANDExpression [ "^" BitXORExp ];
BitXORExp = BitwiseXORExpression;
BitwiseANDExpression = EqualityExpression [ "&" BitANDExp ];
BitANDExp = BitwiseANDExpression;
EqualityExpression = RelationalExpression [ EqualityOperator RelationalExpression ];
EqualityOperator = "==" | "!=" | "<>" | "===" | "!==";
RelationalExpression = BitShiftExpression [ RelationalOperator BitShiftExpression ];
RelationalOperator = "<" | "<=" | ">" | ">=";
BitShiftExpression = AdditiveExpression [ BitShiftOperator BitShiftExp ];
BitShiftExp = BitShiftExpression;
BitShiftOperator = "<<" | ">>";
AdditiveExpression = MultiplicativeExpression [ AdditiveOperator AddExp ];
AddExp = AdditiveExpression;
AdditiveOperator = "+" | "-" | ".";
#MultiplicativeExpression = PostfixExpression [ MultiplicativeOperator MultExp ];
#MultExp = MultiplicativeExpression;
MultiplicativeExpression = InstanceOfExpression [ MultiplicativeOperator MultExp ];
MultExp = MultiplicativeExpression;
MultiplicativeOperator = "*" | "/" | "%";
InstanceOfExpression = PostfixExpression [ "instanceof" IOExp ];
IOExp = InstanceOfExpression;
PostfixExpression = UnaryExpression [ "++" | "--" ];
UnaryExpression = LeftHandSideExpression | ( UnaryOperator UnaryExpression );
UnaryOperator = "&" | "!" | "~" | "-" | "++" | "--" | "@" | <php_type_cast>;
LeftHandSideExpression = CallExpression | NewExpression | BuiltInCallExpression |
        LanguageConstructExpression | ArrayExpression | ListExpression;
CallExpression = PrimaryExpression | 
	( IdentifierExpression [ ( MemberAccess ( MemberAccess )*) ]);

MemberAccess = ( "[" [ Expression ] "]" ) | ( "->" MemberExpression )  | Arguments ;

ArrayExpression = "array" "("  ArrayElement ( "," ArrayElement )*  ")";
ArrayElement = Expression [ "=>" Expression ];
ArrayElement = ;

BuiltInCallExpression =  ( BuiltInIdentifier Arguments ) | 
	( BuiltInNoArgIdentifier [Arguments]);
BuiltInIdentifier = <php_builtin_function>;
BuiltInNoArgIdentifier = <php_without_arg_function>;

LanguageConstructExpression = LanguageConstructIdentifier LanguageConstructArgument;
LanguageConstructIdentifier = <php_language_construct_keyword>;
LanguageConstructArgument = Expression;

ListExpression = "list" ListArguments;
ListArguments = "(" ")";
ListArguments = "(" ListArgument ( "," ListArgument )* ")";
ListArgument=;
ListArgument = Expression;

IdentifierExpression = ClassStaticPrimaryExpression | Variable;
#
# New expression in class context could be :
# $a = new self;
# or 
# $a = new parent;
# In this case node Arguments is absent. So I put here Arguments node as 
# possible . But it required in any case except two described above cases.
#
NewExpression = "new" <php_identifier> [ Arguments ] ;
Arguments = "(" [ Expression ( "," Expression )* ] ")";
PrimaryExpression = ConstantExpression  | "(" Expression ")";
# Class function call could  be written via variable ( variable should has 
# runtime value equals to some existing class method name ).
MemberExpression = <php_identifier> | <php_variable> | ( "{" Expression "}" );
ConstantExpression = <php_number> | <php_string> | "null" | "true" | "false" | "<<<" <php_eod_string>;
ClassStaticPrimaryExpression = <php_magic_constants> | 
	( <php_identifier> [ "::" ( <php_identifier> | Variable )]);
# NB : in the PHP 5.3 it is possible to have constant in form $clazz::CONST.

FunctionDefinition = FunctionDeclaration Block;
FunctionDeclaration = "function" [ "&" ] FunctionName "(" FormalParameterList ")";
FunctionName = <php_identifier>;
FormalParameterList = [ FormalParameter ( "," FormalParameter )*];

# Default value should be more restrictive, but there is no exact rules about it,
# so I put here Expression
FormalParameter = [ "&" ] <php_variable> [ "=" Expression  ];

InterfaceDefinition = "interface" ClassName [ "extends"  <php_identifier> ( "," <php_identifier> )* ] InterfaceBody;
InterfaceBody = "{" [ InterfaceStatement ";" (InterfaceStatement ";")* ] "}";
#InterfaceStatementList = InterfaceStatement ";" (InterfaceStatement ";")*;
InterfaceStatement = InterfaceFunctionDeclaration | ClassConstDeclaration;
ClassConstDeclaration = "const" ClassConst ( "," ClassConst )*;
ClassConst = <php_identifier> "=" Expression;
InterfaceFunctionDeclaration = [ "public" ] FunctionDeclaration;

ClassDefinition = ( "abstract" | "final" )* "class" ClassName [ "extends"  <php_identifier> ]
    [ "implements" <php_identifier> ( "," <php_identifier> )* ] ClassBody;
ClassName = <php_identifier>;
ClassBody = "{" ( ClassStatement )* "}";
ClassStatement = ( ClassConstDeclaration ";" ) | ClassMember;
ClassMember = (Visibility)*  
 ((( ClassVarDeclaration | AbstractFunctionDeclaration) ";" ) | ClassFunctionDefinition );

ClassVarDeclaration =  [  "var" (Visibility)*  ] ClassAttribute  ( "," ClassAttribute )* ;
ClassAttribute = <php_variable> [ "=" Expression ];
AbstractFunctionDeclaration =  "abstract"  ( Visibility )* FunctionDeclaration;
ClassFunctionDefinition =  [ "final" ( Visibility )* ] FunctionDefinition ;
# Add to visibility "static" keyword. This can lead to incorrect semantic construction
# ( static and abstract f.e. cannot be used together ) but this is mostly semantic
# issue , not syntax and it can be resolved by IDE logic later on top level parsing
# state. ( Similiar error can be got f.e. via usage private and abstract as method modifiers ).
Visibility = "public" | "protected" | "private" | "static";

########## Errors ##############################################################

#
# TODO : disable this grammatic error , because it 
# can be incorrect. Need reanalize these errors and 
# produce more accurate errors. ( F.e. php block could 
# be in different PHP parts and be seperated by HTML text .
# In this case PHP lexer language mark token "{" as error
# ( because "}" in other PHP part ). But this is wrong ).
# Errors should be retrieved from PhpParser class based on OM 
# information.
#
MARK:ERROR: {
    type:"Error";
    message:"LBL_SYNTAX_ERROR";
}

#
# This is token errors and they could be kept possibly.
# 
MARK:error: {
    type:"Error";
    message:"LBL_UNEXPECTED_CHARACTER";
}

BUNDLE "org.netbeans.modules.languages.php.resources.Bundle"

########### code folding #######################################################

FOLD:ClassBody: {
    expand_type_action_name:"Expand Classes";
    collapse_type_action_name:"Collapse Classes";
}
FOLD:FunctionDeclaration: {
    expand_type_action_name:"Expand Methods";
    collapse_type_action_name:"Collapse Methods";
}
FOLD:InterfaceBody: {
    expand_type_action_name:"Expand Classes";
    collapse_type_action_name:"Collapse Classes";
}
FOLD:php_comment: {
    expand_type_action_name:"Expand Comments";
    collapse_type_action_name:"Collapse Comments";
}
FOLD:php_line_comment: {
    expand_type_action_name:"Expand Comments";
    collapse_type_action_name:"Collapse Comments";
}

########### navigator ##########################################################

NAVIGATOR:FunctionDeclaration: {
    display_name: org.netbeans.modules.languages.php.Php.functionName;
    icon: "org/netbeans/modules/languages/resources/method.gif";
    isLeaf: "true";
}

# NAVIGATOR:VariableDeclaration: {
#    display_name: "$php_identifier$";
#    tooltip: "$js_identifier$ $Initializer$";
#    icon: "/org/netbeans/modules/languages/resources/variable.gif";
#}

NAVIGATOR:ClassDefinition: {
    display_name: org.netbeans.modules.languages.php.Php.className;
    icon: "org/netbeans/modules/languages/resources/class.gif";
    isLeaf: "false";
}

NAVIGATOR:InterfaceDefinition: {
    display_name: org.netbeans.modules.languages.php.PhpView.className;
    icon: "org/netbeans/modules/languages/resources/class.gif";
    isLeaf: "false";
}
########### colors #############################################################
    
COLOR:line_comment: {
    default_coloring: "comment";
}
COLOR:php_variable: {
    foreground_color: "0x098618";
}
COLOR:ClassMemberOperator: {
    color_name: "php_variable";
    foreground_color: "0x0dc223";
}

COLOR:php_separator: {
    color_name: "php_operator";
}

COLOR:php_eod_string: {
	default_coloring: "string";
}

COLOR:php_eod_operator: {
    default_coloring: "operator";
}

COLOR:php_builtin_function: {
    default_coloring: "keyword";
}

COLOR:php_without_arg_function: {
    default_coloring: "keyword";
}

COLOR:php_language_construct_keyword: {
    default_coloring: "keyword";
}

COLOR:php_magic_constants: {
    default_coloring: "keyword";
}

COLOR:php_type_cast: {
    default_coloring: "keyword";
}

