/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.versioning.system.cvss.ui;

import org.openide.filesystems.*;
import org.openide.nodes.AbstractNode;
import org.openide.ErrorManager;
import org.openide.util.*;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.Sources;
import org.netbeans.api.project.SourceGroup;

import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import java.util.*;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

/**
 * Supprt for logical nodes representing projects/files/folders.
 * It supports icon, opened icon, name and display name
 * annotations including listening on changes.
 *
 * @see http://www.netbeans.org/issues/show_bug.cgi?id=57776
 * @author Petr Kuzel
 */
class LogicalFileAnnotator extends AbstractNode implements Runnable, FileStatusListener, ChangeListener, PropertyChangeListener {

    // icon badging >>>
    private Set files;
    private Map fileSystemListeners;
    private RequestProcessor.Task task;
    private final Object privateLock = new Object();
    private boolean iconChange;
    private boolean nameChange;        
    private ChangeListener sourcesListener;
    private Map groupsListeners;
    private Project project;
    // icon badging <<<


    public LogicalFileAnnotator(Project project) {
        // ...
        setProjectFiles(project);
    }

    protected final void setProjectFiles(Project project) {
        Sources sources = ProjectUtils.getSources(project);  // returns singleton
        if (sourcesListener == null) {                
            sourcesListener = WeakListeners.change(this, sources);
            sources.addChangeListener(sourcesListener);                                
        }
        setGroups(Arrays.asList(sources.getSourceGroups(Sources.TYPE_GENERIC)));
    }


    private final void setGroups(Collection groups) {
        if (groupsListeners != null) {
            Iterator it = groupsListeners.keySet().iterator();
            while (it.hasNext()) {
                SourceGroup group = (SourceGroup) it.next();
                PropertyChangeListener pcl = (PropertyChangeListener) groupsListeners.get(group);
                group.removePropertyChangeListener(pcl);
            }
        }
        groupsListeners = new HashMap();
        Set roots = new HashSet();
        Iterator it = groups.iterator();
        while (it.hasNext()) {
            SourceGroup group = (SourceGroup) it.next();
            PropertyChangeListener pcl = WeakListeners.propertyChange(this, group);
            groupsListeners.put(group, pcl);
            group.addPropertyChangeListener(pcl);
            FileObject fo = group.getRootFolder();
            roots.add(fo);
        }
        setFiles(roots);
    }

    protected final void setFiles(Set files) {
        if (fileSystemListeners != null) {
            Iterator it = fileSystemListeners.keySet().iterator();
            while (it.hasNext()) {
                FileSystem fs = (FileSystem) it.next();
                FileStatusListener fsl = (FileStatusListener) fileSystemListeners.get(fs);
                fs.removeFileStatusListener(fsl);
            }
        }

        fileSystemListeners = new HashMap();
        this.files = files;
        if (files == null) return;

        Iterator it = files.iterator();
        Set hookedFileSystems = new HashSet();
        while (it.hasNext()) {
            FileObject fo = (FileObject) it.next();
            try {
                FileSystem fs = fo.getFileSystem();
                if (hookedFileSystems.contains(fs)) {
                    continue;
                }
                hookedFileSystems.add(fs);
                FileStatusListener fsl = FileUtil.weakFileStatusListener(this, fs);
                fs.addFileStatusListener(fsl);
                fileSystemListeners.put(fs, fsl);
            } catch (FileStateInvalidException e) {
                ErrorManager err = ErrorManager.getDefault();
                err.annotate(e, "Can not get " + fo + " filesystem, ignoring...");  // NO18N
                err.notify(ErrorManager.INFORMATIONAL, e);
            }
        }
    }

    public String getDisplayName () {
        String s = super.getDisplayName ();

        if (files != null && files.iterator().hasNext()) {
            try {
                FileObject fo = (FileObject) files.iterator().next();
                s = fo.getFileSystem ().getStatus ().annotateName (s, files);
            } catch (FileStateInvalidException e) {
                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, e);
            }
        }

        return s;
    }

     public String getHtmlDisplayName() {
         if (files != null && files.iterator().hasNext()) {
             try {
                 FileObject fo = (FileObject) files.iterator().next();
                 FileSystem.Status stat = fo.getFileSystem().getStatus();
                 if (stat instanceof FileSystem.HtmlStatus) {
                     FileSystem.HtmlStatus hstat = (FileSystem.HtmlStatus) stat;

                     String result = hstat.annotateNameHtml (
                         super.getDisplayName(), files);

                     //Make sure the super string was really modified
                     if (result != null && !result.equals(super.getDisplayName())) {
                         return result;
                     }
                 }
             } catch (FileStateInvalidException e) {
                 ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, e);
             }
         }
         return super.getHtmlDisplayName();
     }

    public java.awt.Image getIcon (int type) {
        java.awt.Image img = super.getIcon (type);

        if (files != null && files.iterator().hasNext()) {
            try {
                FileObject fo = (FileObject) files.iterator().next();
                img = fo.getFileSystem ().getStatus ().annotateIcon (img, type, files);
            } catch (FileStateInvalidException e) {
                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, e);
            }
        }

        return img;
    }

    public java.awt.Image getOpenedIcon (int type) {
        java.awt.Image img = super.getOpenedIcon(type);

        if (files != null && files.iterator().hasNext()) {
            try {
                FileObject fo = (FileObject) files.iterator().next();
                img = fo.getFileSystem ().getStatus ().annotateIcon (img, type, files);
            } catch (FileStateInvalidException e) {
                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, e);
            }
        }

        return img;
    }

        public void run() {
            boolean fireIcon;
            boolean fireName;
            synchronized (privateLock) {
                fireIcon = iconChange;
                fireName = nameChange;
                iconChange = false;
                nameChange = false;
            }
            if (fireIcon) {
                fireIconChange();
                fireOpenedIconChange();
            }
            if (fireName) {
                fireDisplayNameChange(null, null);
            }
        }

        public void annotationChanged(FileStatusEvent event) {
            if (task == null) {
                task = RequestProcessor.getDefault().create(this);
            }

            synchronized (privateLock) {
                if ((iconChange == false && event.isIconChange())  || (nameChange == false && event.isNameChange())) {
                    Iterator it = files.iterator();
                    while (it.hasNext()) {
                        FileObject fo = (FileObject) it.next();
                        if (event.hasChanged(fo)) {
                            iconChange |= event.isIconChange();
                            nameChange |= event.isNameChange();
                        }
                    }
                }
            }

            task.schedule(50);  // batch by 50 ms
        }

    // sources change
    public void stateChanged(ChangeEvent e) {
        setProjectFiles(project);
    }

    // group change
    public void propertyChange(PropertyChangeEvent evt) {
        setProjectFiles(project);
    }

}
