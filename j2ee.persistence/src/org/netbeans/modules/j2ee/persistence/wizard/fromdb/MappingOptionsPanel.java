/*
 * TableMappingPanel.java
 *
 * Created on May 29, 2008, 4:43 PM
 */

package org.netbeans.modules.j2ee.persistence.wizard.fromdb;

import javax.swing.DefaultComboBoxModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.modules.j2ee.persistence.entitygenerator.EntityRelation.FetchType;
import org.openide.WizardDescriptor;
import org.openide.util.ChangeSupport;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 *
 * @author  Dongmei Cao
 */
public class MappingOptionsPanel extends javax.swing.JPanel {
    
    private final ChangeSupport changeSupport = new ChangeSupport(this);
    private final String[] fetchTypes = new String[] {
        NbBundle.getMessage(MappingOptionsPanel.class, "LBL_FETCH_DEFAULT"),
        NbBundle.getMessage(MappingOptionsPanel.class, "LBL_FETCH_EAGER"),
        NbBundle.getMessage(MappingOptionsPanel.class, "LBL_FETCH_LAZY")
    };

    /** Creates new form TableMappingPanel */
    public MappingOptionsPanel() {
        initComponents();
        fetchComboBox.setModel(new DefaultComboBoxModel(fetchTypes));
        fetchComboBox.setSelectedIndex(0);
    }
    
    public void initialize(FetchType fetchType, boolean fullyQualifiedTblName, boolean regenSchemaAttrs) {
        
        if(fetchType.equals(FetchType.DEFAULT)) {
            fetchComboBox.setSelectedIndex(0);
        } else if(fetchType.equals(FetchType.EAGER)) {
            fetchComboBox.setSelectedIndex(1);
        } else if(fetchType.equals(FetchType.LAZY)) {
            fetchComboBox.setSelectedIndex(2);
        } else {
            fetchComboBox.setSelectedIndex(0);
        }
        
        tableNameCheckBox.setSelected(fullyQualifiedTblName);
        regenSchemaCheckBox.setSelected(regenSchemaAttrs);
    }
    
    public void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }
    
    public FetchType getFetchType() {
        int selected = fetchComboBox.getSelectedIndex();
        if(selected == 0 ) {
            return FetchType.DEFAULT;
        } else if(selected == 1 ) {
            return FetchType.EAGER;
        } else {
            return FetchType.LAZY;
        }
    }
    
    public boolean isFullyQualifiedTableName() {
        return tableNameCheckBox.isSelected();
    }
    
    public boolean isRegenSchemaAttributes() {
        return regenSchemaCheckBox.isSelected();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        fetchLabel = new javax.swing.JLabel();
        fetchComboBox = new javax.swing.JComboBox();
        tableNameCheckBox = new javax.swing.JCheckBox();
        regenSchemaCheckBox = new javax.swing.JCheckBox();
        paddingPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        fetchLabel.setDisplayedMnemonic(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/persistence/wizard/fromdb/Bundle").getString("FETCHR_Mnemonics").charAt(0));
        fetchLabel.setLabelFor(fetchComboBox);
        fetchLabel.setText(org.openide.util.NbBundle.getMessage(MappingOptionsPanel.class, "LBL_FETCH")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(fetchLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 12, 0, 0);
        add(fetchComboBox, gridBagConstraints);

        tableNameCheckBox.setMnemonic(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/persistence/wizard/fromdb/Bundle").getString("TABLE_NAMER_Mnemonics").charAt(0));
        tableNameCheckBox.setText(org.openide.util.NbBundle.getMessage(MappingOptionsPanel.class, "LBL_TABLE_NAME")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(tableNameCheckBox, gridBagConstraints);

        regenSchemaCheckBox.setMnemonic(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/persistence/wizard/fromdb/Bundle").getString("REGENERATE_SCHEMAR_Mnemonics").charAt(0));
        regenSchemaCheckBox.setText(org.openide.util.NbBundle.getMessage(MappingOptionsPanel.class, "LBL_REGENERATE_SCHEMA")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(regenSchemaCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(paddingPanel, gridBagConstraints);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(MappingOptionsPanel.class, "LBL_TABLE_MAPPING_DESC")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox fetchComboBox;
    private javax.swing.JLabel fetchLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel paddingPanel;
    private javax.swing.JCheckBox regenSchemaCheckBox;
    private javax.swing.JCheckBox tableNameCheckBox;
    // End of variables declaration//GEN-END:variables

    public static final class WizardPanel implements WizardDescriptor.Panel<WizardDescriptor>, ChangeListener {

        private final ChangeSupport changeSupport = new ChangeSupport(this);
        private MappingOptionsPanel component;
        private boolean componentInitialized;
        private WizardDescriptor wizardDescriptor;
        private boolean cmp;

        public MappingOptionsPanel getComponent() {
            if (component == null) {
                component = new MappingOptionsPanel();
                component.addChangeListener(this);
            }

            return component;
        }

        public HelpCtx getHelp() {
            if (cmp) {
                return new HelpCtx("org.netbeans.modules.j2ee.ejbcore.ejb.wizard.cmp." + DatabaseTablesPanel.class.getSimpleName()); // NOI18N
            } else {
                return new HelpCtx(DatabaseTablesPanel.class);
            }
        }

        public void addChangeListener(ChangeListener listener) {
            changeSupport.addChangeListener(listener);
        }

        public void removeChangeListener(ChangeListener listener) {
            changeSupport.removeChangeListener(listener);
        }

        public void readSettings(WizardDescriptor settings) {
            wizardDescriptor = settings;
            if (!componentInitialized) {
                componentInitialized = true;

                cmp = RelatedCMPWizard.isCMP(wizardDescriptor);
                RelatedCMPHelper helper = RelatedCMPWizard.getHelper(wizardDescriptor);
                FetchType fetchType = helper.getFetchType();
                boolean fullTblName = helper.isFullyQualifiedTableNames();
                boolean regenSchema = helper.isRegenSchemaAttrs();
                getComponent().initialize(fetchType, fullTblName, regenSchema);
            }
        }

        public boolean isValid() {
            return true;
        }

        public void storeSettings(WizardDescriptor settings) {
            WizardDescriptor wiz = settings;
            Object buttonPressed = wiz.getValue();
            if (buttonPressed.equals(WizardDescriptor.NEXT_OPTION) ||
                    buttonPressed.equals(WizardDescriptor.FINISH_OPTION)) {
                RelatedCMPHelper helper = RelatedCMPWizard.getHelper(wizardDescriptor);
                MappingOptionsPanel mPanel = getComponent();
                helper.setFetchType(mPanel.getFetchType());
                helper.setFullyQualifiedTableNames(mPanel.isFullyQualifiedTableName());
                helper.setRegenSchemaAttrs(mPanel.isRegenSchemaAttributes());
            }
        }

        public void stateChanged(ChangeEvent event) {
            changeSupport.fireChange();
        }

        private void setErrorMessage(String errorMessage) {
            wizardDescriptor.putProperty("WizardPanel_errorMessage", errorMessage); // NOI18N
        }
    }
}
