# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
#You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
#The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
#Microsystems, Inc. All Rights Reserved.


#
# This file contains localized strings used in this package.  The typical
# NetBeans pattern is to use one bundle per-package, called Bundle.properties;
# the openide class NbBundle supports this usage.
#
# Typically, fetch a resource as follows:
# NbBundle.getMessage (MyClass.class, "SOME_Key");
#
# Don't bother caching strings or worse, static references to resource bundles -
# this may seem like its faster, but it wastes memory and slows things down
# in the long run.
#


Add_semicolon=Add semicolon

Add_cast_to_X=Cast {0} to {1}

Add_throws_clause_for_X=Add throws clause for {0}

Add_import_for_X=Add import for {0}

Implement_all_abstract_methods=Implement all abstract methods

MSG_CreateField=Create field {0} on {1}
MSG_CreateMethod=Create method {0} on {1}
MSG_CreateLocalVariable=Create local variable {0}
MSG_CreateParameter=Create parameter {0}


MSG_CreateGetter=Create getter
MSG_CreateSetter=Create setter
MSG_CreateGetterAndSetter=Create getter and setter

MSG_Implement=Implement missing methods

MSG_RenameConstant=Rename to {0}

MSG_DeclareIn=Declare in {0}

MSG_GoToOverriding=Go to overriding method ...
MSG_GettingOverriding=Getting overriding methods
MSG_OverridingFound={0} overriding method(s) found
MSG_OverridingNotFound=No overriding methods found


MSG_ImplementAbstractMethod=Implement method in ...
MSG_GettingClassesWhereImplement=Getting subclasses
MSG_NoClassesWhereImplementFound=All known subclasses already implement this method
MSG_ClassesWhereImplementFound={0} subclass(es) found

MSG_Cancel=Cancel

MSG_ChangeVariablesType=Change type of {0} to {1}
MSG_ChangeVariablesTypeDisplayName=Change Type Fix
MSG_ChangeVariablesTypeDescription=This hint changes the type of a variable to the type of initializer expression.

#{0}: new class simple name
#{1}: target package name 
#{2}: kind:
#     0: class
#     1: interface
#     2: enum
#     3: annotation type
FIX_CreateClassInPackage=Create {2,choice,0#class|1#interface|2#enum|3#annotation type} "{0}" in package {1}

#{0}: new class simple name
#{1}: target class name
#{2}: kind:
#     0: class
#     1: interface
#     2: enum
#     3: annotation type
FIX_CreateInnerClass=Create {2,choice,0#class|1#interface|2#enum|3#annotation type} "{0}" in {1}

LBL_Remove_Useless_Cast_Fix=Remove Useless Cast Fix
DSC_Remove_Useless_Cast_Fix=Remove Useless Cast Fix
LBL_FIX_Remove_redundant_cast=Remove redundant cast

LBL_Suppress_Waning=Suppress Warnings Fix
DSC_Suppress_Waning=Suppress Warnings Fix
#{0}: Key of the warning
LBL_FIX_Suppress_Waning=Suppress Warning - {0}

LBL_Add_Cast=Add Cast Fix
DSC_Add_Cast=Add Cast Fix
#{0}: treeName
#{1}: type
LBL_FIX_Add_Cast=Cast {0} to {1}

LBL_Impl_Abstract_Methods=Implement All Abstract Methods Fix
DSC_Impl_Abstract_Methods=Add Cast Fix
#{0}: treeName
#{1}: type
LBL_FIX_Impl_Abstract_Methods=Implement all abstract methods
#{0}: name of the class
LBL_FIX_Make_Class_Abstract=Make class {0} abstract


LBL_Create_Field=Create Field Fix
DSC_Create_Field=Create Field Fix
#{0}: field name
#{1}: class name
LBL_FIX_Create_Field=Create Field {0} in {1}
LBL_FIX_Create_Constructor=Create Constructor {0} in {1}
LBL_FIX_Create_Method=Create Method {0} in {1}
#{0}: parameter name
LBL_FIX_Create_Parameter=Create Parameter {0}
#{0}: variable name
LBL_FIX_Create_Local_Variable=Create Local Variable {0}

