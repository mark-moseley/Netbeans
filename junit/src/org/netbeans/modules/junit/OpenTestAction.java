/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
/*
 * OpenTestAction.java
 *
 * Created on February 28, 2001, 7:08 PM
 */

package org.netbeans.modules.junit;

import org.openide.*;
import org.openide.nodes.*;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.actions.CookieAction;
import org.openide.loaders.*;
import org.openide.src.*;
import org.openide.filesystems.*;
import org.openide.filesystems.FileSystem; // override java.io.FileSystem
import org.openide.cookies.*;

import java.lang.reflect.*;
import java.util.*;
import java.io.*;
import java.text.MessageFormat;

/** Action sensitive to some cookie that does something useful.
 *
 * @author  Nathan W. Phelps
 * @ version 1.0
 */
public class OpenTestAction extends CookieAction {

    protected Class[] cookieClasses () {
        //return new Class[] { DataFolder.class, ClassElement.class };
        return new Class[] { DataFolder.class, SourceCookie.class, ClassElement.class };
    }

    protected int mode () {
        // return MODE_EXACTLY_ONE;
        return MODE_ALL;
    }

    protected void performAction (Node[] nodes) {
        FileSystem      fsTest = null;
        DataObject      doTestClass = null;
        String          targetFilesystem;
        boolean         bSuite = false;
        FileObject      selectedFO = null;
        FileObject      foToBeOpen = null;
        String          testName = null;
        
        // get the target file system
        targetFilesystem = JUnitSettings.getDefault().getFileSystem();
        
        if (null == (fsTest = Repository.getDefault().findFileSystem(targetFilesystem))) {
            String msg = NbBundle.getMessage(OpenTestAction.class, "MSG_file_system_not_found");
            NotifyDescriptor descr = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);
            org.openide.DialogDisplayer.getDefault().notify(descr);
            return;
        }
        
        for (int i = 0; i < nodes.length; i++) {
            foToBeOpen = null;
            try {
                // get test class or suite class file, if it was not such one pointed by the node                
                selectedFO = TestUtil.getFileObjectFromNode(nodes[i]);                                                
                if (selectedFO.isData()) {
                    try {
                        ClassElement classElement = TestUtil.getClassElementFromFileObject(selectedFO);
                        // check whether classElement implements Test interface
                        if (TestUtil.isClassElementImplementingTestInterface(classElement)) {
                            // we have the test - no need to search further ...
                            testName = selectedFO.getPackageNameExt('/', '.');
                            bSuite = TestUtil.isTestSuiteFile(selectedFO.getNameExt());
                            foToBeOpen = selectedFO;
                        }
                    } catch (DataObjectNotFoundException donfe) {
                        // what to do now ? Just continue - the
                        // rest of the code in this method will resolve it ...
                    }
                }
                    
                if (foToBeOpen == null) {
                    // hmm, we need to serach for it more
                    // find the test class
                    bSuite = selectedFO.isFolder();
                    if (bSuite) {
                        testName = TestUtil.getTestSuiteFullName(selectedFO);
                    }  else {
                        testName = TestUtil.getTestClassFullName(selectedFO);
                    }
                    
                    foToBeOpen = fsTest.findResource(testName);
                    
                    if (foToBeOpen == null) {
                        // try to search in other mounted filesystems as well
                        foToBeOpen = Repository.getDefault().findResource(testName);
                    }
                }
                
                doTestClass = DataObject.find(foToBeOpen);
                
                EditorCookie task = (EditorCookie)doTestClass.getCookie(EditorCookie.class);
                task.open();
            }
            catch (Exception e) {
                String msg;
                String selectedNode = selectedFO.getPackageName('.');
                // strip off the extension and replace '/' with '.'
                testName = TestUtil.stripExtensionFromFullName(testName).replace('/','.');
                if (bSuite) {
                    if (selectedNode.length() > 0) {
                        msg = MessageFormat.format(NbBundle.getMessage(OpenTestAction.class, "MSG_testsuite_class_not_found"),
                                                   new Object[] {testName, selectedNode});
                    } else {
                        msg = MessageFormat.format(NbBundle.getMessage(OpenTestAction.class, "MSG_testsuite_class_for_root_package_not_found"),
                        new Object[] {testName});
                    }
                } else {
                    msg = MessageFormat.format(NbBundle.getMessage(OpenTestAction.class, "MSG_test_class_not_found"),
                    new Object[] {testName, selectedNode});
                }
                
                NotifyDescriptor descr = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);
                org.openide.DialogDisplayer.getDefault().notify(descr);
            }
        }
    }

    public String getName () {
        return NbBundle.getMessage (OpenTestAction.class, "LBL_Action_OpenTest");
    }

    protected String iconResource () {
        return "org/netbeans/modules/junit/resources/OpenTestActionIcon.gif";
    }

    public HelpCtx getHelpCtx () {
        return new HelpCtx(OpenTestAction.class);
    }

    /** Perform special enablement check in addition to the normal one.
    protected boolean enable (Node[] nodes) {
	if (! super.enable (nodes)) return false;
	if (...) ...;
    }
    */

    protected void initialize () {
	super.initialize ();
        putProperty(javax.swing.Action.SHORT_DESCRIPTION, NbBundle.getMessage(OpenTestAction.class, "HINT_Action_OpenTest"));
    }
}
