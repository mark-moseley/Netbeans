/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
/*
 * OpenTestAction.java
 *
 * Created on February 28, 2001, 7:08 PM
 */

package org.netbeans.modules.junit;

import org.openide.*;
import org.openide.nodes.*;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.util.actions.CookieAction;
import org.openide.loaders.*;
import org.openide.src.*;
import org.openide.filesystems.*;
import org.openide.cookies.*;

import java.lang.reflect.*;
import java.util.*;
import java.io.*;

/** Action sensitive to some cookie that does something useful.
 *
 * @author  Nathan W. Phelps
 * @ version 1.0
 */
public class OpenTestAction extends CookieAction {

    protected Class[] cookieClasses () {
        return new Class[] { DataFolder.class, DataObject.class, ClassElement.class };
    }

    protected int mode () {
        return MODE_EXACTLY_ONE;
        // return MODE_ALL;
    }

    protected void performAction (Node[] nodes) {
        FileSystem      fsTest = null;
        DataObject      doTestClass = null;
        String          temp;
        
        // get the target file system
        temp = JUnitSettings.getDefault().getFileSystem();
        
        if (null == (fsTest = TopManager.getDefault().getRepository().findFileSystem(temp))) {
            String msg = NbBundle.getMessage(OpenTestAction.class, "MSG_file_system_not_found");
            NotifyDescriptor descr = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);
            TopManager.getDefault().notify(descr);
            return;
        }
        
        try {
            // get test class or suite class file, if it was not such one pointed by the node
            FileObject foTestedClass = TestUtil.getFileObjectFromNode(nodes[0]);

            if (!TestUtil.isTestClassFile(foTestedClass.getPackageName('.')) && 
                !TestUtil.isTestSuiteFile(foTestedClass.getPackageName('.'))) {
                // find the test class
                if (foTestedClass.isFolder())
                    foTestedClass = fsTest.findResource(TestUtil.getTestSuitFullName(foTestedClass));
                else
                    foTestedClass = fsTest.findResource(TestUtil.getTestClassFullName(foTestedClass));
            }

            doTestClass = DataObject.find(foTestedClass);
            
            EditorCookie task = (EditorCookie)doTestClass.getCookie(EditorCookie.class);
            task.open();
        }
        catch (Exception e) {
            String msg = NbBundle.getMessage(OpenTestAction.class, "MSG_test_file_not_found");
            msg += " (" + temp + ")";
            NotifyDescriptor descr = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);
            TopManager.getDefault().notify(descr);
            return;
        }
    }

    public String getName () {
        return NbBundle.getMessage (OpenTestAction.class, "LBL_Action_OpenTest");
    }

    protected String iconResource () {
        return "OpenTestActionIcon.gif";
    }

    public HelpCtx getHelpCtx () {
        return HelpCtx.DEFAULT_HELP;
        // If you will provide context help then use:
        // return new HelpCtx (OpenTestAction.class);
    }

    /** Perform special enablement check in addition to the normal one.
    protected boolean enable (Node[] nodes) {
	if (! super.enable (nodes)) return false;
	if (...) ...;
    }
    */

    /** Perform extra initialization of this action's singleton.
     * PLEASE do not use constructors for this purpose!
    protected void initialize () {
	super.initialize ();
        putProperty (Action.SHORT_DESCRIPTION, NbBundle.getMessage (OpenTestAction.class, "HINT_Action"));
    }
    */

}
