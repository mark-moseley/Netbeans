<?xml version="1.0" encoding="UTF-8"?>

<assembler name="amd64">
    <register_group name="control">
        <register name="rip" bitwidth="64">
            <child  name="eip" offset="0"/>
        </register>            
        <register name="eip" bitwidth="32">
            <child  name="ip" offset="0"/>
        </register>
        <register name="ip" bitwidth="16"/>                    
    </register_group>
    
    <register_group name="general">        
        <register name="rax" bitwidth="64">
            <child  name="eax" offset="0"/>
        </register>            
        <register name="eax" bitwidth="32">
            <child  name="ax" offset="0"/>
        </register>            
        <register name="ax" bitwidth="16">
            <child  name="ah" offset="0"/>
            <child  name="al" offset="8"/>
        </register>            
        <register name="ah" bitwidth="8"/>
        <register name="al" bitwidth="8"/>
        
        <register name="rbx" bitwidth="64">
            <child  name="ebx" offset="0"/>
        </register>            
        <register name="ebx" bitwidth="32">
            <child  name="bx" offset="0"/>
        </register>            
        <register name="bx" bitwidth="16">
            <child  name="bh" offset="0"/>
            <child  name="bl" offset="8"/>
        </register>            
        <register name="bh" bitwidth="8"/>
        <register name="bl" bitwidth="8"/>
        
        <register name="rcx" bitwidth="64">
            <child  name="ecx" offset="0"/>
        </register>            
        <register name="ecx" bitwidth="32">
            <child  name="cx" offset="0"/>
        </register>            
        <register name="cx" bitwidth="16">
            <child  name="ch" offset="0"/>
            <child  name="cl" offset="8"/>
        </register>            
        <register name="ch" bitwidth="8"/>
        <register name="cl" bitwidth="8"/>
        
        <register name="rdx" bitwidth="64">
            <child  name="edx" offset="0"/>
        </register>            
        <register name="edx" bitwidth="32">
            <child  name="dx" offset="0"/>
        </register>            
        <register name="dx" bitwidth="16">
            <child  name="dh" offset="0"/>
            <child  name="dl" offset="8"/>
        </register>            
        <register name="dh" bitwidth="8"/>
        <register name="dl" bitwidth="8"/>
        
        <register name="rsi" bitwidth="64">
            <child  name="esi" offset="0"/>
        </register>            
        <register name="esi" bitwidth="32">
            <child  name="si" offset="0"/>
        </register>            
        <register name="si" bitwidth="16">
            <child  name="sil" offset="0"/>            
        </register>            
        <register name="sil" bitwidth="8"/>
        
        <register name="rdi" bitwidth="64">
            <child  name="edi" offset="0"/>
        </register>            
        <register name="edi" bitwidth="32">
            <child  name="di" offset="0"/>
        </register>            
        <register name="di" bitwidth="16">
            <child  name="dil" offset="0"/>            
        </register>            
        <register name="dil" bitwidth="8"/>
        
        <register name="rbp" bitwidth="64">
            <child  name="ebp" offset="0"/>
        </register>            
        <register name="ebp" bitwidth="32">
            <child  name="bp" offset="0"/>
        </register>            
        <register name="bp" bitwidth="16">
            <child  name="bpl" offset="0"/>            
        </register>            
        <register name="bpl" bitwidth="8"/>
        
        <register name="rsp" bitwidth="64">
            <child  name="esp" offset="0"/>
        </register>            
        <register name="esp" bitwidth="32">
            <child  name="sp" offset="0"/>
        </register>            
        <register name="sp" bitwidth="16">
            <child  name="spl" offset="0"/>            
        </register>            
        <register name="spl" bitwidth="8"/>
        
        <register name = "r8" bitwidth="64">
            <child  name="r8d" offset="0"/>
        </register>        
        <register name = "r8d" bitwidth="32">
            <child  name="r8w" offset="0"/>
        </register>
        <register name = "r8w" bitwidth="16">
            <child  name="r8b" offset="0"/>
        </register>
        <register name = "r8b" bitwidth="8"/>
        
        <register name = "r9" bitwidth="64">
            <child  name="r9d" offset="0"/>
        </register>        
        <register name = "r9d" bitwidth="32">
            <child  name="r9w" offset="0"/>
        </register>
        <register name = "r9w" bitwidth="16">
            <child  name="r9b" offset="0"/>
        </register>
        <register name = "r9b" bitwidth="8"/>
        
        <register name = "r10" bitwidth="64">
            <child  name="r10d" offset="0"/>
        </register>        
        <register name = "r10d" bitwidth="32">
            <child  name="r10w" offset="0"/>
        </register>
        <register name = "r10w" bitwidth="16">
            <child  name="r10b" offset="0"/>
        </register>
        <register name = "r10b" bitwidth="8"/>
        
        <register name = "r11" bitwidth="64">
            <child  name="r11d" offset="0"/>
        </register>        
        <register name = "r11d" bitwidth="32">
            <child  name="r11w" offset="0"/>
        </register>
        <register name = "r11w" bitwidth="16">
            <child  name="r11b" offset="0"/>
        </register>
        <register name = "r11b" bitwidth="8"/>
        
        <register name = "r12" bitwidth="64">
            <child  name="r12d" offset="0"/>
        </register>        
        <register name = "r12d" bitwidth="32">
            <child  name="r12w" offset="0"/>
        </register>
        <register name = "r12w" bitwidth="16">
            <child  name="r12b" offset="0"/>
        </register>
        <register name = "r12b" bitwidth="8"/>
        
        <register name = "r13" bitwidth="64">
            <child  name="r13d" offset="0"/>
        </register>        
        <register name = "r13d" bitwidth="32">
            <child  name="r13w" offset="0"/>
        </register>
        <register name = "r13w" bitwidth="16">
            <child  name="r13b" offset="0"/>
        </register>
        <register name = "r13b" bitwidth="8"/>
        
        <register name = "r14" bitwidth="64">
            <child  name="r14d" offset="0"/>
        </register>        
        <register name = "r14d" bitwidth="32">
            <child  name="r14w" offset="0"/>
        </register>
        <register name = "r14w" bitwidth="16">
            <child  name="r14b" offset="0"/>
        </register>
        <register name = "r14b" bitwidth="8"/>
        
        <register name = "r15" bitwidth="64">
            <child  name="r15d" offset="0"/>
        </register>        
        <register name = "r15d" bitwidth="32">
            <child  name="r15w" offset="0"/>
        </register>
        <register name = "r15w" bitwidth="16">
            <child  name="r15b" offset="0"/>
        </register>
        <register name = "r15b" bitwidth="8"/>
        
    </register_group>   
    
    <register_group name="flags">                
        <register name="rflags" bitwidth="64">
            <child name="eflags" offset="0"/>
        </register>
        <register name="eflags" bitwidth="32">
            <child name="flags" offset="0"/>
        </register>
        <register name="flags" bitwidth="16">                                    
            <child name="cf" offset="0"/>
            <child name="pf" offset="2"/>
            <child name="af" offset="4"/>
            <child name="zf" offset="6"/>
            <child name="sf" offset="7"/>
            <child name="df" offset="10"/>
            <child name="of" offset="11"/>           
        </register>
        <register name="cf" bitwidth="1"/>
        <register name="pf" bitwidth="1"/>
        <register name="af" bitwidth="1"/>
        <register name="zf" bitwidth="1"/>
        <register name="sf" bitwidth="1"/>
        <register name="df" bitwidth="1"/>
        <register name="of" bitwidth="1"/>
    </register_group>
    
    <register_group name="media">
        <register name="xmm0" bitwidth="128"/>
        <register name="xmm1" bitwidth="128"/>
        <register name="xmm2" bitwidth="128"/>
        <register name="xmm3" bitwidth="128"/>
        <register name="xmm4" bitwidth="128"/>
        <register name="xmm5" bitwidth="128"/>
        <register name="xmm6" bitwidth="128"/>
        <register name="xmm7" bitwidth="128"/>
        <register name="xmm8" bitwidth="128"/>
        <register name="xmm9" bitwidth="128"/>
        <register name="xmm10" bitwidth="128"/>        
        <register name="xmm11" bitwidth="128"/>        
        <register name="xmm12" bitwidth="128"/>        
        <register name="xmm13" bitwidth="128"/>        
        <register name="xmm14" bitwidth="128"/>        
        <register name="xmm15" bitwidth="128"/>        
        
        <register name="mxcsr" bitwidth="32"/> 
        
        <register name="mmx0" bitwidth="64"/>
        <register name="mmx1" bitwidth="64"/>
        <register name="mmx2" bitwidth="64"/>
        <register name="mmx3" bitwidth="64"/>
        <register name="mmx4" bitwidth="64"/>
        <register name="mmx5" bitwidth="64"/>
        <register name="mmx6" bitwidth="64"/>
        <register name="mmx7" bitwidth="64"/>
        
    </register_group>  
    
    <register_group name="floating">
        <register name="fpr0" bitwidth="80"/>
        <register name="fpr1" bitwidth="80"/>
        <register name="fpr2" bitwidth="80"/>
        <register name="fpr3" bitwidth="80"/>
        <register name="fpr4" bitwidth="80"/>
        <register name="fpr5" bitwidth="80"/>
        <register name="fpr6" bitwidth="80"/>
        <register name="fpr7" bitwidth="80"/>        
    </register_group>
    
    <operand_aliases>
        <operand name="cReg">
            <op_register_group name="general"/>            
        </operand>
        <operand name="dReg">
            <op_register_group name="debug"/>            
        </operand>                              
    </operand_aliases>
   
    
    <instruction_group name = "General-Purpose">
        <instruction name = "aaa" description = "ASCII Adjust After Addition" clazz = "DecimalArithmetic" read = "%al%" write = "%ah%%al%"> 
            <arg description="Create an unpacked BCD number. (Invalid in 64-bit mode.)">     
            </arg>        
        </instruction>
        <instruction name = "aad" description = "ASCII Adjust Before Division" clazz = "DecimalArithmetic"  read = "%al%%ah%" write = "%ah%%al%"> 
            <arg description="Adjust two BCD digits in %al% and %ah%. (Invalid in 64-bit mode.) (None) D5 ib Adjust two BCD digits to the immediate byte base. (Invalid in 64-bit mode.) ">         
            </arg>        
        </instruction>
        <instruction name = "aam" description = "ASCII Adjust After Multiply" clazz = "DecimalArithmetic"  read = "%al%%ah%" write = "%ah%%al%"> 
            <arg description="Create a pair of unpacked BCD values in %ah% and %al%. (Invalid in 64-bit mode.)  ">     
            </arg>        
        </instruction>
        <instruction name = "aas" description = "ASCII Adjust After Subtraction" clazz = "DecimalArithmetic" read = "%al%%ah%"  write = "%ah%"> 
            <arg description="Create an unpacked BCD number from the contents of the %al% register. (Invalid in 64-bit mode.) ">     
            </arg>        
        </instruction>
        <instruction name = "adc" description = "Add with Carry" clazz = "BinaryArithmetic" read = "%arg1%%arg2%" write = "%arg1%%arg2%"> 
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "%al%"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "%ax%"/>
                <param val = "imm16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "%eax%"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1% + %cf%.">     
                <param val = "%rax%"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1% + %cf%.">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1% + %cf%.">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1% + %cf%.">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1% + %cf%.">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>       
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%. ">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>            
            </arg>        
            
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg64/mem64"/>        
                <param val = "reg64"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
                
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>
            <arg description="Add %arg2% to %arg1% + %cf%.">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>                    
            </arg>        
        </instruction>    
        <instruction name = "add" description = "Signed or Unsigned Add" clazz = "BinaryArithmetic" read = "%arg1%%arg2%" write = "%arg1%"> 
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "%al%"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "%ax%"/>
                <param val = "imm16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "%eax%"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1%">     
                <param val = "%rax%"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">    
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">  
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1%">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1%">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1%">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add sign-extended %arg2% to %arg1%">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">    
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>            
            </arg>        
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>            
            </arg>            
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%.">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>
            <arg description="Add %arg2% to %arg1%. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>            
            </arg>        
        </instruction>    
        <instruction name = "and" description = "Logical AND" clazz = "Logical" read = "%arg1%%arg2%" write = "%arg1%"> 
            <arg description="AND the contents of %arg1% with an %arg2% value and store the result in %arg1%.">     
                <param val = "%al%"/>
                <param val = "imm8"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with an %arg2% value and store the result in %arg1%.">     
                <param val = "%ax%"/>
                <param val = "imm16"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with an %arg2% value and store the result in %arg1%.">     
                <param val = "%eax%"/>
                <param val = "imm32"/>           
            </arg>        
            <arg description="AND the contents of %arg1% with a sign-extended %arg2% and store the result in %arg1%">     
                <param val = "%rax%"/>
                <param val = "imm32"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>            
            </arg>                
            <arg description="AND the contents of %arg1% with a sign-extended %arg2%">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>                         
            </arg>
            <arg description="AND the contents of %arg1% with a sign-extended %arg2%">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with a sign-extended %arg2%">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>           
            </arg>       
            <arg description="AND the contents of %arg1% with a sign-extended %arg2%">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>                       
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
                
            </arg>           
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">    
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>            
            </arg>       
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>        
            <arg description="AND the contents of %arg1% with %arg2%">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>            
            </arg>               
        </instruction>    
        <instruction name = "bound" description = "Check Array Bounds" clazz = "Control" type = "interrupt" read = "%arg1%%arg2%" condition = "1"> 
            <arg description="Test whether a 16-bit array index is within the bounds specified by the two 16-bit values in %arg2%. (Invalid in 64-bit mode.)">     
                <param val = "reg16"/>
                <param val = "mem16"/>           
            </arg>
            <arg description="Test whether a 32-bit array index is within the bounds specified by the two 32-bit values in %arg2%. (Invalid in 64-bit mode.)">     
                <param val = "reg32"/>
                <param val = "mem32"/>            
            </arg>        
        </instruction>    
        <instruction name = "bsf" description = "Bit Scan Forward" clazz = "Bit" read = "%arg1%%arg2%" write = "%arg1%">
            <arg description="Bit scan forward on the contents of %arg2%. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>
            <arg description="Bit scan forward on the contents of %arg2%. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>
            <arg description="Bit scan forward on the contents of %arg2%. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>            
            </arg>        
        </instruction>    
        <instruction name = "bsr" description = "Bit Scan Reverse" clazz = "Bit" read = "%arg1%%arg2%" write = "%arg1%"> 
            <arg description="Bit scan reverse on the contents of %arg2% . ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>            
            </arg>
            <arg description="Bit scan reverse on the contents of %arg2% . ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>            
            </arg>
            <arg description="Bit scan reverse on the contents of %arg2% . ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>            
            </arg>        
        </instruction>    
        <instruction name = "bswap" description = "Byte Swap" clazz = "DataTransfer" read = "%arg1%" write = "%arg1%"> 
            <arg description="Reverse the byte order of %arg2% . ">     
                <param val = "reg32"/>            
            </arg>
            <arg description="Reverse the byte order of %arg2% . ">     
                <param val = "reg64"/>            
            </arg>        
        </instruction>    
        <instruction name = "bt" description = "Bit Test" clazz = "Bit" read = "%arg1%%arg2%"> 
            <arg description="Copy the value of the selected bit to the carry flag. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>        
        </instruction>    
        <instruction name = "btc" description = "Bit Test and Complement" clazz = "Bit" read = "%arg1%%arg2%" write = "%arg1%"> 
            <arg description="Copy the value of the selected bit to the carry flag , then complement the selected bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then complement the selected bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then complement the selected bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then complement the selected bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then complement the selected bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then complement the selected bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>        
        </instruction>
        <instruction name = "btr" description = "Bit Test and Reset" clazz = "Bit" read = "%arg1%%arg2%" write = "%arg1%"> 
            <arg description="Copy the value of the selected bit to the carry flag , then clear the selected bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then clear the selected bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then clear the selected bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then clear the selected bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then clear the selected bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then clear the selected bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>        
        </instruction>
        <instruction name = "bts" description = "Bit Test and Reset" clazz = "Bit" read = "%arg1%%arg2%" write = "%arg1%"> 
            <arg description="Copy the value of the selected bit to the carry flag , then set the selected bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then set the selected bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then set the selected bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then set the selected bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then set the selected bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>            
            </arg>
            <arg description="Copy the value of the selected bit to the carry flag , then set the selected bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>            
            </arg>        
        </instruction>
        <instruction name = "call" description = "Procedure Call" clazz = "Control" type = "Call" label = "%arg1%" condition = "No">     
            <arg description="Near call with the target specified by a 16-bit relative displacement. ">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Near call with the target specified by a 32-bit relative displacement. ">     
                <param val = "rel32off"/>
            </arg>
            <arg description="Near call with the target specified by reg16/mem16 . ">     
                <param val = "reg16/mem16"/>
            </arg>        
            <arg description="Near call with the target specified by reg32/mem32 . (There is no prefix for encoding this in 64-bit mode.) ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Near call with the target specified by reg64/mem64 . ">     
                <param val = "reg64/mem64"/>
            </arg>     
            <arg description="Near call with the target specified by reg32/mem32 . (There is no prefix for encoding this in 64-bit mode.) ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Near call with the target specified by reg64/mem64 .">     
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>    
        <instruction name = "cbw" description = "Convert to Sign-extended" clazz = "DataTransfer" read = "%al%" write = "%ax%">     
            <arg description="Sign-extend %al% into %ax%. ">     
            </arg>
        </instruction>
        <instruction name = "cwde" description = "Convert to Sign-extended" clazz = "DataTransfer" read = "%ax%" write = "%eax%">     
            <arg description="Sign-extend %ax% into %eax%.">     
            </arg>
        </instruction>
        <instruction name = "cdqe" description = "Convert to Sign-extended" clazz = "DataTransfer" read = "%eax%" write = "%rax%">     
            <arg description="Sign-extend %eax% into %rax%. ">     
            </arg>
        </instruction>
        <instruction name = "cwd" description = "Convert to Sign-extended" clazz = "DataTransfer" read = "%ax%" write = "%ax%%dx%">     
            <arg description="Sign-extend %ax% into %dx%:%ax%. ">     
            </arg>
        </instruction>
        <instruction name = "cdq" description = "Convert to Sign-extended" clazz = "DataTransfer" read = "%eax%" write = "%eax%%edx%">     
            <arg description="Sign-extend %eax% into %edx%:%eax%. ">     
            </arg>
        </instruction>
        <instruction name = "cqo" description = "Convert to Sign-extended" clazz = "DataTransfer" read = "%rax%" write = "%rax%%rdx%">     
            <arg description="Sign-extend %rax% into %rdx%:%rax%.">     
            </arg>
        </instruction>
        <instruction name = "clc" description = "Clear Carry Flag" clazz = "">     
            <arg description="Clear the carry flag (%cf%) to zero. ">     
            </arg>
        </instruction>
        <instruction name = "cld" description = "Clear Direction Flag" clazz = "">     
            <arg description="Clear the direction flag (DF) to zero. ">     
            </arg>
        </instruction>
        <instruction name = "cflush" description = "Cache Line Invalidate" clazz = "">     
            <arg description="flush cache line containing mem8.  ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "cmc" description = "Complement Carry Flag" clazz = "">     
            <arg description="Complement the carry flag (%cf%). ">     
            </arg>
        </instruction>
        <instruction name = "cmovo" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if overflow (%of% = 1). ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if overflow (%of% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if overflow (%of% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovno" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not overflow (%of% = 1). ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not overflow (%of% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not overflow (%of% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovb" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if below (%cf% = 1). ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if below (%cf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if below (%cf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovc" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if carry (%cf% = 1). ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if carry (%cf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if carry (%cf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnae" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not above or equal (%cf% = 1). ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not above or equal (%cf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not above or equal (%cf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnb" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not below (%cf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not below (%cf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not below (%cf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnc" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not carry (%cf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not carry (%cf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not carry (%cf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovae" description = "Conditional Move" clazz = "DataTransfer" read = "%al%" write = "%ax%">     
            <arg description="Move if above or equal (%cf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if above or equal (%cf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if above or equal (%cf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovz" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if zero (%zf% = 1).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if zero (%zf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if zero (%zf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmove" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if equal (%zf% =1).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if equal (%zf% =1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if equal (%zf% =1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnz" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not zero (%zf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not zero (%zf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not zero (%zf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovne" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not equal (%zf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not equal (%zf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not equal (%zf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovbe" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if below or equal (%cf% = 1 or %zf% = 1).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if below or equal (%cf% = 1 or %zf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if below or equal (%cf% = 1 or %zf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovna" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not above (%cf% = 1 or %zf% = 1).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not above (%cf% = 1 or %zf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not above (%cf% = 1 or %zf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnbe" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not below or equal (%cf% = 0 and %zf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not below or equal (%cf% = 0 and %zf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not below or equal (%cf% = 0 and %zf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmova" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if above (%cf% = 1 and %zf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if above (%cf% = 1 and %zf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if above (%cf% = 1 and %zf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovs" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if sign (%sf% = 1).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if sign (%sf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if sign (%sf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovns" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not sign (%sf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not sign (%sf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not sign (%sf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovp" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if parity (%pf% = 1).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if parity (%pf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if parity (%pf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovpe" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if parity even (%pf% = 1).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if parity even (%pf% = 1).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if parity even (%pf% = 1).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnp" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not parity (%pf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not parity (%pf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not parity (%pf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovpo" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if parity odd (%pf% = 0).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if parity odd (%pf% = 0).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if parity odd (%pf% = 0).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovl" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if less (%sf% != %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if less (%sf% != %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if less (%sf%!= %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnge" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not greater or equal (%sf% != %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not greater or equal (%sf% != %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not greater or equal (%sf% != %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnl" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not less (%sf% = %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not less (%sf% = %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not less (%sf% = %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovge" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if greater or equal (%sf% = %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if greater or equal (%sf% = %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if greater or equal (%sf% = %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovle" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if less or equal (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if less or equal (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if less or equal (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovng" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not greater (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not greater (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not greater (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovnle" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if not less or equal (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if not less or equal (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if not less or equal (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "cmovg" description = "Conditional Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move if greater (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move if greater (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move if greater (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>             
        <instruction name = "cmp" description = "Compare" clazz = "BinaryArithmetic" read = "%arg1%%arg2%">     
            <arg description="Compare an 8-bit immediate value with the contents of the %al% register. ">     
                <param val = "%al%"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Compare a 16-bit immediate value with the contents of the %ax% register. ">     
                <param val = "%ax%"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Compare a 32-bit immediate value with the contents of the %eax% register. ">     
                <param val = "%eax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Compare a 32-bit immediate value with the contents of the %rax% register. ">     
                <param val = "%rax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Compare an 8-bit immediate value with the contents of an 8-bit register or memory operand. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Compare a 16-bit immediate value with the contents of a 16-bit register or memory operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Compare a 32-bit immediate value with the contents of a 32-bit register or memory operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Compare a 32-bit signed immediate value with the contents of a 64-bit register or memory operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Compare an 8-bit signed immediate value with the contents of a 16-bit register or memory operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Compare an 8-bit signed immediate value with the contents of a 32-bit register or memory operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>       
            <arg description="Compare an 8-bit signed immediate value with the contents of a 64-bit register or memory operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Compare the contents of an 8-bit register or memory operand with the contents of an 8-bit register. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Compare the contents of a 16-bit register or memory operand with the contents of a 16-bit register. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Compare the contents of a 32-bit register or memory operand with the contents of a 32-bit register. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Compare the contents of a 64-bit register or memory operand with the contents of a 64-bit register. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
            <arg description="Compare the contents of an 8-bit register with the contents of an 8-bit register or memory operand. ">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Compare the contents of a 16-bit register with the contents of a 16-bit register or memory operand. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Compare the contents of a 32-bit register with the contents of a 32-bit register or memory operand. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Compare the contents of a 64-bit register with the contents of a 64-bit register or memory operand. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>            
            <arg description="Compare an 8-bit signed immediate value with the contents of a 64-bit register or memory operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Compare the contents of an 8-bit register or memory operand with the contents of an 8-bit register. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Compare the contents of a 16-bit register or memory operand with the contents of a 16-bit register. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Compare the contents of a 32-bit register or memory operand with the contents of a 32-bit register. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Compare the contents of a 64-bit register or memory operand with the contents of a 64-bit register. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
            <arg description="Compare the contents of an 8-bit register with the contents of an 8-bit register or memory operand. ">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Compare the contents of a 16-bit register with the contents of a 16-bit register or memory operand. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Compare the contents of a 32-bit register with the contents of a 32-bit register or memory operand. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Compare the contents of a 64-bit register with the contents of a 64-bit register or memory operand.">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>        
        </instruction>
        <instruction name = "cmps" description = "Compare Strings" clazz = "String" >     
            <arg description="Compare the byte at DS:rSI with the byte at ES:rDI and then increment or decrement rSI and rDI. ">     
                <param val = "mem8"/>
                <param val = "mem8"/>
            </arg>
            <arg description="Compare the word at DS:rSI with the word at ES:rDI and then increment or decrement rSI and rDI. ">     
                <param val = "mem16"/>
                <param val = "mem16"/>
            </arg>
            <arg description="Compare the doubleword at DS:rSI with the doubleword at ES:rDI and then increment or decrement rSI and rDI. ">     
                <param val = "mem32"/>
                <param val = "mem32"/>
            </arg>
            <arg description="Compare the quadword at DS:rSI with the quadword at ES:rDI and then increment or decrement rSI and rDI. ">
                <param val = "mem64"/>
                <param val = "mem64"/>
            </arg>         
        </instruction>
        <instruction name = "cmpsb" description = "Compare Strings" clazz = "">     
            <arg description="Compare the byte at DS:rSI with the byte at ES:rDI and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "cmpsw" description = "Compare Strings" clazz = "">     
            <arg description="Compare the word at DS:rSI with the word at ES:rDI and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "cmpsd" description = "Compare Strings" clazz = "">     
            <arg description="Compare the doubleword at DS:rSI with the doubleword at ES:rDI and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "cmpsq" description = "Compare Strings" clazz = "">     
            <arg description="Compare the quadword at DS:rSI with the quadword at ES:rDI and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "cmpxchg" description = "Compare and Exchange" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%%rax%">     
            <arg description="Compare %al% register with an 8-bit register or memory location. If equal , copy the %arg2% to the %arg1%. Otherwise , %arg1% operand to %al%. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Compare %ax% register with a 16-bit register or memory location. If equal , copy the %arg2% to the %arg1%. Otherwise , %arg1% operand to %ax%.">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Compare %eax% register with a 32-bit register or memory location. If equal , copy the second operand to the first operand. Otherwise , copy the first operand to %eax%. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Compare %rax% register with a 64-bit register or memory location. If equal , copy the second operand to the first operand. Otherwise , copy the first operand to %rax%. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
        </instruction>
        <instruction name = "cmpxchg8b" description = "" clazz = "DataTransfer" read = "%arg1%%edx%%eax%" write = "%arg1%%edx%%eax%">     
            <arg description="Compare %edx%:%eax% register to 64-bit memory location. If equal , set the zero flag (%zf%) to 1 and copy the ECX:%ebx% register to the memory location. Otherwise , copy the memory location to %edx%:%eax% and clear the zero flag. ">     
                <param val = "mem64"/>
            </arg>
        </instruction>
        <instruction name = "cpuid" description = "Processor Identification" clazz = "">     
            <arg description="Executes the CPUID function whose number is in the %eax% register.">     
            </arg>        
        </instruction>
        <instruction name = "daa" description = "Decimal Adjust after Addition" clazz = "DecimalArithmetic"  read = "%al%" write = "%al%">     
            <arg description="Decimal adjust %al%. (Invalid in 64-bit mode.) ">     
            </arg>
        </instruction>
        <instruction name = "das" description = "Decimal Adjust after Subtraction" clazz = "DecimalArithmetic" read = "%al%%ah%" write = "%ah%%al%">     
            <arg description="Decimal adjusts %al% after subtraction. (Invalid in 64-bit mode.) ">     
            </arg>
        </instruction>
        <instruction name = "dec" description = "Decrement by 1" clazz = "BinaryArithmetic" read = "%arg1%" write = "%arg1%">     
            <arg description="Decrement the contents of an 8-bit register or memory location by 1. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Decrement the contents of a 16-bit register or memory location by 1. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Decrement the contents of a 32-bit register or memory location by 1. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Decrement the contents of a 64-bit register or memory location by 1. ">     
                <param val = "reg64/mem64"/>
            </arg>
            <arg description="Decrement the contents of a 16-bit register by 1.">     
                <param val = "reg16"/>
            </arg>
            <arg description="Decrement the contents of a 32-bit register by 1. ">     
                <param val = "reg32"/>
            </arg>
        </instruction>
        <instruction name = "div" description = "Unsigned Divide" clazz = "BinaryArithmetic" read = "%arg1%%rax%" write = "%rax%">     
            <arg description="Perform unsigned division of %ax% by the contents of an 8-bit register or memory location and store the quotient in %al% and the remainder in %ah%. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Perform unsigned division of %dx%:%ax% by the contents of a 16-bit register or memory operand store the quotient in %ax% and the remainder in %dx%. 136 ">     
                <param val = "reg16/mem16"/>
            </arg>      
            <arg description="Perform unsigned division of %edx%:%eax% by the contents of a 32-bit register or memory location and store the quotient in %eax% and the remainder in %edx%. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Performs unsigned division of %rdx%:%rax% by the contents of a 64- bit register or memory location and store the quotient in %rax% and the remainder in %rdx%. ">     
                <param val = "reg64/mem64"/>
            </arg>    
            <arg description="Perform unsigned division of %edx%:%eax% by the contents of a 32-bit register or memory location and store the quotient in %eax% and the remainder in %edx%. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Performs unsigned division of %rdx%:%rax% by the contents of a 64- bit register or memory location and store the quotient in %rax% and the remainder in %rdx%. ">     
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "enter" description = "Create Procedure Stack Frame" clazz = "DataTransfer" read = "%arg1%%ebp%%esp%" write = "%ebp%%esp%">     
            <arg description="Create a procedure stack frame. ">     
                <param val = "imm16"/>
                <param val = "0"/>
            </arg>
            <arg description="Create a nested stack frame for a procedure. ">     
                <param val = "imm16"/>
                <param val = "1"/>
            </arg>
            <arg description="Create a nested stack frame for a procedure.  ">     
                <param val = "imm16"/>
                <param val = "imm8"/>
            </arg>        
        </instruction>
        <instruction name = "idiv" description = "Signed Divide" clazz = "BinaryArithmetic" read = "%arg1%%rdx%%rax%" write = "%arg1%%rdx%%rax%">     
            <arg description="Perform signed division of %ax% by the contents of an 8-bit register or memory location and store the quotient in %al% and the remainder in %ah%. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Perform signed division of %dx%:%ax% by the contents of a 16-bit register or memory location and store the quotient in %ax% and the remainder in %dx%. 140 ">     
                <param val = "reg16/mem16"/>
            </arg>        
            <arg description="Perform signed division of %edx%:%eax% by the contents of a 32-bit register or memory location and store the quotient in %eax% and the remainder in %edx%. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Perform signed division of %rdx%:%rax% by the contents of a 64-bit register or memory location and store the quotient in %rax% and the remainder in %rdx%. ">     
                <param val = "reg64/mem64"/>
            </arg>     
            <arg description="Perform signed division of %edx%:%eax% by the contents of a 32-bit register or memory location and store the quotient in %eax% and the remainder in %edx%. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Perform signed division of %rdx%:%rax% by the contents of a 64-bit register or memory location and store the quotient in %rax% and the remainder in %rdx%. ">     
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "imul" description = "Signed Multiply" clazz = "BinaryArithmetic" read = "%arg1%">     
            <arg description="Multiply the contents of %al% by the contents of an 8-bit memory or register operand and put the signed result in %ax%. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Multiply the contents of %ax% by the contents of a 16-bit memory or register operand and put the signed result in %dx%:%ax%. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Multiply the contents of %eax% by the contents of a 32-bit memory or register operand and put the signed result in %edx%:%eax%. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Multiply the contents of %rax% by the contents of a 64-bit memory or register operand and put the signed result in %rdx%:%rax%. ">     
                <param val = "reg64/mem64"/>
            </arg>
            <arg description="Multiply the contents of a 16-bit destination register by the contents of a 16-bit register or memory operand and put the signed result in the 16-bit destination register.  ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>        
            <arg description="Multiply the contents of a 32-bit destination register by the contents of a 32-bit register or memory operand and put the signed result in the 32-bit destination register. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Multiply the contents of a 64-bit destination register by the contents of a 64-bit register or memory operand and put the signed result in the 64-bit destination register. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
            <arg description="Multiply the contents of a 16-bit register or memory operand by a sign-extended immediate byte and put the signed result in the 16-bit destination register. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Multiply the contents of a 32-bit register or memory operand by a sign-extended immediate byte and put the signed result in the 32-bit destination register. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Multiply the contents of a 64-bit register or memory operand by a sign-extended immediate byte and put the signed result in the 64-bit destination register. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Multiply the contents of a 16-bit register or memory operand by a sign-extended immediate word and put the signed result in the 16-bit destination register. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Multiply the contents of a 32-bit register or memory operand by a sign-extended immediate double and put the signed result in the 32-bit destination register. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Multiply the contents of a 64-bit register or memory operand by a sign-extended immediate double and put the signed result in the 64-bit destination register. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>             
        </instruction>
        <instruction name = "in" description = "Input from Port" clazz = "">     
            <arg description="Input a byte from the port at the address specified by imm8 and put it into the %al% register. ">     
                <param val = "%al%"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Input a word from the port at the address specified by imm8 and put it into the %ax% register. ">     
                <param val = "%ax%"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Input a doubleword from the port at the address specified by imm8 and put it into the %eax% register. ">     
                <param val = "%eax%"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Input a byte from the port at the address specified by the %dx% register and put it into the %al% register. ">     
                <param val = "%al%"/>
                <param val = "%dx%"/>
            </arg>
            <arg description="Input a word from the port at the address specified by the %dx% register and put it into the %ax% register. ">     
                <param val = "%ax%"/>
                <param val = "%dx%"/>
            </arg>
            <arg description="Input a doubleword from the port at the address specified by the %dx% register and put it into the %eax% register. ">     
                <param val = "%eax%"/>
                <param val = "%dx%"/>
            </arg>
        </instruction>
        <instruction name = "inc" description = "Increment by 1" clazz = "BinaryArithmetic" read = "%arg1%" write = "%arg1%">     
            <arg description="Increment the contents of an 8-bit register or memory location by 1. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Increment the contents of a 16-bit register or memory location by 1. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Increment the contents of a 32-bit register or memory location by 1. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Increment the contents of a 64-bit register or memory location by 1. ">     
                <param val = "reg64/mem64"/>
            </arg>
            <arg description="Increment the contents of a 16-bit register by 1. ">     
                <param val = "reg16"/>
            </arg>
            <arg description="Increment the contents of a 32-bit register by 1. ">     
                <param val = "reg32"/>
            </arg>
        </instruction>
        <instruction name = "ins" description = "Input String" clazz = "">     
            <arg description="Input a byte from the port specified by %dx% , put it into the memory location specified in ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem8"/>
                <param val = "%dx%"/>
            </arg>
            <arg description="Input a word from the port specified by %dx% register , put it into the memory location specified in ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem16"/>
                <param val = "%dx%"/>
            </arg>
            <arg description="Input a doubleword from the port specified by %dx% , put it into the memory location specified in ES:rDI , and then increment or decrement rDI. INSB 6C Input a byte from the port specified by %dx% , put it into the memory location specified in ES:rDI , and then increment or decrement rDI. INSW 6D Input a word from the port specified by %dx% , put it into the memory location specified in ES:rDI , and then increment or decrement rDI. INSD 6D Input a doubleword from the port specified by %dx% , put it into the memory location specified in ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem32"/>
                <param val = "%dx%"/>
            </arg>
        </instruction>
        <instruction name = "insb" description = "Input String" clazz = "">     
            <arg description="Input a byte from the port specified by %dx%, put it into the memory location specified in ES:rDI, and then increment or decrement rDI. ">               
            </arg>
        </instruction>
        <instruction name = "insw" description = "Input String" clazz = "">     
            <arg description="Input a word from the port specified by %dx%, put it into the memory location specified in ES:rDI, and then increment or decrement rDI. ">               
            </arg>
        </instruction>
        <instruction name = "insd" description = "Input String" clazz = "">     
            <arg description="Input a doubleword from the port specified by %dx%, put it into the memory location specified in ES:rDI, and then increment or decrement rDI. ">               
            </arg>
        </instruction>
        <instruction name = "int" description = "Interrupt to Vector" clazz = "Control" type = "interrupt" condition = "No">     
            <arg description="Call interrupt service routine specified by interrupt vector imm8 .  ">     
                <param val = "imm8"/>
            </arg>       
        </instruction>
        <instruction name = "into" description = "Interrupt to Overflow Vector" clazz = "Control" type = "interrupt" condition = "1">     
            <arg description="Call overflow exception if the overflow flag is set. (Invalid in 64-bit mode.) ">     
            </arg>
        </instruction>
        
        <instruction name = "jo" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if overflow (%of% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if overflow (%of% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if overflow (%of% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        
        <instruction name = "jno" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not overflow (%of% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not overflow (%of% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not overflow (%of% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jb" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if below (%cf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if below (%cf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if below (%cf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jc" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if carry (%cf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if carry (%cf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if carry (%cf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnae" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not above or equal (%cf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not above or equal (%cf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not above or equal (%cf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnb" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not below (%cf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not below (%cf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not below (%cf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnc" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not carry (%cf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not carry (%cf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not carry (%cf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jae" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if above or equal (%cf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if above or equal (%cf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if above or equal (%cf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jz" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if zero (%zf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if zero (%zf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if zero (%zf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "je" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if equal (%zf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if equal (%zf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if equal (%zf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnz" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not zero (%zf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not zero (%zf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not zero (%zf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jne" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not equal (%zf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not equal (%zf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not equal (%zf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jbe" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if below or equal (%cf% = 1 or %zf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if below or equal (%cf% = 1 or %zf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if below or equal (%cf% = 1 or %zf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jna" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not above (%cf% = 1 or %zf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not above (%cf% = 1 or %zf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not above (%cf% = 1 or %zf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnbe" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not below or equal (%cf% = 0 and %zf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not below or equal (%cf% = 0 and %zf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not below or equal (%cf% = 0 and %zf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "ja" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if above (%cf% = 0 and %zf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if above (%cf% = 0 and %zf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if above (%cf% = 0 and %zf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "js" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if sign (%sf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if sign (%sf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if sign (%sf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jns" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not sign (%sf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not sign (%sf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not sign (%sf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jp" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if parity (%pf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if parity (%pf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if parity (%pf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jpe" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if parity even (%pf% = 1).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if parity even (%pf% = 1).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if parity even (%pf% = 1).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnp" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not parity (%pf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not parity (%pf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not parity (%pf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jpo" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if parity odd (%pf% = 0).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if parity odd (%pf% = 0).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if parity odd (%pf% = 0).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jl" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if less (%sf% != %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if less (%sf% != %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if less (%sf% != %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnge" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not greater or equal (%sf% != %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not greater or equal (%sf% != %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not greater or equal (%sf% != %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnl" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not less (%sf% = %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not less (%sf% = %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not less (%sf% = %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jge" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if greater or equal (%sf% = %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if greater or equal (%sf% = %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if greater or equal (%sf% = %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jle" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if less or equal (%zf% = 1 or %sf% != %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if less or equal (%zf% = 1 or %sf% != %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if less or equal (%zf% = 1 or %sf% != %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jng" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not greater (%zf% = 1 or %sf% != %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not greater (%zf% = 1 or %sf% != %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not greater (%zf% = 1 or %sf% != %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jnle" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if not less or equal (%zf% = 0 and %sf% = %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if not less or equal (%zf% = 0 and %sf% = %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if not less or equal (%zf% = 0 and %sf% = %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>
        <instruction name = "jg" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%">     
            <arg description="Jump if greater (%zf% = 0 and %sf% = %of%).">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Jump if greater (%zf% = 0 and %sf% = %of%).">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Jump if greater (%zf% = 0 and %sf% = %of%).">     
                <param val = "rel32off"/>
            </arg>
        </instruction>  
        <instruction name = "jcxz" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%" read = "%rcx%">     
            <arg description="Jump short if the 16-bit count register (%cx%) is zero. ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>
        <instruction name = "jecxz" description = "Jump on Condition" clazz = "Control" type = "jump" condition = "1" label = "%arg1%" read = "%rcx%">     
            <arg description="Jump short if the 32-bit count register (%ecx%) is zero. ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>
        <instruction name = "jrcxz" description = "Jump if rCX Zero" clazz = "Control" type = "jump" condition = "1" label = "%arg1%" read = "%rcx%">     
            <arg description="Jump short if the 64-bit count register (%rcx%) is zero. ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>
        <instruction name = "jmp" description = "jump" clazz = "Control" type = "jump" condition = "No" label = "%arg1%">     
            <arg description="Short jump with the target specified by an 8-bit signed displacement. ">     
                <param val = "rel8off"/>
            </arg>
            <arg description="Near jump with the target specified by a 16-bit signed displacement. ">     
                <param val = "rel16off"/>
            </arg>
            <arg description="Near jump with the target specified by a 32-bit signed displacement. ">     
                <param val = "rel32off"/>
            </arg>
            <arg description="Near jump with the target specified reg16/mem16 . ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Near jump with the target specified reg32/mem32 . ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Near jump with the target specified reg64/mem64 . ">     
                <param val = "reg64/mem64"/>
            </arg>        
        </instruction>       
        <instruction name = "lahf" description = "Load Status Flags into %ah% Register" clazz = "">     
            <arg description="Load the %sf% , %zf% , %af% , %pf% , and %cf% flags into the %ah% register. ">     
            </arg>
        </instruction>
        <instruction name = "lds" description = "Load Far Pointer" clazz = "">     
            <arg description="Load DS:reg16 with a far pointer from memory. (Invalid in 64-bit mode.) ">     
                <param val = "reg16"/>
                <param val = "mem16:16"/>
            </arg>
            <arg description="Load DS:reg32 with a far pointer from memory. (Invalid in 64-bit mode.)  ">     
                <param val = "reg32"/>
                <param val = "mem16:32"/>
            </arg>
        </instruction>
        
        <instruction name = "les" description = "Load Far Pointer" clazz = "">     
            <arg description="Load ES:reg16 with a far pointer from memory. (Invalid in 64-bit mode.) ">     
                <param val = "reg16"/>
                <param val = "mem16:16"/>
            </arg>
            <arg description="Load ES:reg32 with a far pointer from memory. (Invalid in 64-bit mode.)">     
                <param val = "reg32"/>
                <param val = "mem16:32"/>
            </arg>
        </instruction>
        <instruction name = "lfs" description = "Load Far Pointer" clazz = "">     
            <arg description="Load FS:reg16 with a far pointer from memory.">     
                <param val = "reg16"/>
                <param val = "mem16:16"/>
            </arg>
            <arg description="Load FS:reg32 with a far pointer from memory. ">     
                <param val = "reg32"/>
                <param val = "mem16:32"/>
            </arg>
        </instruction>
        <instruction name = "lgs" description = "Load Far Pointer" clazz = "">     
            <arg description="Load GS:reg16 with a far pointer from memory">     
                <param val = "reg16"/>
                <param val = "mem16:16"/>
            </arg>
            <arg description="Load GS:reg32 with a far pointer from memory. ">     
                <param val = "reg32"/>
                <param val = "mem16:32"/>
            </arg>
        </instruction>
        <instruction name = "lss" description = "Load Far Pointer" clazz = "">     
            <arg description="Load %ss%:reg16 with a far pointer from memory. ">     
                <param val = "reg16"/>
                <param val = "mem16:16"/>
            </arg>
            <arg description="Load SS:reg32 with a far pointer from memory. ">     
                <param val = "reg32"/>
                <param val = "mem16:32"/>
            </arg>
        </instruction>   
        <instruction name = "lea" description = "Load Effective Address" clazz = "">     
            <arg description="Store effective address in a 16-bit register. ">     
                <param val = "reg16"/>
                <param val = "mem"/>
            </arg>
            <arg description="Store effective address in a 32-bit register. ">     
                <param val = "reg32"/>
                <param val = "mem"/>
            </arg>
            <arg description="Store effective address in a 64-bit register. ">     
                <param val = "reg64"/>
                <param val = "mem"/>
            </arg>
        </instruction>
        <instruction name = "leave" description = "Delete Procedure Stack Frame" clazz = "DataTransfer" read = "%bp%" write = "%bp%%sp%">     
            <arg description="Set the stack pointer register SP to the value in the BP register and pop BP. ">     
            </arg>
            <arg description="Set the stack pointer register ESP to the value in the EBP register and pop EBP. ">     
            </arg>
            <arg description="Set the stack pointer register RSP to the value in the RBP register and pop RBP. ">     
            </arg>
        </instruction>
        <instruction name = "lfence" description = "Load Fence" clazz = "">     
            <arg description="Force strong ordering of (serialize) load operations. ">     
            </arg>
        </instruction>
        <instruction name = "lods" description = "" clazz = "">     
            <arg description="Load byte at DS:rSI into %al% and then increment or decrement rSI. ">     
                <param val = "mem8"/>
            </arg>
            <arg description="Load word at DS:rSI into %ax% and then increment or decrement rSI. ">     
                <param val = "mem16"/>
            </arg>
            <arg description="Load doubleword at DS:rSI into %eax% and then increment or decrement rSI. ">     
                <param val = "mem32"/>
            </arg>
            <arg description="Load quadword at DS:rSI into %rax% and then increment or decrement rSI.  ">     
                <param val = "mem64"/>
            </arg>
        </instruction>
        <instruction name = "lodsb" description = "Load String" clazz = "">     
            <arg description="Load byte at DS:rSI into %al% and then increment or decrement rSI. ">                 
            </arg>
        </instruction>
        <instruction name = "lodsw" description = "Load String" clazz = "">     
            <arg description="Load the word at DS:rSI into %ax% and then increment or decrement rSI.">                 
            </arg>
        </instruction>
        <instruction name = "lodsd" description = "Load String" clazz = "">     
            <arg description="Load byte at DS:rSI into %al% and then increment or decrement rSI. ">                 
            </arg>
        </instruction>
        <instruction name = "lodsq" description = "Load String" clazz = "">     
            <arg description="Load doubleword at DS:rSI into %eax% and then increment or decrement rSI. ">                 
            </arg>
        </instruction>
        <instruction name = "lodsq" description = "Load String" clazz = "">     
            <arg description="Load quadword at DS:rSI into %rax% and then increment or decrement rSI. ">                 
            </arg>
        </instruction>
        <instruction name = "loop" description = "Loop" clazz = "Control" condition = "1" type = "jump" label = "%arg1%" read = "%rcx%">     
            <arg description="Decrement rCX , then jump short if rCX is not 0.  ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>
        <instruction name = "loope" description = "Loop" clazz = "Control" condition = "1" type = "jump" label = "%arg1%" read = "%rcx%">     
            <arg description="Decrement rCX, then jump short if rCX is not 0 and %zf% is 1. ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>
        <instruction name = "loopne" description = "Loop" clazz = "Control" condition = "1" type = "jump" label = "%arg1%" read = "%rcx%">     
            <arg description="Decrement rCX, then Jump short if rCX is not 0 and %zf% is 0. ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>
        <instruction name = "loopnz" description = "Loop" clazz = "Control" condition = "1" type = "jump" label = "%arg1%" read = "%rcx%">     
            <arg description="Decrement rCX , then Jump short if rCX is not 0 and %zf% is 0. ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>
        <instruction name = "loopz" description = "Loop" clazz = "Control" condition = "1" type = "jump" label = "%arg1%" read = "%rcx%">     
            <arg description="Decrement rCX, then Jump short if rCX is not 0 and %zf% is 1. ">     
                <param val = "rel8off"/>
            </arg>
        </instruction>                
        <instruction name = "mfence" description = "" clazz = "">     
            <arg description="Force strong ordering of (serialized) load and store operations. ">     
            </arg>
        </instruction>
        <instruction name = "mov" description = "Move" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move the contents of an 8-bit register to an 8-bit destination register or memory operand. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Move the contents of a 16-bit register to a 16-bit destination register or memory operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Move the contents of a 32-bit register to a 32-bit destination register or memory operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Move the contents of a 64-bit register to a 64-bit destination register or memory operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
            <arg description="Move the contents of an 8-bit register or memory operand to an 8-bit destination register. ">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Move the contents of a 16-bit register or memory operand to a 16-bit destination register. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move the contents of a 32-bit register or memory operand to a 32-bit destination register. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Move the contents of a 64-bit register or memory operand to a 64-bit destination register. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
            <arg description="Move the contents of a segment register to a 16-bit , 32-bit , or 64- bit destination register or to a 16-bit memory operand. ">     
                <param val = "reg16/32/64/mem16"/>
                <param val = "segReg"/>
            </arg>
            <arg description="Move the contents of a 16-bit register or memory operand to a segment register. ">     
                <param val = "segReg"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move 8-bit data at a specified memory offset to the %al% register. ">     
                <param val = "%al%"/>
                <param val = "moffset8"/>
            </arg>
            <arg description="Move 16-bit data at a specified memory offset to the %ax% register. ">     
                <param val = "%ax%"/>
                <param val = "moffset16"/>
            </arg>
            <arg description="Move 32-bit data at a specified memory offset to the %eax% register. ">     
                <param val = "%eax%"/>
                <param val = "moffset32"/>
            </arg>
            <arg description="Move 64-bit data at a specified memory offset to the %rax% register. ">     
                <param val = "%rax%"/>
                <param val = "moffset64"/>
            </arg>
            <arg description="Move the contents of the %al% register to an 8-bit memory offset. ">     
                <param val = "moffset8"/>
                <param val = "%al%"/>
            </arg>
            <arg description="Move the contents of the %ax% register to a 16-bit memory offset. ">     
                <param val = "moffset16"/>
                <param val = "%ax%"/>
            </arg>
            <arg description="Move the contents of the %eax% register to a 32-bit memory offset. ">     
                <param val = "moffset32"/>
                <param val = "%eax%"/>
            </arg>
            <arg description="Move the contents of the %rax% register to a 64-bit memory offset. ">     
                <param val = "moffset64"/>
                <param val = "%rax%"/>
            </arg>
            <arg description="Move an 8-bit immediate value into an 8-bit register. ">     
                <param val = "reg8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Move a 16-bit immediate value into a 16-bit register. ">     
                <param val = "reg16"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Move an 32-bit immediate value into a 32-bit register. ">     
                <param val = "reg32"/>
                <param val = "imm32"/>
            </arg>       
            <arg description="Move an 64-bit immediate value into a 64-bit register. ">     
                <param val = "reg64"/>
                <param val = "imm64"/>
            </arg>
            <arg description="Move an 8-bit immediate value to an 8-bit register or memory operand. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Move a 16-bit immediate value to a 16-bit register or memory operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Move a 32-bit immediate value to a 32-bit register or memory operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Move a 32-bit signed immediate value to a 64-bit register or memory operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>
        </instruction>   
        <instruction name = "movd" description = "Move Doubleword or Quadword" clazz = "">     
            <arg description="Move 32-bit value from a general-purpose register or 32-bit memory location to an XMM register. ">     
                <param val = "xmm"/>
                <param val = "reg32/mem32"/>          
            </arg>
            <arg description="Move 64-bit value from a general-purpose register or 64-bit memory location to an XMM register. ">     
                <param val = "xmm"/>
                <param val = "reg/mem62"/>  
            </arg>
            <arg description="Move 32-bit value from an XMM register to a 32-bit general- purpose register or memory location. ">     
                <param val = "reg32/mem32"/> 
                <param val = "xmm"/>
            </arg>
            <arg description="Move 64-bit value from an XMM register to a 64-bit general- purpose register or memory location. ">     
                <param val = "reg64/mem64"/> 
                <param val = "xmm"/>
            </arg>
            <arg description="Move 32-bit value from a general-purpose register or 32-bit memory location to an MMX register. ">     
                <param val = "mmx"/>
                <param val = "reg32/mem32"/> 
            </arg>
            <arg description="Move 64-bit value from a general-purpose register or 64-bit memory location to an MMX register. ">     
                <param val = "mmx"/>
                <param val = "reg64/mem64"/> 
            </arg>
            <arg description="Move 32-bit value from an MMX register to a 32-bit general- purpose register or memory location. ">     
                <param val = "reg32/mem32"/> 
                <param val = "mmx"/>
            </arg>
            <arg description="Move 64-bit value from an MMX register to a 64-bit general- purpose register or memory location. ">     
                <param val = "reg/mem4"/> 
                <param val = "mmx"/>
            </arg>      
        </instruction>
        <instruction name = "movmskpd" description = "Extract Packed Double-Precision Floating-Point Sign Mask" clazz = "">     
            <arg description="Move sign bits 127 and 63 in an XMM register to a 32-bit general-purpose register. ">     
                <param val = "reg32"/>
                <param val = "xmm"/>
            </arg>
        </instruction>
        <instruction name = "movmskps" description = "Extract Packed Single-Precision Floating-Point" clazz = "">     
            <arg description="Move sign bits 127 , 95 , 63 , 31 in an XMM register to a 32-bit general-purpose register.  ">     
                <param val = "reg32"/>
                <param val = "xmm"/>
            </arg>
        </instruction>
        <instruction name = "movnti" description = "Move Non-Temporal Doubleword or Quadword" clazz = "">     
            <arg description="Stores a 32-bit general-purpose register value into a 32-bit memory location , minimizing cache pollution. ">     
                <param val = "mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Stores a 64-bit general-purpose register value into a 64-bit memory location , minimizing cache pollution. ">     
                <param val = "mem64"/>
                <param val = "reg64"/>
            </arg>
        </instruction>
        <instruction name = "movs" description = "Move String" clazz = "">     
            <arg description="Move byte at DS:rSI to ES:rDI , and then increment or decrement rSI and rDI. ">     
                <param val = "mem8"/>
                <param val = "mem8"/>
            </arg>
            <arg description="Move word at DS:rSI to ES:rDI , and then increment or decrement rSI and rDI. ">     
                <param val = "mem16"/>
                <param val = "mem16"/>
            </arg>
            <arg description="Move doubleword at DS:rSI to ES:rDI , and then increment or decrement rSI and rDI.  ">     
                <param val = "mem32"/>
                <param val = "mem32"/>
            </arg>
            <arg description="Move quadword at DS:rSI to ES:rDI , and then increment or decrement rSI and rDI.  ">     
                <param val = "mem64"/>
                <param val = "mem64"/>
            </arg>
        </instruction>
        <instruction name = "movsb" description = "Move String" clazz = "">     
            <arg description="Move byte at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "movsw" description = "Move String" clazz = "">     
            <arg description="Move word at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "movsd" description = "Move String" clazz = "">     
            <arg description="Move doubleword at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "movsq" description = "Move String" clazz = "">     
            <arg description="Move quadword at DS:rSI to ES:rDI, and then increment or decrement rSI and rDI.">                
            </arg>
        </instruction>
        <instruction name = "movsx" description = "Move with Sign-Extension" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move the contents of an 8-bit register or memory location to a 16-bit register with sign extension. ">     
                <param val = "reg16"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Move the contents of an 8-bit register or memory location to a 32-bit register with sign extension. ">     
                <param val = "reg32"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Move the contents of an 8-bit register or memory location to a 64-bit register with sign extension. ">     
                <param val = "reg64"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Move the contents of an 16-bit register or memory location to a 32-bit register with sign extension. ">     
                <param val = "reg32"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move the contents of an 16-bit register or memory location to a 64-bit register with sign extension. ">     
                <param val = "reg64"/>
                <param val = "reg16/mem16"/>
            </arg>
        </instruction>
        <instruction name = "movsxd" description = "Move with Sign-Extend Doubleword" clazz = "">     
            <arg description="Move the contents of a 32-bit register or memory operand to a 64-bit register with sign extension. ">     
                <param val = "reg64"/>
                <param val = "reg32/mem32"/>
            </arg>
        </instruction>
        <instruction name = "movzx" description = "Move with Zero-Extension" clazz = "DataTransfer" read = "%arg2%" write = "%arg1%">     
            <arg description="Move the contents of an 8-bit register or memory operand to a 16-bit register with zero-extension. ">     
                <param val = "reg16"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Move the contents of an 8-bit register or memory operand to a 32-bit register with zero-extension. ">     
                <param val = "reg32"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Move the contents of an 8-bit register or memory operand to a 64-bit register with zero-extension. ">     
                <param val = "reg64"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Move the contents of a 16-bit register or memory operand to a 32-bit register with zero-extension. ">     
                <param val = "reg32"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Move the contents of a 16-bit register or memory operand to a 64-bit register with zero-extension. ">     
                <param val = "reg64"/>
                <param val = "reg16/mem16"/>
            </arg>
        </instruction>
        <instruction name = "mul" description = "Unsigned Multiply" clazz = "BinaryArithmetic" read = "%arg1%" write = "%rax%%rdx%">     
            <arg description="Multiplies an 8-bit register or memory operand by the contents of the %al% register and stores the result in the %ax% register. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Multiplies a 16-bit register or memory operand by the contents of the %ax% register and stores the result in the %dx%:%ax% register. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Multiplies a 32-bit register or memory operand by the contents of the %eax% register and stores the result in the %edx%:%eax% register. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Multiplies a 64-bit register or memory operand by the contents of the %rax% register and stores the result in the %rdx%:%rax% register. ">     
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "neg" description = "Two’s Complement Negation" clazz = "BinaryArithmetic" read = "%arg1%" write = "%arg1%">     
            <arg description="Performs a two's complement negation on an 8-bit register or memory operand. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Performs a two's complement negation on a 16-bit register or memory operand. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Performs a two's complement negation on a 32-bit register or memory operand. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Performs a two's complement negation on a 64-bit register or memory operand. ">     
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "nop" description = "No Operation" clazz = "">     
            <arg description="Performs no operation. ">     
            </arg>
        </instruction>
        <instruction name = "not" description = "One’s Complement Negation" clazz = "Logical" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Complements the bits in an 8-bit register or memory operand. ">     
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Complements the bits in a 16-bit register or memory operand. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Complements the bits in a 32-bit register or memory operand. ">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Compliments the bits in a 64-bit register or memory operand. ">     
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>
        <instruction name = "or" description = "Logical OR" clazz = "Logical" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="OR the contents of %al% with an immediate 8-bit value.">     
                <param val = "%al%"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="OR the contents of %ax% with an immediate 16-bit value.">     
                <param val = "%ax%"/>
                <param val = "imm16"/>
            </arg>        
            <arg description="OR the contents of %eax% with an immediate 32-bit value.">     
                <param val = "%eax%"/>
                <param val = "imm32"/>
            </arg>       
            <arg description="OR the contents of %rax% with a sign-extended immediate 32-bit value">     
                <param val = "%rax%"/>
                <param val = "imm32"/>
            </arg>        
            <arg description="OR the contents of an 8-bit register or memory operand and an immediate 8-bit value.">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="OR the contents of an 16-bit register or memory operand and an immediate 16-bit value.">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>        
            <arg description="OR the contents of an 32-bit register or memory operand and an immediate 32-bit value.">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>        
            <arg description="OR the contents of an 64-bit register or memory operand and an immediate 32-bit value.">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>       
            <arg description="OR the contents of a 16-bit register or memory operand and a sign-extended immediate 8-bit value.">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="OR the contents of a 32-bit register or memory operand and a sign-extended immediate 8-bit value.">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="OR the contents of a 64-bit register or memory operand and a sign-extended immediate 8-bit value.">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>       
            <arg description="OR the contents of an 8-bit register or memory operand with the contents of an 8-bit register.">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>               
            <arg description="OR the contents of an 16-bit register or memory operand with the contents of an 16-bit register.">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>        
            <arg description="OR the contents of an 32-bit register or memory operand with the contents of an 32-bit register.">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>       
            <arg description="OR the contents of an 64-bit register or memory operand with the contents of an 64-bit register.">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>        
            <arg description="OR the contents of an 8-bit register or memory operand with the contents of an 8-bit register.">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>       
            <arg description="OR the contents of an 16-bit register or memory operand with the contents of an 16-bit register.">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>        
            <arg description="OR the contents of an 16-bit register or memory operand with the contents of an 16-bit register.">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>       
            <arg description="OR the contents of an 64-bit register or memory operand with the contents of an 64-bit register.">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>                 
        </instruction>
        <instruction name = "out" description = "Output to Port" clazz = "">     
            <arg description="Output the byte in the %al% register to the port specified by an 8-bit immediate value. ">     
                <param val = "imm8"/>
                <param val = "%al%"/>
            </arg>
            <arg description="Output the word in the %ax% register to the port specified by an 8- bit immediate value. ">     
                <param val = "imm8"/>
                <param val = "%ax%"/>
            </arg>
            <arg description="Output the doubleword in the %eax% register to the port specified by an 8-bit immediate value. ">     
                <param val = "imm8"/>
                <param val = "%eax%"/>
            </arg>
            <arg description="Output byte in %al% to the output port specified in %dx%. ">     
                <param val = "%dx%"/>
                <param val = "%al%"/>
            </arg>
            <arg description="Output byte in %ax% to the output port specified in %dx%. ">     
                <param val = "%dx%"/>
                <param val = "%ax%"/>
            </arg>
            <arg description="Output byte in %eax% to the output port specified in %dx%. ">     
                <param val = "%dx%"/>
                <param val = "%eax%"/>
            </arg>
        </instruction>
        <instruction name = "outs" description = "Output String" clazz = "">     
            <arg description="Output the byte in DS:rSI to the port specified in %dx% , then increment or decrement rSI. ">     
                <param val = "%dx%"/>
                <param val = "mem8"/>
            </arg>
            <arg description="Output the word in DS:rSI to the port specified in %dx% , then increment or decrement rSI. ">     
                <param val = "%dx%"/>
                <param val = "mem16"/>
            </arg>
            <arg description="Output the doubleword in DS:rSI to the port specified in %dx% , then increment or decrement rSI.  ">     
                <param val = "%dx%"/>
                <param val = "mem32"/>
            </arg>
        </instruction>
        <instruction name = "outsb" description = "Output String" clazz = "">     
            <arg description="Output the byte in DS:rSI to the port specified in %dx% , then increment or decrement rSI.  ">     
            </arg>
        </instruction>
        <instruction name = "outsw" description = "Output String" clazz = "">     
            <arg description="Output the word in DS:rSI to the port specified in %dx%, then increment or decrement rSI.">     
            </arg>
        </instruction>
        <instruction name = "outsd" description = "Output String" clazz = "">     
            <arg description="Output the doubleword in DS:rSI to the port specified in %dx%, then increment or decrement rSI. ">     
            </arg>
        </instruction>
        <instruction name = "pop" description = "Pop Stack" clazz = "DataTransfer" write = "%arg1%">     
            <arg description="Pop the top of the stack into a 16-bit register or memory location. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Pop the top of the stack into a 32-bit register or memory location.  ">     
                <param val = "reg32/mem32"/>              
            </arg>
            <arg description="Pop the top of the stack into a 64-bit register or memory location. ">     
                <param val = "reg64/mem64"/>           
            </arg>          
            <arg description="Pop the top of the stack into the DS register. (Invalid in 64-bit mode.) ">     
                <param val = "DS"/>
            </arg>        
            <arg description="Pop the top of the stack into the ES register. (Invalid in 64-bit mode.) ">     
                <param val = "ES"/>
            </arg>
            <arg description="Pop the top of the stack into the SS register. (Invalid in 64-bit mode.) ">     
                <param val = "SS"/>
            </arg>
            <arg description="Pop the top of the stack into the FS register. ">     
                <param val = "FS"/>
            </arg>
            <arg description="Pop the top of the stack into the %gs% register. ">     
                <param val = "%gs%"/>
            </arg>
        </instruction>    
        <instruction name = "popa" description = "POP All GPRs" clazz = "DataTransfer" write = "%di%%si%%bp%%sp%%bx%%dx%%cx%%ax%">     
            <arg description="Pop the DI , SI , BP , SP , %bx% , %dx% , CX , and %ax% registers. (Invalid in 64-bit mode.)  ">     
            </arg>
        </instruction>
        <instruction name = "popad" description = "POP All GPRs" clazz = "DataTransfer" write = "%edi%%esi%%ebp%%esp%%ebx%%edx%%ecx%%eax%">     
            <arg description="Pop the %edi%, %esi%, %ebp%, %esp%, %ebx%, %edx%, %ecx% and %eax% registers. (Invalid in 64-bit mode.)">     
            </arg>
        </instruction>
        <instruction name = "popf" description = "POP to FLAGS" clazz = "">     
            <arg description="Pop a word from the stack into the FLAGS register. ">     
            </arg>
        </instruction>
        <instruction name = "popfd" description = "POP to EFLAGS" clazz = "">     
            <arg description="Pop a word from the stack into the EFLAGS register. ">     
            </arg>
        </instruction>
        <instruction name = "popfq" description = "POP to RFLAGS" clazz = "">     
            <arg description="Pop a word from the stack into the RFLAGS register. ">     
            </arg>
        </instruction>
        <instruction name = "prefetch" description = "Prefetch L1 Data-Cache Line" clazz = "">     
            <arg description="Prefetch processor cache line into L1 data cache.  ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "prefetchw" description = "Prefetch L1 Data-Cache Line" clazz = "">     
            <arg description="Prefetch processor cache line into L1 data cache and mark it modified. ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "prefetchnta" description = "Prefetch Data to Cache Level" clazz = "">     
            <arg description="Move data closer to the processor using the NTA reference.  ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "prefetcht0" description = "Prefetch Data to Cache Level" clazz = "">     
            <arg description="Move data closer to the processor using the T0 reference. ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "prefetcht1" description = "Prefetch Data to Cache Level" clazz = "">     
            <arg description="Move data closer to the processor using the T1 reference. ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "prefetcht2" description = "Prefetch Data to Cache Level" clazz = "">     
            <arg description="Move data closer to the processor using the T2 reference. ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "push" description = "Push onto Stack" clazz = "DataTransfer" read = "%arg1%">     
            <arg description="Push the contents of a 16-bit register or memory operand onto the stack. ">     
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Push the contents of a 32-bit register or memory operand onto the stack.">     
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Push the contents of a 64-bit register or memory operand onto the stack. ">     
                <param val = "reg64/mem64"/>
            </arg>
            <arg description="Push the contents of a 16-bit register onto the stack. ">     
                <param val = "reg16"/>
            </arg>
            <arg description="Push the contents of a 32-bit register onto the stack.  ">     
                <param val = "reg32"/>
            </arg>
            <arg description="Push the contents of a 64-bit register onto the stack. ">     
                <param val = "reg64"/>
            </arg>
            <arg description="Push an 8-bit immediate value (sign-extended to 16 , 32 , or 64 bits) onto the stack. 230 ">     
                <param val = "imm8"/>
            </arg>       
            <arg description="Push a 16-bit immediate value onto the stack. ">     
                <param val = "imm16"/>
            </arg>
            <arg description="Push a 32-bit immediate value onto the stack. ">     
                <param val = "imm32"/>
            </arg>
            <arg description="Push a sign-extended 32-bit immediate value onto the stack. ">     
                <param val = "imm64"/>
            </arg>
            <arg description="Push the CS selector onto the stack. (Invalid in 64-bit mode.) ">     
                <param val = "CS"/>
            </arg>
            <arg description="Push the SS selector onto the stack. (Invalid in 64-bit mode.) ">     
                <param val = "SS"/>
            </arg>
            <arg description="Push the DS selector onto the stack. (Invalid in 64-bit mode.) ">     
                <param val = "DS"/>
            </arg>
            <arg description="Push the ES selector onto the stack. (Invalid in 64-bit mode.) ">     
                <param val = "ES"/>
            </arg>
            <arg description="Push the FS selector onto the stack. ">     
                <param val = "FS"/>
            </arg>
            <arg description="Push the %gs% selector onto the stack. ">     
                <param val = "%gs%"/>
            </arg>
        </instruction>    
        <instruction name = "pusha" description = "Push All GPRs onto Stack" clazz = "DataTransfer" read = "%di%%si%%bp%%sp%%bx%%dx%%cx%%ax%">     
            <arg description="Push the contents of the %ax% , CX , %dx% , %bx% , original SP , BP , SI , and DI registers onto the stack. (Invalid in 64-bit mode.)  ">     
            </arg>
        </instruction>
        <instruction name = "pushad" description = "Push All GPRs onto Stack" clazz = "DataTransfer" read = "%edi%%esi%%ebp%%esp%%ebx%%edx%%ecx%%eax%">     
            <arg description="Push the contents of the %eax%, %ecx%, %edx%, %ebx%, original %esp%, %ebp%, %esi%, and %edi% registers onto the stack. (Invalid in 64-bit mode.)  ">     
            </arg>
        </instruction>
        <instruction name = "pushf" description = "Push FLAGS onto Stack" clazz = "DataTransfer" read = "%flags%">     
            <arg description="Push the EFLAGS word onto the stack. ">     
            </arg>
        </instruction>
        <instruction name = "pushd" description = "Push EFLAGS onto Stack" clazz = "DataTransfer" read = "%eflags%">     
            <arg description="Push the FLAGS doubleword onto the stack. ">     
            </arg>
        </instruction>
        <instruction name = "pushq" description = "Push RFLAGS onto Stack" clazz = "%rflags%">     
            <arg description="Push the FLAGS doubleword onto the stack.  ">     
            </arg>
        </instruction>
        <instruction name = "rcl" description = "Rotate Through Carry Left" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location left 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location left 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate the17 bits consisting of the carry flag and a 16-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location left 1 bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>        
            <arg description="Rotate 33 bits consisting of the carry flag and a 32-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location left 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotates the 65 bits consisting of the carry flag and a 64-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>    
        <instruction name = "rcr" description = "Rotate Through Carry Right" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location right 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate the 9 bits consisting of the carry flag and an 8-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location right 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate the17 bits consisting of the carry flag and a 16-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate the 17 bits consisting of the carry flag and a 16-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location right 1 bit. 238 ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>       
            <arg description="Rotate 33 bits consisting of the carry flag and a 32-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate the 33 bits consisting of the carry flag and a 32-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location right 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate 65 bits consisting of the carry flag and a 64-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate the 65 bits consisting of the carry flag and a 64-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>    
        <instruction name = "ret" description = "Return from Called Procedure" clazz = "">     
            <arg description="Near return to the calling procedure. ">     
            </arg>
            <arg description="Near return to the calling procedure then pop of the specified number of bytes from the stack. ">     
                <param val = "imm16"/>
            </arg>
        </instruction>
        <instruction name = "rol" description = "Rotate Left" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Rotate an 8-bit register or memory operand left 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate an 8-bit register or memory operand left the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate an 8-bit register or memory operand left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate a 16-bit register or memory operand left 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate a 16-bit register or memory operand left the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate a 16-bit register or memory operand left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate a 32-bit register or memory operand left 1 bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate a 32-bit register or memory operand left the number of bits specified in the %cl% register. ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate a 32-bit register or memory operand left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate a 64-bit register or memory operand left 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>        
            <arg description="Rotate a 64-bit register or memory operand left the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate a 64-bit register or memory operand left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>    
        <instruction name = "ror" description = "Rotate Right" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Rotate an 8-bit register or memory location right 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate an 8-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate an 8-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate a 16-bit register or memory location right 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate a 16-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate a 16-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate a 32-bit register or memory location right 1 bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>
            <arg description="Rotate a 32-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate a 32-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Rotate a 64-bit register or memory location right 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>       
            <arg description="Rotate a 64-bit register or memory operand right the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Rotate a 64-bit register or memory operand right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>   
        <instruction name = "sahf" description = "Store %ah% into Flags" clazz = "">     
            <arg description="Loads the sign flag , the zero flag , the auxiliary flag , the parity flag , and the carry flag from the %ah% register into the lower 8 bits of the EFLAGS register. ">     
            </arg>
        </instruction>
        <instruction name = "sal" description = "Shift Left" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Shift an 8-bit register or memory location left 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift an 8-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift an 8-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 16-bit register or memory location left 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 16-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a 16-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 32-bit register or memory location left 1 bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 32-bit register or memory location left the number of bits specified in the %cl% register. 252 ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>        
            <arg description="Shift a 32-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 64-bit register or memory location left 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 64-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a 64-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>       
        <instruction name = "sar" description = "Shift Arithmetic Right" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Shift a signed 8-bit register or memory operand right 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a signed 8-bit register or memory operand right the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a signed 8-bit register or memory operand right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a signed 16-bit register or memory operand right 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>      
            <arg description="Shift a signed 16-bit register or memory operand right the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a signed 16-bit register or memory operand right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a signed 32-bit register or memory location 1 bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a signed 32-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a signed 32-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a signed 64-bit register or memory location right 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a signed 64-bit register or memory location right the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a signed 64-bit register or memory location right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>    
        <instruction name = "sbb" description = "Subtract with Borrow" clazz = "BinaryArithmetic" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Subtract an immediate 8-bit value from the %al% register with borrow. ">     
                <param val = "%al%"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract an immediate 16-bit value from the %ax% register with borrow. ">     
                <param val = "%ax%"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Subtract an immediate 32-bit value from the %eax% register with borrow. ">     
                <param val = "%eax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Subtract a sign-extended immediate 32-bit value from the %rax% register with borrow. ">     
                <param val = "%rax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Subtract an immediate 8-bit value from an 8-bit register or memory location with borrow. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract an immediate 16-bit value from a 16-bit register or memory location with borrow. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Subtract an immediate 32-bit value from a 32-bit register or memory location with borrow. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Subtract a sign-extended immediate 32-bit value from a 64-bit register or memory location with borrow. 258 ">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>       
            <arg description="Subtract a sign-extended 8-bit immediate value from a 16-bit register or memory location with borrow. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract a sign-extended 8-bit immediate value from a 32-bit register or memory location with borrow. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract a sign-extended 8-bit immediate value from a 64-bit register or memory location with borrow. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract the contents of an 8-bit register from an 8-bit register or memory location with borrow. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Subtract the contents of a 16-bit register from a 16-bit register or memory location with borrow. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Subtract the contents of a 32-bit register from a 32-bit register or memory location with borrow. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Subtract the contents of a 64-bit register from a 64-bit register or memory location with borrow. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
            <arg description="Subtract the contents of an 8-bit register or memory location from the contents of an 8-bit register with borrow. ">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Subtract the contents of a 16-bit register or memory location from the contents of a 16-bit register with borrow. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Subtract the contents of a 32-bit register or memory location from the contents of a 32-bit register with borrow. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Subtract the contents of a 64-bit register or memory location from the contents of a 64-bit register with borrow. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>    
        <instruction name = "scas" description = "Scan String" clazz = "">     
            <arg description="Compare the contents of the %al% register with the byte at ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem8"/>
            </arg>
            <arg description="Compare the contents of the %ax% register with the word at ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem16"/>
            </arg>
            <arg description="Compare the contents of the %eax% register with the doubleword at ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem32"/>
            </arg>
            <arg description="Compare the contents of the %rax% register with the quadword at ES:rDI , and then increment or decrement rDI.  ">     
                <param val = "mem64"/>
            </arg>
        </instruction>
        <instruction name = "scasb" description = "Scan String" clazz = "">     
            <arg description="Compare the contents of the %al% register with the byte at ES:rDI , and then increment or decrement rDI.  ">     
            </arg>
        </instruction>
        <instruction name = "scasw" description = "Scan String" clazz = "">     
            <arg description="Compare the contents of the %ax% register with the word at ES:rDI , and then increment or decrement rDI.  ">     
            </arg>
        </instruction>
        <instruction name = "scasd" description = "Scan String" clazz = "">     
            <arg description="Compare the contents of the %eax% register with the doubleword at ES:rDI , and then increment or decrement rDI.  ">     
            </arg>
        </instruction>
        <instruction name = "scasq" description = "Scan String" clazz = "">     
            <arg description="Compare the contents of the %rax% register with the quadword at ES:rDI , and then increment or decrement rDI.  ">     
            </arg>
        </instruction>       
        <instruction name = "seto" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if overflow (%of% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setno" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not overflow (%of% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setb" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if below (%cf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setc" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if carry (%cf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnae" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not above or equal (%cf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnb" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not below (%cf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnc" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not carry (%cf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setae" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if above or equal (%cf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setz" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if zero (%zf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "sete" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if equal (%zf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnz" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not zero (%zf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setne" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not equal (%zf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>  
        <instruction name = "setbe" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if below or equal (%cf% = 1 or %zf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setna" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not above (%cf% = 1 or %zf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>        
        <instruction name = "setnbe" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not below or equal (%cf% = 0 and %zf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "seta" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if above (%cf% = 0 and %zf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "sets" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if sign (%sf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setns" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not sign (%sf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setp" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if parity (%pf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setpe" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if parity even (%pf% = 1).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnp" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not parity (%pf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setpo" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if parity odd (%pf% = 0).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setl" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if less (%sf% != %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnge" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not greater or equal (%sf% != %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnl" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not less (%sf% = %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setge" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if greater or equal (%sf% = %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>    
        <instruction name = "setle" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if less or equal (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setng" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not greater (%zf% = 1 or %sf% != %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setnle" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if not less or equal (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>
        <instruction name = "setg" description = "Set Byte on Condition" clazz = "Bit" write = "%arg1%">     
            <arg description="Set byte if greater (%zf% = 0 and %sf% = %of%).">     
                <param val = "reg8/mem8"/>
            </arg>
        </instruction>           
        <instruction name = "sfence" description = "Store Fence" clazz = "">     
            <arg description="Force strong ordering of (serialized) store operations. ">     
            </arg>
        </instruction>
        <instruction name = "shl" description = "Shift Left" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Shift an 8-bit register or memory location left 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift an 8-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift an 8-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 16-bit register or memory location left 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 16-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a 16-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 32-bit register or memory location left 1 bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 32-bit register or memory location left the number of bits specified in the %cl% register. 252 ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>        
            <arg description="Shift a 32-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 64-bit register or memory location left 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 64-bit register or memory location left the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a 64-bit register or memory location left the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>
        <instruction name = "shld" description = "Shift Left Double" clazz = "Shift" read = "%arg1%%arg2%%arg3%" write = "%arg1%%arg2%">     
            <arg description="Shift bits of a 16-bit destination register or memory operand to the left the number of bits specified in an 8-bit immediate value , while shifting in bits from the second operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift bits of a 16-bit destination register or memory operand to the left the number of bits specified in the %cl% register , while shifting in bits from the second operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift bits of a 32-bit destination register or memory operand to the left the number of bits specified in an 8-bit immediate value , while shifting in bits from the second operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift bits of a 32-bit destination register or memory operand to the left the number of bits specified in the %cl% register , while shifting in bits from the second operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift bits of a 64-bit destination register or memory operand to the left the number of bits specified in an 8-bit immediate value , while shifting in bits from the second operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift bits of a 64-bit destination register or memory operand to the left the number of bits specified in the %cl% register , while shifting in bits from the second operand. 268 ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
                <param val = "%cl%"/>
            </arg>       
        </instruction>
        <instruction name = "shr" description = "Shift Right" clazz = "Shift" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Shift an 8-bit register or memory operand right 1 bit. ">     
                <param val = "reg8/mem8"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift an 8-bit register or memory operand right the number of bits specified in the %cl% register. ">     
                <param val = "reg8/mem8"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift an 8-bit register or memory operand right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 16-bit register or memory operand right 1 bit. ">     
                <param val = "reg16/mem16"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 16-bit register or memory operand right the number of bits specified in the %cl% register. ">     
                <param val = "reg16/mem16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a 16-bit register or memory operand right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift a 32-bit register or memory operand right 1 bit. ">     
                <param val = "reg32/mem32"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 32-bit register or memory operand right the number of bits specified in the %cl% register. ">     
                <param val = "reg32/mem32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a 32-bit register or memory operand right the number of bits specified by an 8-bit immediate value. 270 ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="Shift a 64-bit register or memory operand right 1 bit. ">     
                <param val = "reg64/mem64"/>
                <param val = "1"/>
            </arg>
            <arg description="Shift a 64-bit register or memory operand right the number of bits specified in the %cl% register. ">     
                <param val = "reg64/mem64"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift a 64-bit register or memory operand right the number of bits specified by an 8-bit immediate value. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>
        </instruction>
        <instruction name = "shrd" description = "Shift Right Double" clazz = "Shift" read = "%arg1%%arg2%%arg3%" write = "%arg1%%arg2%">     
            <arg description="Shift bits of a 16-bit destination register or memory operand to the right the number of bits specified in an 8-bit immediate value , while shifting in bits from the second operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift bits of a 16-bit destination register or memory operand to the right the number of bits specified in the %cl% register , while shifting in bits from the second operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift bits of a 32-bit destination register or memory operand to the right the number of bits specified in an 8-bit immediate value , while shifting in bits from the second operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift bits of a 32-bit destination register or memory operand to the right the number of bits specified in the %cl% register , while shifting in bits from the second operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
                <param val = "%cl%"/>
            </arg>
            <arg description="Shift bits of a 64-bit destination register or memory operand to the right the number of bits specified in an 8-bit immediate value , while shifting in bits from the second operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Shift bits of a 64-bit destination register or memory operand to the right the number of bits specified in the %cl% register , while shifting in bits from the second operand. 272 ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
                <param val = "%cl%"/>
            </arg>        
        </instruction>
        <instruction name = "stc" description = "Set Carry Flag" clazz = "">     
            <arg description="Set the carry flag (%cf%) to one. ">     
            </arg>
        </instruction>
        <instruction name = "std" description = "Set Direction Flag" clazz = "">     
            <arg description="Set the direction flag (DF) to one. ">     
            </arg>
        </instruction>
        <instruction name = "stos" description = "Store String" clazz = "">     
            <arg description="Store the contents of the %al% register to ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem8"/>
            </arg>
            <arg description="Store the contents of the %ax% register to ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem16"/>
            </arg>
            <arg description="Store the contents of the %eax% register to ES:rDI , and then increment or decrement rDI. ">     
                <param val = "mem32"/>
            </arg>
            <arg description="Store the contents of the %rax% register to ES:rDI , and then increment or decrement rDI.  ">     
                <param val = "mem64"/>
            </arg>
        </instruction>
        <instruction name = "stosb" description = "Store String" clazz = "">     
            <arg description="Store the contents of the %al% register to ES:rDI, and then increment or decrement rDI. ">                 
            </arg>
        </instruction>
        <instruction name = "stosw" description = "Store String" clazz = "">     
            <arg description="Store the contents of the %ax% register to ES:rDI, and then increment or decrement rDI. ">                 
            </arg>
        </instruction>
        <instruction name = "stosd" description = "Store String" clazz = "">     
            <arg description="Store the contents of the %eax% register to ES:rDI, and then increment or decrement rDI. ">                 
            </arg>
        </instruction>
        <instruction name = "stosq" description = "Store String" clazz = "">     
            <arg description="Store the contents of the %rax% register to ES:rDI, and then increment or decrement rDI. ">                 
            </arg>
        </instruction>     
        <instruction name = "sub" description = "Subtract" clazz = "BinaryArithmetic" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="Subtract an immediate 8-bit value from the %al% register and store the result in %al%. ">     
                <param val = "%al%"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract an immediate 16-bit value from the %ax% register and store the result in %ax%. ">     
                <param val = "%ax%"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Subtract an immediate 32-bit value from the %eax% register and store the result in %eax%. ">     
                <param val = "%eax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Subtract a sign-extended immediate 32-bit value from the %rax% register and store the result in %rax%. ">     
                <param val = "%rax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Subtract an immediate 8-bit value from an 8-bit destination register or memory location. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract an immediate 16-bit value from a 16-bit destination register or memory location. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>
            <arg description="Subtract an immediate 32-bit value from a 32-bit destination register or memory location. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Subtract a sign-extended immediate 32-bit value from a 64-bit destination register or memory location. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>
            <arg description="Subtract a sign-extended immediate 8-bit value from a 16-bit register or memory location. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract a sign-extended immediate 8-bit value from a 32-bit register or memory location. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>
            <arg description="Subtract a sign-extended immediate 8-bit value from a 64-bit register or memory location. 278 ">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>       
            <arg description="Subtract the contents of an 8-bit register from an 8-bit destination register or memory location. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Subtract the contents of a 16-bit register from a 16-bit destination register or memory location. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Subtract the contents of a 32-bit register from a 32-bit destination register or memory location. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Subtract the contents of a 64-bit register from a 64-bit destination register or memory location. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
            <arg description="Subtract the contents of an 8-bit register or memory operand from an 8-bit destination register. ">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Subtract the contents of a 16-bit register or memory operand from a 16-bit destination register. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Subtract the contents of a 32-bit register or memory operand from a 32-bit destination register. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Subtract the contents of a 64-bit register or memory operand from a 64-bit destination register. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>    
        <instruction name = "test" description = "Test Bits" clazz = "Bit" read = "%arg1%%arg2%" write = "%rflags%">     
            <arg description="AND an immediate 8-bit value with the contents of the %al% register and set rFLAGS to reflect the result. ">     
                <param val = "%al%"/>
                <param val = "imm8"/>
            </arg>
            <arg description="AND an immediate 16-bit value with the contents of the %ax% register and set rFLAGS to reflect the result. ">     
                <param val = "%ax%"/>
                <param val = "imm16"/>
            </arg>
            <arg description="AND an immediate 32-bit value with the contents of the %eax% register and set rFLAGS to reflect the result. ">     
                <param val = "%eax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="AND a sign-extended immediate 32-bit value with the contents of the %rax% register and set rFLAGS to reflect the result. ">     
                <param val = "%rax%"/>
                <param val = "imm32"/>
            </arg>
            <arg description="AND an immediate 8-bit value with the contents of an 8-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>
            <arg description="AND an immediate 16-bit value with the contents of a 16-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>
            <arg description="AND an immediate 32-bit value with the contents of a 32-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>
            <arg description="AND a sign-extended immediate32-bit value with the contents of a 64-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>
            <arg description="AND the contents of an 8-bit register with the contents of an 8-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="AND the contents of a 16-bit register with the contents of a 16-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="AND the contents of a 32-bit register with the contents of a 32-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="AND the contents of a 64-bit register with the contents of a 64-bit register or memory operand and set rFLAGS to reflect the result. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>      
        </instruction>
        <instruction name = "xadd" description = "Exchange and Add" clazz = "DataTransfer" read = "%arg1%%arg2%" write = "%arg1%%arg2%">     
            <arg description="Exchange the contents of an 8-bit register with the contents of an 8-bit destination register or memory operand and load their sum into the destination. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Exchange the contents of a 16-bit register with the contents of a 16-bit destination register or memory operand and load their sum into the destination. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Exchange the contents of a 32-bit register with the contents of a 32-bit destination register or memory operand and load their sum into the destination. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Exchange the contents of a 64-bit register with the contents of a 64-bit destination register or memory operand and load their sum into the destination. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
        </instruction>
        <instruction name = "xchg" description = "Exchange" clazz = "DataTransfer" read = "%arg1%%arg2%" write = "%arg1%%arg2%">     
            <arg description="Exchange the contents of the %ax% register with the contents of a 16-bit register. ">     
                <param val = "%ax%"/>
                <param val = "reg16"/>
            </arg>
            <arg description="Exchange the contents of a 16-bit register with the contents of the %ax% register. ">     
                <param val = "reg16"/>
                <param val = "%ax%"/>
            </arg>
            <arg description="Exchange the contents of the %eax% register with the contents of a 32-bit register. ">     
                <param val = "%eax%"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Exchange the contents of a 32-bit register with the contents of the %eax% register. ">     
                <param val = "reg32"/>
                <param val = "%eax%"/>
            </arg>
            <arg description="Exchange the contents of the %rax% register with the contents of a 64-bit register. ">     
                <param val = "%rax%"/>
                <param val = "reg64"/>
            </arg>
            <arg description="Exchange the contents of a 64-bit register with the contents of the %rax% register. ">     
                <param val = "reg64"/>
                <param val = "%rax%"/>
            </arg>
            <arg description="Exchange the contents of an 8-bit register with the contents of an 8-bit register or memory operand. ">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>
            <arg description="Exchange the contents of an 8-bit register or memory operand with the contents of an 8-bit register. ">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>
            <arg description="Exchange the contents of a 16-bit register with the contents of a 16-bit register or memory operand. ">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>       
            <arg description="Exchange the contents of a 16-bit register or memory operand with the contents of a 16-bit register. ">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>
            <arg description="Exchange the contents of a 32-bit register with the contents of a 32-bit register or memory operand. ">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>
            <arg description="Exchange the contents of a 32-bit register or memory operand with the contents of a 32-bit register. ">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>
            <arg description="Exchange the contents of a 64-bit register with the contents of a 64-bit register or memory operand. ">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>
            <arg description="Exchange the contents of a 64-bit register or memory operand with the contents of a 64-bit register. ">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>
        </instruction>   
        <instruction name = "xlat" description = "Translate Table Index" clazz = "">     
            <arg description="Set %al% to the contents of DS:[%rbx% + unsigned %al%]. ">     
                <param val = "mem8"/>
            </arg>
        </instruction>
        <instruction name = "xlatb" description = "Translate Table Index" clazz = "">     
            <arg description="Set %al% to the contents of DS:[r%bx% + unsigned %al%]. ">         
            </arg>
        </instruction>
        <instruction name = "xor" description = "Logical Exclusive OR" clazz = "Logical" read = "%arg1%%arg2%" write = "%arg1%">     
            <arg description="XOR the contents of %al% with an immediate 8-bit value.">     
                <param val = "%al%"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="XOR the contents of %ax% with an immediate 16-bit value.">     
                <param val = "%ax%"/>
                <param val = "imm16"/>
            </arg>        
            <arg description="XOR the contents of %eax% with an immediate 32-bit value.">     
                <param val = "%eax%"/>
                <param val = "imm32"/>
            </arg>       
            <arg description="XOR the contents of %rax% with a sign-extended immediate 32-bit value">     
                <param val = "%rax%"/>
                <param val = "imm32"/>
            </arg>        
            <arg description="XOR the contents of an 8-bit register or memory operand and an immediate 8-bit value.">     
                <param val = "reg8/mem8"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="XOR the contents of an 16-bit register or memory operand and an immediate 16-bit value.">     
                <param val = "reg16/mem16"/>
                <param val = "imm16"/>
            </arg>        
            <arg description="XOR the contents of an 32-bit register or memory operand and an immediate 32-bit value.">     
                <param val = "reg32/mem32"/>
                <param val = "imm32"/>
            </arg>        
            <arg description="XOR the contents of an 64-bit register or memory operand and an immediate 32-bit value.">     
                <param val = "reg64/mem64"/>
                <param val = "imm32"/>
            </arg>       
            <arg description="XOR the contents of a 16-bit register or memory operand and a sign-extended immediate 8-bit value.">     
                <param val = "reg16/mem16"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="XOR the contents of a 32-bit register or memory operand and a sign-extended immediate 8-bit value.">     
                <param val = "reg32/mem32"/>
                <param val = "imm8"/>
            </arg>        
            <arg description="XOR the contents of a 64-bit register or memory operand and a sign-extended immediate 8-bit value.">     
                <param val = "reg64/mem64"/>
                <param val = "imm8"/>
            </arg>       
            <arg description="XOR the contents of an 8-bit register or memory operand with the contents of an 8-bit register.">     
                <param val = "reg8/mem8"/>
                <param val = "reg8"/>
            </arg>               
            <arg description="XOR the contents of an 16-bit register or memory operand with the contents of an 16-bit register.">     
                <param val = "reg16/mem16"/>
                <param val = "reg16"/>
            </arg>        
            <arg description="XOR the contents of an 32-bit register or memory operand with the contents of an 32-bit register.">     
                <param val = "reg32/mem32"/>
                <param val = "reg32"/>
            </arg>       
            <arg description="XOR the contents of an 64-bit register or memory operand with the contents of an 64-bit register.">     
                <param val = "reg64/mem64"/>
                <param val = "reg64"/>
            </arg>        
            <arg description="XOR the contents of an 8-bit register or memory operand with the contents of an 8-bit register.">     
                <param val = "reg8"/>
                <param val = "reg8/mem8"/>
            </arg>       
            <arg description="XOR the contents of an 16-bit register or memory operand with the contents of an 16-bit register.">     
                <param val = "reg16"/>
                <param val = "reg16/mem16"/>
            </arg>        
            <arg description="XOR the contents of an 16-bit register or memory operand with the contents of an 16-bit register.">     
                <param val = "reg32"/>
                <param val = "reg32/mem32"/>
            </arg>       
            <arg description="XOR the contents of an 64-bit register or memory operand with the contents of an 64-bit register.">     
                <param val = "reg64"/>
                <param val = "reg64/mem64"/>
            </arg>                         
        </instruction>
    </instruction_group>
</assembler>
