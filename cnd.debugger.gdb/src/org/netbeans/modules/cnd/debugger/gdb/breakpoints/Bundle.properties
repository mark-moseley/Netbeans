# This module is part of NetBeans and is open-source.
# You can see http://www.netbeans.org/about/legal/index.html for details.
#
# You may use the binary however you like. The source file license is:
#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.

# GDB Debugger Type
CTL_Gdb_breakpoint_events_category_name=C, C++, Fortran (gdb)
# Line Breakpoint Type
CTL_Gdb_Line_Breakpoint=Line
# Function Breakpoint Type
CTL_Gdb_Function_Breakpoint=Function
# Address Breakpoint Type
CTL_Gdb_Address_Breakpoint=Address

# DebuggerAnnotation
TOOLTIP_DISABLED_CONDITIONAL_BREAKPOINT=Disabled Conditional Breakpoint
TOOLTIP_DISABLED_BREAKPOINT=Disabled Breakpoint
TOOLTIP_ANNOTATION=TOOLTIP_ANNOTATION
TOOLTIP_CALLSITE=Call Stack Line
TOOLTIP_BREAKPOINT=Breakpoint
TOOLTIP_CONDITIONAL_BREAKPOINT=Conditional Breakpoint
TOOLTIP_CURRENT_PC=Current Program Counter

# New Breakpoint Window (Line Breakpoint)
L_Line_Breakpoint_BorderTitle=Settings
ACSD_L_Line_Breakpoint_File_Name=File Name:
ACSD_TF_Line_Breakpoint_File_Name=File Name:
L_Line_Breakpoint_File_Name=File Name:
MN_L_Line_Breakpoint_File_Name=F
TTT_TF_Line_Breakpoint_File_Name=File Name
ACSD_L_Line_Breakpoint_Condition=Breakpoint Condition:
ACSD_TF_Line_Breakpoint_Condition=Breakpoint Condition:
L_Line_Breakpoint_Condition=Breakpoint Condition:
MN_L_Line_Breakpoint_Condition=C
TTT_TF_Line_Breakpoint_Condition=Breakpoint Condition
ACSD_L_Line_Breakpoint_Line_Number=Line Number:
ACSD_TF_Line_Breakpoint_Line_Number=Line Number:
L_Line_Breakpoint_Line_Number=Line Number:
MN_L_Line_Breakpoint_Line_Number=L
TTT_TF_Line_Breakpoint_Line_Number=Line Number
MSG_No_Line_Number_Spec=Line Number should be specified.
MSG_NonPositive_Line_Number_Spec=Line Number should be positive.
MSG_TooBig_Line_Number_Spec=Line Number is too big.
MSG_No_File_Name_Spec=File Name should be specified.
MSG_File_Name_Does_Not_Exist=The specified file does not exist.
CTL_Address_Breakpoint_Print_Text=Address breakpoint hit

# Both {lineNumber} and {fileName} are substitution keywords and should not
# get translated. The rest of the message should be translated...
CTL_Line_Breakpoint_Print_Text=Breakpoint hit at line {lineNumber} in file {fileName}.

# New Breakpoint Window (Function Breakpoint)
L_Function_Breakpoint_BorderTitle=Settings
ACSD_L_Function_Breakpoint_File_Name=File Name:
ACSD_TF_Function_Breakpoint_File_Name=File Name:
L_Function_Breakpoint_File_Name=File Name:
MN_L_Function_Breakpoint_File_Name=F
TTT_TF_Function_Breakpoint_File_Name=File Name
ACSD_L_Function_Breakpoint_Condition=Breakpoint Condition:
ACSD_TF_Function_Breakpoint_Condition=Breakpoint Condition:
L_Function_Breakpoint_Condition=Breakpoint Condition:
MN_L_Function_Breakpoint_Condition=C
TTT_TF_Function_Breakpoint_Condition=Breakpoint Condition
ACSD_L_Function_Breakpoint_Line_Number=Line Number:
ACSD_TF_Function_Breakpoint_Line_Number=Line Number:
L_Function_Breakpoint_Line_Number=Line Number:
MN_L_Function_Breakpoint_Line_Number=L
TTT_TF_Function_Breakpoint_Line_Number=Line Number
ACSD_L_Function_Breakpoint_Function_Name=Function Name:
ACSD_TF_Function_Breakpoint_Function_Name=Function Name:
L_Function_Breakpoint_Function_Name=Function Name:
MN_L_Function_Breakpoint_Function_Name=N
TTT_TF_Function_Breakpoint_Function_Name=Function Name, e.g. main or func(int,char**)

# {functionName} is a substitution string and should not be translated
CTL_Function_Breakpoint_Print_Text=Function breakpoint hit in function {functionName}
MSG_No_Function_Name_Spec=Function Name should be specified.
L_Conditions_Breakpoint_BorderTitle=Conditions
L_cbCondition=Condition:
TT_cbCondition=Breakpoint hits if the expression evaluates to true
TT_tfCondition=The breakpoint conditional expression
L_SkipCount=Break when hit count exceeds:
TT_SkipCount=Break only when the hit count exceeds the skip count

# Actions Panel
L_Actions_Panel_BorderTitle=Actions
ACSD_Actions_Panel=Specify actions to be done when breakpoint happens
ACSN_Actions_Panel=Actions
ACSD_CB_Actions_Panel=Specify actions to be done when breakpoint happens
ACSN_CB_Actions_Panel=Actions
TTT_TF_Actions_Panel_Print_Text=Print this Text when breakpoint happens
ACSD_TF_Actions_Panel_Print_Text=Print this Text when breakpoint happens
ACSN_TF_Actions_Panel_Print_Text=Print Text:
L_Actions_Panel_Print_Text=Print Text:
ACSD_L_Actions_Panel_Print_Text=Print Text:
MN_L_Actions_Panel_Print_Text=P
ACSD_CB_Actions_Panel_Suspend=Suspend specified threads
ACSN_CB_Actions_Panel_Suspend=Suspend:
L_Actions_Panel_Suspend=Suspend:
ACSD_L_Actions_Panel_Suspend=Suspend:
MN_L_Actions_Panel_Suspend=S
TTT_CB_Actions_Panel_Suspend=Suspend specified threads
LBL_CB_Actions_Panel_Suspend_None=No thread (continue)
LBL_CB_Actions_Panel_Suspend_Current=Breakpoint thread
LBL_CB_Actions_Panel_Suspend_All=All threads

HINT_UnimplementedCondition=Breakpoint conditions are currently unimplemented.
L_Actions_Panel_ThreadID=Thread ID:
MN_ThreadID=T
TT_ThreadID=Thread ID of breakpoint thread
MNEM_ProcLabel=P
ConditionsPanel.tfCondition.contentType=text/x-c
ConditionsPanel.tfCondition.text=
MNEM_cbCondition=C
MNEM_cbWhenHitCount=B
TT_SkiptCount=Break only when the hit count exceeds the skip count
