/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.uihandler;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.EditorKit;
import org.netbeans.lib.uihandler.LogRecords;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.text.CloneableEditorSupport;

/**
 *
 * @author  Jaroslav Tulach
 */
public class SubmitPanel extends javax.swing.JPanel 
implements ExplorerManager.Provider, PropertyChangeListener {
    
    /** Creates new form SubmitPanel */
    public SubmitPanel() {
        manager = new ExplorerManager();
        
        initComponents();
    
        EditorKit betterXML = CloneableEditorSupport.getEditorKit("text/xml");
        if (betterXML != null) {
            record.setEditorKit(betterXML);
            text.setEditorKit(betterXML);
        }
        
        manager.addPropertyChangeListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        structured = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        listView1 = new org.openide.explorer.view.ListView();
        jScrollPane1 = new javax.swing.JScrollPane();
        record = new javax.swing.JEditorPane();
        raw = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        text = new javax.swing.JEditorPane();

        setPreferredSize(new java.awt.Dimension(640, 480));
        setLayout(new java.awt.BorderLayout());

        tabs.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 8, 0, 8));

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        listView1.setTraversalAllowed(false);
        jSplitPane1.setLeftComponent(listView1);

        record.setEditable(false);
        jScrollPane1.setViewportView(record);

        jSplitPane1.setRightComponent(jScrollPane1);

        org.jdesktop.layout.GroupLayout structuredLayout = new org.jdesktop.layout.GroupLayout(structured);
        structured.setLayout(structuredLayout);
        structuredLayout.setHorizontalGroup(
            structuredLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(structuredLayout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );
        structuredLayout.setVerticalGroup(
            structuredLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(structuredLayout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab(org.openide.util.NbBundle.getMessage(SubmitPanel.class, "MSG_TabRaw"), structured); // NOI18N

        text.setEditable(false);
        jScrollPane2.setViewportView(text);

        org.jdesktop.layout.GroupLayout rawLayout = new org.jdesktop.layout.GroupLayout(raw);
        raw.setLayout(rawLayout);
        rawLayout.setHorizontalGroup(
            rawLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(rawLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );
        rawLayout.setVerticalGroup(
            rawLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, rawLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 594, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabs.addTab(org.openide.util.NbBundle.getMessage(SubmitPanel.class, "MSG_Tab_Text"), raw); // NOI18N

        add(tabs, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public ExplorerManager getExplorerManager() {
        return manager;
    }
    
    public void addRecord(LogRecord r) {
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try {
            LogRecords.write(os, r);
            text.getDocument().insertString(text.getDocument().getLength(), os.toString("UTF-8"), null); // NOI18N
            text.getCaret().setDot(0);
        } catch (IOException ex) {
            Installer.LOG.log(Level.WARNING, null, ex);
        } catch (BadLocationException ex) {
            Installer.LOG.log(Level.WARNING, null, ex);
        }
    }
    
    private void clearRecord() {
        try {
            record.getDocument().remove(0, record.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger("global").log(Level.SEVERE,
                ex.getMessage(), ex);
        }
}
    
    public void propertyChange(PropertyChangeEvent ev) {
        if (ExplorerManager.PROP_SELECTED_NODES.equals(ev.getPropertyName())) {
            Node[] arr = getExplorerManager().getSelectedNodes();
            if (arr.length != 1) {
                clearRecord();
                return;
            }
            
            LogRecord data = arr[0].getLookup().lookup(LogRecord.class);
            if (data == null) {
                clearRecord();
                return;
            }
            
            try {
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                LogRecords.write(os, data);
                os.close();
                record.setText(os.toString());
                record.getCaret().setDot(0);
            } catch (IOException ex) {
                Logger.getLogger("global").log(Level.SEVERE,
                    ex.getMessage(), ex);
                clearRecord();
            }
            
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private org.openide.explorer.view.ListView listView1;
    private javax.swing.JPanel raw;
    private javax.swing.JEditorPane record;
    private javax.swing.JPanel structured;
    private javax.swing.JTabbedPane tabs;
    javax.swing.JEditorPane text;
    // End of variables declaration//GEN-END:variables
    
    
    private ExplorerManager manager;    
}
