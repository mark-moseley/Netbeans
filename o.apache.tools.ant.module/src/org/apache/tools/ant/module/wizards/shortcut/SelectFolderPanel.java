/*
 *                         Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License Version
 * 1.0 (the "License"). You may not use this file except in compliance with 
 * the License. A copy of the License is available at http://www.sun.com/
 *
 * The Original Code is the Ant module
 * The Initial Developer of the Original Code is Jayme C. Edwards.
 * Portions created by Jayme C. Edwards are Copyright (c) 2000.
 * All Rights Reserved.
 *
 * Contributor(s): Jesse Glick.
 */

package org.apache.tools.ant.module.wizards.shortcut;

import java.awt.Component;
import java.net.URL;
import java.net.MalformedURLException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;
import org.openide.loaders.TemplateWizard;
import org.openide.nodes.Node;
import org.openide.loaders.DataFolder;
import org.openide.explorer.ExplorerManager;
import org.apache.tools.ant.module.AntModule;
import java.beans.PropertyVetoException;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import org.openide.nodes.FilterNode;

public class SelectFolderPanel extends javax.swing.JPanel implements WizardDescriptor.Panel, PropertyChangeListener {

    private String prop;
    private boolean topOK;
    
    /** Create the wizard panel and set up some basic properties. */
    public SelectFolderPanel (String name, String hint, Node top, boolean topOK, boolean stripAmps, String prop) {
        initComponents ();
        // Provide a name in the title bar.
        setName (name);
        hintsArea.setText (hint);
        explorerPanel.getExplorerManager ().setRootContext (new FolderFilter (top, stripAmps));
        explorerPanel.getExplorerManager ().addPropertyChangeListener (this);
        this.topOK = topOK;
        this.prop = prop;
    }
    
    private static final class FolderFilter extends FilterNode {
        private final boolean stripAmps;
        public FolderFilter (Node orig, boolean stripAmps) {
            super (orig, new FolderFilterChildren (orig, stripAmps));
            this.stripAmps = stripAmps;
        }
        public String getDisplayName () {
            String name = super.getDisplayName ();
            if (stripAmps) {
                int idx = name.indexOf ('&');
                if (idx != -1) {
                    name = name.substring (0, idx) + name.substring (idx + 1);
                }
            }
            return name;
        }
    }
    private static final class FolderFilterChildren extends FilterNode.Children {
        private final boolean stripAmps;
        public FolderFilterChildren (Node orig, boolean stripAmps) {
            super (orig);
            this.stripAmps = stripAmps;
        }
        protected Node[] createNodes (Object key) {
            Node child = (Node) key;
            if (child.getCookie (DataFolder.class) != null) {
                return new Node[] { new FolderFilter (child, stripAmps) };
            } else {
                return new Node[] { };
            }
        }
    }

    // --- VISUAL DESIGN OF PANEL ---
    
    public void requestFocus () {
        super.requestFocus ();
        treeView.requestFocus ();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents () {//GEN-BEGIN:initComponents
        hintsArea = new javax.swing.JTextArea ();
        explorerPanel = new org.openide.explorer.ExplorerPanel ();
        treeView = new org.openide.explorer.view.BeanTreeView ();
        
        setLayout (new java.awt.BorderLayout ());
        
        hintsArea.setWrapStyleWord (true);
        hintsArea.setLineWrap (true);
        hintsArea.setEditable (false);
        hintsArea.setForeground (new java.awt.Color (102, 102, 153));
        hintsArea.setBackground (new java.awt.Color (204, 204, 204));
        add (hintsArea, java.awt.BorderLayout.NORTH);
        
        treeView.setDefaultActionAllowed (false);
        treeView.setPopupAllowed (false);
        explorerPanel.add (treeView, java.awt.BorderLayout.CENTER);
        
        add (explorerPanel, java.awt.BorderLayout.CENTER);
        
    }//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea hintsArea;
    private org.openide.explorer.ExplorerPanel explorerPanel;
    private org.openide.explorer.view.BeanTreeView treeView;
    // End of variables declaration//GEN-END:variables

    // --- WizardDescriptor.Panel METHODS ---

    // Get the visual component for the panel. In this template, the same class
    // serves as the component and the Panel interface, but you could keep
    // them separate if you wished.
    public Component getComponent () {
        return this;
    }

    public HelpCtx getHelp () {
        // Show no Help button for this panel:
        return HelpCtx.DEFAULT_HELP;//XXX
    }

    public boolean isValid () {
        Node[] nodes = explorerPanel.getExplorerManager ().getSelectedNodes ();
        return nodes.length == 1 &&
               nodes[0].getCookie (DataFolder.class) != null &&
               (topOK || nodes[0] != explorerPanel.getExplorerManager ().getRootContext ());
    }

    private final Set listeners = new HashSet (1); // Set<ChangeListener>
    public final void addChangeListener (ChangeListener l) {
        synchronized (listeners) {
            listeners.add (l);
        }
    }
    public final void removeChangeListener (ChangeListener l) {
        synchronized (listeners) {
            listeners.remove (l);
        }
    }
    protected final void fireChangeEvent () {
        Iterator it;
        synchronized (listeners) {
            it = new HashSet (listeners).iterator ();
        }
        ChangeEvent ev = new ChangeEvent (this);
        while (it.hasNext ()) {
            ((ChangeListener) it.next ()).stateChanged (ev);
        }
    }

    public void readSettings (Object settings) {
        // XXX unimplemented currently...
        ExplorerManager mgr = explorerPanel.getExplorerManager ();
        try {
            mgr.setSelectedNodes (new Node[] { mgr.getRootContext () });
        } catch (PropertyVetoException pve) {
            AntModule.err.notify (pve);
        }
    }
    public void storeSettings (Object settings) {
        Node[] nodes = explorerPanel.getExplorerManager ().getSelectedNodes ();
        if (nodes.length != 1) return;
        DataFolder folder = (DataFolder) nodes[0].getCookie (DataFolder.class);
        if (folder == null) return;
        TemplateWizard wiz = (TemplateWizard) settings;
        wiz.putProperty (prop, folder);
    }

    public void propertyChange (PropertyChangeEvent evt) {
        if (ExplorerManager.PROP_SELECTED_NODES.equals (evt.getPropertyName ())) {
            fireChangeEvent ();
        }
    }
    
}
