/* The following code was generated by JFlex 1.4.1 on 3/24/08 3:35 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.modules.php.editor.PHPVersion;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/24/08 3:35 PM from the specification file
 * <tt>/space/hg/main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer  {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_START_HEREDOC = 6;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\15\2\0\1\11\22\0\1\12\1\26\1\17\1\103"+
    "\1\16\1\32\1\33\1\63\1\74\1\45\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\72\1\14\1\27\1\23\1\24\1\64"+
    "\1\13\1\40\1\7\1\51\1\42\1\3\1\65\1\60\1\62\1\52"+
    "\1\75\1\70\1\57\1\71\1\41\1\36\1\54\1\77\1\37\1\47"+
    "\1\56\1\61\1\73\1\67\1\6\1\66\1\10\1\101\1\20\1\102"+
    "\1\35\1\76\1\21\1\40\1\7\1\43\1\42\1\3\1\65\1\60"+
    "\1\62\1\53\1\75\1\70\1\57\1\71\1\41\1\36\1\55\1\77"+
    "\1\46\1\50\1\44\1\61\1\73\1\67\1\6\1\66\1\10\1\22"+
    "\1\34\1\100\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\4\0\1\2\1\3\2\0\2\4\1\5"+
    "\1\6\1\7\1\10\1\7\1\6\3\10\1\11\1\7"+
    "\1\12\1\7\1\13\1\14\1\15\12\7\15\10\1\5"+
    "\1\7\2\10\1\7\1\10\1\7\1\10\1\16\1\17"+
    "\1\1\1\20\1\21\2\20\1\1\3\20\3\22\2\1"+
    "\3\5\2\23\1\24\1\25\1\26\1\25\1\6\1\27"+
    "\1\6\1\30\1\27\1\31\1\2\2\5\1\3\2\0"+
    "\3\32\1\33\1\32\2\33\1\34\1\35\1\0\1\36"+
    "\1\0\1\37\1\6\1\0\1\40\6\10\1\41\2\0"+
    "\1\10\1\0\1\42\2\0\1\20\2\0\2\40\1\0"+
    "\1\43\1\44\1\40\4\10\1\45\2\10\1\46\13\10"+
    "\1\47\10\10\1\0\1\50\6\10\1\51\1\10\12\0"+
    "\1\10\3\0\1\52\2\53\1\54\1\55\1\53\3\0"+
    "\3\56\1\57\3\0\1\1\2\53\1\0\1\60\1\0"+
    "\1\61\1\52\1\0\1\2\1\62\1\0\1\3\1\63"+
    "\1\64\1\32\1\65\1\66\3\0\7\10\1\6\1\0"+
    "\1\10\3\0\4\10\1\67\2\10\1\70\6\10\1\71"+
    "\20\10\1\72\1\73\5\10\1\74\12\0\5\10\1\75"+
    "\1\76\1\1\1\0\1\32\2\0\1\10\1\77\5\10"+
    "\1\100\1\101\1\10\1\102\1\10\2\0\1\103\11\10"+
    "\1\104\2\10\1\105\1\10\1\106\14\10\1\107\3\10"+
    "\1\110\4\10\12\0\6\10\1\32\1\0\1\111\3\10"+
    "\1\112\3\10\1\113\1\114\2\115\1\0\3\10\1\116"+
    "\3\10\1\117\1\120\1\121\1\122\1\123\5\10\1\124"+
    "\2\10\1\125\4\10\1\126\1\10\1\127\1\130\1\10"+
    "\1\131\10\0\1\132\1\0\6\10\1\32\1\0\3\10"+
    "\1\133\1\10\1\134\1\0\1\135\5\10\1\136\1\137"+
    "\6\10\1\140\1\141\1\142\2\10\4\0\6\10\1\32"+
    "\1\4\1\143\4\10\1\0\1\144\1\10\1\145\1\146"+
    "\1\10\1\147\4\10\1\150\1\151\1\10\2\0\6\10"+
    "\1\32\1\0\3\10\1\152\1\0\1\10\1\153\1\154"+
    "\5\10\1\155\1\10\1\156\1\10\1\157\2\10\1\32"+
    "\1\0\1\10\1\160\1\10\1\161\2\10\1\162\2\10"+
    "\1\163\1\164\3\10\1\32\1\0\1\165\1\166\2\10"+
    "\1\167\1\170\2\10\1\171\1\0\4\10\1\0\1\172"+
    "\1\173\1\10\1\174\1\0\1\10\1\0\1\10\1\0"+
    "\1\175\14\0\1\176\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u0440\0\u0440\0\u06e8\0\u072c\0\u0440\0\u0440"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0440"+
    "\0\u0440\0\u0fac\0\u0ff0\0\u0440\0\u1034\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u1188\0\u0440\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u0440\0\u13a8\0\u0440\0\u0440\0\u13ec\0\u1430"+
    "\0\u1474\0\u0440\0\u14b8\0\u0440\0\u14fc\0\u0440\0\u1540\0\u1584"+
    "\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c\0\u0440\0\u0440"+
    "\0\u1760\0\u17a4\0\u0dd0\0\u0440\0\u17e8\0\u182c\0\u1870\0\u18b4"+
    "\0\u18f8\0\u193c\0\u1980\0\u0440\0\u19c4\0\u1a08\0\u1a4c\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u0440\0\u1b5c\0\u1ba0\0\u1be4\0\u0d8c\0\u1c28"+
    "\0\u072c\0\u1c6c\0\u0440\0\u1cb0\0\u1cf4\0\u08c4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u0660\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u0660"+
    "\0\u1f58\0\u1f9c\0\u0660\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u0660\0\u22cc"+
    "\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec"+
    "\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u0440"+
    "\0\u270c\0\u2750\0\u0f24\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u1034\0\u2a3c\0\u2a80"+
    "\0\u29f8\0\u0440\0\u0440\0\u0440\0\u2a3c\0\u2ac4\0\u1144\0\u2b08"+
    "\0\u2ac4\0\u0440\0\u2b08\0\u0440\0\u2b4c\0\u1320\0\u2b90\0\u2bd4"+
    "\0\u2b4c\0\u2b90\0\u13a8\0\u0440\0\u2c18\0\u0440\0\u2c5c\0\u2ca0"+
    "\0\u2ce4\0\u0440\0\u2d28\0\u2d6c\0\u0440\0\u0440\0\u2db0\0\u2df4"+
    "\0\u0440\0\u2e38\0\u2e7c\0\u1474\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c"+
    "\0\u2fd0\0\u3014\0\u3058\0\u1b5c\0\u309c\0\u30e0\0\u3124\0\u3168"+
    "\0\u31ac\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u0660\0\u3300\0\u3344"+
    "\0\u0660\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u0660"+
    "\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc"+
    "\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u0660\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u0660"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4"+
    "\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u0440"+
    "\0\u0440\0\u3ef4\0\u15c8\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u0660"+
    "\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u0660\0\u419c\0\u41e0"+
    "\0\u0660\0\u4224\0\u4268\0\u42ac\0\u31ac\0\u42f0\0\u4334\0\u4378"+
    "\0\u43bc\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u0660\0\u4554"+
    "\0\u4598\0\u0660\0\u45dc\0\u0660\0\u4620\0\u4664\0\u46a8\0\u46ec"+
    "\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c"+
    "\0\u0660\0\u4950\0\u4994\0\u49d8\0\u0660\0\u4a1c\0\u4a60\0\u4aa4"+
    "\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4"+
    "\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4"+
    "\0\u4f28\0\u4f6c\0\u4fb0\0\u0440\0\u4ff4\0\u5038\0\u507c\0\u0660"+
    "\0\u50c0\0\u5104\0\u5148\0\u0660\0\u0660\0\u518c\0\u0440\0\u51d0"+
    "\0\u5214\0\u5258\0\u529c\0\u0660\0\u52e0\0\u5324\0\u5368\0\u0660"+
    "\0\u0660\0\u0660\0\u0660\0\u0660\0\u53ac\0\u53f0\0\u5434\0\u5478"+
    "\0\u54bc\0\u0660\0\u5500\0\u5544\0\u0660\0\u5588\0\u55cc\0\u5610"+
    "\0\u5654\0\u0660\0\u5698\0\u0660\0\u0660\0\u56dc\0\u0660\0\u5720"+
    "\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u0440"+
    "\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c"+
    "\0\u5b60\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70\0\u5cb4\0\u0660\0\u5cf8"+
    "\0\u0660\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u0660\0\u0660"+
    "\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u0660\0\u0660"+
    "\0\u0660\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c\0\u61c0"+
    "\0\u6204\0\u6248\0\u628c\0\u62d0\0\u6314\0\u6358\0\u639c\0\u0660"+
    "\0\u63e0\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u0660"+
    "\0\u0660\0\u65bc\0\u6600\0\u6644\0\u6688\0\u66cc\0\u6710\0\u0660"+
    "\0\u0660\0\u6754\0\u6798\0\u67dc\0\u6820\0\u6864\0\u68a8\0\u68ec"+
    "\0\u6930\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8\0\u0660"+
    "\0\u6b0c\0\u6b50\0\u0660\0\u0660\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60"+
    "\0\u6ca4\0\u0660\0\u6ce8\0\u0660\0\u6d2c\0\u0660\0\u6d70\0\u6db4"+
    "\0\u6df8\0\u6e3c\0\u6e80\0\u0660\0\u6ec4\0\u6f08\0\u6f4c\0\u6f90"+
    "\0\u0660\0\u6fd4\0\u7018\0\u0660\0\u0660\0\u705c\0\u70a0\0\u70e4"+
    "\0\u6f08\0\u7128\0\u0660\0\u0660\0\u716c\0\u71b0\0\u0660\0\u0660"+
    "\0\u71f4\0\u7238\0\u0660\0\u727c\0\u72c0\0\u7304\0\u7348\0\u738c"+
    "\0\u73d0\0\u0660\0\u0660\0\u7414\0\u0660\0\u7458\0\u749c\0\u74e0"+
    "\0\u7524\0\u7568\0\u0660\0\u75ac\0\u75f0\0\u7634\0\u7678\0\u76bc"+
    "\0\u7700\0\u7744\0\u7788\0\u77cc\0\u7810\0\u7854\0\u7898\0\u0440"+
    "\0\u78dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\27\17\1\20\54\17\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\32\1\33\1\34\1\32"+
    "\1\35\1\36\1\21\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\46"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\33"+
    "\1\54\2\62\1\60\2\63\2\64\1\61\1\65\1\66"+
    "\1\67\1\31\1\70\1\71\1\72\1\31\1\73\2\31"+
    "\1\74\1\75\1\76\1\31\1\77\1\31\1\100\2\33"+
    "\1\101\16\102\1\103\1\104\1\105\1\102\1\106\61\102"+
    "\16\107\1\110\1\107\1\111\1\104\1\112\61\107\4\113"+
    "\1\114\15\113\1\115\61\113\11\116\1\117\3\116\1\117"+
    "\1\120\1\116\1\121\1\116\1\122\61\116\3\123\1\124"+
    "\2\123\3\124\25\123\7\124\1\123\15\124\2\123\5\124"+
    "\1\123\1\124\1\123\3\124\4\123\104\125\3\126\1\127"+
    "\1\130\1\126\3\127\25\126\7\127\1\126\15\127\2\126"+
    "\5\127\1\126\1\127\1\126\3\127\4\126\1\21\1\131"+
    "\1\132\1\31\1\132\1\133\3\31\2\134\2\132\1\134"+
    "\1\135\1\132\1\134\15\132\7\31\1\132\15\31\1\134"+
    "\1\132\5\31\1\132\1\31\1\132\3\31\1\132\1\33"+
    "\1\136\1\134\30\137\1\140\1\141\52\137\30\142\1\143"+
    "\1\144\52\142\11\145\1\146\3\145\1\147\6\145\1\150"+
    "\2\145\1\151\2\145\1\152\31\145\1\153\17\145\11\154"+
    "\2\155\2\154\1\155\66\154\27\17\1\156\103\17\1\0"+
    "\2\17\1\157\10\17\4\0\1\17\1\160\2\17\1\0"+
    "\1\17\1\0\6\17\1\161\7\17\1\0\7\17\105\0"+
    "\1\22\1\162\1\163\1\0\1\22\77\0\1\162\3\0"+
    "\1\162\15\0\1\164\61\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\165\2\31\25\0\3\31\1\166\1\31\1\167"+
    "\1\31\1\0\3\31\1\167\5\31\1\170\3\31\2\0"+
    "\4\31\1\171\1\0\1\172\1\0\3\31\10\0\1\164"+
    "\16\0\1\164\1\173\60\0\1\22\1\162\1\163\1\0"+
    "\1\22\1\174\76\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\53\6\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\6\0\1\36\7\0\1\175\6\0\1\31\1\176"+
    "\5\31\1\0\1\176\14\31\1\177\1\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\15\0\2\32\2\0\1\32\71\0"+
    "\1\200\2\0\3\200\25\0\7\200\1\0\15\200\2\0"+
    "\5\200\1\0\1\200\1\0\3\200\4\0\16\201\1\202"+
    "\1\203\1\204\1\201\1\205\61\201\23\0\1\206\1\164"+
    "\102\0\1\164\1\206\102\0\1\164\1\0\1\164\101\0"+
    "\1\206\103\0\2\164\2\0\1\207\1\0\1\210\75\0"+
    "\1\164\103\0\1\164\4\0\1\211\1\101\75\0\1\164"+
    "\1\212\102\0\1\164\7\0\1\164\73\0\1\164\10\0"+
    "\1\164\50\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\31\1\213\5\31\1\0\1\213\14\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\214"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\2\31\1\215\1\31\25\0\1\31\1\216\1\31"+
    "\1\217\3\31\1\0\1\216\2\220\12\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\221"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\222"+
    "\1\0\4\31\25\0\1\223\6\31\1\0\4\31\2\224"+
    "\7\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\225\1\31"+
    "\1\226\4\31\1\0\11\31\1\227\3\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\31\1\230\5\31\1\0\1\230"+
    "\13\31\1\231\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\232\1\0\4\31\25\0\6\31"+
    "\1\233\1\0\10\31\1\233\4\31\2\0\2\31\1\234"+
    "\2\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\235\3\31\1\0"+
    "\1\31\2\236\12\31\2\0\1\237\3\31\1\240\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\31\1\241\1\242\4\31\1\0\1\241"+
    "\12\31\1\243\1\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\4\31\2\244\7\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\11\31\1\245\3\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\246\3\31\1\0"+
    "\1\31\2\247\12\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\4\0\20\177\1\250\42\177\1\203\20\177\24\0"+
    "\1\251\60\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\252\1\253\1\254\4\31\1\0\1\253\3\31\2\255"+
    "\5\31\1\256\1\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\14\31\1\257\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\76\0\1\260\12\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\261\4\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\13\0\1\262"+
    "\2\0\1\263\23\0\1\264\1\265\1\266\1\0\1\267"+
    "\3\0\1\265\2\270\1\0\2\271\5\0\1\272\3\0"+
    "\1\273\17\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\1\31\1\274\1\31\4\0\16\102\1\275\1\0\1\276"+
    "\1\102\1\277\64\102\1\300\2\102\3\300\5\102\1\301"+
    "\1\302\1\276\1\102\1\303\13\102\7\300\1\102\15\300"+
    "\2\102\5\300\1\102\1\300\1\102\3\300\126\102\1\304"+
    "\1\302\1\276\1\102\1\305\61\102\16\107\1\306\1\107"+
    "\1\307\1\0\1\310\64\107\1\300\2\107\3\300\5\107"+
    "\1\311\1\107\1\307\1\312\1\303\13\107\7\300\1\107"+
    "\15\300\2\107\5\300\1\107\1\300\1\107\3\300\126\107"+
    "\1\304\1\107\1\307\1\312\1\313\61\107\24\0\1\314"+
    "\75\0\1\304\65\0\11\116\1\117\3\116\1\117\1\315"+
    "\1\116\1\316\1\116\1\317\64\116\1\320\2\116\3\320"+
    "\1\117\3\116\1\117\1\315\1\116\1\316\1\116\1\317"+
    "\13\116\7\320\1\116\15\320\2\116\5\320\1\116\1\320"+
    "\1\116\3\320\7\116\1\300\2\116\3\300\1\117\3\116"+
    "\1\117\1\321\1\116\1\316\1\116\1\303\13\116\7\300"+
    "\1\116\15\300\2\116\5\300\1\116\1\300\1\116\3\300"+
    "\15\116\1\117\3\116\1\117\77\116\1\117\3\116\1\117"+
    "\1\304\1\116\1\316\1\116\1\322\61\116\1\0\1\323"+
    "\1\0\1\323\1\0\4\323\1\324\2\0\1\325\1\324"+
    "\20\0\7\323\1\0\15\323\2\0\5\323\1\0\1\323"+
    "\1\0\3\323\5\0\1\127\1\0\1\127\1\0\4\127"+
    "\25\0\7\127\1\0\15\127\2\0\5\127\1\0\1\127"+
    "\1\0\3\127\30\0\1\326\60\0\1\131\3\0\1\131"+
    "\77\0\1\131\3\0\1\131\1\174\100\0\1\327\2\0"+
    "\3\327\25\0\7\327\1\0\15\327\2\0\5\327\1\0"+
    "\1\327\1\0\3\327\4\0\30\137\1\330\53\137\31\331"+
    "\1\332\52\331\31\0\1\331\52\0\30\142\1\333\53\142"+
    "\31\334\1\335\52\334\31\0\1\334\52\0\11\145\1\147"+
    "\3\145\1\147\6\145\1\147\5\145\1\147\31\145\1\147"+
    "\17\145\15\0\1\336\66\0\11\145\1\147\3\145\1\147"+
    "\6\145\1\147\4\145\1\337\1\147\31\145\1\147\17\145"+
    "\24\0\1\340\70\0\2\155\2\0\1\155\66\0\27\17"+
    "\1\0\2\17\1\0\10\17\4\0\1\17\1\0\2\17"+
    "\1\0\1\17\1\0\6\17\1\0\7\17\1\0\7\17"+
    "\23\0\1\341\123\0\1\342\5\0\1\342\55\0\1\341"+
    "\30\0\2\343\27\0\1\162\1\0\1\163\1\0\1\162"+
    "\77\0\1\131\2\0\1\344\1\131\17\0\1\344\57\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\345"+
    "\1\0\4\31\2\346\2\31\1\345\4\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\4\31\1\347\2\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\14\31"+
    "\1\350\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\1\31\2\351\12\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\6\31\2\352\5\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\353\4\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\354\1\0"+
    "\1\354\1\0\1\354\1\0\1\354\30\0\1\354\1\0"+
    "\2\354\5\0\1\354\13\0\1\354\45\0\1\355\55\0"+
    "\1\31\1\0\1\356\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\200\1\0\1\200\1\0\4\200\25\0\7\200\1\0"+
    "\15\200\2\0\5\200\1\0\1\200\1\0\3\200\4\0"+
    "\3\201\1\0\2\201\3\0\5\201\1\202\1\203\1\204"+
    "\1\201\1\0\13\201\7\0\1\201\15\0\2\201\5\0"+
    "\1\201\1\0\1\201\3\0\126\201\1\0\1\203\1\204"+
    "\1\201\1\205\61\201\23\0\1\164\3\0\1\357\123\0"+
    "\2\360\63\0\1\361\64\0\2\212\2\0\1\212\67\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\362"+
    "\1\0\10\31\1\362\4\31\2\0\5\31\1\0\1\31"+
    "\1\0\2\31\1\363\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\1\31\2\364\12\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\31\1\365\5\31\1\0"+
    "\1\365\14\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\213\2\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\15\31\2\0\2\31\1\366\2\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\5\31\1\367\1\31\1\0\3\31"+
    "\1\367\11\31\2\0\1\370\4\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\371\1\0\4\31\25\0"+
    "\7\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\372\3\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\373\1\0\1\31\2\374\5\31"+
    "\1\373\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\375"+
    "\1\31\1\376\4\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\13\31\1\377\1\31\2\0"+
    "\1\31\1\u0100\3\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u0101"+
    "\5\31\1\0\1\u0101\14\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\11\31\1\u0102\3\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u0103\4\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\4\31"+
    "\2\u0104\7\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\5\31"+
    "\1\u0105\1\u0106\1\0\1\31\2\u0107\1\u0105\4\31\1\u0106"+
    "\4\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\1\31\2\u0108\12\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\6\31\2\u0109\5\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u010a\6\31\1\0\4\31\2\u010b\7\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\31\1\u010c\5\31"+
    "\1\0\1\u010c\14\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\2\31\1\u010d"+
    "\1\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\1\31\2\u010e\12\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\u010f\6\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\1\31"+
    "\2\u0110\12\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\u0111\1\0\4\31\25\0\7\31"+
    "\1\0\15\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\4\0\104\177\11\0\2\251\2\0\1\251\67\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\31\1\u0112\5\31"+
    "\1\0\1\u0112\14\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\u0113\6\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\11\31\1\u0114\3\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u0115\3\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\3\31\1\u0116\3\31"+
    "\1\0\15\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\7\31"+
    "\1\0\4\31\2\u0117\7\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\31\1\u0118\5\31\1\0\1\u0118\14\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\42\0\1\u0119\13\0"+
    "\2\u011a\37\0\1\u011b\77\0\1\u011c\137\0\1\u011d\6\0"+
    "\1\u011d\73\0\1\u011e\111\0\1\u011f\11\0\1\u011f\66\0"+
    "\1\u0120\103\0\1\u0121\121\0\1\u0122\25\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\5\31\1\u0123\1\31\1\0"+
    "\3\31\1\u0123\5\31\1\u0124\2\31\1\u0125\2\0\1\u0126"+
    "\3\31\1\u0127\1\0\1\31\1\0\3\31\4\0\3\102"+
    "\1\0\2\102\3\0\5\102\1\301\1\302\1\276\1\102"+
    "\1\0\13\102\7\0\1\102\15\0\2\102\5\0\1\102"+
    "\1\0\1\102\3\0\22\102\1\0\1\302\1\276\1\102"+
    "\1\305\61\102\1\0\1\300\1\0\1\300\1\0\4\300"+
    "\25\0\7\300\1\0\15\300\2\0\5\300\1\0\1\300"+
    "\1\0\3\300\1\0\1\u0128\2\0\3\107\1\0\2\107"+
    "\3\0\5\107\1\311\1\107\1\307\1\312\1\0\13\107"+
    "\7\0\1\107\15\0\2\107\5\0\1\107\1\0\1\107"+
    "\3\0\22\107\1\0\1\107\1\307\1\312\1\313\61\107"+
    "\3\116\1\0\2\116\3\0\1\117\3\116\1\117\1\321"+
    "\1\116\1\316\1\116\1\0\13\116\7\0\1\116\15\0"+
    "\2\116\5\0\1\116\1\0\1\116\3\0\15\116\1\117"+
    "\3\116\1\117\1\0\1\116\1\316\1\116\1\322\62\116"+
    "\1\320\1\116\1\320\1\116\4\320\1\u0129\2\116\1\u012a"+
    "\1\u0129\1\315\1\116\1\316\1\116\1\317\13\116\7\320"+
    "\1\116\15\320\2\116\5\320\1\116\1\320\1\116\3\320"+
    "\4\116\11\0\1\324\3\0\1\324\67\0\1\327\1\0"+
    "\1\327\1\0\4\327\25\0\7\327\1\0\15\327\2\0"+
    "\5\327\1\0\1\327\1\0\3\327\4\0\31\331\1\0"+
    "\52\331\30\137\1\330\1\u012b\52\137\31\334\1\0\52\334"+
    "\30\142\1\333\1\144\52\142\11\145\1\147\3\145\1\147"+
    "\6\145\1\147\5\145\1\147\14\145\2\u012c\13\145\1\147"+
    "\17\145\11\0\2\340\2\0\1\340\125\0\1\u012d\6\0"+
    "\1\u012d\117\0\1\u012e\22\0\1\31\1\0\1\u012f\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\u0130\1\0\10\31\1\u0130\4\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\4\31\1\u0131\2\31"+
    "\1\0\1\31\2\u0132\1\31\2\u0133\7\31\2\0\1\u0134"+
    "\1\31\1\u0135\2\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\u0136\6\31"+
    "\1\0\15\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\u0137\1\0\4\31\25\0\7\31"+
    "\1\0\15\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\u0138\1\0\10\31\1\u0138\4\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\11\31\1\u0139\3\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\33\0\1\357\55\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\u013a"+
    "\4\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\7\0\1\u013b\2\0\3\u013b\1\0\1\357\23\0"+
    "\7\u013b\1\0\15\u013b\2\0\5\u013b\1\0\1\u013b\1\0"+
    "\3\u013b\47\0\1\u013c\5\0\1\u013c\43\0\2\u013d\2\0"+
    "\1\u013d\67\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\13\31\1\u013e\1\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\13\31\1\u013f\1\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\u0140\1\0\10\31"+
    "\1\u0140\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\u0141\4\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\11\31\1\u0142\3\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u0143\4\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\u0144\1\0"+
    "\1\31\2\u0145\5\31\1\u0144\4\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u0146\1\31\1\0\3\31\1\u0146"+
    "\11\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\u0147\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\3\31\1\u0148"+
    "\3\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\1\31\2\u0149\12\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\u014a\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u014b\6\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\1\u014c"+
    "\4\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\u014d\1\0\10\31"+
    "\1\u014d\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\u014e\1\0\10\31\1\u014e\4\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\11\31\1\u014f\3\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\u0150\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\u0151\1\0\10\31"+
    "\1\u0151\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\u0152\1\0\4\31\25\0\7\31"+
    "\1\0\15\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\7\31"+
    "\1\0\11\31\1\u0153\3\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\u0154\1\0\10\31\1\u0154\4\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u0155\3\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\u0156\1\0\3\31\5\0"+
    "\1\31\1\0\1\u0157\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\11\31\1\u0158\3\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\u0159\1\0\10\31\1\u0159\4\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\2\31\1\u015a\1\31\25\0\7\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\u015b\1\0\4\31\25\0\7\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\u015c\1\0\4\31\25\0\7\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\15\31"+
    "\2\0\4\31\1\u015d\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\1\31\2\u015e\12\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u015f\4\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u0160\1\31\1\0\3\31\1\u0160"+
    "\11\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\11\31\1\u0161\3\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\42\0\1\u0162\106\0\1\u0163\137\0\1\u0164\46\0"+
    "\1\u0165\102\0\1\u0166\6\0\1\u0166\116\0\1\u0167\61\0"+
    "\1\u0168\6\0\1\u0168\101\0\1\u0169\11\0\1\u0169\74\0"+
    "\2\u016a\71\0\1\u016b\46\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\11\31\1\u016c\3\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\4\31\2\u016d"+
    "\7\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\u016e"+
    "\4\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\4\31\2\u016f\5\31\1\u0170\1\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\u0171\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\4\0\11\116\1\u0129"+
    "\3\116\1\u0129\1\315\1\116\1\316\1\116\1\317\61\116"+
    "\11\145\1\147\3\145\1\147\6\145\1\147\5\145\1\147"+
    "\10\145\1\u0172\5\145\1\u0172\12\145\1\147\17\145\52\0"+
    "\2\u0173\104\0\2\u0174\27\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\3\31\1\u0175\3\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\u0176\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\2\31\1\u0177\2\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\1\u0178\4\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\u0179"+
    "\6\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\14\31\1\u017a\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\4\31\2\u017b\7\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\1\31"+
    "\1\u017c\3\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\15\31"+
    "\2\0\3\31\1\u017d\1\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\u013b\1\0\1\u013b\1\0\4\u013b\1\u017e\3\0"+
    "\1\u017f\20\0\7\u013b\1\0\15\u013b\2\0\5\u013b\1\0"+
    "\1\u013b\1\0\3\u013b\43\0\1\u0180\6\0\1\u0180\36\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u0181"+
    "\5\31\1\0\1\u0181\14\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\4\31\2\u0182\7\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\31\1\u0183\5\31\1\0\1\u0183"+
    "\14\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\1\31\1\u0184\3\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u0185\4\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\13\31\1\u0186\1\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\4\31\2\u0187"+
    "\7\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\u0188"+
    "\1\0\10\31\1\u0188\4\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\14\31\1\u0189\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\u018a\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\1\31\2\u018b\12\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\2\31\1\u018c\2\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\4\31\2\u018d\7\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\5\31\1\u018e\1\31\1\0\3\31\1\u018e\11\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\13\31\1\u018f"+
    "\1\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u0190"+
    "\5\31\1\0\1\u0190\14\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\2\31\1\u0191\4\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\u0192\1\0\10\31\1\u0192"+
    "\4\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\u0193\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\u0194\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\u0195"+
    "\1\0\10\31\1\u0195\4\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\2\31\1\u0196\4\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u0197\3\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\4\31"+
    "\2\u0198\7\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\u0199\4\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\u019a\1\0\10\31\1\u019a\4\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\2\31\1\u019b\4\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\u019c\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\11\31\1\u019d\3\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\u019e\1\0\10\31\1\u019e\4\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\u019f"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\63\0\1\u01a0\64\0\1\u01a1"+
    "\46\0\1\u01a2\157\0\1\u01a3\64\0\1\u01a4\52\0\1\u01a5"+
    "\146\0\2\u01a6\33\0\1\u01a7\6\0\1\u01a3\32\0\1\u01a8"+
    "\41\0\1\u01a9\140\0\1\u01a9\44\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u01aa\4\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\3\31\1\u01ab\3\31"+
    "\1\0\15\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\7\31"+
    "\1\0\11\31\1\u01ac\3\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\11\31\1\u01ad\3\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u01ae\3\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\u01af\1\0"+
    "\10\31\1\u01af\4\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\4\0\11\145\1\147\3\145\1\147\6\145\1\147"+
    "\5\145\1\147\4\145\1\u01b0\6\145\1\u01b0\15\145\1\147"+
    "\17\145\54\0\2\u01b1\27\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\4\31\1\u01b2\2\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\5\31\1\u01b3\1\31\1\0"+
    "\3\31\1\u01b3\11\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\4\31\2\u01b4\7\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\31\1\u01b5\5\31\1\0\1\u01b5\14\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\4\31"+
    "\2\u01b6\7\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\7\31"+
    "\1\0\15\31\2\0\1\u01b7\4\31\1\0\1\31\1\0"+
    "\3\31\21\0\1\u017f\140\0\2\u01b8\31\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u01b9\3\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u01ba"+
    "\5\31\1\0\1\u01ba\14\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\2\31\1\u01bb\4\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\31\1\u01bc\5\31\1\0\1\u01bc"+
    "\14\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\11\31\1\u01bd\3\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\u01be\3\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u01bf\1\31\1\0\3\31\1\u01bf"+
    "\11\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\14\31\1\u01c0\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\u01c1\2\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\15\31\2\0\1\u01c2\4\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\3\31\1\u01c3\3\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\4\31\1\u01c4\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\5\31\1\u01c5\1\31"+
    "\1\0\3\31\1\u01c5\11\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\u01c6\1\0\10\31\1\u01c6\4\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\u01c7\1\0\10\31"+
    "\1\u01c7\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\5\31"+
    "\1\u01c8\1\31\1\0\3\31\1\u01c8\11\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\7\31\1\0\11\31\1\u01c9\3\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\5\31\1\u01ca\1\31"+
    "\1\0\3\31\1\u01ca\11\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\4\31\2\u01cb\7\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\7\0\1\u01cc\6\0\1\u01a3"+
    "\32\0\1\u01a8\75\0\1\u01a4\6\0\1\u01a4\100\0\1\u01a9"+
    "\5\0\1\u01a9\44\0\1\u01a3\32\0\1\u01a8\124\0\1\u01a3"+
    "\74\0\1\u01cd\65\0\1\u01ce\122\0\1\u01cf\67\0\1\u01a3"+
    "\11\0\1\u01a3\26\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\1\31\2\u01d0\12\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\u01d1"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\u01d2\1\0\10\31\1\u01d2"+
    "\4\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\u01d3\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\5\31\1\u01d4"+
    "\1\31\1\0\3\31\1\u01d4\11\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\14\31\1\u01d5\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\4\0\11\145\1\147\3\145"+
    "\1\147\6\145\1\147\5\145\1\147\17\145\2\u01d6\10\145"+
    "\1\147\17\145\44\0\1\u01d7\11\0\1\u01d7\26\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\1\31"+
    "\2\u01d8\12\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\7\31"+
    "\1\0\11\31\1\u01d9\3\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\u01da\1\0\10\31\1\u01da\4\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\u01db\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\11\31\1\u01dc"+
    "\3\31\2\0\5\31\1\0\1\31\1\0\3\31\60\0"+
    "\2\u01dd\27\0\1\31\1\0\1\u01de\1\0\4\31\25\0"+
    "\7\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\5\31\1\u01df\1\31\1\0\3\31\1\u01df\11\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\u01e0\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\u01e1\1\0\10\31"+
    "\1\u01e1\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\7\31"+
    "\1\0\13\31\1\u01e2\1\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\u01e3\1\0\4\31"+
    "\25\0\7\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\2\31\1\u01e4\4\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\5\31\1\u01e5\1\31\1\0\3\31"+
    "\1\u01e5\11\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\u01e6\1\0\4\31\25\0\7\31"+
    "\1\0\15\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\u01e7\1\0\10\31\1\u01e7\4\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\u01e8\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\14\31\1\u01e9\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\u01ea\6\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\44\0\1\u01eb\46\0"+
    "\1\u01a3\160\0\1\u01a3\26\0\1\u01ec\101\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\1\31\2\u01ed"+
    "\12\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\1\31\1\u01ee"+
    "\1\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\1\31\1\u01ef\1\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\1\31\1\u01f0\1\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\u01f1\1\0\10\31"+
    "\1\u01f1\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\u01f2"+
    "\6\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\4\0\11\145\1\147\3\145\1\147\6\145\1\147"+
    "\5\145\1\147\21\145\2\u01f3\6\145\1\147\17\145\11\0"+
    "\2\u01f4\2\0\1\u01f4\67\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\u01f5\4\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\5\31\1\u01f6\1\31\1\0"+
    "\3\31\1\u01f6\11\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u01f7\4\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\u01f8\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\50\0\1\u01f9\11\0\1\u01f9\26\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\1\31\1\u01fa"+
    "\1\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\u01fb\1\0\10\31\1\u01fb\4\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\u01fc"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\1\31\1\u01fd\1\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\5\31\1\u01fe\1\31"+
    "\1\0\3\31\1\u01fe\11\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\u01ff\1\0\4\31"+
    "\25\0\7\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\3\31\1\u0200\3\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\u0201"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u0202\3\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\45\0\1\u01a3"+
    "\101\0\1\u01a3\6\0\1\u01a3\36\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\1\31\1\u0203\1\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\1\31\1\u0204\1\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\5\31"+
    "\1\u0205\1\31\1\0\3\31\1\u0205\11\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\1\31\1\u0206\1\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\4\31"+
    "\2\u0207\7\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\u0208\2\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\4\0\11\145\1\147\3\145\1\147\6\145"+
    "\1\147\5\145\1\147\11\145\1\u0209\11\145\1\u0209\5\145"+
    "\1\147\17\145\11\0\2\u01f4\2\0\1\u01f4\41\0\1\u020a"+
    "\25\0\1\31\1\0\1\31\1\0\4\31\25\0\1\31"+
    "\1\u020b\5\31\1\0\1\u020b\14\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\14\31\1\u020c\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\5\31\1\u020d\1\31\1\0\3\31"+
    "\1\u020d\11\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\30\0\1\u020e\60\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\u020f\6\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u0210\6\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\u0211"+
    "\1\0\4\31\25\0\7\31\1\0\15\31\2\0\5\31"+
    "\1\0\1\31\1\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\u0212\6\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\u0213\1\0\10\31"+
    "\1\u0213\4\31\2\0\5\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\u0214\2\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\15\31\2\0\5\31\1\0\1\31"+
    "\1\0\1\31\1\u0215\1\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\u0216\6\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\u0217\6\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\1\31\1\u0218\1\31"+
    "\4\0\11\145\1\147\3\145\1\147\6\145\1\u0219\5\145"+
    "\1\147\31\145\1\147\17\145\40\0\1\u021a\44\0\1\31"+
    "\1\0\1\u021b\1\0\4\31\25\0\7\31\1\0\15\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\7\31\1\0\14\31"+
    "\1\u021c\2\0\5\31\1\0\1\31\1\0\3\31\15\0"+
    "\2\u020e\2\0\1\u020e\67\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\3\31\1\u021d\3\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u021e\3\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\1\u021f\4\31\1\0\1\31\1\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\7\31"+
    "\1\0\1\31\2\u0220\12\31\2\0\5\31\1\0\1\31"+
    "\1\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\7\31\1\0\15\31\2\0\4\31\1\u0221\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\3\31\1\u0222\3\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\15\31\2\0"+
    "\5\31\1\0\1\31\1\0\1\31\1\u0223\1\31\45\0"+
    "\1\u0224\43\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\5\31\1\u0225\1\31\1\0\3\31\1\u0225\11\31\2\0"+
    "\5\31\1\0\1\31\1\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\5\31\1\u0226\1\31\1\0"+
    "\3\31\1\u0226\11\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\6\31\2\u0227\5\31\2\0\5\31\1\0"+
    "\1\31\1\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\7\31\1\0\15\31\2\0\5\31\1\0"+
    "\1\31\1\0\1\31\1\u0228\1\31\64\0\1\u0229\24\0"+
    "\1\31\1\0\1\u022a\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\u022b\1\0\4\31\25\0\7\31\1\0"+
    "\15\31\2\0\5\31\1\0\1\31\1\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\7\31\1\0"+
    "\4\31\2\u022c\7\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\7\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\1\31\1\u022d\1\31\65\0\1\u022e\23\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\7\31\1\0\11\31\1\u022f"+
    "\3\31\2\0\5\31\1\0\1\31\1\0\3\31\44\0"+
    "\1\u0230\44\0\1\31\1\0\1\u0231\1\0\4\31\25\0"+
    "\7\31\1\0\15\31\2\0\5\31\1\0\1\31\1\0"+
    "\3\31\64\0\1\u0232\24\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\31\1\u0233\5\31\1\0\1\u0233\14\31"+
    "\2\0\5\31\1\0\1\31\1\0\3\31\7\0\1\u0234"+
    "\111\0\2\u0234\2\0\1\u0234\5\0\1\u0235\71\0\2\u0235"+
    "\2\0\1\u0235\1\0\1\u0236\34\0\2\u0237\5\0\1\u0238"+
    "\74\0\2\u0239\110\0\1\u023a\75\0\2\u023b\110\0\1\u023c"+
    "\75\0\2\u023d\110\0\1\u023e\75\0\2\u023f\37\0\2\u023d"+
    "\2\0\1\u023d\6\0\1\u0240\133\0\2\u0241\45\0\1\u023d"+
    "\147\0\1\u023d\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\4\0\2\1\2\0\2\1\1\11\11\1"+
    "\2\11\2\1\2\11\37\1\2\11\2\1\1\11\6\1"+
    "\1\11\7\1\1\11\1\1\2\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\4\1\2\0\2\1\2\11\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\6\1\1\11\2\0\1\1\1\0\1\1\2\0\1\11"+
    "\2\0\2\1\1\0\37\1\1\0\7\1\1\11\1\1"+
    "\12\0\1\1\3\0\2\1\3\11\1\1\3\0\1\1"+
    "\1\11\1\1\1\11\3\0\3\1\1\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\1\1\11\1\0\1\1\2\11"+
    "\2\1\1\11\3\0\10\1\1\0\1\1\3\0\47\1"+
    "\12\0\5\1\2\11\1\1\1\0\1\1\2\0\14\1"+
    "\2\0\45\1\12\0\7\1\1\0\1\11\12\1\1\11"+
    "\1\0\37\1\10\0\1\11\1\0\7\1\1\0\6\1"+
    "\1\0\23\1\4\0\15\1\1\0\15\1\2\0\7\1"+
    "\1\0\4\1\1\0\20\1\1\0\17\1\1\0\11\1"+
    "\1\0\4\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed = true;

    private LexerInput input;
    
    
    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }
    */
//        public PHP5ColoringLexer(java.io.Reader  reader, boolean asp_tags) {
//            this(reader);
//            this.asp_tags = asp_tags;
//        }
        
        
        public PHP5ColoringLexer(LexerRestartInfo info, boolean asp_tags) {
            this.input = info.input();
            this.asp_tags = asp_tags;
            
            if(info.state() != null) {
                //reset state
                setState((LexerState)info.state());
            } else {
                //initial state
                zzState = zzLexicalState = YYINITIAL;
                stack.clear();
            }
            
        }


        public class LexerState  {
            final StateStack stack;
            /** the current state of the DFA */
            final int zzState;
            /** the current lexical state */
            final int zzLexicalState;
            
            LexerState () {
                stack = PHP5ColoringLexer.this.stack.createClone();
                zzState =  PHP5ColoringLexer.this.zzState;
                zzLexicalState = PHP5ColoringLexer.this.zzLexicalState;
            }
            
        }
        
        public LexerState getState() {
            return new LexerState();
        }
        
     public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }


    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}

    
 // End user code



//  /**
//   * Creates a new scanner
//   * There is also a java.io.InputStream version of this constructor.
//   *
//   * @param   in  the java.io.Reader to read input from.
//   */
//  public PHP5ColoringLexer(java.io.Reader in) {
//    this.zzReader = in;
//  }
//
//  /**
//   * Creates a new scanner.
//   * There is also java.io.Reader version of this constructor.
//   *
//   * @param   in  the java.io.Inputstream to read input from.
//   */
//  public PHP5ColoringLexer(java.io.InputStream in) {
//    this(new java.io.InputStreamReader(in));
//  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


//  /**
//   * Refills the input buffer.
//   *
//   * @return      <code>false</code>, iff there was new input.
//   * 
//   * @exception   java.io.IOException  if any I/O-Error occurs
//   */
//  private boolean zzRefill() throws java.io.IOException {
//
//    /* first: make room (if you can) */
//    if (zzStartRead > 0) {
//      System.arraycopy(zzBuffer, zzStartRead,
//                       zzBuffer, 0,
//                       zzEndRead-zzStartRead);
//
//      /* translate stored positions */
//      zzEndRead-= zzStartRead;
//      zzCurrentPos-= zzStartRead;
//      zzMarkedPos-= zzStartRead;
//      zzPushbackPos-= zzStartRead;
//      zzStartRead = 0;
//    }
//
//    /* is the buffer big enough? */
//    if (zzCurrentPos >= zzBuffer.length) {
//      /* if not: blow it up */
//      char newBuffer[] = new char[zzCurrentPos*2];
//      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
//      zzBuffer = newBuffer;
//    }
//
//    /* finally: fill the buffer with new input */
//    int numRead = zzReader.read(zzBuffer, zzEndRead,
//                                            zzBuffer.length-zzEndRead);
//
//    if (numRead < 0) {
//      return true;
//    }
//    else {
//      zzEndRead+= numRead;
//      return false;
//    }
//  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
//    zzAtEOF = true;            /* indicate end of file */
//    zzEndRead = zzStartRead;  /* invalidate buffer    */
//
//    if (zzReader != null)
//      zzReader.close();
//    
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
//    zzReader = reader;
//    zzAtBOL  = true;
//    zzAtEOF  = false;
//    zzEndRead = zzStartRead = 0;
//    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
//    yyline = yychar = yycolumn = 0;
//    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
//    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
      return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
//    return zzBuffer[zzStartRead+pos];
      return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
      return input.readLength();
//    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
//    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

//    // cached fields:
//    int zzCurrentPosL;
//    int zzMarkedPosL;
//    int zzEndReadL = zzEndRead;
//    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    
    
    while (true) {
//      zzMarkedPosL = zzMarkedPos;
//
//      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

//      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;

      int tokenLength = 0;

      zzForAction: {
        while (true) {
    
            //marek
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

//            
//          if (zzCurrentPosL < zzEndReadL)
//            zzInput = zzBufferL[zzCurrentPosL++];
//          else if (zzAtEOF) {
//            zzInput = YYEOF;
//            break zzForAction;
//          }
//          else {
//            // store back cached positions
//            zzCurrentPos  = zzCurrentPosL;
//            zzMarkedPos   = zzMarkedPosL;
//            boolean eof = zzRefill();
//            // get translated positions and possibly new buffer
//            zzCurrentPosL  = zzCurrentPos;
//            zzMarkedPosL   = zzMarkedPos;
//            zzBufferL      = zzBuffer;
//            zzEndReadL     = zzEndRead;
//            if (eof) {
//              zzInput = YYEOF;
//              break zzForAction;
//            }
//            else {
//              zzInput = zzBufferL[zzCurrentPosL++];
//            }
//          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
//            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
//      zzMarkedPos = zzMarkedPosL;
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }
      
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 127: break;
        case 51: 
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 128: break;
        case 54: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 129: break;
        case 11: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 130: break;
        case 89: 
          { return PHPTokenId.PHP_WHILE;
          }
        case 131: break;
        case 48: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_HEREDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 132: break;
        case 27: 
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 133: break;
        case 14: 
          { 
          //  if (!stack.isEmpty()) {
            
            //we are pushing state when we enter the PHP code,
            //so we need to ensure we do not pop the top most state
            if(stack.size() > 1) {
                popState();
    }
    return  PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 134: break;
        case 79: 
          { return PHPTokenId.PHP_CONST;
          }
        case 135: break;
        case 100: 
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 136: break;
        case 7: 
          { return PHPTokenId.PHP_TOKEN;
          }
        case 137: break;
        case 30: 
          { if (asp_tags) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 138: break;
        case 2: 
          { int len = yylength();
    
    // if there are two '*' as last two characters, it means that the last
    // '*' belongs to "*/"
    if (len > 1 && (yycharat(len-2) == '*') && (yycharat(len-1) == '*')) {
        yypushback(1);
    }
    return PHPTokenId.PHP_COMMENT;
          }
        case 139: break;
        case 93: 
          { return PHPTokenId.PHP_RETURN;
          }
        case 140: break;
        case 90: 
          { return PHPTokenId.PHP_CASTING;
          }
        case 141: break;
        case 117: 
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 142: break;
        case 40: 
          { yybegin(YYINITIAL);
              stack.clear();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 143: break;
        case 115: 
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 144: break;
        case 66: 
          { return PHPTokenId.PHP_EVAL;
          }
        case 145: break;
        case 78: 
          { return PHPTokenId.PHP_ARRAY;
          }
        case 146: break;
        case 38: 
          { return PHPTokenId.PHP_DO;
          }
        case 147: break;
        case 104: 
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 148: break;
        case 25: 
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 149: break;
        case 108: 
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 150: break;
        case 97: 
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 151: break;
        case 8: 
          { return  PHPTokenId.PHP_STRING;
          }
        case 152: break;
        case 122: 
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 153: break;
        case 5: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 154: break;
        case 81: 
          { return PHPTokenId.PHP_CLONE;
          }
        case 155: break;
        case 76: 
          { return PHPTokenId.PHP_BREAK;
          }
        case 156: break;
        case 55: 
          { return PHPTokenId.PHP_NEW;
          }
        case 157: break;
        case 72: 
          { return PHPTokenId.PHP_FROM;
          }
        case 158: break;
        case 110: 
          { return PHPTokenId.PHP__LINE__;
          }
        case 159: break;
        case 95: 
          { return PHPTokenId.PHP_SWITCH;
          }
        case 160: break;
        case 43: 
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 161: break;
        case 35: 
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 162: break;
        case 109: 
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 163: break;
        case 24: 
          { yypushback(1);
	popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 164: break;
        case 124: 
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 165: break;
        case 106: 
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 166: break;
        case 80: 
          { return PHPTokenId.PHP_CATCH;
          }
        case 167: break;
        case 32: 
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 168: break;
        case 17: 
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 169: break;
        case 28: 
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 170: break;
        case 73: 
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 171: break;
        case 33: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 172: break;
        case 20: 
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 173: break;
        case 60: 
          { return PHPTokenId.PHP_VAR;
          }
        case 174: break;
        case 15: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 175: break;
        case 119: 
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 176: break;
        case 107: 
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 177: break;
        case 67: 
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 178: break;
        case 114: 
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 179: break;
        case 99: 
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 180: break;
        case 123: 
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 181: break;
        case 120: 
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 182: break;
        case 82: 
          { return PHPTokenId.PHP_CLASS;
          }
        case 183: break;
        case 65: 
          { return PHPTokenId.PHP_ELSE;
          }
        case 184: break;
        case 39: 
          { return PHPTokenId.PHP_IF;
          }
        case 185: break;
        case 112: 
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 186: break;
        case 98: 
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 187: break;
        case 18: 
          { yypushback(1);
        popState();
          }
        case 188: break;
        case 88: 
          { return PHPTokenId.PHP_FINAL;
          }
        case 189: break;
        case 59: 
          { return PHPTokenId.PHP_FOR;
          }
        case 190: break;
        case 68: 
          { return PHPTokenId.PHP_CASE;
          }
        case 191: break;
        case 87: 
          { return PHPTokenId.PHP_FALSE;
          }
        case 192: break;
        case 22: 
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 193: break;
        case 103: 
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 194: break;
        case 85: 
          { return PHPTokenId.PHP_PRINT;
          }
        case 195: break;
        case 49: 
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 196: break;
        case 45: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 197: break;
        case 121: 
          { return PHPTokenId.PHP__METHOD__;
          }
        case 198: break;
        case 37: 
          { return PHPTokenId.PHP_AS;
          }
        case 199: break;
        case 42: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 200: break;
        case 71: 
          { return PHPTokenId.PHP_LIST;
          }
        case 201: break;
        case 34: 
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 202: break;
        case 86: 
          { return PHPTokenId.PHP_UNSET;
          }
        case 203: break;
        case 1: 
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 204: break;
        case 63: 
          { return PHPTokenId.PHP_EXIT;
          }
        case 205: break;
        case 26: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 206: break;
        case 23: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 207: break;
        case 105: 
          { return PHPTokenId.PHP_FOREACH;
          }
        case 208: break;
        case 57: 
          { return PHPTokenId.PHP_TRY;
          }
        case 209: break;
        case 16: 
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 210: break;
        case 50: 
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 211: break;
        case 70: 
          { return PHPTokenId.PHP_SELF;
          }
        case 212: break;
        case 102: 
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 213: break;
        case 69: 
          { return PHPTokenId.PHP_TRUE;
          }
        case 214: break;
        case 52: 
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 215: break;
        case 19: 
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 216: break;
        case 77: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 217: break;
        case 111: 
          { return PHPTokenId.PHP__FILE__;
          }
        case 218: break;
        case 9: 
          { return  PHPTokenId.WHITESPACE;
          }
        case 219: break;
        case 56: 
          { return PHPTokenId.PHP_DIE;
          }
        case 220: break;
        case 41: 
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 221: break;
        case 47: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 222: break;
        case 83: 
          { return PHPTokenId.PHP_THROW;
          }
        case 223: break;
        case 84: 
          { return PHPTokenId.PHP_ISSET;
          }
        case 224: break;
        case 44: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 225: break;
        case 113: 
          { popState();
	return PHPTokenId.T_INLINE_HTML;
          }
        case 226: break;
        case 92: 
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 227: break;
        case 62: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 228: break;
        case 21: 
          { yypushback(1);
    popState();
          }
        case 229: break;
        case 3: 
          { int len = yylength();
        if (len > 1 && (yycharat(len-1) == '*')) {
            yypushback(1); // go back to mark end of comment in the next token
        }
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 230: break;
        case 91: 
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 231: break;
        case 12: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 232: break;
        case 31: 
          { if (short_tags_allowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 233: break;
        case 10: 
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 234: break;
        case 74: 
          { return PHPTokenId.PHP_ENDIF;
          }
        case 235: break;
        case 36: 
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();    
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 236: break;
        case 101: 
          { return PHPTokenId.PHP_DECLARE;
          }
        case 237: break;
        case 118: 
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 238: break;
        case 116: 
          { return PHPTokenId.PHP__CLASS__;
          }
        case 239: break;
        case 29: 
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 240: break;
        case 53: 
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();    
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 241: break;
        case 58: 
          { return PHPTokenId.PHP_USE;
          }
        case 242: break;
        case 125: 
          { return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 243: break;
        case 46: 
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 244: break;
        case 13: 
          { 
              pushState(ST_PHP_IN_SCRIPTING);
              return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 245: break;
        case 61: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 246: break;
        case 126: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 247: break;
        case 94: 
          { return PHPTokenId.PHP_STATIC;
          }
        case 248: break;
        case 64: 
          { return PHPTokenId.PHP_ECHO;
          }
        case 249: break;
        case 6: 
          { return PHPTokenId.PHP_NUMBER;
          }
        case 250: break;
        case 96: 
          { return PHPTokenId.PHP_PARENT;
          }
        case 251: break;
        case 75: 
          { return PHPTokenId.PHP_EMPTY;
          }
        case 252: break;
        default: 
            if(zzInput == YYEOF) {
                if(input.readLength() > 0) {
                    // backup eof
                    input.backup(1);
                    //and return the text as error token
                    return PHPTokenId.UNKNOWN_TOKEN;
                } else {
                    return null;
                }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
