/* The following code was generated by JFlex 1.4.1 on 5/30/08 6:10 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 5/30/08 6:10 PM from the specification file
 * <tt>/space/mercurial/trunk/main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 15;
  public static final int ST_PHP_NOWDOC = 8;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 13;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_DOC_COMMENT = 14;
  public static final int ST_PHP_END_NOWDOC = 10;
  public static final int ST_PHP_START_HEREDOC = 6;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 12;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 11;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 16;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;
  public static final int ST_PHP_START_NOWDOC = 9;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\15\2\0\1\11\22\0\1\12\1\26\1\17\1\103"+
    "\1\16\1\32\1\33\1\63\1\74\1\45\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\72\1\14\1\27\1\23\1\24\1\64"+
    "\1\13\1\40\1\7\1\51\1\42\1\3\1\65\1\60\1\62\1\52"+
    "\1\75\1\70\1\57\1\71\1\41\1\36\1\54\1\77\1\37\1\47"+
    "\1\56\1\61\1\73\1\67\1\6\1\66\1\10\1\101\1\20\1\102"+
    "\1\35\1\76\1\21\1\40\1\7\1\43\1\42\1\3\1\65\1\60"+
    "\1\62\1\53\1\75\1\70\1\57\1\71\1\41\1\36\1\55\1\77"+
    "\1\46\1\50\1\44\1\61\1\73\1\67\1\6\1\66\1\10\1\22"+
    "\1\34\1\100\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\13\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\3\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\12\5\15\6\1\3\1\5\2\6\1\5"+
    "\1\6\1\5\1\6\1\14\1\15\1\1\1\16\1\17"+
    "\2\16\1\1\3\16\3\20\2\1\3\3\2\21\1\22"+
    "\3\3\1\0\2\23\1\24\1\25\1\26\1\25\1\4"+
    "\1\27\1\4\1\30\1\27\1\31\4\0\3\32\1\33"+
    "\1\32\2\33\1\34\1\35\1\0\1\36\1\0\1\37"+
    "\1\4\1\0\1\40\6\6\1\41\2\0\1\6\1\0"+
    "\1\42\2\0\1\16\2\0\2\40\1\0\1\43\1\44"+
    "\1\40\4\6\1\45\2\6\1\46\13\6\1\47\10\6"+
    "\1\0\1\50\6\6\1\51\1\6\12\0\1\6\3\0"+
    "\1\52\2\53\1\54\1\55\1\53\3\0\3\56\1\57"+
    "\3\0\1\1\2\53\1\0\1\60\6\0\1\61\1\0"+
    "\1\62\1\52\1\0\1\63\1\0\1\64\1\65\1\32"+
    "\1\66\1\67\3\0\7\6\1\4\1\0\1\6\3\0"+
    "\4\6\1\70\2\6\1\71\6\6\1\72\20\6\1\73"+
    "\1\74\5\6\1\75\12\0\5\6\1\76\1\77\1\1"+
    "\1\100\1\0\1\101\1\102\1\32\2\0\1\6\1\103"+
    "\5\6\1\104\1\105\1\6\1\106\1\6\4\0\1\107"+
    "\11\6\1\110\2\6\1\111\1\6\1\112\14\6\1\113"+
    "\3\6\1\114\4\6\12\0\6\6\1\32\1\0\1\115"+
    "\3\6\1\116\3\6\1\117\1\120\2\121\3\0\3\6"+
    "\1\122\3\6\1\123\1\124\1\125\1\126\1\127\5\6"+
    "\1\130\2\6\1\131\4\6\1\132\1\6\1\133\1\134"+
    "\1\6\1\135\10\0\1\136\1\0\6\6\1\32\1\0"+
    "\3\6\1\137\1\6\1\140\3\0\1\141\5\6\1\142"+
    "\1\143\6\6\1\144\1\145\1\146\2\6\4\0\6\6"+
    "\1\32\1\2\1\147\4\6\2\150\1\0\1\151\1\6"+
    "\1\152\1\153\1\6\1\154\4\6\1\155\1\156\1\6"+
    "\2\0\6\6\1\32\1\0\3\6\1\157\1\0\1\6"+
    "\1\160\1\161\5\6\1\162\1\6\1\163\1\6\1\164"+
    "\2\6\1\32\1\0\1\6\1\165\1\6\1\166\2\6"+
    "\1\167\2\6\1\170\1\171\3\6\1\32\1\0\1\172"+
    "\1\173\2\6\1\174\1\175\2\6\1\176\1\0\4\6"+
    "\1\0\1\177\1\200\1\6\1\201\1\0\1\6\1\0"+
    "\1\6\1\0\1\202\14\0\1\203\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u050c\0\u050c\0\u07b4"+
    "\0\u07f8\0\u050c\0\u050c\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u050c\0\u050c\0\u1078\0\u10bc\0\u050c\0\u1100"+
    "\0\u1144\0\u1188\0\u11cc\0\u1210\0\u1254\0\u050c\0\u1298\0\u12dc"+
    "\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u050c\0\u1474\0\u050c"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1540\0\u050c\0\u1584\0\u050c\0\u050c"+
    "\0\u15c8\0\u160c\0\u1650\0\u050c\0\u1694\0\u050c\0\u16d8\0\u050c"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u050c\0\u050c"+
    "\0\u18b4\0\u18f8\0\u0e9c\0\u050c\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u050c\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u050c\0\u1cb0\0\u1cf4\0\u1d38\0\u0e58\0\u1d7c"+
    "\0\u07f8\0\u1dc0\0\u050c\0\u1e04\0\u1e48\0\u0990\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u072c\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u072c"+
    "\0\u20ac\0\u20f0\0\u072c\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u072c\0\u2420"+
    "\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640"+
    "\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u050c"+
    "\0\u2860\0\u28a4\0\u0ff0\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8"+
    "\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u1100\0\u2b90\0\u2bd4"+
    "\0\u2b4c\0\u050c\0\u050c\0\u050c\0\u2b90\0\u2c18\0\u1210\0\u2c5c"+
    "\0\u2c18\0\u050c\0\u2c5c\0\u050c\0\u2ca0\0\u13ec\0\u2ce4\0\u2d28"+
    "\0\u2ca0\0\u2ce4\0\u1474\0\u050c\0\u2d6c\0\u14b8\0\u14fc\0\u2db0"+
    "\0\u2df4\0\u1584\0\u050c\0\u2e38\0\u050c\0\u2e7c\0\u2ec0\0\u050c"+
    "\0\u2f04\0\u050c\0\u050c\0\u2f48\0\u2f8c\0\u050c\0\u2fd0\0\u3014"+
    "\0\u1650\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0"+
    "\0\u1cb0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc"+
    "\0\u3410\0\u3454\0\u072c\0\u3498\0\u34dc\0\u072c\0\u3520\0\u3564"+
    "\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u072c\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u072c\0\u3af8\0\u3b3c"+
    "\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u072c\0\u3c90\0\u3cd4\0\u3d18"+
    "\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38"+
    "\0\u3f7c\0\u3fc0\0\u4004\0\u4048\0\u050c\0\u050c\0\u408c\0\u050c"+
    "\0\u40d0\0\u050c\0\u050c\0\u4114\0\u4158\0\u419c\0\u41e0\0\u072c"+
    "\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u072c\0\u4378\0\u43bc"+
    "\0\u072c\0\u4400\0\u4444\0\u4488\0\u44cc\0\u4510\0\u3344\0\u4554"+
    "\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730\0\u4774"+
    "\0\u072c\0\u47b8\0\u47fc\0\u072c\0\u4840\0\u072c\0\u4884\0\u48c8"+
    "\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8"+
    "\0\u4b2c\0\u4b70\0\u072c\0\u4bb4\0\u4bf8\0\u4c3c\0\u072c\0\u4c80"+
    "\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0"+
    "\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u050c\0\u5258\0\u529c"+
    "\0\u52e0\0\u072c\0\u5324\0\u5368\0\u53ac\0\u072c\0\u072c\0\u53f0"+
    "\0\u050c\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u072c"+
    "\0\u55cc\0\u5610\0\u5654\0\u072c\0\u072c\0\u072c\0\u072c\0\u072c"+
    "\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u072c\0\u57ec\0\u5830"+
    "\0\u072c\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u072c\0\u5984\0\u072c"+
    "\0\u072c\0\u59c8\0\u072c\0\u5a0c\0\u5a50\0\u5a94\0\u5ad8\0\u5b1c"+
    "\0\u5b60\0\u5ba4\0\u5be8\0\u050c\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8"+
    "\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18"+
    "\0\u5f5c\0\u5fa0\0\u072c\0\u5fe4\0\u6028\0\u606c\0\u072c\0\u60b0"+
    "\0\u60f4\0\u6138\0\u617c\0\u61c0\0\u072c\0\u072c\0\u6204\0\u6248"+
    "\0\u628c\0\u62d0\0\u6314\0\u6358\0\u072c\0\u072c\0\u072c\0\u639c"+
    "\0\u63e0\0\u6424\0\u6468\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc"+
    "\0\u6600\0\u6644\0\u6688\0\u66cc\0\u6710\0\u072c\0\u6754\0\u6798"+
    "\0\u67dc\0\u6820\0\u6864\0\u050c\0\u68a8\0\u68ec\0\u6930\0\u072c"+
    "\0\u072c\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8\0\u072c"+
    "\0\u072c\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4"+
    "\0\u6ce8\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u072c"+
    "\0\u6ec4\0\u6f08\0\u072c\0\u072c\0\u6f4c\0\u6f90\0\u6fd4\0\u7018"+
    "\0\u705c\0\u072c\0\u70a0\0\u072c\0\u70e4\0\u072c\0\u7128\0\u716c"+
    "\0\u71b0\0\u71f4\0\u7238\0\u072c\0\u727c\0\u72c0\0\u7304\0\u7348"+
    "\0\u072c\0\u738c\0\u73d0\0\u072c\0\u072c\0\u7414\0\u7458\0\u749c"+
    "\0\u72c0\0\u74e0\0\u072c\0\u072c\0\u7524\0\u7568\0\u072c\0\u072c"+
    "\0\u75ac\0\u75f0\0\u072c\0\u7634\0\u7678\0\u76bc\0\u7700\0\u7744"+
    "\0\u7788\0\u072c\0\u072c\0\u77cc\0\u072c\0\u7810\0\u7854\0\u7898"+
    "\0\u78dc\0\u7920\0\u072c\0\u7964\0\u79a8\0\u79ec\0\u7a30\0\u7a74"+
    "\0\u7ab8\0\u7afc\0\u7b40\0\u7b84\0\u7bc8\0\u7c0c\0\u7c50\0\u050c"+
    "\0\u7c94";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\27\22\1\23\54\22\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\35\1\36\1\37\1\35"+
    "\1\40\1\41\1\24\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\51"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\36"+
    "\1\57\2\65\1\63\2\66\2\67\1\64\1\70\1\71"+
    "\1\72\1\34\1\73\1\74\1\75\1\34\1\76\2\34"+
    "\1\77\1\100\1\101\1\34\1\102\1\34\1\103\2\36"+
    "\1\104\16\105\1\106\1\107\1\110\1\105\1\111\61\105"+
    "\16\112\1\113\1\112\1\114\1\107\1\115\61\112\4\116"+
    "\1\117\15\116\1\120\61\116\11\121\1\122\3\121\1\122"+
    "\1\123\1\121\1\124\1\121\1\125\61\121\3\126\1\127"+
    "\2\126\3\127\25\126\7\127\1\126\15\127\2\126\5\127"+
    "\1\126\1\127\1\126\3\127\4\126\104\130\3\131\1\132"+
    "\2\131\3\132\1\133\3\131\1\134\20\131\7\132\1\131"+
    "\15\132\2\131\5\132\1\131\1\132\1\131\3\132\4\131"+
    "\3\135\1\136\2\135\3\136\25\135\7\136\1\135\15\136"+
    "\2\135\5\136\1\135\1\136\1\135\3\136\4\135\104\137"+
    "\3\140\1\141\1\142\1\140\3\141\25\140\7\141\1\140"+
    "\15\141\2\140\5\141\1\140\1\141\1\140\3\141\4\140"+
    "\1\24\1\143\1\144\1\34\1\144\1\145\3\34\2\146"+
    "\2\144\1\146\1\147\1\144\1\146\15\144\7\34\1\144"+
    "\15\34\1\146\1\144\5\34\1\144\1\34\1\144\3\34"+
    "\1\144\1\36\1\150\1\146\30\151\1\152\53\151\30\153"+
    "\1\154\53\153\11\155\1\156\3\155\1\157\6\155\1\160"+
    "\2\155\1\161\2\155\1\162\31\155\1\163\17\155\11\164"+
    "\2\165\2\164\1\165\66\164\27\22\1\166\103\22\1\0"+
    "\2\22\1\167\10\22\4\0\1\22\1\170\2\22\1\0"+
    "\1\22\1\0\6\22\1\171\7\22\1\0\7\22\105\0"+
    "\1\25\1\172\1\173\1\0\1\25\77\0\1\172\3\0"+
    "\1\172\15\0\1\174\61\0\1\34\1\0\1\34\1\0"+
    "\1\34\1\175\2\34\25\0\3\34\1\176\1\34\1\177"+
    "\1\34\1\0\3\34\1\177\5\34\1\200\3\34\2\0"+
    "\4\34\1\201\1\0\1\202\1\0\3\34\10\0\1\174"+
    "\16\0\1\174\1\203\60\0\1\25\1\172\1\173\1\0"+
    "\1\25\1\204\76\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\56\6\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\6\0\1\41\7\0\1\205\6\0\1\34\1\206"+
    "\5\34\1\0\1\206\14\34\1\207\1\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\15\0\2\35\2\0\1\35\71\0"+
    "\1\210\2\0\3\210\25\0\7\210\1\0\15\210\2\0"+
    "\5\210\1\0\1\210\1\0\3\210\4\0\16\211\1\212"+
    "\1\213\1\214\1\211\1\215\61\211\23\0\1\216\1\174"+
    "\102\0\1\174\1\216\102\0\1\174\1\0\1\174\101\0"+
    "\1\216\103\0\2\174\2\0\1\217\1\0\1\220\75\0"+
    "\1\174\103\0\1\174\4\0\1\221\1\104\75\0\1\174"+
    "\1\222\102\0\1\174\7\0\1\174\73\0\1\174\10\0"+
    "\1\174\50\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\1\34\1\223\5\34\1\0\1\223\14\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\224"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\2\34\1\225\1\34\25\0\1\34\1\226\1\34"+
    "\1\227\3\34\1\0\1\226\2\230\12\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\231"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\232"+
    "\1\0\4\34\25\0\1\233\6\34\1\0\4\34\2\234"+
    "\7\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\235\1\34"+
    "\1\236\4\34\1\0\11\34\1\237\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\240\5\34\1\0\1\240"+
    "\13\34\1\241\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\242\1\0\4\34\25\0\6\34"+
    "\1\243\1\0\10\34\1\243\4\34\2\0\2\34\1\244"+
    "\2\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\245\3\34\1\0"+
    "\1\34\2\246\12\34\2\0\1\247\3\34\1\250\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\1\34\1\251\1\252\4\34\1\0\1\251"+
    "\12\34\1\253\1\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\4\34\2\254\7\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\11\34\1\255\3\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\256\3\34\1\0"+
    "\1\34\2\257\12\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\4\0\20\207\1\260\42\207\1\213\20\207\24\0"+
    "\1\261\60\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\1\262\1\263\1\264\4\34\1\0\1\263\3\34\2\265"+
    "\5\34\1\266\1\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\14\34\1\267\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\76\0\1\270\12\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\2\34\1\271\4\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\13\0\1\272"+
    "\2\0\1\273\23\0\1\274\1\275\1\276\1\0\1\277"+
    "\3\0\1\275\2\300\1\0\2\301\5\0\1\302\3\0"+
    "\1\303\17\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\1\34\1\304\1\34\4\0\16\105\1\305\1\0\1\306"+
    "\1\105\1\307\64\105\1\310\2\105\3\310\5\105\1\311"+
    "\1\312\1\306\1\105\1\313\13\105\7\310\1\105\15\310"+
    "\2\105\5\310\1\105\1\310\1\105\3\310\126\105\1\314"+
    "\1\312\1\306\1\105\1\315\61\105\16\112\1\316\1\112"+
    "\1\317\1\0\1\320\64\112\1\310\2\112\3\310\5\112"+
    "\1\321\1\112\1\317\1\322\1\313\13\112\7\310\1\112"+
    "\15\310\2\112\5\310\1\112\1\310\1\112\3\310\126\112"+
    "\1\314\1\112\1\317\1\322\1\323\61\112\24\0\1\324"+
    "\75\0\1\314\65\0\11\121\1\122\3\121\1\122\1\325"+
    "\1\121\1\326\1\121\1\327\64\121\1\330\2\121\3\330"+
    "\1\122\3\121\1\122\1\325\1\121\1\326\1\121\1\327"+
    "\13\121\7\330\1\121\15\330\2\121\5\330\1\121\1\330"+
    "\1\121\3\330\7\121\1\310\2\121\3\310\1\122\3\121"+
    "\1\122\1\331\1\121\1\326\1\121\1\313\13\121\7\310"+
    "\1\121\15\310\2\121\5\310\1\121\1\310\1\121\3\310"+
    "\15\121\1\122\3\121\1\122\77\121\1\122\3\121\1\122"+
    "\1\314\1\121\1\326\1\121\1\332\61\121\1\0\1\333"+
    "\1\0\1\333\1\0\4\333\1\334\2\0\1\335\1\334"+
    "\20\0\7\333\1\0\15\333\2\0\5\333\1\0\1\333"+
    "\1\0\3\333\4\0\11\336\1\134\3\336\1\134\67\336"+
    "\1\337\1\336\1\337\1\336\4\337\1\0\2\336\1\340"+
    "\1\0\20\336\7\337\1\336\15\337\2\336\5\337\1\336"+
    "\1\337\1\336\3\337\7\336\1\341\2\336\3\341\1\134"+
    "\3\336\1\134\20\336\7\341\1\336\15\341\2\336\5\341"+
    "\1\336\1\341\1\336\3\341\4\336\1\0\1\342\1\0"+
    "\1\342\1\0\4\342\1\343\2\0\1\344\1\343\20\0"+
    "\7\342\1\0\15\342\2\0\5\342\1\0\1\342\1\0"+
    "\3\342\5\0\1\141\1\0\1\141\1\0\4\141\25\0"+
    "\7\141\1\0\15\141\2\0\5\141\1\0\1\141\1\0"+
    "\3\141\30\0\1\345\60\0\1\143\3\0\1\143\77\0"+
    "\1\143\3\0\1\143\1\204\100\0\1\346\2\0\3\346"+
    "\25\0\7\346\1\0\15\346\2\0\5\346\1\0\1\346"+
    "\1\0\3\346\4\0\30\151\1\347\103\151\1\347\1\350"+
    "\52\151\30\153\1\351\103\153\1\351\1\352\52\153\11\155"+
    "\1\157\3\155\1\157\6\155\1\157\5\155\1\157\31\155"+
    "\1\157\17\155\15\0\1\353\66\0\11\155\1\157\3\155"+
    "\1\157\6\155\1\157\4\155\1\354\1\157\31\155\1\157"+
    "\17\155\24\0\1\355\70\0\2\165\2\0\1\165\66\0"+
    "\27\22\1\0\2\22\1\0\10\22\4\0\1\22\1\0"+
    "\2\22\1\0\1\22\1\0\6\22\1\0\7\22\1\0"+
    "\7\22\23\0\1\356\123\0\1\357\5\0\1\357\55\0"+
    "\1\356\30\0\2\360\27\0\1\172\1\0\1\173\1\0"+
    "\1\172\77\0\1\143\2\0\1\361\1\143\17\0\1\361"+
    "\57\0\1\34\1\0\1\34\1\0\4\34\25\0\6\34"+
    "\1\362\1\0\4\34\2\363\2\34\1\362\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\4\34\1\364\2\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\14\34\1\365\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\1\34\2\366\12\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\6\34\2\367\5\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\2\34\1\370\4\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\371"+
    "\1\0\1\371\1\0\1\371\1\0\1\371\30\0\1\371"+
    "\1\0\2\371\5\0\1\371\13\0\1\371\45\0\1\372"+
    "\55\0\1\34\1\0\1\373\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\210\1\0\1\210\1\0\4\210\25\0\7\210"+
    "\1\0\15\210\2\0\5\210\1\0\1\210\1\0\3\210"+
    "\4\0\3\211\1\0\2\211\3\0\5\211\1\212\1\213"+
    "\1\214\1\211\1\0\13\211\7\0\1\211\15\0\2\211"+
    "\5\0\1\211\1\0\1\211\3\0\126\211\1\0\1\213"+
    "\1\214\1\211\1\215\61\211\23\0\1\174\3\0\1\374"+
    "\123\0\2\375\63\0\1\376\64\0\2\222\2\0\1\222"+
    "\67\0\1\34\1\0\1\34\1\0\4\34\25\0\6\34"+
    "\1\377\1\0\10\34\1\377\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\2\34\1\u0100\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\1\34\2\u0101\12\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\34\1\u0102\5\34"+
    "\1\0\1\u0102\14\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\4\34\1\223\2\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\2\34\1\u0103"+
    "\2\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\5\34\1\u0104\1\34\1\0"+
    "\3\34\1\u0104\11\34\2\0\1\u0105\4\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\u0106\1\0\4\34"+
    "\25\0\7\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\3\34\1\u0107\3\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\6\34\1\u0108\1\0\1\34\2\u0109"+
    "\5\34\1\u0108\4\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\1\u010a\1\34\1\u010b\4\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\13\34\1\u010c\1\34"+
    "\2\0\1\34\1\u010d\3\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\1\34"+
    "\1\u010e\5\34\1\0\1\u010e\14\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\11\34\1\u010f\3\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\2\34\1\u0110\4\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\4\34\2\u0111\7\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\5\34\1\u0112\1\u0113\1\0\1\34\2\u0114\1\u0112\4\34"+
    "\1\u0113\4\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\1\34\2\u0115\12\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\6\34\2\u0116\5\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\u0117\6\34\1\0\4\34\2\u0118"+
    "\7\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\34\1\u0119"+
    "\5\34\1\0\1\u0119\14\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\2\34"+
    "\1\u011a\1\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\1\34\2\u011b\12\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\u011c\6\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\1\34\2\u011d\12\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u011e\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\4\0\104\207\11\0\2\261\2\0\1\261\67\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\34\1\u011f"+
    "\5\34\1\0\1\u011f\14\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\u0120\6\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\11\34\1\u0121\3\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\u0122\3\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u0123"+
    "\3\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\4\34\2\u0124\7\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\1\34\1\u0125\5\34\1\0\1\u0125\14\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\42\0\1\u0126"+
    "\13\0\2\u0127\37\0\1\u0128\77\0\1\u0129\137\0\1\u012a"+
    "\6\0\1\u012a\73\0\1\u012b\111\0\1\u012c\11\0\1\u012c"+
    "\66\0\1\u012d\103\0\1\u012e\121\0\1\u012f\25\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\5\34\1\u0130\1\34"+
    "\1\0\3\34\1\u0130\5\34\1\u0131\2\34\1\u0132\2\0"+
    "\1\u0133\3\34\1\u0134\1\0\1\34\1\0\3\34\4\0"+
    "\3\105\1\0\2\105\3\0\5\105\1\311\1\312\1\306"+
    "\1\105\1\0\13\105\7\0\1\105\15\0\2\105\5\0"+
    "\1\105\1\0\1\105\3\0\22\105\1\0\1\312\1\306"+
    "\1\105\1\315\61\105\1\0\1\310\1\0\1\310\1\0"+
    "\4\310\25\0\7\310\1\0\15\310\2\0\5\310\1\0"+
    "\1\310\1\0\3\310\1\0\1\u0135\2\0\3\112\1\0"+
    "\2\112\3\0\5\112\1\321\1\112\1\317\1\322\1\0"+
    "\13\112\7\0\1\112\15\0\2\112\5\0\1\112\1\0"+
    "\1\112\3\0\22\112\1\0\1\112\1\317\1\322\1\323"+
    "\61\112\3\121\1\0\2\121\3\0\1\122\3\121\1\122"+
    "\1\331\1\121\1\326\1\121\1\0\13\121\7\0\1\121"+
    "\15\0\2\121\5\0\1\121\1\0\1\121\3\0\15\121"+
    "\1\122\3\121\1\122\1\0\1\121\1\326\1\121\1\332"+
    "\62\121\1\330\1\121\1\330\1\121\4\330\1\u0136\2\121"+
    "\1\u0137\1\u0136\1\325\1\121\1\326\1\121\1\327\13\121"+
    "\7\330\1\121\15\330\2\121\5\330\1\121\1\330\1\121"+
    "\3\330\4\121\11\0\1\334\3\0\1\334\66\0\11\336"+
    "\1\0\3\336\1\0\67\336\1\341\1\336\1\341\1\336"+
    "\4\341\1\u0138\2\336\1\u0139\1\u0138\20\336\7\341\1\336"+
    "\15\341\2\336\5\341\1\336\1\341\1\336\3\341\4\336"+
    "\11\0\1\343\3\0\1\343\67\0\1\346\1\0\1\346"+
    "\1\0\4\346\25\0\7\346\1\0\15\346\2\0\5\346"+
    "\1\0\1\346\1\0\3\346\4\0\30\151\1\347\1\u013a"+
    "\52\151\30\153\1\351\1\u013b\52\153\11\155\1\157\3\155"+
    "\1\157\6\155\1\157\5\155\1\157\14\155\2\u013c\13\155"+
    "\1\157\17\155\11\0\2\355\2\0\1\355\125\0\1\u013d"+
    "\6\0\1\u013d\117\0\1\u013e\22\0\1\34\1\0\1\u013f"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\6\34\1\u0140\1\0\10\34\1\u0140"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\4\34\1\u0141"+
    "\2\34\1\0\1\34\2\u0142\1\34\2\u0143\7\34\2\0"+
    "\1\u0144\1\34\1\u0145\2\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\1\u0146"+
    "\6\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u0147\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\6\34\1\u0148\1\0\10\34\1\u0148\4\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\11\34\1\u0149\3\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\33\0\1\374"+
    "\55\0\1\34\1\0\1\34\1\0\4\34\25\0\2\34"+
    "\1\u014a\4\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\7\0\1\u014b\2\0\3\u014b\1\0\1\374"+
    "\4\0\1\u014c\16\0\7\u014b\1\0\15\u014b\1\u014d\1\0"+
    "\5\u014b\1\0\1\u014b\1\0\3\u014b\47\0\1\u014e\5\0"+
    "\1\u014e\43\0\2\u014f\2\0\1\u014f\67\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\13\34\1\u0150"+
    "\1\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\13\34\1\u0151\1\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\6\34\1\u0152\1\0\10\34\1\u0152\4\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\2\34\1\u0153\4\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\7\34\1\0\11\34"+
    "\1\u0154\3\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\2\34"+
    "\1\u0155\4\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u0156\1\0\1\34\2\u0157\5\34\1\u0156"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\5\34\1\u0158"+
    "\1\34\1\0\3\34\1\u0158\11\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\u0159\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\3\34\1\u015a\3\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\1\34\2\u015b"+
    "\12\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u015c\1\0\4\34\25\0\7\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\u015d\6\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\1\u015e\4\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\6\34\1\u015f\1\0\10\34\1\u015f\4\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\6\34\1\u0160\1\0\10\34\1\u0160"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\11\34\1\u0161\3\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u0162\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\6\34\1\u0163\1\0\10\34\1\u0163\4\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u0164"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\11\34\1\u0165\3\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\6\34\1\u0166\1\0"+
    "\10\34\1\u0166\4\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\3\34\1\u0167\3\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\u0168\1\0\3\34\5\0\1\34\1\0\1\u0169\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\11\34\1\u016a\3\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\6\34\1\u016b\1\0\10\34"+
    "\1\u016b\4\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\2\34\1\u016c\1\34"+
    "\25\0\7\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\u016d\1\0\4\34"+
    "\25\0\7\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\u016e\1\0\4\34"+
    "\25\0\7\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\15\34\2\0\4\34\1\u016f\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\1\34\2\u0170\12\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\2\34\1\u0171\4\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\5\34\1\u0172"+
    "\1\34\1\0\3\34\1\u0172\11\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\11\34\1\u0173\3\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\42\0\1\u0174\106\0"+
    "\1\u0175\137\0\1\u0176\46\0\1\u0177\102\0\1\u0178\6\0"+
    "\1\u0178\116\0\1\u0179\61\0\1\u017a\6\0\1\u017a\101\0"+
    "\1\u017b\11\0\1\u017b\74\0\2\u017c\71\0\1\u017d\46\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\11\34\1\u017e\3\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\4\34\2\u017f\7\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\2\34\1\u0180\4\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\4\34\2\u0181"+
    "\5\34\1\u0182\1\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u0183\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\4\0\11\121\1\u0136\3\121\1\u0136\1\325\1\121"+
    "\1\326\1\121\1\327\61\121\11\336\1\u0138\3\336\1\u0138"+
    "\66\336\11\155\1\157\3\155\1\157\6\155\1\157\5\155"+
    "\1\157\10\155\1\u0184\5\155\1\u0184\12\155\1\157\17\155"+
    "\52\0\2\u0185\104\0\2\u0186\27\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\3\34\1\u0187\3\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u0188\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\2\34\1\u0189\2\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\1\u018a\4\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\1\u018b\6\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\14\34\1\u018c\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\4\34\2\u018d\7\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\15\34\2\0"+
    "\1\34\1\u018e\3\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\15\34\2\0\3\34\1\u018f\1\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\u014b\1\0\1\u014b\1\0\4\u014b\1\u0190"+
    "\3\0\1\u0191\20\0\7\u014b\1\0\15\u014b\2\0\5\u014b"+
    "\1\0\1\u014b\1\0\3\u014b\7\0\1\u0192\2\0\3\u0192"+
    "\25\0\7\u0192\1\0\15\u0192\2\0\5\u0192\1\0\1\u0192"+
    "\1\0\3\u0192\7\0\1\u0193\2\0\3\u0193\25\0\7\u0193"+
    "\1\0\15\u0193\2\0\5\u0193\1\0\1\u0193\1\0\3\u0193"+
    "\43\0\1\u0194\6\0\1\u0194\36\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u0195\5\34\1\0\1\u0195"+
    "\14\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\4\34\2\u0196\7\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\1\34\1\u0197\5\34\1\0\1\u0197\14\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\1\34"+
    "\1\u0198\3\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\2\34\1\u0199\4\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\13\34\1\u019a\1\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\4\34\2\u019b\7\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\6\34\1\u019c\1\0\10\34\1\u019c"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\14\34\1\u019d\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\u019e\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\1\34\2\u019f\12\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\15\34\2\0\2\34\1\u01a0\2\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\4\34\2\u01a1\7\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\5\34\1\u01a2\1\34"+
    "\1\0\3\34\1\u01a2\11\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\13\34\1\u01a3\1\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u01a4\5\34\1\0\1\u01a4"+
    "\14\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\2\34\1\u01a5"+
    "\4\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\6\34\1\u01a6\1\0\10\34\1\u01a6\4\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u01a7"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u01a8"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\6\34\1\u01a9\1\0\10\34\1\u01a9"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\2\34\1\u01aa"+
    "\4\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\3\34\1\u01ab\3\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\4\34\2\u01ac\7\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\2\34\1\u01ad\4\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u01ae"+
    "\1\0\10\34\1\u01ae\4\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\2\34\1\u01af\4\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u01b0"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\11\34\1\u01b1\3\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\6\34\1\u01b2\1\0"+
    "\10\34\1\u01b2\4\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u01b3\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\63\0\1\u01b4\64\0\1\u01b5\46\0\1\u01b6\157\0"+
    "\1\u01b7\64\0\1\u01b8\52\0\1\u01b9\146\0\2\u01ba\33\0"+
    "\1\u01bb\6\0\1\u01b7\32\0\1\u01bc\41\0\1\u01bd\140\0"+
    "\1\u01bd\44\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\2\34\1\u01be\4\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\3\34\1\u01bf\3\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\11\34\1\u01c0"+
    "\3\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\11\34\1\u01c1\3\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\3\34\1\u01c2\3\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\6\34\1\u01c3\1\0\10\34\1\u01c3\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\4\0\11\155"+
    "\1\157\3\155\1\157\6\155\1\157\5\155\1\157\4\155"+
    "\1\u01c4\6\155\1\u01c4\15\155\1\157\17\155\54\0\2\u01c5"+
    "\27\0\1\34\1\0\1\34\1\0\4\34\25\0\4\34"+
    "\1\u01c6\2\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\5\34\1\u01c7\1\34\1\0\3\34\1\u01c7\11\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\7\34\1\0\4\34"+
    "\2\u01c8\7\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\1\34"+
    "\1\u01c9\5\34\1\0\1\u01c9\14\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\4\34\2\u01ca\7\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\15\34\2\0"+
    "\1\u01cb\4\34\1\0\1\34\1\0\3\34\21\0\1\u0191"+
    "\67\0\1\u0192\1\0\1\u0192\1\0\4\u0192\6\0\1\u01cc"+
    "\16\0\7\u0192\1\0\15\u0192\2\0\5\u0192\1\0\1\u0192"+
    "\1\0\3\u0192\5\0\1\u0193\1\0\1\u0193\1\0\4\u0193"+
    "\25\0\7\u0193\1\0\15\u0193\1\u01cd\1\0\5\u0193\1\0"+
    "\1\u0193\1\0\3\u0193\56\0\2\u01ce\31\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\u01cf\3\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\34\1\u01d0"+
    "\5\34\1\0\1\u01d0\14\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\2\34\1\u01d1\4\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\34\1\u01d2\5\34\1\0\1\u01d2"+
    "\14\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\11\34\1\u01d3\3\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\3\34\1\u01d4\3\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\5\34\1\u01d5\1\34\1\0\3\34\1\u01d5"+
    "\11\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\14\34\1\u01d6\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\4\34"+
    "\1\u01d7\2\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\15\34\2\0\1\u01d8\4\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\3\34\1\u01d9\3\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\15\34\2\0"+
    "\4\34\1\u01da\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\5\34\1\u01db\1\34"+
    "\1\0\3\34\1\u01db\11\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u01dc\1\0\10\34\1\u01dc\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\6\34\1\u01dd\1\0\10\34"+
    "\1\u01dd\4\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\5\34"+
    "\1\u01de\1\34\1\0\3\34\1\u01de\11\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\11\34\1\u01df\3\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\5\34\1\u01e0\1\34"+
    "\1\0\3\34\1\u01e0\11\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\4\34\2\u01e1\7\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\7\0\1\u01e2\6\0\1\u01b7"+
    "\32\0\1\u01bc\75\0\1\u01b8\6\0\1\u01b8\100\0\1\u01bd"+
    "\5\0\1\u01bd\44\0\1\u01b7\32\0\1\u01bc\124\0\1\u01b7"+
    "\74\0\1\u01e3\65\0\1\u01e4\122\0\1\u01e5\67\0\1\u01b7"+
    "\11\0\1\u01b7\26\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\1\34\2\u01e6\12\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u01e7"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\6\34\1\u01e8\1\0\10\34\1\u01e8"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u01e9\1\0\4\34\25\0\7\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\5\34\1\u01ea"+
    "\1\34\1\0\3\34\1\u01ea\11\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\14\34\1\u01eb\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\4\0\11\155\1\157\3\155"+
    "\1\157\6\155\1\157\5\155\1\157\17\155\2\u01ec\10\155"+
    "\1\157\17\155\44\0\1\u01ed\11\0\1\u01ed\26\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\7\34\1\0\1\34"+
    "\2\u01ee\12\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\11\34\1\u01ef\3\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\6\34\1\u01f0\1\0\10\34\1\u01f0\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\u01f1\1\0\4\34\25\0\7\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\11\34\1\u01f2"+
    "\3\34\2\0\5\34\1\0\1\34\1\0\3\34\15\0"+
    "\1\u0190\3\0\1\u0191\77\0\1\u01f3\3\0\1\u01f4\142\0"+
    "\2\u01f5\27\0\1\34\1\0\1\u01f6\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\5\34\1\u01f7\1\34\1\0\3\34\1\u01f7\11\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\u01f8\1\0\4\34\25\0\7\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\6\34\1\u01f9\1\0\10\34"+
    "\1\u01f9\4\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\13\34\1\u01fa\1\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\u01fb\1\0\4\34"+
    "\25\0\7\34\1\0\15\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\2\34\1\u01fc\4\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\5\34\1\u01fd\1\34\1\0\3\34"+
    "\1\u01fd\11\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\u01fe\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\6\34"+
    "\1\u01ff\1\0\10\34\1\u01ff\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\u0200\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\14\34\1\u0201\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\u0202\6\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\44\0\1\u0203\46\0"+
    "\1\u01b7\160\0\1\u01b7\26\0\1\u0204\101\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\1\34\2\u0205"+
    "\12\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\1\34\1\u0206"+
    "\1\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\1\34\1\u0207\1\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\1\34\1\u0208\1\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\6\34\1\u0209\1\0\10\34"+
    "\1\u0209\4\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\1\u020a"+
    "\6\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\4\0\11\155\1\157\3\155\1\157\6\155\1\157"+
    "\5\155\1\157\21\155\2\u020b\6\155\1\157\17\155\11\0"+
    "\2\u020c\2\0\1\u020c\67\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\2\34\1\u020d\4\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\5\34\1\u020e\1\34\1\0"+
    "\3\34\1\u020e\11\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\2\34\1\u020f\4\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\u0210\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\21\0\1\u01f4\132\0\1\u0211\11\0"+
    "\1\u0211\26\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\1\34\1\u0212\1\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\6\34\1\u0213\1\0\10\34\1\u0213\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u0214\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\1\34\1\u0215\1\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\5\34"+
    "\1\u0216\1\34\1\0\3\34\1\u0216\11\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u0217"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\3\34\1\u0218\3\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u0219\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\3\34\1\u021a\3\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\45\0\1\u01b7\101\0\1\u01b7\6\0\1\u01b7\36\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\1\34\1\u021b\1\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\1\34"+
    "\1\u021c\1\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\5\34\1\u021d\1\34\1\0\3\34\1\u021d\11\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\1\34\1\u021e\1\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\4\34\2\u021f\7\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\4\34\1\u0220\2\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\4\0\11\155\1\157\3\155"+
    "\1\157\6\155\1\157\5\155\1\157\11\155\1\u0221\11\155"+
    "\1\u0221\5\155\1\157\17\155\11\0\2\u020c\2\0\1\u020c"+
    "\41\0\1\u0222\25\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\1\34\1\u0223\5\34\1\0\1\u0223\14\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\14\34\1\u0224"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\5\34\1\u0225\1\34"+
    "\1\0\3\34\1\u0225\11\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\30\0\1\u0226\60\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\1\u0227\6\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\1\u0228\6\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u0229\1\0\4\34\25\0\7\34\1\0\15\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\u022a\6\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\6\34\1\u022b"+
    "\1\0\10\34\1\u022b\4\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\4\34\1\u022c\2\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\5\34"+
    "\1\0\1\34\1\0\1\34\1\u022d\1\34\5\0\1\34"+
    "\1\0\1\34\1\0\4\34\25\0\1\u022e\6\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\1\u022f\6\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\1\34"+
    "\1\u0230\1\34\4\0\11\155\1\157\3\155\1\157\6\155"+
    "\1\u0231\5\155\1\157\31\155\1\157\17\155\40\0\1\u0232"+
    "\44\0\1\34\1\0\1\u0233\1\0\4\34\25\0\7\34"+
    "\1\0\15\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\4\34\25\0\7\34"+
    "\1\0\14\34\1\u0234\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\15\0\2\u0226\2\0\1\u0226\67\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\u0235\3\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\3\34\1\u0236"+
    "\3\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\1\u0237\4\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\4\34"+
    "\25\0\7\34\1\0\1\34\2\u0238\12\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\4\34\25\0\7\34\1\0\15\34\2\0\4\34"+
    "\1\u0239\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\3\34\1\u023a\3\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\15\34\2\0\5\34\1\0\1\34\1\0\1\34\1\u023b"+
    "\1\34\45\0\1\u023c\43\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\5\34\1\u023d\1\34\1\0\3\34\1\u023d"+
    "\11\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\5\34\1\u023e"+
    "\1\34\1\0\3\34\1\u023e\11\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\6\34\2\u023f\5\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\7\34\1\0\15\34\2\0"+
    "\5\34\1\0\1\34\1\0\1\34\1\u0240\1\34\64\0"+
    "\1\u0241\24\0\1\34\1\0\1\u0242\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u0243\1\0\4\34\25\0"+
    "\7\34\1\0\15\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\4\34\25\0"+
    "\7\34\1\0\4\34\2\u0244\7\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\1\34\1\u0245\1\34\65\0\1\u0246\23\0"+
    "\1\34\1\0\1\34\1\0\4\34\25\0\7\34\1\0"+
    "\11\34\1\u0247\3\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\44\0\1\u0248\44\0\1\34\1\0\1\u0249\1\0"+
    "\4\34\25\0\7\34\1\0\15\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\64\0\1\u024a\24\0\1\34\1\0"+
    "\1\34\1\0\4\34\25\0\1\34\1\u024b\5\34\1\0"+
    "\1\u024b\14\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\7\0\1\u024c\111\0\2\u024c\2\0\1\u024c\5\0\1\u024d"+
    "\71\0\2\u024d\2\0\1\u024d\1\0\1\u024e\34\0\2\u024f"+
    "\5\0\1\u0250\74\0\2\u0251\110\0\1\u0252\75\0\2\u0253"+
    "\110\0\1\u0254\75\0\2\u0255\110\0\1\u0256\75\0\2\u0257"+
    "\37\0\2\u0255\2\0\1\u0255\6\0\1\u0258\133\0\2\u0259"+
    "\45\0\1\u0255\147\0\1\u0255\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\13\0\2\1\1\11\11\1\2\11\2\1"+
    "\2\11\37\1\2\11\2\1\1\11\6\1\1\11\7\1"+
    "\1\11\1\1\1\11\3\1\1\0\1\11\1\1\2\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\4\0\2\1"+
    "\2\11\3\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\6\1\1\11\2\0\1\1\1\0\1\1"+
    "\2\0\1\11\2\0\2\1\1\0\37\1\1\0\7\1"+
    "\1\11\1\1\12\0\1\1\3\0\2\1\3\11\1\1"+
    "\3\0\1\1\1\11\1\1\1\11\3\0\3\1\1\0"+
    "\1\11\6\0\1\11\1\0\1\11\1\1\1\0\1\11"+
    "\1\0\2\11\2\1\1\11\3\0\10\1\1\0\1\1"+
    "\3\0\47\1\12\0\5\1\2\11\1\1\1\11\1\0"+
    "\2\11\1\1\2\0\14\1\4\0\45\1\12\0\7\1"+
    "\1\0\1\11\12\1\1\11\3\0\37\1\10\0\1\11"+
    "\1\0\7\1\1\0\6\1\3\0\23\1\4\0\16\1"+
    "\1\11\1\0\15\1\2\0\7\1\1\0\4\1\1\0"+
    "\20\1\1\0\17\1\1\0\11\1\1\0\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\14\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[601];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    protected String nowdoc = null;
    protected int nowdoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed = true;

    private LexerInput input;
    
    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }
    */
        public PHP5ColoringLexer(LexerRestartInfo info, boolean asp_tags) {
            this.input = info.input();
            this.asp_tags = asp_tags;
            
            if(info.state() != null) {
                //reset state
                setState((LexerState)info.state());
            } else {
                //initial state
                zzState = zzLexicalState = YYINITIAL;
                stack.clear();
            }
            
        }

        public static final class LexerState  {
            final StateStack stack;
            /** the current state of the DFA */
            final int zzState;
            /** the current lexical state */
            final int zzLexicalState;
            /** remember the heredoc */
            final String heredoc;
            /** and the lenght of */
            final int heredoc_len;
            
            LexerState (StateStack stack, int zzState, int zzLexicalState, String heredoc, int heredoc_len) {
                this.stack = stack;
                this.zzState = zzState;
                this.zzLexicalState = zzLexicalState;
                this.heredoc = heredoc;
                this.heredoc_len = heredoc_len;
            }
            
            @Override
            public boolean equals(Object obj) {
                if (this == obj) {
			return true;
		}

		if (obj == null || obj.getClass() != this.getClass()) {
			return false;
		}
                
                LexerState state = (LexerState) obj;
                return (this.stack.equals(state.stack) 
                    && (this.zzState == state.zzState) 
                    && (this.zzLexicalState == state.zzLexicalState)
                    && (this.heredoc_len == state.heredoc_len)
                    && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
            }
         
            @Override
            public int hashCode() {
                int hash = 11;
                hash = 31 * hash + this.zzState;
                hash = 31 * hash + this.zzLexicalState;
                hash = 31 * hash + this.stack.hashCode();
                hash = 31 * hash + this.heredoc_len;
                hash = 31 * hash + this.heredoc.hashCode();
                return hash;
            }
        }
        
        public LexerState getState() {
            return new LexerState(stack.createClone(), zzState, zzLexicalState, heredoc, heredoc_len);
        }
        
        public void setState(LexerState state) {
            this.stack.copyFrom(state.stack);
            this.zzState = state.zzState;
            this.zzLexicalState = state.zzLexicalState;
            this.heredoc = state.heredoc;
            this.heredoc_len = state.heredoc_len;
        }

     protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}

    
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

//      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

//          if (zzCurrentPosL < zzEndReadL)
//            zzInput = zzBufferL[zzCurrentPosL++];
//          else if (zzAtEOF) {
//            zzInput = YYEOF;
//            break zzForAction;
//          }
//          else {
//            // store back cached positions
//            zzCurrentPos  = zzCurrentPosL;
//            zzMarkedPos   = zzMarkedPosL;
//            boolean eof = zzRefill();
//            // get translated positions and possibly new buffer
//            zzCurrentPosL  = zzCurrentPos;
//            zzMarkedPosL   = zzMarkedPos;
//            zzBufferL      = zzBuffer;
//            zzEndReadL     = zzEndRead;
//            if (eof) {
//              zzInput = YYEOF;
//              break zzForAction;
//            }
//            else {
//              zzInput = zzBufferL[zzCurrentPosL++];
//            }
//          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 132: break;
        case 52: 
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 133: break;
        case 55: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 134: break;
        case 9: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 135: break;
        case 93: 
          { return PHPTokenId.PHP_WHILE;
          }
        case 136: break;
        case 48: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_HEREDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 137: break;
        case 27: 
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 138: break;
        case 83: 
          { return PHPTokenId.PHP_CONST;
          }
        case 139: break;
        case 105: 
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 140: break;
        case 5: 
          { return PHPTokenId.PHP_TOKEN;
          }
        case 141: break;
        case 65: 
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 142: break;
        case 30: 
          { if (asp_tags) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 143: break;
        case 97: 
          { return PHPTokenId.PHP_RETURN;
          }
        case 144: break;
        case 94: 
          { return PHPTokenId.PHP_CASTING;
          }
        case 145: break;
        case 122: 
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 146: break;
        case 120: 
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 147: break;
        case 70: 
          { return PHPTokenId.PHP_EVAL;
          }
        case 148: break;
        case 82: 
          { return PHPTokenId.PHP_ARRAY;
          }
        case 149: break;
        case 38: 
          { return PHPTokenId.PHP_DO;
          }
        case 150: break;
        case 40: 
          { //popState();
        yybegin(YYINITIAL);
        stack.clear();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 151: break;
        case 109: 
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 152: break;
        case 25: 
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 153: break;
        case 36: 
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 154: break;
        case 113: 
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 155: break;
        case 19: 
          { yypushback(1);
	yybegin(ST_PHP_NOWDOC);
          }
        case 156: break;
        case 101: 
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 157: break;
        case 6: 
          { return  PHPTokenId.PHP_STRING;
          }
        case 158: break;
        case 127: 
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 159: break;
        case 3: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 160: break;
        case 85: 
          { return PHPTokenId.PHP_CLONE;
          }
        case 161: break;
        case 80: 
          { return PHPTokenId.PHP_BREAK;
          }
        case 162: break;
        case 56: 
          { return PHPTokenId.PHP_NEW;
          }
        case 163: break;
        case 76: 
          { return PHPTokenId.PHP_FROM;
          }
        case 164: break;
        case 115: 
          { return PHPTokenId.PHP__LINE__;
          }
        case 165: break;
        case 99: 
          { return PHPTokenId.PHP_SWITCH;
          }
        case 166: break;
        case 63: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 167: break;
        case 43: 
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 168: break;
        case 35: 
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 169: break;
        case 114: 
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 170: break;
        case 24: 
          { yypushback(1);
	popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 171: break;
        case 129: 
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 172: break;
        case 111: 
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 173: break;
        case 84: 
          { return PHPTokenId.PHP_CATCH;
          }
        case 174: break;
        case 32: 
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 175: break;
        case 15: 
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 176: break;
        case 28: 
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 177: break;
        case 77: 
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 178: break;
        case 33: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 179: break;
        case 18: 
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 180: break;
        case 61: 
          { return PHPTokenId.PHP_VAR;
          }
        case 181: break;
        case 13: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 182: break;
        case 124: 
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 183: break;
        case 112: 
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 184: break;
        case 71: 
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 185: break;
        case 119: 
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 186: break;
        case 103: 
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 187: break;
        case 128: 
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 188: break;
        case 125: 
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 189: break;
        case 86: 
          { return PHPTokenId.PHP_CLASS;
          }
        case 190: break;
        case 66: 
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 191: break;
        case 69: 
          { return PHPTokenId.PHP_ELSE;
          }
        case 192: break;
        case 39: 
          { return PHPTokenId.PHP_IF;
          }
        case 193: break;
        case 117: 
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 194: break;
        case 81: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        heredoc_len -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 195: break;
        case 12: 
          { //  if (!stack.isEmpty()) {
            
            //we are pushing state when we enter the PHP code,
            //so we need to ensure we do not pop the top most state
            if(stack.size() > 1) {
                popState();
    }
    return  PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 196: break;
        case 104: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+1+bprefix;
        nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            nowdoc_len--;
        }
        nowdoc = yytext().substring(startString,nowdoc_len+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 197: break;
        case 102: 
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 198: break;
        case 16: 
          { yypushback(1);
        popState();
          }
        case 199: break;
        case 92: 
          { return PHPTokenId.PHP_FINAL;
          }
        case 200: break;
        case 60: 
          { return PHPTokenId.PHP_FOR;
          }
        case 201: break;
        case 72: 
          { return PHPTokenId.PHP_CASE;
          }
        case 202: break;
        case 91: 
          { return PHPTokenId.PHP_FALSE;
          }
        case 203: break;
        case 22: 
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 204: break;
        case 108: 
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 205: break;
        case 89: 
          { return PHPTokenId.PHP_PRINT;
          }
        case 206: break;
        case 50: 
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 207: break;
        case 45: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 208: break;
        case 126: 
          { return PHPTokenId.PHP__METHOD__;
          }
        case 209: break;
        case 11: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 210: break;
        case 37: 
          { return PHPTokenId.PHP_AS;
          }
        case 211: break;
        case 42: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 212: break;
        case 75: 
          { return PHPTokenId.PHP_LIST;
          }
        case 213: break;
        case 20: 
          { nowdoc=null;
    nowdoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 214: break;
        case 34: 
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 215: break;
        case 90: 
          { return PHPTokenId.PHP_UNSET;
          }
        case 216: break;
        case 1: 
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 217: break;
        case 67: 
          { return PHPTokenId.PHP_EXIT;
          }
        case 218: break;
        case 26: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 219: break;
        case 23: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 220: break;
        case 110: 
          { return PHPTokenId.PHP_FOREACH;
          }
        case 221: break;
        case 58: 
          { return PHPTokenId.PHP_TRY;
          }
        case 222: break;
        case 14: 
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 223: break;
        case 51: 
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 224: break;
        case 64: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
        yybegin(ST_PHP_END_NOWDOC);
    }
    yypushback(1);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 225: break;
        case 74: 
          { return PHPTokenId.PHP_SELF;
          }
        case 226: break;
        case 49: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 227: break;
        case 107: 
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 228: break;
        case 73: 
          { return PHPTokenId.PHP_TRUE;
          }
        case 229: break;
        case 54: 
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 230: break;
        case 53: 
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 231: break;
        case 17: 
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 232: break;
        case 116: 
          { return PHPTokenId.PHP__FILE__;
          }
        case 233: break;
        case 7: 
          { return  PHPTokenId.WHITESPACE;
          }
        case 234: break;
        case 57: 
          { return PHPTokenId.PHP_DIE;
          }
        case 235: break;
        case 41: 
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 236: break;
        case 47: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 237: break;
        case 87: 
          { return PHPTokenId.PHP_THROW;
          }
        case 238: break;
        case 88: 
          { return PHPTokenId.PHP_ISSET;
          }
        case 239: break;
        case 44: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 240: break;
        case 118: 
          { popState();
	return PHPTokenId.T_INLINE_HTML;
          }
        case 241: break;
        case 96: 
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 242: break;
        case 21: 
          { yypushback(1);
    popState();
          }
        case 243: break;
        case 95: 
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 244: break;
        case 10: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 245: break;
        case 31: 
          { if (short_tags_allowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 246: break;
        case 8: 
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 247: break;
        case 78: 
          { return PHPTokenId.PHP_ENDIF;
          }
        case 248: break;
        case 106: 
          { return PHPTokenId.PHP_DECLARE;
          }
        case 249: break;
        case 123: 
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 250: break;
        case 121: 
          { return PHPTokenId.PHP__CLASS__;
          }
        case 251: break;
        case 29: 
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 252: break;
        case 59: 
          { return PHPTokenId.PHP_USE;
          }
        case 253: break;
        case 130: 
          { return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 254: break;
        case 46: 
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 255: break;
        case 62: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 256: break;
        case 131: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 257: break;
        case 98: 
          { return PHPTokenId.PHP_STATIC;
          }
        case 258: break;
        case 68: 
          { return PHPTokenId.PHP_ECHO;
          }
        case 259: break;
        case 4: 
          { return PHPTokenId.PHP_NUMBER;
          }
        case 260: break;
        case 100: 
          { return PHPTokenId.PHP_PARENT;
          }
        case 261: break;
        case 79: 
          { return PHPTokenId.PHP_EMPTY;
          }
        case 262: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 602: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 603: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
