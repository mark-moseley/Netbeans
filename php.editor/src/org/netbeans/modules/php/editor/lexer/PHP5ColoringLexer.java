/* The following code was generated by JFlex 1.4.1 on 2/29/08 11:41 AM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.modules.php.editor.PHPVersion;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2/29/08 11:41 AM from the specification file
 * <tt>/space/mercurial/trunk/main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer implements PHPScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_START_HEREDOC = 6;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\15\2\0\1\11\22\0\1\12\1\26\1\17\1\76"+
    "\1\16\1\32\1\33\1\56\1\66\1\67\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\64\1\14\1\27\1\23\1\24\1\44"+
    "\1\77\1\40\1\7\1\46\1\42\1\3\1\57\1\53\1\55\1\47"+
    "\1\70\1\62\1\52\1\63\1\41\1\36\1\50\1\72\1\37\1\45"+
    "\1\51\1\54\1\65\1\61\1\6\1\60\1\10\1\74\1\20\1\75"+
    "\1\35\1\71\1\21\1\40\1\7\1\46\1\42\1\3\1\57\1\53"+
    "\1\55\1\47\1\70\1\62\1\52\1\63\1\41\1\36\1\50\1\72"+
    "\1\37\1\43\1\51\1\54\1\65\1\61\1\6\1\60\1\10\1\22"+
    "\1\34\1\73\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\5\0\1\2\2\0\2\3\1\4\1\5"+
    "\1\6\1\7\1\6\1\5\3\7\1\10\1\6\1\11"+
    "\1\6\1\12\1\13\1\14\12\6\6\7\1\6\7\7"+
    "\1\4\2\7\1\6\1\7\1\6\1\7\1\15\1\16"+
    "\1\1\1\17\1\20\2\17\1\1\3\17\3\21\2\1"+
    "\3\4\2\22\1\23\1\24\1\25\1\24\1\5\1\26"+
    "\1\5\1\27\1\26\1\30\1\4\1\0\1\4\2\2"+
    "\1\0\3\31\3\32\1\33\1\34\1\0\1\35\1\3"+
    "\1\36\1\5\1\0\1\37\6\7\1\40\2\0\1\7"+
    "\1\0\1\41\2\0\1\17\2\0\2\37\1\42\1\43"+
    "\1\37\4\7\1\44\2\7\1\45\4\7\1\46\5\7"+
    "\1\47\12\7\1\0\6\7\1\50\1\7\12\0\1\7"+
    "\3\0\1\51\2\52\1\53\1\54\1\52\3\0\3\55"+
    "\1\56\3\0\1\1\2\52\1\0\1\57\1\0\1\60"+
    "\1\51\1\0\1\61\1\62\20\0\1\63\1\64\1\65"+
    "\3\0\7\7\1\5\1\0\1\7\2\0\4\7\1\66"+
    "\2\7\1\67\22\7\1\70\4\7\1\71\1\72\5\7"+
    "\1\73\12\0\5\7\1\74\1\75\1\1\1\76\36\0"+
    "\1\77\6\7\1\100\1\101\1\7\1\102\1\7\1\0"+
    "\1\103\6\7\1\104\4\7\1\105\15\7\1\106\1\7"+
    "\1\107\3\7\1\110\4\7\12\0\6\7\11\0\1\111"+
    "\26\0\1\112\1\0\1\113\3\7\1\114\3\7\1\115"+
    "\1\116\2\117\3\7\1\120\4\7\1\121\1\7\1\122"+
    "\1\123\1\124\3\7\1\125\2\7\1\126\3\7\1\127"+
    "\1\7\1\130\1\7\1\131\1\132\1\7\1\133\10\0"+
    "\1\134\1\0\6\7\6\0\1\135\1\136\13\0\1\137"+
    "\2\0\1\140\2\0\1\141\6\0\3\7\1\142\1\7"+
    "\1\143\1\144\4\7\1\145\1\146\7\7\1\147\1\150"+
    "\1\151\2\7\4\0\6\7\7\0\1\152\7\0\1\153"+
    "\5\0\1\154\2\0\1\155\2\0\1\156\4\7\1\157"+
    "\1\7\1\160\1\161\2\7\1\162\3\7\1\163\1\164"+
    "\1\7\2\0\6\7\2\0\1\165\1\0\1\166\1\167"+
    "\1\0\1\170\4\0\1\171\3\0\1\172\1\0\1\173"+
    "\1\0\1\174\2\0\3\7\1\175\1\7\1\176\1\177"+
    "\5\7\1\200\1\7\1\201\1\7\1\202\2\7\1\203"+
    "\11\0\1\204\1\0\1\205\1\0\1\206\1\0\1\7"+
    "\1\207\4\7\1\210\1\7\1\211\1\212\3\7\1\0"+
    "\1\213\4\0\1\214\1\215\1\216\1\217\2\0\1\220"+
    "\1\221\1\7\1\222\1\7\1\223\2\7\1\224\1\225"+
    "\1\0\1\226\1\0\1\227\2\0\4\7\1\230\1\231"+
    "\1\232\1\0\1\233\1\234\1\7\1\235\1\0\1\7"+
    "\1\0\1\7\1\0\1\236\14\0\1\36\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[748];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0400\0\u0400\0\u0680\0\u06c0\0\u0400\0\u0400"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0"+
    "\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0400"+
    "\0\u0400\0\u0ec0\0\u0f00\0\u0400\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u1080\0\u0400\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u0400\0\u1280\0\u0400\0\u0400\0\u12c0\0\u1300"+
    "\0\u1340\0\u0400\0\u1380\0\u0400\0\u13c0\0\u0400\0\u1400\0\u1400"+
    "\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u0400\0\u0400"+
    "\0\u15c0\0\u0b00\0\u0400\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u0400\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u0400\0\u1940\0\u1980\0\u19c0\0\u0d00\0\u1a00\0\u06c0"+
    "\0\u1a40\0\u0400\0\u1a80\0\u1ac0\0\u0840\0\u1b00\0\u1b40\0\u1b80"+
    "\0\u0600\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u0600\0\u1cc0\0\u1d00"+
    "\0\u0600\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u1f00\0\u1f40\0\u1f80\0\u0600\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u0400\0\u2400\0\u2440"+
    "\0\u0e40\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u26c0\0\u0f40\0\u2700\0\u2740\0\u26c0\0\u0400"+
    "\0\u0400\0\u0400\0\u2700\0\u2780\0\u1040\0\u27c0\0\u2780\0\u0400"+
    "\0\u27c0\0\u0400\0\u2800\0\u1200\0\u2840\0\u2880\0\u2800\0\u2840"+
    "\0\u1280\0\u0400\0\u28c0\0\u0400\0\u2900\0\u2940\0\u1400\0\u0400"+
    "\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40"+
    "\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40"+
    "\0\u0400\0\u2d80\0\u0400\0\u2dc0\0\u2e00\0\u1340\0\u2e40\0\u2e80"+
    "\0\u2ec0\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u1940\0\u3000\0\u3040"+
    "\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180\0\u31c0\0\u0600\0\u3200"+
    "\0\u3240\0\u0600\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0"+
    "\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0"+
    "\0\u3600\0\u3640\0\u3680\0\u36c0\0\u0600\0\u3700\0\u3740\0\u3780"+
    "\0\u37c0\0\u0600\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940"+
    "\0\u0600\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0\0\u3b00"+
    "\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00"+
    "\0\u0400\0\u0400\0\u3d40\0\u1400\0\u3d80\0\u3dc0\0\u3e00\0\u3e40"+
    "\0\u3e80\0\u3ec0\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040"+
    "\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240"+
    "\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440"+
    "\0\u4480\0\u44c0\0\u0600\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600"+
    "\0\u4640\0\u0600\0\u4680\0\u46c0\0\u0600\0\u4700\0\u4740\0\u30c0"+
    "\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u0600\0\u4900"+
    "\0\u4940\0\u4980\0\u49c0\0\u0600\0\u4a00\0\u4a40\0\u4a80\0\u4ac0"+
    "\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\u4c80\0\u4cc0"+
    "\0\u4d00\0\u0600\0\u4d40\0\u0600\0\u4d80\0\u4dc0\0\u4e00\0\u0600"+
    "\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\u4f40\0\u4f80\0\u4fc0\0\u5000"+
    "\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200"+
    "\0\u5240\0\u5280\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400"+
    "\0\u5440\0\u5480\0\u54c0\0\u5500\0\u5540\0\u0400\0\u5580\0\u55c0"+
    "\0\u5600\0\u5640\0\u5680\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0"+
    "\0\u5800\0\u5840\0\u5880\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0"+
    "\0\u5a00\0\u5a40\0\u5a80\0\u5ac0\0\u0400\0\u5b00\0\u0400\0\u5b40"+
    "\0\u5b80\0\u5bc0\0\u0600\0\u5c00\0\u5c40\0\u5c80\0\u0600\0\u0600"+
    "\0\u5cc0\0\u0400\0\u5d00\0\u5d40\0\u5d80\0\u0600\0\u5dc0\0\u5e00"+
    "\0\u5e40\0\u5e80\0\u0600\0\u5ec0\0\u0600\0\u0600\0\u0600\0\u5f00"+
    "\0\u5f40\0\u5f80\0\u0600\0\u5fc0\0\u6000\0\u0600\0\u6040\0\u6080"+
    "\0\u60c0\0\u0600\0\u6100\0\u0600\0\u6140\0\u0600\0\u0600\0\u6180"+
    "\0\u0600\0\u61c0\0\u6200\0\u6240\0\u6280\0\u62c0\0\u6300\0\u6340"+
    "\0\u6380\0\u0400\0\u63c0\0\u6400\0\u6440\0\u6480\0\u64c0\0\u6500"+
    "\0\u6540\0\u6580\0\u65c0\0\u6600\0\u6640\0\u6680\0\u66c0\0\u0400"+
    "\0\u0400\0\u6700\0\u6740\0\u6780\0\u67c0\0\u6800\0\u6840\0\u6880"+
    "\0\u68c0\0\u6900\0\u6940\0\u6980\0\u0400\0\u69c0\0\u6a00\0\u0400"+
    "\0\u6a40\0\u6a80\0\u0400\0\u6ac0\0\u6b00\0\u6b40\0\u6b80\0\u6bc0"+
    "\0\u6c00\0\u6c40\0\u6c80\0\u6cc0\0\u6d00\0\u6d40\0\u0600\0\u0600"+
    "\0\u6d80\0\u6dc0\0\u6e00\0\u6e40\0\u0600\0\u0600\0\u6e80\0\u6ec0"+
    "\0\u6f00\0\u6f40\0\u6f80\0\u6fc0\0\u7000\0\u0600\0\u0600\0\u0600"+
    "\0\u7040\0\u7080\0\u70c0\0\u7100\0\u7140\0\u7180\0\u71c0\0\u7200"+
    "\0\u7240\0\u7280\0\u72c0\0\u7300\0\u7340\0\u7380\0\u73c0\0\u7400"+
    "\0\u7440\0\u7480\0\u74c0\0\u0400\0\u7500\0\u7540\0\u7580\0\u75c0"+
    "\0\u7600\0\u7640\0\u7680\0\u0400\0\u76c0\0\u7700\0\u7740\0\u7780"+
    "\0\u77c0\0\u0400\0\u7800\0\u7840\0\u0400\0\u7880\0\u78c0\0\u0600"+
    "\0\u7900\0\u7940\0\u7980\0\u79c0\0\u7a00\0\u7a40\0\u0600\0\u0600"+
    "\0\u7a80\0\u7ac0\0\u7b00\0\u7b40\0\u7b80\0\u7bc0\0\u0600\0\u0600"+
    "\0\u7c00\0\u7c40\0\u7c80\0\u7cc0\0\u7d00\0\u7d40\0\u7d80\0\u7dc0"+
    "\0\u7e00\0\u7e40\0\u7e80\0\u0400\0\u7ec0\0\u0400\0\u0400\0\u7f00"+
    "\0\u7f40\0\u7f80\0\u7fc0\0\u8000\0\u8040\0\u0400\0\u8080\0\u80c0"+
    "\0\u8100\0\u0400\0\u8140\0\u0400\0\u8180\0\u0400\0\u81c0\0\u8200"+
    "\0\u8240\0\u8280\0\u82c0\0\u0600\0\u8300\0\u0600\0\u0600\0\u8340"+
    "\0\u8380\0\u83c0\0\u8400\0\u8440\0\u0600\0\u8480\0\u0600\0\u84c0"+
    "\0\u0600\0\u8500\0\u8540\0\u0400\0\u8580\0\u85c0\0\u8600\0\u8640"+
    "\0\u8680\0\u86c0\0\u8700\0\u8740\0\u8780\0\u0400\0\u87c0\0\u0400"+
    "\0\u8800\0\u0400\0\u8840\0\u8880\0\u0600\0\u88c0\0\u8900\0\u8940"+
    "\0\u8980\0\u0600\0\u89c0\0\u0600\0\u0600\0\u8a00\0\u8a40\0\u8a80"+
    "\0\u8ac0\0\u0400\0\u8b00\0\u8b40\0\u8b80\0\u8bc0\0\u0400\0\u0400"+
    "\0\u0400\0\u0400\0\u8c00\0\u8c40\0\u0600\0\u0600\0\u8c80\0\u0600"+
    "\0\u8cc0\0\u0600\0\u8d00\0\u8d40\0\u0600\0\u0400\0\u8d80\0\u0400"+
    "\0\u8dc0\0\u0400\0\u8e00\0\u8e40\0\u8e80\0\u8ec0\0\u8f00\0\u8f40"+
    "\0\u0400\0\u0400\0\u0400\0\u8f80\0\u0600\0\u0600\0\u8fc0\0\u0600"+
    "\0\u9000\0\u9040\0\u9080\0\u90c0\0\u9100\0\u0600\0\u9140\0\u9180"+
    "\0\u91c0\0\u9200\0\u9240\0\u9280\0\u92c0\0\u9300\0\u9340\0\u9380"+
    "\0\u93c0\0\u9400\0\u0400\0\u9440";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[748];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\27\17\1\20\50\17\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\32\1\33\1\34\1\32"+
    "\1\35\1\36\1\21\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\46"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\60"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\31"+
    "\1\71\1\72\1\31\1\73\2\31\1\74\1\75\1\76"+
    "\1\33\1\31\1\77\1\31\1\100\2\33\1\101\1\33"+
    "\16\102\1\103\1\104\1\105\1\102\1\106\55\102\16\107"+
    "\1\110\1\107\1\111\1\104\1\112\55\107\4\113\1\114"+
    "\15\113\1\115\55\113\11\116\1\117\3\116\1\117\1\120"+
    "\1\116\1\121\1\116\1\122\55\116\3\123\1\124\2\123"+
    "\3\124\25\123\6\124\1\123\11\124\1\123\5\124\1\123"+
    "\1\124\2\123\3\124\5\123\100\125\3\126\1\127\1\130"+
    "\1\126\3\127\25\126\6\127\1\126\11\127\1\126\5\127"+
    "\1\126\1\127\2\126\3\127\5\126\1\21\1\131\1\132"+
    "\1\31\1\132\1\133\3\31\2\134\2\132\1\134\1\135"+
    "\1\132\1\134\15\132\6\31\1\132\11\31\1\134\5\31"+
    "\1\132\1\31\2\132\3\31\1\132\1\33\1\136\1\134"+
    "\1\132\15\137\1\140\12\137\1\141\47\137\30\142\1\143"+
    "\1\0\45\142\1\144\11\145\1\146\3\145\1\147\6\145"+
    "\1\150\5\145\1\151\11\145\1\152\33\145\11\153\2\154"+
    "\2\153\1\154\62\153\27\17\1\155\77\17\1\0\2\17"+
    "\1\156\10\17\1\157\1\160\33\17\101\0\1\22\1\161"+
    "\1\162\1\0\1\22\73\0\1\161\3\0\1\161\15\0"+
    "\1\163\55\0\1\31\1\0\1\31\1\0\1\31\1\164"+
    "\2\31\25\0\3\31\1\165\2\31\1\0\1\31\1\166"+
    "\3\31\1\167\3\31\1\0\4\31\1\170\1\0\1\171"+
    "\2\0\3\31\11\0\1\163\16\0\1\163\1\172\54\0"+
    "\1\22\1\161\1\162\1\0\1\22\1\173\72\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\53\5\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\6\0\1\36\7\0"+
    "\1\174\6\0\1\31\1\175\4\31\1\0\11\31\1\176"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\16\0\2\32\2\0"+
    "\1\32\65\0\1\177\2\0\3\177\25\0\6\177\1\0"+
    "\11\177\1\0\5\177\1\0\1\177\2\0\3\177\5\0"+
    "\16\200\1\201\1\202\1\203\1\200\1\204\55\200\23\0"+
    "\1\205\1\163\76\0\1\163\1\205\76\0\1\163\1\0"+
    "\1\163\75\0\1\205\77\0\2\163\2\0\1\206\73\0"+
    "\1\163\77\0\1\163\4\0\1\207\1\101\71\0\1\163"+
    "\1\210\76\0\1\163\7\0\1\163\67\0\1\163\10\0"+
    "\1\163\44\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\31\1\211\4\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\212\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\2\31\1\213\1\31\25\0\1\31\1\214\1\31\1\215"+
    "\1\31\1\216\1\0\1\216\10\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\217\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\220\1\0"+
    "\4\31\25\0\1\221\5\31\1\0\2\31\1\222\6\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\223\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\224\4\31\1\0\2\31\1\225\2\31\1\0\1\31"+
    "\2\0\3\31\31\0\1\226\54\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\227\1\31\1\230\3\31\1\0"+
    "\5\31\1\231\3\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\232\1\31\1\233\1\0\1\233\10\31\1\0"+
    "\1\234\3\31\1\235\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\236"+
    "\1\237\3\31\1\0\7\31\1\240\1\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\31\1\241\4\31\1\0\10\31"+
    "\1\242\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\2\31\1\243\6\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\5\31\1\244\3\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\3\31\1\245\1\31\1\246\1\0\1\246"+
    "\10\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\20\176\1\247\35\176\1\202\21\176\1\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\250\1\251\1\252\3\31"+
    "\1\0\2\31\1\253\4\31\1\254\1\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\10\31\1\255\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\71\0\1\256\14\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\257"+
    "\3\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\14\0\1\260\2\0\1\261\23\0\1\262\1\263"+
    "\1\264\1\0\1\265\1\266\1\0\1\266\1\0\1\267"+
    "\4\0\1\270\2\0\1\271\21\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\1\31\1\272\1\31\5\0\16\102"+
    "\1\273\1\0\1\274\1\102\1\275\60\102\1\276\2\102"+
    "\3\276\5\102\1\277\1\300\1\274\1\102\1\301\13\102"+
    "\6\276\1\102\11\276\1\102\5\276\1\102\1\276\2\102"+
    "\3\276\123\102\1\302\1\300\1\274\1\102\1\303\55\102"+
    "\16\107\1\304\1\107\1\305\1\0\1\306\60\107\1\276"+
    "\2\107\3\276\5\107\1\307\1\107\1\305\1\310\1\301"+
    "\13\107\6\276\1\107\11\276\1\107\5\276\1\107\1\276"+
    "\2\107\3\276\123\107\1\302\1\107\1\305\1\310\1\311"+
    "\55\107\24\0\1\312\71\0\1\302\61\0\11\116\1\117"+
    "\3\116\1\117\1\313\1\116\1\314\1\116\1\315\60\116"+
    "\1\316\2\116\3\316\1\117\3\116\1\117\1\313\1\116"+
    "\1\314\1\116\1\315\13\116\6\316\1\116\11\316\1\116"+
    "\5\316\1\116\1\316\2\116\3\316\10\116\1\276\2\116"+
    "\3\276\1\117\3\116\1\117\1\317\1\116\1\314\1\116"+
    "\1\301\13\116\6\276\1\116\11\276\1\116\5\276\1\116"+
    "\1\276\2\116\3\276\16\116\1\117\3\116\1\117\73\116"+
    "\1\117\3\116\1\117\1\302\1\116\1\314\1\116\1\320"+
    "\55\116\1\0\1\321\1\0\1\321\1\0\4\321\1\322"+
    "\2\0\1\323\1\322\20\0\6\321\1\0\11\321\1\0"+
    "\5\321\1\0\1\321\2\0\3\321\6\0\1\127\1\0"+
    "\1\127\1\0\4\127\25\0\6\127\1\0\11\127\1\0"+
    "\5\127\1\0\1\127\2\0\3\127\31\0\1\324\54\0"+
    "\1\131\3\0\1\131\73\0\1\131\3\0\1\131\1\173"+
    "\74\0\1\325\2\0\3\325\25\0\6\325\1\0\11\325"+
    "\1\0\5\325\1\0\1\325\2\0\3\325\5\0\30\140"+
    "\1\326\77\140\1\326\1\327\46\140\31\142\1\0\45\142"+
    "\1\0\31\142\1\330\45\142\4\0\1\331\33\0\1\332"+
    "\1\333\1\334\1\335\1\336\1\0\1\336\1\337\1\340"+
    "\1\341\1\342\1\343\1\344\1\345\2\0\1\346\3\0"+
    "\1\347\1\0\1\350\12\0\11\145\1\147\3\145\1\147"+
    "\6\145\1\147\5\145\1\147\11\145\1\147\33\145\15\0"+
    "\1\351\106\0\1\352\64\0\2\154\2\0\1\154\62\0"+
    "\27\17\1\0\2\17\1\0\10\17\2\0\33\17\23\0"+
    "\1\353\122\0\1\354\54\0\1\353\24\0\1\355\30\0"+
    "\1\161\1\0\1\162\1\0\1\161\73\0\1\131\2\0"+
    "\1\356\1\131\17\0\1\356\53\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\2\31\1\357\1\31"+
    "\1\360\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\361\1\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\10\31\1\362\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\363\1\0\1\363\10\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\3\31\1\364"+
    "\5\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\365"+
    "\3\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\366\1\0\1\366\1\0\1\366\1\0"+
    "\1\366\30\0\1\366\1\0\1\366\3\0\1\366\10\0"+
    "\1\366\47\0\1\367\51\0\1\31\1\0\1\370\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\177\1\0\1\177\1\0"+
    "\4\177\25\0\6\177\1\0\11\177\1\0\5\177\1\0"+
    "\1\177\2\0\3\177\5\0\3\200\1\0\2\200\3\0"+
    "\5\200\1\201\1\202\1\203\1\200\1\0\13\200\6\0"+
    "\1\200\11\0\1\200\5\0\1\200\1\0\2\200\3\0"+
    "\123\200\1\0\1\202\1\203\1\200\1\204\55\200\23\0"+
    "\1\163\3\0\1\371\100\0\1\372\60\0\2\210\2\0"+
    "\1\210\63\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\373\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\2\31\1\374\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\5\31\1\375\1\0\1\375\10\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\31\1\376\4\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\211\1\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\2\31\1\377\2\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\1\31\1\u0100\7\31"+
    "\1\0\1\u0101\4\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\u0102\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\5\31\1\u0103\3\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u0104\3\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\2\31\1\u0105\6\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\16\0\2\226\2\0"+
    "\1\226\63\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\u0106\2\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u0107\1\0\1\u0107\3\31\1\u0108"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\u0109\1\31"+
    "\1\u010a\3\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\5\31\1\u010b\1\0\1\u010b\1\u010c\2\31\1\u010d"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\5\31\1\u010e"+
    "\1\0\1\u010e\10\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\3\31\1\u010f\5\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u0110\5\31\1\0\2\31\1\u0111\6\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\31\1\u0112\4\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\2\31\1\u0113\1\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\7\31\1\u0114\1\31\1\0\1\31"+
    "\1\u0115\3\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\31\1\u0116\4\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\5\31"+
    "\1\u0117\1\0\1\u0117\10\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\u0118\5\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u0119\1\0\1\u0119\10\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\u011a\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\100\176\1\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u011b"+
    "\4\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\u011c\5\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\5\31\1\u011d\3\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u011e\2\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\3\31\1\u011f\2\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\2\31\1\u0120\6\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\31\1\u0121\4\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\43\0\1\u0122\10\0\1\u0123"+
    "\37\0\1\u0124\73\0\1\u0125\133\0\1\u0126\76\0\1\u0127"+
    "\112\0\1\u0128\67\0\1\u0129\77\0\1\u012a\110\0\1\u012b"+
    "\26\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\1\31\1\u012c\3\31\1\u012d\2\31\1\u012e\1\0"+
    "\1\u012f\3\31\1\u0130\1\0\1\31\2\0\3\31\5\0"+
    "\3\102\1\0\2\102\3\0\5\102\1\277\1\300\1\274"+
    "\1\102\1\0\13\102\6\0\1\102\11\0\1\102\5\0"+
    "\1\102\1\0\2\102\3\0\23\102\1\0\1\300\1\274"+
    "\1\102\1\303\55\102\1\0\1\276\1\0\1\276\1\0"+
    "\4\276\25\0\6\276\1\0\11\276\1\0\5\276\1\0"+
    "\1\276\2\0\3\276\1\0\1\u0131\3\0\3\107\1\0"+
    "\2\107\3\0\5\107\1\307\1\107\1\305\1\310\1\0"+
    "\13\107\6\0\1\107\11\0\1\107\5\0\1\107\1\0"+
    "\2\107\3\0\23\107\1\0\1\107\1\305\1\310\1\311"+
    "\55\107\3\116\1\0\2\116\3\0\1\117\3\116\1\117"+
    "\1\317\1\116\1\314\1\116\1\0\13\116\6\0\1\116"+
    "\11\0\1\116\5\0\1\116\1\0\2\116\3\0\16\116"+
    "\1\117\3\116\1\117\1\0\1\116\1\314\1\116\1\320"+
    "\56\116\1\316\1\116\1\316\1\116\4\316\1\u0132\2\116"+
    "\1\u0133\1\u0132\1\313\1\116\1\314\1\116\1\315\13\116"+
    "\6\316\1\116\11\316\1\116\5\316\1\116\1\316\2\116"+
    "\3\316\5\116\11\0\1\322\3\0\1\322\63\0\1\325"+
    "\1\0\1\325\1\0\4\325\25\0\6\325\1\0\11\325"+
    "\1\0\5\325\1\0\1\325\2\0\3\325\5\0\30\140"+
    "\1\326\1\u0134\46\140\6\0\1\u0135\74\0\1\u0136\103\0"+
    "\1\u0137\36\0\1\u0138\5\0\1\u0139\63\0\1\u013a\42\0"+
    "\1\u013b\77\0\1\u013c\43\0\1\u013d\1\0\1\u013e\2\0"+
    "\1\u013f\61\0\1\u0140\1\0\1\u0141\100\0\1\u0142\11\0"+
    "\1\u0143\63\0\1\u0144\1\u0145\75\0\1\u0146\15\0\1\u0147"+
    "\1\u0148\71\0\1\u0149\102\0\1\u014a\70\0\1\u014b\1\0"+
    "\1\u014b\101\0\1\u014c\33\0\1\u014d\34\0\1\u014e\42\0"+
    "\1\u014f\34\0\1\u0150\50\0\2\352\2\0\1\352\121\0"+
    "\1\u0151\115\0\1\u0152\23\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\4\31\1\u0153\4\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\u0154\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\4\31\1\u0155\1\u0156\1\0"+
    "\1\u0156\1\31\1\u0157\6\31\1\0\1\u0158\1\31\1\u0159"+
    "\2\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\u015a\5\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\u015b\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u015c\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\5\31\1\u015d\3\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\34\0\1\371\51\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u015e\3\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\10\0\1\u015f"+
    "\2\0\3\u015f\1\0\1\371\23\0\6\u015f\1\0\11\u015f"+
    "\1\0\5\u015f\1\0\1\u015f\2\0\3\u015f\16\0\2\u0160"+
    "\2\0\1\u0160\63\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\7\31\1\u0161\1\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\7\31\1\u0162\1\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u0163\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\u0164\3\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\5\31\1\u0165\3\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u0166\3\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\1\u0167\4\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\4\31\1\u0168\4\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u0169\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u016a\1\0\1\u016a\3\31\1\u016b"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\u016c\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\1\31\1\u016d\7\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\u016e\2\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u016f\1\0\1\u016f\10\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\4\31\1\u0170"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\5\31\1\u0171\3\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\u0172\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\u0173\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\5\31\1\u0174\3\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\4\31\1\u0175\4\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u0176\2\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\u0177\2\0\3\31\6\0"+
    "\1\31\1\0\1\u0178\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\5\31\1\u0179\3\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\u017a\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\u017b\5\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\4\31\1\u017c\4\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\2\31\1\u017d\1\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\u017e\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\u017f\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\4\31\1\u0180\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\5\31\1\u0181"+
    "\1\0\1\u0181\10\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u0182\3\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\1\31\1\u0183\7\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\5\31\1\u0184"+
    "\3\31\1\0\5\31\1\0\1\31\2\0\3\31\43\0"+
    "\1\u0185\102\0\1\u0186\126\0\1\u0187\47\0\1\u0188\76\0"+
    "\1\u0189\114\0\1\u018a\62\0\1\u018b\111\0\1\u018c\71\0"+
    "\1\u018d\1\0\1\u018d\70\0\1\u018e\42\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\5\31\1\u018f"+
    "\3\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\2\31\1\u0190\6\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u0191\3\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\2\31\1\u0192\4\31\1\u0193"+
    "\1\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\u0194\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\11\116\1\u0132\3\116\1\u0132\1\313\1\116\1\314\1\116"+
    "\1\315\55\116\40\0\1\u0195\5\0\1\u0196\102\0\1\u0197"+
    "\71\0\1\u0198\1\0\1\u0198\100\0\1\u0199\102\0\1\u019a"+
    "\111\0\1\u019b\57\0\1\u019c\1\0\1\u019c\2\0\1\u019d"+
    "\32\0\1\u019e\135\0\1\u019f\76\0\1\u01a0\46\0\1\u01a1"+
    "\140\0\1\u01a2\100\0\1\u01a3\77\0\1\u01a4\67\0\1\u01a5"+
    "\74\0\1\u01a6\100\0\1\u01a7\6\0\1\u01a8\73\0\1\u01a9"+
    "\106\0\1\u01aa\65\0\1\u01ab\101\0\1\u01ac\4\0\1\u01ad"+
    "\67\0\1\u01ae\44\0\1\u01af\135\0\1\u01b0\10\0\1\u01b1"+
    "\76\0\1\u01b2\101\0\1\u01b3\63\0\1\u01b4\77\0\1\u01b5"+
    "\107\0\1\u01b6\100\0\1\u01b7\30\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u01b8\2\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\u01b9\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\2\31\1\u01ba\2\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\1\u01bb\4\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\u01bc\5\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\10\31\1\u01bd\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\2\31\1\u01be\6\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\1\31\1\u01bf\3\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\3\31\1\u01c0\1\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\u015f\1\0\1\u015f\1\0\4\u015f\1\u01c1"+
    "\3\0\1\u01c2\20\0\6\u015f\1\0\11\u015f\1\0\5\u015f"+
    "\1\0\1\u015f\2\0\3\u015f\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\31\1\u01c3\4\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\2\31"+
    "\1\u01c4\6\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\1\31"+
    "\1\u01c5\4\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\1\31\1\u01c6\3\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u01c7\3\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\7\31"+
    "\1\u01c8\1\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\2\31\1\u01c9\6\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\1\31\1\u01ca\7\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\4\31\1\u01cb\4\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\2\31"+
    "\1\u01cc\6\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\10\31\1\u01cd\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\u01ce\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\5\31\1\u01cf\1\0\1\u01cf\10\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\u01d0\3\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\7\31\1\u01d1"+
    "\1\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u01d2"+
    "\4\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u01d3\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\u01d4\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\u01d5\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\4\31\1\u01d6\4\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\2\31\1\u01d7\3\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\3\31\1\u01d8"+
    "\2\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\2\31\1\u01d9\6\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\2\31\1\u01da"+
    "\2\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\2\31\1\u01db\3\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\4\31\1\u01dc\4\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u01dd\3\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\u01de\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\5\31\1\u01df\3\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\4\31\1\u01e0"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\u01e1\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\57\0"+
    "\1\u01e2\65\0\1\u01e3\42\0\1\u01e4\146\0\1\u01e5\65\0"+
    "\1\u01e6\46\0\1\u01e7\137\0\1\u01e8\33\0\1\u01e9\6\0"+
    "\1\u01e5\54\0\1\u01ea\13\0\1\u01eb\134\0\1\u01eb\40\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\u01ec"+
    "\3\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\u01ed\2\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\5\31\1\u01ee\3\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\5\31\1\u01ef"+
    "\3\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\3\31\1\u01f0"+
    "\2\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u01f1\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\70\0\1\u01f2\17\0\1\u01f3\150\0"+
    "\1\u01f4\74\0\1\u01f5\31\0\1\u01f6\151\0\1\u01f7\25\0"+
    "\1\u01f8\142\0\1\u01f9\70\0\1\u01fa\106\0\1\u01fb\102\0"+
    "\1\u01fc\76\0\1\u01fd\107\0\1\u01fe\22\0\1\u01ff\77\0"+
    "\1\u0200\132\0\1\u0201\111\0\1\u0202\67\0\1\u0203\121\0"+
    "\1\u0204\53\0\1\u0205\77\0\1\u0206\77\0\1\u0207\123\0"+
    "\1\u0208\20\0\1\u0209\103\0\1\u020a\133\0\1\u020b\1\0"+
    "\1\u020b\72\0\1\u020c\42\0\1\u020d\151\0\1\u020e\71\0"+
    "\1\u020f\73\0\1\u0210\1\0\1\u0210\102\0\1\u0211\30\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\4\31\1\u0212"+
    "\1\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\1\31\1\u0213\7\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\2\31\1\u0214\6\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\31\1\u0215\4\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\2\31\1\u0216\6\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\1\u0217\4\31\1\0\1\31"+
    "\2\0\3\31\22\0\1\u01c2\63\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u0218\2\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\31\1\u0219\4\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\u021a\3\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\31\1\u021b\4\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\5\31\1\u021c\3\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\1\31"+
    "\1\u021d\7\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\10\31\1\u021e\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\u021f\2\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\3\31\1\u0220\2\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\4\31\1\u0221\1\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\1\u0222\4\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\4\31\1\u0223\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\1\31\1\u0224\7\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\4\31\1\u0225\4\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\4\31\1\u0226"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\1\31\1\u0227\7\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\5\31\1\u0228\3\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\1\31\1\u0229\7\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\2\31\1\u022a"+
    "\6\31\1\0\5\31\1\0\1\31\2\0\3\31\10\0"+
    "\1\u022b\6\0\1\u01e5\54\0\1\u01ea\47\0\1\u01e6\106\0"+
    "\1\u01eb\43\0\1\u01e5\54\0\1\u01ea\70\0\1\u01e5\71\0"+
    "\1\u022c\66\0\1\u022d\111\0\1\u022e\75\0\1\u01e5\27\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\5\31\1\u022f"+
    "\1\0\1\u022f\10\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\u0230\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u0231\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\u0232\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\1\31\1\u0233\7\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\10\31\1\u0234"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\55\0\1\u0235"+
    "\77\0\1\u0236\66\0\1\u0237\77\0\1\u0238\103\0\1\u0239"+
    "\1\0\1\u0239\70\0\1\u023a\44\0\1\u023b\77\0\1\u023c"+
    "\143\0\1\u023d\70\0\1\u023e\76\0\1\u023f\113\0\1\u0240"+
    "\63\0\1\u0241\77\0\1\u0242\43\0\1\u0243\157\0\1\u0244"+
    "\54\0\1\u0245\76\0\1\u0246\121\0\1\u0247\57\0\1\u0248"+
    "\76\0\1\u0249\111\0\1\u024a\70\0\1\u024b\1\0\1\u024b"+
    "\70\0\1\u024c\107\0\1\u024d\100\0\1\u024e\101\0\1\u024f"+
    "\27\0\1\31\1\0\1\31\1\0\4\31\25\0\5\31"+
    "\1\u0250\1\0\1\u0250\10\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\5\31\1\u0251\3\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\4\31\1\u0252\4\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\u0253\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\5\31"+
    "\1\u0254\3\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\u0255\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\1\31\1\u0256\7\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\u0257\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\4\31\1\u0258\4\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\7\31\1\u0259\1\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\1\31"+
    "\1\u025a\7\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\u025b\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\u025c\3\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\u025d\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\4\31\1\u025e\4\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\u025f"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\10\31\1\u0260\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\u0261\5\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\45\0\1\u0262"+
    "\42\0\1\u01e5\147\0\1\u01e5\27\0\1\u0263\75\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\5\31\1\u0264\1\0"+
    "\1\u0264\10\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\1\31"+
    "\1\u0265\1\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\1\31\1\u0266\1\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\1\31\1\u0267\1\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u0268\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\1\u0269"+
    "\5\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\57\0\1\u026a\76\0\1\u026b\67\0\1\u026c\76\0"+
    "\1\u026d\102\0\1\u026e\1\0\1\u026e\71\0\1\u026f\106\0"+
    "\1\u0270\77\0\1\u0271\77\0\1\u0272\100\0\1\u0273\66\0"+
    "\1\u0274\102\0\1\u0275\41\0\1\u0276\133\0\1\u0277\113\0"+
    "\1\u0278\73\0\1\u0279\73\0\1\u027a\1\0\1\u027a\75\0"+
    "\1\u027b\1\0\1\u027b\104\0\1\u027c\63\0\1\u027d\103\0"+
    "\1\u027e\73\0\1\u027f\52\0\2\u0280\2\0\1\u0280\63\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\u0281"+
    "\3\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\1\31\1\u0282\7\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\u0283\3\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\u0284\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\1\31\1\u0285\1\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\4\31\1\u0286\4\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\u0287\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\u0288\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\1\31\1\u0289\1\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\1\31\1\u028a\7\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u028b\2\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\u028c\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\3\31\1\u028d"+
    "\2\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\46\0\1\u01e5\75\0\1\u01e5\41\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\1\31\1\u028e\1\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\1\31\1\u028f"+
    "\1\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\1\31\1\u0290\7\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\1\31\1\u0291\1\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\2\31\1\u0292"+
    "\6\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\4\31\1\u0293"+
    "\1\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\10\0\1\u0294\143\0\1\u0295\76\0\1\u0296\71\0"+
    "\1\u0297\124\0\1\u0298\74\0\1\u0299\70\0\1\u029a\63\0"+
    "\1\u029b\100\0\1\u029c\110\0\1\u029d\31\0\1\u029e\134\0"+
    "\1\u029f\42\0\1\u02a0\150\0\1\u02a1\64\0\1\u02a2\47\0"+
    "\2\u0280\2\0\1\u0280\34\0\1\u02a3\26\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\31\1\u02a4\4\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\10\31\1\u02a5\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\1\31\1\u02a6\7\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\u02a7\5\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u02a8\5\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\u02a9\5\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\u02aa\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\4\31\1\u02ab"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\4\31\1\u02ac"+
    "\1\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\6\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\1\31\1\u02ad\1\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u02ae\5\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\u02af\5\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\1\31\1\u02b0\1\31\43\0"+
    "\1\u02b1\112\0\1\u02b2\77\0\1\u02b3\66\0\1\u02b4\77\0"+
    "\1\u02b5\114\0\1\u02b6\102\0\1\u02b7\71\0\1\u02b8\105\0"+
    "\1\u02b9\71\0\1\u02ba\64\0\1\u02bb\100\0\1\u02bc\40\0"+
    "\1\31\1\0\1\u02bd\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\10\31\1\u02be\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\3\31"+
    "\1\u02bf\2\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\1\u02c0\4\31\1\0"+
    "\1\31\2\0\3\31\6\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\3\31\1\u02c1\2\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\6\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\5\31\1\u02c2\1\0\1\u02c2"+
    "\10\31\1\0\5\31\1\0\1\31\2\0\3\31\6\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\4\31\1\u02c3\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\3\31"+
    "\1\u02c4\2\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\1\31\1\u02c5\1\31\46\0\1\u02c6\41\0\1\u02c7"+
    "\133\0\1\u02c8\113\0\1\u02c9\75\0\1\u02ca\74\0\1\u02cb"+
    "\72\0\1\u02cc\37\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\1\31\1\u02cd\7\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\1\31\1\u02ce\7\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\6\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\3\31"+
    "\1\u02cf\5\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\6\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\1\31"+
    "\1\u02d0\1\31\47\0\1\u02d1\40\0\1\u02d2\77\0\1\u02d3"+
    "\147\0\1\u02d4\25\0\1\31\1\0\1\u02d5\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\u02d6\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\6\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\2\31\1\u02d7\6\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\6\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\1\31\1\u02d8\1\31\61\0\1\u02d9"+
    "\24\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\5\31\1\u02da\3\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\45\0\1\u02db\40\0\1\31\1\0\1\u02dc"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\60\0\1\u02dd\25\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\31\1\u02de\4\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\10\0\1\u02df\105\0\2\u02df\2\0\1\u02df\5\0\1\u02e0"+
    "\65\0\2\u02e0\2\0\1\u02e0\1\0\1\u02e1\30\0\1\u02e2"+
    "\5\0\1\u02e3\71\0\1\u02e4\104\0\1\u02e5\72\0\1\u02e6"+
    "\104\0\1\u02e7\72\0\1\u02e8\104\0\1\u02e9\72\0\1\u02ea"+
    "\40\0\2\u02e8\2\0\1\u02e8\6\0\1\u02eb\123\0\1\u02ec"+
    "\46\0\1\u02e8\136\0\1\u02e8\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[38016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\5\0\1\1\2\0\2\1\1\11\11\1"+
    "\2\11\2\1\2\11\37\1\2\11\2\1\1\11\6\1"+
    "\1\11\7\1\1\11\1\1\2\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\3\1\1\0\2\1"+
    "\2\11\2\1\1\11\1\1\1\0\4\1\1\0\1\11"+
    "\6\1\1\11\2\0\1\1\1\0\1\1\2\0\1\11"+
    "\2\0\42\1\1\0\6\1\1\11\1\1\12\0\1\1"+
    "\3\0\2\1\3\11\1\1\3\0\1\1\1\11\1\1"+
    "\1\11\3\0\3\1\1\0\1\11\1\0\1\11\1\1"+
    "\1\0\1\1\1\11\20\0\1\11\1\1\1\11\3\0"+
    "\10\1\1\0\1\1\2\0\47\1\12\0\5\1\2\11"+
    "\2\1\36\0\14\1\1\0\45\1\12\0\6\1\11\0"+
    "\1\11\26\0\1\11\1\0\1\11\12\1\1\11\37\1"+
    "\10\0\1\11\1\0\6\1\6\0\2\11\13\0\1\11"+
    "\2\0\1\11\2\0\1\11\6\0\31\1\4\0\6\1"+
    "\7\0\1\11\7\0\1\11\5\0\1\11\2\0\1\11"+
    "\2\0\22\1\2\0\6\1\2\0\1\11\1\0\2\11"+
    "\1\0\1\1\4\0\1\11\3\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\23\1\1\11\11\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\15\1\1\0\1\11\4\0"+
    "\4\11\2\0\11\1\1\11\1\0\1\11\1\0\1\11"+
    "\2\0\4\1\3\11\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[748];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed = true;

    
    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }
    */
        public PHP5ColoringLexer(java.io.Reader  reader, boolean asp_tags) {
            this(reader);
            this.asp_tags = asp_tags;
        }

        public void reset(java.io.Reader  reader) {
            yyreset(reader);
        }

        public class LexerState implements PHPScannerState{
            final int saveState;
            final StateStack saveStack;
            LexerState () {
                this.saveState = yystate(); 
                this.saveStack = stack.createClone();
            }
        }
        
        public PHPScannerState getState() {
            return new LexerState();
        }
        
        public void setState(PHPScannerState state) {
            LexerState lstate = (LexerState)state;
            this.stack.copyFrom(lstate.saveStack);
            yybegin(lstate.saveState);
        }

        public PHPVersion getPHPVersion () {
            return PHPVersion.PHP_5;
        }

        public int getTokenLength() {
            return yylength();
        }

    public int getOffset() {
        return yychar;
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}

    
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 106: 
          { return PHPTokenId.PHPDOC_SINCE;
          }
        case 159: break;
        case 89: 
          { return PHPTokenId.PHP_FALSE;
          }
        case 160: break;
        case 50: 
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 161: break;
        case 143: 
          { return PHPTokenId.PHPDOC_TUTORIAL;
          }
        case 162: break;
        case 121: 
          { return PHPTokenId.PHPDOC_IGNORE;
          }
        case 163: break;
        case 114: 
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 164: break;
        case 144: 
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 165: break;
        case 27: 
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 166: break;
        case 105: 
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 167: break;
        case 157: 
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 168: break;
        case 16: 
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 169: break;
        case 93: 
          { return PHPTokenId.PHPDOC_NAME;
          }
        case 170: break;
        case 139: 
          { return PHPTokenId.PHPDOC_ABSTRACT;
          }
        case 171: break;
        case 44: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 172: break;
        case 73: 
          { return PHPTokenId.PHPDOC_SEE;
          }
        case 173: break;
        case 71: 
          { return PHPTokenId.PHP_LIST;
          }
        case 174: break;
        case 108: 
          { return PHPTokenId.PHPDOC_FINAL;
          }
        case 175: break;
        case 119: 
          { return PHPTokenId.PHPDOC_AUTHOR;
          }
        case 176: break;
        case 77: 
          { return PHPTokenId.PHP_EMPTY;
          }
        case 177: break;
        case 142: 
          { return PHPTokenId.PHPDOC_PROPERTY;
          }
        case 178: break;
        case 14: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 179: break;
        case 69: 
          { return PHPTokenId.PHP_CASE;
          }
        case 180: break;
        case 60: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 181: break;
        case 33: 
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 182: break;
        case 23: 
          { yypushback(1);
	popState();
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 183: break;
        case 18: 
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 184: break;
        case 26: 
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 185: break;
        case 67: 
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 186: break;
        case 85: 
          { return PHPTokenId.PHP_ISSET;
          }
        case 187: break;
        case 130: 
          { return PHPTokenId.PHP__FILE__;
          }
        case 188: break;
        case 39: 
          { return PHPTokenId.PHP_IF;
          }
        case 189: break;
        case 46: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 190: break;
        case 36: 
          { return PHPTokenId.PHP_AS;
          }
        case 191: break;
        case 57: 
          { return PHPTokenId.PHP_USE;
          }
        case 192: break;
        case 52: 
          { if (asp_tags) {
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 193: break;
        case 95: 
          { return PHPTokenId.PHPDOC_TODO;
          }
        case 194: break;
        case 117: 
          { return PHPTokenId.PHPDOC_RETURN;
          }
        case 195: break;
        case 51: 
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 196: break;
        case 131: 
          { return PHPTokenId.PHPDOC_EXAMPLE;
          }
        case 197: break;
        case 53: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 198: break;
        case 156: 
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 199: break;
        case 49: 
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 200: break;
        case 122: 
          { return PHPTokenId.PHPDOC_THROWS;
          }
        case 201: break;
        case 154: 
          { return PHPTokenId.PHPDOC_FILESOURCE;
          }
        case 202: break;
        case 31: 
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 203: break;
        case 11: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 204: break;
        case 41: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 205: break;
        case 5: 
          { return PHPTokenId.PHP_NUMBER;
          }
        case 206: break;
        case 111: 
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 207: break;
        case 152: 
          { return PHPTokenId.PHPDOC_DEPRECATED;
          }
        case 208: break;
        case 109: 
          { return PHPTokenId.PHPDOC_MAGIC;
          }
        case 209: break;
        case 29: 
          { if (asp_tags) {
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 210: break;
        case 112: 
          { return PHPTokenId.PHP_DECLARE;
          }
        case 211: break;
        case 25: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 212: break;
        case 83: 
          { return PHPTokenId.PHP_CLONE;
          }
        case 213: break;
        case 43: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 214: break;
        case 54: 
          { return PHPTokenId.PHP_NEW;
          }
        case 215: break;
        case 48: 
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 216: break;
        case 17: 
          { yypushback(1);
        popState();
          }
        case 217: break;
        case 72: 
          { return PHPTokenId.PHP_FROM;
          }
        case 218: break;
        case 110: 
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 219: break;
        case 91: 
          { return PHPTokenId.PHP_WHILE;
          }
        case 220: break;
        case 135: 
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 221: break;
        case 115: 
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 222: break;
        case 3: 
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 223: break;
        case 76: 
          { return PHPTokenId.PHP_ENDIF;
          }
        case 224: break;
        case 101: 
          { return PHPTokenId.PHP_STATIC;
          }
        case 225: break;
        case 128: 
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 226: break;
        case 113: 
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 227: break;
        case 15: 
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 228: break;
        case 96: 
          { return PHPTokenId.PHPDOC_LINK;
          }
        case 229: break;
        case 32: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 230: break;
        case 129: 
          { return PHPTokenId.PHP__LINE__;
          }
        case 231: break;
        case 123: 
          { return PHPTokenId.PHPDOC_GLOBAL;
          }
        case 232: break;
        case 63: 
          { return PHPTokenId.PHP_EXIT;
          }
        case 233: break;
        case 34: 
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 234: break;
        case 8: 
          { return  PHPTokenId.WHITESPACE;
          }
        case 235: break;
        case 78: 
          { return PHPTokenId.PHP_BREAK;
          }
        case 236: break;
        case 132: 
          { return PHPTokenId.PHPDOC_PACKAGE;
          }
        case 237: break;
        case 47: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_HEREDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 238: break;
        case 133: 
          { return PHPTokenId.PHPDOC_LICENSE;
          }
        case 239: break;
        case 137: 
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 240: break;
        case 118: 
          { return PHPTokenId.PHPDOC_ACCESS;
          }
        case 241: break;
        case 86: 
          { return PHPTokenId.PHP_PRINT;
          }
        case 242: break;
        case 24: 
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 243: break;
        case 81: 
          { return PHPTokenId.PHP_CONST;
          }
        case 244: break;
        case 59: 
          { return PHPTokenId.PHP_VAR;
          }
        case 245: break;
        case 87: 
          { return PHPTokenId.PHP_THROW;
          }
        case 246: break;
        case 103: 
          { return PHPTokenId.PHP_PARENT;
          }
        case 247: break;
        case 102: 
          { return PHPTokenId.PHP_SWITCH;
          }
        case 248: break;
        case 92: 
          { return PHPTokenId.PHP_CASTING;
          }
        case 249: break;
        case 28: 
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 250: break;
        case 19: 
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 251: break;
        case 55: 
          { return PHPTokenId.PHP_DIE;
          }
        case 252: break;
        case 9: 
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 253: break;
        case 138: 
          { return PHPTokenId.PHP__CLASS__;
          }
        case 254: break;
        case 151: 
          { return PHPTokenId.PHPDOC_COPYRIGHT;
          }
        case 255: break;
        case 4: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 256: break;
        case 84: 
          { return PHPTokenId.PHP_CLASS;
          }
        case 257: break;
        case 140: 
          { return PHPTokenId.PHPDOC_CATEGORY;
          }
        case 258: break;
        case 136: 
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 259: break;
        case 30: 
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 260: break;
        case 88: 
          { return PHPTokenId.PHP_UNSET;
          }
        case 261: break;
        case 12: 
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 262: break;
        case 20: 
          { yypushback(1);
    popState();
          }
        case 263: break;
        case 104: 
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 264: break;
        case 155: 
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 265: break;
        case 145: 
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 266: break;
        case 2: 
          { int len = yylength();
        if (len > 1 && (yycharat(len-1) == '*')) {
            yypushback(1); // go back to mark end of comment in the next token
        }
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 267: break;
        case 134: 
          { return PHPTokenId.PHPDOC_VERSION;
          }
        case 268: break;
        case 66: 
          { return PHPTokenId.PHP_EVAL;
          }
        case 269: break;
        case 120: 
          { return PHPTokenId.PHPDOC_STATIC;
          }
        case 270: break;
        case 38: 
          { //popState();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 271: break;
        case 74: 
          { return PHPTokenId.PHPDOC_VAR;
          }
        case 272: break;
        case 107: 
          { return PHPTokenId.PHPDOC_PARAM;
          }
        case 273: break;
        case 22: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 274: break;
        case 35: 
          { if (asp_tags) {
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 275: break;
        case 126: 
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 276: break;
        case 10: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 277: break;
        case 64: 
          { return PHPTokenId.PHP_ECHO;
          }
        case 278: break;
        case 150: 
          { return PHPTokenId.PHPDOC_STATICVAR;
          }
        case 279: break;
        case 90: 
          { return PHPTokenId.PHP_FINAL;
          }
        case 280: break;
        case 148: 
          { return PHPTokenId.PHP__METHOD__;
          }
        case 281: break;
        case 7: 
          { return  PHPTokenId.PHP_STRING;
          }
        case 282: break;
        case 127: 
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 283: break;
        case 124: 
          { return PHPTokenId.PHPDOC_METHOD;
          }
        case 284: break;
        case 147: 
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 285: break;
        case 141: 
          { return PHPTokenId.PHPDOC_INTERNAL;
          }
        case 286: break;
        case 56: 
          { return PHPTokenId.PHP_TRY;
          }
        case 287: break;
        case 80: 
          { return PHPTokenId.PHP_ARRAY;
          }
        case 288: break;
        case 100: 
          { return PHPTokenId.PHP_RETURN;
          }
        case 289: break;
        case 6: 
          { return PHPTokenId.PHP_TOKEN;
          }
        case 290: break;
        case 1: 
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 291: break;
        case 82: 
          { return PHPTokenId.PHP_CATCH;
          }
        case 292: break;
        case 94: 
          { return PHPTokenId.PHPDOC_DESC;
          }
        case 293: break;
        case 61: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 294: break;
        case 75: 
          { yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 295: break;
        case 40: 
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 296: break;
        case 62: 
          { //<ST_PHP_COMMENT>((.|[\r\n])*\*[/])?? {
//<ST_PHP_COMMENT>([^*]|[\r\n]|(\*([^/]|[\r\n])))*\*[/] {
//<ST_PHP_COMMENT> ([/][*][.]*?[*][/])|([/][*][.]*) {
//<ST_PHP_COMMENT>[^*]+ {
    int len = yylength();
    
    if (len > 1 && (yycharat(len-2) == '*') && (yycharat(len-1) == '/')) {
        yypushback(2);
    }
    return PHPTokenId.PHP_COMMENT;
          }
        case 297: break;
        case 146: 
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 298: break;
        case 153: 
          { return PHPTokenId.PHPDOC_SUBPACKAGE;
          }
        case 299: break;
        case 79: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 300: break;
        case 45: 
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 301: break;
        case 98: 
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 302: break;
        case 58: 
          { return PHPTokenId.PHP_FOR;
          }
        case 303: break;
        case 116: 
          { return PHPTokenId.PHP_FOREACH;
          }
        case 304: break;
        case 21: 
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 305: break;
        case 65: 
          { return PHPTokenId.PHP_ELSE;
          }
        case 306: break;
        case 13: 
          { if (!stack.isEmpty()) {
        popState();
    }
    return  PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 307: break;
        case 158: 
          { return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 308: break;
        case 97: 
          { return PHPTokenId.PHPDOC_USES;
          }
        case 309: break;
        case 68: 
          { return PHPTokenId.PHP_SELF;
          }
        case 310: break;
        case 42: 
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 311: break;
        case 37: 
          { return PHPTokenId.PHP_DO;
          }
        case 312: break;
        case 149: 
          { return PHPTokenId.PHPDOC_EXCEPTION;
          }
        case 313: break;
        case 125: 
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 314: break;
        case 99: 
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 315: break;
        case 70: 
          { return PHPTokenId.PHP_TRUE;
          }
        case 316: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
