/* The following code was generated by JFlex 1.4.1 on 3/5/08 12:57 AM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.modules.php.editor.PHPVersion;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/5/08 12:57 AM from the specification file
 * <tt>/space/mercurial/trunk/main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer implements PHPScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 12;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 10;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_DOC_COMMENT = 11;
  public static final int ST_PHP_START_HEREDOC = 6;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 9;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 8;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 13;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\15\2\0\1\11\22\0\1\12\1\26\1\17\1\76"+
    "\1\16\1\32\1\33\1\56\1\66\1\67\1\30\1\25\1\13\1\4"+
    "\1\2\1\31\1\5\11\1\1\64\1\14\1\27\1\23\1\24\1\44"+
    "\1\13\1\40\1\7\1\46\1\42\1\3\1\57\1\53\1\55\1\47"+
    "\1\70\1\62\1\52\1\63\1\41\1\36\1\50\1\72\1\37\1\45"+
    "\1\51\1\54\1\65\1\61\1\6\1\60\1\10\1\74\1\20\1\75"+
    "\1\35\1\71\1\21\1\40\1\7\1\46\1\42\1\3\1\57\1\53"+
    "\1\55\1\47\1\70\1\62\1\52\1\63\1\41\1\36\1\50\1\72"+
    "\1\37\1\43\1\51\1\54\1\65\1\61\1\6\1\60\1\10\1\22"+
    "\1\34\1\73\1\13\201\10\uff00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\4\0\1\2\1\3\2\0\2\4\1\5"+
    "\1\6\1\7\1\10\1\7\1\6\3\10\1\11\1\7"+
    "\1\12\1\7\1\13\1\14\1\15\12\7\6\10\1\7"+
    "\7\10\1\5\2\10\1\7\1\10\1\7\1\10\1\16"+
    "\1\17\1\1\1\20\1\21\2\20\1\1\3\20\3\22"+
    "\2\1\3\5\2\23\1\24\1\25\1\26\1\25\1\6"+
    "\1\27\1\6\1\30\1\27\1\31\1\2\2\5\1\3"+
    "\2\0\3\32\3\33\1\34\1\35\1\0\1\36\1\4"+
    "\1\37\1\6\1\0\1\40\6\10\1\41\2\0\1\10"+
    "\1\0\1\42\2\0\1\20\2\0\2\40\1\43\1\44"+
    "\1\40\4\10\1\45\2\10\1\46\4\10\1\47\5\10"+
    "\1\50\12\10\1\0\6\10\1\51\1\10\12\0\1\10"+
    "\3\0\1\52\2\53\1\54\1\55\1\53\3\0\3\56"+
    "\1\57\3\0\1\1\2\53\1\0\1\60\1\0\1\61"+
    "\1\52\1\0\1\2\1\62\1\0\1\3\1\63\1\64"+
    "\1\65\1\66\3\0\7\10\1\6\1\0\1\10\2\0"+
    "\4\10\1\67\2\10\1\70\22\10\1\71\4\10\1\72"+
    "\1\73\5\10\1\74\12\0\5\10\1\75\1\76\1\1"+
    "\3\0\1\77\6\10\1\100\1\101\1\10\1\102\1\10"+
    "\1\0\1\103\6\10\1\104\4\10\1\105\15\10\1\106"+
    "\1\10\1\107\3\10\1\110\4\10\12\0\6\10\1\0"+
    "\1\111\3\10\1\112\3\10\1\113\1\114\2\115\3\10"+
    "\1\116\4\10\1\117\1\10\1\120\1\121\1\122\3\10"+
    "\1\123\2\10\1\124\3\10\1\125\1\10\1\126\1\10"+
    "\1\127\1\130\1\10\1\131\10\0\1\132\1\0\6\10"+
    "\1\0\3\10\1\133\1\10\1\134\1\135\4\10\1\136"+
    "\1\137\7\10\1\140\1\141\1\142\2\10\4\0\6\10"+
    "\1\0\1\143\4\10\1\144\1\10\1\145\1\146\2\10"+
    "\1\147\3\10\1\150\1\151\1\10\2\0\6\10\1\0"+
    "\3\10\1\152\1\10\1\153\1\154\5\10\1\155\1\10"+
    "\1\156\1\10\1\157\2\10\1\0\1\10\1\160\4\10"+
    "\1\161\1\10\1\162\1\163\3\10\1\0\1\164\1\165"+
    "\1\10\1\166\1\10\1\167\2\10\1\170\1\0\4\10"+
    "\1\0\1\171\1\172\1\10\1\173\1\0\1\10\1\0"+
    "\1\10\1\0\1\174\14\0\1\37\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9"+
    "\0\u05e8\0\u0627\0\u03f0\0\u03f0\0\u0666\0\u06a5\0\u03f0\0\u03f0"+
    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95"+
    "\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u03f0"+
    "\0\u03f0\0\u0e85\0\u0ec4\0\u03f0\0\u0f03\0\u0f42\0\u0f81\0\u0fc0"+
    "\0\u0fff\0\u103e\0\u03f0\0\u107d\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u03f0\0\u1236\0\u03f0\0\u03f0\0\u1275\0\u12b4"+
    "\0\u12f3\0\u03f0\0\u1332\0\u03f0\0\u1371\0\u03f0\0\u13b0\0\u13ef"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u03f0\0\u03f0"+
    "\0\u15a8\0\u0ad4\0\u03f0\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3"+
    "\0\u1722\0\u1761\0\u03f0\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u03f0\0\u191a\0\u1959\0\u1998\0\u0ccc\0\u19d7\0\u06a5"+
    "\0\u1a16\0\u03f0\0\u1a55\0\u1a94\0\u081f\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\u05e8\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u05e8\0\u1c8c\0\u1ccb"+
    "\0\u05e8\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u05e8\0\u1f80\0\u1fbf\0\u1ffe\0\u203d"+
    "\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235"+
    "\0\u2274\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u03f0\0\u23af\0\u23ee"+
    "\0\u0e07\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7"+
    "\0\u25e6\0\u2625\0\u2664\0\u0f03\0\u26a3\0\u26e2\0\u2664\0\u03f0"+
    "\0\u03f0\0\u03f0\0\u26a3\0\u2721\0\u0fff\0\u2760\0\u2721\0\u03f0"+
    "\0\u2760\0\u03f0\0\u279f\0\u11b8\0\u27de\0\u281d\0\u279f\0\u27de"+
    "\0\u1236\0\u03f0\0\u285c\0\u03f0\0\u289b\0\u28da\0\u2919\0\u03f0"+
    "\0\u2958\0\u2997\0\u03f0\0\u03f0\0\u29d6\0\u03f0\0\u2a15\0\u2a54"+
    "\0\u12f3\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d"+
    "\0\u191a\0\u2c4c\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6"+
    "\0\u2e05\0\u05e8\0\u2e44\0\u2e83\0\u05e8\0\u2ec2\0\u2f01\0\u2f40"+
    "\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138"+
    "\0\u3177\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u05e8"+
    "\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u05e8\0\u342c\0\u346b\0\u34aa"+
    "\0\u34e9\0\u3528\0\u3567\0\u05e8\0\u35a6\0\u35e5\0\u3624\0\u3663"+
    "\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b"+
    "\0\u389a\0\u38d9\0\u3918\0\u03f0\0\u03f0\0\u3957\0\u142e\0\u3996"+
    "\0\u39d5\0\u05e8\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f"+
    "\0\u05e8\0\u3b8e\0\u3bcd\0\u05e8\0\u3c0c\0\u3c4b\0\u2d09\0\u3c8a"+
    "\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u05e8\0\u3e04\0\u3e43"+
    "\0\u3e82\0\u3ec1\0\u05e8\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd\0\u3ffc"+
    "\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4"+
    "\0\u05e8\0\u4233\0\u05e8\0\u4272\0\u42b1\0\u42f0\0\u05e8\0\u432f"+
    "\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527"+
    "\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f"+
    "\0\u475e\0\u479d\0\u47dc\0\u481b\0\u03f0\0\u485a\0\u4899\0\u48d8"+
    "\0\u05e8\0\u4917\0\u4956\0\u4995\0\u05e8\0\u05e8\0\u49d4\0\u03f0"+
    "\0\u4a13\0\u4a52\0\u4a91\0\u05e8\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d"+
    "\0\u05e8\0\u4bcc\0\u05e8\0\u05e8\0\u05e8\0\u4c0b\0\u4c4a\0\u4c89"+
    "\0\u05e8\0\u4cc8\0\u4d07\0\u05e8\0\u4d46\0\u4d85\0\u4dc4\0\u05e8"+
    "\0\u4e03\0\u05e8\0\u4e42\0\u05e8\0\u05e8\0\u4e81\0\u05e8\0\u4ec0"+
    "\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u5079\0\u03f0"+
    "\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232\0\u5271"+
    "\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u05e8\0\u05e8\0\u53eb"+
    "\0\u542a\0\u5469\0\u54a8\0\u05e8\0\u05e8\0\u54e7\0\u5526\0\u5565"+
    "\0\u55a4\0\u55e3\0\u5622\0\u5661\0\u05e8\0\u05e8\0\u05e8\0\u56a0"+
    "\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898"+
    "\0\u58d7\0\u5916\0\u5955\0\u5994\0\u05e8\0\u59d3\0\u5a12\0\u5a51"+
    "\0\u5a90\0\u5acf\0\u5b0e\0\u05e8\0\u05e8\0\u5b4d\0\u5b8c\0\u5bcb"+
    "\0\u5c0a\0\u5c49\0\u5c88\0\u05e8\0\u05e8\0\u5cc7\0\u5d06\0\u5d45"+
    "\0\u5d84\0\u5dc3\0\u5e02\0\u5e41\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d"+
    "\0\u5f7c\0\u5fbb\0\u05e8\0\u5ffa\0\u05e8\0\u05e8\0\u6039\0\u6078"+
    "\0\u60b7\0\u60f6\0\u6135\0\u05e8\0\u6174\0\u05e8\0\u61b3\0\u05e8"+
    "\0\u61f2\0\u6231\0\u6270\0\u62af\0\u05e8\0\u62ee\0\u632d\0\u636c"+
    "\0\u63ab\0\u05e8\0\u63ea\0\u05e8\0\u05e8\0\u6429\0\u6468\0\u64a7"+
    "\0\u64e6\0\u05e8\0\u05e8\0\u6525\0\u05e8\0\u6564\0\u05e8\0\u65a3"+
    "\0\u65e2\0\u05e8\0\u6621\0\u6660\0\u669f\0\u66de\0\u671d\0\u675c"+
    "\0\u05e8\0\u05e8\0\u679b\0\u05e8\0\u67da\0\u6819\0\u6858\0\u6897"+
    "\0\u68d6\0\u05e8\0\u6915\0\u6954\0\u6993\0\u69d2\0\u6a11\0\u6a50"+
    "\0\u6a8f\0\u6ace\0\u6b0d\0\u6b4c\0\u6b8b\0\u6bca\0\u03f0\0\u6c09";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\27\17\1\20\47\17\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\2\32\1\33\1\34\1\32"+
    "\1\35\1\36\1\21\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\46"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\60"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\31"+
    "\1\71\1\72\1\31\1\73\2\31\1\74\1\75\1\76"+
    "\1\33\1\31\1\77\1\31\1\100\2\33\1\101\16\102"+
    "\1\103\1\104\1\105\1\102\1\106\54\102\16\107\1\110"+
    "\1\107\1\111\1\104\1\112\54\107\4\113\1\114\15\113"+
    "\1\115\54\113\11\116\1\117\3\116\1\117\1\120\1\116"+
    "\1\121\1\116\1\122\54\116\3\123\1\124\2\123\3\124"+
    "\25\123\6\124\1\123\11\124\1\123\5\124\1\123\1\124"+
    "\2\123\3\124\4\123\77\125\3\126\1\127\1\130\1\126"+
    "\3\127\25\126\6\127\1\126\11\127\1\126\5\127\1\126"+
    "\1\127\2\126\3\127\4\126\1\21\1\131\1\132\1\31"+
    "\1\132\1\133\3\31\2\134\2\132\1\134\1\135\1\132"+
    "\1\134\15\132\6\31\1\132\11\31\1\134\5\31\1\132"+
    "\1\31\2\132\3\31\1\132\1\33\1\136\1\134\30\137"+
    "\1\140\1\141\45\137\30\142\1\143\1\144\45\142\11\145"+
    "\1\146\3\145\1\147\6\145\1\150\5\145\1\151\11\145"+
    "\1\152\32\145\11\153\2\154\2\153\1\154\61\153\27\17"+
    "\1\155\76\17\1\0\2\17\1\156\10\17\1\157\1\160"+
    "\32\17\100\0\1\22\1\161\1\162\1\0\1\22\72\0"+
    "\1\161\3\0\1\161\15\0\1\163\54\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\164\2\31\25\0\3\31\1\165"+
    "\2\31\1\0\1\31\1\166\3\31\1\167\3\31\1\0"+
    "\4\31\1\170\1\0\1\171\2\0\3\31\10\0\1\163"+
    "\16\0\1\163\1\172\53\0\1\22\1\161\1\162\1\0"+
    "\1\22\1\173\71\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\53\5\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\6\0\1\36\7\0\1\174\6\0\1\31\1\175"+
    "\4\31\1\0\11\31\1\176\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\15\0\2\32\2\0\1\32\64\0\1\177\2\0"+
    "\3\177\25\0\6\177\1\0\11\177\1\0\5\177\1\0"+
    "\1\177\2\0\3\177\4\0\16\200\1\201\1\202\1\203"+
    "\1\200\1\204\54\200\23\0\1\205\1\163\75\0\1\163"+
    "\1\205\75\0\1\163\1\0\1\163\74\0\1\205\76\0"+
    "\2\163\2\0\1\206\72\0\1\163\76\0\1\163\4\0"+
    "\1\207\1\101\70\0\1\163\1\210\75\0\1\163\7\0"+
    "\1\163\66\0\1\163\10\0\1\163\43\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\31\1\211\4\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\212\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\213\1\31\25\0"+
    "\1\31\1\214\1\31\1\215\1\31\1\216\1\0\1\216"+
    "\10\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\217\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\220\1\0\4\31\25\0\1\221\5\31"+
    "\1\0\2\31\1\222\6\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\223\1\0\4\31"+
    "\25\0\6\31\1\0\4\31\1\224\4\31\1\0\2\31"+
    "\1\225\2\31\1\0\1\31\2\0\3\31\30\0\1\226"+
    "\53\0\1\31\1\0\1\31\1\0\4\31\25\0\1\227"+
    "\1\31\1\230\3\31\1\0\5\31\1\231\3\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\232\1\31\1\233"+
    "\1\0\1\233\10\31\1\0\1\234\3\31\1\235\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\31\1\236\1\237\3\31\1\0\7\31"+
    "\1\240\1\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\31"+
    "\1\241\4\31\1\0\10\31\1\242\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\2\31\1\243\6\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\5\31\1\244"+
    "\3\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\3\31\1\245"+
    "\1\31\1\246\1\0\1\246\10\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\4\0\20\176\1\247\35\176\1\202"+
    "\20\176\1\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\250\1\251\1\252\3\31\1\0\2\31\1\253\4\31"+
    "\1\254\1\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\10\31\1\255\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\70\0\1\256\13\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\257\3\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\13\0\1\260\2\0"+
    "\1\261\23\0\1\262\1\263\1\264\1\0\1\265\1\266"+
    "\1\0\1\266\1\0\1\267\4\0\1\270\2\0\1\271"+
    "\20\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\1\31"+
    "\1\272\1\31\4\0\16\102\1\273\1\0\1\274\1\102"+
    "\1\275\57\102\1\276\2\102\3\276\5\102\1\277\1\300"+
    "\1\274\1\102\1\301\13\102\6\276\1\102\11\276\1\102"+
    "\5\276\1\102\1\276\2\102\3\276\121\102\1\302\1\300"+
    "\1\274\1\102\1\303\54\102\16\107\1\304\1\107\1\305"+
    "\1\0\1\306\57\107\1\276\2\107\3\276\5\107\1\307"+
    "\1\107\1\305\1\310\1\301\13\107\6\276\1\107\11\276"+
    "\1\107\5\276\1\107\1\276\2\107\3\276\121\107\1\302"+
    "\1\107\1\305\1\310\1\311\54\107\24\0\1\312\70\0"+
    "\1\302\60\0\11\116\1\117\3\116\1\117\1\313\1\116"+
    "\1\314\1\116\1\315\57\116\1\316\2\116\3\316\1\117"+
    "\3\116\1\117\1\313\1\116\1\314\1\116\1\315\13\116"+
    "\6\316\1\116\11\316\1\116\5\316\1\116\1\316\2\116"+
    "\3\316\7\116\1\276\2\116\3\276\1\117\3\116\1\117"+
    "\1\317\1\116\1\314\1\116\1\301\13\116\6\276\1\116"+
    "\11\276\1\116\5\276\1\116\1\276\2\116\3\276\15\116"+
    "\1\117\3\116\1\117\72\116\1\117\3\116\1\117\1\302"+
    "\1\116\1\314\1\116\1\320\54\116\1\0\1\321\1\0"+
    "\1\321\1\0\4\321\1\322\2\0\1\323\1\322\20\0"+
    "\6\321\1\0\11\321\1\0\5\321\1\0\1\321\2\0"+
    "\3\321\5\0\1\127\1\0\1\127\1\0\4\127\25\0"+
    "\6\127\1\0\11\127\1\0\5\127\1\0\1\127\2\0"+
    "\3\127\30\0\1\324\53\0\1\131\3\0\1\131\72\0"+
    "\1\131\3\0\1\131\1\173\73\0\1\325\2\0\3\325"+
    "\25\0\6\325\1\0\11\325\1\0\5\325\1\0\1\325"+
    "\2\0\3\325\4\0\30\137\1\326\46\137\31\327\1\330"+
    "\45\327\31\0\1\327\45\0\30\142\1\331\46\142\31\332"+
    "\1\333\45\332\31\0\1\332\45\0\11\145\1\147\3\145"+
    "\1\147\6\145\1\147\5\145\1\147\11\145\1\147\32\145"+
    "\15\0\1\334\105\0\1\335\63\0\2\154\2\0\1\154"+
    "\61\0\27\17\1\0\2\17\1\0\10\17\2\0\32\17"+
    "\23\0\1\336\121\0\1\337\53\0\1\336\24\0\1\340"+
    "\27\0\1\161\1\0\1\162\1\0\1\161\72\0\1\131"+
    "\2\0\1\341\1\131\17\0\1\341\52\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\2\31\1\342"+
    "\1\31\1\343\4\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\4\31\1\344\1\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\10\31\1\345\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\5\31\1\346\1\0\1\346\10\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\3\31"+
    "\1\347\5\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\350\3\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\351\1\0\1\351\1\0\1\351"+
    "\1\0\1\351\30\0\1\351\1\0\1\351\3\0\1\351"+
    "\10\0\1\351\46\0\1\352\50\0\1\31\1\0\1\353"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\177\1\0\1\177"+
    "\1\0\4\177\25\0\6\177\1\0\11\177\1\0\5\177"+
    "\1\0\1\177\2\0\3\177\4\0\3\200\1\0\2\200"+
    "\3\0\5\200\1\201\1\202\1\203\1\200\1\0\13\200"+
    "\6\0\1\200\11\0\1\200\5\0\1\200\1\0\2\200"+
    "\3\0\121\200\1\0\1\202\1\203\1\200\1\204\54\200"+
    "\23\0\1\163\3\0\1\354\77\0\1\355\57\0\2\210"+
    "\2\0\1\210\62\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\4\31\1\356\4\31\1\0\5\31"+
    "\1\0\1\31\2\0\2\31\1\357\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\5\31\1\360\1\0\1\360"+
    "\10\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\361"+
    "\4\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\4\31\1\211\1\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\2\31\1\362"+
    "\2\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\1\31\1\363"+
    "\7\31\1\0\1\364\4\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\365\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\5\31\1\366\3\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\2\31\1\367\3\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\2\31\1\370\6\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\15\0\2\226"+
    "\2\0\1\226\62\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\3\31\1\371\2\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\5\31\1\372\1\0\1\372\3\31"+
    "\1\373\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\374"+
    "\1\31\1\375\3\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\376\1\0\1\376\1\377\2\31"+
    "\1\u0100\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\5\31"+
    "\1\u0101\1\0\1\u0101\10\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\3\31\1\u0102\5\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\u0103\5\31\1\0\2\31\1\u0104"+
    "\6\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u0105"+
    "\4\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\2\31\1\u0106"+
    "\1\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\7\31\1\u0107\1\31\1\0"+
    "\1\31\1\u0108\3\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\31\1\u0109"+
    "\4\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\5\31\1\u010a\1\0\1\u010a\10\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u010b\5\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\5\31\1\u010c\1\0\1\u010c\10\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\u010d\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\4\0\77\176"+
    "\1\0\1\31\1\0\1\31\1\0\4\31\25\0\1\31"+
    "\1\u010e\4\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\1\u010f\5\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\5\31\1\u0110\3\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u0111\2\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\3\31\1\u0112"+
    "\2\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\2\31\1\u0113\6\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\31\1\u0114\4\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\42\0\1\u0115\10\0"+
    "\1\u0116\36\0\1\u0117\72\0\1\u0118\132\0\1\u0119\75\0"+
    "\1\u011a\111\0\1\u011b\66\0\1\u011c\76\0\1\u011d\107\0"+
    "\1\u011e\25\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\1\31\1\u011f\3\31\1\u0120\2\31\1\u0121"+
    "\1\0\1\u0122\3\31\1\u0123\1\0\1\31\2\0\3\31"+
    "\4\0\3\102\1\0\2\102\3\0\5\102\1\277\1\300"+
    "\1\274\1\102\1\0\13\102\6\0\1\102\11\0\1\102"+
    "\5\0\1\102\1\0\2\102\3\0\22\102\1\0\1\300"+
    "\1\274\1\102\1\303\54\102\1\0\1\276\1\0\1\276"+
    "\1\0\4\276\25\0\6\276\1\0\11\276\1\0\5\276"+
    "\1\0\1\276\2\0\3\276\1\0\1\u0124\2\0\3\107"+
    "\1\0\2\107\3\0\5\107\1\307\1\107\1\305\1\310"+
    "\1\0\13\107\6\0\1\107\11\0\1\107\5\0\1\107"+
    "\1\0\2\107\3\0\22\107\1\0\1\107\1\305\1\310"+
    "\1\311\54\107\3\116\1\0\2\116\3\0\1\117\3\116"+
    "\1\117\1\317\1\116\1\314\1\116\1\0\13\116\6\0"+
    "\1\116\11\0\1\116\5\0\1\116\1\0\2\116\3\0"+
    "\15\116\1\117\3\116\1\117\1\0\1\116\1\314\1\116"+
    "\1\320\55\116\1\316\1\116\1\316\1\116\4\316\1\u0125"+
    "\2\116\1\u0126\1\u0125\1\313\1\116\1\314\1\116\1\315"+
    "\13\116\6\316\1\116\11\316\1\116\5\316\1\116\1\316"+
    "\2\116\3\316\4\116\11\0\1\322\3\0\1\322\62\0"+
    "\1\325\1\0\1\325\1\0\4\325\25\0\6\325\1\0"+
    "\11\325\1\0\5\325\1\0\1\325\2\0\3\325\4\0"+
    "\31\327\1\0\45\327\30\137\1\326\1\u0127\45\137\31\332"+
    "\1\0\45\332\30\142\1\331\1\144\45\142\11\0\2\335"+
    "\2\0\1\335\120\0\1\u0128\114\0\1\u0129\22\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u012a\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\u012b\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\u012c\1\u012d\1\0\1\u012d\1\31\1\u012e\6\31\1\0"+
    "\1\u012f\1\31\1\u0130\2\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\u0131"+
    "\5\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\u0132\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u0133\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\5\31\1\u0134\3\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\33\0\1\354\50\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\u0135"+
    "\3\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\7\0\1\u0136\2\0\3\u0136\1\0\1\354\23\0"+
    "\6\u0136\1\0\11\u0136\1\0\5\u0136\1\0\1\u0136\2\0"+
    "\3\u0136\15\0\2\u0137\2\0\1\u0137\62\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\7\31\1\u0138"+
    "\1\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\7\31\1\u0139\1\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u013a\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\u013b\3\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\5\31\1\u013c"+
    "\3\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\2\31\1\u013d"+
    "\3\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\1\u013e\4\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\4\31\1\u013f\4\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\4\31\1\u0140\4\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\5\31\1\u0141\1\0"+
    "\1\u0141\3\31\1\u0142\4\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\u0143\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\1\31\1\u0144\7\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u0145\2\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\5\31\1\u0146\1\0"+
    "\1\u0146\10\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\4\31\1\u0147\4\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\5\31\1\u0148\3\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\u0149"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\u014a"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\5\31\1\u014b\3\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u014c\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\3\31"+
    "\1\u014d\2\31\1\0\11\31\1\0\5\31\1\0\1\u014e"+
    "\2\0\3\31\5\0\1\31\1\0\1\u014f\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\5\31\1\u0150\3\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\u0151"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\u0152\5\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\4\31\1\u0153"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\2\31\1\u0154\1\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\u0155\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\u0156\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\4\31\1\u0157\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\5\31\1\u0158\1\0\1\u0158\10\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u0159\3\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\1\31"+
    "\1\u015a\7\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\5\31\1\u015b\3\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\42\0\1\u015c\101\0\1\u015d\125\0\1\u015e"+
    "\46\0\1\u015f\75\0\1\u0160\113\0\1\u0161\61\0\1\u0162"+
    "\110\0\1\u0163\70\0\1\u0164\1\0\1\u0164\67\0\1\u0165"+
    "\41\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\5\31\1\u0166\3\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\2\31\1\u0167\6\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u0168\3\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\2\31"+
    "\1\u0169\4\31\1\u016a\1\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\u016b\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\4\0\11\116\1\u0125\3\116\1\u0125\1\313"+
    "\1\116\1\314\1\116\1\315\54\116\47\0\1\u016c\77\0"+
    "\1\u016d\27\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\3\31\1\u016e\2\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\u016f\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\2\31\1\u0170"+
    "\2\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\1\u0171\4\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\u0172\5\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\10\31\1\u0173\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\2\31\1\u0174\6\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\1\31\1\u0175\3\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\3\31"+
    "\1\u0176\1\31\1\0\1\31\2\0\3\31\5\0\1\u0136"+
    "\1\0\1\u0136\1\0\4\u0136\1\u0177\3\0\1\u0178\20\0"+
    "\6\u0136\1\0\11\u0136\1\0\5\u0136\1\0\1\u0136\2\0"+
    "\3\u0136\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\31\1\u0179\4\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\2\31\1\u017a\6\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\31\1\u017b\4\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\1\31\1\u017c\3\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\2\31\1\u017d\3\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\7\31\1\u017e\1\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\2\31\1\u017f"+
    "\6\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\1\31\1\u0180\7\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u0181\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\2\31\1\u0182\6\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\10\31\1\u0183"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\u0184\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\5\31\1\u0185\1\0"+
    "\1\u0185\10\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\u0186\3\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\7\31\1\u0187\1\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\1\31\1\u0188\4\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u0189\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\u018a\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\u018b\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\4\31\1\u018c\4\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\2\31\1\u018d\3\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u018e\2\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\2\31"+
    "\1\u018f\6\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\2\31\1\u0190\2\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\2\31\1\u0191\3\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\4\31\1\u0192\4\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\2\31\1\u0193\3\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\u0194\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\5\31\1\u0195\3\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\4\31\1\u0196\4\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\u0197"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\56\0\1\u0198\64\0\1\u0199"+
    "\41\0\1\u019a\145\0\1\u019b\64\0\1\u019c\45\0\1\u019d"+
    "\136\0\1\u019e\32\0\1\u019f\6\0\1\u019b\54\0\1\u01a0"+
    "\12\0\1\u01a1\133\0\1\u01a1\37\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u01a2\3\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\3\31\1\u01a3\2\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\5\31\1\u01a4\3\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\5\31\1\u01a5\3\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u01a6\2\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u01a7\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\54\0\1\u01a8\27\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\4\31\1\u01a9\1\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\1\31\1\u01aa\7\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\2\31"+
    "\1\u01ab\6\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\31"+
    "\1\u01ac\4\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\2\31\1\u01ad\6\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\1\u01ae"+
    "\4\31\1\0\1\31\2\0\3\31\21\0\1\u0178\62\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\3\31\1\u01af"+
    "\2\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\31\1\u01b0\4\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\u01b1\3\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\31\1\u01b2\4\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\5\31\1\u01b3\3\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\1\31\1\u01b4\7\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\10\31\1\u01b5\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\3\31\1\u01b6\2\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\3\31\1\u01b7\2\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\u01b8\1\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\1\u01b9\4\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\4\31\1\u01ba"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\1\31\1\u01bb\7\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\4\31"+
    "\1\u01bc\4\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\4\31\1\u01bd\4\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\1\31\1\u01be\7\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\5\31\1\u01bf\3\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\1\31"+
    "\1\u01c0\7\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\2\31\1\u01c1\6\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\7\0\1\u01c2\6\0\1\u019b\54\0\1\u01a0"+
    "\46\0\1\u019c\105\0\1\u01a1\42\0\1\u019b\54\0\1\u01a0"+
    "\67\0\1\u019b\70\0\1\u01c3\65\0\1\u01c4\110\0\1\u01c5"+
    "\74\0\1\u019b\26\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\5\31\1\u01c6\1\0\1\u01c6\10\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\u01c7"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\4\31\1\u01c8\4\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\u01c9\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\1\31"+
    "\1\u01ca\7\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\10\31\1\u01cb\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\55\0\1\u01cc\26\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\5\31\1\u01cd\1\0\1\u01cd\10\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\5\31\1\u01ce"+
    "\3\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\4\31\1\u01cf\4\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\u01d0\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\5\31\1\u01d1\3\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\u01d2\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\1\31\1\u01d3\7\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\u01d4\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\4\31\1\u01d5"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\7\31\1\u01d6\1\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\1\31\1\u01d7\7\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\u01d8\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\2\31\1\u01d9\3\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\u01da\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\4\31\1\u01db"+
    "\4\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\u01dc\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\10\31\1\u01dd\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\1\u01de"+
    "\5\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\44\0\1\u01df\41\0\1\u019b\146\0\1\u019b\26\0"+
    "\1\u01e0\74\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\5\31\1\u01e1\1\0\1\u01e1\10\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\1\31\1\u01e2\1\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\1\31\1\u01e3\1\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\1\31\1\u01e4"+
    "\1\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\4\31\1\u01e5\4\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\1\u01e6\5\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\15\0\2\u01e7\2\0\1\u01e7"+
    "\62\0\1\31\1\0\1\31\1\0\4\31\25\0\2\31"+
    "\1\u01e8\3\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\1\31\1\u01e9\7\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\2\31\1\u01ea\3\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\u01eb\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\1\31\1\u01ec\1\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\4\31\1\u01ed\4\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\u01ee\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\u01ef\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\1\31\1\u01f0\1\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\1\31\1\u01f1\7\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\3\31\1\u01f2\2\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\u01f3\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\3\31"+
    "\1\u01f4\2\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\45\0\1\u019b\74\0\1\u019b\40\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\1\31\1\u01f5\1\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\1\31"+
    "\1\u01f6\1\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\1\31\1\u01f7\7\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\1\31\1\u01f8\1\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\6\31\1\0\2\31"+
    "\1\u01f9\6\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\4\31"+
    "\1\u01fa\1\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\15\0\2\u01e7\2\0\1\u01e7\34\0\1\u01fb"+
    "\25\0\1\31\1\0\1\31\1\0\4\31\25\0\1\31"+
    "\1\u01fc\4\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\6\31\1\0\10\31\1\u01fd\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\5\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\1\31\1\u01fe\7\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\1\u01ff\5\31\1\0\11\31"+
    "\1\0\5\31\1\0\1\31\2\0\3\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\u0200\5\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\u0201\5\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\u0202\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\4\31\1\u0203\4\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\4\31\1\u0204\1\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\1\31\1\u0205\1\31\5\0\1\31"+
    "\1\0\1\31\1\0\4\31\25\0\1\u0206\5\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\1\u0207\5\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\6\31"+
    "\1\0\11\31\1\0\5\31\1\0\1\31\2\0\1\31"+
    "\1\u0208\1\31\44\0\1\u0209\37\0\1\31\1\0\1\u020a"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\10\31\1\u020b\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u020c\2\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\1\u020d\4\31\1\0\1\31\2\0\3\31"+
    "\5\0\1\31\1\0\1\31\1\0\4\31\25\0\3\31"+
    "\1\u020e\2\31\1\0\11\31\1\0\5\31\1\0\1\31"+
    "\2\0\3\31\5\0\1\31\1\0\1\31\1\0\4\31"+
    "\25\0\5\31\1\u020f\1\0\1\u020f\10\31\1\0\5\31"+
    "\1\0\1\31\2\0\3\31\5\0\1\31\1\0\1\31"+
    "\1\0\4\31\25\0\6\31\1\0\11\31\1\0\4\31"+
    "\1\u0210\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\3\31\1\u0211\2\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\1\31\1\u0212"+
    "\1\31\45\0\1\u0213\36\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\1\31\1\u0214\7\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\1\31\1\u0215"+
    "\7\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\3\31\1\u0216\5\31\1\0\5\31\1\0\1\31\2\0"+
    "\3\31\5\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\6\31\1\0\11\31\1\0\5\31\1\0\1\31\2\0"+
    "\1\31\1\u0217\1\31\57\0\1\u0218\24\0\1\31\1\0"+
    "\1\u0219\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\u021a\1\0\4\31\25\0\6\31\1\0\11\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\5\0\1\31\1\0"+
    "\1\31\1\0\4\31\25\0\6\31\1\0\2\31\1\u021b"+
    "\6\31\1\0\5\31\1\0\1\31\2\0\3\31\5\0"+
    "\1\31\1\0\1\31\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\1\31\1\u021c"+
    "\1\31\60\0\1\u021d\23\0\1\31\1\0\1\31\1\0"+
    "\4\31\25\0\6\31\1\0\5\31\1\u021e\3\31\1\0"+
    "\5\31\1\0\1\31\2\0\3\31\44\0\1\u021f\37\0"+
    "\1\31\1\0\1\u0220\1\0\4\31\25\0\6\31\1\0"+
    "\11\31\1\0\5\31\1\0\1\31\2\0\3\31\57\0"+
    "\1\u0221\24\0\1\31\1\0\1\31\1\0\4\31\25\0"+
    "\1\31\1\u0222\4\31\1\0\11\31\1\0\5\31\1\0"+
    "\1\31\2\0\3\31\7\0\1\u0223\104\0\2\u0223\2\0"+
    "\1\u0223\5\0\1\u0224\64\0\2\u0224\2\0\1\u0224\1\0"+
    "\1\u0225\30\0\1\u0226\5\0\1\u0227\70\0\1\u0228\103\0"+
    "\1\u0229\71\0\1\u022a\103\0\1\u022b\71\0\1\u022c\103\0"+
    "\1\u022d\71\0\1\u022e\37\0\2\u022c\2\0\1\u022c\6\0"+
    "\1\u022f\122\0\1\u0230\45\0\1\u022c\135\0\1\u022c\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\4\0\2\1\2\0\2\1\1\11\11\1"+
    "\2\11\2\1\2\11\37\1\2\11\2\1\1\11\6\1"+
    "\1\11\7\1\1\11\1\1\2\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\4\1\2\0\2\1\2\11\2\1"+
    "\1\11\1\1\1\0\4\1\1\0\1\11\6\1\1\11"+
    "\2\0\1\1\1\0\1\1\2\0\1\11\2\0\42\1"+
    "\1\0\6\1\1\11\1\1\12\0\1\1\3\0\2\1"+
    "\3\11\1\1\3\0\1\1\1\11\1\1\1\11\3\0"+
    "\3\1\1\0\1\11\1\0\1\11\1\1\1\0\1\1"+
    "\1\11\1\0\1\1\2\11\1\1\1\11\3\0\10\1"+
    "\1\0\1\1\2\0\47\1\12\0\5\1\2\11\1\1"+
    "\3\0\14\1\1\0\45\1\12\0\6\1\1\0\1\11"+
    "\12\1\1\11\37\1\10\0\1\11\1\0\6\1\1\0"+
    "\31\1\4\0\6\1\1\0\22\1\2\0\6\1\1\0"+
    "\23\1\1\0\15\1\1\0\11\1\1\0\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\14\0"+
    "\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed = true;

    
    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }
    */
        public PHP5ColoringLexer(java.io.Reader  reader, boolean asp_tags) {
            this(reader);
            this.asp_tags = asp_tags;
        }

        public void reset(java.io.Reader  reader) {
            yyreset(reader);
        }

        public class LexerState implements PHPScannerState{
            final int saveState;
            final StateStack saveStack;
            LexerState () {
                this.saveState = yystate(); 
                this.saveStack = stack.createClone();
            }
        }
        
        public PHPScannerState getState() {
            return new LexerState();
        }
        
        public void setState(PHPScannerState state) {
            LexerState lstate = (LexerState)state;
            this.stack.copyFrom(lstate.saveStack);
            yybegin(lstate.saveState);
        }

        public PHPVersion getPHPVersion () {
            return PHPVersion.PHP_5;
        }

        public int getTokenLength() {
            return yylength();
        }

    public int getOffset() {
        return yychar;
    }

    protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}

    
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 125: break;
        case 51: 
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 126: break;
        case 11: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 127: break;
        case 89: 
          { return PHPTokenId.PHP_WHILE;
          }
        case 128: break;
        case 48: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_HEREDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 129: break;
        case 27: 
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 130: break;
        case 14: 
          { if (!stack.isEmpty()) {
        popState();
    }
    return  PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 131: break;
        case 79: 
          { return PHPTokenId.PHP_CONST;
          }
        case 132: break;
        case 100: 
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 133: break;
        case 7: 
          { return PHPTokenId.PHP_TOKEN;
          }
        case 134: break;
        case 24: 
          { yypushback(1);
	popState();
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 135: break;
        case 2: 
          { int len = yylength();
    
    // if there are two '*' as last two characters, it means that the last
    // '*' belongs to "*/"
    if (len > 1 && (yycharat(len-2) == '*') && (yycharat(len-1) == '*')) {
        yypushback(1);
    }
    return PHPTokenId.PHP_COMMENT;
          }
        case 136: break;
        case 93: 
          { return PHPTokenId.PHP_RETURN;
          }
        case 137: break;
        case 90: 
          { return PHPTokenId.PHP_CASTING;
          }
        case 138: break;
        case 116: 
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 139: break;
        case 114: 
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 140: break;
        case 66: 
          { return PHPTokenId.PHP_EVAL;
          }
        case 141: break;
        case 78: 
          { return PHPTokenId.PHP_ARRAY;
          }
        case 142: break;
        case 38: 
          { return PHPTokenId.PHP_DO;
          }
        case 143: break;
        case 104: 
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 144: break;
        case 25: 
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 145: break;
        case 108: 
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 146: break;
        case 97: 
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 147: break;
        case 8: 
          { return  PHPTokenId.PHP_STRING;
          }
        case 148: break;
        case 121: 
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 149: break;
        case 5: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 150: break;
        case 81: 
          { return PHPTokenId.PHP_CLONE;
          }
        case 151: break;
        case 76: 
          { return PHPTokenId.PHP_BREAK;
          }
        case 152: break;
        case 55: 
          { return PHPTokenId.PHP_NEW;
          }
        case 153: break;
        case 72: 
          { return PHPTokenId.PHP_FROM;
          }
        case 154: break;
        case 110: 
          { return PHPTokenId.PHP__LINE__;
          }
        case 155: break;
        case 95: 
          { return PHPTokenId.PHP_SWITCH;
          }
        case 156: break;
        case 43: 
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 157: break;
        case 35: 
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 158: break;
        case 109: 
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 159: break;
        case 123: 
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 160: break;
        case 106: 
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 161: break;
        case 80: 
          { return PHPTokenId.PHP_CATCH;
          }
        case 162: break;
        case 32: 
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 163: break;
        case 17: 
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 164: break;
        case 73: 
          { yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 165: break;
        case 28: 
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 166: break;
        case 33: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 167: break;
        case 39: 
          { //popState();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 168: break;
        case 20: 
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 169: break;
        case 60: 
          { return PHPTokenId.PHP_VAR;
          }
        case 170: break;
        case 15: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 171: break;
        case 118: 
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 172: break;
        case 107: 
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 173: break;
        case 67: 
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 174: break;
        case 113: 
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 175: break;
        case 99: 
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 176: break;
        case 122: 
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 177: break;
        case 119: 
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 178: break;
        case 82: 
          { return PHPTokenId.PHP_CLASS;
          }
        case 179: break;
        case 65: 
          { return PHPTokenId.PHP_ELSE;
          }
        case 180: break;
        case 40: 
          { return PHPTokenId.PHP_IF;
          }
        case 181: break;
        case 112: 
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 182: break;
        case 54: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 183: break;
        case 98: 
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 184: break;
        case 18: 
          { yypushback(1);
        popState();
          }
        case 185: break;
        case 88: 
          { return PHPTokenId.PHP_FINAL;
          }
        case 186: break;
        case 59: 
          { return PHPTokenId.PHP_FOR;
          }
        case 187: break;
        case 69: 
          { return PHPTokenId.PHP_CASE;
          }
        case 188: break;
        case 87: 
          { return PHPTokenId.PHP_FALSE;
          }
        case 189: break;
        case 22: 
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 190: break;
        case 103: 
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 191: break;
        case 84: 
          { return PHPTokenId.PHP_PRINT;
          }
        case 192: break;
        case 49: 
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 193: break;
        case 45: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 194: break;
        case 120: 
          { return PHPTokenId.PHP__METHOD__;
          }
        case 195: break;
        case 37: 
          { return PHPTokenId.PHP_AS;
          }
        case 196: break;
        case 42: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 197: break;
        case 71: 
          { return PHPTokenId.PHP_LIST;
          }
        case 198: break;
        case 34: 
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 199: break;
        case 86: 
          { return PHPTokenId.PHP_UNSET;
          }
        case 200: break;
        case 1: 
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 201: break;
        case 63: 
          { return PHPTokenId.PHP_EXIT;
          }
        case 202: break;
        case 26: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 203: break;
        case 23: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 204: break;
        case 105: 
          { return PHPTokenId.PHP_FOREACH;
          }
        case 205: break;
        case 57: 
          { return PHPTokenId.PHP_TRY;
          }
        case 206: break;
        case 16: 
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 207: break;
        case 50: 
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 208: break;
        case 68: 
          { return PHPTokenId.PHP_SELF;
          }
        case 209: break;
        case 102: 
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 210: break;
        case 70: 
          { return PHPTokenId.PHP_TRUE;
          }
        case 211: break;
        case 52: 
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 212: break;
        case 19: 
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 213: break;
        case 77: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 214: break;
        case 111: 
          { return PHPTokenId.PHP__FILE__;
          }
        case 215: break;
        case 9: 
          { return  PHPTokenId.WHITESPACE;
          }
        case 216: break;
        case 56: 
          { return PHPTokenId.PHP_DIE;
          }
        case 217: break;
        case 41: 
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 218: break;
        case 47: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 219: break;
        case 85: 
          { return PHPTokenId.PHP_THROW;
          }
        case 220: break;
        case 83: 
          { return PHPTokenId.PHP_ISSET;
          }
        case 221: break;
        case 44: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 222: break;
        case 92: 
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 223: break;
        case 62: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
    	   yypushback(1);
        yybegin(ST_PHP_END_HEREDOC);
    }
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 224: break;
        case 21: 
          { yypushback(1);
    popState();
          }
        case 225: break;
        case 3: 
          { int len = yylength();
        if (len > 1 && (yycharat(len-1) == '*')) {
            yypushback(1); // go back to mark end of comment in the next token
        }
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 226: break;
        case 91: 
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 227: break;
        case 12: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 228: break;
        case 10: 
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 229: break;
        case 74: 
          { return PHPTokenId.PHP_ENDIF;
          }
        case 230: break;
        case 36: 
          { if (asp_tags) {
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 231: break;
        case 101: 
          { return PHPTokenId.PHP_DECLARE;
          }
        case 232: break;
        case 31: 
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 233: break;
        case 117: 
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 234: break;
        case 115: 
          { return PHPTokenId.PHP__CLASS__;
          }
        case 235: break;
        case 29: 
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 236: break;
        case 30: 
          { if (asp_tags) {
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 237: break;
        case 53: 
          { if (asp_tags) {
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 238: break;
        case 58: 
          { return PHPTokenId.PHP_USE;
          }
        case 239: break;
        case 124: 
          { return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 240: break;
        case 46: 
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 241: break;
        case 13: 
          { return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 242: break;
        case 61: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 243: break;
        case 94: 
          { return PHPTokenId.PHP_STATIC;
          }
        case 244: break;
        case 64: 
          { return PHPTokenId.PHP_ECHO;
          }
        case 245: break;
        case 6: 
          { return PHPTokenId.PHP_NUMBER;
          }
        case 246: break;
        case 96: 
          { return PHPTokenId.PHP_PARENT;
          }
        case 247: break;
        case 75: 
          { return PHPTokenId.PHP_EMPTY;
          }
        case 248: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
