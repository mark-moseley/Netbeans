/* The following code was generated by JFlex 1.4.1 on 9/3/08 4:13 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 9/3/08 4:13 PM from the specification file
 * <tt>/space/mercurial/trunk/main/php.editor/tools/Php5ColoringScanner.flex</tt>
 */
public class PHP5ColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_PHP_LINE_COMMENT = 15;
  public static final int ST_PHP_NOWDOC = 8;
  public static final int ST_PHP_DOUBLE_QUOTES = 2;
  public static final int ST_PHP_COMMENT = 13;
  public static final int ST_PHP_BACKQUOTE = 3;
  public static final int ST_PHP_DOC_COMMENT = 14;
  public static final int ST_PHP_END_NOWDOC = 10;
  public static final int ST_PHP_START_HEREDOC = 6;
  public static final int ST_PHP_END_HEREDOC = 7;
  public static final int ST_PHP_VAR_OFFSET = 12;
  public static final int YYINITIAL = 0;
  public static final int ST_PHP_IN_SCRIPTING = 1;
  public static final int ST_PHP_LOOKING_FOR_PROPERTY = 11;
  public static final int ST_PHP_HEREDOC = 5;
  public static final int ST_PHP_HIGHLIGHTING_ERROR = 16;
  public static final int ST_PHP_QUOTES_AFTER_VARIABLE = 4;
  public static final int ST_PHP_START_NOWDOC = 9;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\16\2\0\1\12\22\0\1\13\1\31\1\20\1\106"+
    "\1\17\1\35\1\36\1\66\1\77\1\47\1\33\1\30\1\14\1\4"+
    "\1\2\1\34\1\5\11\1\1\75\1\15\1\32\1\26\1\27\1\67"+
    "\1\14\1\43\1\7\1\54\1\45\1\3\1\70\1\63\1\65\1\55"+
    "\1\100\1\73\1\62\1\74\1\44\1\41\1\57\1\102\1\42\1\52"+
    "\1\61\1\64\1\76\1\72\1\6\1\71\1\21\1\104\1\22\1\105"+
    "\1\40\1\101\1\23\1\43\1\7\1\46\1\45\1\3\1\70\1\63"+
    "\1\65\1\56\1\100\1\73\1\62\1\74\1\44\1\41\1\60\1\102"+
    "\1\51\1\53\1\50\1\64\1\76\1\72\1\6\1\71\1\21\1\25"+
    "\1\37\1\103\1\14\67\21\4\24\1\21\5\24\27\21\1\24\37\21"+
    "\1\24\10\21\u0137\10\31\0\162\10\4\0\14\10\16\0\5\10\11\0"+
    "\1\10\213\0\1\10\13\0\1\10\1\0\3\10\1\0\1\10\1\0"+
    "\24\10\1\0\54\10\1\0\46\10\1\0\5\10\4\0\202\10\10\0"+
    "\105\10\1\0\46\10\2\0\2\10\6\0\20\10\41\0\46\10\2\0"+
    "\1\10\7\0\47\10\110\0\33\10\5\0\3\10\56\0\32\10\5\0"+
    "\13\10\25\0\12\11\4\0\2\10\1\0\143\10\1\0\1\10\17\0"+
    "\2\10\7\0\2\10\12\11\3\10\2\0\1\10\20\0\1\10\1\0"+
    "\36\10\35\0\3\10\60\0\46\10\13\0\1\10\u0152\0\66\10\3\0"+
    "\1\10\22\0\1\10\7\0\12\10\4\0\12\11\25\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0"+
    "\1\10\36\0\2\10\1\0\3\10\4\0\12\11\2\10\23\0\6\10"+
    "\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\37\0\4\10\1\0\1\10\7\0\12\11\2\0\3\10"+
    "\20\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\3\0\1\10\22\0\1\10\17\0\2\10\4\0\12\11"+
    "\25\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\3\0\1\10\36\0\2\10\1\0\3\10\4\0\12\11"+
    "\1\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10"+
    "\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10"+
    "\3\0\10\10\1\0\3\10\55\0\11\11\25\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\46\0\2\10\4\0\12\11"+
    "\25\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\3\0\1\10\40\0\1\10\1\0\2\10\4\0\12\11\25\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\20\10\46\0\2\10\4\0\12\11"+
    "\25\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10"+
    "\72\0\60\10\1\0\2\10\14\0\7\10\11\0\12\11\47\0\2\10"+
    "\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10"+
    "\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10"+
    "\1\0\4\10\1\0\2\10\11\0\1\10\2\0\5\10\1\0\1\10"+
    "\11\0\12\11\2\0\2\10\42\0\1\10\37\0\12\11\26\0\10\10"+
    "\1\0\42\10\35\0\4\10\164\0\42\10\1\0\5\10\1\0\2\10"+
    "\25\0\12\11\6\0\6\10\112\0\46\10\12\0\51\10\7\0\132\10"+
    "\5\0\104\10\5\0\122\10\6\0\7\10\1\0\77\10\1\0\1\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\47\10"+
    "\1\0\1\10\1\0\4\10\2\0\37\10\1\0\1\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\7\10"+
    "\1\0\27\10\1\0\37\10\1\0\1\10\1\0\4\10\2\0\7\10"+
    "\1\0\47\10\1\0\23\10\16\0\11\11\56\0\125\10\14\0\u026c\10"+
    "\2\0\10\10\12\0\32\10\5\0\113\10\25\0\15\10\1\0\4\10"+
    "\16\0\22\10\16\0\22\10\16\0\15\10\1\0\3\10\17\0\64\10"+
    "\43\0\1\10\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10"+
    "\10\0\51\10\127\0\35\10\51\0\12\11\36\10\2\0\5\10\u038b\0"+
    "\154\10\224\0\234\10\4\0\132\10\6\0\26\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\164\0\1\10\15\0\1\10\202\0\1\10\4\0"+
    "\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\4\10\1\0\3\10\1\0\7\10\3\0"+
    "\3\10\5\0\5\10\u0ebb\0\2\10\52\0\5\10\5\0\2\10\4\0"+
    "\126\10\6\0\3\10\1\0\132\10\1\0\4\10\5\0\50\10\4\0"+
    "\136\10\21\0\30\10\70\0\20\10\u0200\0\u19b6\10\112\0\u51a6\10\132\0"+
    "\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10\225\0\7\10\14\0"+
    "\5\10\5\0\1\10\1\0\12\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0"+
    "\100\10\2\0\66\10\50\0\14\10\164\0\5\10\1\0\207\10\23\0"+
    "\12\11\7\0\32\10\6\0\32\10\13\0\131\10\3\0\6\10\2\0"+
    "\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\13\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\5\1\4\3\6\1\7\1\5\1\10\1\5\1\11"+
    "\1\12\1\13\12\5\15\6\1\3\1\5\2\6\1\5"+
    "\1\6\1\5\1\6\1\14\1\15\1\1\1\16\1\17"+
    "\2\16\1\1\3\16\3\20\2\1\3\3\2\21\4\3"+
    "\1\0\2\22\1\3\1\23\1\24\1\23\1\4\1\25"+
    "\1\4\1\26\1\25\1\27\4\0\4\30\2\31\1\32"+
    "\1\33\1\0\1\34\1\0\1\35\1\4\1\0\1\36"+
    "\6\6\1\37\2\0\1\6\1\0\1\40\2\0\1\16"+
    "\2\0\2\36\1\0\1\41\1\42\1\36\4\6\1\43"+
    "\3\6\1\44\13\6\1\45\10\6\1\0\1\46\6\6"+
    "\1\47\1\6\12\0\1\6\3\0\2\50\2\51\1\52"+
    "\1\53\1\51\3\0\1\50\3\54\1\55\3\0\2\1"+
    "\1\50\2\51\1\0\1\56\2\0\1\57\7\0\1\60"+
    "\2\0\1\61\1\0\1\62\1\50\1\0\1\63\1\0"+
    "\1\64\1\65\1\30\1\66\1\67\3\0\7\6\1\4"+
    "\1\0\1\6\3\0\4\6\1\70\3\6\1\71\6\6"+
    "\1\72\20\6\1\73\1\74\5\6\1\75\12\0\5\6"+
    "\3\76\1\77\1\1\1\77\1\1\1\76\1\100\1\0"+
    "\1\100\1\0\1\101\1\102\1\30\2\0\1\6\1\103"+
    "\5\6\1\104\1\105\1\6\1\106\1\6\4\0\1\107"+
    "\4\6\1\110\5\6\1\111\2\6\1\112\1\6\1\113"+
    "\14\6\1\114\3\6\1\115\4\6\12\0\6\6\1\30"+
    "\1\0\1\116\3\6\1\117\3\6\1\120\1\121\2\122"+
    "\3\0\3\6\1\123\3\6\1\124\1\125\1\126\1\127"+
    "\1\130\5\6\1\131\2\6\1\132\4\6\1\133\1\6"+
    "\1\134\1\135\1\6\1\136\10\0\1\137\1\0\6\6"+
    "\1\30\1\0\3\6\1\140\1\6\1\141\3\0\1\142"+
    "\5\6\1\143\1\144\6\6\1\145\1\146\1\147\2\6"+
    "\4\0\6\6\1\30\1\2\1\150\4\6\2\151\1\0"+
    "\1\152\1\6\1\153\1\154\1\6\1\155\4\6\1\156"+
    "\1\157\1\6\2\0\6\6\1\30\1\0\3\6\1\160"+
    "\1\0\1\6\1\161\1\162\5\6\1\163\1\6\1\164"+
    "\1\6\1\165\2\6\1\30\1\0\1\6\1\166\1\6"+
    "\1\167\2\6\1\170\2\6\1\171\1\172\3\6\1\30"+
    "\1\0\1\173\1\174\2\6\1\175\1\176\2\6\1\177"+
    "\1\30\1\0\4\6\1\0\1\200\1\201\1\6\1\202"+
    "\1\0\1\6\1\0\1\6\1\0\1\203\14\0\1\204"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u0545\0\u0545\0\u080b"+
    "\0\u0852\0\u0545\0\u0545\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5"+
    "\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde\0\u0e25"+
    "\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d"+
    "\0\u10a4\0\u10eb\0\u0545\0\u0545\0\u1132\0\u1179\0\u0545\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u0545\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u0545\0\u155b\0\u15a2"+
    "\0\u15e9\0\u1630\0\u1677\0\u1677\0\u0545\0\u16be\0\u1705\0\u0545"+
    "\0\u174c\0\u1793\0\u17da\0\u0545\0\u1821\0\u0545\0\u1868\0\u0545"+
    "\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u0545\0\u1a59"+
    "\0\u1aa0\0\u0f41\0\u0545\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03"+
    "\0\u1c4a\0\u1c91\0\u0545\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u0545\0\u1e82\0\u1ec9\0\u1f10\0\u0efa\0\u1f57\0\u0852"+
    "\0\u1f9e\0\u0545\0\u1fe5\0\u202c\0\u09fc\0\u2073\0\u20ba\0\u2101"+
    "\0\u2148\0\u077d\0\u218f\0\u21d6\0\u221d\0\u2264\0\u077d\0\u22ab"+
    "\0\u22f2\0\u2339\0\u077d\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c"+
    "\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u077d\0\u268d"+
    "\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u0545"+
    "\0\u2afd\0\u2b44\0\u10a4\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7"+
    "\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u11c0\0\u2e51\0\u2e98"+
    "\0\u2edf\0\u2e0a\0\u0545\0\u0545\0\u0545\0\u2e51\0\u2f26\0\u12dc"+
    "\0\u2f6d\0\u2fb4\0\u2f26\0\u0545\0\u2f6d\0\u0545\0\u2ffb\0\u14cd"+
    "\0\u3042\0\u3089\0\u30d0\0\u3117\0\u2ffb\0\u3042\0\u155b\0\u0545"+
    "\0\u315e\0\u15a2\0\u0545\0\u31a5\0\u15e9\0\u1630\0\u31ec\0\u3233"+
    "\0\u327a\0\u16be\0\u0545\0\u32c1\0\u1705\0\u0545\0\u3308\0\u0545"+
    "\0\u334f\0\u3396\0\u0545\0\u33dd\0\u0545\0\u0545\0\u3424\0\u346b"+
    "\0\u0545\0\u34b2\0\u34f9\0\u17da\0\u3540\0\u3587\0\u35ce\0\u3615"+
    "\0\u365c\0\u36a3\0\u36ea\0\u1e82\0\u3731\0\u3778\0\u37bf\0\u3806"+
    "\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969\0\u077d\0\u39b0\0\u39f7"+
    "\0\u3a3e\0\u077d\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1\0\u3be8"+
    "\0\u077d\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9"+
    "\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca\0\u4011"+
    "\0\u4058\0\u077d\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202"+
    "\0\u077d\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3"+
    "\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b"+
    "\0\u0545\0\u1132\0\u124e\0\u0545\0\u4672\0\u143f\0\u46b9\0\u13f8"+
    "\0\u0545\0\u4700\0\u1677\0\u4747\0\u0545\0\u0545\0\u478e\0\u47d5"+
    "\0\u481c\0\u4863\0\u077d\0\u48aa\0\u48f1\0\u4938\0\u497f\0\u49c6"+
    "\0\u077d\0\u4a0d\0\u4a54\0\u077d\0\u4a9b\0\u4ae2\0\u4b29\0\u4b70"+
    "\0\u4bb7\0\u384d\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3\0\u077d\0\u4d1a"+
    "\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u077d\0\u4e7d\0\u4ec4\0\u077d"+
    "\0\u4f0b\0\u077d\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5"+
    "\0\u50fc\0\u5143\0\u518a\0\u51d1\0\u5218\0\u525f\0\u077d\0\u52a6"+
    "\0\u52ed\0\u5334\0\u077d\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497"+
    "\0\u54de\0\u5525\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf"+
    "\0\u5716\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907"+
    "\0\u594e\0\u0545\0\u5995\0\u59dc\0\u5a23\0\u077d\0\u5a6a\0\u5ab1"+
    "\0\u5af8\0\u077d\0\u077d\0\u5b3f\0\u0545\0\u5b86\0\u5bcd\0\u5c14"+
    "\0\u5c5b\0\u5ca2\0\u5ce9\0\u077d\0\u5d30\0\u5d77\0\u5dbe\0\u077d"+
    "\0\u077d\0\u077d\0\u077d\0\u077d\0\u5e05\0\u5e4c\0\u5e93\0\u5eda"+
    "\0\u5f21\0\u077d\0\u5f68\0\u5faf\0\u077d\0\u5ff6\0\u603d\0\u6084"+
    "\0\u60cb\0\u077d\0\u6112\0\u077d\0\u077d\0\u6159\0\u077d\0\u61a0"+
    "\0\u61e7\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391\0\u0545"+
    "\0\u63d8\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9"+
    "\0\u6610\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u077d\0\u67ba"+
    "\0\u6801\0\u6848\0\u077d\0\u688f\0\u68d6\0\u691d\0\u6964\0\u69ab"+
    "\0\u077d\0\u077d\0\u69f2\0\u6a39\0\u6a80\0\u6ac7\0\u6b0e\0\u6b55"+
    "\0\u077d\0\u077d\0\u077d\0\u6b9c\0\u6be3\0\u6c2a\0\u6c71\0\u6cb8"+
    "\0\u6cff\0\u6d46\0\u6d8d\0\u6dd4\0\u6e1b\0\u6e62\0\u6ea9\0\u6ef0"+
    "\0\u6f37\0\u077d\0\u6f7e\0\u6fc5\0\u700c\0\u7053\0\u709a\0\u0545"+
    "\0\u70e1\0\u7128\0\u716f\0\u077d\0\u077d\0\u71b6\0\u71fd\0\u7244"+
    "\0\u728b\0\u72d2\0\u7319\0\u077d\0\u077d\0\u7360\0\u73a7\0\u73ee"+
    "\0\u7435\0\u747c\0\u74c3\0\u750a\0\u7551\0\u7598\0\u75df\0\u7626"+
    "\0\u766d\0\u76b4\0\u76fb\0\u077d\0\u7742\0\u7789\0\u077d\0\u077d"+
    "\0\u77d0\0\u7817\0\u785e\0\u78a5\0\u78ec\0\u077d\0\u7933\0\u077d"+
    "\0\u797a\0\u077d\0\u79c1\0\u7a08\0\u7a4f\0\u7a96\0\u7add\0\u077d"+
    "\0\u7b24\0\u7b6b\0\u7bb2\0\u7bf9\0\u077d\0\u7c40\0\u7c87\0\u077d"+
    "\0\u077d\0\u7cce\0\u7d15\0\u7d5c\0\u7da3\0\u7dea\0\u077d\0\u077d"+
    "\0\u7e31\0\u7e78\0\u077d\0\u077d\0\u7ebf\0\u7f06\0\u077d\0\u7b6b"+
    "\0\u7f4d\0\u7f94\0\u7fdb\0\u8022\0\u8069\0\u80b0\0\u077d\0\u077d"+
    "\0\u80f7\0\u077d\0\u813e\0\u8185\0\u81cc\0\u8213\0\u825a\0\u077d"+
    "\0\u82a1\0\u82e8\0\u832f\0\u8376\0\u83bd\0\u8404\0\u844b\0\u8492"+
    "\0\u84d9\0\u8520\0\u8567\0\u85ae\0\u0545\0\u85f5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\32\22\1\23\54\22\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\24\2\35\1\36\1\37"+
    "\1\35\1\40\1\41\1\34\1\24\1\42\1\24\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\51\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\36\1\64\1\57\2\65\1\63\2\66\2\67"+
    "\1\64\1\70\1\71\1\72\1\34\1\73\1\74\1\75"+
    "\1\34\1\76\2\34\1\77\1\100\1\101\1\34\1\102"+
    "\1\34\1\103\2\36\1\104\17\105\1\106\1\107\1\105"+
    "\1\110\2\105\1\111\61\105\17\112\1\113\2\112\1\114"+
    "\1\107\1\112\1\115\61\112\4\116\1\117\20\116\1\120"+
    "\61\116\12\121\1\122\3\121\1\122\1\123\2\121\1\124"+
    "\2\121\1\125\61\121\3\126\1\127\2\126\3\127\10\126"+
    "\1\127\17\126\6\127\1\126\16\127\2\126\5\127\1\126"+
    "\1\127\1\126\3\127\4\126\3\24\1\130\2\24\3\130"+
    "\5\24\1\0\2\24\1\130\17\24\6\130\1\24\16\130"+
    "\2\24\5\130\1\24\1\130\1\24\3\130\4\24\3\131"+
    "\1\132\2\131\2\132\2\131\1\133\3\131\1\134\2\131"+
    "\1\132\2\131\1\24\14\131\6\132\1\131\16\132\2\131"+
    "\5\132\1\131\1\132\1\131\3\132\4\131\3\135\1\136"+
    "\2\135\3\136\10\135\1\136\17\135\6\136\1\135\16\136"+
    "\2\135\5\136\1\135\1\136\1\135\3\136\4\135\3\24"+
    "\1\137\2\24\3\137\5\24\1\0\2\24\1\137\17\24"+
    "\6\137\1\24\16\137\2\24\5\137\1\24\1\137\1\24"+
    "\3\137\4\24\3\140\1\141\1\142\1\140\3\141\10\140"+
    "\1\141\17\140\6\141\1\140\16\141\2\140\5\141\1\140"+
    "\1\141\1\140\3\141\4\140\1\24\1\143\1\144\1\34"+
    "\1\144\1\145\3\34\1\24\2\146\2\144\1\146\1\147"+
    "\1\144\1\34\1\146\1\144\1\24\14\144\6\34\1\144"+
    "\16\34\1\146\1\144\5\34\1\144\1\34\1\144\3\34"+
    "\1\144\1\36\1\150\1\146\33\151\1\152\53\151\33\153"+
    "\1\154\53\153\12\155\1\156\3\155\1\157\13\155\1\160"+
    "\2\155\1\161\31\155\1\162\17\155\12\163\2\164\2\163"+
    "\1\164\70\163\32\22\1\165\106\22\1\0\2\22\1\166"+
    "\10\22\4\0\1\22\1\167\2\22\1\0\1\22\1\0"+
    "\6\22\1\170\7\22\1\0\7\22\110\0\1\25\1\171"+
    "\1\172\1\0\1\25\102\0\1\171\3\0\1\171\20\0"+
    "\1\173\61\0\1\34\1\0\1\34\1\0\1\34\1\174"+
    "\3\34\7\0\1\34\17\0\3\34\1\175\1\34\1\176"+
    "\1\0\4\34\1\176\5\34\1\177\3\34\2\0\4\34"+
    "\1\200\1\0\1\201\1\0\3\34\10\0\1\173\21\0"+
    "\1\173\1\202\60\0\1\25\1\171\1\172\1\0\1\25"+
    "\1\203\101\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\1\56\5\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\6\0\1\41\1\34\10\0\1\204\6\0"+
    "\1\34\1\205\4\34\1\0\1\34\1\205\14\34\1\206"+
    "\1\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\16\0\2\35\2\0\1\35\73\0\1\207\2\0\3\207"+
    "\10\0\1\207\17\0\6\207\1\0\16\207\2\0\5\207"+
    "\1\0\1\207\1\0\3\207\4\0\17\210\1\211\1\212"+
    "\1\210\1\213\2\210\1\214\61\210\26\0\1\215\1\173"+
    "\105\0\1\173\1\215\105\0\1\173\1\0\1\173\104\0"+
    "\1\215\106\0\2\173\2\0\1\216\1\0\1\217\100\0"+
    "\1\173\106\0\1\173\4\0\1\220\1\104\100\0\1\173"+
    "\1\221\105\0\1\173\7\0\1\173\76\0\1\173\10\0"+
    "\1\173\50\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\1\34\1\222\4\34\1\0\1\34\1\222"+
    "\14\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\223\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\2\34\1\224"+
    "\2\34\7\0\1\34\17\0\1\34\1\225\1\34\1\226"+
    "\2\34\1\0\1\34\1\225\2\227\12\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\230"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\14\34"+
    "\1\231\1\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\232\1\0\5\34\7\0\1\34"+
    "\17\0\1\233\5\34\1\0\5\34\2\234\7\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\1\235\1\34"+
    "\1\236\3\34\1\0\12\34\1\237\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\1\34\1\240\4\34"+
    "\1\0\1\34\1\240\13\34\1\241\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\242\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\1\243\10\34"+
    "\1\243\4\34\2\0\2\34\1\244\2\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\3\34\1\245\2\34\1\0\2\34"+
    "\2\246\12\34\2\0\1\247\3\34\1\250\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\1\34\1\251\1\252\3\34\1\0"+
    "\1\34\1\251\12\34\1\253\1\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\5\34\2\254"+
    "\7\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\12\34\1\255\3\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\3\34\1\256\2\34\1\0"+
    "\2\34\2\257\12\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\4\0\22\206\1\260\43\206\1\212\20\206\27\0"+
    "\1\261\60\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\1\262\1\263\1\264\3\34\1\0\1\34"+
    "\1\263\3\34\2\265\5\34\1\266\1\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\15\34"+
    "\1\267\2\0\5\34\1\0\1\34\1\0\3\34\101\0"+
    "\1\270\12\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\2\34\1\271\3\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\13\0\1\272\3\0"+
    "\1\273\25\0\1\274\1\275\1\276\1\0\1\277\3\0"+
    "\1\275\2\300\1\0\2\301\5\0\1\302\3\0\1\303"+
    "\17\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\1\34\1\304\1\34\4\0\17\105\1\305\1\0"+
    "\1\105\1\306\2\105\1\307\64\105\1\310\2\105\2\310"+
    "\1\311\6\105\1\312\1\313\1\310\1\306\1\105\1\0"+
    "\1\314\13\105\6\310\1\105\16\310\2\105\5\310\1\105"+
    "\1\310\1\105\3\310\132\105\1\315\1\313\1\105\1\306"+
    "\2\105\1\316\61\105\17\112\1\317\2\112\1\320\1\0"+
    "\1\112\1\321\64\112\1\310\2\112\2\310\1\322\6\112"+
    "\1\323\1\112\1\310\1\320\1\324\1\0\1\314\13\112"+
    "\6\310\1\112\16\310\2\112\5\310\1\112\1\310\1\112"+
    "\3\310\132\112\1\315\2\112\1\320\1\324\1\112\1\325"+
    "\61\112\27\0\1\326\76\0\1\315\67\0\12\121\1\122"+
    "\3\121\1\122\1\327\2\121\1\330\2\121\1\331\64\121"+
    "\1\332\2\121\2\332\1\333\1\121\1\122\3\121\1\122"+
    "\1\327\1\121\1\332\1\330\1\121\1\0\1\331\13\121"+
    "\6\332\1\121\16\332\2\121\5\332\1\121\1\332\1\121"+
    "\3\332\7\121\1\310\2\121\2\310\1\334\1\121\1\122"+
    "\3\121\1\122\1\335\1\121\1\310\1\330\1\121\1\0"+
    "\1\314\13\121\6\310\1\121\16\310\2\121\5\310\1\121"+
    "\1\310\1\121\3\310\16\121\1\122\3\121\1\122\102\121"+
    "\1\122\3\121\1\122\1\315\2\121\1\330\2\121\1\336"+
    "\61\121\1\0\1\337\1\0\1\337\1\0\5\337\1\340"+
    "\2\0\1\341\1\340\2\0\1\337\17\0\6\337\1\0"+
    "\16\337\2\0\5\337\1\0\1\337\1\0\3\337\5\0"+
    "\1\342\1\0\1\342\1\0\5\342\1\343\2\0\1\344"+
    "\1\343\2\0\1\342\17\0\6\342\1\0\16\342\2\0"+
    "\5\342\1\0\1\342\1\0\3\342\4\0\12\345\1\134"+
    "\3\345\1\134\71\345\1\346\1\345\1\346\1\345\3\346"+
    "\2\345\1\0\2\345\1\347\1\0\2\345\1\346\2\345"+
    "\1\0\14\345\6\346\1\345\16\346\2\345\5\346\1\345"+
    "\1\346\1\345\3\346\7\345\1\350\2\345\2\350\1\351"+
    "\1\345\1\134\3\345\1\134\2\345\1\350\2\345\1\0"+
    "\14\345\6\350\1\345\16\350\2\345\5\350\1\345\1\350"+
    "\1\345\3\350\4\345\1\0\1\352\1\0\1\352\1\0"+
    "\5\352\1\353\2\0\1\354\1\353\2\0\1\352\17\0"+
    "\6\352\1\0\16\352\2\0\5\352\1\0\1\352\1\0"+
    "\3\352\5\0\1\355\1\0\1\355\1\0\5\355\1\356"+
    "\2\0\1\357\1\356\2\0\1\355\17\0\6\355\1\0"+
    "\16\355\2\0\5\355\1\0\1\355\1\0\3\355\5\0"+
    "\1\141\1\0\1\141\1\0\5\141\7\0\1\141\17\0"+
    "\6\141\1\0\16\141\2\0\5\141\1\0\1\141\1\0"+
    "\3\141\33\0\1\360\60\0\1\143\3\0\1\143\102\0"+
    "\1\143\3\0\1\143\1\203\103\0\1\361\2\0\3\361"+
    "\10\0\1\361\17\0\6\361\1\0\16\361\2\0\5\361"+
    "\1\0\1\361\1\0\3\361\4\0\33\151\1\362\106\151"+
    "\1\362\1\363\52\151\33\153\1\364\106\153\1\364\1\365"+
    "\52\153\12\155\1\157\3\155\1\157\16\155\1\157\31\155"+
    "\1\157\17\155\16\0\1\366\70\0\12\155\1\157\3\155"+
    "\1\157\15\155\1\367\1\157\31\155\1\157\17\155\27\0"+
    "\1\370\71\0\2\164\2\0\1\164\70\0\32\22\1\0"+
    "\2\22\1\0\10\22\4\0\1\22\1\0\2\22\1\0"+
    "\1\22\1\0\6\22\1\0\7\22\1\0\7\22\26\0"+
    "\1\371\126\0\1\372\5\0\1\372\60\0\1\371\30\0"+
    "\2\373\27\0\1\171\1\0\1\172\1\0\1\171\102\0"+
    "\1\143\2\0\1\374\1\143\22\0\1\374\57\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\1\375\4\34\2\376\2\34\1\375\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\4\34\1\377"+
    "\1\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\15\34\1\u0100\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\2\34"+
    "\2\u0101\12\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\7\34\2\u0102\5\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\2\34\1\u0103\3\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\u0104\1\0\1\u0104\1\0\1\u0104\1\0\1\u0104"+
    "\33\0\1\u0104\1\0\2\u0104\5\0\1\u0104\13\0\1\u0104"+
    "\50\0\1\u0105\55\0\1\34\1\0\1\u0106\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\207\1\0\1\207"+
    "\1\0\5\207\7\0\1\207\17\0\6\207\1\0\16\207"+
    "\2\0\5\207\1\0\1\207\1\0\3\207\4\0\3\210"+
    "\1\0\2\210\2\0\7\210\1\211\1\212\1\0\1\213"+
    "\1\210\2\0\13\210\6\0\1\210\16\0\2\210\5\0"+
    "\1\210\1\0\1\210\3\0\132\210\1\0\1\212\1\210"+
    "\1\213\2\210\1\214\61\210\26\0\1\173\3\0\1\u0107"+
    "\126\0\2\u0108\66\0\1\u0109\65\0\2\221\2\0\1\221"+
    "\71\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\1\u010a\10\34\1\u010a\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\2\34\1\u010b\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\2\34\2\u010c\12\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\1\34\1\u010d\4\34\1\0\1\34"+
    "\1\u010d\14\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\4\34\1\222\1\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\16\34"+
    "\2\0\2\34\1\u010e\2\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\12\34\1\u010f\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\5\34\1\u0110\1\0"+
    "\4\34\1\u0110\11\34\2\0\1\u0111\4\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\u0112\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\3\34\1\u0113\2\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\1\u0114\1\34\2\u0115\5\34\1\u0114"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\1\u0116\1\34\1\u0117\3\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\14\34"+
    "\1\u0118\1\34\2\0\1\34\1\u0119\3\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\1\34\1\u011a\4\34\1\0\1\34"+
    "\1\u011a\14\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\12\34\1\u011b\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\2\34\1\u011c\3\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\5\34\2\u011d\7\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\5\34\1\u011e\1\0"+
    "\1\u011f\1\34\2\u0120\1\u011e\4\34\1\u011f\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\2\34\2\u0121\12\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\7\34\2\u0122\5\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\1\u0123\5\34"+
    "\1\0\5\34\2\u0124\7\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\1\34\1\u0125\4\34\1\0\1\34"+
    "\1\u0125\14\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\2\34\1\u0126\2\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\2\34"+
    "\2\u0127\12\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\1\u0128\5\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\2\34\2\u0129"+
    "\12\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u012a\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\4\0\107\206\12\0\2\261\2\0\1\261\71\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\1\34\1\u012b\4\34\1\0\1\34\1\u012b\14\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\1\u012c\5\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\12\34\1\u012d\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\3\34\1\u012e\2\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\3\34\1\u012f\2\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\5\34"+
    "\2\u0130\7\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\1\34\1\u0131\4\34\1\0\1\34\1\u0131\14\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\45\0\1\u0132"+
    "\13\0\2\u0133\37\0\1\u0134\102\0\1\u0135\145\0\1\u0136"+
    "\6\0\1\u0136\76\0\1\u0137\115\0\1\u0138\10\0\1\u0138"+
    "\71\0\1\u0139\106\0\1\u013a\124\0\1\u013b\25\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\5\34"+
    "\1\u013c\1\0\4\34\1\u013c\5\34\1\u013d\2\34\1\u013e"+
    "\2\0\1\u013f\3\34\1\u0140\1\0\1\34\1\0\3\34"+
    "\4\0\3\105\1\0\2\105\2\0\7\105\1\312\1\313"+
    "\1\0\1\306\1\105\2\0\13\105\6\0\1\105\16\0"+
    "\2\105\5\0\1\105\1\0\1\105\3\0\23\105\1\0"+
    "\1\313\1\105\1\306\2\105\1\316\61\105\1\0\1\310"+
    "\1\0\1\310\1\0\5\310\7\0\1\310\17\0\6\310"+
    "\1\0\16\310\2\0\5\310\1\0\1\310\1\0\3\310"+
    "\1\0\1\u0141\2\0\1\105\1\311\1\105\1\311\1\105"+
    "\5\311\5\105\1\305\1\0\1\311\1\306\2\105\1\307"+
    "\13\105\6\311\1\105\16\311\2\105\5\311\1\105\1\311"+
    "\1\105\3\311\1\105\1\u0142\2\105\3\112\1\0\2\112"+
    "\2\0\7\112\1\323\1\112\1\0\1\320\1\324\2\0"+
    "\13\112\6\0\1\112\16\0\2\112\5\0\1\112\1\0"+
    "\1\112\3\0\23\112\1\0\2\112\1\320\1\324\1\112"+
    "\1\325\62\112\1\322\1\112\1\322\1\112\5\322\5\112"+
    "\1\317\1\112\1\322\1\320\1\0\1\112\1\321\13\112"+
    "\6\322\1\112\16\322\2\112\5\322\1\112\1\322\1\112"+
    "\3\322\1\112\1\u0143\2\112\3\121\1\0\2\121\2\0"+
    "\2\121\1\122\3\121\1\122\1\335\1\121\1\0\1\330"+
    "\1\121\2\0\13\121\6\0\1\121\16\0\2\121\5\0"+
    "\1\121\1\0\1\121\3\0\16\121\1\122\3\121\1\122"+
    "\1\0\2\121\1\330\2\121\1\336\62\121\1\332\1\121"+
    "\1\332\1\121\3\332\2\333\1\u0144\2\121\1\u0145\1\u0144"+
    "\1\327\1\121\1\332\1\330\1\121\1\0\1\331\13\121"+
    "\6\332\1\121\16\332\2\121\5\332\1\121\1\332\1\121"+
    "\3\332\5\121\1\333\1\121\1\333\1\121\5\333\1\u0146"+
    "\2\121\1\u0147\1\u0146\1\327\1\121\1\333\1\330\2\121"+
    "\1\331\13\121\6\333\1\121\16\333\2\121\5\333\1\121"+
    "\1\333\1\121\3\333\5\121\1\334\1\121\1\334\1\121"+
    "\5\334\1\122\3\121\1\122\1\327\1\121\1\334\1\330"+
    "\2\121\1\331\13\121\6\334\1\121\16\334\2\121\5\334"+
    "\1\121\1\334\1\121\3\334\1\121\1\u0148\2\121\12\0"+
    "\1\340\3\0\1\340\102\0\1\343\3\0\1\343\70\0"+
    "\12\345\1\0\3\345\1\0\71\345\1\350\1\345\1\350"+
    "\1\345\3\350\2\351\1\u0149\2\345\1\u014a\1\u0149\2\345"+
    "\1\350\2\345\1\0\14\345\6\350\1\345\16\350\2\345"+
    "\5\350\1\345\1\350\1\345\3\350\5\345\1\351\1\345"+
    "\1\351\1\345\5\351\1\u014b\2\345\1\u014c\1\u014b\2\345"+
    "\1\351\17\345\6\351\1\345\16\351\2\345\5\351\1\345"+
    "\1\351\1\345\3\351\4\345\12\0\1\353\3\0\1\353"+
    "\102\0\1\356\3\0\1\356\71\0\1\361\1\0\1\361"+
    "\1\0\5\361\7\0\1\361\17\0\6\361\1\0\16\361"+
    "\2\0\5\361\1\0\1\361\1\0\3\361\4\0\33\151"+
    "\1\362\1\u014d\52\151\33\153\1\364\1\u014e\52\153\12\155"+
    "\1\157\3\155\1\157\16\155\1\157\14\155\2\u014f\13\155"+
    "\1\157\17\155\12\0\2\370\2\0\1\370\132\0\1\u0150"+
    "\6\0\1\u0150\122\0\1\u0151\22\0\1\34\1\0\1\u0152"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\1\u0153\10\34\1\u0153\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\4\34\1\u0154\1\34\1\0"+
    "\2\34\2\u0155\1\34\2\u0156\7\34\2\0\1\u0157\1\34"+
    "\1\u0158\2\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\1\u0159"+
    "\5\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u015a\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\1\u015b\10\34"+
    "\1\u015b\4\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\12\34\1\u015c\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\36\0\1\u0107\55\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\2\34"+
    "\1\u015d\3\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\7\0\1\u015e\2\0\3\u015e\2\0\1\u0107"+
    "\4\0\1\u015f\1\u015e\17\0\6\u015e\1\0\16\u015e\1\u0160"+
    "\1\0\5\u015e\1\0\1\u015e\1\0\3\u015e\52\0\1\u0161"+
    "\5\0\1\u0161\44\0\2\u0162\2\0\1\u0162\71\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\14\34\1\u0163\1\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\14\34\1\u0164\1\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\1\u0165\10\34\1\u0165\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\2\34\1\u0166\3\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\12\34\1\u0167\3\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\12\34\1\u0168"+
    "\3\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\2\34\1\u0169\3\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\1\u016a\1\34"+
    "\2\u016b\5\34\1\u016a\4\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\5\34\1\u016c\1\0\4\34\1\u016c"+
    "\11\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u016d\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\3\34\1\u016e\2\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\2\34\2\u016f\12\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u0170\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\1\u0171\5\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\1\u0172\4\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\1\u0173\10\34\1\u0173\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\1\u0174\10\34\1\u0174\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\12\34\1\u0175"+
    "\3\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u0176\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\1\u0177\10\34\1\u0177\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u0178\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\12\34\1\u0179\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\1\u017a"+
    "\10\34\1\u017a\4\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\3\34\1\u017b\2\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\u017c\1\0\3\34\5\0\1\34\1\0"+
    "\1\u017d\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\12\34\1\u017e\3\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\1\u017f\10\34"+
    "\1\u017f\4\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\2\34\1\u0180\2\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u0181"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u0182\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\4\34\1\u0183\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\2\34\2\u0184"+
    "\12\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\2\34\1\u0185\3\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\5\34\1\u0186\1\0\4\34"+
    "\1\u0186\11\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\12\34\1\u0187\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\45\0\1\u0188\111\0\1\u0189"+
    "\142\0\1\u018a\51\0\1\u018b\105\0\1\u018c\6\0\1\u018c"+
    "\121\0\1\u018d\64\0\1\u018e\6\0\1\u018e\105\0\1\u018f"+
    "\10\0\1\u018f\77\0\2\u0190\74\0\1\u0191\46\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\12\34\1\u0192\3\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\5\34\2\u0193\7\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\2\34"+
    "\1\u0194\3\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\5\34\2\u0195\5\34"+
    "\1\u0196\1\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\u0197\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\4\0\12\121\1\u0144\3\121\1\u0144\1\327"+
    "\2\121\1\330\2\121\1\331\73\121\1\u0146\3\121\1\u0146"+
    "\1\327\2\121\1\330\2\121\1\331\61\121\12\345\1\u0149"+
    "\3\345\1\u0149\102\345\1\u014b\3\345\1\u014b\70\345\12\155"+
    "\1\157\3\155\1\157\16\155\1\157\10\155\1\u0198\5\155"+
    "\1\u0198\12\155\1\157\17\155\55\0\2\u0199\107\0\2\u019a"+
    "\27\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\3\34\1\u019b\2\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u019c"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\2\34\1\u019d\2\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\1\u019e"+
    "\4\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\1\u019f\5\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\15\34\1\u01a0\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\5\34\2\u01a1"+
    "\7\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\1\34\1\u01a2\3\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\16\34\2\0"+
    "\3\34\1\u01a3\1\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\u015e\1\0\1\u015e\1\0\5\u015e\1\u01a4\3\0\1\u01a5"+
    "\2\0\1\u015e\17\0\6\u015e\1\0\16\u015e\2\0\5\u015e"+
    "\1\0\1\u015e\1\0\3\u015e\7\0\1\u01a6\2\0\3\u01a6"+
    "\10\0\1\u01a6\17\0\6\u01a6\1\0\16\u01a6\2\0\5\u01a6"+
    "\1\0\1\u01a6\1\0\3\u01a6\7\0\1\u01a7\2\0\3\u01a7"+
    "\10\0\1\u01a7\17\0\6\u01a7\1\0\16\u01a7\2\0\5\u01a7"+
    "\1\0\1\u01a7\1\0\3\u01a7\46\0\1\u01a8\6\0\1\u01a8"+
    "\36\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\1\34\1\u01a9\4\34\1\0\1\34\1\u01a9\14\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\5\34\2\u01aa\7\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\1\34\1\u01ab\4\34\1\0\1\34"+
    "\1\u01ab\14\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\1\34\1\u01ac\3\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\2\34\1\u01ad\3\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\14\34\1\u01ae\1\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\5\34"+
    "\2\u01af\7\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\1\u01b0\10\34\1\u01b0\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\15\34\1\u01b1\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\u01b2\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\2\34\2\u01b3\12\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\2\34\1\u01b4\2\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\5\34\2\u01b5\7\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\5\34"+
    "\1\u01b6\1\0\4\34\1\u01b6\11\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\14\34\1\u01b7"+
    "\1\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\1\34\1\u01b8\4\34\1\0\1\34\1\u01b8\14\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\2\34\1\u01b9"+
    "\3\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\1\u01ba\10\34\1\u01ba\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u01bb\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\u01bc\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\1\u01bd\10\34\1\u01bd"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\2\34\1\u01be\3\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\3\34\1\u01bf\2\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\5\34\2\u01c0\7\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\2\34\1\u01c1\3\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\1\u01c2\10\34\1\u01c2\4\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\2\34\1\u01c3\3\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\u01c4\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\12\34\1\u01c5\3\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\1\u01c6\10\34\1\u01c6\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\u01c7\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\66\0\1\u01c8\67\0"+
    "\1\u01c9\46\0\1\u01ca\165\0\1\u01cb\67\0\1\u01cc\52\0"+
    "\1\u01cd\154\0\2\u01ce\33\0\1\u01cf\7\0\1\u01cb\33\0"+
    "\1\u01d0\42\0\1\u01d1\146\0\1\u01d1\44\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\2\34\1\u01d2"+
    "\3\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\3\34\1\u01d3\2\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\12\34\1\u01d4\3\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\12\34\1\u01d5\3\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\3\34\1\u01d6"+
    "\2\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\1\u01d7\10\34\1\u01d7\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\4\0\12\155"+
    "\1\157\3\155\1\157\16\155\1\157\4\155\1\u01d8\6\155"+
    "\1\u01d8\15\155\1\157\17\155\57\0\2\u01d9\27\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\4\34"+
    "\1\u01da\1\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\5\34\1\u01db\1\0\4\34\1\u01db"+
    "\11\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\5\34\2\u01dc\7\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\1\34\1\u01dd\4\34\1\0"+
    "\1\34\1\u01dd\14\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\5\34\2\u01de\7\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\1\u01df\4\34\1\0\1\34\1\0\3\34"+
    "\22\0\1\u01a5\71\0\1\u01a6\1\0\1\u01a6\1\0\5\u01a6"+
    "\6\0\1\u01e0\1\u01a6\17\0\6\u01a6\1\0\16\u01a6\2\0"+
    "\5\u01a6\1\0\1\u01a6\1\0\3\u01a6\5\0\1\u01a7\1\0"+
    "\1\u01a7\1\0\5\u01a7\7\0\1\u01a7\17\0\6\u01a7\1\0"+
    "\16\u01a7\1\u01e1\1\0\5\u01a7\1\0\1\u01a7\1\0\3\u01a7"+
    "\61\0\2\u01e2\31\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\3\34\1\u01e3\2\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\1\34"+
    "\1\u01e4\4\34\1\0\1\34\1\u01e4\14\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\2\34\1\u01e5\3\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\1\34\1\u01e6\4\34\1\0\1\34\1\u01e6\14\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\12\34\1\u01e7\3\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\3\34\1\u01e8\2\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\5\34"+
    "\1\u01e9\1\0\4\34\1\u01e9\11\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\15\34\1\u01ea"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\4\34"+
    "\1\u01eb\1\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\1\u01ec"+
    "\4\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\3\34\1\u01ed"+
    "\2\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\4\34\1\u01ee"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\5\34\1\u01ef\1\0"+
    "\4\34\1\u01ef\11\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\1\u01f0\10\34\1\u01f0\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\1\u01f1\10\34\1\u01f1\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\5\34\1\u01f2\1\0\4\34"+
    "\1\u01f2\11\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\12\34\1\u01f3\3\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\5\34\1\u01f4\1\0"+
    "\4\34\1\u01f4\11\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\5\34\2\u01f5\7\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\7\0\1\u01f6\7\0"+
    "\1\u01cb\33\0\1\u01d0\101\0\1\u01cc\6\0\1\u01cc\103\0"+
    "\1\u01d1\5\0\1\u01d1\45\0\1\u01cb\33\0\1\u01d0\130\0"+
    "\1\u01cb\77\0\1\u01f7\70\0\1\u01f8\125\0\1\u01f9\73\0"+
    "\1\u01cb\10\0\1\u01cb\26\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\2\34\2\u01fa"+
    "\12\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u01fb\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\1\u01fc\10\34\1\u01fc\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u01fd\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\5\34\1\u01fe\1\0\4\34\1\u01fe\11\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\15\34\1\u01ff\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\4\0\12\155\1\157\3\155\1\157\16\155\1\157\17\155"+
    "\2\u0200\10\155\1\157\17\155\50\0\1\u0201\10\0\1\u0201"+
    "\26\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\2\34\2\u0202\12\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\12\34"+
    "\1\u0203\3\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\1\u0204\10\34\1\u0204\4\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\u0205\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\12\34\1\u0206\3\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\16\0\1\u01a4\3\0\1\u01a5\102\0"+
    "\1\u0207\3\0\1\u0208\147\0\2\u0209\27\0\1\34\1\0"+
    "\1\u020a\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\5\34\1\u020b\1\0\4\34\1\u020b\11\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\u020c"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\1\u020d\10\34\1\u020d\4\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\14\34\1\u020e"+
    "\1\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u020f\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\2\34\1\u0210\3\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\5\34\1\u0211"+
    "\1\0\4\34\1\u0211\11\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\u0212\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\1\u0213"+
    "\10\34\1\u0213\4\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\u0214\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\15\34\1\u0215"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\1\u0216"+
    "\5\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\47\0\1\u0217\46\0\1\u01cb\166\0\1\u01cb\26\0"+
    "\1\u0218\104\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\2\34\2\u0219\12\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\1\34\1\u021a"+
    "\1\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\1\34\1\u021b\1\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\1\34\1\u021c"+
    "\1\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\1\u021d\10\34\1\u021d\4\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\1\u021e"+
    "\5\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\4\0\12\155\1\157\3\155\1\157\16\155\1\157"+
    "\21\155\2\u021f\6\155\1\157\17\155\12\0\2\u0220\2\0"+
    "\1\u0220\71\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\2\34\1\u0221\3\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\5\34\1\u0222"+
    "\1\0\4\34\1\u0222\11\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\2\34\1\u0223\3\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\u0224\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\22\0\1\u0208\140\0\1\u0225\10\0\1\u0225\26\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\6\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\1\34"+
    "\1\u0226\1\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\1\u0227\10\34\1\u0227"+
    "\4\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u0228\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\1\34\1\u0229\1\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\5\34\1\u022a"+
    "\1\0\4\34\1\u022a\11\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\u022b\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\3\34\1\u022c\2\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\u022d\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\3\34\1\u022e\2\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\50\0\1\u01cb"+
    "\104\0\1\u01cb\6\0\1\u01cb\36\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\1\34\1\u022f\1\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\1\34\1\u0230\1\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\5\34\1\u0231\1\0"+
    "\4\34\1\u0231\11\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\1\34\1\u0232\1\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\5\34\2\u0233\7\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\4\34\1\u0234\1\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\4\0\12\155\1\157"+
    "\3\155\1\157\16\155\1\157\12\155\1\u0235\10\155\1\u0235"+
    "\5\155\1\157\17\155\12\0\2\u0220\2\0\1\u0220\43\0"+
    "\1\u0236\25\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\1\34\1\u0237\4\34\1\0\1\34\1\u0237"+
    "\14\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\15\34\1\u0238\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\5\34\1\u0239\1\0\4\34\1\u0239"+
    "\11\34\2\0\5\34\1\0\1\34\1\0\3\34\33\0"+
    "\1\u023a\60\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\1\u023b\5\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\1\u023c\5\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u023d\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\1\u023e\5\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\6\34\1\0\1\u023f"+
    "\10\34\1\u023f\4\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\4\34\1\u0240\1\34\1\0\16\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\1\34\1\u0241"+
    "\1\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\1\u0242\5\34\1\0\16\34\2\0\5\34"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\1\u0243\5\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\1\34\1\u0244\1\34\4\0\12\155\1\157\3\155\1\157"+
    "\10\155\1\u0245\5\155\1\157\31\155\1\157\17\155\43\0"+
    "\1\u0246\44\0\1\34\1\0\1\u0247\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\15\34\1\u0248"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\16\0\2\u023a"+
    "\2\0\1\u023a\71\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\3\34\1\u0249\2\34\1\0\16\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\3\34"+
    "\1\u024a\2\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\3\34\5\0\1\34\1\0\1\34\1\0\5\34"+
    "\7\0\1\34\17\0\6\34\1\0\16\34\2\0\1\u024b"+
    "\4\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\2\34\2\u024c\12\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\4\34\1\u024d"+
    "\1\0\1\34\1\0\3\34\5\0\1\34\1\0\1\34"+
    "\1\0\5\34\7\0\1\34\17\0\3\34\1\u024e\2\34"+
    "\1\0\16\34\2\0\5\34\1\0\1\34\1\0\3\34"+
    "\5\0\1\34\1\0\1\34\1\0\5\34\7\0\1\34"+
    "\17\0\6\34\1\0\16\34\2\0\5\34\1\0\1\34"+
    "\1\0\1\34\1\u024f\1\34\4\0\12\155\1\u0250\1\u0245"+
    "\2\155\1\u0250\16\155\1\157\31\155\1\157\17\155\44\0"+
    "\1\u0251\43\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\5\34\1\u0252\1\0\4\34\1\u0252\11\34"+
    "\2\0\5\34\1\0\1\34\1\0\3\34\5\0\1\34"+
    "\1\0\1\34\1\0\5\34\7\0\1\34\17\0\5\34"+
    "\1\u0253\1\0\4\34\1\u0253\11\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\5\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\7\34\2\u0254"+
    "\5\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\34\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\1\34\1\u0255\1\34\67\0\1\u0256\24\0\1\34\1\0"+
    "\1\u0257\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\3\34\5\0"+
    "\1\34\1\0\1\u0258\1\0\5\34\7\0\1\34\17\0"+
    "\6\34\1\0\16\34\2\0\5\34\1\0\1\34\1\0"+
    "\3\34\5\0\1\34\1\0\1\34\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\5\34\2\u0259\7\34\2\0"+
    "\5\34\1\0\1\34\1\0\3\34\5\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\6\34\1\0"+
    "\16\34\2\0\5\34\1\0\1\34\1\0\1\34\1\u025a"+
    "\1\34\70\0\1\u025b\23\0\1\34\1\0\1\34\1\0"+
    "\5\34\7\0\1\34\17\0\6\34\1\0\12\34\1\u025c"+
    "\3\34\2\0\5\34\1\0\1\34\1\0\3\34\47\0"+
    "\1\u025d\44\0\1\34\1\0\1\u025e\1\0\5\34\7\0"+
    "\1\34\17\0\6\34\1\0\16\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\67\0\1\u025f\24\0\1\34\1\0"+
    "\1\34\1\0\5\34\7\0\1\34\17\0\1\34\1\u0260"+
    "\4\34\1\0\1\34\1\u0260\14\34\2\0\5\34\1\0"+
    "\1\34\1\0\3\34\7\0\1\u0261\115\0\2\u0261\2\0"+
    "\1\u0261\7\0\1\u0262\72\0\2\u0262\2\0\1\u0262\1\0"+
    "\1\u0263\36\0\2\u0264\5\0\1\u0265\77\0\2\u0266\113\0"+
    "\1\u0267\100\0\2\u0268\113\0\1\u0269\100\0\2\u026a\113\0"+
    "\1\u026b\100\0\2\u026c\40\0\2\u026a\2\0\1\u026a\10\0"+
    "\1\u026d\136\0\2\u026e\46\0\1\u026a\154\0\1\u026a\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[34364];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\1\13\0\2\1\1\11\11\1\2\11\2\1"+
    "\2\11\37\1\2\11\2\1\1\11\6\1\1\11\7\1"+
    "\1\11\5\1\1\0\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\4\0\2\1\1\11\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\6\1\1\11\2\0\1\1\1\0\1\1\2\0\1\11"+
    "\2\0\2\1\1\0\40\1\1\0\7\1\1\11\1\1"+
    "\12\0\1\1\3\0\3\1\3\11\1\1\3\0\2\1"+
    "\1\11\1\1\1\11\3\0\5\1\1\0\1\11\2\0"+
    "\1\11\7\0\1\11\2\0\1\11\1\0\1\11\1\1"+
    "\1\0\1\11\1\0\2\11\2\1\1\11\3\0\10\1"+
    "\1\0\1\1\3\0\50\1\12\0\5\1\1\11\2\1"+
    "\1\11\4\1\1\11\1\0\1\1\1\0\2\11\1\1"+
    "\2\0\14\1\4\0\46\1\12\0\7\1\1\0\1\11"+
    "\12\1\1\11\3\0\37\1\10\0\1\11\1\0\7\1"+
    "\1\0\6\1\3\0\23\1\4\0\16\1\1\11\1\0"+
    "\15\1\2\0\7\1\1\0\4\1\1\0\20\1\1\0"+
    "\17\1\1\0\12\1\1\0\4\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[622];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    protected String heredoc = null;
    protected int heredoc_len = 0;
    private boolean asp_tags = false;
    private StateStack stack = new StateStack();

    private boolean short_tags_allowed = true;

    private LexerInput input;
    
    /*public PhpLexer5(int state){
        initialize(state);
    }*/
    /*public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
    	this.zzReader = reader;
    	this.zzBuffer = buffer;
    	this.zzMarkedPos = parameters[0];
    	this.zzPushbackPos = parameters[1];
    	this.zzCurrentPos = parameters[2];
    	this.zzStartRead = parameters[3];
    	this.zzEndRead = parameters[4];
    	this.yyline = parameters[5];  
    	initialize(parameters[6]);
    }
    */
        public PHP5ColoringLexer(LexerRestartInfo info, boolean asp_tags) {
            this.input = info.input();
            this.asp_tags = asp_tags;
            
            if(info.state() != null) {
                //reset state
                setState((LexerState)info.state());
            } else {
                //initial state
                zzState = zzLexicalState = YYINITIAL;
                stack.clear();
            }
            
        }

        public static final class LexerState  {
            final StateStack stack;
            /** the current state of the DFA */
            final int zzState;
            /** the current lexical state */
            final int zzLexicalState;
            /** remember the heredoc */
            final String heredoc;
            /** and the lenght of */
            final int heredoc_len;
            
            LexerState (StateStack stack, int zzState, int zzLexicalState, String heredoc, int heredoc_len) {
                this.stack = stack;
                this.zzState = zzState;
                this.zzLexicalState = zzLexicalState;
                this.heredoc = heredoc;
                this.heredoc_len = heredoc_len;
            }
            
            @Override
            public boolean equals(Object obj) {
                if (this == obj) {
			return true;
		}

		if (obj == null || obj.getClass() != this.getClass()) {
			return false;
		}
                
                LexerState state = (LexerState) obj;
                return (this.stack.equals(state.stack) 
                    && (this.zzState == state.zzState) 
                    && (this.zzLexicalState == state.zzLexicalState)
                    && (this.heredoc_len == state.heredoc_len)
                    && ((this.heredoc == null && state.heredoc == null) || (this.heredoc != null && state.heredoc != null && this.heredoc.equals(state.heredoc))));
            }
         
            @Override
            public int hashCode() {
                int hash = 11;
                hash = 31 * hash + this.zzState;
                hash = 31 * hash + this.zzLexicalState;
                hash = 31 * hash + this.stack.hashCode();
                hash = 31 * hash + this.heredoc_len;
                hash = 31 * hash + this.heredoc.hashCode();
                return hash;
            }
        }
        
        public LexerState getState() {
            return new LexerState(stack.createClone(), zzState, zzLexicalState, heredoc, heredoc_len);
        }
        
        public void setState(LexerState state) {
            this.stack.copyFrom(state.stack);
            this.zzState = state.zzState;
            this.zzLexicalState = state.zzLexicalState;
            this.heredoc = state.heredoc;
            this.heredoc_len = state.heredoc_len;
        }

     protected boolean isHeredocState(int state){
    	    	return state == ST_PHP_HEREDOC || state == ST_PHP_START_HEREDOC || state == ST_PHP_END_HEREDOC;
    }
    
    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }
    
    protected int getZZStartRead() {
    	return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
    	return this.zzPushbackPos;
    }

        protected void pushBack(int i) {
		yypushback(i);
	}

        protected void popState() {
		yybegin(stack.popStack());
	}

	protected void pushState(final int state) {
		stack.pushStack(getZZLexicalState());
		yybegin(state);
	}

    
 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PHP5ColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PHP5ColoringLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;


      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
            zzInput = input.read();
            
            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return PHPTokenId.T_INLINE_HTML;
          }
        case 133: break;
        case 52: 
          { popState();
    return PHPTokenId.PHPDOC_COMMENT_END;
          }
        case 134: break;
        case 55: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 135: break;
        case 9: 
          { pushState(ST_PHP_DOUBLE_QUOTES);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 136: break;
        case 47: 
          { heredoc=null;
    heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 137: break;
        case 94: 
          { return PHPTokenId.PHP_WHILE;
          }
        case 138: break;
        case 46: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	    label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_HEREDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 139: break;
        case 25: 
          { return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 140: break;
        case 84: 
          { return PHPTokenId.PHP_CONST;
          }
        case 141: break;
        case 106: 
          { return PHPTokenId.PHP_REQUIRE;
          }
        case 142: break;
        case 5: 
          { return PHPTokenId.PHP_TOKEN;
          }
        case 143: break;
        case 65: 
          { yypushback(2);
    return PHPTokenId.PHP_COMMENT;
          }
        case 144: break;
        case 72: 
          { return PHPTokenId.PHP_NULL;
          }
        case 145: break;
        case 28: 
          { if (asp_tags) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 146: break;
        case 98: 
          { return PHPTokenId.PHP_RETURN;
          }
        case 147: break;
        case 95: 
          { return PHPTokenId.PHP_CASTING;
          }
        case 148: break;
        case 123: 
          { return PHPTokenId.PHP_ENDDECLARE;
          }
        case 149: break;
        case 121: 
          { return PHPTokenId.PHP_PROTECTED;
          }
        case 150: break;
        case 70: 
          { return PHPTokenId.PHP_EVAL;
          }
        case 151: break;
        case 83: 
          { return PHPTokenId.PHP_ARRAY;
          }
        case 152: break;
        case 36: 
          { return PHPTokenId.PHP_DO;
          }
        case 153: break;
        case 110: 
          { return PHPTokenId.PHP_PRIVATE;
          }
        case 154: break;
        case 23: 
          { popState();
	return PHPTokenId.PHP_TOKEN;
          }
        case 155: break;
        case 34: 
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 156: break;
        case 114: 
          { return PHPTokenId.PHP_CONTINUE;
          }
        case 157: break;
        case 18: 
          { yypushback(1);
	yybegin(ST_PHP_NOWDOC);
          }
        case 158: break;
        case 102: 
          { return PHPTokenId.PHP_PUBLIC;
          }
        case 159: break;
        case 6: 
          { return  PHPTokenId.PHP_STRING;
          }
        case 160: break;
        case 128: 
          { return PHPTokenId.PHP_REQUIRE_ONCE;
          }
        case 161: break;
        case 3: 
          { yypushback(1);
    pushState(ST_PHP_HIGHLIGHTING_ERROR);
          }
        case 162: break;
        case 48: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==heredoc_len && yytext().substring(0,label_len).equals(heredoc)) {
        heredoc=null;
        heredoc_len=0;
        yybegin(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_NOWDOC_TAG;
    } else {
        return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
    }
          }
        case 163: break;
        case 86: 
          { return PHPTokenId.PHP_CLONE;
          }
        case 164: break;
        case 81: 
          { return PHPTokenId.PHP_BREAK;
          }
        case 165: break;
        case 56: 
          { return PHPTokenId.PHP_NEW;
          }
        case 166: break;
        case 77: 
          { return PHPTokenId.PHP_FROM;
          }
        case 167: break;
        case 116: 
          { return PHPTokenId.PHP__LINE__;
          }
        case 168: break;
        case 105: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        heredoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            heredoc_len--;
        }
        // first quate
        startString++;
        heredoc = yytext().substring(startString, heredoc_len+startString);
        yybegin(ST_PHP_START_NOWDOC);
        return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 169: break;
        case 49: 
          { heredoc=null; heredoc_len=0;
    yybegin(ST_PHP_IN_SCRIPTING);
    int back = 1;
    // mark just the label
    if (yytext().charAt(yylength() - 2)==';') {
	    back++;
    }
    yypushback(back);
    return PHPTokenId.PHP_NOWDOC_TAG;
          }
        case 170: break;
        case 100: 
          { return PHPTokenId.PHP_SWITCH;
          }
        case 171: break;
        case 41: 
          { yypushback(1);
    return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 172: break;
        case 33: 
          { pushState(ST_PHP_COMMENT);
    return PHPTokenId.PHP_COMMENT_START;
          }
        case 173: break;
        case 115: 
          { return PHPTokenId.PHP_FUNCTION;
          }
        case 174: break;
        case 22: 
          { yypushback(1);
	popState();
        if (yylength() > 0)
            return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 175: break;
        case 130: 
          { return PHPTokenId.PHP__FUNCTION__;
          }
        case 176: break;
        case 112: 
          { return PHPTokenId.PHP_ENDWHILE;
          }
        case 177: break;
        case 85: 
          { return PHPTokenId.PHP_CATCH;
          }
        case 178: break;
        case 30: 
          { return PHPTokenId.PHP_OPERATOR;
          }
        case 179: break;
        case 15: 
          { popState();
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 180: break;
        case 26: 
          { return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 181: break;
        case 78: 
          { pushState(ST_PHP_IN_SCRIPTING);
    //yybegin(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_OPENTAG;
    //return createSymbol(ASTSymbol.T_OPEN_TAG);
          }
        case 182: break;
        case 31: 
          { pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 183: break;
        case 61: 
          { return PHPTokenId.PHP_VAR;
          }
        case 184: break;
        case 13: 
          { pushState(ST_PHP_LINE_COMMENT);
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 185: break;
        case 125: 
          { return PHPTokenId.PHP_INSTANCEOF;
          }
        case 186: break;
        case 113: 
          { return PHPTokenId.PHP_ABSTRACT;
          }
        case 187: break;
        case 71: 
          { pushState(ST_PHP_DOC_COMMENT);
    yypushback(yylength()-3);
    return PHPTokenId.PHPDOC_COMMENT_START;
          }
        case 188: break;
        case 120: 
          { return PHPTokenId.PHP_INTERFACE;
          }
        case 189: break;
        case 104: 
          { return PHPTokenId.PHP_EXTENDS;
          }
        case 190: break;
        case 129: 
          { return PHPTokenId.PHP_INCLUDE_ONCE;
          }
        case 191: break;
        case 126: 
          { return PHPTokenId.PHP_IMPLEMENTS;
          }
        case 192: break;
        case 87: 
          { return PHPTokenId.PHP_CLASS;
          }
        case 193: break;
        case 66: 
          { yypushback(2); // go back to mark end of comment in the next token
        return PHPTokenId.PHPDOC_COMMENT;
          }
        case 194: break;
        case 69: 
          { return PHPTokenId.PHP_ELSE;
          }
        case 195: break;
        case 37: 
          { return PHPTokenId.PHP_IF;
          }
        case 196: break;
        case 118: 
          { return PHPTokenId.PHP_ENDSWITCH;
          }
        case 197: break;
        case 82: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
    int startString=3+bprefix;
    heredoc_len = yylength()-bprefix-3-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
    while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
        startString++;
        heredoc_len--;
    }
    // HEREDOC PHP 5.3
    if (yytext().charAt(startString) == '"') {
        heredoc_len -= 2;
        startString ++;
    }
    heredoc = yytext().substring(startString,heredoc_len+startString);
    yybegin(ST_PHP_START_HEREDOC);
    return PHPTokenId.PHP_HEREDOC_TAG;
          }
        case 198: break;
        case 12: 
          { //  if (!stack.isEmpty()) {
            
            //we are pushing state when we enter the PHP code,
            //so we need to ensure we do not pop the top most state
            if(stack.size() > 1) {
                popState();
    }
    return  PHPTokenId.PHP_CURLY_CLOSE;
          }
        case 199: break;
        case 103: 
          { return PHPTokenId.PHP_GLOBAL;
          }
        case 200: break;
        case 16: 
          { yypushback(1);
        popState();
          }
        case 201: break;
        case 93: 
          { return PHPTokenId.PHP_FINAL;
          }
        case 202: break;
        case 64: 
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
           back++;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
        back = back + heredoc_len;
        yypushback(back);
        yybegin(ST_PHP_END_NOWDOC);
    }
    else {
        yypushback(1);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 203: break;
        case 60: 
          { return PHPTokenId.PHP_FOR;
          }
        case 204: break;
        case 73: 
          { return PHPTokenId.PHP_CASE;
          }
        case 205: break;
        case 92: 
          { return PHPTokenId.PHP_FALSE;
          }
        case 206: break;
        case 20: 
          { popState();
    return PHPTokenId.PHP_STRING;
          }
        case 207: break;
        case 109: 
          { return PHPTokenId.PHP_INCLUDE;
          }
        case 208: break;
        case 90: 
          { return PHPTokenId.PHP_PRINT;
          }
        case 209: break;
        case 50: 
          { return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 210: break;
        case 43: 
          { yypushback(1);
    pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 211: break;
        case 127: 
          { return PHPTokenId.PHP__METHOD__;
          }
        case 212: break;
        case 11: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_CURLY_OPEN;
          }
        case 213: break;
        case 63: 
          { int label_len = yylength() - 1;
    int back = 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
           back++;
    }
    if (label_len > heredoc_len && yytext().substring(label_len - heredoc_len,label_len).equals(heredoc)) {
           back = back + heredoc_len;
    	   yypushback(back);
        yybegin(ST_PHP_END_HEREDOC);
    }
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 214: break;
        case 35: 
          { return PHPTokenId.PHP_AS;
          }
        case 215: break;
        case 40: 
          { pushState(ST_PHP_QUOTES_AFTER_VARIABLE);
    return PHPTokenId.PHP_VARIABLE;
          }
        case 216: break;
        case 76: 
          { return PHPTokenId.PHP_LIST;
          }
        case 217: break;
        case 32: 
          { return PHPTokenId.PHP_VARIABLE;
          }
        case 218: break;
        case 38: 
          { //popState();
        yybegin(YYINITIAL);
        if (yylength() > 2) {
            yypushback(yylength()-2);
        }
        stack.clear();
	return PHPTokenId.PHP_CLOSETAG;
          }
        case 219: break;
        case 91: 
          { return PHPTokenId.PHP_UNSET;
          }
        case 220: break;
        case 1: 
          { return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 221: break;
        case 67: 
          { return PHPTokenId.PHP_EXIT;
          }
        case 222: break;
        case 21: 
          { //the difference from the original rules comes from the fact that we took ';' out out of tokens 
	return  PHPTokenId.UNKNOWN_TOKEN;
          }
        case 223: break;
        case 111: 
          { return PHPTokenId.PHP_FOREACH;
          }
        case 224: break;
        case 58: 
          { return PHPTokenId.PHP_TRY;
          }
        case 225: break;
        case 14: 
          { return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 226: break;
        case 51: 
          { popState();
    return PHPTokenId.PHP_COMMENT_END;
          }
        case 227: break;
        case 24: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
			yypushback(1);
			break;
		default:
			popState();
	}
	 return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 228: break;
        case 75: 
          { return PHPTokenId.PHP_SELF;
          }
        case 229: break;
        case 108: 
          { return PHPTokenId.PHP_DEFAULT;
          }
        case 230: break;
        case 74: 
          { return PHPTokenId.PHP_TRUE;
          }
        case 231: break;
        case 54: 
          { if (asp_tags) {
            yybegin(YYINITIAL);
            stack.clear();
	    return PHPTokenId.PHP_CLOSETAG;
	}
	String text = yytext();
	if(text.indexOf('\r') != -1 || text.indexOf('\n') != -1 ){
		popState();
	}
	return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 232: break;
        case 53: 
          { popState();
    return PHPTokenId.PHP_LINE_COMMENT;
          }
        case 233: break;
        case 17: 
          { yypushback(1);
	yybegin(ST_PHP_HEREDOC);
          }
        case 234: break;
        case 117: 
          { return PHPTokenId.PHP__FILE__;
          }
        case 235: break;
        case 7: 
          { return  PHPTokenId.WHITESPACE;
          }
        case 236: break;
        case 57: 
          { return PHPTokenId.PHP_DIE;
          }
        case 237: break;
        case 39: 
          { return PHPTokenId.PHP_PAAMAYIM_NEKUDOTAYIM;
          }
        case 238: break;
        case 45: 
          { popState();
    pushState(ST_PHP_LOOKING_FOR_PROPERTY);
    return PHPTokenId.PHP_OBJECT_OPERATOR;
          }
        case 239: break;
        case 88: 
          { return PHPTokenId.PHP_THROW;
          }
        case 240: break;
        case 89: 
          { return PHPTokenId.PHP_ISSET;
          }
        case 241: break;
        case 42: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.PHP_TOKEN;
          }
        case 242: break;
        case 119: 
          { popState();
	return PHPTokenId.T_INLINE_HTML;
          }
        case 243: break;
        case 97: 
          { return PHPTokenId.PHP_ELSEIF;
          }
        case 244: break;
        case 19: 
          { yypushback(1);
    popState();
          }
        case 245: break;
        case 96: 
          { return PHPTokenId.PHP_ENDFOR;
          }
        case 246: break;
        case 10: 
          { pushState(ST_PHP_BACKQUOTE);
    return PHPTokenId.PHP_CONSTANT_ENCAPSED_STRING;
          }
        case 247: break;
        case 29: 
          { if (short_tags_allowed ) {
        //yybegin(ST_PHP_IN_SCRIPTING);
        pushState(ST_PHP_IN_SCRIPTING);
        return PHPTokenId.PHP_OPENTAG;
        //return createSymbol(ASTSymbol.T_OPEN_TAG);
    } else {
        //return createSymbol(ASTSymbol.T_INLINE_HTML);
        return PHPTokenId.T_INLINE_HTML;
    }
          }
        case 248: break;
        case 8: 
          { return PHPTokenId.PHP_SEMICOLON;
          }
        case 249: break;
        case 79: 
          { return PHPTokenId.PHP_ENDIF;
          }
        case 250: break;
        case 107: 
          { return PHPTokenId.PHP_DECLARE;
          }
        case 251: break;
        case 124: 
          { return PHPTokenId.PHP_ENDFOREACH;
          }
        case 252: break;
        case 122: 
          { return PHPTokenId.PHP__CLASS__;
          }
        case 253: break;
        case 27: 
          { popState();return PHPTokenId.WHITESPACE;
          }
        case 254: break;
        case 59: 
          { return PHPTokenId.PHP_USE;
          }
        case 255: break;
        case 131: 
          { return PHPTokenId.PHP_HALT_COMPILER;
          }
        case 256: break;
        case 44: 
          { yypushback(1);
	return PHPTokenId.PHP_ENCAPSED_AND_WHITESPACE;
          }
        case 257: break;
        case 62: 
          { yypushback(1);
	pushState(ST_PHP_VAR_OFFSET);
	return PHPTokenId.PHP_VARIABLE;
          }
        case 258: break;
        case 132: 
          { pushState(ST_PHP_IN_SCRIPTING);
    return PHPTokenId.T_INLINE_HTML;
          }
        case 259: break;
        case 99: 
          { return PHPTokenId.PHP_STATIC;
          }
        case 260: break;
        case 68: 
          { return PHPTokenId.PHP_ECHO;
          }
        case 261: break;
        case 4: 
          { return PHPTokenId.PHP_NUMBER;
          }
        case 262: break;
        case 101: 
          { return PHPTokenId.PHP_PARENT;
          }
        case 263: break;
        case 80: 
          { return PHPTokenId.PHP_EMPTY;
          }
        case 264: break;
        default: 
          if (zzInput == YYEOF) 
            //zzAtEOF = true;
            switch (zzLexicalState) {
            case ST_PHP_COMMENT: {
              if (input.readLength() > 0) {
                input.backup(1);  // backup eof
                return PHPTokenId.PHP_COMMENT;
              }
              else {
                  return null;
              }
            }
            case 623: break;
            case ST_PHP_DOC_COMMENT: {
              if (input.readLength() > 0) {
                    input.backup(1);  // backup eof
                    return PHPTokenId.PHPDOC_COMMENT;
                }
                else {
                    return null;
                }
            }
            case 624: break;
            default:
              {        if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return PHPTokenId.UNKNOWN_TOKEN;
        } else {
            return null;
        }
 }
            }
          
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
