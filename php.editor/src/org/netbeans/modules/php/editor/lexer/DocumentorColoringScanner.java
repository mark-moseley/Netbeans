/* The following code was generated by JFlex 1.4.1 on 3/26/08 3:10 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 * 
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 * 
 * Contributor(s):
 * 
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.editor.lexer;

import org.netbeans.modules.php.editor.PHPVersion;
import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 3/26/08 3:10 PM from the specification file
 * <tt>/space/mercurial/trunk/main/php.editor/tools/DocumentorColoringScanner.flex</tt>
 */
public class DocumentorColoringScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_IN_TAG = 1;
  public static final int ST_NO_TAG = 2;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\0\1\0\2\0\1\0\22\0\1\0\11\0\1\0\25\0"+
    "\1\1\1\2\1\6\1\3\1\20\1\4\1\25\1\14\1\12\1\17"+
    "\1\0\1\26\1\23\1\22\1\24\1\13\1\16\1\0\1\10\1\5"+
    "\1\7\1\11\1\27\1\30\1\21\1\15\7\0\1\2\1\6\1\3"+
    "\1\20\1\4\1\25\1\14\1\12\1\17\1\0\1\26\1\23\1\22"+
    "\1\24\1\13\1\16\1\0\1\10\1\5\1\7\1\11\1\27\1\30"+
    "\1\21\1\15\uff86\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\0\1\1\1\2\2\3\1\4\63\0\1\5"+
    "\27\0\1\6\15\0\1\7\1\0\1\10\6\0\1\11"+
    "\4\0\1\12\1\13\14\0\1\14\5\0\1\15\4\0"+
    "\1\16\3\0\1\17\1\0\1\20\1\0\1\21\4\0"+
    "\1\22\2\0\1\23\1\24\1\25\2\0\1\26\2\0"+
    "\1\27\6\0\1\30\4\0\1\31\3\0\1\32\1\0"+
    "\1\33\1\34\1\35\4\0\1\36\1\37\1\40\2\0"+
    "\1\41\1\42\1\43\3\0\1\44\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\144\0\175\0\226"+
    "\0\257\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e"+
    "\0\u0177\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d\0\u0226"+
    "\0\u023f\0\u0258\0\u0271\0\u028a\0\u02a3\0\u02bc\0\u02d5\0\u02ee"+
    "\0\u0307\0\u0320\0\u0339\0\u0352\0\u036b\0\u0384\0\u039d\0\u03b6"+
    "\0\u03cf\0\u03e8\0\u0401\0\u041a\0\u0433\0\u044c\0\u0465\0\u047e"+
    "\0\u0497\0\u04b0\0\u04c9\0\u04e2\0\u04fb\0\u0514\0\u052d\0\u0546"+
    "\0\u055f\0\u0578\0\u0591\0\144\0\u05aa\0\u05c3\0\u05dc\0\u05f5"+
    "\0\u060e\0\u0627\0\u0640\0\u0659\0\u0672\0\u068b\0\u06a4\0\u06bd"+
    "\0\u06d6\0\u06ef\0\u0708\0\u0721\0\u073a\0\u0753\0\u076c\0\u0785"+
    "\0\u079e\0\u07b7\0\u07d0\0\144\0\u07e9\0\u0802\0\u081b\0\u0834"+
    "\0\u084d\0\u0866\0\u087f\0\u0898\0\u08b1\0\u08ca\0\u08e3\0\u08fc"+
    "\0\u0915\0\144\0\u092e\0\144\0\u0947\0\u0960\0\u0979\0\u0992"+
    "\0\u09ab\0\u09c4\0\144\0\u09dd\0\u09f6\0\u0a0f\0\u0a28\0\144"+
    "\0\144\0\u0a41\0\u0a5a\0\u0a73\0\u0a8c\0\u0aa5\0\u0abe\0\u0ad7"+
    "\0\u0af0\0\u0b09\0\u0b22\0\u0b3b\0\u0b54\0\144\0\u0b6d\0\u0b86"+
    "\0\u0b9f\0\u0bb8\0\u0bd1\0\144\0\u0bea\0\u0c03\0\u0c1c\0\u0c35"+
    "\0\144\0\u0c4e\0\u0c67\0\u0c80\0\144\0\u0c99\0\144\0\u0cb2"+
    "\0\144\0\u0ccb\0\u0ce4\0\u0cfd\0\u0d16\0\u0d2f\0\u0d48\0\u0d61"+
    "\0\144\0\144\0\144\0\u0d7a\0\u0d93\0\144\0\u0dac\0\u0dc5"+
    "\0\144\0\u0dde\0\u0df7\0\u0e10\0\u0e29\0\u0e42\0\u0e5b\0\144"+
    "\0\u0e74\0\u0e8d\0\u0ea6\0\u0ebf\0\144\0\u0ed8\0\u0ef1\0\u0f0a"+
    "\0\144\0\u0f23\0\144\0\144\0\144\0\u0f3c\0\u0f55\0\u0f6e"+
    "\0\u0f87\0\144\0\144\0\144\0\u0fa0\0\u0fb9\0\144\0\144"+
    "\0\144\0\u0fd2\0\u0feb\0\u1004\0\144\0\144\0\144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\27\4\1\6\1\7\27\6\1\0\1\10"+
    "\27\0\1\4\1\0\27\4\33\0\1\11\1\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\2\0\1\20\1\0"+
    "\1\21\1\22\1\23\1\0\1\24\1\25\1\26\1\27"+
    "\1\0\1\30\1\0\1\10\1\0\27\10\3\0\1\31"+
    "\2\0\1\32\2\0\1\33\21\0\1\34\10\0\1\35"+
    "\36\0\1\36\13\0\1\37\2\0\1\40\1\0\1\41"+
    "\5\0\1\42\22\0\1\43\1\44\1\45\21\0\1\46"+
    "\31\0\1\47\46\0\1\50\7\0\1\51\5\0\1\52"+
    "\34\0\1\53\7\0\1\54\10\0\1\55\26\0\1\56"+
    "\1\0\1\57\43\0\1\60\13\0\1\61\45\0\1\62"+
    "\13\0\1\63\1\0\1\64\27\0\1\65\32\0\1\66"+
    "\32\0\1\67\30\0\1\70\37\0\1\71\14\0\1\72"+
    "\1\73\31\0\1\74\26\0\1\75\34\0\1\76\46\0"+
    "\1\77\13\0\1\100\31\0\1\101\40\0\1\102\17\0"+
    "\1\103\25\0\1\104\37\0\1\105\20\0\1\106\4\0"+
    "\1\107\33\0\1\110\41\0\1\111\13\0\1\112\26\0"+
    "\1\113\10\0\1\114\26\0\1\115\23\0\1\116\24\0"+
    "\1\117\20\0\1\120\26\0\1\121\31\0\1\122\1\123"+
    "\14\0\1\124\30\0\1\125\24\0\1\126\33\0\1\127"+
    "\33\0\1\130\22\0\1\131\41\0\1\132\35\0\1\133"+
    "\12\0\1\134\33\0\1\135\37\0\1\136\15\0\1\137"+
    "\40\0\1\140\30\0\1\141\30\0\1\142\26\0\1\143"+
    "\24\0\1\144\31\0\1\145\50\0\1\146\4\0\1\147"+
    "\44\0\1\150\25\0\1\151\21\0\1\152\27\0\1\153"+
    "\35\0\1\154\37\0\1\155\23\0\1\156\22\0\1\157"+
    "\52\0\1\160\6\0\1\161\30\0\1\162\26\0\1\163"+
    "\33\0\1\164\30\0\1\165\33\0\1\166\33\0\1\167"+
    "\31\0\1\170\24\0\1\171\36\0\1\172\30\0\1\173"+
    "\31\0\1\174\13\0\1\175\32\0\1\176\34\0\1\177"+
    "\50\0\1\200\10\0\1\201\22\0\1\202\30\0\1\203"+
    "\50\0\1\204\12\0\1\205\34\0\1\206\30\0\1\207"+
    "\24\0\1\210\27\0\1\211\40\0\1\212\41\0\1\213"+
    "\11\0\1\214\46\0\1\215\24\0\1\216\16\0\1\217"+
    "\25\0\1\220\36\0\1\221\33\0\1\222\34\0\1\223"+
    "\34\0\1\224\14\0\1\225\24\0\1\226\30\0\1\227"+
    "\44\0\1\230\16\0\1\231\47\0\1\232\27\0\1\233"+
    "\21\0\1\234\24\0\1\235\24\0\1\236\50\0\1\237"+
    "\7\0\1\240\45\0\1\241\15\0\1\242\36\0\1\243"+
    "\30\0\1\244\20\0\1\245\35\0\1\246\34\0\1\247"+
    "\20\0\1\250\43\0\1\251\40\0\1\252\27\0\1\253"+
    "\4\0\1\254\32\0\1\255\33\0\1\256\23\0\1\257"+
    "\30\0\1\260\32\0\1\261\35\0\1\262\43\0\1\263"+
    "\13\0\1\264\36\0\1\265\25\0\1\266\31\0\1\267"+
    "\17\0\1\270\30\0\1\271\51\0\1\272\22\0\1\273"+
    "\36\0\1\274\14\0\1\275\31\0\1\276\27\0\1\277"+
    "\45\0\1\300\14\0\1\301\34\0\1\302\20\0\1\303"+
    "\27\0\1\304\31\0\1\305\44\0\1\306\14\0\1\307"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4125];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\0\1\1\2\11\2\1\63\0\1\11\27\0"+
    "\1\11\15\0\1\11\1\0\1\11\6\0\1\11\4\0"+
    "\2\11\14\0\1\11\5\0\1\11\4\0\1\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\4\0\1\1\2\0"+
    "\3\11\2\0\1\11\2\0\1\11\6\0\1\11\4\0"+
    "\1\11\3\0\1\11\1\0\3\11\4\0\3\11\2\0"+
    "\3\11\3\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[199];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */
        private LexerInput input;

        DocumentorColoringScanner (LexerRestartInfo info) {
            this.input = info.input();

            if(info.state() != null) {
                //reset state
                setState((LexerState)info.state());
            } else {
                //initial state
                zzState = zzLexicalState = YYINITIAL;
            }
       }
        

        public int getTokenLength() {
            return yylength();
        }

        public class LexerState  {
            /** the current state of the DFA */
            final int zzState;
            /** the current lexical state */
            final int zzLexicalState;
            
            LexerState () {
                zzState =  DocumentorColoringScanner.this.zzState;
                zzLexicalState = DocumentorColoringScanner.this.zzLexicalState;
            }
            
        }
        
        public LexerState getState() {
            return new LexerState();
        }
        
        public void setState(LexerState state) {    
            this.zzState = state.zzState;
            this.zzLexicalState = state.zzLexicalState;
        }

   // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DocumentorColoringScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DocumentorColoringScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public PHPDocCommentTokenId nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

      //yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
            zzInput = input.read();
            
            if(zzInput == YYEOF) {
                break zzForAction;
            }
            
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_NAME;
          }
        case 39: break;
        case 28: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_ABSTRACT;
          }
        case 40: break;
        case 24: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_EXAMPLE;
          }
        case 41: break;
        case 21: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_GLOBAL;
          }
        case 42: break;
        case 26: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_LICENSE;
          }
        case 43: break;
        case 13: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_PARAM;
          }
        case 44: break;
        case 30: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_TUTORIAL;
          }
        case 45: break;
        case 5: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_SEE;
          }
        case 46: break;
        case 35: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_STATICVAR;
          }
        case 47: break;
        case 12: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_SINCE;
          }
        case 48: break;
        case 36: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_SUBPACKAGE;
          }
        case 49: break;
        case 17: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_AUTHOR;
          }
        case 50: break;
        case 27: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_VERSION;
          }
        case 51: break;
        case 9: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_DESC;
          }
        case 52: break;
        case 20: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_RETURN;
          }
        case 53: break;
        case 33: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_COPYRIGHT;
          }
        case 54: break;
        case 4: 
          { yybegin(YYINITIAL);
    return PHPDocCommentTokenId.PHPDOC_COMMENT;
          }
        case 55: break;
        case 14: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_MAGIC;
          }
        case 56: break;
        case 3: 
          { yybegin(ST_NO_TAG); yypushback(1);
          }
        case 57: break;
        case 38: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_FILESOURCE;
          }
        case 58: break;
        case 29: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_CATEGORY;
          }
        case 59: break;
        case 34: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_EXCEPTION;
          }
        case 60: break;
        case 22: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_IGNORE;
          }
        case 61: break;
        case 15: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_FINAL;
          }
        case 62: break;
        case 1: 
          { return PHPDocCommentTokenId.PHPDOC_COMMENT;
          }
        case 63: break;
        case 18: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_STATIC;
          }
        case 64: break;
        case 2: 
          { yybegin(ST_IN_TAG);
    yypushback(1);
          }
        case 65: break;
        case 31: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_PROPERTY;
          }
        case 66: break;
        case 16: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_ACCESS;
          }
        case 67: break;
        case 23: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_METHOD;
          }
        case 68: break;
        case 37: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_DEPRECATED;
          }
        case 69: break;
        case 6: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_VAR;
          }
        case 70: break;
        case 10: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_LINK;
          }
        case 71: break;
        case 19: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_THROWS;
          }
        case 72: break;
        case 8: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_USES;
          }
        case 73: break;
        case 25: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_PACKAGE;
          }
        case 74: break;
        case 32: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_INTERNAL;
          }
        case 75: break;
        case 7: 
          { yybegin(YYINITIAL); return PHPDocCommentTokenId.PHPDOC_TODO;
          }
        case 76: break;
        default: 
          if (zzInput == YYEOF) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
