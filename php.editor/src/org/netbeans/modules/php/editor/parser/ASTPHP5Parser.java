
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 13 13:53:03 GMT+01:00 2008
//----------------------------------------------------

package org.netbeans.modules.php.editor.parser;

import java.util.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 13 13:53:03 GMT+01:00 2008
  */
public class ASTPHP5Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ASTPHP5Parser() {super();}

  /** Constructor which sets the default scanner. */
  public ASTPHP5Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ASTPHP5Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\007\000\002\006\004\000" +
    "\002\006\002\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\006\000\002\005\003\000\002\010" +
    "\005\000\002\010\011\000\002\010\014\000\002\010\007" +
    "\000\002\010\011\000\002\010\013\000\002\010\007\000" +
    "\002\010\004\000\002\010\005\000\002\010\004\000\002" +
    "\010\005\000\002\010\004\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\010\004\000\002\010\005\000" +
    "\002\010\007\000\002\010\012\000\002\010\012\000\002" +
    "\010\007\000\002\010\003\000\002\010\017\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\122\003" +
    "\000\002\122\002\000\002\123\003\000\002\123\004\000" +
    "\002\124\012\000\002\011\003\000\002\011\005\000\002" +
    "\012\003\000\002\013\003\000\002\013\005\000\002\117" +
    "\003\000\002\120\003\000\002\044\002\000\002\044\003" +
    "\000\002\125\013\000\002\126\011\000\002\126\010\000" +
    "\002\127\003\000\002\127\004\000\002\127\004\000\002" +
    "\130\002\000\002\130\004\000\002\103\003\000\002\104" +
    "\002\000\002\104\004\000\002\131\002\000\002\131\004" +
    "\000\002\132\003\000\002\132\005\000\002\014\002\000" +
    "\002\014\004\000\002\015\003\000\002\015\004\000\002" +
    "\016\003\000\002\016\006\000\002\017\003\000\002\017" +
    "\006\000\002\020\003\000\002\020\006\000\002\021\005" +
    "\000\002\021\007\000\002\022\005\000\002\022\006\000" +
    "\002\022\006\000\002\022\007\000\002\023\002\000\002" +
    "\023\007\000\002\023\006\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\006\000\002\026\002" +
    "\000\002\026\010\000\002\027\002\000\002\027\011\000" +
    "\002\030\002\000\002\030\004\000\002\031\002\000\002" +
    "\031\005\000\002\032\003\000\002\032\002\000\002\033" +
    "\003\000\002\033\005\000\002\034\004\000\002\034\005" +
    "\000\002\034\006\000\002\034\007\000\002\133\002\000" +
    "\002\133\003\000\002\133\003\000\002\035\003\000\002" +
    "\035\002\000\002\036\003\000\002\036\003\000\002\036" +
    "\004\000\002\036\005\000\002\036\005\000\002\036\006" +
    "\000\002\037\005\000\002\037\003\000\002\040\003\000" +
    "\002\040\004\000\002\040\006\000\002\041\005\000\002" +
    "\041\007\000\002\041\003\000\002\041\005\000\002\042" +
    "\004\000\002\042\002\000\002\043\005\000\002\043\004" +
    "\000\002\043\012\000\002\043\003\000\002\112\003\000" +
    "\002\112\005\000\002\135\003\000\002\135\003\000\002" +
    "\111\002\000\002\111\003\000\002\113\003\000\002\113" +
    "\004\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\107\005\000\002\107\007\000\002\107\003\000\002" +
    "\107\005\000\002\110\007\000\002\110\006\000\002\045" +
    "\005\000\002\045\003\000\002\046\002\000\002\046\003" +
    "\000\002\047\005\000\002\047\003\000\002\050\010\000" +
    "\002\050\005\000\002\050\006\000\002\050\010\000\002" +
    "\050\005\000\002\050\004\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\050\004\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\007\000\002\050\003\000" +
    "\002\050\004\000\002\050\004\000\002\050\004\000\002" +
    "\050\004\000\002\050\004\000\002\050\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\003" +
    "\000\002\050\006\000\002\050\005\000\002\050\004\000" +
    "\002\051\006\000\002\051\010\000\002\051\010\000\002" +
    "\051\006\000\002\106\003\000\002\144\003\000\002\144" +
    "\003\000\002\146\006\000\002\146\003\000\002\150\004" +
    "\000\002\150\002\000\002\151\004\000\002\052\002\000" +
    "\002\052\004\000\002\052\005\000\002\053\002\000\002" +
    "\053\005\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\005\000" +
    "\002\055\003\000\002\055\003\000\002\055\004\000\002" +
    "\055\004\000\002\055\006\000\002\055\003\000\002\152" +
    "\005\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\005\000\002\056\005\000" +
    "\002\057\002\000\002\057\004\000\002\060\002\000\002" +
    "\060\003\000\002\061\007\000\002\061\005\000\002\061" +
    "\005\000\002\061\003\000\002\062\003\000\002\062\003" +
    "\000\002\134\003\000\002\105\003\000\002\136\003\000" +
    "\002\121\007\000\002\121\003\000\002\116\004\000\002" +
    "\116\002\000\002\140\005\000\002\115\005\000\002\115" +
    "\002\000\002\137\003\000\002\137\004\000\002\141\005" +
    "\000\002\153\003\000\002\153\003\000\002\147\003\000" +
    "\002\147\004\000\002\147\003\000\002\063\006\000\002" +
    "\063\006\000\002\063\003\000\002\064\003\000\002\064" +
    "\006\000\002\065\002\000\002\065\003\000\002\066\003" +
    "\000\002\066\003\000\002\067\006\000\002\067\006\000" +
    "\002\067\003\000\002\070\003\000\002\070\005\000\002" +
    "\071\003\000\002\071\004\000\002\072\005\000\002\072" +
    "\003\000\002\073\003\000\002\073\006\000\002\073\002" +
    "\000\002\074\002\000\002\074\004\000\002\075\007\000" +
    "\002\075\005\000\002\075\005\000\002\075\003\000\002" +
    "\075\010\000\002\075\006\000\002\075\006\000\002\075" +
    "\004\000\002\076\004\000\002\076\004\000\002\076\002" +
    "\000\002\077\003\000\002\077\006\000\002\077\005\000" +
    "\002\077\005\000\002\077\010\000\002\077\005\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\101" +
    "\006\000\002\101\006\000\002\101\004\000\002\101\004" +
    "\000\002\101\006\000\002\101\004\000\002\101\004\000" +
    "\002\142\003\000\002\142\005\000\002\145\005\000\002" +
    "\143\003\000\002\102\003\000\002\102\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02cb\000\226\002\ufffe\003\ufffe\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\021\ufffe\022\ufffe\024\ufffe\026\ufffe\030\ufffe\033" +
    "\ufffe\035\ufffe\041\ufffe\042\ufffe\043\ufffe\045\ufffe\046\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\054\ufffe\055\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\073\ufffe\074\ufffe\075\ufffe\101\ufffe\104\ufffe\105" +
    "\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\117\ufffe" +
    "\135\ufffe\155\ufffe\156\ufffe\162\ufffe\163\ufffe\165\ufffe\166" +
    "\ufffe\167\ufffe\170\ufffe\171\ufffe\172\ufffe\173\ufffe\174\ufffe" +
    "\175\ufffe\176\ufffe\201\ufffe\205\ufffe\206\ufffe\207\ufffe\213" +
    "\ufffe\216\ufffe\217\ufffe\220\ufffe\221\ufffe\001\002\000\004" +
    "\002\u02cd\001\002\000\226\002\001\003\115\004\141\005" +
    "\152\006\106\007\011\010\034\011\053\012\061\014\074" +
    "\016\127\017\122\021\120\022\044\024\033\026\101\030" +
    "\153\033\103\035\130\041\055\042\121\043\107\045\135" +
    "\046\041\050\150\051\025\052\012\054\076\055\143\056" +
    "\030\057\057\060\032\061\140\066\146\067\013\070\020" +
    "\071\045\072\047\073\132\074\006\075\035\101\064\104" +
    "\024\105\056\106\027\107\067\110\051\111\124\112\105" +
    "\117\063\135\010\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\205\042\206\062\207" +
    "\017\213\145\216\100\217\112\220\060\221\116\001\002" +
    "\000\106\032\uff06\034\uff06\065\uff06\102\uff06\113\uff06\114" +
    "\uff06\115\uff06\116\uff06\134\uff06\135\uff06\136\uff06\137\uff06" +
    "\140\uff06\141\uff06\142\uff06\143\uff06\144\uff06\145\uff06\146" +
    "\uff06\147\uff06\150\uff06\151\uff06\152\uff06\153\uff06\154\uff06" +
    "\155\uff06\156\uff06\157\uff06\160\uff06\161\uff06\164\uff06\200" +
    "\uff06\214\uff06\215\uff06\001\002\000\004\213\u02ca\001\002" +
    "\000\254\002\uffda\003\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\014\uffda\016\uffda\017\uffda" +
    "\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\033\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\042\uffda\043\uffda\045\uffda\046\uffda\050" +
    "\uffda\051\uffda\052\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\066\uffda\067\uffda\070\uffda\071\uffda\072" +
    "\uffda\073\uffda\074\uffda\075\uffda\101\uffda\102\uffda\104\uffda" +
    "\105\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda\117" +
    "\uffda\135\uffda\155\uffda\156\uffda\162\uffda\163\uffda\165\uffda" +
    "\166\uffda\167\uffda\170\uffda\171\uffda\172\uffda\173\uffda\174" +
    "\uffda\175\uffda\176\uffda\201\uffda\202\uffda\203\uffda\204\uffda" +
    "\205\uffda\206\uffda\207\uffda\213\uffda\216\uffda\217\uffda\220" +
    "\uffda\221\uffda\001\002\000\106\032\uff09\034\uff09\065\uff09" +
    "\102\uff09\113\uff09\114\uff09\115\uff09\116\uff09\134\uff09\135" +
    "\uff09\136\uff09\137\uff09\140\uff09\141\uff09\142\uff09\143\uff09" +
    "\144\uff09\145\uff09\146\uff09\147\uff09\150\uff09\151\uff09\152" +
    "\uff09\153\uff09\154\uff09\155\uff09\156\uff09\157\uff09\160\uff09" +
    "\161\uff09\164\uff09\200\uff09\214\uff09\215\uff09\001\002\000" +
    "\006\012\u02bf\216\u02c0\001\002\000\004\213\u02aa\001\002" +
    "\000\134\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\106\032\uff1f\034\uff1f\065\uff1f\102\uff1f" +
    "\113\uff1f\114\uff1f\115\uff1f\116\uff1f\134\uff1f\135\uff1f\136" +
    "\uff1f\137\uff1f\140\uff1f\141\uff1f\142\uff1f\143\uff1f\144\uff1f" +
    "\145\uff1f\146\uff1f\147\uff1f\150\uff1f\151\uff1f\152\uff1f\153" +
    "\uff1f\154\uff1f\155\uff1f\156\uff1f\157\uff1f\160\uff1f\161\uff1f" +
    "\164\uff1f\200\uff1f\214\uff1f\215\uff1f\001\002\000\070\032" +
    "\260\114\247\115\267\116\240\134\244\135\u02a8\136\241" +
    "\137\261\140\242\141\251\142\262\143\266\144\253\145" +
    "\236\146\250\147\265\150\263\151\245\152\264\153\257" +
    "\154\252\155\270\156\246\157\256\160\254\161\237\164" +
    "\243\001\002\000\004\060\u02a7\001\002\000\106\032\uff05" +
    "\034\uff05\065\uff05\102\uff05\113\uff05\114\uff05\115\uff05\116" +
    "\uff05\134\uff05\135\uff05\136\uff05\137\uff05\140\uff05\141\uff05" +
    "\142\uff05\143\uff05\144\uff05\145\uff05\146\uff05\147\uff05\150" +
    "\uff05\151\uff05\152\uff05\153\uff05\154\uff05\155\uff05\156\uff05" +
    "\157\uff05\160\uff05\161\uff05\164\uff05\200\uff05\214\uff05\215" +
    "\uff05\001\002\000\146\032\ufed9\034\ufed9\064\ufed9\065\ufed9" +
    "\102\ufed9\113\ufed9\114\ufed9\115\ufed9\116\ufed9\120\ufed9\121" +
    "\ufed9\122\ufed9\123\ufed9\124\ufed9\125\ufed9\126\ufed9\127\ufed9" +
    "\130\ufed9\131\ufed9\132\ufed9\133\ufed9\134\ufed9\135\ufed9\136" +
    "\ufed9\137\ufed9\140\ufed9\141\ufed9\142\ufed9\143\ufed9\144\ufed9" +
    "\145\ufed9\146\ufed9\147\ufed9\150\ufed9\151\ufed9\152\ufed9\153" +
    "\ufed9\154\ufed9\155\ufed9\156\ufed9\157\ufed9\160\ufed9\161\ufed9" +
    "\164\ufed9\165\ufed9\166\ufed9\200\ufed9\213\ufed9\214\ufed9\215" +
    "\ufed9\001\002\000\254\002\uffca\003\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca\016" +
    "\uffca\017\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045\uffca" +
    "\046\uffca\050\uffca\051\uffca\052\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\101\uffca\102" +
    "\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca" +
    "\112\uffca\117\uffca\135\uffca\155\uffca\156\uffca\162\uffca\163" +
    "\uffca\165\uffca\166\uffca\167\uffca\170\uffca\171\uffca\172\uffca" +
    "\173\uffca\174\uffca\175\uffca\176\uffca\201\uffca\202\uffca\203" +
    "\uffca\204\uffca\205\uffca\206\uffca\207\uffca\213\uffca\216\uffca" +
    "\217\uffca\220\uffca\221\uffca\001\002\000\142\032\ufeea\034" +
    "\ufeea\065\ufeea\102\ufeea\113\ufeea\114\ufeea\115\ufeea\116\ufeea" +
    "\120\u012c\121\u012f\122\u012d\123\u0136\124\u0130\125\u0135\126" +
    "\u0132\127\u0134\130\u012e\131\u012b\132\u0131\133\u0133\134\ufeea" +
    "\135\ufeea\136\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea\143" +
    "\ufeea\144\ufeea\145\ufeea\146\ufeea\147\ufeea\150\ufeea\151\ufeea" +
    "\152\ufeea\153\ufeea\154\ufeea\155\ufeea\156\ufeea\157\ufeea\160" +
    "\ufeea\161\ufeea\164\ufeea\165\ufee8\166\ufee8\200\ufeea\214\ufeea" +
    "\215\ufeea\001\002\000\254\002\uffd6\003\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6" +
    "\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\050\uffd6\051\uffd6\052\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\066\uffd6\067\uffd6\070" +
    "\uffd6\071\uffd6\072\uffd6\073\uffd6\074\uffd6\075\uffd6\101\uffd6" +
    "\102\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111" +
    "\uffd6\112\uffd6\117\uffd6\135\uffd6\155\uffd6\156\uffd6\162\uffd6" +
    "\163\uffd6\165\uffd6\166\uffd6\167\uffd6\170\uffd6\171\uffd6\172" +
    "\uffd6\173\uffd6\174\uffd6\175\uffd6\176\uffd6\201\uffd6\202\uffd6" +
    "\203\uffd6\204\uffd6\205\uffd6\206\uffd6\207\uffd6\213\uffd6\216" +
    "\uffd6\217\uffd6\220\uffd6\221\uffd6\001\002\000\006\016\u02a3" +
    "\213\u02a1\001\002\000\134\004\141\006\106\007\011\010" +
    "\034\011\053\012\061\016\127\033\103\055\143\056\030" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\105\056\106\027\107\067\110\051\111\124" +
    "\112\105\117\063\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\004\213" +
    "\u029c\001\002\000\004\103\u029a\001\002\000\004\010\uffc4" +
    "\001\002\000\004\213\u0289\001\002\000\112\032\ufea2\034" +
    "\ufea2\065\ufea2\102\ufea2\103\uff17\113\ufea2\114\ufea2\115\ufea2" +
    "\116\ufea2\134\ufea2\135\ufea2\136\ufea2\137\ufea2\140\ufea2\141" +
    "\ufea2\142\ufea2\143\ufea2\144\ufea2\145\ufea2\146\ufea2\147\ufea2" +
    "\150\ufea2\151\ufea2\152\ufea2\153\ufea2\154\ufea2\155\ufea2\156" +
    "\ufea2\157\ufea2\160\ufea2\161\ufea2\164\ufea2\200\ufea2\213\ufea2" +
    "\214\ufea2\215\ufea2\001\002\000\014\012\ufeb7\015\ufeb7\076" +
    "\ufeb7\077\ufeb7\100\ufeb7\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\144\032" +
    "\ufedd\034\ufedd\064\ufedd\065\ufedd\102\ufedd\113\ufedd\114\ufedd" +
    "\115\ufedd\116\ufedd\120\ufedd\121\ufedd\122\ufedd\123\ufedd\124" +
    "\ufedd\125\ufedd\126\ufedd\127\ufedd\130\ufedd\131\ufedd\132\ufedd" +
    "\133\ufedd\134\ufedd\135\ufedd\136\ufedd\137\ufedd\140\ufedd\141" +
    "\ufedd\142\ufedd\143\ufedd\144\ufedd\145\ufedd\146\ufedd\147\ufedd" +
    "\150\ufedd\151\ufedd\152\ufedd\153\ufedd\154\ufedd\155\ufedd\156" +
    "\ufedd\157\ufedd\160\ufedd\161\ufedd\164\ufedd\165\ufedd\166\ufedd" +
    "\200\ufedd\214\ufedd\215\ufedd\001\002\000\134\004\141\006" +
    "\106\007\011\010\034\011\053\012\061\016\127\033\103" +
    "\055\143\056\030\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\213" +
    "\145\216\100\217\112\220\060\221\116\001\002\000\004" +
    "\101\u026e\001\002\000\004\012\u0265\001\002\000\144\032" +
    "\ufedc\034\ufedc\064\ufedc\065\ufedc\102\ufedc\113\ufedc\114\ufedc" +
    "\115\ufedc\116\ufedc\120\ufedc\121\ufedc\122\ufedc\123\ufedc\124" +
    "\ufedc\125\ufedc\126\ufedc\127\ufedc\130\ufedc\131\ufedc\132\ufedc" +
    "\133\ufedc\134\ufedc\135\ufedc\136\ufedc\137\ufedc\140\ufedc\141" +
    "\ufedc\142\ufedc\143\ufedc\144\ufedc\145\ufedc\146\ufedc\147\ufedc" +
    "\150\ufedc\151\ufedc\152\ufedc\153\ufedc\154\ufedc\155\ufedc\156" +
    "\ufedc\157\ufedc\160\ufedc\161\ufedc\164\ufedc\165\ufedc\166\ufedc" +
    "\200\ufedc\214\ufedc\215\ufedc\001\002\000\004\213\u025c\001" +
    "\002\000\106\032\uff04\034\uff04\065\uff04\102\uff04\113\uff04" +
    "\114\uff04\115\uff04\116\uff04\134\uff04\135\uff04\136\uff04\137" +
    "\uff04\140\uff04\141\uff04\142\uff04\143\uff04\144\uff04\145\uff04" +
    "\146\uff04\147\uff04\150\uff04\151\uff04\152\uff04\153\uff04\154" +
    "\uff04\155\uff04\156\uff04\157\uff04\160\uff04\161\uff04\164\uff04" +
    "\200\uff04\214\uff04\215\uff04\001\002\000\004\010\u0252\001" +
    "\002\000\106\032\uff03\034\uff03\065\uff03\102\uff03\113\uff03" +
    "\114\uff03\115\uff03\116\uff03\134\uff03\135\uff03\136\uff03\137" +
    "\uff03\140\uff03\141\uff03\142\uff03\143\uff03\144\uff03\145\uff03" +
    "\146\uff03\147\uff03\150\uff03\151\uff03\152\uff03\153\uff03\154" +
    "\uff03\155\uff03\156\uff03\157\uff03\160\uff03\161\uff03\164\uff03" +
    "\200\uff03\214\uff03\215\uff03\001\002\000\144\032\ufee6\034" +
    "\ufee6\064\u0247\065\ufee6\102\ufee6\113\ufee6\114\ufee6\115\ufee6" +
    "\116\ufee6\120\ufee6\121\ufee6\122\ufee6\123\ufee6\124\ufee6\125" +
    "\ufee6\126\ufee6\127\ufee6\130\ufee6\131\ufee6\132\ufee6\133\ufee6" +
    "\134\ufee6\135\ufee6\136\ufee6\137\ufee6\140\ufee6\141\ufee6\142" +
    "\ufee6\143\ufee6\144\ufee6\145\ufee6\146\ufee6\147\ufee6\150\ufee6" +
    "\151\ufee6\152\ufee6\153\ufee6\154\ufee6\155\ufee6\156\ufee6\157" +
    "\ufee6\160\ufee6\161\ufee6\164\ufee6\165\ufee6\166\ufee6\200\ufee6" +
    "\214\ufee6\215\ufee6\001\002\000\004\213\u0244\001\002\000" +
    "\012\010\034\012\061\105\056\216\100\001\002\000\106" +
    "\032\ufef9\034\ufef9\065\ufef9\102\ufef9\113\ufef9\114\ufef9\115" +
    "\ufef9\116\ufef9\134\ufef9\135\ufef9\136\ufef9\137\ufef9\140\ufef9" +
    "\141\ufef9\142\ufef9\143\ufef9\144\ufef9\145\ufef9\146\ufef9\147" +
    "\ufef9\150\ufef9\151\ufef9\152\ufef9\153\ufef9\154\ufef9\155\ufef9" +
    "\156\ufef9\157\ufef9\160\ufef9\161\ufef9\164\ufef9\200\ufef9\214" +
    "\ufef9\215\ufef9\001\002\000\152\032\ufedb\034\ufedb\064\ufedb" +
    "\065\ufedb\101\310\102\ufedb\113\ufedb\114\ufedb\115\ufedb\116" +
    "\ufedb\120\ufedb\121\ufedb\122\ufedb\123\ufedb\124\ufedb\125\ufedb" +
    "\126\ufedb\127\ufedb\130\ufedb\131\ufedb\132\ufedb\133\ufedb\134" +
    "\ufedb\135\ufedb\136\ufedb\137\ufedb\140\ufedb\141\ufedb\142\ufedb" +
    "\143\ufedb\144\ufedb\145\ufedb\146\ufedb\147\ufedb\150\ufedb\151" +
    "\ufedb\152\ufedb\153\ufedb\154\ufedb\155\ufedb\156\ufedb\157\ufedb" +
    "\160\ufedb\161\ufedb\164\ufedb\165\ufedb\166\ufedb\177\311\200" +
    "\ufedb\213\ufee0\214\ufedb\215\ufedb\001\002\000\136\004\141" +
    "\006\106\007\011\010\034\011\053\012\061\016\127\033" +
    "\103\055\143\056\030\066\146\067\013\070\020\071\045" +
    "\072\047\073\132\074\006\075\035\105\056\106\027\107" +
    "\067\110\051\111\124\112\105\117\063\135\u0240\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\170\012\ufea1\015\ufea1\032\ufea1\034\ufea1\064\ufea1" +
    "\065\ufea1\076\ufea1\077\ufea1\100\ufea1\101\ufea1\102\ufea1\113" +
    "\ufea1\114\ufea1\115\ufea1\116\ufea1\120\ufea1\121\ufea1\122\ufea1" +
    "\123\ufea1\124\ufea1\125\ufea1\126\ufea1\127\ufea1\130\ufea1\131" +
    "\ufea1\132\ufea1\133\ufea1\134\ufea1\135\ufea1\136\ufea1\137\ufea1" +
    "\140\ufea1\141\ufea1\142\ufea1\143\ufea1\144\ufea1\145\ufea1\146" +
    "\ufea1\147\ufea1\150\ufea1\151\ufea1\152\ufea1\153\ufea1\154\ufea1" +
    "\155\ufea1\156\ufea1\157\ufea1\160\ufea1\161\ufea1\164\ufea1\165" +
    "\ufea1\166\ufea1\177\ufea1\200\ufea1\213\ufea1\214\ufea1\215\ufea1" +
    "\217\ufea1\220\ufea1\001\002\000\004\213\u023c\001\002\000" +
    "\014\012\ufeb7\015\ufeb7\077\ufeb7\100\ufeb7\220\ufeb7\001\002" +
    "\000\170\012\ufea3\015\ufea3\032\ufea3\034\ufea3\064\ufea3\065" +
    "\ufea3\076\ufea3\077\ufea3\100\ufea3\101\ufea3\102\ufea3\113\ufea3" +
    "\114\ufea3\115\ufea3\116\ufea3\120\ufea3\121\ufea3\122\ufea3\123" +
    "\ufea3\124\ufea3\125\ufea3\126\ufea3\127\ufea3\130\ufea3\131\ufea3" +
    "\132\ufea3\133\ufea3\134\ufea3\135\ufea3\136\ufea3\137\ufea3\140" +
    "\ufea3\141\ufea3\142\ufea3\143\ufea3\144\ufea3\145\ufea3\146\ufea3" +
    "\147\ufea3\150\ufea3\151\ufea3\152\ufea3\153\ufea3\154\ufea3\155" +
    "\ufea3\156\ufea3\157\ufea3\160\ufea3\161\ufea3\164\ufea3\165\ufea3" +
    "\166\ufea3\177\ufea3\200\ufea3\213\ufea3\214\ufea3\215\ufea3\217" +
    "\ufea3\220\ufea3\001\002\000\004\060\u0239\001\002\000\134" +
    "\004\141\006\106\007\011\010\034\011\053\012\061\016" +
    "\127\033\103\055\143\056\030\066\146\067\013\070\020" +
    "\071\045\072\047\073\132\074\006\075\035\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\226\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\017\ufff8\021" +
    "\ufff8\022\ufff8\024\ufff8\026\ufff8\030\ufff8\033\ufff8\035\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8\050\ufff8\051" +
    "\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\101\ufff8\102\ufff8\104\ufff8\105\ufff8" +
    "\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\117\ufff8\135" +
    "\ufff8\155\ufff8\156\ufff8\162\ufff8\163\ufff8\165\ufff8\166\ufff8" +
    "\167\ufff8\170\ufff8\171\ufff8\172\ufff8\173\ufff8\174\ufff8\175" +
    "\ufff8\176\ufff8\201\ufff8\205\ufff8\206\ufff8\207\ufff8\213\ufff8" +
    "\216\ufff8\217\ufff8\220\ufff8\221\ufff8\001\002\000\106\032" +
    "\uff29\034\uff29\065\uff29\102\uff29\113\uff29\114\uff29\115\uff29" +
    "\116\uff29\134\uff29\135\uff29\136\uff29\137\uff29\140\uff29\141" +
    "\uff29\142\uff29\143\uff29\144\uff29\145\uff29\146\uff29\147\uff29" +
    "\150\uff29\151\uff29\152\uff29\153\uff29\154\uff29\155\uff29\156" +
    "\uff29\157\uff29\160\uff29\161\uff29\164\uff29\200\uff29\214\uff29" +
    "\215\uff29\001\002\000\134\004\141\006\106\007\011\010" +
    "\034\011\053\012\061\016\127\033\103\055\143\056\030" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\105\056\106\027\107\067\110\051\111\124" +
    "\112\105\117\063\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\006\012" +
    "\061\216\324\001\002\000\134\004\141\006\106\007\011" +
    "\010\034\011\053\012\061\016\127\033\103\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\134\004\141\006" +
    "\106\007\011\010\034\011\053\012\061\016\127\033\103" +
    "\055\143\056\030\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\213" +
    "\145\216\100\217\112\220\060\221\116\001\002\000\106" +
    "\032\ufef8\034\ufef8\065\ufef8\102\ufef8\113\ufef8\114\ufef8\115" +
    "\ufef8\116\ufef8\134\ufef8\135\ufef8\136\ufef8\137\ufef8\140\ufef8" +
    "\141\ufef8\142\ufef8\143\ufef8\144\ufef8\145\ufef8\146\ufef8\147" +
    "\ufef8\150\ufef8\151\ufef8\152\ufef8\153\ufef8\154\ufef8\155\ufef8" +
    "\156\ufef8\157\ufef8\160\ufef8\161\ufef8\164\ufef8\200\ufef8\214" +
    "\ufef8\215\ufef8\001\002\000\254\002\uffe1\003\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\045\uffe1\046\uffe1\050\uffe1\051\uffe1\052\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\101" +
    "\uffe1\102\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1" +
    "\111\uffe1\112\uffe1\117\uffe1\135\uffe1\155\uffe1\156\uffe1\162" +
    "\uffe1\163\uffe1\165\uffe1\166\uffe1\167\uffe1\170\uffe1\171\uffe1" +
    "\172\uffe1\173\uffe1\174\uffe1\175\uffe1\176\uffe1\201\uffe1\202" +
    "\uffe1\203\uffe1\204\uffe1\205\uffe1\206\uffe1\207\uffe1\213\uffe1" +
    "\216\uffe1\217\uffe1\220\uffe1\221\uffe1\001\002\000\010\010" +
    "\306\012\061\216\100\001\002\000\004\213\u0227\001\002" +
    "\000\006\165\u0225\166\u0226\001\002\000\010\012\ufeca\101" +
    "\325\216\ufeca\001\002\000\004\213\u020e\001\002\000\226" +
    "\002\ufffc\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\014\ufffc\016\ufffc\017\ufffc\021\ufffc" +
    "\022\ufffc\024\ufffc\026\ufffc\030\ufffc\033\ufffc\035\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061" +
    "\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc" +
    "\074\ufffc\075\ufffc\101\ufffc\104\ufffc\105\ufffc\106\ufffc\107" +
    "\ufffc\110\ufffc\111\ufffc\112\ufffc\117\ufffc\135\ufffc\155\ufffc" +
    "\156\ufffc\162\ufffc\163\ufffc\165\ufffc\166\ufffc\167\ufffc\170" +
    "\ufffc\171\ufffc\172\ufffc\173\ufffc\174\ufffc\175\ufffc\176\ufffc" +
    "\201\ufffc\205\ufffc\206\ufffc\207\ufffc\213\ufffc\216\ufffc\217" +
    "\ufffc\220\ufffc\221\ufffc\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\134\004" +
    "\141\006\106\007\011\010\034\011\053\012\061\016\127" +
    "\033\103\055\143\056\030\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\155\104\156" +
    "\066\162\142\163\014\165\052\166\147\167\026\170\131" +
    "\171\040\172\126\173\072\174\134\175\071\176\036\201" +
    "\075\213\145\216\100\217\112\220\060\221\116\001\002" +
    "\000\134\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\106\032\uff0a\034\uff0a\065\uff0a\102\uff0a" +
    "\113\uff0a\114\uff0a\115\uff0a\116\uff0a\134\uff0a\135\uff0a\136" +
    "\uff0a\137\uff0a\140\uff0a\141\uff0a\142\uff0a\143\uff0a\144\uff0a" +
    "\145\uff0a\146\uff0a\147\uff0a\150\uff0a\151\uff0a\152\uff0a\153" +
    "\uff0a\154\uff0a\155\uff0a\156\uff0a\157\uff0a\160\uff0a\161\uff0a" +
    "\164\uff0a\200\uff0a\214\uff0a\215\uff0a\001\002\000\010\010" +
    "\uffc9\105\uffc9\142\u01c1\001\002\000\106\032\ufef7\034\ufef7" +
    "\065\ufef7\102\ufef7\113\ufef7\114\ufef7\115\ufef7\116\ufef7\134" +
    "\ufef7\135\ufef7\136\ufef7\137\ufef7\140\ufef7\141\ufef7\142\ufef7" +
    "\143\ufef7\144\ufef7\145\ufef7\146\ufef7\147\ufef7\150\ufef7\151" +
    "\ufef7\152\ufef7\153\ufef7\154\ufef7\155\ufef7\156\ufef7\157\ufef7" +
    "\160\ufef7\161\ufef7\164\ufef7\200\ufef7\214\ufef7\215\ufef7\001" +
    "\002\000\254\002\ufff3\003\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\014\ufff3\016\ufff3\017" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\033\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\054\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\061\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3" +
    "\072\ufff3\073\ufff3\074\ufff3\075\ufff3\101\ufff3\102\ufff3\104" +
    "\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\112\ufff3" +
    "\117\ufff3\135\ufff3\155\ufff3\156\ufff3\162\ufff3\163\ufff3\165" +
    "\ufff3\166\ufff3\167\ufff3\170\ufff3\171\ufff3\172\ufff3\173\ufff3" +
    "\174\ufff3\175\ufff3\176\ufff3\201\ufff3\202\ufff3\203\ufff3\204" +
    "\ufff3\205\ufff3\206\ufff3\207\ufff3\213\ufff3\216\ufff3\217\ufff3" +
    "\220\ufff3\221\ufff3\001\002\000\014\012\ufeb7\015\ufeb7\077" +
    "\ufeb7\100\ufeb7\217\ufeb7\001\002\000\152\032\ufed5\034\ufed5" +
    "\064\ufed5\065\ufed5\101\ufed5\102\ufed5\113\ufed5\114\ufed5\115" +
    "\ufed5\116\ufed5\120\ufed5\121\ufed5\122\ufed5\123\ufed5\124\ufed5" +
    "\125\ufed5\126\ufed5\127\ufed5\130\ufed5\131\ufed5\132\ufed5\133" +
    "\ufed5\134\ufed5\135\ufed5\136\ufed5\137\ufed5\140\ufed5\141\ufed5" +
    "\142\ufed5\143\ufed5\144\ufed5\145\ufed5\146\ufed5\147\ufed5\150" +
    "\ufed5\151\ufed5\152\ufed5\153\ufed5\154\ufed5\155\ufed5\156\ufed5" +
    "\157\ufed5\160\ufed5\161\ufed5\164\ufed5\165\ufed5\166\ufed5\177" +
    "\ufed5\200\ufed5\213\ufed5\214\ufed5\215\ufed5\001\002\000\004" +
    "\010\u01a5\001\002\000\254\002\uffd7\003\uffd7\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\014\uffd7" +
    "\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\045" +
    "\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\101\uffd7" +
    "\102\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7\110\uffd7\111" +
    "\uffd7\112\uffd7\117\uffd7\135\uffd7\155\uffd7\156\uffd7\162\uffd7" +
    "\163\uffd7\165\uffd7\166\uffd7\167\uffd7\170\uffd7\171\uffd7\172" +
    "\uffd7\173\uffd7\174\uffd7\175\uffd7\176\uffd7\201\uffd7\202\uffd7" +
    "\203\uffd7\204\uffd7\205\uffd7\206\uffd7\207\uffd7\213\uffd7\216" +
    "\uffd7\217\uffd7\220\uffd7\221\uffd7\001\002\000\004\015\u01a3" +
    "\001\002\000\152\032\ufed6\034\ufed6\064\ufed6\065\ufed6\101" +
    "\ufed6\102\ufed6\113\ufed6\114\ufed6\115\ufed6\116\ufed6\120\ufed6" +
    "\121\ufed6\122\ufed6\123\ufed6\124\ufed6\125\ufed6\126\ufed6\127" +
    "\ufed6\130\ufed6\131\ufed6\132\ufed6\133\ufed6\134\ufed6\135\ufed6" +
    "\136\ufed6\137\ufed6\140\ufed6\141\ufed6\142\ufed6\143\ufed6\144" +
    "\ufed6\145\ufed6\146\ufed6\147\ufed6\150\ufed6\151\ufed6\152\ufed6" +
    "\153\ufed6\154\ufed6\155\ufed6\156\ufed6\157\ufed6\160\ufed6\161" +
    "\ufed6\164\ufed6\165\ufed6\166\ufed6\177\ufed6\200\ufed6\213\ufed6" +
    "\214\ufed6\215\ufed6\001\002\000\210\003\115\004\141\005" +
    "\152\006\106\007\011\010\034\011\053\012\061\014\074" +
    "\016\127\017\122\021\120\022\044\024\033\026\101\030" +
    "\153\033\103\035\130\041\055\042\121\045\135\046\041" +
    "\050\150\051\025\052\012\054\076\055\143\056\030\066" +
    "\146\067\013\070\020\071\045\072\047\073\132\074\006" +
    "\075\035\101\064\104\024\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\135\010\155\104\156\066" +
    "\162\142\163\014\165\052\166\147\167\026\170\131\171" +
    "\040\172\126\173\072\174\134\175\071\176\036\201\075" +
    "\205\042\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\136\004\141\006\106\007\011\010\034\011\053" +
    "\012\061\016\127\033\103\055\143\056\030\066\146\067" +
    "\013\070\020\071\045\072\047\073\132\074\006\075\035" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\135\u019a\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\134\004\141\006\106\007" +
    "\011\010\034\011\053\012\061\016\127\033\103\055\143" +
    "\056\030\066\146\067\013\070\020\071\045\072\047\073" +
    "\132\074\006\075\035\105\056\106\027\107\067\110\051" +
    "\111\124\112\105\117\063\155\104\156\066\162\142\163" +
    "\014\165\052\166\147\167\026\170\131\171\040\172\126" +
    "\173\072\174\134\175\071\176\036\201\075\213\145\216" +
    "\100\217\112\220\060\221\116\001\002\000\226\002\ufffb" +
    "\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb" +
    "\024\ufffb\026\ufffb\030\ufffb\033\ufffb\035\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\101\ufffb\104\ufffb\105\ufffb\106\ufffb\107\ufffb\110" +
    "\ufffb\111\ufffb\112\ufffb\117\ufffb\135\ufffb\155\ufffb\156\ufffb" +
    "\162\ufffb\163\ufffb\165\ufffb\166\ufffb\167\ufffb\170\ufffb\171" +
    "\ufffb\172\ufffb\173\ufffb\174\ufffb\175\ufffb\176\ufffb\201\ufffb" +
    "\205\ufffb\206\ufffb\207\ufffb\213\ufffb\216\ufffb\217\ufffb\220" +
    "\ufffb\221\ufffb\001\002\000\134\004\141\006\106\007\011" +
    "\010\034\011\053\012\061\016\127\033\103\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\110\032\ufefa\034" +
    "\ufefa\065\ufefa\102\ufefa\113\ufefa\114\ufefa\115\ufefa\116\ufefa" +
    "\134\ufefa\135\ufefa\136\ufefa\137\ufefa\140\ufefa\141\ufefa\142" +
    "\ufefa\143\ufefa\144\ufefa\145\ufefa\146\ufefa\147\ufefa\150\ufefa" +
    "\151\ufefa\152\ufefa\153\ufefa\154\ufefa\155\ufefa\156\ufefa\157" +
    "\ufefa\160\ufefa\161\ufefa\164\ufefa\200\ufefa\213\u0153\214\ufefa" +
    "\215\ufefa\001\002\000\134\004\141\006\106\007\011\010" +
    "\034\011\053\012\061\016\127\033\103\055\143\056\030" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\105\056\106\027\107\067\110\051\111\124" +
    "\112\105\117\063\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\106\032\uff08\034\uff08" +
    "\065\uff08\102\uff08\113\uff08\114\uff08\115\uff08\116\uff08\134" +
    "\uff08\135\uff08\136\uff08\137\uff08\140\uff08\141\uff08\142\uff08" +
    "\143\uff08\144\uff08\145\uff08\146\uff08\147\uff08\150\uff08\151" +
    "\uff08\152\uff08\153\uff08\154\uff08\155\uff08\156\uff08\157\uff08" +
    "\160\uff08\161\uff08\164\uff08\200\uff08\214\uff08\215\uff08\001" +
    "\002\000\004\213\u0178\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\106\032" +
    "\uff07\034\uff07\065\uff07\102\uff07\113\uff07\114\uff07\115\uff07" +
    "\116\uff07\134\uff07\135\uff07\136\uff07\137\uff07\140\uff07\141" +
    "\uff07\142\uff07\143\uff07\144\uff07\145\uff07\146\uff07\147\uff07" +
    "\150\uff07\151\uff07\152\uff07\153\uff07\154\uff07\155\uff07\156" +
    "\uff07\157\uff07\160\uff07\161\uff07\164\uff07\200\uff07\214\uff07" +
    "\215\uff07\001\002\000\254\002\uffcb\003\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb" +
    "\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\045" +
    "\uffcb\046\uffcb\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\066\uffcb\067\uffcb\070" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\101\uffcb" +
    "\102\uffcb\104\uffcb\105\uffcb\106\uffcb\107\uffcb\110\uffcb\111" +
    "\uffcb\112\uffcb\117\uffcb\135\uffcb\155\uffcb\156\uffcb\162\uffcb" +
    "\163\uffcb\165\uffcb\166\uffcb\167\uffcb\170\uffcb\171\uffcb\172" +
    "\uffcb\173\uffcb\174\uffcb\175\uffcb\176\uffcb\201\uffcb\202\uffcb" +
    "\203\uffcb\204\uffcb\205\uffcb\206\uffcb\207\uffcb\213\uffcb\216" +
    "\uffcb\217\uffcb\220\uffcb\221\uffcb\001\002\000\134\004\141" +
    "\006\106\007\011\010\034\011\053\012\061\016\127\033" +
    "\103\055\143\056\030\066\146\067\013\070\020\071\045" +
    "\072\047\073\132\074\006\075\035\105\056\106\027\107" +
    "\067\110\051\111\124\112\105\117\063\155\104\156\066" +
    "\162\142\163\014\165\052\166\147\167\026\170\131\171" +
    "\040\172\126\173\072\174\134\175\071\176\036\201\075" +
    "\213\145\216\100\217\112\220\060\221\116\001\002\000" +
    "\136\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\135" +
    "\u0171\155\104\156\066\162\142\163\014\165\052\166\147" +
    "\167\026\170\131\171\040\172\126\173\072\174\134\175" +
    "\071\176\036\201\075\213\145\216\100\217\112\220\060" +
    "\221\116\001\002\000\106\032\ufeeb\034\ufeeb\065\ufeeb\102" +
    "\ufeeb\113\ufeeb\114\ufeeb\115\ufeeb\116\ufeeb\134\ufeeb\135\ufeeb" +
    "\136\ufeeb\137\ufeeb\140\ufeeb\141\ufeeb\142\ufeeb\143\ufeeb\144" +
    "\ufeeb\145\ufeeb\146\ufeeb\147\ufeeb\150\ufeeb\151\ufeeb\152\ufeeb" +
    "\153\ufeeb\154\ufeeb\155\ufeeb\156\ufeeb\157\ufeeb\160\ufeeb\161" +
    "\ufeeb\164\ufeeb\200\ufeeb\214\ufeeb\215\ufeeb\001\002\000\106" +
    "\032\ufeec\034\ufeec\065\ufeec\102\ufeec\113\ufeec\114\ufeec\115" +
    "\ufeec\116\ufeec\134\ufeec\135\ufeec\136\ufeec\137\ufeec\140\ufeec" +
    "\141\ufeec\142\ufeec\143\ufeec\144\ufeec\145\ufeec\146\ufeec\147" +
    "\ufeec\150\ufeec\151\ufeec\152\ufeec\153\ufeec\154\ufeec\155\ufeec" +
    "\156\ufeec\157\ufeec\160\ufeec\161\ufeec\164\ufeec\200\ufeec\214" +
    "\ufeec\215\ufeec\001\002\000\004\010\uffbf\001\002\000\110" +
    "\032\uff0f\034\uff0f\065\uff0f\102\uff0f\113\uff0f\114\uff0f\115" +
    "\uff0f\116\uff0f\134\uff0f\135\uff0f\136\uff0f\137\uff0f\140\uff0f" +
    "\141\uff0f\142\uff0f\143\uff0f\144\uff0f\145\uff0f\146\uff0f\147" +
    "\uff0f\150\uff0f\151\uff0f\152\uff0f\153\uff0f\154\uff0f\155\uff0f" +
    "\156\uff0f\157\uff0f\160\uff0f\161\uff0f\164\uff0f\200\uff0f\213" +
    "\u016c\214\uff0f\215\uff0f\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\004\213" +
    "\u0165\001\002\000\226\002\ufffd\003\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\016" +
    "\ufffd\017\ufffd\021\ufffd\022\ufffd\024\ufffd\026\ufffd\030\ufffd" +
    "\033\ufffd\035\ufffd\041\ufffd\042\ufffd\043\ufffd\045\ufffd\046" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\061\ufffd\066\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\101\ufffd\104\ufffd" +
    "\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\112\ufffd\117" +
    "\ufffd\135\ufffd\155\ufffd\156\ufffd\162\ufffd\163\ufffd\165\ufffd" +
    "\166\ufffd\167\ufffd\170\ufffd\171\ufffd\172\ufffd\173\ufffd\174" +
    "\ufffd\175\ufffd\176\ufffd\201\ufffd\205\ufffd\206\ufffd\207\ufffd" +
    "\213\ufffd\216\ufffd\217\ufffd\220\ufffd\221\ufffd\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\004\213\u0156\001\002\000\012\010\034\012" +
    "\061\105\056\216\100\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\226\002" +
    "\uffff\003\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff" +
    "\011\uffff\012\uffff\014\uffff\016\uffff\017\uffff\021\uffff\022" +
    "\uffff\024\uffff\026\uffff\030\uffff\033\uffff\035\uffff\041\uffff" +
    "\042\uffff\043\uffff\045\uffff\046\uffff\050\uffff\051\uffff\052" +
    "\uffff\054\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\101\uffff\104\uffff\105\uffff\106\uffff\107\uffff" +
    "\110\uffff\111\uffff\112\uffff\117\uffff\135\uffff\155\uffff\156" +
    "\uffff\162\uffff\163\uffff\165\uffff\166\uffff\167\uffff\170\uffff" +
    "\171\uffff\172\uffff\173\uffff\174\uffff\175\uffff\176\uffff\201" +
    "\uffff\205\uffff\206\uffff\207\uffff\213\uffff\216\uffff\217\uffff" +
    "\220\uffff\221\uffff\001\002\000\004\213\234\001\002\000" +
    "\004\213\154\001\002\000\006\010\157\105\056\001\002" +
    "\000\006\113\212\214\211\001\002\000\004\120\160\001" +
    "\002\000\170\012\ufea2\015\ufea2\032\ufea2\034\ufea2\064\ufea2" +
    "\065\ufea2\076\ufea2\077\ufea2\100\ufea2\101\ufea2\102\ufea2\113" +
    "\ufea2\114\ufea2\115\ufea2\116\ufea2\120\ufea2\121\ufea2\122\ufea2" +
    "\123\ufea2\124\ufea2\125\ufea2\126\ufea2\127\ufea2\130\ufea2\131" +
    "\ufea2\132\ufea2\133\ufea2\134\ufea2\135\ufea2\136\ufea2\137\ufea2" +
    "\140\ufea2\141\ufea2\142\ufea2\143\ufea2\144\ufea2\145\ufea2\146" +
    "\ufea2\147\ufea2\150\ufea2\151\ufea2\152\ufea2\153\ufea2\154\ufea2" +
    "\155\ufea2\156\ufea2\157\ufea2\160\ufea2\161\ufea2\164\ufea2\165" +
    "\ufea2\166\ufea2\177\ufea2\200\ufea2\213\ufea2\214\ufea2\215\ufea2" +
    "\217\ufea2\220\ufea2\001\002\000\036\006\106\007\011\010" +
    "\167\016\127\067\164\070\020\071\045\072\047\073\132" +
    "\074\006\105\056\155\170\156\162\221\116\001\002\000" +
    "\012\065\uff01\113\uff01\135\uff01\214\uff01\001\002\000\036" +
    "\006\106\007\011\010\167\016\127\067\164\070\020\071" +
    "\045\072\047\073\132\074\006\105\056\155\170\156\162" +
    "\221\116\001\002\000\012\065\ufefc\113\ufefc\135\ufefc\214" +
    "\ufefc\001\002\000\004\213\174\001\002\000\012\065\uff00" +
    "\113\uff00\135\uff00\214\uff00\001\002\000\006\113\uffae\214" +
    "\uffae\001\002\000\014\065\ufea2\103\172\113\ufea2\135\ufea2" +
    "\214\ufea2\001\002\000\036\006\106\007\011\010\167\016" +
    "\127\067\164\070\020\071\045\072\047\073\132\074\006" +
    "\105\056\155\170\156\162\221\116\001\002\000\012\065" +
    "\ufeff\113\ufeff\135\ufeff\214\ufeff\001\002\000\004\010\173" +
    "\001\002\000\012\065\ufefb\113\ufefb\135\ufefb\214\ufefb\001" +
    "\002\000\040\006\106\007\011\010\167\016\127\067\164" +
    "\070\020\071\045\072\047\073\132\074\006\105\056\155" +
    "\170\156\162\214\ufef4\221\116\001\002\000\004\214\207" +
    "\001\002\000\006\113\202\214\ufef2\001\002\000\010\065" +
    "\200\113\ufeed\214\ufeed\001\002\000\036\006\106\007\011" +
    "\010\167\016\127\067\164\070\020\071\045\072\047\073" +
    "\132\074\006\105\056\155\170\156\162\221\116\001\002" +
    "\000\006\113\ufeee\214\ufeee\001\002\000\040\006\106\007" +
    "\011\010\167\016\127\067\164\070\020\071\045\072\047" +
    "\073\132\074\006\105\056\155\170\156\162\214\ufef1\221" +
    "\116\001\002\000\004\214\ufef3\001\002\000\010\065\205" +
    "\113\ufeef\214\ufeef\001\002\000\036\006\106\007\011\010" +
    "\167\016\127\067\164\070\020\071\045\072\047\073\132" +
    "\074\006\105\056\155\170\156\162\221\116\001\002\000" +
    "\006\113\ufef0\214\ufef0\001\002\000\012\065\ufefd\113\ufefd" +
    "\135\ufefd\214\ufefd\001\002\000\012\065\ufefe\113\ufefe\135" +
    "\ufefe\214\ufefe\001\002\000\212\003\115\004\141\005\152" +
    "\006\106\007\011\010\034\011\053\012\061\014\074\016" +
    "\127\017\122\021\120\022\044\024\033\026\101\030\153" +
    "\033\103\035\130\041\055\042\121\045\135\046\041\050" +
    "\150\051\025\052\012\054\076\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\101\064\104\024\105\056\106\027\107\067\110\051" +
    "\111\124\112\105\117\063\135\010\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\205" +
    "\042\213\145\215\217\216\100\217\112\220\060\221\116" +
    "\001\002\000\006\010\157\105\056\001\002\000\004\120" +
    "\214\001\002\000\036\006\106\007\011\010\167\016\127" +
    "\067\164\070\020\071\045\072\047\073\132\074\006\105" +
    "\056\155\170\156\162\221\116\001\002\000\006\113\uffad" +
    "\214\uffad\001\002\000\254\002\uffdb\003\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb" +
    "\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\045" +
    "\uffdb\046\uffdb\050\uffdb\051\uffdb\052\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\066\uffdb\067\uffdb\070" +
    "\uffdb\071\uffdb\072\uffdb\073\uffdb\074\uffdb\075\uffdb\101\uffdb" +
    "\102\uffdb\104\uffdb\105\uffdb\106\uffdb\107\uffdb\110\uffdb\111" +
    "\uffdb\112\uffdb\117\uffdb\135\uffdb\155\uffdb\156\uffdb\162\uffdb" +
    "\163\uffdb\165\uffdb\166\uffdb\167\uffdb\170\uffdb\171\uffdb\172" +
    "\uffdb\173\uffdb\174\uffdb\175\uffdb\176\uffdb\201\uffdb\202\uffdb" +
    "\203\uffdb\204\uffdb\205\uffdb\206\uffdb\207\uffdb\213\uffdb\216" +
    "\uffdb\217\uffdb\220\uffdb\221\uffdb\001\002\000\226\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8" +
    "\026\ufff8\030\ufff8\031\ufff8\033\ufff8\035\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\066" +
    "\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8" +
    "\075\ufff8\101\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110" +
    "\ufff8\111\ufff8\112\ufff8\117\ufff8\135\ufff8\155\ufff8\156\ufff8" +
    "\162\ufff8\163\ufff8\165\ufff8\166\ufff8\167\ufff8\170\ufff8\171" +
    "\ufff8\172\ufff8\173\ufff8\174\ufff8\175\ufff8\176\ufff8\201\ufff8" +
    "\205\ufff8\206\ufff8\207\ufff8\213\ufff8\216\ufff8\217\ufff8\220" +
    "\ufff8\221\ufff8\001\002\000\254\002\uffb0\003\uffb0\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\014" +
    "\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\035" +
    "\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\045\uffb0\046\uffb0\050\uffb0\051\uffb0\052\uffb0\054\uffb0\055" +
    "\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\101" +
    "\uffb0\102\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0" +
    "\111\uffb0\112\uffb0\117\uffb0\135\uffb0\155\uffb0\156\uffb0\162" +
    "\uffb0\163\uffb0\165\uffb0\166\uffb0\167\uffb0\170\uffb0\171\uffb0" +
    "\172\uffb0\173\uffb0\174\uffb0\175\uffb0\176\uffb0\201\uffb0\202" +
    "\uffb0\203\uffb0\204\uffb0\205\uffb0\206\uffb0\207\uffb0\213\uffb0" +
    "\216\uffb0\217\uffb0\220\uffb0\221\uffb0\001\002\000\226\003" +
    "\115\004\141\005\152\006\106\007\011\010\034\011\053" +
    "\012\061\014\074\016\127\017\122\021\120\022\044\024" +
    "\033\026\101\030\153\031\225\033\103\035\130\041\055" +
    "\042\121\043\107\045\135\046\041\050\150\051\025\052" +
    "\012\054\076\055\143\056\030\057\223\060\032\061\140" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\101\064\104\024\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\135\010\155\104\156" +
    "\066\162\142\163\014\165\052\166\147\167\026\170\131" +
    "\171\040\172\126\173\072\174\134\175\071\176\036\201" +
    "\075\205\042\206\062\207\017\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\252\003\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9" +
    "\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9\035\ufff9" +
    "\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\045" +
    "\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\057\ufff9\060\ufff9\061\ufff9\066\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\101\ufff9" +
    "\102\ufff9\104\ufff9\105\ufff9\106\ufff9\107\ufff9\110\ufff9\111" +
    "\ufff9\112\ufff9\117\ufff9\135\ufff9\155\ufff9\156\ufff9\162\ufff9" +
    "\163\ufff9\165\ufff9\166\ufff9\167\ufff9\170\ufff9\171\ufff9\172" +
    "\ufff9\173\ufff9\174\ufff9\175\ufff9\176\ufff9\201\ufff9\202\ufff9" +
    "\203\ufff9\204\ufff9\205\ufff9\206\ufff9\207\ufff9\213\ufff9\216" +
    "\ufff9\217\ufff9\220\ufff9\221\ufff9\001\002\000\004\213\231" +
    "\001\002\000\252\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\016\ufff6\017\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\ufff6\033\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\045\ufff6\046\ufff6\050" +
    "\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\060\ufff6\061\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\101\ufff6\102\ufff6\104\ufff6" +
    "\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\112\ufff6\117" +
    "\ufff6\135\ufff6\155\ufff6\156\ufff6\162\ufff6\163\ufff6\165\ufff6" +
    "\166\ufff6\167\ufff6\170\ufff6\171\ufff6\172\ufff6\173\ufff6\174" +
    "\ufff6\175\ufff6\176\ufff6\201\ufff6\202\ufff6\203\ufff6\204\ufff6" +
    "\205\ufff6\206\ufff6\207\ufff6\213\ufff6\216\ufff6\217\ufff6\220" +
    "\ufff6\221\ufff6\001\002\000\004\135\230\001\002\000\252" +
    "\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\014\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\033\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\045\ufff5\046\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074" +
    "\ufff5\075\ufff5\101\ufff5\102\ufff5\104\ufff5\105\ufff5\106\ufff5" +
    "\107\ufff5\110\ufff5\111\ufff5\112\ufff5\117\ufff5\135\ufff5\155" +
    "\ufff5\156\ufff5\162\ufff5\163\ufff5\165\ufff5\166\ufff5\167\ufff5" +
    "\170\ufff5\171\ufff5\172\ufff5\173\ufff5\174\ufff5\175\ufff5\176" +
    "\ufff5\201\ufff5\202\ufff5\203\ufff5\204\ufff5\205\ufff5\206\ufff5" +
    "\207\ufff5\213\ufff5\216\ufff5\217\ufff5\220\ufff5\221\ufff5\001" +
    "\002\000\252\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\014\ufff7\016\ufff7\017\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\033\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\075\ufff7\101\ufff7\102\ufff7\104\ufff7\105" +
    "\ufff7\106\ufff7\107\ufff7\110\ufff7\111\ufff7\112\ufff7\117\ufff7" +
    "\135\ufff7\155\ufff7\156\ufff7\162\ufff7\163\ufff7\165\ufff7\166" +
    "\ufff7\167\ufff7\170\ufff7\171\ufff7\172\ufff7\173\ufff7\174\ufff7" +
    "\175\ufff7\176\ufff7\201\ufff7\202\ufff7\203\ufff7\204\ufff7\205" +
    "\ufff7\206\ufff7\207\ufff7\213\ufff7\216\ufff7\217\ufff7\220\ufff7" +
    "\221\ufff7\001\002\000\254\002\uffaf\003\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\014\uffaf" +
    "\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\033\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\045" +
    "\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\066\uffaf\067\uffaf\070" +
    "\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\101\uffaf" +
    "\102\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111" +
    "\uffaf\112\uffaf\117\uffaf\135\uffaf\155\uffaf\156\uffaf\162\uffaf" +
    "\163\uffaf\165\uffaf\166\uffaf\167\uffaf\170\uffaf\171\uffaf\172" +
    "\uffaf\173\uffaf\174\uffaf\175\uffaf\176\uffaf\201\uffaf\202\uffaf" +
    "\203\uffaf\204\uffaf\205\uffaf\206\uffaf\207\uffaf\213\uffaf\216" +
    "\uffaf\217\uffaf\220\uffaf\221\uffaf\001\002\000\004\214\232" +
    "\001\002\000\004\135\233\001\002\000\252\003\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\014\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\033\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4\052\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\066\ufff4\067" +
    "\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4" +
    "\101\ufff4\102\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\110" +
    "\ufff4\111\ufff4\112\ufff4\117\ufff4\135\ufff4\155\ufff4\156\ufff4" +
    "\162\ufff4\163\ufff4\165\ufff4\166\ufff4\167\ufff4\170\ufff4\171" +
    "\ufff4\172\ufff4\173\ufff4\174\ufff4\175\ufff4\176\ufff4\201\ufff4" +
    "\202\ufff4\203\ufff4\204\ufff4\205\ufff4\206\ufff4\207\ufff4\213" +
    "\ufff4\216\ufff4\217\ufff4\220\ufff4\221\ufff4\001\002\000\134" +
    "\004\141\006\106\007\011\010\034\011\053\012\061\016" +
    "\127\033\103\055\143\056\030\066\146\067\013\070\020" +
    "\071\045\072\047\073\132\074\006\075\035\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\070\032\260\114\247\115\267\116\240\134\244" +
    "\136\241\137\261\140\242\141\251\142\262\143\266\144" +
    "\253\145\236\146\250\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\214\255\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\134\004" +
    "\141\006\106\007\011\010\034\011\053\012\061\016\127" +
    "\033\103\055\143\056\030\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\155\104\156" +
    "\066\162\142\163\014\165\052\166\147\167\026\170\131" +
    "\171\040\172\126\173\072\174\134\175\071\176\036\201" +
    "\075\213\145\216\100\217\112\220\060\221\116\001\002" +
    "\000\134\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\134\004\141\006\106\007\011\010\034" +
    "\011\053\012\061\016\127\033\103\055\143\056\030\066" +
    "\146\067\013\070\020\071\045\072\047\073\132\074\006" +
    "\075\035\105\056\106\027\107\067\110\051\111\124\112" +
    "\105\117\063\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\134\004\141\006\106\007" +
    "\011\010\034\011\053\012\061\016\127\033\103\055\143" +
    "\056\030\066\146\067\013\070\020\071\045\072\047\073" +
    "\132\074\006\075\035\105\056\106\027\107\067\110\051" +
    "\111\124\112\105\117\063\155\104\156\066\162\142\163" +
    "\014\165\052\166\147\167\026\170\131\171\040\172\126" +
    "\173\072\174\134\175\071\176\036\201\075\213\145\216" +
    "\100\217\112\220\060\221\116\001\002\000\134\004\141" +
    "\006\106\007\011\010\034\011\053\012\061\016\127\033" +
    "\103\055\143\056\030\066\146\067\013\070\020\071\045" +
    "\072\047\073\132\074\006\075\035\105\056\106\027\107" +
    "\067\110\051\111\124\112\105\117\063\155\104\156\066" +
    "\162\142\163\014\165\052\166\147\167\026\170\131\171" +
    "\040\172\126\173\072\174\134\175\071\176\036\201\075" +
    "\213\145\216\100\217\112\220\060\221\116\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\134\004\141\006\106\007\011\010\034\011" +
    "\053\012\061\016\127\033\103\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\105\056\106\027\107\067\110\051\111\124\112\105" +
    "\117\063\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\201\075\213\145\216\100\217\112\220" +
    "\060\221\116\001\002\000\134\004\141\006\106\007\011" +
    "\010\034\011\053\012\061\016\127\033\103\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\134\004\141\006" +
    "\106\007\011\010\034\011\053\012\061\016\127\033\103" +
    "\055\143\056\030\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\213" +
    "\145\216\100\217\112\220\060\221\116\001\002\000\134" +
    "\004\141\006\106\007\011\010\034\011\053\012\061\016" +
    "\127\033\103\055\143\056\030\066\146\067\013\070\020" +
    "\071\045\072\047\073\132\074\006\075\035\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\134\004\141\006\106\007\011\010\034\011\053" +
    "\012\061\016\127\033\103\055\143\056\030\066\146\067" +
    "\013\070\020\071\045\072\047\073\132\074\006\075\035" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\155\104\156\066\162\142\163\014\165\052\166\147" +
    "\167\026\170\131\171\040\172\126\173\072\174\134\175" +
    "\071\176\036\201\075\213\145\216\100\217\112\220\060" +
    "\221\116\001\002\000\134\004\141\006\106\007\011\010" +
    "\034\011\053\012\061\016\127\033\103\055\143\056\030" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\105\056\106\027\107\067\110\051\111\124" +
    "\112\105\117\063\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\134\004" +
    "\141\006\106\007\011\010\034\011\053\012\061\016\127" +
    "\033\103\055\143\056\030\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\155\104\156" +
    "\066\162\142\163\014\165\052\166\147\167\026\170\131" +
    "\171\040\172\126\173\072\174\134\175\071\176\036\201" +
    "\075\213\145\216\100\217\112\220\060\221\116\001\002" +
    "\000\212\003\115\004\141\005\152\006\106\007\011\010" +
    "\034\011\053\012\061\014\074\016\127\017\122\021\120" +
    "\022\044\024\033\026\101\030\153\033\103\035\130\041" +
    "\055\042\121\045\135\046\041\050\150\051\025\052\012" +
    "\054\076\055\143\056\030\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\101\064\104\024" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\135\010\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\205\042\213\145\215\356" +
    "\216\100\217\112\220\060\221\116\001\002\000\134\004" +
    "\141\006\106\007\011\010\034\011\053\012\061\016\127" +
    "\033\103\055\143\056\030\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\155\104\156" +
    "\066\162\142\163\014\165\052\166\147\167\026\170\131" +
    "\171\040\172\126\173\072\174\134\175\071\176\036\201" +
    "\075\213\145\216\100\217\112\220\060\221\116\001\002" +
    "\000\134\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\010\010\306\012\061\216\100\001\002" +
    "\000\134\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\134\004\141\006\106\007\011\010\034" +
    "\011\053\012\061\016\127\033\103\055\143\056\030\066" +
    "\146\067\013\070\020\071\045\072\047\073\132\074\006" +
    "\075\035\105\056\106\027\107\067\110\051\111\124\112" +
    "\105\117\063\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\134\004\141\006\106\007" +
    "\011\010\034\011\053\012\061\016\127\033\103\055\143" +
    "\056\030\066\146\067\013\070\020\071\045\072\047\073" +
    "\132\074\006\075\035\105\056\106\027\107\067\110\051" +
    "\111\124\112\105\117\063\155\104\156\066\162\142\163" +
    "\014\165\052\166\147\167\026\170\131\171\040\172\126" +
    "\173\072\174\134\175\071\176\036\201\075\213\145\216" +
    "\100\217\112\220\060\221\116\001\002\000\134\004\141" +
    "\006\106\007\011\010\034\011\053\012\061\016\127\033" +
    "\103\055\143\056\030\066\146\067\013\070\020\071\045" +
    "\072\047\073\132\074\006\075\035\105\056\106\027\107" +
    "\067\110\051\111\124\112\105\117\063\155\104\156\066" +
    "\162\142\163\014\165\052\166\147\167\026\170\131\171" +
    "\040\172\126\173\072\174\134\175\071\176\036\201\075" +
    "\213\145\216\100\217\112\220\060\221\116\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\134\004\141\006\106\007\011\010\034\011" +
    "\053\012\061\016\127\033\103\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\105\056\106\027\107\067\110\051\111\124\112\105" +
    "\117\063\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\201\075\213\145\216\100\217\112\220" +
    "\060\221\116\001\002\000\134\004\141\006\106\007\011" +
    "\010\034\011\053\012\061\016\127\033\103\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\134\004\141\006" +
    "\106\007\011\010\034\011\053\012\061\016\127\033\103" +
    "\055\143\056\030\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\213" +
    "\145\216\100\217\112\220\060\221\116\001\002\000\106" +
    "\032\260\034\uff3f\065\uff3f\102\uff3f\113\uff3f\114\uff3f\115" +
    "\uff3f\116\uff3f\134\uff3f\135\uff3f\136\uff3f\137\uff3f\140\uff3f" +
    "\141\uff3f\142\uff3f\143\uff3f\144\uff3f\145\uff3f\146\uff3f\147" +
    "\uff3f\150\uff3f\151\uff3f\152\uff3f\153\uff3f\154\uff3f\155\uff3f" +
    "\156\uff3f\157\256\160\254\161\237\164\uff3f\200\uff3f\214" +
    "\uff3f\215\uff3f\001\002\000\106\032\260\034\uff44\065\uff44" +
    "\102\uff44\113\uff44\114\uff44\115\uff44\116\240\134\244\135" +
    "\uff44\136\241\137\261\140\242\141\251\142\262\143\266" +
    "\144\253\145\236\146\250\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\200\uff44\214\uff44\215\uff44\001\002\000" +
    "\076\032\260\034\uff32\065\uff32\102\uff32\113\uff32\114\uff32" +
    "\115\uff32\116\uff32\134\uff32\135\uff32\136\uff32\137\uff32\140" +
    "\uff32\141\uff32\142\uff32\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\200\uff32\214\uff32\215\uff32\001\002\000\076" +
    "\032\260\034\uff2f\065\uff2f\102\uff2f\113\uff2f\114\uff2f\115" +
    "\uff2f\116\uff2f\134\uff2f\135\uff2f\136\uff2f\137\uff2f\140\uff2f" +
    "\141\uff2f\142\uff2f\143\uff2f\144\uff2f\145\uff2f\146\uff2f\153" +
    "\257\154\252\155\270\156\246\157\256\160\254\161\237" +
    "\164\243\200\uff2f\214\uff2f\215\uff2f\001\002\000\076\032" +
    "\260\034\uff2e\065\uff2e\102\uff2e\113\uff2e\114\uff2e\115\uff2e" +
    "\116\uff2e\134\uff2e\135\uff2e\136\uff2e\137\uff2e\140\uff2e\141" +
    "\uff2e\142\uff2e\143\uff2e\144\uff2e\145\uff2e\146\uff2e\153\257" +
    "\154\252\155\270\156\246\157\256\160\254\161\237\164" +
    "\243\200\uff2e\214\uff2e\215\uff2e\001\002\000\076\032\260" +
    "\034\uff2d\065\uff2d\102\uff2d\113\uff2d\114\uff2d\115\uff2d\116" +
    "\uff2d\134\uff2d\135\uff2d\136\uff2d\137\uff2d\140\uff2d\141\uff2d" +
    "\142\uff2d\143\uff2d\144\uff2d\145\uff2d\146\uff2d\153\257\154" +
    "\252\155\270\156\246\157\256\160\254\161\237\164\243" +
    "\200\uff2d\214\uff2d\215\uff2d\001\002\000\106\032\260\034" +
    "\uff42\065\uff42\102\uff42\113\uff42\114\uff42\115\uff42\116\uff42" +
    "\134\uff42\135\uff42\136\uff42\137\uff42\140\uff42\141\uff42\142" +
    "\uff42\143\266\144\253\145\236\146\250\147\265\150\263" +
    "\151\245\152\264\153\257\154\252\155\270\156\246\157" +
    "\256\160\254\161\237\164\243\200\uff42\214\uff42\215\uff42" +
    "\001\002\000\106\032\260\034\uff47\065\uff47\102\uff47\113" +
    "\uff47\114\uff47\115\uff47\116\uff47\134\uff47\135\uff47\136\uff47" +
    "\137\uff47\140\242\141\251\142\262\143\266\144\253\145" +
    "\236\146\250\147\265\150\263\151\245\152\264\153\257" +
    "\154\252\155\270\156\246\157\256\160\254\161\237\164" +
    "\243\200\uff47\214\uff47\215\uff47\001\002\000\106\032\uff2c" +
    "\034\uff2c\065\uff2c\102\uff2c\113\uff2c\114\uff2c\115\uff2c\116" +
    "\uff2c\134\uff2c\135\uff2c\136\uff2c\137\uff2c\140\uff2c\141\uff2c" +
    "\142\uff2c\143\uff2c\144\uff2c\145\uff2c\146\uff2c\147\uff2c\150" +
    "\uff2c\151\uff2c\152\uff2c\153\uff2c\154\uff2c\155\uff2c\156\uff2c" +
    "\157\uff2c\160\uff2c\161\uff2c\164\uff2c\200\uff2c\214\uff2c\215" +
    "\uff2c\001\002\000\112\032\uff13\034\uff13\064\331\065\uff13" +
    "\102\uff13\113\uff13\114\uff13\115\uff13\116\uff13\134\uff13\135" +
    "\uff13\136\uff13\137\uff13\140\uff13\141\uff13\142\uff13\143\uff13" +
    "\144\uff13\145\uff13\146\uff13\147\uff13\150\uff13\151\uff13\152" +
    "\uff13\153\uff13\154\uff13\155\uff13\156\uff13\157\uff13\160\uff13" +
    "\161\uff13\164\uff13\200\uff13\213\uff13\214\uff13\215\uff13\001" +
    "\002\000\110\032\uff15\034\uff15\065\uff15\102\uff15\113\uff15" +
    "\114\uff15\115\uff15\116\uff15\134\uff15\135\uff15\136\uff15\137" +
    "\uff15\140\uff15\141\uff15\142\uff15\143\uff15\144\uff15\145\uff15" +
    "\146\uff15\147\uff15\150\uff15\151\uff15\152\uff15\153\uff15\154" +
    "\uff15\155\uff15\156\uff15\157\uff15\160\uff15\161\uff15\164\uff15" +
    "\200\uff15\213\uff15\214\uff15\215\uff15\001\002\000\006\012" +
    "\061\216\324\001\002\000\004\103\317\001\002\000\112" +
    "\032\uff16\034\uff16\065\uff16\102\uff16\103\uff17\113\uff16\114" +
    "\uff16\115\uff16\116\uff16\134\uff16\135\uff16\136\uff16\137\uff16" +
    "\140\uff16\141\uff16\142\uff16\143\uff16\144\uff16\145\uff16\146" +
    "\uff16\147\uff16\150\uff16\151\uff16\152\uff16\153\uff16\154\uff16" +
    "\155\uff16\156\uff16\157\uff16\160\uff16\161\uff16\164\uff16\200" +
    "\uff16\213\uff16\214\uff16\215\uff16\001\002\000\116\032\ufedb" +
    "\034\ufedb\064\ufedb\065\ufedb\101\310\102\ufedb\113\ufedb\114" +
    "\ufedb\115\ufedb\116\ufedb\134\ufedb\135\ufedb\136\ufedb\137\ufedb" +
    "\140\ufedb\141\ufedb\142\ufedb\143\ufedb\144\ufedb\145\ufedb\146" +
    "\ufedb\147\ufedb\150\ufedb\151\ufedb\152\ufedb\153\ufedb\154\ufedb" +
    "\155\ufedb\156\ufedb\157\ufedb\160\ufedb\161\ufedb\164\ufedb\177" +
    "\311\200\ufedb\213\ufedb\214\ufedb\215\ufedb\001\002\000\134" +
    "\004\141\006\106\007\011\010\034\011\053\012\061\016" +
    "\127\033\103\055\143\056\030\066\146\067\013\070\020" +
    "\071\045\072\047\073\132\074\006\075\035\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\136\004\141\006\106\007\011\010\034\011\053" +
    "\012\061\016\127\033\103\055\143\056\030\066\146\067" +
    "\013\070\020\071\045\072\047\073\132\074\006\075\035" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\155\104\156\066\162\142\163\014\165\052\166\147" +
    "\167\026\170\131\171\040\172\126\173\072\174\134\175" +
    "\071\176\036\200\ufed3\201\075\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\004\200\314\001\002\000" +
    "\070\032\260\114\247\115\267\116\240\134\244\136\241" +
    "\137\261\140\242\141\251\142\262\143\266\144\253\145" +
    "\236\146\250\147\265\150\263\151\245\152\264\153\257" +
    "\154\252\155\270\156\246\157\256\160\254\161\237\164" +
    "\243\200\ufed2\001\002\000\152\032\ufed8\034\ufed8\064\ufed8" +
    "\065\ufed8\101\ufed8\102\ufed8\113\ufed8\114\ufed8\115\ufed8\116" +
    "\ufed8\120\ufed8\121\ufed8\122\ufed8\123\ufed8\124\ufed8\125\ufed8" +
    "\126\ufed8\127\ufed8\130\ufed8\131\ufed8\132\ufed8\133\ufed8\134" +
    "\ufed8\135\ufed8\136\ufed8\137\ufed8\140\ufed8\141\ufed8\142\ufed8" +
    "\143\ufed8\144\ufed8\145\ufed8\146\ufed8\147\ufed8\150\ufed8\151" +
    "\ufed8\152\ufed8\153\ufed8\154\ufed8\155\ufed8\156\ufed8\157\ufed8" +
    "\160\ufed8\161\ufed8\164\ufed8\165\ufed8\166\ufed8\177\ufed8\200" +
    "\ufed8\213\ufed8\214\ufed8\215\ufed8\001\002\000\070\032\260" +
    "\102\316\114\247\115\267\116\240\134\244\136\241\137" +
    "\261\140\242\141\251\142\262\143\266\144\253\145\236" +
    "\146\250\147\265\150\263\151\245\152\264\153\257\154" +
    "\252\155\270\156\246\157\256\160\254\161\237\164\243" +
    "\001\002\000\152\032\ufed7\034\ufed7\064\ufed7\065\ufed7\101" +
    "\ufed7\102\ufed7\113\ufed7\114\ufed7\115\ufed7\116\ufed7\120\ufed7" +
    "\121\ufed7\122\ufed7\123\ufed7\124\ufed7\125\ufed7\126\ufed7\127" +
    "\ufed7\130\ufed7\131\ufed7\132\ufed7\133\ufed7\134\ufed7\135\ufed7" +
    "\136\ufed7\137\ufed7\140\ufed7\141\ufed7\142\ufed7\143\ufed7\144" +
    "\ufed7\145\ufed7\146\ufed7\147\ufed7\150\ufed7\151\ufed7\152\ufed7" +
    "\153\ufed7\154\ufed7\155\ufed7\156\ufed7\157\ufed7\160\ufed7\161" +
    "\ufed7\164\ufed7\165\ufed7\166\ufed7\177\ufed7\200\ufed7\213\ufed7" +
    "\214\ufed7\215\ufed7\001\002\000\006\012\061\216\100\001" +
    "\002\000\112\032\ufede\034\ufede\064\ufede\065\ufede\102\ufede" +
    "\113\ufede\114\ufede\115\ufede\116\ufede\134\ufede\135\ufede\136" +
    "\ufede\137\ufede\140\ufede\141\ufede\142\ufede\143\ufede\144\ufede" +
    "\145\ufede\146\ufede\147\ufede\150\ufede\151\ufede\152\ufede\153" +
    "\ufede\154\ufede\155\ufede\156\ufede\157\ufede\160\ufede\161\ufede" +
    "\164\ufede\200\ufede\213\ufede\214\ufede\215\ufede\001\002\000" +
    "\006\012\061\216\324\001\002\000\152\032\ufee0\034\ufee0" +
    "\064\ufee0\065\ufee0\101\310\102\ufee0\113\ufee0\114\ufee0\115" +
    "\ufee0\116\ufee0\120\ufee0\121\ufee0\122\ufee0\123\ufee0\124\ufee0" +
    "\125\ufee0\126\ufee0\127\ufee0\130\ufee0\131\ufee0\132\ufee0\133" +
    "\ufee0\134\ufee0\135\ufee0\136\ufee0\137\ufee0\140\ufee0\141\ufee0" +
    "\142\ufee0\143\ufee0\144\ufee0\145\ufee0\146\ufee0\147\ufee0\150" +
    "\ufee0\151\ufee0\152\ufee0\153\ufee0\154\ufee0\155\ufee0\156\ufee0" +
    "\157\ufee0\160\ufee0\161\ufee0\164\ufee0\165\ufee0\166\ufee0\177" +
    "\311\200\ufee0\213\ufee0\214\ufee0\215\ufee0\001\002\000\152" +
    "\032\ufedf\034\ufedf\064\ufedf\065\ufedf\101\310\102\ufedf\113" +
    "\ufedf\114\ufedf\115\ufedf\116\ufedf\120\ufedf\121\ufedf\122\ufedf" +
    "\123\ufedf\124\ufedf\125\ufedf\126\ufedf\127\ufedf\130\ufedf\131" +
    "\ufedf\132\ufedf\133\ufedf\134\ufedf\135\ufedf\136\ufedf\137\ufedf" +
    "\140\ufedf\141\ufedf\142\ufedf\143\ufedf\144\ufedf\145\ufedf\146" +
    "\ufedf\147\ufedf\150\ufedf\151\ufedf\152\ufedf\153\ufedf\154\ufedf" +
    "\155\ufedf\156\ufedf\157\ufedf\160\ufedf\161\ufedf\164\ufedf\165" +
    "\ufedf\166\ufedf\177\311\200\ufedf\213\ufedf\214\ufedf\215\ufedf" +
    "\001\002\000\010\012\ufec9\101\325\216\ufec9\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\070\032\260\102\327\114\247\115\267\116" +
    "\240\134\244\136\241\137\261\140\242\141\251\142\262" +
    "\143\266\144\253\145\236\146\250\147\265\150\263\151" +
    "\245\152\264\153\257\154\252\155\270\156\246\157\256" +
    "\160\254\161\237\164\243\001\002\000\152\032\ufed4\034" +
    "\ufed4\064\ufed4\065\ufed4\101\ufed4\102\ufed4\113\ufed4\114\ufed4" +
    "\115\ufed4\116\ufed4\120\ufed4\121\ufed4\122\ufed4\123\ufed4\124" +
    "\ufed4\125\ufed4\126\ufed4\127\ufed4\130\ufed4\131\ufed4\132\ufed4" +
    "\133\ufed4\134\ufed4\135\ufed4\136\ufed4\137\ufed4\140\ufed4\141" +
    "\ufed4\142\ufed4\143\ufed4\144\ufed4\145\ufed4\146\ufed4\147\ufed4" +
    "\150\ufed4\151\ufed4\152\ufed4\153\ufed4\154\ufed4\155\ufed4\156" +
    "\ufed4\157\ufed4\160\ufed4\161\ufed4\164\ufed4\165\ufed4\166\ufed4" +
    "\177\ufed4\200\ufed4\213\ufed4\214\ufed4\215\ufed4\001\002\000" +
    "\116\032\ufeda\034\ufeda\064\ufeda\065\ufeda\101\310\102\ufeda" +
    "\113\ufeda\114\ufeda\115\ufeda\116\ufeda\134\ufeda\135\ufeda\136" +
    "\ufeda\137\ufeda\140\ufeda\141\ufeda\142\ufeda\143\ufeda\144\ufeda" +
    "\145\ufeda\146\ufeda\147\ufeda\150\ufeda\151\ufeda\152\ufeda\153" +
    "\ufeda\154\ufeda\155\ufeda\156\ufeda\157\ufeda\160\ufeda\161\ufeda" +
    "\164\ufeda\177\311\200\ufeda\213\ufeda\214\ufeda\215\ufeda\001" +
    "\002\000\014\010\157\012\061\101\337\105\056\216\100" +
    "\001\002\000\152\032\ufecc\034\ufecc\064\ufecc\065\ufecc\101" +
    "\ufecc\102\ufecc\113\ufecc\114\ufecc\115\ufecc\116\ufecc\120\ufecc" +
    "\121\ufecc\122\ufecc\123\ufecc\124\ufecc\125\ufecc\126\ufecc\127" +
    "\ufecc\130\ufecc\131\ufecc\132\ufecc\133\ufecc\134\ufecc\135\ufecc" +
    "\136\ufecc\137\ufecc\140\ufecc\141\ufecc\142\ufecc\143\ufecc\144" +
    "\ufecc\145\ufecc\146\ufecc\147\ufecc\150\ufecc\151\ufecc\152\ufecc" +
    "\153\ufecc\154\ufecc\155\ufecc\156\ufecc\157\ufecc\160\ufecc\161" +
    "\ufecc\164\ufecc\165\ufecc\166\ufecc\177\ufecc\200\ufecc\213\ufecc" +
    "\214\ufecc\215\ufecc\001\002\000\152\032\ufecd\034\ufecd\064" +
    "\ufecd\065\ufecd\101\ufecd\102\ufecd\113\ufecd\114\ufecd\115\ufecd" +
    "\116\ufecd\120\ufecd\121\ufecd\122\ufecd\123\ufecd\124\ufecd\125" +
    "\ufecd\126\ufecd\127\ufecd\130\ufecd\131\ufecd\132\ufecd\133\ufecd" +
    "\134\ufecd\135\ufecd\136\ufecd\137\ufecd\140\ufecd\141\ufecd\142" +
    "\ufecd\143\ufecd\144\ufecd\145\ufecd\146\ufecd\147\ufecd\150\ufecd" +
    "\151\ufecd\152\ufecd\153\ufecd\154\ufecd\155\ufecd\156\ufecd\157" +
    "\ufecd\160\ufecd\161\ufecd\164\ufecd\165\ufecd\166\ufecd\177\ufecd" +
    "\200\ufecd\213\ufecd\214\ufecd\215\ufecd\001\002\000\146\032" +
    "\ufed0\034\ufed0\064\ufed0\065\ufed0\102\ufed0\113\ufed0\114\ufed0" +
    "\115\ufed0\116\ufed0\120\ufed0\121\ufed0\122\ufed0\123\ufed0\124" +
    "\ufed0\125\ufed0\126\ufed0\127\ufed0\130\ufed0\131\ufed0\132\ufed0" +
    "\133\ufed0\134\ufed0\135\ufed0\136\ufed0\137\ufed0\140\ufed0\141" +
    "\ufed0\142\ufed0\143\ufed0\144\ufed0\145\ufed0\146\ufed0\147\ufed0" +
    "\150\ufed0\151\ufed0\152\ufed0\153\ufed0\154\ufed0\155\ufed0\156" +
    "\ufed0\157\ufed0\160\ufed0\161\ufed0\164\ufed0\165\ufed0\166\ufed0" +
    "\200\ufed0\213\ufed0\214\ufed0\215\ufed0\001\002\000\112\032" +
    "\uff11\034\uff11\064\uff11\065\uff11\102\uff11\113\uff11\114\uff11" +
    "\115\uff11\116\uff11\134\uff11\135\uff11\136\uff11\137\uff11\140" +
    "\uff11\141\uff11\142\uff11\143\uff11\144\uff11\145\uff11\146\uff11" +
    "\147\uff11\150\uff11\151\uff11\152\uff11\153\uff11\154\uff11\155" +
    "\uff11\156\uff11\157\uff11\160\uff11\161\uff11\164\uff11\200\uff11" +
    "\213\uff11\214\uff11\215\uff11\001\002\000\152\032\ufed1\034" +
    "\ufed1\064\ufed1\065\ufed1\101\342\102\ufed1\113\ufed1\114\ufed1" +
    "\115\ufed1\116\ufed1\120\ufed1\121\ufed1\122\ufed1\123\ufed1\124" +
    "\ufed1\125\ufed1\126\ufed1\127\ufed1\130\ufed1\131\ufed1\132\ufed1" +
    "\133\ufed1\134\ufed1\135\ufed1\136\ufed1\137\ufed1\140\ufed1\141" +
    "\ufed1\142\ufed1\143\ufed1\144\ufed1\145\ufed1\146\ufed1\147\ufed1" +
    "\150\ufed1\151\ufed1\152\ufed1\153\ufed1\154\ufed1\155\ufed1\156" +
    "\ufed1\157\ufed1\160\ufed1\161\ufed1\164\ufed1\165\ufed1\166\ufed1" +
    "\177\343\200\ufed1\213\ufed1\214\ufed1\215\ufed1\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\070\032\260\102\341\114\247\115\267\116" +
    "\240\134\244\136\241\137\261\140\242\141\251\142\262" +
    "\143\266\144\253\145\236\146\250\147\265\150\263\151" +
    "\245\152\264\153\257\154\252\155\270\156\246\157\256" +
    "\160\254\161\237\164\243\001\002\000\152\032\ufecb\034" +
    "\ufecb\064\ufecb\065\ufecb\101\ufecb\102\ufecb\113\ufecb\114\ufecb" +
    "\115\ufecb\116\ufecb\120\ufecb\121\ufecb\122\ufecb\123\ufecb\124" +
    "\ufecb\125\ufecb\126\ufecb\127\ufecb\130\ufecb\131\ufecb\132\ufecb" +
    "\133\ufecb\134\ufecb\135\ufecb\136\ufecb\137\ufecb\140\ufecb\141" +
    "\ufecb\142\ufecb\143\ufecb\144\ufecb\145\ufecb\146\ufecb\147\ufecb" +
    "\150\ufecb\151\ufecb\152\ufecb\153\ufecb\154\ufecb\155\ufecb\156" +
    "\ufecb\157\ufecb\160\ufecb\161\ufecb\164\ufecb\165\ufecb\166\ufecb" +
    "\177\ufecb\200\ufecb\213\ufecb\214\ufecb\215\ufecb\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\136\004\141\006\106\007\011\010\034\011" +
    "\053\012\061\016\127\033\103\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\105\056\106\027\107\067\110\051\111\124\112\105" +
    "\117\063\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\200\ufed3\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\004\200\345\001\002" +
    "\000\152\032\ufecf\034\ufecf\064\ufecf\065\ufecf\101\ufecf\102" +
    "\ufecf\113\ufecf\114\ufecf\115\ufecf\116\ufecf\120\ufecf\121\ufecf" +
    "\122\ufecf\123\ufecf\124\ufecf\125\ufecf\126\ufecf\127\ufecf\130" +
    "\ufecf\131\ufecf\132\ufecf\133\ufecf\134\ufecf\135\ufecf\136\ufecf" +
    "\137\ufecf\140\ufecf\141\ufecf\142\ufecf\143\ufecf\144\ufecf\145" +
    "\ufecf\146\ufecf\147\ufecf\150\ufecf\151\ufecf\152\ufecf\153\ufecf" +
    "\154\ufecf\155\ufecf\156\ufecf\157\ufecf\160\ufecf\161\ufecf\164" +
    "\ufecf\165\ufecf\166\ufecf\177\ufecf\200\ufecf\213\ufecf\214\ufecf" +
    "\215\ufecf\001\002\000\070\032\260\102\347\114\247\115" +
    "\267\116\240\134\244\136\241\137\261\140\242\141\251" +
    "\142\262\143\266\144\253\145\236\146\250\147\265\150" +
    "\263\151\245\152\264\153\257\154\252\155\270\156\246" +
    "\157\256\160\254\161\237\164\243\001\002\000\152\032" +
    "\ufece\034\ufece\064\ufece\065\ufece\101\ufece\102\ufece\113\ufece" +
    "\114\ufece\115\ufece\116\ufece\120\ufece\121\ufece\122\ufece\123" +
    "\ufece\124\ufece\125\ufece\126\ufece\127\ufece\130\ufece\131\ufece" +
    "\132\ufece\133\ufece\134\ufece\135\ufece\136\ufece\137\ufece\140" +
    "\ufece\141\ufece\142\ufece\143\ufece\144\ufece\145\ufece\146\ufece" +
    "\147\ufece\150\ufece\151\ufece\152\ufece\153\ufece\154\ufece\155" +
    "\ufece\156\ufece\157\ufece\160\ufece\161\ufece\164\ufece\165\ufece" +
    "\166\ufece\177\ufece\200\ufece\213\ufece\214\ufece\215\ufece\001" +
    "\002\000\112\032\uff14\034\uff14\064\352\065\uff14\102\uff14" +
    "\113\uff14\114\uff14\115\uff14\116\uff14\134\uff14\135\uff14\136" +
    "\uff14\137\uff14\140\uff14\141\uff14\142\uff14\143\uff14\144\uff14" +
    "\145\uff14\146\uff14\147\uff14\150\uff14\151\uff14\152\uff14\153" +
    "\uff14\154\uff14\155\uff14\156\uff14\157\uff14\160\uff14\161\uff14" +
    "\164\uff14\200\uff14\213\uff14\214\uff14\215\uff14\001\002\000" +
    "\112\032\uff12\034\uff12\064\uff12\065\uff12\102\uff12\113\uff12" +
    "\114\uff12\115\uff12\116\uff12\134\uff12\135\uff12\136\uff12\137" +
    "\uff12\140\uff12\141\uff12\142\uff12\143\uff12\144\uff12\145\uff12" +
    "\146\uff12\147\uff12\150\uff12\151\uff12\152\uff12\153\uff12\154" +
    "\uff12\155\uff12\156\uff12\157\uff12\160\uff12\161\uff12\164\uff12" +
    "\200\uff12\213\uff12\214\uff12\215\uff12\001\002\000\014\010" +
    "\157\012\061\101\337\105\056\216\100\001\002\000\112" +
    "\032\uff10\034\uff10\064\uff10\065\uff10\102\uff10\113\uff10\114" +
    "\uff10\115\uff10\116\uff10\134\uff10\135\uff10\136\uff10\137\uff10" +
    "\140\uff10\141\uff10\142\uff10\143\uff10\144\uff10\145\uff10\146" +
    "\uff10\147\uff10\150\uff10\151\uff10\152\uff10\153\uff10\154\uff10" +
    "\155\uff10\156\uff10\157\uff10\160\uff10\161\uff10\164\uff10\200" +
    "\uff10\213\uff10\214\uff10\215\uff10\001\002\000\106\032\260" +
    "\034\uff3a\065\uff3a\102\uff3a\113\uff3a\114\uff3a\115\uff3a\116" +
    "\uff3a\134\uff3a\135\uff3a\136\uff3a\137\uff3a\140\uff3a\141\uff3a" +
    "\142\uff3a\143\uff3a\144\uff3a\145\uff3a\146\uff3a\147\uff3a\150" +
    "\uff3a\151\uff3a\152\uff3a\153\uff3a\154\uff3a\155\270\156\246" +
    "\157\256\160\254\161\237\164\243\200\uff3a\214\uff3a\215" +
    "\uff3a\001\002\000\106\032\260\034\uff3d\065\uff3d\102\uff3d" +
    "\113\uff3d\114\uff3d\115\uff3d\116\uff3d\134\uff3d\135\uff3d\136" +
    "\uff3d\137\uff3d\140\uff3d\141\uff3d\142\uff3d\143\uff3d\144\uff3d" +
    "\145\uff3d\146\uff3d\147\uff3d\150\uff3d\151\uff3d\152\uff3d\153" +
    "\uff3d\154\uff3d\155\uff3d\156\uff3d\157\uff3d\160\uff3d\161\uff3d" +
    "\164\uff3d\200\uff3d\214\uff3d\215\uff3d\001\002\000\232\003" +
    "\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\024" +
    "\ufff8\026\ufff8\030\ufff8\033\ufff8\035\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\101\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8" +
    "\111\ufff8\112\ufff8\117\ufff8\135\ufff8\155\ufff8\156\ufff8\162" +
    "\ufff8\163\ufff8\165\ufff8\166\ufff8\167\ufff8\170\ufff8\171\ufff8" +
    "\172\ufff8\173\ufff8\174\ufff8\175\ufff8\176\ufff8\201\ufff8\202" +
    "\ufff8\203\ufff8\204\ufff8\205\ufff8\206\ufff8\207\ufff8\213\ufff8" +
    "\216\ufff8\217\ufff8\220\ufff8\221\ufff8\001\002\000\254\002" +
    "\uffa1\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\014\uffa1\016\uffa1\017\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\033\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1" +
    "\052\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\101\uffa1\102\uffa1\104\uffa1\105\uffa1\106" +
    "\uffa1\107\uffa1\110\uffa1\111\uffa1\112\uffa1\117\uffa1\135\uffa1" +
    "\155\uffa1\156\uffa1\162\uffa1\163\uffa1\165\uffa1\166\uffa1\167" +
    "\uffa1\170\uffa1\171\uffa1\172\uffa1\173\uffa1\174\uffa1\175\uffa1" +
    "\176\uffa1\201\uffa1\202\uffa1\203\uffa1\204\uffa1\205\uffa1\206" +
    "\uffa1\207\uffa1\213\uffa1\216\uffa1\217\uffa1\220\uffa1\221\uffa1" +
    "\001\002\000\254\002\uff9d\003\uff9d\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\014\uff9d\016\uff9d" +
    "\017\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\033\uff9d\035\uff9d\036\uff9d" +
    "\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\045\uff9d\046" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\066\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\101\uff9d\102\uff9d" +
    "\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\112" +
    "\uff9d\117\uff9d\135\uff9d\155\uff9d\156\uff9d\162\uff9d\163\uff9d" +
    "\165\uff9d\166\uff9d\167\uff9d\170\uff9d\171\uff9d\172\uff9d\173" +
    "\uff9d\174\uff9d\175\uff9d\176\uff9d\201\uff9d\202\uff9d\203\363" +
    "\204\362\205\uff9d\206\uff9d\207\uff9d\213\uff9d\216\uff9d\217" +
    "\uff9d\220\uff9d\221\uff9d\001\002\000\254\002\ufff1\003\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\014\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\033" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\045\ufff1\046\ufff1\050\ufff1\051\ufff1\052\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\066\ufff1" +
    "\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075" +
    "\ufff1\101\ufff1\102\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\111\ufff1\112\ufff1\117\ufff1\135\ufff1\155\ufff1\156" +
    "\ufff1\162\ufff1\163\ufff1\165\ufff1\166\ufff1\167\ufff1\170\ufff1" +
    "\171\ufff1\172\ufff1\173\ufff1\174\ufff1\175\ufff1\176\ufff1\201" +
    "\ufff1\202\ufff1\203\ufff1\204\ufff1\205\ufff1\206\ufff1\207\ufff1" +
    "\213\ufff1\216\ufff1\217\ufff1\220\ufff1\221\ufff1\001\002\000" +
    "\210\003\115\004\141\005\152\006\106\007\011\010\034" +
    "\011\053\012\061\014\074\016\127\017\122\021\120\022" +
    "\044\024\033\026\101\030\153\033\103\035\130\041\055" +
    "\042\121\045\135\046\041\050\150\051\025\052\012\054" +
    "\076\055\143\056\030\066\146\067\013\070\020\071\045" +
    "\072\047\073\132\074\006\075\035\101\064\104\024\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\135\010\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\201\075\205\042\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\004\213\364\001\002" +
    "\000\134\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\070\032\260\114\247\115\267\116\240" +
    "\134\244\136\241\137\261\140\242\141\251\142\262\143" +
    "\266\144\253\145\236\146\250\147\265\150\263\151\245" +
    "\152\264\153\257\154\252\155\270\156\246\157\256\160" +
    "\254\161\237\164\243\214\366\001\002\000\210\003\115" +
    "\004\141\005\152\006\106\007\011\010\034\011\053\012" +
    "\061\014\074\016\127\017\122\021\120\022\044\024\033" +
    "\026\101\030\153\033\103\035\130\041\055\042\121\045" +
    "\135\046\041\050\150\051\025\052\012\054\076\055\143" +
    "\056\030\066\146\067\013\070\020\071\045\072\047\073" +
    "\132\074\006\075\035\101\064\104\024\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\135\010\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\205\042\213\145\216\100\217\112\220\060" +
    "\221\116\001\002\000\254\002\uffa0\003\uffa0\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\014\uffa0" +
    "\016\uffa0\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\033\uffa0\035\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\045" +
    "\uffa0\046\uffa0\050\uffa0\051\uffa0\052\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\061\uffa0\066\uffa0\067\uffa0\070" +
    "\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\101\uffa0" +
    "\102\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110\uffa0\111" +
    "\uffa0\112\uffa0\117\uffa0\135\uffa0\155\uffa0\156\uffa0\162\uffa0" +
    "\163\uffa0\165\uffa0\166\uffa0\167\uffa0\170\uffa0\171\uffa0\172" +
    "\uffa0\173\uffa0\174\uffa0\175\uffa0\176\uffa0\201\uffa0\202\uffa0" +
    "\203\uffa0\204\uffa0\205\uffa0\206\uffa0\207\uffa0\213\uffa0\216" +
    "\uffa0\217\uffa0\220\uffa0\221\uffa0\001\002\000\254\002\uff9c" +
    "\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\014\uff9c\016\uff9c\017\uff9c\021\uff9c\022\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\033\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\101\uff9c\102\uff9c\104\uff9c\105\uff9c\106\uff9c" +
    "\107\uff9c\110\uff9c\111\uff9c\112\uff9c\117\uff9c\135\uff9c\155" +
    "\uff9c\156\uff9c\162\uff9c\163\uff9c\165\uff9c\166\uff9c\167\uff9c" +
    "\170\uff9c\171\uff9c\172\uff9c\173\uff9c\174\uff9c\175\uff9c\176" +
    "\uff9c\201\uff9c\202\uff9c\203\uff9c\204\uff9c\205\uff9c\206\uff9c" +
    "\207\uff9c\213\uff9c\216\uff9c\217\uff9c\220\uff9c\221\uff9c\001" +
    "\002\000\232\003\115\004\141\005\152\006\106\007\011" +
    "\010\034\011\053\012\061\014\074\016\127\017\122\021" +
    "\120\022\044\024\033\026\101\030\153\033\103\035\130" +
    "\041\055\042\121\043\107\045\135\046\041\050\150\051" +
    "\025\052\012\054\076\055\143\056\030\057\223\060\032" +
    "\061\140\066\146\067\013\070\020\071\045\072\047\073" +
    "\132\074\006\075\035\101\064\104\024\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\135\010\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\202\uff9f\203\uff9f\204\uff9f\205\042\206\062" +
    "\207\017\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\010\202\uff9b\203\375\204\374\001\002\000\004" +
    "\202\u0105\001\002\000\004\215\u0103\001\002\000\004\213" +
    "\376\001\002\000\134\004\141\006\106\007\011\010\034" +
    "\011\053\012\061\016\127\033\103\055\143\056\030\066" +
    "\146\067\013\070\020\071\045\072\047\073\132\074\006" +
    "\075\035\105\056\106\027\107\067\110\051\111\124\112" +
    "\105\117\063\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\070\032\260\114\247\115" +
    "\267\116\240\134\244\136\241\137\261\140\242\141\251" +
    "\142\262\143\266\144\253\145\236\146\250\147\265\150" +
    "\263\151\245\152\264\153\257\154\252\155\270\156\246" +
    "\157\256\160\254\161\237\164\243\214\u0100\001\002\000" +
    "\004\215\u0101\001\002\000\232\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016" +
    "\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8\026\ufff8\030\ufff8" +
    "\033\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\101\ufff8\104\ufff8" +
    "\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\117" +
    "\ufff8\135\ufff8\155\ufff8\156\ufff8\162\ufff8\163\ufff8\165\ufff8" +
    "\166\ufff8\167\ufff8\170\ufff8\171\ufff8\172\ufff8\173\ufff8\174" +
    "\ufff8\175\ufff8\176\ufff8\201\ufff8\202\ufff8\203\ufff8\204\ufff8" +
    "\205\ufff8\206\ufff8\207\ufff8\213\ufff8\216\ufff8\217\ufff8\220" +
    "\ufff8\221\ufff8\001\002\000\232\003\115\004\141\005\152" +
    "\006\106\007\011\010\034\011\053\012\061\014\074\016" +
    "\127\017\122\021\120\022\044\024\033\026\101\030\153" +
    "\033\103\035\130\041\055\042\121\043\107\045\135\046" +
    "\041\050\150\051\025\052\012\054\076\055\143\056\030" +
    "\057\223\060\032\061\140\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\101\064\104\024" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\135\010\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\202\uff9e\203\uff9e\204\uff9e" +
    "\205\042\206\062\207\017\213\145\216\100\217\112\220" +
    "\060\221\116\001\002\000\226\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016" +
    "\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8\026\ufff8\030\ufff8" +
    "\033\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046" +
    "\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8" +
    "\057\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\070\ufff8\071" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\101\ufff8\104\ufff8" +
    "\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\117" +
    "\ufff8\135\ufff8\155\ufff8\156\ufff8\162\ufff8\163\ufff8\165\ufff8" +
    "\166\ufff8\167\ufff8\170\ufff8\171\ufff8\172\ufff8\173\ufff8\174" +
    "\ufff8\175\ufff8\176\ufff8\201\ufff8\202\ufff8\205\ufff8\206\ufff8" +
    "\207\ufff8\213\ufff8\216\ufff8\217\ufff8\220\ufff8\221\ufff8\001" +
    "\002\000\226\003\115\004\141\005\152\006\106\007\011" +
    "\010\034\011\053\012\061\014\074\016\127\017\122\021" +
    "\120\022\044\024\033\026\101\030\153\033\103\035\130" +
    "\041\055\042\121\043\107\045\135\046\041\050\150\051" +
    "\025\052\012\054\076\055\143\056\030\057\223\060\032" +
    "\061\140\066\146\067\013\070\020\071\045\072\047\073" +
    "\132\074\006\075\035\101\064\104\024\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\135\010\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\202\uff9a\205\042\206\062\207\017\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\004\135" +
    "\u0106\001\002\000\254\002\ufff0\003\ufff0\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\033\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\045\ufff0" +
    "\046\ufff0\050\ufff0\051\ufff0\052\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\061\ufff0\066\ufff0\067\ufff0\070\ufff0" +
    "\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\101\ufff0\102" +
    "\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0" +
    "\112\ufff0\117\ufff0\135\ufff0\155\ufff0\156\ufff0\162\ufff0\163" +
    "\ufff0\165\ufff0\166\ufff0\167\ufff0\170\ufff0\171\ufff0\172\ufff0" +
    "\173\ufff0\174\ufff0\175\ufff0\176\ufff0\201\ufff0\202\ufff0\203" +
    "\ufff0\204\ufff0\205\ufff0\206\ufff0\207\ufff0\213\ufff0\216\ufff0" +
    "\217\ufff0\220\ufff0\221\ufff0\001\002\000\106\032\260\034" +
    "\uff3c\065\uff3c\102\uff3c\113\uff3c\114\uff3c\115\uff3c\116\uff3c" +
    "\134\uff3c\135\uff3c\136\uff3c\137\uff3c\140\uff3c\141\uff3c\142" +
    "\uff3c\143\uff3c\144\uff3c\145\uff3c\146\uff3c\147\uff3c\150\uff3c" +
    "\151\uff3c\152\uff3c\153\uff3c\154\uff3c\155\uff3c\156\uff3c\157" +
    "\uff3c\160\uff3c\161\uff3c\164\uff3c\200\uff3c\214\uff3c\215\uff3c" +
    "\001\002\000\076\032\260\034\uff31\065\uff31\102\uff31\113" +
    "\uff31\114\uff31\115\uff31\116\uff31\134\uff31\135\uff31\136\uff31" +
    "\137\uff31\140\uff31\141\uff31\142\uff31\147\265\150\263\151" +
    "\245\152\264\153\257\154\252\155\270\156\246\157\256" +
    "\160\254\161\237\164\243\200\uff31\214\uff31\215\uff31\001" +
    "\002\000\106\032\260\034\uff39\065\uff39\102\uff39\113\uff39" +
    "\114\uff39\115\uff39\116\uff39\134\uff39\135\uff39\136\uff39\137" +
    "\uff39\140\uff39\141\uff39\142\uff39\143\uff39\144\uff39\145\uff39" +
    "\146\uff39\147\uff39\150\uff39\151\uff39\152\uff39\153\uff39\154" +
    "\uff39\155\270\156\246\157\256\160\254\161\237\164\243" +
    "\200\uff39\214\uff39\215\uff39\001\002\000\106\032\260\034" +
    "\uff41\065\uff41\102\uff41\113\uff41\114\uff41\115\uff41\116\uff41" +
    "\134\uff41\135\uff41\136\uff41\137\uff41\140\uff41\141\uff41\142" +
    "\262\143\266\144\253\145\236\146\250\147\265\150\263" +
    "\151\245\152\264\153\257\154\252\155\270\156\246\157" +
    "\256\160\254\161\237\164\243\200\uff41\214\uff41\215\uff41" +
    "\001\002\000\076\032\260\034\uff33\065\uff33\102\uff33\113" +
    "\uff33\114\uff33\115\uff33\116\uff33\134\uff33\135\uff33\136\uff33" +
    "\137\uff33\140\uff33\141\uff33\142\uff33\147\265\150\263\151" +
    "\245\152\264\153\257\154\252\155\270\156\246\157\256" +
    "\160\254\161\237\164\243\200\uff33\214\uff33\215\uff33\001" +
    "\002\000\106\032\260\034\uff46\065\uff46\102\uff46\113\uff46" +
    "\114\uff46\115\267\116\240\134\244\135\uff46\136\241\137" +
    "\261\140\242\141\251\142\262\143\266\144\253\145\236" +
    "\146\250\147\265\150\263\151\245\152\264\153\257\154" +
    "\252\155\270\156\246\157\256\160\254\161\237\164\243" +
    "\200\uff46\214\uff46\215\uff46\001\002\000\106\032\260\034" +
    "\uff3e\065\uff3e\102\uff3e\113\uff3e\114\uff3e\115\uff3e\116\uff3e" +
    "\134\uff3e\135\uff3e\136\uff3e\137\uff3e\140\uff3e\141\uff3e\142" +
    "\uff3e\143\uff3e\144\uff3e\145\uff3e\146\uff3e\147\uff3e\150\uff3e" +
    "\151\uff3e\152\uff3e\153\uff3e\154\uff3e\155\uff3e\156\uff3e\157" +
    "\256\160\254\161\237\164\uff3e\200\uff3e\214\uff3e\215\uff3e" +
    "\001\002\000\076\032\260\034\uff30\065\uff30\102\uff30\113" +
    "\uff30\114\uff30\115\uff30\116\uff30\134\uff30\135\uff30\136\uff30" +
    "\137\uff30\140\uff30\141\uff30\142\uff30\143\uff30\144\uff30\145" +
    "\uff30\146\uff30\153\257\154\252\155\270\156\246\157\256" +
    "\160\254\161\237\164\243\200\uff30\214\uff30\215\uff30\001" +
    "\002\000\070\032\260\114\247\115\267\116\240\134\244" +
    "\136\241\137\261\140\242\141\251\142\262\143\266\144" +
    "\253\145\236\146\250\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\215\u0110\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\106\032" +
    "\260\034\uff2a\065\uff2a\102\uff2a\113\uff2a\114\247\115\267" +
    "\116\240\134\244\135\uff2a\136\241\137\261\140\242\141" +
    "\251\142\262\143\266\144\253\145\236\146\250\147\265" +
    "\150\263\151\245\152\264\153\257\154\252\155\270\156" +
    "\246\157\256\160\254\161\237\164\243\200\uff2a\214\uff2a" +
    "\215\uff2a\001\002\000\106\032\260\034\uff40\065\uff40\102" +
    "\uff40\113\uff40\114\uff40\115\uff40\116\uff40\134\uff40\135\uff40" +
    "\136\uff40\137\uff40\140\uff40\141\uff40\142\uff40\143\uff40\144" +
    "\uff40\145\uff40\146\uff40\147\uff40\150\uff40\151\uff40\152\uff40" +
    "\153\uff40\154\uff40\155\uff40\156\uff40\157\256\160\254\161" +
    "\237\164\uff40\200\uff40\214\uff40\215\uff40\001\002\000\106" +
    "\032\260\034\uff43\065\uff43\102\uff43\113\uff43\114\uff43\115" +
    "\uff43\116\uff43\134\uff43\135\uff43\136\uff43\137\uff43\140\uff43" +
    "\141\251\142\262\143\266\144\253\145\236\146\250\147" +
    "\265\150\263\151\245\152\264\153\257\154\252\155\270" +
    "\156\246\157\256\160\254\161\237\164\243\200\uff43\214" +
    "\uff43\215\uff43\001\002\000\106\032\260\034\uff48\065\uff48" +
    "\102\uff48\113\uff48\114\uff48\115\uff48\116\uff48\134\uff48\135" +
    "\uff48\136\uff48\137\261\140\242\141\251\142\262\143\266" +
    "\144\253\145\236\146\250\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\200\uff48\214\uff48\215\uff48\001\002\000" +
    "\106\032\260\034\uff45\065\uff45\102\uff45\113\uff45\114\uff45" +
    "\115\uff45\116\uff45\134\244\135\uff45\136\241\137\261\140" +
    "\242\141\251\142\262\143\266\144\253\145\236\146\250" +
    "\147\265\150\263\151\245\152\264\153\257\154\252\155" +
    "\270\156\246\157\256\160\254\161\237\164\243\200\uff45" +
    "\214\uff45\215\uff45\001\002\000\106\032\260\034\uff3b\065" +
    "\uff3b\102\uff3b\113\uff3b\114\uff3b\115\uff3b\116\uff3b\134\uff3b" +
    "\135\uff3b\136\uff3b\137\uff3b\140\uff3b\141\uff3b\142\uff3b\143" +
    "\uff3b\144\uff3b\145\uff3b\146\uff3b\147\uff3b\150\uff3b\151\uff3b" +
    "\152\uff3b\153\uff3b\154\uff3b\155\uff3b\156\uff3b\157\uff3b\160" +
    "\uff3b\161\uff3b\164\uff3b\200\uff3b\214\uff3b\215\uff3b\001\002" +
    "\000\076\032\260\034\uff34\065\uff34\102\uff34\113\uff34\114" +
    "\uff34\115\uff34\116\uff34\134\uff34\135\uff34\136\uff34\137\uff34" +
    "\140\uff34\141\uff34\142\uff34\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\200\uff34\214\uff34\215\uff34\001\002\000" +
    "\070\032\260\114\247\115\267\116\240\134\244\135\u0119" +
    "\136\241\137\261\140\242\141\251\142\262\143\266\144" +
    "\253\145\236\146\250\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\001\002\000\254\002\uffd8\003\uffd8\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014" +
    "\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\045\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\066\uffd8\067\uffd8" +
    "\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\101" +
    "\uffd8\102\uffd8\104\uffd8\105\uffd8\106\uffd8\107\uffd8\110\uffd8" +
    "\111\uffd8\112\uffd8\117\uffd8\135\uffd8\155\uffd8\156\uffd8\162" +
    "\uffd8\163\uffd8\165\uffd8\166\uffd8\167\uffd8\170\uffd8\171\uffd8" +
    "\172\uffd8\173\uffd8\174\uffd8\175\uffd8\176\uffd8\201\uffd8\202" +
    "\uffd8\203\uffd8\204\uffd8\205\uffd8\206\uffd8\207\uffd8\213\uffd8" +
    "\216\uffd8\217\uffd8\220\uffd8\221\uffd8\001\002\000\004\213" +
    "\u0153\001\002\000\106\032\ufee8\034\ufee8\065\ufee8\102\ufee8" +
    "\113\ufee8\114\ufee8\115\ufee8\116\ufee8\134\ufee8\135\ufee8\136" +
    "\ufee8\137\ufee8\140\ufee8\141\ufee8\142\ufee8\143\ufee8\144\ufee8" +
    "\145\ufee8\146\ufee8\147\ufee8\150\ufee8\151\ufee8\152\ufee8\153" +
    "\ufee8\154\ufee8\155\ufee8\156\ufee8\157\ufee8\160\ufee8\161\ufee8" +
    "\164\ufee8\200\ufee8\214\ufee8\215\ufee8\001\002\000\106\032" +
    "\uff49\034\uff49\065\uff49\102\uff49\113\uff49\114\uff49\115\uff49" +
    "\116\uff49\134\uff49\135\uff49\136\uff49\137\uff49\140\uff49\141" +
    "\uff49\142\uff49\143\uff49\144\uff49\145\uff49\146\uff49\147\uff49" +
    "\150\uff49\151\uff49\152\uff49\153\uff49\154\uff49\155\uff49\156" +
    "\uff49\157\uff49\160\uff49\161\uff49\164\uff49\200\uff49\214\uff49" +
    "\215\uff49\001\002\000\004\103\u011e\001\002\000\010\010" +
    "\u0120\012\061\216\100\001\002\000\146\032\ufede\034\ufede" +
    "\064\ufede\065\ufede\102\ufede\113\ufede\114\ufede\115\ufede\116" +
    "\ufede\120\ufede\121\ufede\122\ufede\123\ufede\124\ufede\125\ufede" +
    "\126\ufede\127\ufede\130\ufede\131\ufede\132\ufede\133\ufede\134" +
    "\ufede\135\ufede\136\ufede\137\ufede\140\ufede\141\ufede\142\ufede" +
    "\143\ufede\144\ufede\145\ufede\146\ufede\147\ufede\150\ufede\151" +
    "\ufede\152\ufede\153\ufede\154\ufede\155\ufede\156\ufede\157\ufede" +
    "\160\ufede\161\ufede\164\ufede\165\ufede\166\ufede\200\ufede\213" +
    "\u0150\214\ufede\215\ufede\001\002\000\004\213\u0121\001\002" +
    "\000\140\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\142\u0125\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\201\075\213\145\214\uff8d\216\100\217" +
    "\112\220\060\221\116\001\002\000\006\113\u014b\214\uff8e" +
    "\001\002\000\126\032\ufeea\113\uff8b\114\ufeea\115\ufeea\116" +
    "\ufeea\120\u012c\121\u012f\122\u012d\123\u0136\124\u0130\125\u0135" +
    "\126\u0132\127\u0134\130\u012e\131\u012b\132\u0131\133\u0133\134" +
    "\ufeea\136\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea\143\ufeea" +
    "\144\ufeea\145\ufeea\146\ufeea\147\ufeea\150\ufeea\151\ufeea\152" +
    "\ufeea\153\ufeea\154\ufeea\155\ufeea\156\ufeea\157\ufeea\160\ufeea" +
    "\161\ufeea\164\ufeea\165\ufee8\166\ufee8\214\uff8b\001\002\000" +
    "\004\214\u012a\001\002\000\012\010\034\012\061\105\056" +
    "\216\100\001\002\000\066\032\260\114\247\115\267\116" +
    "\240\134\244\136\241\137\261\140\242\141\251\142\262" +
    "\143\266\144\253\145\236\146\250\147\265\150\263\151" +
    "\245\152\264\153\257\154\252\155\270\156\246\157\256" +
    "\160\254\161\237\164\243\001\002\000\072\032\ufeeb\113" +
    "\uff8c\114\ufeeb\115\ufeeb\116\ufeeb\134\ufeeb\136\ufeeb\137\ufeeb" +
    "\140\ufeeb\141\ufeeb\142\ufeeb\143\ufeeb\144\ufeeb\145\ufeeb\146" +
    "\ufeeb\147\ufeeb\150\ufeeb\151\ufeeb\152\ufeeb\153\ufeeb\154\ufeeb" +
    "\155\ufeeb\156\ufeeb\157\ufeeb\160\ufeeb\161\ufeeb\164\ufeeb\214" +
    "\uff8c\001\002\000\006\113\uff8a\214\uff8a\001\002\000\006" +
    "\113\ufee9\214\ufee9\001\002\000\144\032\uff1a\034\uff1a\064" +
    "\uff1a\065\uff1a\102\uff1a\113\uff1a\114\uff1a\115\uff1a\116\uff1a" +
    "\120\uff1a\121\uff1a\122\uff1a\123\uff1a\124\uff1a\125\uff1a\126" +
    "\uff1a\127\uff1a\130\uff1a\131\uff1a\132\uff1a\133\uff1a\134\uff1a" +
    "\135\uff1a\136\uff1a\137\uff1a\140\uff1a\141\uff1a\142\uff1a\143" +
    "\uff1a\144\uff1a\145\uff1a\146\uff1a\147\uff1a\150\uff1a\151\uff1a" +
    "\152\uff1a\153\uff1a\154\uff1a\155\uff1a\156\uff1a\157\uff1a\160" +
    "\uff1a\161\uff1a\164\uff1a\165\uff1a\166\uff1a\200\uff1a\214\uff1a" +
    "\215\uff1a\001\002\000\134\004\141\006\106\007\011\010" +
    "\034\011\053\012\061\016\127\033\103\055\143\056\030" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\105\056\106\027\107\067\110\051\111\124" +
    "\112\105\117\063\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\136\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\142\u0141\155\104\156\066" +
    "\162\142\163\014\165\052\166\147\167\026\170\131\171" +
    "\040\172\126\173\072\174\134\175\071\176\036\201\075" +
    "\213\145\216\100\217\112\220\060\221\116\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\134\004\141\006\106\007\011\010\034\011" +
    "\053\012\061\016\127\033\103\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\105\056\106\027\107\067\110\051\111\124\112\105" +
    "\117\063\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\201\075\213\145\216\100\217\112\220" +
    "\060\221\116\001\002\000\134\004\141\006\106\007\011" +
    "\010\034\011\053\012\061\016\127\033\103\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\134\004\141\006" +
    "\106\007\011\010\034\011\053\012\061\016\127\033\103" +
    "\055\143\056\030\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\213" +
    "\145\216\100\217\112\220\060\221\116\001\002\000\134" +
    "\004\141\006\106\007\011\010\034\011\053\012\061\016" +
    "\127\033\103\055\143\056\030\066\146\067\013\070\020" +
    "\071\045\072\047\073\132\074\006\075\035\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\134\004\141\006\106\007\011\010\034\011\053" +
    "\012\061\016\127\033\103\055\143\056\030\066\146\067" +
    "\013\070\020\071\045\072\047\073\132\074\006\075\035" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\155\104\156\066\162\142\163\014\165\052\166\147" +
    "\167\026\170\131\171\040\172\126\173\072\174\134\175" +
    "\071\176\036\201\075\213\145\216\100\217\112\220\060" +
    "\221\116\001\002\000\134\004\141\006\106\007\011\010" +
    "\034\011\053\012\061\016\127\033\103\055\143\056\030" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\105\056\106\027\107\067\110\051\111\124" +
    "\112\105\117\063\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\134\004\141\006\106" +
    "\007\011\010\034\011\053\012\061\016\127\033\103\055" +
    "\143\056\030\066\146\067\013\070\020\071\045\072\047" +
    "\073\132\074\006\075\035\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\213\145" +
    "\216\100\217\112\220\060\221\116\001\002\000\134\004" +
    "\141\006\106\007\011\010\034\011\053\012\061\016\127" +
    "\033\103\055\143\056\030\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\155\104\156" +
    "\066\162\142\163\014\165\052\166\147\167\026\170\131" +
    "\171\040\172\126\173\072\174\134\175\071\176\036\201" +
    "\075\213\145\216\100\217\112\220\060\221\116\001\002" +
    "\000\134\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\106\032\260\034\uff55\065\uff55\102\uff55" +
    "\113\uff55\114\uff55\115\uff55\116\uff55\134\244\135\uff55\136" +
    "\241\137\261\140\242\141\251\142\262\143\266\144\253" +
    "\145\236\146\250\147\265\150\263\151\245\152\264\153" +
    "\257\154\252\155\270\156\246\157\256\160\254\161\237" +
    "\164\243\200\uff55\214\uff55\215\uff55\001\002\000\106\032" +
    "\260\034\uff53\065\uff53\102\uff53\113\uff53\114\uff53\115\uff53" +
    "\116\uff53\134\244\135\uff53\136\241\137\261\140\242\141" +
    "\251\142\262\143\266\144\253\145\236\146\250\147\265" +
    "\150\263\151\245\152\264\153\257\154\252\155\270\156" +
    "\246\157\256\160\254\161\237\164\243\200\uff53\214\uff53" +
    "\215\uff53\001\002\000\106\032\260\034\uff51\065\uff51\102" +
    "\uff51\113\uff51\114\uff51\115\uff51\116\uff51\134\244\135\uff51" +
    "\136\241\137\261\140\242\141\251\142\262\143\266\144" +
    "\253\145\236\146\250\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\200\uff51\214\uff51\215\uff51\001\002\000\106" +
    "\032\260\034\uff4d\065\uff4d\102\uff4d\113\uff4d\114\uff4d\115" +
    "\uff4d\116\uff4d\134\244\135\uff4d\136\241\137\261\140\242" +
    "\141\251\142\262\143\266\144\253\145\236\146\250\147" +
    "\265\150\263\151\245\152\264\153\257\154\252\155\270" +
    "\156\246\157\256\160\254\161\237\164\243\200\uff4d\214" +
    "\uff4d\215\uff4d\001\002\000\106\032\260\034\uff52\065\uff52" +
    "\102\uff52\113\uff52\114\uff52\115\uff52\116\uff52\134\244\135" +
    "\uff52\136\241\137\261\140\242\141\251\142\262\143\266" +
    "\144\253\145\236\146\250\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\200\uff52\214\uff52\215\uff52\001\002\000" +
    "\106\032\260\034\uff4e\065\uff4e\102\uff4e\113\uff4e\114\uff4e" +
    "\115\uff4e\116\uff4e\134\244\135\uff4e\136\241\137\261\140" +
    "\242\141\251\142\262\143\266\144\253\145\236\146\250" +
    "\147\265\150\263\151\245\152\264\153\257\154\252\155" +
    "\270\156\246\157\256\160\254\161\237\164\243\200\uff4e" +
    "\214\uff4e\215\uff4e\001\002\000\106\032\260\034\uff54\065" +
    "\uff54\102\uff54\113\uff54\114\uff54\115\uff54\116\uff54\134\244" +
    "\135\uff54\136\241\137\261\140\242\141\251\142\262\143" +
    "\266\144\253\145\236\146\250\147\265\150\263\151\245" +
    "\152\264\153\257\154\252\155\270\156\246\157\256\160" +
    "\254\161\237\164\243\200\uff54\214\uff54\215\uff54\001\002" +
    "\000\106\032\260\034\uff57\065\uff57\102\uff57\113\uff57\114" +
    "\uff57\115\uff57\116\uff57\134\244\135\uff57\136\241\137\261" +
    "\140\242\141\251\142\262\143\266\144\253\145\236\146" +
    "\250\147\265\150\263\151\245\152\264\153\257\154\252" +
    "\155\270\156\246\157\256\160\254\161\237\164\243\200" +
    "\uff57\214\uff57\215\uff57\001\002\000\106\032\260\034\uff50" +
    "\065\uff50\102\uff50\113\uff50\114\uff50\115\uff50\116\uff50\134" +
    "\244\135\uff50\136\241\137\261\140\242\141\251\142\262" +
    "\143\266\144\253\145\236\146\250\147\265\150\263\151" +
    "\245\152\264\153\257\154\252\155\270\156\246\157\256" +
    "\160\254\161\237\164\243\200\uff50\214\uff50\215\uff50\001" +
    "\002\000\106\032\260\034\uff56\065\uff56\102\uff56\113\uff56" +
    "\114\uff56\115\uff56\116\uff56\134\244\135\uff56\136\241\137" +
    "\261\140\242\141\251\142\262\143\266\144\253\145\236" +
    "\146\250\147\265\150\263\151\245\152\264\153\257\154" +
    "\252\155\270\156\246\157\256\160\254\161\237\164\243" +
    "\200\uff56\214\uff56\215\uff56\001\002\000\014\010\034\012" +
    "\061\105\056\201\u0143\216\100\001\002\000\106\032\260" +
    "\034\uff5c\065\uff5c\102\uff5c\113\uff5c\114\uff5c\115\uff5c\116" +
    "\uff5c\134\244\135\uff5c\136\241\137\261\140\242\141\251" +
    "\142\262\143\266\144\253\145\236\146\250\147\265\150" +
    "\263\151\245\152\264\153\257\154\252\155\270\156\246" +
    "\157\256\160\254\161\237\164\243\200\uff5c\214\uff5c\215" +
    "\uff5c\001\002\000\010\010\306\012\061\216\100\001\002" +
    "\000\106\032\uff5b\034\uff5b\065\uff5b\102\uff5b\113\uff5b\114" +
    "\uff5b\115\uff5b\116\uff5b\134\uff5b\135\uff5b\136\uff5b\137\uff5b" +
    "\140\uff5b\141\uff5b\142\uff5b\143\uff5b\144\uff5b\145\uff5b\146" +
    "\uff5b\147\uff5b\150\uff5b\151\uff5b\152\uff5b\153\uff5b\154\uff5b" +
    "\155\uff5b\156\uff5b\157\uff5b\160\uff5b\161\uff5b\164\uff5b\200" +
    "\uff5b\214\uff5b\215\uff5b\001\002\000\110\032\uff0c\034\uff0c" +
    "\065\uff0c\102\uff0c\113\uff0c\114\uff0c\115\uff0c\116\uff0c\134" +
    "\uff0c\135\uff0c\136\uff0c\137\uff0c\140\uff0c\141\uff0c\142\uff0c" +
    "\143\uff0c\144\uff0c\145\uff0c\146\uff0c\147\uff0c\150\uff0c\151" +
    "\uff0c\152\uff0c\153\uff0c\154\uff0c\155\uff0c\156\uff0c\157\uff0c" +
    "\160\uff0c\161\uff0c\164\uff0c\200\uff0c\213\u0147\214\uff0c\215" +
    "\uff0c\001\002\000\106\032\uff5a\034\uff5a\065\uff5a\102\uff5a" +
    "\113\uff5a\114\uff5a\115\uff5a\116\uff5a\134\uff5a\135\uff5a\136" +
    "\uff5a\137\uff5a\140\uff5a\141\uff5a\142\uff5a\143\uff5a\144\uff5a" +
    "\145\uff5a\146\uff5a\147\uff5a\150\uff5a\151\uff5a\152\uff5a\153" +
    "\uff5a\154\uff5a\155\uff5a\156\uff5a\157\uff5a\160\uff5a\161\uff5a" +
    "\164\uff5a\200\uff5a\214\uff5a\215\uff5a\001\002\000\140\004" +
    "\141\006\106\007\011\010\034\011\053\012\061\016\127" +
    "\033\103\055\143\056\030\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\142\u0125\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\214\uff8d\216\100\217\112\220\060" +
    "\221\116\001\002\000\004\214\u0149\001\002\000\106\032" +
    "\uff0b\034\uff0b\065\uff0b\102\uff0b\113\uff0b\114\uff0b\115\uff0b" +
    "\116\uff0b\134\uff0b\135\uff0b\136\uff0b\137\uff0b\140\uff0b\141" +
    "\uff0b\142\uff0b\143\uff0b\144\uff0b\145\uff0b\146\uff0b\147\uff0b" +
    "\150\uff0b\151\uff0b\152\uff0b\153\uff0b\154\uff0b\155\uff0b\156" +
    "\uff0b\157\uff0b\160\uff0b\161\uff0b\164\uff0b\200\uff0b\214\uff0b" +
    "\215\uff0b\001\002\000\106\032\260\034\uff4f\065\uff4f\102" +
    "\uff4f\113\uff4f\114\uff4f\115\uff4f\116\uff4f\134\244\135\uff4f" +
    "\136\241\137\261\140\242\141\251\142\262\143\266\144" +
    "\253\145\236\146\250\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\200\uff4f\214\uff4f\215\uff4f\001\002\000\136" +
    "\004\141\006\106\007\011\010\034\011\053\012\061\016" +
    "\127\033\103\055\143\056\030\066\146\067\013\070\020" +
    "\071\045\072\047\073\132\074\006\075\035\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\142\u014d" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\213\145\216\100\217\112\220\060\221" +
    "\116\001\002\000\126\032\ufeea\113\uff88\114\ufeea\115\ufeea" +
    "\116\ufeea\120\u012c\121\u012f\122\u012d\123\u0136\124\u0130\125" +
    "\u0135\126\u0132\127\u0134\130\u012e\131\u012b\132\u0131\133\u0133" +
    "\134\ufeea\136\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea\143" +
    "\ufeea\144\ufeea\145\ufeea\146\ufeea\147\ufeea\150\ufeea\151\ufeea" +
    "\152\ufeea\153\ufeea\154\ufeea\155\ufeea\156\ufeea\157\ufeea\160" +
    "\ufeea\161\ufeea\164\ufeea\165\ufee8\166\ufee8\214\uff88\001\002" +
    "\000\012\010\034\012\061\105\056\216\100\001\002\000" +
    "\072\032\ufeeb\113\uff89\114\ufeeb\115\ufeeb\116\ufeeb\134\ufeeb" +
    "\136\ufeeb\137\ufeeb\140\ufeeb\141\ufeeb\142\ufeeb\143\ufeeb\144" +
    "\ufeeb\145\ufeeb\146\ufeeb\147\ufeeb\150\ufeeb\151\ufeeb\152\ufeeb" +
    "\153\ufeeb\154\ufeeb\155\ufeeb\156\ufeeb\157\ufeeb\160\ufeeb\161" +
    "\ufeeb\164\ufeeb\214\uff89\001\002\000\006\113\uff87\214\uff87" +
    "\001\002\000\140\004\141\006\106\007\011\010\034\011" +
    "\053\012\061\016\127\033\103\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\105\056\106\027\107\067\110\051\111\124\112\105" +
    "\117\063\142\u0125\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\214\uff8d\216" +
    "\100\217\112\220\060\221\116\001\002\000\004\214\u0152" +
    "\001\002\000\144\032\uff19\034\uff19\064\uff19\065\uff19\102" +
    "\uff19\113\uff19\114\uff19\115\uff19\116\uff19\120\uff19\121\uff19" +
    "\122\uff19\123\uff19\124\uff19\125\uff19\126\uff19\127\uff19\130" +
    "\uff19\131\uff19\132\uff19\133\uff19\134\uff19\135\uff19\136\uff19" +
    "\137\uff19\140\uff19\141\uff19\142\uff19\143\uff19\144\uff19\145" +
    "\uff19\146\uff19\147\uff19\150\uff19\151\uff19\152\uff19\153\uff19" +
    "\154\uff19\155\uff19\156\uff19\157\uff19\160\uff19\161\uff19\164" +
    "\uff19\165\uff19\166\uff19\200\uff19\214\uff19\215\uff19\001\002" +
    "\000\140\004\141\006\106\007\011\010\034\011\053\012" +
    "\061\016\127\033\103\055\143\056\030\066\146\067\013" +
    "\070\020\071\045\072\047\073\132\074\006\075\035\105" +
    "\056\106\027\107\067\110\051\111\124\112\105\117\063" +
    "\142\u0125\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\201\075\213\145\214\uff8d\216\100\217" +
    "\112\220\060\221\116\001\002\000\004\214\u0155\001\002" +
    "\000\144\032\uff1b\034\uff1b\064\uff1b\065\uff1b\102\uff1b\113" +
    "\uff1b\114\uff1b\115\uff1b\116\uff1b\120\uff1b\121\uff1b\122\uff1b" +
    "\123\uff1b\124\uff1b\125\uff1b\126\uff1b\127\uff1b\130\uff1b\131" +
    "\uff1b\132\uff1b\133\uff1b\134\uff1b\135\uff1b\136\uff1b\137\uff1b" +
    "\140\uff1b\141\uff1b\142\uff1b\143\uff1b\144\uff1b\145\uff1b\146" +
    "\uff1b\147\uff1b\150\uff1b\151\uff1b\152\uff1b\153\uff1b\154\uff1b" +
    "\155\uff1b\156\uff1b\157\uff1b\160\uff1b\161\uff1b\164\uff1b\165" +
    "\uff1b\166\uff1b\200\uff1b\214\uff1b\215\uff1b\001\002\000\020" +
    "\010\034\012\061\066\u015a\105\056\113\ufec4\214\ufec4\216" +
    "\100\001\002\000\006\113\u015e\214\u0160\001\002\000\006" +
    "\113\ufec7\214\ufec7\001\002\000\006\113\ufec6\214\ufec6\001" +
    "\002\000\004\213\u015b\001\002\000\020\010\034\012\061" +
    "\066\u015a\105\056\113\ufec4\214\ufec4\216\100\001\002\000" +
    "\006\113\u015e\214\u015d\001\002\000\006\113\ufec5\214\ufec5" +
    "\001\002\000\020\010\034\012\061\066\u015a\105\056\113" +
    "\ufec4\214\ufec4\216\100\001\002\000\006\113\ufec8\214\ufec8" +
    "\001\002\000\004\120\u0161\001\002\000\134\004\141\006" +
    "\106\007\011\010\034\011\053\012\061\016\127\033\103" +
    "\055\143\056\030\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\213" +
    "\145\216\100\217\112\220\060\221\116\001\002\000\106" +
    "\032\260\034\uff5d\065\uff5d\102\uff5d\113\uff5d\114\uff5d\115" +
    "\uff5d\116\uff5d\134\244\135\uff5d\136\241\137\261\140\242" +
    "\141\251\142\262\143\266\144\253\145\236\146\250\147" +
    "\265\150\263\151\245\152\264\153\257\154\252\155\270" +
    "\156\246\157\256\160\254\161\237\164\243\200\uff5d\214" +
    "\uff5d\215\uff5d\001\002\000\070\032\260\114\247\115\267" +
    "\116\240\134\244\136\241\137\261\140\242\141\251\142" +
    "\262\143\266\144\253\145\236\146\250\147\265\150\263" +
    "\151\245\152\264\153\257\154\252\155\270\156\246\157" +
    "\256\160\254\161\237\164\243\214\u0164\001\002\000\106" +
    "\032\uff2b\034\uff2b\065\uff2b\102\uff2b\113\uff2b\114\uff2b\115" +
    "\uff2b\116\uff2b\134\uff2b\135\uff2b\136\uff2b\137\uff2b\140\uff2b" +
    "\141\uff2b\142\uff2b\143\uff2b\144\uff2b\145\uff2b\146\uff2b\147" +
    "\uff2b\150\uff2b\151\uff2b\152\uff2b\153\uff2b\154\uff2b\155\uff2b" +
    "\156\uff2b\157\uff2b\160\uff2b\161\uff2b\164\uff2b\200\uff2b\214" +
    "\uff2b\215\uff2b\001\002\000\012\010\034\012\061\105\056" +
    "\216\100\001\002\000\006\113\ufea6\214\ufea6\001\002\000" +
    "\006\113\u0169\214\u0168\001\002\000\106\032\ufead\034\ufead" +
    "\065\ufead\102\ufead\113\ufead\114\ufead\115\ufead\116\ufead\134" +
    "\ufead\135\ufead\136\ufead\137\ufead\140\ufead\141\ufead\142\ufead" +
    "\143\ufead\144\ufead\145\ufead\146\ufead\147\ufead\150\ufead\151" +
    "\ufead\152\ufead\153\ufead\154\ufead\155\ufead\156\ufead\157\ufead" +
    "\160\ufead\161\ufead\164\ufead\200\ufead\214\ufead\215\ufead\001" +
    "\002\000\012\010\034\012\061\105\056\216\100\001\002" +
    "\000\006\113\ufea5\214\ufea5\001\002\000\106\032\260\034" +
    "\uff36\065\uff36\102\uff36\113\uff36\114\uff36\115\uff36\116\uff36" +
    "\134\uff36\135\uff36\136\uff36\137\uff36\140\uff36\141\uff36\142" +
    "\uff36\143\uff36\144\uff36\145\uff36\146\uff36\147\uff36\150\uff36" +
    "\151\uff36\152\uff36\153\uff36\154\uff36\155\uff36\156\uff36\157" +
    "\uff36\160\uff36\161\uff36\164\uff36\200\uff36\214\uff36\215\uff36" +
    "\001\002\000\136\004\141\006\106\007\011\010\034\011" +
    "\053\012\061\016\127\033\103\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\105\056\106\027\107\067\110\051\111\124\112\105" +
    "\117\063\155\104\156\066\162\142\163\014\165\052\166" +
    "\147\167\026\170\131\171\040\172\126\173\072\174\134" +
    "\175\071\176\036\201\075\213\145\214\u016f\216\100\217" +
    "\112\220\060\221\116\001\002\000\106\032\uff21\034\uff21" +
    "\065\uff21\102\uff21\113\uff21\114\uff21\115\uff21\116\uff21\134" +
    "\uff21\135\uff21\136\uff21\137\uff21\140\uff21\141\uff21\142\uff21" +
    "\143\uff21\144\uff21\145\uff21\146\uff21\147\uff21\150\uff21\151" +
    "\uff21\152\uff21\153\uff21\154\uff21\155\uff21\156\uff21\157\uff21" +
    "\160\uff21\161\uff21\164\uff21\200\uff21\214\uff21\215\uff21\001" +
    "\002\000\070\032\260\114\247\115\267\116\240\134\244" +
    "\136\241\137\261\140\242\141\251\142\262\143\266\144" +
    "\253\145\236\146\250\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\214\u0170\001\002\000\106\032\uff0e\034\uff0e" +
    "\065\uff0e\102\uff0e\113\uff0e\114\uff0e\115\uff0e\116\uff0e\134" +
    "\uff0e\135\uff0e\136\uff0e\137\uff0e\140\uff0e\141\uff0e\142\uff0e" +
    "\143\uff0e\144\uff0e\145\uff0e\146\uff0e\147\uff0e\150\uff0e\151" +
    "\uff0e\152\uff0e\153\uff0e\154\uff0e\155\uff0e\156\uff0e\157\uff0e" +
    "\160\uff0e\161\uff0e\164\uff0e\200\uff0e\214\uff0e\215\uff0e\001" +
    "\002\000\106\032\uff0d\034\uff0d\065\uff0d\102\uff0d\113\uff0d" +
    "\114\uff0d\115\uff0d\116\uff0d\134\uff0d\135\uff0d\136\uff0d\137" +
    "\uff0d\140\uff0d\141\uff0d\142\uff0d\143\uff0d\144\uff0d\145\uff0d" +
    "\146\uff0d\147\uff0d\150\uff0d\151\uff0d\152\uff0d\153\uff0d\154" +
    "\uff0d\155\uff0d\156\uff0d\157\uff0d\160\uff0d\161\uff0d\164\uff0d" +
    "\200\uff0d\214\uff0d\215\uff0d\001\002\000\254\002\uffe7\003" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\014\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\045\uffe7\046\uffe7\050\uffe7\051\uffe7\052\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\066" +
    "\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\101\uffe7\102\uffe7\104\uffe7\105\uffe7\106\uffe7\107" +
    "\uffe7\110\uffe7\111\uffe7\112\uffe7\117\uffe7\135\uffe7\155\uffe7" +
    "\156\uffe7\162\uffe7\163\uffe7\165\uffe7\166\uffe7\167\uffe7\170" +
    "\uffe7\171\uffe7\172\uffe7\173\uffe7\174\uffe7\175\uffe7\176\uffe7" +
    "\201\uffe7\202\uffe7\203\uffe7\204\uffe7\205\uffe7\206\uffe7\207" +
    "\uffe7\213\uffe7\216\uffe7\217\uffe7\220\uffe7\221\uffe7\001\002" +
    "\000\124\032\ufeea\114\ufeea\115\ufeea\116\ufeea\120\u012c\121" +
    "\u012f\122\u012d\123\u0136\124\u0130\125\u0135\126\u0132\127\u0134" +
    "\130\u012e\131\u012b\132\u0131\133\u0133\134\ufeea\135\u0175\136" +
    "\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea\143\ufeea\144\ufeea" +
    "\145\ufeea\146\ufeea\147\ufeea\150\ufeea\151\ufeea\152\ufeea\153" +
    "\ufeea\154\ufeea\155\ufeea\156\ufeea\157\ufeea\160\ufeea\161\ufeea" +
    "\164\ufeea\165\ufee8\166\ufee8\001\002\000\070\032\ufeeb\114" +
    "\ufeeb\115\ufeeb\116\ufeeb\134\ufeeb\135\u0174\136\ufeeb\137\ufeeb" +
    "\140\ufeeb\141\ufeeb\142\ufeeb\143\ufeeb\144\ufeeb\145\ufeeb\146" +
    "\ufeeb\147\ufeeb\150\ufeeb\151\ufeeb\152\ufeeb\153\ufeeb\154\ufeeb" +
    "\155\ufeeb\156\ufeeb\157\ufeeb\160\ufeeb\161\ufeeb\164\ufeeb\001" +
    "\002\000\254\002\uffe6\003\uffe6\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\011\uffe6\012\uffe6\014\uffe6\016\uffe6\017" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\033\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\045\uffe6\046\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6" +
    "\072\uffe6\073\uffe6\074\uffe6\075\uffe6\101\uffe6\102\uffe6\104" +
    "\uffe6\105\uffe6\106\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6" +
    "\117\uffe6\135\uffe6\155\uffe6\156\uffe6\162\uffe6\163\uffe6\165" +
    "\uffe6\166\uffe6\167\uffe6\170\uffe6\171\uffe6\172\uffe6\173\uffe6" +
    "\174\uffe6\175\uffe6\176\uffe6\201\uffe6\202\uffe6\203\uffe6\204" +
    "\uffe6\205\uffe6\206\uffe6\207\uffe6\213\uffe6\216\uffe6\217\uffe6" +
    "\220\uffe6\221\uffe6\001\002\000\254\002\uffe5\003\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\014\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5\052\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\066\uffe5\067" +
    "\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074\uffe5\075\uffe5" +
    "\101\uffe5\102\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5\110" +
    "\uffe5\111\uffe5\112\uffe5\117\uffe5\135\uffe5\155\uffe5\156\uffe5" +
    "\162\uffe5\163\uffe5\165\uffe5\166\uffe5\167\uffe5\170\uffe5\171" +
    "\uffe5\172\uffe5\173\uffe5\174\uffe5\175\uffe5\176\uffe5\201\uffe5" +
    "\202\uffe5\203\uffe5\204\uffe5\205\uffe5\206\uffe5\207\uffe5\213" +
    "\uffe5\216\uffe5\217\uffe5\220\uffe5\221\uffe5\001\002\000\106" +
    "\032\uff23\034\uff23\065\uff23\102\uff23\113\uff23\114\uff23\115" +
    "\uff23\116\uff23\134\uff23\135\uff23\136\uff23\137\uff23\140\uff23" +
    "\141\uff23\142\uff23\143\uff23\144\uff23\145\uff23\146\uff23\147" +
    "\uff23\150\uff23\151\uff23\152\uff23\153\uff23\154\uff23\155\uff23" +
    "\156\uff23\157\uff23\160\uff23\161\uff23\164\uff23\200\uff23\214" +
    "\uff23\215\uff23\001\002\000\106\032\uff27\034\uff27\065\uff27" +
    "\102\uff27\113\uff27\114\uff27\115\uff27\116\uff27\134\uff27\135" +
    "\uff27\136\uff27\137\uff27\140\uff27\141\uff27\142\uff27\143\uff27" +
    "\144\uff27\145\uff27\146\uff27\147\uff27\150\uff27\151\uff27\152" +
    "\uff27\153\uff27\154\uff27\155\uff27\156\uff27\157\uff27\160\uff27" +
    "\161\uff27\164\uff27\200\uff27\214\uff27\215\uff27\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\070\032\260\114\247\115\267\116\240\134" +
    "\244\136\241\137\261\140\242\141\251\142\262\143\266" +
    "\144\253\145\236\146\250\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\214\u017a\001\002\000\006\101\u017c\215" +
    "\u017d\001\002\000\254\002\uffec\003\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec\016" +
    "\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec" +
    "\026\uffec\027\uffec\030\uffec\031\uffec\033\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\045\uffec" +
    "\046\uffec\050\uffec\051\uffec\052\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\060\uffec\061\uffec\066\uffec\067\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\101\uffec\102" +
    "\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec" +
    "\112\uffec\117\uffec\135\uffec\155\uffec\156\uffec\162\uffec\163" +
    "\uffec\165\uffec\166\uffec\167\uffec\170\uffec\171\uffec\172\uffec" +
    "\173\uffec\174\uffec\175\uffec\176\uffec\201\uffec\202\uffec\203" +
    "\uffec\204\uffec\205\uffec\206\uffec\207\uffec\213\uffec\216\uffec" +
    "\217\uffec\220\uffec\221\uffec\001\002\000\012\037\uffa8\040" +
    "\uffa8\102\uffa8\135\u018f\001\002\000\012\036\uffa8\037\uffa8" +
    "\040\uffa8\135\u017f\001\002\000\010\036\u018c\037\u0182\040" +
    "\u0183\001\002\000\010\036\uffa8\037\uffa8\040\uffa8\001\002" +
    "\000\010\036\u0181\037\u0182\040\u0183\001\002\000\004\135" +
    "\u018b\001\002\000\134\004\141\006\106\007\011\010\034" +
    "\011\053\012\061\016\127\033\103\055\143\056\030\066" +
    "\146\067\013\070\020\071\045\072\047\073\132\074\006" +
    "\075\035\105\056\106\027\107\067\110\051\111\124\112" +
    "\105\117\063\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\006\135\u0186\215\u0185\001" +
    "\002\000\234\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\017\ufff8\021" +
    "\ufff8\022\ufff8\024\ufff8\026\ufff8\030\ufff8\033\ufff8\035\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\101\ufff8" +
    "\102\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111" +
    "\ufff8\112\ufff8\117\ufff8\135\ufff8\155\ufff8\156\ufff8\162\ufff8" +
    "\163\ufff8\165\ufff8\166\ufff8\167\ufff8\170\ufff8\171\ufff8\172" +
    "\ufff8\173\ufff8\174\ufff8\175\ufff8\176\ufff8\201\ufff8\205\ufff8" +
    "\206\ufff8\207\ufff8\213\ufff8\216\ufff8\217\ufff8\220\ufff8\221" +
    "\ufff8\001\002\000\234\003\uffa5\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\011\uffa5\012\uffa5\014\uffa5\016\uffa5\017" +
    "\uffa5\021\uffa5\022\uffa5\024\uffa5\026\uffa5\030\uffa5\033\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\054\uffa5" +
    "\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5\066\uffa5\067" +
    "\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5" +
    "\101\uffa5\102\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110" +
    "\uffa5\111\uffa5\112\uffa5\117\uffa5\135\uffa5\155\uffa5\156\uffa5" +
    "\162\uffa5\163\uffa5\165\uffa5\166\uffa5\167\uffa5\170\uffa5\171" +
    "\uffa5\172\uffa5\173\uffa5\174\uffa5\175\uffa5\176\uffa5\201\uffa5" +
    "\205\uffa5\206\uffa5\207\uffa5\213\uffa5\216\uffa5\217\uffa5\220" +
    "\uffa5\221\uffa5\001\002\000\234\003\uffa4\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\014\uffa4\016" +
    "\uffa4\017\uffa4\021\uffa4\022\uffa4\024\uffa4\026\uffa4\030\uffa4" +
    "\033\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\066" +
    "\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4" +
    "\075\uffa4\101\uffa4\102\uffa4\104\uffa4\105\uffa4\106\uffa4\107" +
    "\uffa4\110\uffa4\111\uffa4\112\uffa4\117\uffa4\135\uffa4\155\uffa4" +
    "\156\uffa4\162\uffa4\163\uffa4\165\uffa4\166\uffa4\167\uffa4\170" +
    "\uffa4\171\uffa4\172\uffa4\173\uffa4\174\uffa4\175\uffa4\176\uffa4" +
    "\201\uffa4\205\uffa4\206\uffa4\207\uffa4\213\uffa4\216\uffa4\217" +
    "\uffa4\220\uffa4\221\uffa4\001\002\000\234\003\115\004\141" +
    "\005\152\006\106\007\011\010\034\011\053\012\061\014" +
    "\074\016\127\017\122\021\120\022\044\024\033\026\101" +
    "\030\153\033\103\035\130\036\uffa6\037\uffa6\040\uffa6\041" +
    "\055\042\121\043\107\045\135\046\041\050\150\051\025" +
    "\052\012\054\076\055\143\056\030\057\223\060\032\061" +
    "\140\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\101\064\102\uffa6\104\024\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\135\010" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\205\042\206\062\207\017\213\145\216" +
    "\100\217\112\220\060\221\116\001\002\000\072\032\260" +
    "\114\247\115\267\116\240\134\244\135\u0186\136\241\137" +
    "\261\140\242\141\251\142\262\143\266\144\253\145\236" +
    "\146\250\147\265\150\263\151\245\152\264\153\257\154" +
    "\252\155\270\156\246\157\256\160\254\161\237\164\243" +
    "\215\u0185\001\002\000\234\003\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\024\ufff8\026\ufff8\030\ufff8\033" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\101\ufff8\102\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8" +
    "\110\ufff8\111\ufff8\112\ufff8\117\ufff8\135\ufff8\155\ufff8\156" +
    "\ufff8\162\ufff8\163\ufff8\165\ufff8\166\ufff8\167\ufff8\170\ufff8" +
    "\171\ufff8\172\ufff8\173\ufff8\174\ufff8\175\ufff8\176\ufff8\201" +
    "\ufff8\205\ufff8\206\ufff8\207\ufff8\213\ufff8\216\ufff8\217\ufff8" +
    "\220\ufff8\221\ufff8\001\002\000\234\003\115\004\141\005" +
    "\152\006\106\007\011\010\034\011\053\012\061\014\074" +
    "\016\127\017\122\021\120\022\044\024\033\026\101\030" +
    "\153\033\103\035\130\036\uffa7\037\uffa7\040\uffa7\041\055" +
    "\042\121\043\107\045\135\046\041\050\150\051\025\052" +
    "\012\054\076\055\143\056\030\057\223\060\032\061\140" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\101\064\102\uffa7\104\024\105\056\106\027" +
    "\107\067\110\051\111\124\112\105\117\063\135\010\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\205\042\206\062\207\017\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\254\002\uffa9\003" +
    "\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\014\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\033\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\066" +
    "\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9" +
    "\075\uffa9\101\uffa9\102\uffa9\104\uffa9\105\uffa9\106\uffa9\107" +
    "\uffa9\110\uffa9\111\uffa9\112\uffa9\117\uffa9\135\uffa9\155\uffa9" +
    "\156\uffa9\162\uffa9\163\uffa9\165\uffa9\166\uffa9\167\uffa9\170" +
    "\uffa9\171\uffa9\172\uffa9\173\uffa9\174\uffa9\175\uffa9\176\uffa9" +
    "\201\uffa9\202\uffa9\203\uffa9\204\uffa9\205\uffa9\206\uffa9\207" +
    "\uffa9\213\uffa9\216\uffa9\217\uffa9\220\uffa9\221\uffa9\001\002" +
    "\000\004\135\u018d\001\002\000\254\002\uffaa\003\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\014\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa" +
    "\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa" +
    "\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\066\uffaa\067" +
    "\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa" +
    "\101\uffaa\102\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110" +
    "\uffaa\111\uffaa\112\uffaa\117\uffaa\135\uffaa\155\uffaa\156\uffaa" +
    "\162\uffaa\163\uffaa\165\uffaa\166\uffaa\167\uffaa\170\uffaa\171" +
    "\uffaa\172\uffaa\173\uffaa\174\uffaa\175\uffaa\176\uffaa\201\uffaa" +
    "\202\uffaa\203\uffaa\204\uffaa\205\uffaa\206\uffaa\207\uffaa\213" +
    "\uffaa\216\uffaa\217\uffaa\220\uffaa\221\uffaa\001\002\000\010" +
    "\037\u0182\040\u0183\102\u0192\001\002\000\010\037\uffa8\040" +
    "\uffa8\102\uffa8\001\002\000\010\037\u0182\040\u0183\102\u0191" +
    "\001\002\000\254\002\uffab\003\uffab\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\014\uffab\016\uffab" +
    "\017\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\033\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\045\uffab\046" +
    "\uffab\050\uffab\051\uffab\052\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\060\uffab\061\uffab\066\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\101\uffab\102\uffab" +
    "\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\112" +
    "\uffab\117\uffab\135\uffab\155\uffab\156\uffab\162\uffab\163\uffab" +
    "\165\uffab\166\uffab\167\uffab\170\uffab\171\uffab\172\uffab\173" +
    "\uffab\174\uffab\175\uffab\176\uffab\201\uffab\202\uffab\203\uffab" +
    "\204\uffab\205\uffab\206\uffab\207\uffab\213\uffab\216\uffab\217" +
    "\uffab\220\uffab\221\uffab\001\002\000\254\002\uffac\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\014\uffac\016\uffac\017\uffac\021\uffac\022\uffac\023\uffac" +
    "\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\033" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\045\uffac\046\uffac\050\uffac\051\uffac\052\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\066\uffac" +
    "\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\101\uffac\102\uffac\104\uffac\105\uffac\106\uffac\107\uffac" +
    "\110\uffac\111\uffac\112\uffac\117\uffac\135\uffac\155\uffac\156" +
    "\uffac\162\uffac\163\uffac\165\uffac\166\uffac\167\uffac\170\uffac" +
    "\171\uffac\172\uffac\173\uffac\174\uffac\175\uffac\176\uffac\201" +
    "\uffac\202\uffac\203\uffac\204\uffac\205\uffac\206\uffac\207\uffac" +
    "\213\uffac\216\uffac\217\uffac\220\uffac\221\uffac\001\002\000" +
    "\106\032\uff25\034\uff25\065\uff25\102\uff25\113\uff25\114\uff25" +
    "\115\uff25\116\uff25\134\uff25\135\uff25\136\uff25\137\uff25\140" +
    "\uff25\141\uff25\142\uff25\143\uff25\144\uff25\145\uff25\146\uff25" +
    "\147\uff25\150\uff25\151\uff25\152\uff25\153\uff25\154\uff25\155" +
    "\uff25\156\uff25\157\uff25\160\uff25\161\uff25\164\uff25\200\uff25" +
    "\214\uff25\215\uff25\001\002\000\106\032\260\034\ufea8\065" +
    "\ufea8\102\ufea8\113\ufea8\114\247\115\267\116\240\134\244" +
    "\135\ufea8\136\241\137\261\140\242\141\251\142\262\143" +
    "\266\144\253\145\236\146\250\147\265\150\263\151\245" +
    "\152\264\153\257\154\252\155\270\156\246\157\256\160" +
    "\254\161\237\164\243\200\ufea8\214\ufea8\215\ufea8\001\002" +
    "\000\006\113\u0197\135\u0198\001\002\000\072\032\260\113" +
    "\uff62\114\247\115\267\116\240\134\244\135\uff62\136\241" +
    "\137\261\140\242\141\251\142\262\143\266\144\253\145" +
    "\236\146\250\147\265\150\263\151\245\152\264\153\257" +
    "\154\252\155\270\156\246\157\256\160\254\161\237\164" +
    "\243\001\002\000\134\004\141\006\106\007\011\010\034" +
    "\011\053\012\061\016\127\033\103\055\143\056\030\066" +
    "\146\067\013\070\020\071\045\072\047\073\132\074\006" +
    "\075\035\105\056\106\027\107\067\110\051\111\124\112" +
    "\105\117\063\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\213\145\216\100\217\112" +
    "\220\060\221\116\001\002\000\254\002\uffe2\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\014\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2" +
    "\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043" +
    "\uffe2\045\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\066\uffe2\067" +
    "\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2" +
    "\101\uffe2\102\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110" +
    "\uffe2\111\uffe2\112\uffe2\117\uffe2\135\uffe2\155\uffe2\156\uffe2" +
    "\162\uffe2\163\uffe2\165\uffe2\166\uffe2\167\uffe2\170\uffe2\171" +
    "\uffe2\172\uffe2\173\uffe2\174\uffe2\175\uffe2\176\uffe2\201\uffe2" +
    "\202\uffe2\203\uffe2\204\uffe2\205\uffe2\206\uffe2\207\uffe2\213" +
    "\uffe2\216\uffe2\217\uffe2\220\uffe2\221\uffe2\001\002\000\072" +
    "\032\260\113\uff63\114\247\115\267\116\240\134\244\135" +
    "\uff63\136\241\137\261\140\242\141\251\142\262\143\266" +
    "\144\253\145\236\146\250\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\001\002\000\254\002\uffe9\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\033\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9" +
    "\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9" +
    "\101\uffe9\102\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9\110" +
    "\uffe9\111\uffe9\112\uffe9\117\uffe9\135\uffe9\155\uffe9\156\uffe9" +
    "\162\uffe9\163\uffe9\165\uffe9\166\uffe9\167\uffe9\170\uffe9\171" +
    "\uffe9\172\uffe9\173\uffe9\174\uffe9\175\uffe9\176\uffe9\201\uffe9" +
    "\202\uffe9\203\uffe9\204\uffe9\205\uffe9\206\uffe9\207\uffe9\213" +
    "\uffe9\216\uffe9\217\uffe9\220\uffe9\221\uffe9\001\002\000\070" +
    "\032\260\114\247\115\267\116\240\134\244\135\u019c\136" +
    "\241\137\261\140\242\141\251\142\262\143\266\144\253" +
    "\145\236\146\250\147\265\150\263\151\245\152\264\153" +
    "\257\154\252\155\270\156\246\157\256\160\254\161\237" +
    "\164\243\001\002\000\254\002\uffe8\003\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\014\uffe8" +
    "\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\033\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\045" +
    "\uffe8\046\uffe8\050\uffe8\051\uffe8\052\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\066\uffe8\067\uffe8\070" +
    "\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8\075\uffe8\101\uffe8" +
    "\102\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8\111" +
    "\uffe8\112\uffe8\117\uffe8\135\uffe8\155\uffe8\156\uffe8\162\uffe8" +
    "\163\uffe8\165\uffe8\166\uffe8\167\uffe8\170\uffe8\171\uffe8\172" +
    "\uffe8\173\uffe8\174\uffe8\175\uffe8\176\uffe8\201\uffe8\202\uffe8" +
    "\203\uffe8\204\uffe8\205\uffe8\206\uffe8\207\uffe8\213\uffe8\216" +
    "\uffe8\217\uffe8\220\uffe8\221\uffe8\001\002\000\004\022\u019e" +
    "\001\002\000\004\213\u019f\001\002\000\134\004\141\006" +
    "\106\007\011\010\034\011\053\012\061\016\127\033\103" +
    "\055\143\056\030\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\105\056\106\027\107\067" +
    "\110\051\111\124\112\105\117\063\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\213" +
    "\145\216\100\217\112\220\060\221\116\001\002\000\070" +
    "\032\260\114\247\115\267\116\240\134\244\136\241\137" +
    "\261\140\242\141\251\142\262\143\266\144\253\145\236" +
    "\146\250\147\265\150\263\151\245\152\264\153\257\154" +
    "\252\155\270\156\246\157\256\160\254\161\237\164\243" +
    "\214\u01a1\001\002\000\004\135\u01a2\001\002\000\254\002" +
    "\uffee\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee" +
    "\011\uffee\012\uffee\014\uffee\016\uffee\017\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\033\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\045\uffee\046\uffee\050\uffee\051\uffee" +
    "\052\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061" +
    "\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee" +
    "\074\uffee\075\uffee\101\uffee\102\uffee\104\uffee\105\uffee\106" +
    "\uffee\107\uffee\110\uffee\111\uffee\112\uffee\117\uffee\135\uffee" +
    "\155\uffee\156\uffee\162\uffee\163\uffee\165\uffee\166\uffee\167" +
    "\uffee\170\uffee\171\uffee\172\uffee\173\uffee\174\uffee\175\uffee" +
    "\176\uffee\201\uffee\202\uffee\203\uffee\204\uffee\205\uffee\206" +
    "\uffee\207\uffee\213\uffee\216\uffee\217\uffee\220\uffee\221\uffee" +
    "\001\002\000\004\222\u01a4\001\002\000\106\032\uff02\034" +
    "\uff02\065\uff02\102\uff02\113\uff02\114\uff02\115\uff02\116\uff02" +
    "\134\uff02\135\uff02\136\uff02\137\uff02\140\uff02\141\uff02\142" +
    "\uff02\143\uff02\144\uff02\145\uff02\146\uff02\147\uff02\150\uff02" +
    "\151\uff02\152\uff02\153\uff02\154\uff02\155\uff02\156\uff02\157" +
    "\uff02\160\uff02\161\uff02\164\uff02\200\uff02\214\uff02\215\uff02" +
    "\001\002\000\006\062\u01a7\101\uffbe\001\002\000\004\101" +
    "\u01ad\001\002\000\004\010\u01aa\001\002\000\006\101\uffbd" +
    "\113\u01ab\001\002\000\006\101\uffba\113\uffba\001\002\000" +
    "\012\012\uff17\063\uff17\101\uff17\113\uff17\001\002\000\004" +
    "\010\u01aa\001\002\000\006\101\uffb9\113\uffb9\001\002\000" +
    "\030\043\uff7c\044\uff7c\053\uff7c\102\uff7c\104\uff7c\205\uff7c" +
    "\206\uff7c\207\uff7c\210\uff7c\211\uff7c\212\uff7c\001\002\000" +
    "\030\043\uff73\044\u01ba\053\u01b1\102\u01b7\104\u01be\205\u01b3" +
    "\206\u01b6\207\u01b9\210\u01bc\211\u01b2\212\u01b5\001\002\000" +
    "\030\043\uff7d\044\uff7d\053\uff7d\102\uff7d\104\uff7d\205\uff7d" +
    "\206\uff7d\207\uff7d\210\uff7d\211\uff7d\212\uff7d\001\002\000" +
    "\006\113\u01e6\135\u01e7\001\002\000\004\012\uff74\001\002" +
    "\000\022\012\uff6e\043\uff6e\205\uff6e\206\uff6e\207\uff6e\210" +
    "\uff6e\211\uff6e\212\uff6e\001\002\000\022\012\uff6c\043\uff6c" +
    "\205\uff6c\206\uff6c\207\uff6c\210\uff6c\211\uff6c\212\uff6c\001" +
    "\002\000\022\012\uff71\043\uff71\205\uff71\206\uff71\207\uff71" +
    "\210\uff71\211\uff71\212\uff71\001\002\000\022\012\uff6f\043" +
    "\uff6f\205\uff6f\206\uff6f\207\uff6f\210\uff6f\211\uff6f\212\uff6f" +
    "\001\002\000\022\012\uff6b\043\uff6b\205\uff6b\206\uff6b\207" +
    "\uff6b\210\uff6b\211\uff6b\212\uff6b\001\002\000\254\002\uffc5" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\014\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\033\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\101\uffc5\102\uffc5\104\uffc5\105\uffc5\106\uffc5" +
    "\107\uffc5\110\uffc5\111\uffc5\112\uffc5\117\uffc5\135\uffc5\155" +
    "\uffc5\156\uffc5\162\uffc5\163\uffc5\165\uffc5\166\uffc5\167\uffc5" +
    "\170\uffc5\171\uffc5\172\uffc5\173\uffc5\174\uffc5\175\uffc5\176" +
    "\uffc5\201\uffc5\202\uffc5\203\uffc5\204\uffc5\205\uffc5\206\uffc5" +
    "\207\uffc5\213\uffc5\216\uffc5\217\uffc5\220\uffc5\221\uffc5\001" +
    "\002\000\004\012\u01dd\001\002\000\022\012\uff6a\043\uff6a" +
    "\205\uff6a\206\uff6a\207\uff6a\210\uff6a\211\uff6a\212\uff6a\001" +
    "\002\000\004\010\u01da\001\002\000\022\012\uff75\043\uff72" +
    "\205\u01b3\206\u01b6\207\u01b9\210\u01bc\211\u01b2\212\u01b5\001" +
    "\002\000\022\012\uff6d\043\uff6d\205\uff6d\206\uff6d\207\uff6d" +
    "\210\uff6d\211\uff6d\212\uff6d\001\002\000\004\043\u01bf\001" +
    "\002\000\030\043\uff78\044\uff78\053\uff78\102\uff78\104\uff78" +
    "\205\uff78\206\uff78\207\uff78\210\uff78\211\uff78\212\uff78\001" +
    "\002\000\010\010\uffc9\105\uffc9\142\u01c1\001\002\000\006" +
    "\010\157\105\056\001\002\000\006\010\uffc8\105\uffc8\001" +
    "\002\000\004\213\u01c3\001\002\000\014\010\u01c6\012\uff91" +
    "\067\u01c4\142\uff91\214\uff98\001\002\000\006\012\uff8f\142" +
    "\uff8f\001\002\000\006\012\u01d3\142\u01d2\001\002\000\006" +
    "\012\uff90\142\uff90\001\002\000\004\214\u01cc\001\002\000" +
    "\006\113\u01ca\214\uff99\001\002\000\006\113\uff97\214\uff97" +
    "\001\002\000\012\010\u01c6\012\uff91\067\u01c4\142\uff91\001" +
    "\002\000\006\113\uff96\214\uff96\001\002\000\006\101\u01ce" +
    "\135\u01cf\001\002\000\030\043\uff79\044\uff79\053\uff79\102" +
    "\uff79\104\uff79\205\uff79\206\uff79\207\uff79\210\uff79\211\uff79" +
    "\212\uff79\001\002\000\226\003\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\024\ufff8\026\ufff8\030\ufff8\033" +
    "\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\075\ufff8\101\ufff8\102\ufff8\104" +
    "\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8" +
    "\117\ufff8\135\ufff8\155\ufff8\156\ufff8\162\ufff8\163\ufff8\165" +
    "\ufff8\166\ufff8\167\ufff8\170\ufff8\171\ufff8\172\ufff8\173\ufff8" +
    "\174\ufff8\175\ufff8\176\ufff8\201\ufff8\205\ufff8\206\ufff8\207" +
    "\ufff8\213\ufff8\216\ufff8\217\ufff8\220\ufff8\221\ufff8\001\002" +
    "\000\030\043\uff77\044\uff77\053\uff77\102\uff77\104\uff77\205" +
    "\uff77\206\uff77\207\uff77\210\uff77\211\uff77\212\uff77\001\002" +
    "\000\226\003\115\004\141\005\152\006\106\007\011\010" +
    "\034\011\053\012\061\014\074\016\127\017\122\021\120" +
    "\022\044\024\033\026\101\030\153\033\103\035\130\041" +
    "\055\042\121\043\107\045\135\046\041\050\150\051\025" +
    "\052\012\054\076\055\143\056\030\057\223\060\032\061" +
    "\140\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\101\064\102\u01d1\104\024\105\056\106" +
    "\027\107\067\110\051\111\124\112\105\117\063\135\010" +
    "\155\104\156\066\162\142\163\014\165\052\166\147\167" +
    "\026\170\131\171\040\172\126\173\072\174\134\175\071" +
    "\176\036\201\075\205\042\206\062\207\017\213\145\216" +
    "\100\217\112\220\060\221\116\001\002\000\030\043\uff76" +
    "\044\uff76\053\uff76\102\uff76\104\uff76\205\uff76\206\uff76\207" +
    "\uff76\210\uff76\211\uff76\212\uff76\001\002\000\004\012\u01d6" +
    "\001\002\000\010\113\uff95\120\u01d4\214\uff95\001\002\000" +
    "\036\006\106\007\011\010\167\016\127\067\164\070\020" +
    "\071\045\072\047\073\132\074\006\105\056\155\170\156" +
    "\162\221\116\001\002\000\006\113\uff93\214\uff93\001\002" +
    "\000\010\113\uff94\120\u01d7\214\uff94\001\002\000\036\006" +
    "\106\007\011\010\167\016\127\067\164\070\020\071\045" +
    "\072\047\073\132\074\006\105\056\155\170\156\162\221" +
    "\116\001\002\000\006\113\uff92\214\uff92\001\002\000\022" +
    "\012\uff70\043\uff70\205\uff70\206\uff70\207\uff70\210\uff70\211" +
    "\uff70\212\uff70\001\002\000\004\120\u01db\001\002\000\036" +
    "\006\106\007\011\010\167\016\127\067\164\070\020\071" +
    "\045\072\047\073\132\074\006\105\056\155\170\156\162" +
    "\221\116\001\002\000\006\113\uff64\135\uff64\001\002\000" +
    "\010\113\uff67\120\u01e4\135\uff67\001\002\000\006\113\u01df" +
    "\135\u01e0\001\002\000\004\012\u01e1\001\002\000\030\043" +
    "\uff7b\044\uff7b\053\uff7b\102\uff7b\104\uff7b\205\uff7b\206\uff7b" +
    "\207\uff7b\210\uff7b\211\uff7b\212\uff7b\001\002\000\010\113" +
    "\uff69\120\u01e2\135\uff69\001\002\000\036\006\106\007\011" +
    "\010\167\016\127\067\164\070\020\071\045\072\047\073" +
    "\132\074\006\105\056\155\170\156\162\221\116\001\002" +
    "\000\006\113\uff68\135\uff68\001\002\000\036\006\106\007" +
    "\011\010\167\016\127\067\164\070\020\071\045\072\047" +
    "\073\132\074\006\105\056\155\170\156\162\221\116\001" +
    "\002\000\006\113\uff66\135\uff66\001\002\000\004\010\u01e8" +
    "\001\002\000\030\043\uff7a\044\uff7a\053\uff7a\102\uff7a\104" +
    "\uff7a\205\uff7a\206\uff7a\207\uff7a\210\uff7a\211\uff7a\212\uff7a" +
    "\001\002\000\004\120\u01e9\001\002\000\036\006\106\007" +
    "\011\010\167\016\127\067\164\070\020\071\045\072\047" +
    "\073\132\074\006\105\056\155\170\156\162\221\116\001" +
    "\002\000\006\113\uff65\135\uff65\001\002\000\014\012\061" +
    "\015\u01f1\077\u01f0\100\u01ee\217\u01ef\001\002\000\024\012" +
    "\ufeb6\015\ufeb6\064\u01fc\076\ufeb6\077\ufeb6\100\ufeb6\177\u01fb" +
    "\217\ufeb6\220\ufeb6\001\002\000\020\012\ufeb9\015\ufeb9\076" +
    "\ufeb9\077\ufeb9\100\ufeb9\217\ufeb9\220\ufeb9\001\002\000\012" +
    "\010\034\012\061\105\056\216\100\001\002\000\106\032" +
    "\ufef6\034\ufef6\065\ufef6\102\ufef6\113\ufef6\114\ufef6\115\ufef6" +
    "\116\ufef6\134\ufef6\135\ufef6\136\ufef6\137\ufef6\140\ufef6\141" +
    "\ufef6\142\ufef6\143\ufef6\144\ufef6\145\ufef6\146\ufef6\147\ufef6" +
    "\150\ufef6\151\ufef6\152\ufef6\153\ufef6\154\ufef6\155\ufef6\156" +
    "\ufef6\157\ufef6\160\ufef6\161\ufef6\164\ufef6\200\ufef6\214\ufef6" +
    "\215\ufef6\001\002\000\134\004\141\006\106\007\011\010" +
    "\034\011\u01f2\012\061\016\127\033\103\055\143\056\030" +
    "\066\146\067\013\070\020\071\045\072\047\073\132\074" +
    "\006\075\035\105\056\106\027\107\067\110\051\111\124" +
    "\112\105\117\063\155\104\156\066\162\142\163\014\165" +
    "\052\166\147\167\026\170\131\171\040\172\126\173\072" +
    "\174\134\175\071\176\036\201\075\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\020\012\ufeb8\015\ufeb8" +
    "\076\ufeb8\077\ufeb8\100\ufeb8\217\ufeb8\220\ufeb8\001\002\000" +
    "\072\032\ufef9\102\ufef9\114\ufef9\115\ufef9\116\ufef9\134\ufef9" +
    "\136\ufef9\137\ufef9\140\ufef9\141\ufef9\142\ufef9\143\ufef9\144" +
    "\ufef9\145\ufef9\146\ufef9\147\ufef9\150\ufef9\151\ufef9\152\ufef9" +
    "\153\ufef9\154\ufef9\155\ufef9\156\ufef9\157\ufef9\160\ufef9\161" +
    "\ufef9\164\ufef9\177\u01f5\001\002\000\070\032\260\102\u01f4" +
    "\114\247\115\267\116\240\134\244\136\241\137\261\140" +
    "\242\141\251\142\262\143\266\144\253\145\236\146\250" +
    "\147\265\150\263\151\245\152\264\153\257\154\252\155" +
    "\270\156\246\157\256\160\254\161\237\164\243\001\002" +
    "\000\020\012\ufeb3\015\ufeb3\076\ufeb3\077\ufeb3\100\ufeb3\217" +
    "\ufeb3\220\ufeb3\001\002\000\134\004\141\006\106\007\011" +
    "\010\034\011\053\012\061\016\127\033\103\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\070\032\260\114" +
    "\247\115\267\116\240\134\244\136\241\137\261\140\242" +
    "\141\251\142\262\143\266\144\253\145\236\146\250\147" +
    "\265\150\263\151\245\152\264\153\257\154\252\155\270" +
    "\156\246\157\256\160\254\161\237\164\243\200\u01f7\001" +
    "\002\000\004\102\u01f8\001\002\000\020\012\ufeb2\015\ufeb2" +
    "\076\ufeb2\077\ufeb2\100\ufeb2\217\ufeb2\220\ufeb2\001\002\000" +
    "\004\102\u01fa\001\002\000\020\012\ufeb1\015\ufeb1\076\ufeb1" +
    "\077\ufeb1\100\ufeb1\217\ufeb1\220\ufeb1\001\002\000\012\010" +
    "\157\012\061\013\u0201\105\056\001\002\000\006\010\157" +
    "\105\056\001\002\000\020\012\ufeb4\015\ufeb4\076\ufeb4\077" +
    "\ufeb4\100\ufeb4\217\ufeb4\220\ufeb4\001\002\000\004\200\ufeae" +
    "\001\002\000\004\200\u0202\001\002\000\004\200\ufeb0\001" +
    "\002\000\004\200\ufeaf\001\002\000\020\012\ufeb5\015\ufeb5" +
    "\076\ufeb5\077\ufeb5\100\ufeb5\217\ufeb5\220\ufeb5\001\002\000" +
    "\006\010\157\105\056\001\002\000\004\213\u0205\001\002" +
    "\000\014\010\u01c6\012\uff91\067\u01c4\142\uff91\214\uff98\001" +
    "\002\000\004\214\u0207\001\002\000\004\101\u0208\001\002" +
    "\000\226\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\026\ufff8\030\ufff8\033\ufff8\035\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061" +
    "\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8" +
    "\074\ufff8\075\ufff8\101\ufff8\102\ufff8\104\ufff8\105\ufff8\106" +
    "\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\117\ufff8\135\ufff8" +
    "\155\ufff8\156\ufff8\162\ufff8\163\ufff8\165\ufff8\166\ufff8\167" +
    "\ufff8\170\ufff8\171\ufff8\172\ufff8\173\ufff8\174\ufff8\175\ufff8" +
    "\176\ufff8\201\ufff8\205\ufff8\206\ufff8\207\ufff8\213\ufff8\216" +
    "\ufff8\217\ufff8\220\ufff8\221\ufff8\001\002\000\226\003\115" +
    "\004\141\005\152\006\106\007\011\010\034\011\053\012" +
    "\061\014\074\016\127\017\122\021\120\022\044\024\033" +
    "\026\101\030\153\033\103\035\130\041\055\042\121\043" +
    "\107\045\135\046\041\050\150\051\025\052\012\054\076" +
    "\055\143\056\030\057\223\060\032\061\140\066\146\067" +
    "\013\070\020\071\045\072\047\073\132\074\006\075\035" +
    "\101\064\102\u020a\104\024\105\056\106\027\107\067\110" +
    "\051\111\124\112\105\117\063\135\010\155\104\156\066" +
    "\162\142\163\014\165\052\166\147\167\026\170\131\171" +
    "\040\172\126\173\072\174\134\175\071\176\036\201\075" +
    "\205\042\206\062\207\017\213\145\216\100\217\112\220" +
    "\060\221\116\001\002\000\254\002\uffc7\003\uffc7\004\uffc7" +
    "\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014" +
    "\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\045\uffc7\046\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\101" +
    "\uffc7\102\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\112\uffc7\117\uffc7\135\uffc7\155\uffc7\156\uffc7\162" +
    "\uffc7\163\uffc7\165\uffc7\166\uffc7\167\uffc7\170\uffc7\171\uffc7" +
    "\172\uffc7\173\uffc7\174\uffc7\175\uffc7\176\uffc7\201\uffc7\202" +
    "\uffc7\203\uffc7\204\uffc7\205\uffc7\206\uffc7\207\uffc7\213\uffc7" +
    "\216\uffc7\217\uffc7\220\uffc7\221\uffc7\001\002\000\106\032" +
    "\260\034\ufea7\065\ufea7\102\ufea7\113\ufea7\114\247\115\267" +
    "\116\240\134\244\135\ufea7\136\241\137\261\140\242\141" +
    "\251\142\262\143\266\144\253\145\236\146\250\147\265" +
    "\150\263\151\245\152\264\153\257\154\252\155\270\156" +
    "\246\157\256\160\254\161\237\164\243\200\ufea7\214\ufea7" +
    "\215\ufea7\001\002\000\106\032\260\034\uff38\065\uff38\102" +
    "\uff38\113\uff38\114\uff38\115\uff38\116\uff38\134\uff38\135\uff38" +
    "\136\uff38\137\uff38\140\uff38\141\uff38\142\uff38\143\uff38\144" +
    "\uff38\145\uff38\146\uff38\147\uff38\150\uff38\151\uff38\152\uff38" +
    "\153\uff38\154\uff38\155\uff38\156\uff38\157\256\160\254\161" +
    "\237\164\uff38\200\uff38\214\uff38\215\uff38\001\002\000\106" +
    "\032\uff58\034\uff58\065\uff58\102\uff58\113\uff58\114\uff58\115" +
    "\uff58\116\uff58\134\uff58\135\uff58\136\uff58\137\uff58\140\uff58" +
    "\141\uff58\142\uff58\143\uff58\144\uff58\145\uff58\146\uff58\147" +
    "\uff58\150\uff58\151\uff58\152\uff58\153\uff58\154\uff58\155\uff58" +
    "\156\uff58\157\uff58\160\uff58\161\uff58\164\uff58\200\uff58\214" +
    "\uff58\215\uff58\001\002\000\134\004\141\006\106\007\011" +
    "\010\034\011\053\012\061\016\127\033\103\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\213\145\216\100" +
    "\217\112\220\060\221\116\001\002\000\124\032\ufeea\034" +
    "\u0220\114\ufeea\115\ufeea\116\ufeea\120\u012c\121\u012f\122\u012d" +
    "\123\u0136\124\u0130\125\u0135\126\u0132\127\u0134\130\u012e\131" +
    "\u012b\132\u0131\133\u0133\134\ufeea\136\ufeea\137\ufeea\140\ufeea" +
    "\141\ufeea\142\ufeea\143\ufeea\144\ufeea\145\ufeea\146\ufeea\147" +
    "\ufeea\150\ufeea\151\ufeea\152\ufeea\153\ufeea\154\ufeea\155\ufeea" +
    "\156\ufeea\157\ufeea\160\ufeea\161\ufeea\164\ufeea\165\ufee8\166" +
    "\ufee8\001\002\000\070\032\ufeeb\034\u0211\114\ufeeb\115\ufeeb" +
    "\116\ufeeb\134\ufeeb\136\ufeeb\137\ufeeb\140\ufeeb\141\ufeeb\142" +
    "\ufeeb\143\ufeeb\144\ufeeb\145\ufeeb\146\ufeeb\147\ufeeb\150\ufeeb" +
    "\151\ufeeb\152\ufeeb\153\ufeeb\154\ufeeb\155\ufeeb\156\ufeeb\157" +
    "\ufeeb\160\ufeeb\161\ufeeb\164\ufeeb\001\002\000\012\010\034" +
    "\012\061\105\056\216\100\001\002\000\006\065\u0214\214" +
    "\uffb8\001\002\000\004\214\u0219\001\002\000\014\010\034" +
    "\012\061\105\056\142\u0217\216\100\001\002\000\004\214" +
    "\uffb7\001\002\000\006\065\uffb6\214\uffb6\001\002\000\012" +
    "\010\034\012\061\105\056\216\100\001\002\000\006\065" +
    "\uffb5\214\uffb5\001\002\000\212\003\115\004\141\005\152" +
    "\006\106\007\011\010\034\011\053\012\061\014\074\016" +
    "\127\017\122\021\120\022\044\024\033\026\101\030\153" +
    "\033\103\035\130\041\055\042\121\045\135\046\041\050" +
    "\150\051\025\052\012\054\076\055\143\056\030\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\101\064\104\024\105\056\106\027\107\067\110\051" +
    "\111\124\112\105\117\063\135\010\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\205" +
    "\042\213\145\215\u021a\216\100\217\112\220\060\221\116" +
    "\001\002\000\226\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\033" +
    "\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8\046\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\075\ufff8\101\ufff8\104\ufff8\105" +
    "\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112\ufff8\117\ufff8" +
    "\135\ufff8\155\ufff8\156\ufff8\162\ufff8\163\ufff8\165\ufff8\166" +
    "\ufff8\167\ufff8\170\ufff8\171\ufff8\172\ufff8\173\ufff8\174\ufff8" +
    "\175\ufff8\176\ufff8\201\ufff8\205\ufff8\206\ufff8\207\ufff8\213" +
    "\ufff8\216\ufff8\217\ufff8\220\ufff8\221\ufff8\001\002\000\254" +
    "\002\uffb2\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\014\uffb2\016\uffb2\017\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\033\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\045\uffb2\046\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2" +
    "\061\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\074\uffb2\075\uffb2\101\uffb2\102\uffb2\104\uffb2\105\uffb2" +
    "\106\uffb2\107\uffb2\110\uffb2\111\uffb2\112\uffb2\117\uffb2\135" +
    "\uffb2\155\uffb2\156\uffb2\162\uffb2\163\uffb2\165\uffb2\166\uffb2" +
    "\167\uffb2\170\uffb2\171\uffb2\172\uffb2\173\uffb2\174\uffb2\175" +
    "\uffb2\176\uffb2\201\uffb2\202\uffb2\203\uffb2\204\uffb2\205\uffb2" +
    "\206\uffb2\207\uffb2\213\uffb2\216\uffb2\217\uffb2\220\uffb2\221" +
    "\uffb2\001\002\000\254\002\uffdc\003\uffdc\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\016" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\045\uffdc" +
    "\046\uffdc\050\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\101\uffdc\102" +
    "\uffdc\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc" +
    "\112\uffdc\117\uffdc\135\uffdc\155\uffdc\156\uffdc\162\uffdc\163" +
    "\uffdc\165\uffdc\166\uffdc\167\uffdc\170\uffdc\171\uffdc\172\uffdc" +
    "\173\uffdc\174\uffdc\175\uffdc\176\uffdc\201\uffdc\202\uffdc\203" +
    "\uffdc\204\uffdc\205\uffdc\206\uffdc\207\uffdc\213\uffdc\216\uffdc" +
    "\217\uffdc\220\uffdc\221\uffdc\001\002\000\226\003\115\004" +
    "\141\005\152\006\106\007\011\010\034\011\053\012\061" +
    "\014\074\016\127\017\122\021\120\022\044\024\033\026" +
    "\101\027\u021e\030\153\033\103\035\130\041\055\042\121" +
    "\043\107\045\135\046\041\050\150\051\025\052\012\054" +
    "\076\055\143\056\030\057\223\060\032\061\140\066\146" +
    "\067\013\070\020\071\045\072\047\073\132\074\006\075" +
    "\035\101\064\104\024\105\056\106\027\107\067\110\051" +
    "\111\124\112\105\117\063\135\010\155\104\156\066\162" +
    "\142\163\014\165\052\166\147\167\026\170\131\171\040" +
    "\172\126\173\072\174\134\175\071\176\036\201\075\205" +
    "\042\206\062\207\017\213\145\216\100\217\112\220\060" +
    "\221\116\001\002\000\004\135\u021f\001\002\000\254\002" +
    "\uffb1\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1" +
    "\011\uffb1\012\uffb1\014\uffb1\016\uffb1\017\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\033\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\043\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\101\uffb1\102\uffb1\104\uffb1\105\uffb1\106" +
    "\uffb1\107\uffb1\110\uffb1\111\uffb1\112\uffb1\117\uffb1\135\uffb1" +
    "\155\uffb1\156\uffb1\162\uffb1\163\uffb1\165\uffb1\166\uffb1\167" +
    "\uffb1\170\uffb1\171\uffb1\172\uffb1\173\uffb1\174\uffb1\175\uffb1" +
    "\176\uffb1\201\uffb1\202\uffb1\203\uffb1\204\uffb1\205\uffb1\206" +
    "\uffb1\207\uffb1\213\uffb1\216\uffb1\217\uffb1\220\uffb1\221\uffb1" +
    "\001\002\000\014\010\034\012\061\105\056\142\u0217\216" +
    "\100\001\002\000\006\065\u0214\214\uffb8\001\002\000\004" +
    "\214\u0223\001\002\000\212\003\115\004\141\005\152\006" +
    "\106\007\011\010\034\011\053\012\061\014\074\016\127" +
    "\017\122\021\120\022\044\024\033\026\101\030\153\033" +
    "\103\035\130\041\055\042\121\045\135\046\041\050\150" +
    "\051\025\052\012\054\076\055\143\056\030\066\146\067" +
    "\013\070\020\071\045\072\047\073\132\074\006\075\035" +
    "\101\064\104\024\105\056\106\027\107\067\110\051\111" +
    "\124\112\105\117\063\135\010\155\104\156\066\162\142" +
    "\163\014\165\052\166\147\167\026\170\131\171\040\172" +
    "\126\173\072\174\134\175\071\176\036\201\075\205\042" +
    "\213\145\215\u021a\216\100\217\112\220\060\221\116\001" +
    "\002\000\254\002\uffdd\003\uffdd\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\033\uffdd\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd" +
    "\072\uffdd\073\uffdd\074\uffdd\075\uffdd\101\uffdd\102\uffdd\104" +
    "\uffdd\105\uffdd\106\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd" +
    "\117\uffdd\135\uffdd\155\uffdd\156\uffdd\162\uffdd\163\uffdd\165" +
    "\uffdd\166\uffdd\167\uffdd\170\uffdd\171\uffdd\172\uffdd\173\uffdd" +
    "\174\uffdd\175\uffdd\176\uffdd\201\uffdd\202\uffdd\203\uffdd\204" +
    "\uffdd\205\uffdd\206\uffdd\207\uffdd\213\uffdd\216\uffdd\217\uffdd" +
    "\220\uffdd\221\uffdd\001\002\000\106\032\uff4c\034\uff4c\065" +
    "\uff4c\102\uff4c\113\uff4c\114\uff4c\115\uff4c\116\uff4c\134\uff4c" +
    "\135\uff4c\136\uff4c\137\uff4c\140\uff4c\141\uff4c\142\uff4c\143" +
    "\uff4c\144\uff4c\145\uff4c\146\uff4c\147\uff4c\150\uff4c\151\uff4c" +
    "\152\uff4c\153\uff4c\154\uff4c\155\uff4c\156\uff4c\157\uff4c\160" +
    "\uff4c\161\uff4c\164\uff4c\200\uff4c\214\uff4c\215\uff4c\001\002" +
    "\000\106\032\uff4a\034\uff4a\065\uff4a\102\uff4a\113\uff4a\114" +
    "\uff4a\115\uff4a\116\uff4a\134\uff4a\135\uff4a\136\uff4a\137\uff4a" +
    "\140\uff4a\141\uff4a\142\uff4a\143\uff4a\144\uff4a\145\uff4a\146" +
    "\uff4a\147\uff4a\150\uff4a\151\uff4a\152\uff4a\153\uff4a\154\uff4a" +
    "\155\uff4a\156\uff4a\157\uff4a\160\uff4a\161\uff4a\164\uff4a\200" +
    "\uff4a\214\uff4a\215\uff4a\001\002\000\012\010\034\012\061" +
    "\105\056\216\100\001\002\000\006\113\uffd0\214\uffd0\001" +
    "\002\000\006\113\uffce\214\uffce\001\002\000\006\113\u022c" +
    "\214\u022b\001\002\000\004\135\u022e\001\002\000\012\010" +
    "\034\012\061\105\056\216\100\001\002\000\006\113\uffcf" +
    "\214\uffcf\001\002\000\254\002\uffde\003\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde" +
    "\016\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043\uffde\045" +
    "\uffde\046\uffde\050\uffde\051\uffde\052\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\066\uffde\067\uffde\070" +
    "\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\101\uffde" +
    "\102\uffde\104\uffde\105\uffde\106\uffde\107\uffde\110\uffde\111" +
    "\uffde\112\uffde\117\uffde\135\uffde\155\uffde\156\uffde\162\uffde" +
    "\163\uffde\165\uffde\166\uffde\167\uffde\170\uffde\171\uffde\172" +
    "\uffde\173\uffde\174\uffde\175\uffde\176\uffde\201\uffde\202\uffde" +
    "\203\uffde\204\uffde\205\uffde\206\uffde\207\uffde\213\uffde\216" +
    "\uffde\217\uffde\220\uffde\221\uffde\001\002\000\110\032\uff0c" +
    "\034\uff0c\065\uff0c\102\uff0c\113\uff0c\114\uff0c\115\uff0c\116" +
    "\uff0c\134\uff0c\135\uff0c\136\uff0c\137\uff0c\140\uff0c\141\uff0c" +
    "\142\uff0c\143\uff0c\144\uff0c\145\uff0c\146\uff0c\147\uff0c\150" +
    "\uff0c\151\uff0c\152\uff0c\153\uff0c\154\uff0c\155\uff0c\156\uff0c" +
    "\157\uff0c\160\uff0c\161\uff0c\164\uff0c\200\uff0c\213\u0147\214" +
    "\uff0c\215\uff0c\001\002\000\106\032\uff59\034\uff59\065\uff59" +
    "\102\uff59\113\uff59\114\uff59\115\uff59\116\uff59\134\uff59\135" +
    "\uff59\136\uff59\137\uff59\140\uff59\141\uff59\142\uff59\143\uff59" +
    "\144\uff59\145\uff59\146\uff59\147\uff59\150\uff59\151\uff59\152" +
    "\uff59\153\uff59\154\uff59\155\uff59\156\uff59\157\uff59\160\uff59" +
    "\161\uff59\164\uff59\200\uff59\214\uff59\215\uff59\001\002\000" +
    "\106\032\uff24\034\uff24\065\uff24\102\uff24\113\uff24\114\uff24" +
    "\115\uff24\116\uff24\134\uff24\135\uff24\136\uff24\137\uff24\140" +
    "\uff24\141\uff24\142\uff24\143\uff24\144\uff24\145\uff24\146\uff24" +
    "\147\uff24\150\uff24\151\uff24\152\uff24\153\uff24\154\uff24\155" +
    "\uff24\156\uff24\157\uff24\160\uff24\161\uff24\164\uff24\200\uff24" +
    "\214\uff24\215\uff24\001\002\000\106\032\uff22\034\uff22\065" +
    "\uff22\102\uff22\113\uff22\114\uff22\115\uff22\116\uff22\134\uff22" +
    "\135\uff22\136\uff22\137\uff22\140\uff22\141\uff22\142\uff22\143" +
    "\uff22\144\uff22\145\uff22\146\uff22\147\uff22\150\uff22\151\uff22" +
    "\152\uff22\153\uff22\154\uff22\155\uff22\156\uff22\157\uff22\160" +
    "\uff22\161\uff22\164\uff22\200\uff22\214\uff22\215\uff22\001\002" +
    "\000\152\032\ufeda\034\ufeda\064\ufeda\065\ufeda\101\310\102" +
    "\ufeda\113\ufeda\114\ufeda\115\ufeda\116\ufeda\120\ufeda\121\ufeda" +
    "\122\ufeda\123\ufeda\124\ufeda\125\ufeda\126\ufeda\127\ufeda\130" +
    "\ufeda\131\ufeda\132\ufeda\133\ufeda\134\ufeda\135\ufeda\136\ufeda" +
    "\137\ufeda\140\ufeda\141\ufeda\142\ufeda\143\ufeda\144\ufeda\145" +
    "\ufeda\146\ufeda\147\ufeda\150\ufeda\151\ufeda\152\ufeda\153\ufeda" +
    "\154\ufeda\155\ufeda\156\ufeda\157\ufeda\160\ufeda\161\ufeda\164" +
    "\ufeda\165\ufeda\166\ufeda\177\311\200\ufeda\213\ufedf\214\ufeda" +
    "\215\ufeda\001\002\000\106\032\260\034\ufeaa\065\ufeaa\102" +
    "\ufeaa\113\ufeaa\114\247\115\267\116\240\134\244\135\ufeaa" +
    "\136\241\137\261\140\242\141\251\142\262\143\266\144" +
    "\253\145\236\146\250\147\265\150\263\151\245\152\264" +
    "\153\257\154\252\155\270\156\246\157\256\160\254\161" +
    "\237\164\243\200\ufeaa\214\ufeaa\215\ufeaa\001\002\000\106" +
    "\032\260\034\uff37\065\uff37\102\uff37\113\uff37\114\uff37\115" +
    "\uff37\116\uff37\134\uff37\135\uff37\136\uff37\137\uff37\140\uff37" +
    "\141\uff37\142\uff37\143\uff37\144\uff37\145\uff37\146\uff37\147" +
    "\uff37\150\uff37\151\uff37\152\uff37\153\uff37\154\uff37\155\uff37" +
    "\156\uff37\157\256\160\254\161\237\164\uff37\200\uff37\214" +
    "\uff37\215\uff37\001\002\000\226\003\115\004\141\005\152" +
    "\006\106\007\011\010\034\011\053\012\061\014\074\016" +
    "\127\017\122\021\120\022\044\024\033\026\101\030\153" +
    "\033\103\035\130\041\055\042\121\043\107\045\135\046" +
    "\041\050\150\051\025\052\012\054\076\055\143\056\030" +
    "\057\223\060\032\061\140\066\146\067\013\070\020\071" +
    "\045\072\047\073\132\074\006\075\035\101\064\102\u0237" +
    "\104\024\105\056\106\027\107\067\110\051\111\124\112" +
    "\105\117\063\135\010\155\104\156\066\162\142\163\014" +
    "\165\052\166\147\167\026\170\131\171\040\172\126\173" +
    "\072\174\134\175\071\176\036\201\075\205\042\206\062" +
    "\207\017\213\145\216\100\217\112\220\060\221\116\001" +
    "\002\000\254\002\ufff2\003\ufff2\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\014\ufff2\016\ufff2\017" +
    "\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\026\ufff2" +
    "\027\ufff2\030\ufff2\031\ufff2\033\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\075\ufff2\101\ufff2\102\ufff2\104" +
    "\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2\112\ufff2" +
    "\117\ufff2\135\ufff2\155\ufff2\156\ufff2\162\ufff2\163\ufff2\165" +
    "\ufff2\166\ufff2\167\ufff2\170\ufff2\171\ufff2\172\ufff2\173\ufff2" +
    "\174\ufff2\175\ufff2\176\ufff2\201\ufff2\202\ufff2\203\ufff2\204" +
    "\ufff2\205\ufff2\206\ufff2\207\ufff2\213\ufff2\216\ufff2\217\ufff2" +
    "\220\ufff2\221\ufff2\001\002\000\106\032\260\034\uff1c\065" +
    "\uff1c\102\uff1c\113\uff1c\114\uff1c\115\uff1c\116\uff1c\134\244" +
    "\135\uff1c\136\241\137\261\140\242\141\251\142\262\143" +
    "\266\144\253\145\236\146\250\147\265\150\263\151\245" +
    "\152\264\153\257\154\252\155\270\156\246\157\256\160" +
    "\254\161\237\164\243\200\uff1c\214\uff1c\215\uff1c\001\002" +
    "\000\004\010\uffc3\001\002\000\014\012\061\015\u01f1\077" +
    "\u01f0\100\u01ee\220\u023b\001\002\000\106\032\uff1d\034\uff1d" +
    "\065\uff1d\102\uff1d\113\uff1d\114\uff1d\115\uff1d\116\uff1d\134" +
    "\uff1d\135\uff1d\136\uff1d\137\uff1d\140\uff1d\141\uff1d\142\uff1d" +
    "\143\uff1d\144\uff1d\145\uff1d\146\uff1d\147\uff1d\150\uff1d\151" +
    "\uff1d\152\uff1d\153\uff1d\154\uff1d\155\uff1d\156\uff1d\157\uff1d" +
    "\160\uff1d\161\uff1d\164\uff1d\200\uff1d\214\uff1d\215\uff1d\001" +
    "\002\000\004\214\u023d\001\002\000\004\020\u023e\001\002" +
    "\000\004\135\u023f\001\002\000\226\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\014\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\024\ufffa\026" +
    "\ufffa\030\ufffa\033\ufffa\035\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\045\ufffa\046\ufffa\050\ufffa\051\ufffa\052\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\101" +
    "\ufffa\104\ufffa\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa" +
    "\112\ufffa\117\ufffa\135\ufffa\155\ufffa\156\ufffa\162\ufffa\163" +
    "\ufffa\165\ufffa\166\ufffa\167\ufffa\170\ufffa\171\ufffa\172\ufffa" +
    "\173\ufffa\174\ufffa\175\ufffa\176\ufffa\201\ufffa\205\ufffa\206" +
    "\ufffa\207\ufffa\213\ufffa\216\ufffa\217\ufffa\220\ufffa\221\ufffa" +
    "\001\002\000\254\002\uffeb\003\uffeb\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\016\uffeb" +
    "\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\061\uffeb\066\uffeb\067\uffeb\070\uffeb\071" +
    "\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\101\uffeb\102\uffeb" +
    "\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112" +
    "\uffeb\117\uffeb\135\uffeb\155\uffeb\156\uffeb\162\uffeb\163\uffeb" +
    "\165\uffeb\166\uffeb\167\uffeb\170\uffeb\171\uffeb\172\uffeb\173" +
    "\uffeb\174\uffeb\175\uffeb\176\uffeb\201\uffeb\202\uffeb\203\uffeb" +
    "\204\uffeb\205\uffeb\206\uffeb\207\uffeb\213\uffeb\216\uffeb\217" +
    "\uffeb\220\uffeb\221\uffeb\001\002\000\070\032\260\114\247" +
    "\115\267\116\240\134\244\135\u0242\136\241\137\261\140" +
    "\242\141\251\142\262\143\266\144\253\145\236\146\250" +
    "\147\265\150\263\151\245\152\264\153\257\154\252\155" +
    "\270\156\246\157\256\160\254\161\237\164\243\001\002" +
    "\000\254\002\uffea\003\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\014\uffea\016\uffea\017\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\033\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\045\uffea\046\uffea\050" +
    "\uffea\051\uffea\052\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072" +
    "\uffea\073\uffea\074\uffea\075\uffea\101\uffea\102\uffea\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\117" +
    "\uffea\135\uffea\155\uffea\156\uffea\162\uffea\163\uffea\165\uffea" +
    "\166\uffea\167\uffea\170\uffea\171\uffea\172\uffea\173\uffea\174" +
    "\uffea\175\uffea\176\uffea\201\uffea\202\uffea\203\uffea\204\uffea" +
    "\205\uffea\206\uffea\207\uffea\213\uffea\216\uffea\217\uffea\220" +
    "\uffea\221\uffea\001\002\000\106\032\uff4b\034\uff4b\065\uff4b" +
    "\102\uff4b\113\uff4b\114\uff4b\115\uff4b\116\uff4b\134\uff4b\135" +
    "\uff4b\136\uff4b\137\uff4b\140\uff4b\141\uff4b\142\uff4b\143\uff4b" +
    "\144\uff4b\145\uff4b\146\uff4b\147\uff4b\150\uff4b\151\uff4b\152" +
    "\uff4b\153\uff4b\154\uff4b\155\uff4b\156\uff4b\157\uff4b\160\uff4b" +
    "\161\uff4b\164\uff4b\200\uff4b\214\uff4b\215\uff4b\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\070\032\260\114\247\115\267\116\240\134" +
    "\244\136\241\137\261\140\242\141\251\142\262\143\266" +
    "\144\253\145\236\146\250\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\214\u0246\001\002\000\106\032\ufea9\034" +
    "\ufea9\065\ufea9\102\ufea9\113\ufea9\114\ufea9\115\ufea9\116\ufea9" +
    "\134\ufea9\135\ufea9\136\ufea9\137\ufea9\140\ufea9\141\ufea9\142" +
    "\ufea9\143\ufea9\144\ufea9\145\ufea9\146\ufea9\147\ufea9\150\ufea9" +
    "\151\ufea9\152\ufea9\153\ufea9\154\ufea9\155\ufea9\156\ufea9\157" +
    "\ufea9\160\ufea9\161\ufea9\164\ufea9\200\ufea9\214\ufea9\215\ufea9" +
    "\001\002\000\014\010\157\012\061\101\337\105\056\216" +
    "\100\001\002\000\146\032\ufee1\034\ufee1\064\ufee1\065\ufee1" +
    "\102\ufee1\113\ufee1\114\ufee1\115\ufee1\116\ufee1\120\ufee1\121" +
    "\ufee1\122\ufee1\123\ufee1\124\ufee1\125\ufee1\126\ufee1\127\ufee1" +
    "\130\ufee1\131\ufee1\132\ufee1\133\ufee1\134\ufee1\135\ufee1\136" +
    "\ufee1\137\ufee1\140\ufee1\141\ufee1\142\ufee1\143\ufee1\144\ufee1" +
    "\145\ufee1\146\ufee1\147\ufee1\150\ufee1\151\ufee1\152\ufee1\153" +
    "\ufee1\154\ufee1\155\ufee1\156\ufee1\157\ufee1\160\ufee1\161\ufee1" +
    "\164\ufee1\165\ufee1\166\ufee1\200\ufee1\213\u024a\214\ufee1\215" +
    "\ufee1\001\002\000\144\032\ufee4\034\ufee4\064\ufee4\065\ufee4" +
    "\102\ufee4\113\ufee4\114\ufee4\115\ufee4\116\ufee4\120\ufee4\121" +
    "\ufee4\122\ufee4\123\ufee4\124\ufee4\125\ufee4\126\ufee4\127\ufee4" +
    "\130\ufee4\131\ufee4\132\ufee4\133\ufee4\134\ufee4\135\ufee4\136" +
    "\ufee4\137\ufee4\140\ufee4\141\ufee4\142\ufee4\143\ufee4\144\ufee4" +
    "\145\ufee4\146\ufee4\147\ufee4\150\ufee4\151\ufee4\152\ufee4\153" +
    "\ufee4\154\ufee4\155\ufee4\156\ufee4\157\ufee4\160\ufee4\161\ufee4" +
    "\164\ufee4\165\ufee4\166\ufee4\200\ufee4\214\ufee4\215\ufee4\001" +
    "\002\000\140\004\141\006\106\007\011\010\034\011\053" +
    "\012\061\016\127\033\103\055\143\056\030\066\146\067" +
    "\013\070\020\071\045\072\047\073\132\074\006\075\035" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\142\u0125\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\213\145\214\uff8d\216\100" +
    "\217\112\220\060\221\116\001\002\000\004\214\u024c\001" +
    "\002\000\144\032\ufee2\034\ufee2\064\ufee2\065\ufee2\102\ufee2" +
    "\113\ufee2\114\ufee2\115\ufee2\116\ufee2\120\ufee2\121\ufee2\122" +
    "\ufee2\123\ufee2\124\ufee2\125\ufee2\126\ufee2\127\ufee2\130\ufee2" +
    "\131\ufee2\132\ufee2\133\ufee2\134\ufee2\135\ufee2\136\ufee2\137" +
    "\ufee2\140\ufee2\141\ufee2\142\ufee2\143\ufee2\144\ufee2\145\ufee2" +
    "\146\ufee2\147\ufee2\150\ufee2\151\ufee2\152\ufee2\153\ufee2\154" +
    "\ufee2\155\ufee2\156\ufee2\157\ufee2\160\ufee2\161\ufee2\164\ufee2" +
    "\165\ufee2\166\ufee2\200\ufee2\214\ufee2\215\ufee2\001\002\000" +
    "\144\032\ufee7\034\ufee7\064\u024f\065\ufee7\102\ufee7\113\ufee7" +
    "\114\ufee7\115\ufee7\116\ufee7\120\ufee7\121\ufee7\122\ufee7\123" +
    "\ufee7\124\ufee7\125\ufee7\126\ufee7\127\ufee7\130\ufee7\131\ufee7" +
    "\132\ufee7\133\ufee7\134\ufee7\135\ufee7\136\ufee7\137\ufee7\140" +
    "\ufee7\141\ufee7\142\ufee7\143\ufee7\144\ufee7\145\ufee7\146\ufee7" +
    "\147\ufee7\150\ufee7\151\ufee7\152\ufee7\153\ufee7\154\ufee7\155" +
    "\ufee7\156\ufee7\157\ufee7\160\ufee7\161\ufee7\164\ufee7\165\ufee7" +
    "\166\ufee7\200\ufee7\214\ufee7\215\ufee7\001\002\000\144\032" +
    "\ufee5\034\ufee5\064\ufee5\065\ufee5\102\ufee5\113\ufee5\114\ufee5" +
    "\115\ufee5\116\ufee5\120\ufee5\121\ufee5\122\ufee5\123\ufee5\124" +
    "\ufee5\125\ufee5\126\ufee5\127\ufee5\130\ufee5\131\ufee5\132\ufee5" +
    "\133\ufee5\134\ufee5\135\ufee5\136\ufee5\137\ufee5\140\ufee5\141" +
    "\ufee5\142\ufee5\143\ufee5\144\ufee5\145\ufee5\146\ufee5\147\ufee5" +
    "\150\ufee5\151\ufee5\152\ufee5\153\ufee5\154\ufee5\155\ufee5\156" +
    "\ufee5\157\ufee5\160\ufee5\161\ufee5\164\ufee5\165\ufee5\166\ufee5" +
    "\200\ufee5\214\ufee5\215\ufee5\001\002\000\014\010\157\012" +
    "\061\101\337\105\056\216\100\001\002\000\146\032\ufee1" +
    "\034\ufee1\064\ufee1\065\ufee1\102\ufee1\113\ufee1\114\ufee1\115" +
    "\ufee1\116\ufee1\120\ufee1\121\ufee1\122\ufee1\123\ufee1\124\ufee1" +
    "\125\ufee1\126\ufee1\127\ufee1\130\ufee1\131\ufee1\132\ufee1\133" +
    "\ufee1\134\ufee1\135\ufee1\136\ufee1\137\ufee1\140\ufee1\141\ufee1" +
    "\142\ufee1\143\ufee1\144\ufee1\145\ufee1\146\ufee1\147\ufee1\150" +
    "\ufee1\151\ufee1\152\ufee1\153\ufee1\154\ufee1\155\ufee1\156\ufee1" +
    "\157\ufee1\160\ufee1\161\ufee1\164\ufee1\165\ufee1\166\ufee1\200" +
    "\ufee1\213\u024a\214\ufee1\215\ufee1\001\002\000\144\032\ufee3" +
    "\034\ufee3\064\ufee3\065\ufee3\102\ufee3\113\ufee3\114\ufee3\115" +
    "\ufee3\116\ufee3\120\ufee3\121\ufee3\122\ufee3\123\ufee3\124\ufee3" +
    "\125\ufee3\126\ufee3\127\ufee3\130\ufee3\131\ufee3\132\ufee3\133" +
    "\ufee3\134\ufee3\135\ufee3\136\ufee3\137\ufee3\140\ufee3\141\ufee3" +
    "\142\ufee3\143\ufee3\144\ufee3\145\ufee3\146\ufee3\147\ufee3\150" +
    "\ufee3\151\ufee3\152\ufee3\153\ufee3\154\ufee3\155\ufee3\156\ufee3" +
    "\157\ufee3\160\ufee3\161\ufee3\164\ufee3\165\ufee3\166\ufee3\200" +
    "\ufee3\214\ufee3\215\ufee3\001\002\000\010\062\u0253\063\uffc1" +
    "\101\uffc1\001\002\000\004\010\u01aa\001\002\000\006\063" +
    "\u0256\101\uffbc\001\002\000\004\101\u0258\001\002\000\004" +
    "\010\u01aa\001\002\000\006\101\uffbb\113\u01ab\001\002\000" +
    "\030\043\uff7c\044\uff7c\053\uff7c\102\uff7c\104\uff7c\205\uff7c" +
    "\206\uff7c\207\uff7c\210\uff7c\211\uff7c\212\uff7c\001\002\000" +
    "\030\043\uff73\044\u01ba\053\u01b1\102\u025a\104\u01be\205\u01b3" +
    "\206\u01b6\207\u01b9\210\u01bc\211\u01b2\212\u01b5\001\002\000" +
    "\254\002\uffc6\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\014\uffc6\016\uffc6\017\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\033\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\045\uffc6\046\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\101\uffc6\102\uffc6\104\uffc6\105" +
    "\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\117\uffc6" +
    "\135\uffc6\155\uffc6\156\uffc6\162\uffc6\163\uffc6\165\uffc6\166" +
    "\uffc6\167\uffc6\170\uffc6\171\uffc6\172\uffc6\173\uffc6\174\uffc6" +
    "\175\uffc6\176\uffc6\201\uffc6\202\uffc6\203\uffc6\204\uffc6\205" +
    "\uffc6\206\uffc6\207\uffc6\213\uffc6\216\uffc6\217\uffc6\220\uffc6" +
    "\221\uffc6\001\002\000\006\063\uffc0\101\uffc0\001\002\000" +
    "\134\004\141\006\106\007\011\010\034\011\053\012\061" +
    "\016\127\033\103\055\143\056\030\066\146\067\013\070" +
    "\020\071\045\072\047\073\132\074\006\075\035\105\056" +
    "\106\027\107\067\110\051\111\124\112\105\117\063\155" +
    "\104\156\066\162\142\163\014\165\052\166\147\167\026" +
    "\170\131\171\040\172\126\173\072\174\134\175\071\176" +
    "\036\201\075\213\145\216\100\217\112\220\060\221\116" +
    "\001\002\000\070\032\260\114\247\115\267\116\240\134" +
    "\244\136\241\137\261\140\242\141\251\142\262\143\266" +
    "\144\253\145\236\146\250\147\265\150\263\151\245\152" +
    "\264\153\257\154\252\155\270\156\246\157\256\160\254" +
    "\161\237\164\243\214\u025e\001\002\000\212\003\115\004" +
    "\141\005\152\006\106\007\011\010\034\011\053\012\061" +
    "\014\074\016\127\017\122\021\120\022\044\024\033\026" +
    "\101\030\153\033\103\035\130\041\055\042\121\045\135" +
    "\046\041\050\150\051\025\052\012\054\076\055\143\056" +
    "\030\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\101\064\104\024\105\056\106\027\107" +
    "\067\110\051\111\124\112\105\117\063\135\010\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\205\042\213\145\215\u025f\216\100\217\112\220" +
    "\060\221\116\001\002\000\226\003\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\016" +
    "\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8" +
    "\030\ufff8\033\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\101\ufff8" +
    "\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111\ufff8\112" +
    "\ufff8\117\ufff8\135\ufff8\155\ufff8\156\ufff8\162\ufff8\163\ufff8" +
    "\165\ufff8\166\ufff8\167\ufff8\170\ufff8\171\ufff8\172\ufff8\173" +
    "\ufff8\174\ufff8\175\ufff8\176\ufff8\201\ufff8\205\ufff8\206\ufff8" +
    "\207\ufff8\213\ufff8\216\ufff8\217\ufff8\220\ufff8\221\ufff8\001" +
    "\002\000\254\002\uffef\003\uffef\004\uffef\005\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\014\uffef\016\uffef\017" +
    "\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\033\uffef\035\uffef\036\uffef\037" +
    "\uffef\040\uffef\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef" +
    "\050\uffef\051\uffef\052\uffef\054\uffef\055\uffef\056\uffef\057" +
    "\uffef\060\uffef\061\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\101\uffef\102\uffef\104" +
    "\uffef\105\uffef\106\uffef\107\uffef\110\uffef\111\uffef\112\uffef" +
    "\117\uffef\135\uffef\155\uffef\156\uffef\162\uffef\163\uffef\165" +
    "\uffef\166\uffef\167\uffef\170\uffef\171\uffef\172\uffef\173\uffef" +
    "\174\uffef\175\uffef\176\uffef\201\uffef\202\uffef\203\uffef\204" +
    "\uffef\205\uffef\206\uffef\207\uffef\213\uffef\216\uffef\217\uffef" +
    "\220\uffef\221\uffef\001\002\000\254\002\uffa3\003\uffa3\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\014\uffa3\016\uffa3\017\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3" +
    "\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\066\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\101\uffa3\102\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110" +
    "\uffa3\111\uffa3\112\uffa3\117\uffa3\135\uffa3\155\uffa3\156\uffa3" +
    "\162\uffa3\163\uffa3\165\uffa3\166\uffa3\167\uffa3\170\uffa3\171" +
    "\uffa3\172\uffa3\173\uffa3\174\uffa3\175\uffa3\176\uffa3\201\uffa3" +
    "\202\uffa3\203\uffa3\204\uffa3\205\uffa3\206\uffa3\207\uffa3\213" +
    "\uffa3\216\uffa3\217\uffa3\220\uffa3\221\uffa3\001\002\000\226" +
    "\003\115\004\141\005\152\006\106\007\011\010\034\011" +
    "\053\012\061\014\074\016\127\017\122\021\120\022\044" +
    "\023\u0263\024\033\026\101\030\153\033\103\035\130\041" +
    "\055\042\121\043\107\045\135\046\041\050\150\051\025" +
    "\052\012\054\076\055\143\056\030\057\223\060\032\061" +
    "\140\066\146\067\013\070\020\071\045\072\047\073\132" +
    "\074\006\075\035\101\064\104\024\105\056\106\027\107" +
    "\067\110\051\111\124\112\105\117\063\135\010\155\104" +
    "\156\066\162\142\163\014\165\052\166\147\167\026\170" +
    "\131\171\040\172\126\173\072\174\134\175\071\176\036" +
    "\201\075\205\042\206\062\207\017\213\145\216\100\217" +
    "\112\220\060\221\116\001\002\000\004\135\u0264\001\002" +
    "\000\254\002\uffa2\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\014\uffa2\016\uffa2\017\uffa2" +
    "\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\031\uffa2\033\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\045\uffa2\046\uffa2\050" +
    "\uffa2\051\uffa2\052\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\061\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\075\uffa2\101\uffa2\102\uffa2\104\uffa2" +
    "\105\uffa2\106\uffa2\107\uffa2\110\uffa2\111\uffa2\112\uffa2\117" +
    "\uffa2\135\uffa2\155\uffa2\156\uffa2\162\uffa2\163\uffa2\165\uffa2" +
    "\166\uffa2\167\uffa2\170\uffa2\171\uffa2\172\uffa2\173\uffa2\174" +
    "\uffa2\175\uffa2\176\uffa2\201\uffa2\202\uffa2\203\uffa2\204\uffa2" +
    "\205\uffa2\206\uffa2\207\uffa2\213\uffa2\216\uffa2\217\uffa2\220" +
    "\uffa2\221\uffa2\001\002\000\010\113\uff7f\120\u026c\135\uff7f" +
    "\001\002\000\006\113\u0267\135\u0268\001\002\000\004\012" +
    "\u0269\001\002\000\254\002\uffe3\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\016" +
    "\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\045\uffe3" +
    "\046\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\061\uffe3\066\uffe3\067\uffe3\070\uffe3" +
    "\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075\uffe3\101\uffe3\102" +
    "\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3" +
    "\112\uffe3\117\uffe3\135\uffe3\155\uffe3\156\uffe3\162\uffe3\163" +
    "\uffe3\165\uffe3\166\uffe3\167\uffe3\170\uffe3\171\uffe3\172\uffe3" +
    "\173\uffe3\174\uffe3\175\uffe3\176\uffe3\201\uffe3\202\uffe3\203" +
    "\uffe3\204\uffe3\205\uffe3\206\uffe3\207\uffe3\213\uffe3\216\uffe3" +
    "\217\uffe3\220\uffe3\221\uffe3\001\002\000\010\113\uff81\120" +
    "\u026a\135\uff81\001\002\000\036\006\106\007\011\010\167" +
    "\016\127\067\164\070\020\071\045\072\047\073\132\074" +
    "\006\105\056\155\170\156\162\221\116\001\002\000\006" +
    "\113\uff80\135\uff80\001\002\000\036\006\106\007\011\010" +
    "\167\016\127\067\164\070\020\071\045\072\047\073\132" +
    "\074\006\105\056\155\170\156\162\221\116\001\002\000" +
    "\006\113\uff7e\135\uff7e\001\002\000\226\003\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014" +
    "\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8\026\ufff8" +
    "\030\ufff8\033\ufff8\035\ufff8\041\ufff8\042\ufff8\043\ufff8\045" +
    "\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\061\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\101\ufff8" +
    "\102\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8\111" +
    "\ufff8\112\ufff8\117\ufff8\135\ufff8\155\ufff8\156\ufff8\162\ufff8" +
    "\163\ufff8\165\ufff8\166\ufff8\167\ufff8\170\ufff8\171\ufff8\172" +
    "\ufff8\173\ufff8\174\ufff8\175\ufff8\176\ufff8\201\ufff8\205\ufff8" +
    "\206\ufff8\207\ufff8\213\ufff8\216\ufff8\217\ufff8\220\ufff8\221" +
    "\ufff8\001\002\000\226\003\115\004\141\005\152\006\106" +
    "\007\011\010\034\011\053\012\061\014\074\016\127\017" +
    "\122\021\120\022\044\024\033\026\101\030\153\033\103" +
    "\035\130\041\055\042\121\043\107\045\135\046\041\050" +
    "\150\051\025\052\012\054\076\055\143\056\030\057\223" +
    "\060\032\061\140\066\146\067\013\070\020\071\045\072" +
    "\047\073\132\074\006\075\035\101\064\102\u0270\104\024" +
    "\105\056\106\027\107\067\110\051\111\124\112\105\117" +
    "\063\135\010\155\104\156\066\162\142\163\014\165\052" +
    "\166\147\167\026\170\131\171\040\172\126\173\072\174" +
    "\134\175\071\176\036\201\075\205\042\206\062\207\017" +
    "\213\145\216\100\217\112\220\060\221\116\001\002\000" +
    "\004\047\u0271\001\002\000\004\213\u0272\001\002\000\004" +
    "\010\u01aa\001\002\000\004\012\061\001\002\000\004\214" +
    "\u0275\001\002\000\004\101\u0276\001\002\000\226\003\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\024\ufff8" +
    "\026\ufff8\030\ufff8\033\ufff8\035\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8", 
    "\060", 
    "\ufff8", 
    "\061", 
    "\ufff8", 
    "\066", 
    "\ufff8", 
    "\067", 
    "\ufff8", 
    "\070", 
    "\ufff8", 
    "\071", 
    "\ufff8", 
    "\072", 
    "\ufff8", 
    "\073", 
    "\ufff8", 
    "\074", 
    "\ufff8", 
    "\075", 
    "\ufff8", 
    "\101", 
    "\ufff8", 
    "\102", 
    "\ufff8", 
    "\104", 
    "\ufff8", 
    "\105", 
    "\ufff8", 
    "\106", 
    "\ufff8", 
    "\107", 
    "\ufff8", 
    "\110", 
    "\ufff8", 
    "\111", 
    "\ufff8", 
    "\112", 
    "\ufff8", 
    "\117", 
    "\ufff8", 
    "\135", 
    "\ufff8", 
    "\155", 
    "\ufff8", 
    "\156", 
    "\ufff8", 
    "\162", 
    "\ufff8", 
    "\163", 
    "\ufff8", 
    "\165", 
    "\ufff8", 
    "\166", 
    "\ufff8", 
    "\167", 
    "\ufff8", 
    "\170", 
    "\ufff8", 
    "\171", 
    "\ufff8", 
    "\172", 
    "\ufff8", 
    "\173", 
    "\ufff8", 
    "\174", 
    "\ufff8", 
    "\175", 
    "\ufff8", 
    "\176", 
    "\ufff8", 
    "\201", 
    "\ufff8", 
    "\205", 
    "\ufff8", 
    "\206", 
    "\ufff8", 
    "\207", 
    "\ufff8", 
    "\213", 
    "\ufff8", 
    "\216", 
    "\ufff8", 
    "\217", 
    "\ufff8", 
    "\220", 
    "\ufff8", 
    "\221", 
    "\ufff8", 
    "\001", 
    "\002", 
    "\000", 
    "\226", 
    "\003", 
    "\115", 
    "\004", 
    "\141", 
    "\005", 
    "\152", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\014", 
    "\074", 
    "\016", 
    "\127", 
    "\017", 
    "\122", 
    "\021", 
    "\120", 
    "\022", 
    "\044", 
    "\024", 
    "\033", 
    "\026", 
    "\101", 
    "\030", 
    "\153", 
    "\033", 
    "\103", 
    "\035", 
    "\130", 
    "\041", 
    "\055", 
    "\042", 
    "\121", 
    "\043", 
    "\107", 
    "\045", 
    "\135", 
    "\046", 
    "\041", 
    "\050", 
    "\150", 
    "\051", 
    "\025", 
    "\052", 
    "\012", 
    "\054", 
    "\076", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\057", 
    "\223", 
    "\060", 
    "\032", 
    "\061", 
    "\140", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\101", 
    "\064", 
    "\102", 
    "\u0278", 
    "\104", 
    "\024", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\135", 
    "\010", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\205", 
    "\042", 
    "\206", 
    "\062", 
    "\207", 
    "\017", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\256", 
    "\002", 
    "\uffd4", 
    "\003", 
    "\uffd4", 
    "\004", 
    "\uffd4", 
    "\005", 
    "\uffd4", 
    "\006", 
    "\uffd4", 
    "\007", 
    "\uffd4", 
    "\010", 
    "\uffd4", 
    "\011", 
    "\uffd4", 
    "\012", 
    "\uffd4", 
    "\014", 
    "\uffd4", 
    "\016", 
    "\uffd4", 
    "\017", 
    "\uffd4", 
    "\021", 
    "\uffd4", 
    "\022", 
    "\uffd4", 
    "\023", 
    "\uffd4", 
    "\024", 
    "\uffd4", 
    "\025", 
    "\uffd4", 
    "\026", 
    "\uffd4", 
    "\027", 
    "\uffd4", 
    "\030", 
    "\uffd4", 
    "\031", 
    "\uffd4", 
    "\033", 
    "\uffd4", 
    "\035", 
    "\uffd4", 
    "\036", 
    "\uffd4", 
    "\037", 
    "\uffd4", 
    "\040", 
    "\uffd4", 
    "\041", 
    "\uffd4", 
    "\042", 
    "\uffd4", 
    "\043", 
    "\uffd4", 
    "\045", 
    "\uffd4", 
    "\046", 
    "\uffd4", 
    "\047", 
    "\u0279", 
    "\050", 
    "\uffd4", 
    "\051", 
    "\uffd4", 
    "\052", 
    "\uffd4", 
    "\054", 
    "\uffd4", 
    "\055", 
    "\uffd4", 
    "\056", 
    "\uffd4", 
    "\057", 
    "\uffd4", 
    "\060", 
    "\uffd4", 
    "\061", 
    "\uffd4", 
    "\066", 
    "\uffd4", 
    "\067", 
    "\uffd4", 
    "\070", 
    "\uffd4", 
    "\071", 
    "\uffd4", 
    "\072", 
    "\uffd4", 
    "\073", 
    "\uffd4", 
    "\074", 
    "\uffd4", 
    "\075", 
    "\uffd4", 
    "\101", 
    "\uffd4", 
    "\102", 
    "\uffd4", 
    "\104", 
    "\uffd4", 
    "\105", 
    "\uffd4", 
    "\106", 
    "\uffd4", 
    "\107", 
    "\uffd4", 
    "\110", 
    "\uffd4", 
    "\111", 
    "\uffd4", 
    "\112", 
    "\uffd4", 
    "\117", 
    "\uffd4", 
    "\135", 
    "\uffd4", 
    "\155", 
    "\uffd4", 
    "\156", 
    "\uffd4", 
    "\162", 
    "\uffd4", 
    "\163", 
    "\uffd4", 
    "\165", 
    "\uffd4", 
    "\166", 
    "\uffd4", 
    "\167", 
    "\uffd4", 
    "\170", 
    "\uffd4", 
    "\171", 
    "\uffd4", 
    "\172", 
    "\uffd4", 
    "\173", 
    "\uffd4", 
    "\174", 
    "\uffd4", 
    "\175", 
    "\uffd4", 
    "\176", 
    "\uffd4", 
    "\201", 
    "\uffd4", 
    "\202", 
    "\uffd4", 
    "\203", 
    "\uffd4", 
    "\204", 
    "\uffd4", 
    "\205", 
    "\uffd4", 
    "\206", 
    "\uffd4", 
    "\207", 
    "\uffd4", 
    "\213", 
    "\uffd4", 
    "\216", 
    "\uffd4", 
    "\217", 
    "\uffd4", 
    "\220", 
    "\uffd4", 
    "\221", 
    "\uffd4", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\213", 
    "\u027e", 
    "\001", 
    "\002", 
    "\000", 
    "\254", 
    "\002", 
    "\uffd9", 
    "\003", 
    "\uffd9", 
    "\004", 
    "\uffd9", 
    "\005", 
    "\uffd9", 
    "\006", 
    "\uffd9", 
    "\007", 
    "\uffd9", 
    "\010", 
    "\uffd9", 
    "\011", 
    "\uffd9", 
    "\012", 
    "\uffd9", 
    "\014", 
    "\uffd9", 
    "\016", 
    "\uffd9", 
    "\017", 
    "\uffd9", 
    "\021", 
    "\uffd9", 
    "\022", 
    "\uffd9", 
    "\023", 
    "\uffd9", 
    "\024", 
    "\uffd9", 
    "\025", 
    "\uffd9", 
    "\026", 
    "\uffd9", 
    "\027", 
    "\uffd9", 
    "\030", 
    "\uffd9", 
    "\031", 
    "\uffd9", 
    "\033", 
    "\uffd9", 
    "\035", 
    "\uffd9", 
    "\036", 
    "\uffd9", 
    "\037", 
    "\uffd9", 
    "\040", 
    "\uffd9", 
    "\041", 
    "\uffd9", 
    "\042", 
    "\uffd9", 
    "\043", 
    "\uffd9", 
    "\045", 
    "\uffd9", 
    "\046", 
    "\uffd9", 
    "\050", 
    "\uffd9", 
    "\051", 
    "\uffd9", 
    "\052", 
    "\uffd9", 
    "\054", 
    "\uffd9", 
    "\055", 
    "\uffd9", 
    "\056", 
    "\uffd9", 
    "\057", 
    "\uffd9", 
    "\060", 
    "\uffd9", 
    "\061", 
    "\uffd9", 
    "\066", 
    "\uffd9", 
    "\067", 
    "\uffd9", 
    "\070", 
    "\uffd9", 
    "\071", 
    "\uffd9", 
    "\072", 
    "\uffd9", 
    "\073", 
    "\uffd9", 
    "\074", 
    "\uffd9", 
    "\075", 
    "\uffd9", 
    "\101", 
    "\uffd9", 
    "\102", 
    "\uffd9", 
    "\104", 
    "\uffd9", 
    "\105", 
    "\uffd9", 
    "\106", 
    "\uffd9", 
    "\107", 
    "\uffd9", 
    "\110", 
    "\uffd9", 
    "\111", 
    "\uffd9", 
    "\112", 
    "\uffd9", 
    "\117", 
    "\uffd9", 
    "\135", 
    "\uffd9", 
    "\155", 
    "\uffd9", 
    "\156", 
    "\uffd9", 
    "\162", 
    "\uffd9", 
    "\163", 
    "\uffd9", 
    "\165", 
    "\uffd9", 
    "\166", 
    "\uffd9", 
    "\167", 
    "\uffd9", 
    "\170", 
    "\uffd9", 
    "\171", 
    "\uffd9", 
    "\172", 
    "\uffd9", 
    "\173", 
    "\uffd9", 
    "\174", 
    "\uffd9", 
    "\175", 
    "\uffd9", 
    "\176", 
    "\uffd9", 
    "\201", 
    "\uffd9", 
    "\202", 
    "\uffd9", 
    "\203", 
    "\uffd9", 
    "\204", 
    "\uffd9", 
    "\205", 
    "\uffd9", 
    "\206", 
    "\uffd9", 
    "\207", 
    "\uffd9", 
    "\213", 
    "\uffd9", 
    "\216", 
    "\uffd9", 
    "\217", 
    "\uffd9", 
    "\220", 
    "\uffd9", 
    "\221", 
    "\uffd9", 
    "\001", 
    "\002", 
    "\000", 
    "\256", 
    "\002", 
    "\uffd3", 
    "\003", 
    "\uffd3", 
    "\004", 
    "\uffd3", 
    "\005", 
    "\uffd3", 
    "\006", 
    "\uffd3", 
    "\007", 
    "\uffd3", 
    "\010", 
    "\uffd3", 
    "\011", 
    "\uffd3", 
    "\012", 
    "\uffd3", 
    "\014", 
    "\uffd3", 
    "\016", 
    "\uffd3", 
    "\017", 
    "\uffd3", 
    "\021", 
    "\uffd3", 
    "\022", 
    "\uffd3", 
    "\023", 
    "\uffd3", 
    "\024", 
    "\uffd3", 
    "\025", 
    "\uffd3", 
    "\026", 
    "\uffd3", 
    "\027", 
    "\uffd3", 
    "\030", 
    "\uffd3", 
    "\031", 
    "\uffd3", 
    "\033", 
    "\uffd3", 
    "\035", 
    "\uffd3", 
    "\036", 
    "\uffd3", 
    "\037", 
    "\uffd3", 
    "\040", 
    "\uffd3", 
    "\041", 
    "\uffd3", 
    "\042", 
    "\uffd3", 
    "\043", 
    "\uffd3", 
    "\045", 
    "\uffd3", 
    "\046", 
    "\uffd3", 
    "\047", 
    "\uffd3", 
    "\050", 
    "\uffd3", 
    "\051", 
    "\uffd3", 
    "\052", 
    "\uffd3", 
    "\054", 
    "\uffd3", 
    "\055", 
    "\uffd3", 
    "\056", 
    "\uffd3", 
    "\057", 
    "\uffd3", 
    "\060", 
    "\uffd3", 
    "\061", 
    "\uffd3", 
    "\066", 
    "\uffd3", 
    "\067", 
    "\uffd3", 
    "\070", 
    "\uffd3", 
    "\071", 
    "\uffd3", 
    "\072", 
    "\uffd3", 
    "\073", 
    "\uffd3", 
    "\074", 
    "\uffd3", 
    "\075", 
    "\uffd3", 
    "\101", 
    "\uffd3", 
    "\102", 
    "\uffd3", 
    "\104", 
    "\uffd3", 
    "\105", 
    "\uffd3", 
    "\106", 
    "\uffd3", 
    "\107", 
    "\uffd3", 
    "\110", 
    "\uffd3", 
    "\111", 
    "\uffd3", 
    "\112", 
    "\uffd3", 
    "\117", 
    "\uffd3", 
    "\135", 
    "\uffd3", 
    "\155", 
    "\uffd3", 
    "\156", 
    "\uffd3", 
    "\162", 
    "\uffd3", 
    "\163", 
    "\uffd3", 
    "\165", 
    "\uffd3", 
    "\166", 
    "\uffd3", 
    "\167", 
    "\uffd3", 
    "\170", 
    "\uffd3", 
    "\171", 
    "\uffd3", 
    "\172", 
    "\uffd3", 
    "\173", 
    "\uffd3", 
    "\174", 
    "\uffd3", 
    "\175", 
    "\uffd3", 
    "\176", 
    "\uffd3", 
    "\201", 
    "\uffd3", 
    "\202", 
    "\uffd3", 
    "\203", 
    "\uffd3", 
    "\204", 
    "\uffd3", 
    "\205", 
    "\uffd3", 
    "\206", 
    "\uffd3", 
    "\207", 
    "\uffd3", 
    "\213", 
    "\uffd3", 
    "\216", 
    "\uffd3", 
    "\217", 
    "\uffd3", 
    "\220", 
    "\uffd3", 
    "\221", 
    "\uffd3", 
    "\001", 
    "\002", 
    "\000", 
    "\256", 
    "\002", 
    "\uffd5", 
    "\003", 
    "\uffd5", 
    "\004", 
    "\uffd5", 
    "\005", 
    "\uffd5", 
    "\006", 
    "\uffd5", 
    "\007", 
    "\uffd5", 
    "\010", 
    "\uffd5", 
    "\011", 
    "\uffd5", 
    "\012", 
    "\uffd5", 
    "\014", 
    "\uffd5", 
    "\016", 
    "\uffd5", 
    "\017", 
    "\uffd5", 
    "\021", 
    "\uffd5", 
    "\022", 
    "\uffd5", 
    "\023", 
    "\uffd5", 
    "\024", 
    "\uffd5", 
    "\025", 
    "\uffd5", 
    "\026", 
    "\uffd5", 
    "\027", 
    "\uffd5", 
    "\030", 
    "\uffd5", 
    "\031", 
    "\uffd5", 
    "\033", 
    "\uffd5", 
    "\035", 
    "\uffd5", 
    "\036", 
    "\uffd5", 
    "\037", 
    "\uffd5", 
    "\040", 
    "\uffd5", 
    "\041", 
    "\uffd5", 
    "\042", 
    "\uffd5", 
    "\043", 
    "\uffd5", 
    "\045", 
    "\uffd5", 
    "\046", 
    "\uffd5", 
    "\047", 
    "\u0279", 
    "\050", 
    "\uffd5", 
    "\051", 
    "\uffd5", 
    "\052", 
    "\uffd5", 
    "\054", 
    "\uffd5", 
    "\055", 
    "\uffd5", 
    "\056", 
    "\uffd5", 
    "\057", 
    "\uffd5", 
    "\060", 
    "\uffd5", 
    "\061", 
    "\uffd5", 
    "\066", 
    "\uffd5", 
    "\067", 
    "\uffd5", 
    "\070", 
    "\uffd5", 
    "\071", 
    "\uffd5", 
    "\072", 
    "\uffd5", 
    "\073", 
    "\uffd5", 
    "\074", 
    "\uffd5", 
    "\075", 
    "\uffd5", 
    "\101", 
    "\uffd5", 
    "\102", 
    "\uffd5", 
    "\104", 
    "\uffd5", 
    "\105", 
    "\uffd5", 
    "\106", 
    "\uffd5", 
    "\107", 
    "\uffd5", 
    "\110", 
    "\uffd5", 
    "\111", 
    "\uffd5", 
    "\112", 
    "\uffd5", 
    "\117", 
    "\uffd5", 
    "\135", 
    "\uffd5", 
    "\155", 
    "\uffd5", 
    "\156", 
    "\uffd5", 
    "\162", 
    "\uffd5", 
    "\163", 
    "\uffd5", 
    "\165", 
    "\uffd5", 
    "\166", 
    "\uffd5", 
    "\167", 
    "\uffd5", 
    "\170", 
    "\uffd5", 
    "\171", 
    "\uffd5", 
    "\172", 
    "\uffd5", 
    "\173", 
    "\uffd5", 
    "\174", 
    "\uffd5", 
    "\175", 
    "\uffd5", 
    "\176", 
    "\uffd5", 
    "\201", 
    "\uffd5", 
    "\202", 
    "\uffd5", 
    "\203", 
    "\uffd5", 
    "\204", 
    "\uffd5", 
    "\205", 
    "\uffd5", 
    "\206", 
    "\uffd5", 
    "\207", 
    "\uffd5", 
    "\213", 
    "\uffd5", 
    "\216", 
    "\uffd5", 
    "\217", 
    "\uffd5", 
    "\220", 
    "\uffd5", 
    "\221", 
    "\uffd5", 
    "\001", 
    "\002", 
    "\000", 
    "\256", 
    "\002", 
    "\uffd2", 
    "\003", 
    "\uffd2", 
    "\004", 
    "\uffd2", 
    "\005", 
    "\uffd2", 
    "\006", 
    "\uffd2", 
    "\007", 
    "\uffd2", 
    "\010", 
    "\uffd2", 
    "\011", 
    "\uffd2", 
    "\012", 
    "\uffd2", 
    "\014", 
    "\uffd2", 
    "\016", 
    "\uffd2", 
    "\017", 
    "\uffd2", 
    "\021", 
    "\uffd2", 
    "\022", 
    "\uffd2", 
    "\023", 
    "\uffd2", 
    "\024", 
    "\uffd2", 
    "\025", 
    "\uffd2", 
    "\026", 
    "\uffd2", 
    "\027", 
    "\uffd2", 
    "\030", 
    "\uffd2", 
    "\031", 
    "\uffd2", 
    "\033", 
    "\uffd2", 
    "\035", 
    "\uffd2", 
    "\036", 
    "\uffd2", 
    "\037", 
    "\uffd2", 
    "\040", 
    "\uffd2", 
    "\041", 
    "\uffd2", 
    "\042", 
    "\uffd2", 
    "\043", 
    "\uffd2", 
    "\045", 
    "\uffd2", 
    "\046", 
    "\uffd2", 
    "\047", 
    "\uffd2", 
    "\050", 
    "\uffd2", 
    "\051", 
    "\uffd2", 
    "\052", 
    "\uffd2", 
    "\054", 
    "\uffd2", 
    "\055", 
    "\uffd2", 
    "\056", 
    "\uffd2", 
    "\057", 
    "\uffd2", 
    "\060", 
    "\uffd2", 
    "\061", 
    "\uffd2", 
    "\066", 
    "\uffd2", 
    "\067", 
    "\uffd2", 
    "\070", 
    "\uffd2", 
    "\071", 
    "\uffd2", 
    "\072", 
    "\uffd2", 
    "\073", 
    "\uffd2", 
    "\074", 
    "\uffd2", 
    "\075", 
    "\uffd2", 
    "\101", 
    "\uffd2", 
    "\102", 
    "\uffd2", 
    "\104", 
    "\uffd2", 
    "\105", 
    "\uffd2", 
    "\106", 
    "\uffd2", 
    "\107", 
    "\uffd2", 
    "\110", 
    "\uffd2", 
    "\111", 
    "\uffd2", 
    "\112", 
    "\uffd2", 
    "\117", 
    "\uffd2", 
    "\135", 
    "\uffd2", 
    "\155", 
    "\uffd2", 
    "\156", 
    "\uffd2", 
    "\162", 
    "\uffd2", 
    "\163", 
    "\uffd2", 
    "\165", 
    "\uffd2", 
    "\166", 
    "\uffd2", 
    "\167", 
    "\uffd2", 
    "\170", 
    "\uffd2", 
    "\171", 
    "\uffd2", 
    "\172", 
    "\uffd2", 
    "\173", 
    "\uffd2", 
    "\174", 
    "\uffd2", 
    "\175", 
    "\uffd2", 
    "\176", 
    "\uffd2", 
    "\201", 
    "\uffd2", 
    "\202", 
    "\uffd2", 
    "\203", 
    "\uffd2", 
    "\204", 
    "\uffd2", 
    "\205", 
    "\uffd2", 
    "\206", 
    "\uffd2", 
    "\207", 
    "\uffd2", 
    "\213", 
    "\uffd2", 
    "\216", 
    "\uffd2", 
    "\217", 
    "\uffd2", 
    "\220", 
    "\uffd2", 
    "\221", 
    "\uffd2", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\010", 
    "\u01aa", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\012", 
    "\u0280", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\214", 
    "\u0281", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\101", 
    "\u0282", 
    "\001", 
    "\002", 
    "\000", 
    "\226", 
    "\003", 
    "\ufff8", 
    "\004", 
    "\ufff8", 
    "\005", 
    "\ufff8", 
    "\006", 
    "\ufff8", 
    "\007", 
    "\ufff8", 
    "\010", 
    "\ufff8", 
    "\011", 
    "\ufff8", 
    "\012", 
    "\ufff8", 
    "\014", 
    "\ufff8", 
    "\016", 
    "\ufff8", 
    "\017", 
    "\ufff8", 
    "\021", 
    "\ufff8", 
    "\022", 
    "\ufff8", 
    "\024", 
    "\ufff8", 
    "\026", 
    "\ufff8", 
    "\030", 
    "\ufff8", 
    "\033", 
    "\ufff8", 
    "\035", 
    "\ufff8", 
    "\041", 
    "\ufff8", 
    "\042", 
    "\ufff8", 
    "\043", 
    "\ufff8", 
    "\045", 
    "\ufff8", 
    "\046", 
    "\ufff8", 
    "\050", 
    "\ufff8", 
    "\051", 
    "\ufff8", 
    "\052", 
    "\ufff8", 
    "\054", 
    "\ufff8", 
    "\055", 
    "\ufff8", 
    "\056", 
    "\ufff8", 
    "\057", 
    "\ufff8", 
    "\060", 
    "\ufff8", 
    "\061", 
    "\ufff8", 
    "\066", 
    "\ufff8", 
    "\067", 
    "\ufff8", 
    "\070", 
    "\ufff8", 
    "\071", 
    "\ufff8", 
    "\072", 
    "\ufff8", 
    "\073", 
    "\ufff8", 
    "\074", 
    "\ufff8", 
    "\075", 
    "\ufff8", 
    "\101", 
    "\ufff8", 
    "\102", 
    "\ufff8", 
    "\104", 
    "\ufff8", 
    "\105", 
    "\ufff8", 
    "\106", 
    "\ufff8", 
    "\107", 
    "\ufff8", 
    "\110", 
    "\ufff8", 
    "\111", 
    "\ufff8", 
    "\112", 
    "\ufff8", 
    "\117", 
    "\ufff8", 
    "\135", 
    "\ufff8", 
    "\155", 
    "\ufff8", 
    "\156", 
    "\ufff8", 
    "\162", 
    "\ufff8", 
    "\163", 
    "\ufff8", 
    "\165", 
    "\ufff8", 
    "\166", 
    "\ufff8", 
    "\167", 
    "\ufff8", 
    "\170", 
    "\ufff8", 
    "\171", 
    "\ufff8", 
    "\172", 
    "\ufff8", 
    "\173", 
    "\ufff8", 
    "\174", 
    "\ufff8", 
    "\175", 
    "\ufff8", 
    "\176", 
    "\ufff8", 
    "\201", 
    "\ufff8", 
    "\205", 
    "\ufff8", 
    "\206", 
    "\ufff8", 
    "\207", 
    "\ufff8", 
    "\213", 
    "\ufff8", 
    "\216", 
    "\ufff8", 
    "\217", 
    "\ufff8", 
    "\220", 
    "\ufff8", 
    "\221", 
    "\ufff8", 
    "\001", 
    "\002", 
    "\000", 
    "\226", 
    "\003", 
    "\115", 
    "\004", 
    "\141", 
    "\005", 
    "\152", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\014", 
    "\074", 
    "\016", 
    "\127", 
    "\017", 
    "\122", 
    "\021", 
    "\120", 
    "\022", 
    "\044", 
    "\024", 
    "\033", 
    "\026", 
    "\101", 
    "\030", 
    "\153", 
    "\033", 
    "\103", 
    "\035", 
    "\130", 
    "\041", 
    "\055", 
    "\042", 
    "\121", 
    "\043", 
    "\107", 
    "\045", 
    "\135", 
    "\046", 
    "\041", 
    "\050", 
    "\150", 
    "\051", 
    "\025", 
    "\052", 
    "\012", 
    "\054", 
    "\076", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\057", 
    "\223", 
    "\060", 
    "\032", 
    "\061", 
    "\140", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\101", 
    "\064", 
    "\102", 
    "\u0284", 
    "\104", 
    "\024", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\135", 
    "\010", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\205", 
    "\042", 
    "\206", 
    "\062", 
    "\207", 
    "\017", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\256", 
    "\002", 
    "\uffd1", 
    "\003", 
    "\uffd1", 
    "\004", 
    "\uffd1", 
    "\005", 
    "\uffd1", 
    "\006", 
    "\uffd1", 
    "\007", 
    "\uffd1", 
    "\010", 
    "\uffd1", 
    "\011", 
    "\uffd1", 
    "\012", 
    "\uffd1", 
    "\014", 
    "\uffd1", 
    "\016", 
    "\uffd1", 
    "\017", 
    "\uffd1", 
    "\021", 
    "\uffd1", 
    "\022", 
    "\uffd1", 
    "\023", 
    "\uffd1", 
    "\024", 
    "\uffd1", 
    "\025", 
    "\uffd1", 
    "\026", 
    "\uffd1", 
    "\027", 
    "\uffd1", 
    "\030", 
    "\uffd1", 
    "\031", 
    "\uffd1", 
    "\033", 
    "\uffd1", 
    "\035", 
    "\uffd1", 
    "\036", 
    "\uffd1", 
    "\037", 
    "\uffd1", 
    "\040", 
    "\uffd1", 
    "\041", 
    "\uffd1", 
    "\042", 
    "\uffd1", 
    "\043", 
    "\uffd1", 
    "\045", 
    "\uffd1", 
    "\046", 
    "\uffd1", 
    "\047", 
    "\uffd1", 
    "\050", 
    "\uffd1", 
    "\051", 
    "\uffd1", 
    "\052", 
    "\uffd1", 
    "\054", 
    "\uffd1", 
    "\055", 
    "\uffd1", 
    "\056", 
    "\uffd1", 
    "\057", 
    "\uffd1", 
    "\060", 
    "\uffd1", 
    "\061", 
    "\uffd1", 
    "\066", 
    "\uffd1", 
    "\067", 
    "\uffd1", 
    "\070", 
    "\uffd1", 
    "\071", 
    "\uffd1", 
    "\072", 
    "\uffd1", 
    "\073", 
    "\uffd1", 
    "\074", 
    "\uffd1", 
    "\075", 
    "\uffd1", 
    "\101", 
    "\uffd1", 
    "\102", 
    "\uffd1", 
    "\104", 
    "\uffd1", 
    "\105", 
    "\uffd1", 
    "\106", 
    "\uffd1", 
    "\107", 
    "\uffd1", 
    "\110", 
    "\uffd1", 
    "\111", 
    "\uffd1", 
    "\112", 
    "\uffd1", 
    "\117", 
    "\uffd1", 
    "\135", 
    "\uffd1", 
    "\155", 
    "\uffd1", 
    "\156", 
    "\uffd1", 
    "\162", 
    "\uffd1", 
    "\163", 
    "\uffd1", 
    "\165", 
    "\uffd1", 
    "\166", 
    "\uffd1", 
    "\167", 
    "\uffd1", 
    "\170", 
    "\uffd1", 
    "\171", 
    "\uffd1", 
    "\172", 
    "\uffd1", 
    "\173", 
    "\uffd1", 
    "\174", 
    "\uffd1", 
    "\175", 
    "\uffd1", 
    "\176", 
    "\uffd1", 
    "\201", 
    "\uffd1", 
    "\202", 
    "\uffd1", 
    "\203", 
    "\uffd1", 
    "\204", 
    "\uffd1", 
    "\205", 
    "\uffd1", 
    "\206", 
    "\uffd1", 
    "\207", 
    "\uffd1", 
    "\213", 
    "\uffd1", 
    "\216", 
    "\uffd1", 
    "\217", 
    "\uffd1", 
    "\220", 
    "\uffd1", 
    "\221", 
    "\uffd1", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\uff26", 
    "\034", 
    "\uff26", 
    "\065", 
    "\uff26", 
    "\102", 
    "\uff26", 
    "\113", 
    "\uff26", 
    "\114", 
    "\uff26", 
    "\115", 
    "\uff26", 
    "\116", 
    "\uff26", 
    "\134", 
    "\uff26", 
    "\135", 
    "\uff26", 
    "\136", 
    "\uff26", 
    "\137", 
    "\uff26", 
    "\140", 
    "\uff26", 
    "\141", 
    "\uff26", 
    "\142", 
    "\uff26", 
    "\143", 
    "\uff26", 
    "\144", 
    "\uff26", 
    "\145", 
    "\uff26", 
    "\146", 
    "\uff26", 
    "\147", 
    "\uff26", 
    "\150", 
    "\uff26", 
    "\151", 
    "\uff26", 
    "\152", 
    "\uff26", 
    "\153", 
    "\uff26", 
    "\154", 
    "\uff26", 
    "\155", 
    "\uff26", 
    "\156", 
    "\uff26", 
    "\157", 
    "\uff26", 
    "\160", 
    "\uff26", 
    "\161", 
    "\uff26", 
    "\164", 
    "\uff26", 
    "\200", 
    "\uff26", 
    "\214", 
    "\uff26", 
    "\215", 
    "\uff26", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\uff20", 
    "\034", 
    "\uff20", 
    "\065", 
    "\uff20", 
    "\102", 
    "\uff20", 
    "\113", 
    "\uff20", 
    "\114", 
    "\uff20", 
    "\115", 
    "\uff20", 
    "\116", 
    "\uff20", 
    "\134", 
    "\uff20", 
    "\135", 
    "\uff20", 
    "\136", 
    "\uff20", 
    "\137", 
    "\uff20", 
    "\140", 
    "\uff20", 
    "\141", 
    "\uff20", 
    "\142", 
    "\uff20", 
    "\143", 
    "\uff20", 
    "\144", 
    "\uff20", 
    "\145", 
    "\uff20", 
    "\146", 
    "\uff20", 
    "\147", 
    "\uff20", 
    "\150", 
    "\uff20", 
    "\151", 
    "\uff20", 
    "\152", 
    "\uff20", 
    "\153", 
    "\uff20", 
    "\154", 
    "\uff20", 
    "\155", 
    "\uff20", 
    "\156", 
    "\uff20", 
    "\157", 
    "\uff20", 
    "\160", 
    "\uff20", 
    "\161", 
    "\uff20", 
    "\164", 
    "\uff20", 
    "\200", 
    "\uff20", 
    "\214", 
    "\uff20", 
    "\215", 
    "\uff20", 
    "\001", 
    "\002", 
    "\000", 
    "\014", 
    "\012", 
    "\061", 
    "\015", 
    "\u01f1", 
    "\076", 
    "\u0288", 
    "\077", 
    "\u01f0", 
    "\100", 
    "\u01ee", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\ufef5", 
    "\034", 
    "\ufef5", 
    "\065", 
    "\ufef5", 
    "\102", 
    "\ufef5", 
    "\113", 
    "\ufef5", 
    "\114", 
    "\ufef5", 
    "\115", 
    "\ufef5", 
    "\116", 
    "\ufef5", 
    "\134", 
    "\ufef5", 
    "\135", 
    "\ufef5", 
    "\136", 
    "\ufef5", 
    "\137", 
    "\ufef5", 
    "\140", 
    "\ufef5", 
    "\141", 
    "\ufef5", 
    "\142", 
    "\ufef5", 
    "\143", 
    "\ufef5", 
    "\144", 
    "\ufef5", 
    "\145", 
    "\ufef5", 
    "\146", 
    "\ufef5", 
    "\147", 
    "\ufef5", 
    "\150", 
    "\ufef5", 
    "\151", 
    "\ufef5", 
    "\152", 
    "\ufef5", 
    "\153", 
    "\ufef5", 
    "\154", 
    "\ufef5", 
    "\155", 
    "\ufef5", 
    "\156", 
    "\ufef5", 
    "\157", 
    "\ufef5", 
    "\160", 
    "\ufef5", 
    "\161", 
    "\ufef5", 
    "\164", 
    "\ufef5", 
    "\200", 
    "\ufef5", 
    "\214", 
    "\ufef5", 
    "\215", 
    "\ufef5", 
    "\001", 
    "\002", 
    "\000", 
    "\136", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\135", 
    "\uff61", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\010", 
    "\113", 
    "\u0298", 
    "\135", 
    "\uff60", 
    "\214", 
    "\uff60", 
    "\001", 
    "\002", 
    "\000", 
    "\074", 
    "\032", 
    "\260", 
    "\113", 
    "\uff5e", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\135", 
    "\uff5e", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\214", 
    "\uff5e", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\135", 
    "\u028d", 
    "\001", 
    "\002", 
    "\000", 
    "\136", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\135", 
    "\uff61", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\135", 
    "\u028f", 
    "\001", 
    "\002", 
    "\000", 
    "\136", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\214", 
    "\uff61", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\214", 
    "\u0291", 
    "\001", 
    "\002", 
    "\000", 
    "\212", 
    "\003", 
    "\115", 
    "\004", 
    "\141", 
    "\005", 
    "\152", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\014", 
    "\074", 
    "\016", 
    "\127", 
    "\017", 
    "\122", 
    "\021", 
    "\120", 
    "\022", 
    "\044", 
    "\024", 
    "\033", 
    "\026", 
    "\101", 
    "\030", 
    "\153", 
    "\033", 
    "\103", 
    "\035", 
    "\130", 
    "\041", 
    "\055", 
    "\042", 
    "\121", 
    "\045", 
    "\135", 
    "\046", 
    "\041", 
    "\050", 
    "\150", 
    "\051", 
    "\025", 
    "\052", 
    "\012", 
    "\054", 
    "\076", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\101", 
    "\064", 
    "\104", 
    "\024", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\135", 
    "\010", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\205", 
    "\042", 
    "\213", 
    "\145", 
    "\215", 
    "\u0293", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\254", 
    "\002", 
    "\uffed", 
    "\003", 
    "\uffed", 
    "\004", 
    "\uffed", 
    "\005", 
    "\uffed", 
    "\006", 
    "\uffed", 
    "\007", 
    "\uffed", 
    "\010", 
    "\uffed", 
    "\011", 
    "\uffed", 
    "\012", 
    "\uffed", 
    "\014", 
    "\uffed", 
    "\016", 
    "\uffed", 
    "\017", 
    "\uffed", 
    "\021", 
    "\uffed", 
    "\022", 
    "\uffed", 
    "\023", 
    "\uffed", 
    "\024", 
    "\uffed", 
    "\025", 
    "\uffed", 
    "\026", 
    "\uffed", 
    "\027", 
    "\uffed", 
    "\030", 
    "\uffed", 
    "\031", 
    "\uffed", 
    "\033", 
    "\uffed", 
    "\035", 
    "\uffed", 
    "\036", 
    "\uffed", 
    "\037", 
    "\uffed", 
    "\040", 
    "\uffed", 
    "\041", 
    "\uffed", 
    "\042", 
    "\uffed", 
    "\043", 
    "\uffed", 
    "\045", 
    "\uffed", 
    "\046", 
    "\uffed", 
    "\050", 
    "\uffed", 
    "\051", 
    "\uffed", 
    "\052", 
    "\uffed", 
    "\054", 
    "\uffed", 
    "\055", 
    "\uffed", 
    "\056", 
    "\uffed", 
    "\057", 
    "\uffed", 
    "\060", 
    "\uffed", 
    "\061", 
    "\uffed", 
    "\066", 
    "\uffed", 
    "\067", 
    "\uffed", 
    "\070", 
    "\uffed", 
    "\071", 
    "\uffed", 
    "\072", 
    "\uffed", 
    "\073", 
    "\uffed", 
    "\074", 
    "\uffed", 
    "\075", 
    "\uffed", 
    "\101", 
    "\uffed", 
    "\102", 
    "\uffed", 
    "\104", 
    "\uffed", 
    "\105", 
    "\uffed", 
    "\106", 
    "\uffed", 
    "\107", 
    "\uffed", 
    "\110", 
    "\uffed", 
    "\111", 
    "\uffed", 
    "\112", 
    "\uffed", 
    "\117", 
    "\uffed", 
    "\135", 
    "\uffed", 
    "\155", 
    "\uffed", 
    "\156", 
    "\uffed", 
    "\162", 
    "\uffed", 
    "\163", 
    "\uffed", 
    "\165", 
    "\uffed", 
    "\166", 
    "\uffed", 
    "\167", 
    "\uffed", 
    "\170", 
    "\uffed", 
    "\171", 
    "\uffed", 
    "\172", 
    "\uffed", 
    "\173", 
    "\uffed", 
    "\174", 
    "\uffed", 
    "\175", 
    "\uffed", 
    "\176", 
    "\uffed", 
    "\201", 
    "\uffed", 
    "\202", 
    "\uffed", 
    "\203", 
    "\uffed", 
    "\204", 
    "\uffed", 
    "\205", 
    "\uffed", 
    "\206", 
    "\uffed", 
    "\207", 
    "\uffed", 
    "\213", 
    "\uffed", 
    "\216", 
    "\uffed", 
    "\217", 
    "\uffed", 
    "\220", 
    "\uffed", 
    "\221", 
    "\uffed", 
    "\001", 
    "\002", 
    "\000", 
    "\226", 
    "\003", 
    "\ufff8", 
    "\004", 
    "\ufff8", 
    "\005", 
    "\ufff8", 
    "\006", 
    "\ufff8", 
    "\007", 
    "\ufff8", 
    "\010", 
    "\ufff8", 
    "\011", 
    "\ufff8", 
    "\012", 
    "\ufff8", 
    "\014", 
    "\ufff8", 
    "\016", 
    "\ufff8", 
    "\017", 
    "\ufff8", 
    "\021", 
    "\ufff8", 
    "\022", 
    "\ufff8", 
    "\024", 
    "\ufff8", 
    "\025", 
    "\ufff8", 
    "\026", 
    "\ufff8", 
    "\030", 
    "\ufff8", 
    "\033", 
    "\ufff8", 
    "\035", 
    "\ufff8", 
    "\041", 
    "\ufff8", 
    "\042", 
    "\ufff8", 
    "\043", 
    "\ufff8", 
    "\045", 
    "\ufff8", 
    "\046", 
    "\ufff8", 
    "\050", 
    "\ufff8", 
    "\051", 
    "\ufff8", 
    "\052", 
    "\ufff8", 
    "\054", 
    "\ufff8", 
    "\055", 
    "\ufff8", 
    "\056", 
    "\ufff8", 
    "\057", 
    "\ufff8", 
    "\060", 
    "\ufff8", 
    "\061", 
    "\ufff8", 
    "\066", 
    "\ufff8", 
    "\067", 
    "\ufff8", 
    "\070", 
    "\ufff8", 
    "\071", 
    "\ufff8", 
    "\072", 
    "\ufff8", 
    "\073", 
    "\ufff8", 
    "\074", 
    "\ufff8", 
    "\075", 
    "\ufff8", 
    "\101", 
    "\ufff8", 
    "\104", 
    "\ufff8", 
    "\105", 
    "\ufff8", 
    "\106", 
    "\ufff8", 
    "\107", 
    "\ufff8", 
    "\110", 
    "\ufff8", 
    "\111", 
    "\ufff8", 
    "\112", 
    "\ufff8", 
    "\117", 
    "\ufff8", 
    "\135", 
    "\ufff8", 
    "\155", 
    "\ufff8", 
    "\156", 
    "\ufff8", 
    "\162", 
    "\ufff8", 
    "\163", 
    "\ufff8", 
    "\165", 
    "\ufff8", 
    "\166", 
    "\ufff8", 
    "\167", 
    "\ufff8", 
    "\170", 
    "\ufff8", 
    "\171", 
    "\ufff8", 
    "\172", 
    "\ufff8", 
    "\173", 
    "\ufff8", 
    "\174", 
    "\ufff8", 
    "\175", 
    "\ufff8", 
    "\176", 
    "\ufff8", 
    "\201", 
    "\ufff8", 
    "\205", 
    "\ufff8", 
    "\206", 
    "\ufff8", 
    "\207", 
    "\ufff8", 
    "\213", 
    "\ufff8", 
    "\216", 
    "\ufff8", 
    "\217", 
    "\ufff8", 
    "\220", 
    "\ufff8", 
    "\221", 
    "\ufff8", 
    "\001", 
    "\002", 
    "\000", 
    "\254", 
    "\002", 
    "\uffb4", 
    "\003", 
    "\uffb4", 
    "\004", 
    "\uffb4", 
    "\005", 
    "\uffb4", 
    "\006", 
    "\uffb4", 
    "\007", 
    "\uffb4", 
    "\010", 
    "\uffb4", 
    "\011", 
    "\uffb4", 
    "\012", 
    "\uffb4", 
    "\014", 
    "\uffb4", 
    "\016", 
    "\uffb4", 
    "\017", 
    "\uffb4", 
    "\021", 
    "\uffb4", 
    "\022", 
    "\uffb4", 
    "\023", 
    "\uffb4", 
    "\024", 
    "\uffb4", 
    "\025", 
    "\uffb4", 
    "\026", 
    "\uffb4", 
    "\027", 
    "\uffb4", 
    "\030", 
    "\uffb4", 
    "\031", 
    "\uffb4", 
    "\033", 
    "\uffb4", 
    "\035", 
    "\uffb4", 
    "\036", 
    "\uffb4", 
    "\037", 
    "\uffb4", 
    "\040", 
    "\uffb4", 
    "\041", 
    "\uffb4", 
    "\042", 
    "\uffb4", 
    "\043", 
    "\uffb4", 
    "\045", 
    "\uffb4", 
    "\046", 
    "\uffb4", 
    "\050", 
    "\uffb4", 
    "\051", 
    "\uffb4", 
    "\052", 
    "\uffb4", 
    "\054", 
    "\uffb4", 
    "\055", 
    "\uffb4", 
    "\056", 
    "\uffb4", 
    "\057", 
    "\uffb4", 
    "\060", 
    "\uffb4", 
    "\061", 
    "\uffb4", 
    "\066", 
    "\uffb4", 
    "\067", 
    "\uffb4", 
    "\070", 
    "\uffb4", 
    "\071", 
    "\uffb4", 
    "\072", 
    "\uffb4", 
    "\073", 
    "\uffb4", 
    "\074", 
    "\uffb4", 
    "\075", 
    "\uffb4", 
    "\101", 
    "\uffb4", 
    "\102", 
    "\uffb4", 
    "\104", 
    "\uffb4", 
    "\105", 
    "\uffb4", 
    "\106", 
    "\uffb4", 
    "\107", 
    "\uffb4", 
    "\110", 
    "\uffb4", 
    "\111", 
    "\uffb4", 
    "\112", 
    "\uffb4", 
    "\117", 
    "\uffb4", 
    "\135", 
    "\uffb4", 
    "\155", 
    "\uffb4", 
    "\156", 
    "\uffb4", 
    "\162", 
    "\uffb4", 
    "\163", 
    "\uffb4", 
    "\165", 
    "\uffb4", 
    "\166", 
    "\uffb4", 
    "\167", 
    "\uffb4", 
    "\170", 
    "\uffb4", 
    "\171", 
    "\uffb4", 
    "\172", 
    "\uffb4", 
    "\173", 
    "\uffb4", 
    "\174", 
    "\uffb4", 
    "\175", 
    "\uffb4", 
    "\176", 
    "\uffb4", 
    "\201", 
    "\uffb4", 
    "\202", 
    "\uffb4", 
    "\203", 
    "\uffb4", 
    "\204", 
    "\uffb4", 
    "\205", 
    "\uffb4", 
    "\206", 
    "\uffb4", 
    "\207", 
    "\uffb4", 
    "\213", 
    "\uffb4", 
    "\216", 
    "\uffb4", 
    "\217", 
    "\uffb4", 
    "\220", 
    "\uffb4", 
    "\221", 
    "\uffb4", 
    "\001", 
    "\002", 
    "\000", 
    "\226", 
    "\003", 
    "\115", 
    "\004", 
    "\141", 
    "\005", 
    "\152", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\014", 
    "\074", 
    "\016", 
    "\127", 
    "\017", 
    "\122", 
    "\021", 
    "\120", 
    "\022", 
    "\044", 
    "\024", 
    "\033", 
    "\025", 
    "\u0296", 
    "\026", 
    "\101", 
    "\030", 
    "\153", 
    "\033", 
    "\103", 
    "\035", 
    "\130", 
    "\041", 
    "\055", 
    "\042", 
    "\121", 
    "\043", 
    "\107", 
    "\045", 
    "\135", 
    "\046", 
    "\041", 
    "\050", 
    "\150", 
    "\051", 
    "\025", 
    "\052", 
    "\012", 
    "\054", 
    "\076", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\057", 
    "\223", 
    "\060", 
    "\032", 
    "\061", 
    "\140", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\101", 
    "\064", 
    "\104", 
    "\024", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\135", 
    "\010", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\205", 
    "\042", 
    "\206", 
    "\062", 
    "\207", 
    "\017", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\135", 
    "\u0297", 
    "\001", 
    "\002", 
    "\000", 
    "\254", 
    "\002", 
    "\uffb3", 
    "\003", 
    "\uffb3", 
    "\004", 
    "\uffb3", 
    "\005", 
    "\uffb3", 
    "\006", 
    "\uffb3", 
    "\007", 
    "\uffb3", 
    "\010", 
    "\uffb3", 
    "\011", 
    "\uffb3", 
    "\012", 
    "\uffb3", 
    "\014", 
    "\uffb3", 
    "\016", 
    "\uffb3", 
    "\017", 
    "\uffb3", 
    "\021", 
    "\uffb3", 
    "\022", 
    "\uffb3", 
    "\023", 
    "\uffb3", 
    "\024", 
    "\uffb3", 
    "\025", 
    "\uffb3", 
    "\026", 
    "\uffb3", 
    "\027", 
    "\uffb3", 
    "\030", 
    "\uffb3", 
    "\031", 
    "\uffb3", 
    "\033", 
    "\uffb3", 
    "\035", 
    "\uffb3", 
    "\036", 
    "\uffb3", 
    "\037", 
    "\uffb3", 
    "\040", 
    "\uffb3", 
    "\041", 
    "\uffb3", 
    "\042", 
    "\uffb3", 
    "\043", 
    "\uffb3", 
    "\045", 
    "\uffb3", 
    "\046", 
    "\uffb3", 
    "\050", 
    "\uffb3", 
    "\051", 
    "\uffb3", 
    "\052", 
    "\uffb3", 
    "\054", 
    "\uffb3", 
    "\055", 
    "\uffb3", 
    "\056", 
    "\uffb3", 
    "\057", 
    "\uffb3", 
    "\060", 
    "\uffb3", 
    "\061", 
    "\uffb3", 
    "\066", 
    "\uffb3", 
    "\067", 
    "\uffb3", 
    "\070", 
    "\uffb3", 
    "\071", 
    "\uffb3", 
    "\072", 
    "\uffb3", 
    "\073", 
    "\uffb3", 
    "\074", 
    "\uffb3", 
    "\075", 
    "\uffb3", 
    "\101", 
    "\uffb3", 
    "\102", 
    "\uffb3", 
    "\104", 
    "\uffb3", 
    "\105", 
    "\uffb3", 
    "\106", 
    "\uffb3", 
    "\107", 
    "\uffb3", 
    "\110", 
    "\uffb3", 
    "\111", 
    "\uffb3", 
    "\112", 
    "\uffb3", 
    "\117", 
    "\uffb3", 
    "\135", 
    "\uffb3", 
    "\155", 
    "\uffb3", 
    "\156", 
    "\uffb3", 
    "\162", 
    "\uffb3", 
    "\163", 
    "\uffb3", 
    "\165", 
    "\uffb3", 
    "\166", 
    "\uffb3", 
    "\167", 
    "\uffb3", 
    "\170", 
    "\uffb3", 
    "\171", 
    "\uffb3", 
    "\172", 
    "\uffb3", 
    "\173", 
    "\uffb3", 
    "\174", 
    "\uffb3", 
    "\175", 
    "\uffb3", 
    "\176", 
    "\uffb3", 
    "\201", 
    "\uffb3", 
    "\202", 
    "\uffb3", 
    "\203", 
    "\uffb3", 
    "\204", 
    "\uffb3", 
    "\205", 
    "\uffb3", 
    "\206", 
    "\uffb3", 
    "\207", 
    "\uffb3", 
    "\213", 
    "\uffb3", 
    "\216", 
    "\uffb3", 
    "\217", 
    "\uffb3", 
    "\220", 
    "\uffb3", 
    "\221", 
    "\uffb3", 
    "\001", 
    "\002", 
    "\000", 
    "\134", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\074", 
    "\032", 
    "\260", 
    "\113", 
    "\uff5f", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\135", 
    "\uff5f", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\214", 
    "\uff5f", 
    "\001", 
    "\002", 
    "\000", 
    "\010", 
    "\010", 
    "\u029b", 
    "\012", 
    "\061", 
    "\216", 
    "\100", 
    "\001", 
    "\002", 
    "\000", 
    "\110", 
    "\032", 
    "\ufea4", 
    "\034", 
    "\ufea4", 
    "\065", 
    "\ufea4", 
    "\102", 
    "\ufea4", 
    "\113", 
    "\ufea4", 
    "\114", 
    "\ufea4", 
    "\115", 
    "\ufea4", 
    "\116", 
    "\ufea4", 
    "\134", 
    "\ufea4", 
    "\135", 
    "\ufea4", 
    "\136", 
    "\ufea4", 
    "\137", 
    "\ufea4", 
    "\140", 
    "\ufea4", 
    "\141", 
    "\ufea4", 
    "\142", 
    "\ufea4", 
    "\143", 
    "\ufea4", 
    "\144", 
    "\ufea4", 
    "\145", 
    "\ufea4", 
    "\146", 
    "\ufea4", 
    "\147", 
    "\ufea4", 
    "\150", 
    "\ufea4", 
    "\151", 
    "\ufea4", 
    "\152", 
    "\ufea4", 
    "\153", 
    "\ufea4", 
    "\154", 
    "\ufea4", 
    "\155", 
    "\ufea4", 
    "\156", 
    "\ufea4", 
    "\157", 
    "\ufea4", 
    "\160", 
    "\ufea4", 
    "\161", 
    "\ufea4", 
    "\164", 
    "\ufea4", 
    "\200", 
    "\ufea4", 
    "\213", 
    "\u0121", 
    "\214", 
    "\ufea4", 
    "\215", 
    "\ufea4", 
    "\001", 
    "\002", 
    "\000", 
    "\012", 
    "\010", 
    "\034", 
    "\012", 
    "\061", 
    "\105", 
    "\056", 
    "\216", 
    "\100", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\214", 
    "\u029e", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\ufeac", 
    "\034", 
    "\ufeac", 
    "\065", 
    "\ufeac", 
    "\102", 
    "\ufeac", 
    "\113", 
    "\ufeac", 
    "\114", 
    "\ufeac", 
    "\115", 
    "\ufeac", 
    "\116", 
    "\ufeac", 
    "\134", 
    "\ufeac", 
    "\135", 
    "\ufeac", 
    "\136", 
    "\ufeac", 
    "\137", 
    "\ufeac", 
    "\140", 
    "\ufeac", 
    "\141", 
    "\ufeac", 
    "\142", 
    "\ufeac", 
    "\143", 
    "\ufeac", 
    "\144", 
    "\ufeac", 
    "\145", 
    "\ufeac", 
    "\146", 
    "\ufeac", 
    "\147", 
    "\ufeac", 
    "\150", 
    "\ufeac", 
    "\151", 
    "\ufeac", 
    "\152", 
    "\ufeac", 
    "\153", 
    "\ufeac", 
    "\154", 
    "\ufeac", 
    "\155", 
    "\ufeac", 
    "\156", 
    "\ufeac", 
    "\157", 
    "\ufeac", 
    "\160", 
    "\ufeac", 
    "\161", 
    "\ufeac", 
    "\164", 
    "\ufeac", 
    "\200", 
    "\ufeac", 
    "\214", 
    "\ufeac", 
    "\215", 
    "\ufeac", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\260", 
    "\034", 
    "\ufeab", 
    "\065", 
    "\ufeab", 
    "\102", 
    "\ufeab", 
    "\113", 
    "\ufeab", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\135", 
    "\ufeab", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\200", 
    "\ufeab", 
    "\214", 
    "\ufeab", 
    "\215", 
    "\ufeab", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\uff28", 
    "\034", 
    "\uff28", 
    "\065", 
    "\uff28", 
    "\102", 
    "\uff28", 
    "\113", 
    "\uff28", 
    "\114", 
    "\uff28", 
    "\115", 
    "\uff28", 
    "\116", 
    "\uff28", 
    "\134", 
    "\uff28", 
    "\135", 
    "\uff28", 
    "\136", 
    "\uff28", 
    "\137", 
    "\uff28", 
    "\140", 
    "\uff28", 
    "\141", 
    "\uff28", 
    "\142", 
    "\uff28", 
    "\143", 
    "\uff28", 
    "\144", 
    "\uff28", 
    "\145", 
    "\uff28", 
    "\146", 
    "\uff28", 
    "\147", 
    "\uff28", 
    "\150", 
    "\uff28", 
    "\151", 
    "\uff28", 
    "\152", 
    "\uff28", 
    "\153", 
    "\uff28", 
    "\154", 
    "\uff28", 
    "\155", 
    "\uff28", 
    "\156", 
    "\uff28", 
    "\157", 
    "\uff28", 
    "\160", 
    "\uff28", 
    "\161", 
    "\uff28", 
    "\164", 
    "\uff28", 
    "\200", 
    "\uff28", 
    "\214", 
    "\uff28", 
    "\215", 
    "\uff28", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\016", 
    "\u02a5", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\135", 
    "\u02a4", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\135", 
    "\uffcd", 
    "\001", 
    "\002", 
    "\000", 
    "\254", 
    "\002", 
    "\uffdf", 
    "\003", 
    "\uffdf", 
    "\004", 
    "\uffdf", 
    "\005", 
    "\uffdf", 
    "\006", 
    "\uffdf", 
    "\007", 
    "\uffdf", 
    "\010", 
    "\uffdf", 
    "\011", 
    "\uffdf", 
    "\012", 
    "\uffdf", 
    "\014", 
    "\uffdf", 
    "\016", 
    "\uffdf", 
    "\017", 
    "\uffdf", 
    "\021", 
    "\uffdf", 
    "\022", 
    "\uffdf", 
    "\023", 
    "\uffdf", 
    "\024", 
    "\uffdf", 
    "\025", 
    "\uffdf", 
    "\026", 
    "\uffdf", 
    "\027", 
    "\uffdf", 
    "\030", 
    "\uffdf", 
    "\031", 
    "\uffdf", 
    "\033", 
    "\uffdf", 
    "\035", 
    "\uffdf", 
    "\036", 
    "\uffdf", 
    "\037", 
    "\uffdf", 
    "\040", 
    "\uffdf", 
    "\041", 
    "\uffdf", 
    "\042", 
    "\uffdf", 
    "\043", 
    "\uffdf", 
    "\045", 
    "\uffdf", 
    "\046", 
    "\uffdf", 
    "\050", 
    "\uffdf", 
    "\051", 
    "\uffdf", 
    "\052", 
    "\uffdf", 
    "\054", 
    "\uffdf", 
    "\055", 
    "\uffdf", 
    "\056", 
    "\uffdf", 
    "\057", 
    "\uffdf", 
    "\060", 
    "\uffdf", 
    "\061", 
    "\uffdf", 
    "\066", 
    "\uffdf", 
    "\067", 
    "\uffdf", 
    "\070", 
    "\uffdf", 
    "\071", 
    "\uffdf", 
    "\072", 
    "\uffdf", 
    "\073", 
    "\uffdf", 
    "\074", 
    "\uffdf", 
    "\075", 
    "\uffdf", 
    "\101", 
    "\uffdf", 
    "\102", 
    "\uffdf", 
    "\104", 
    "\uffdf", 
    "\105", 
    "\uffdf", 
    "\106", 
    "\uffdf", 
    "\107", 
    "\uffdf", 
    "\110", 
    "\uffdf", 
    "\111", 
    "\uffdf", 
    "\112", 
    "\uffdf", 
    "\117", 
    "\uffdf", 
    "\135", 
    "\uffdf", 
    "\155", 
    "\uffdf", 
    "\156", 
    "\uffdf", 
    "\162", 
    "\uffdf", 
    "\163", 
    "\uffdf", 
    "\165", 
    "\uffdf", 
    "\166", 
    "\uffdf", 
    "\167", 
    "\uffdf", 
    "\170", 
    "\uffdf", 
    "\171", 
    "\uffdf", 
    "\172", 
    "\uffdf", 
    "\173", 
    "\uffdf", 
    "\174", 
    "\uffdf", 
    "\175", 
    "\uffdf", 
    "\176", 
    "\uffdf", 
    "\201", 
    "\uffdf", 
    "\202", 
    "\uffdf", 
    "\203", 
    "\uffdf", 
    "\204", 
    "\uffdf", 
    "\205", 
    "\uffdf", 
    "\206", 
    "\uffdf", 
    "\207", 
    "\uffdf", 
    "\213", 
    "\uffdf", 
    "\216", 
    "\uffdf", 
    "\217", 
    "\uffdf", 
    "\220", 
    "\uffdf", 
    "\221", 
    "\uffdf", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\214", 
    "\u02a6", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\135", 
    "\uffcc", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\010", 
    "\uffc2", 
    "\001", 
    "\002", 
    "\000", 
    "\254", 
    "\002", 
    "\uffe0", 
    "\003", 
    "\uffe0", 
    "\004", 
    "\uffe0", 
    "\005", 
    "\uffe0", 
    "\006", 
    "\uffe0", 
    "\007", 
    "\uffe0", 
    "\010", 
    "\uffe0", 
    "\011", 
    "\uffe0", 
    "\012", 
    "\uffe0", 
    "\014", 
    "\uffe0", 
    "\016", 
    "\uffe0", 
    "\017", 
    "\uffe0", 
    "\021", 
    "\uffe0", 
    "\022", 
    "\uffe0", 
    "\023", 
    "\uffe0", 
    "\024", 
    "\uffe0", 
    "\025", 
    "\uffe0", 
    "\026", 
    "\uffe0", 
    "\027", 
    "\uffe0", 
    "\030", 
    "\uffe0", 
    "\031", 
    "\uffe0", 
    "\033", 
    "\uffe0", 
    "\035", 
    "\uffe0", 
    "\036", 
    "\uffe0", 
    "\037", 
    "\uffe0", 
    "\040", 
    "\uffe0", 
    "\041", 
    "\uffe0", 
    "\042", 
    "\uffe0", 
    "\043", 
    "\uffe0", 
    "\045", 
    "\uffe0", 
    "\046", 
    "\uffe0", 
    "\050", 
    "\uffe0", 
    "\051", 
    "\uffe0", 
    "\052", 
    "\uffe0", 
    "\054", 
    "\uffe0", 
    "\055", 
    "\uffe0", 
    "\056", 
    "\uffe0", 
    "\057", 
    "\uffe0", 
    "\060", 
    "\uffe0", 
    "\061", 
    "\uffe0", 
    "\066", 
    "\uffe0", 
    "\067", 
    "\uffe0", 
    "\070", 
    "\uffe0", 
    "\071", 
    "\uffe0", 
    "\072", 
    "\uffe0", 
    "\073", 
    "\uffe0", 
    "\074", 
    "\uffe0", 
    "\075", 
    "\uffe0", 
    "\101", 
    "\uffe0", 
    "\102", 
    "\uffe0", 
    "\104", 
    "\uffe0", 
    "\105", 
    "\uffe0", 
    "\106", 
    "\uffe0", 
    "\107", 
    "\uffe0", 
    "\110", 
    "\uffe0", 
    "\111", 
    "\uffe0", 
    "\112", 
    "\uffe0", 
    "\117", 
    "\uffe0", 
    "\135", 
    "\uffe0", 
    "\155", 
    "\uffe0", 
    "\156", 
    "\uffe0", 
    "\162", 
    "\uffe0", 
    "\163", 
    "\uffe0", 
    "\165", 
    "\uffe0", 
    "\166", 
    "\uffe0", 
    "\167", 
    "\uffe0", 
    "\170", 
    "\uffe0", 
    "\171", 
    "\uffe0", 
    "\172", 
    "\uffe0", 
    "\173", 
    "\uffe0", 
    "\174", 
    "\uffe0", 
    "\175", 
    "\uffe0", 
    "\176", 
    "\uffe0", 
    "\201", 
    "\uffe0", 
    "\202", 
    "\uffe0", 
    "\203", 
    "\uffe0", 
    "\204", 
    "\uffe0", 
    "\205", 
    "\uffe0", 
    "\206", 
    "\uffe0", 
    "\207", 
    "\uffe0", 
    "\213", 
    "\uffe0", 
    "\216", 
    "\uffe0", 
    "\217", 
    "\uffe0", 
    "\220", 
    "\uffe0", 
    "\221", 
    "\uffe0", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\uff35", 
    "\034", 
    "\uff35", 
    "\065", 
    "\uff35", 
    "\102", 
    "\uff35", 
    "\113", 
    "\uff35", 
    "\114", 
    "\uff35", 
    "\115", 
    "\uff35", 
    "\116", 
    "\uff35", 
    "\134", 
    "\uff35", 
    "\135", 
    "\uff35", 
    "\136", 
    "\uff35", 
    "\137", 
    "\uff35", 
    "\140", 
    "\uff35", 
    "\141", 
    "\uff35", 
    "\142", 
    "\uff35", 
    "\143", 
    "\uff35", 
    "\144", 
    "\uff35", 
    "\145", 
    "\uff35", 
    "\146", 
    "\uff35", 
    "\147", 
    "\uff35", 
    "\150", 
    "\uff35", 
    "\151", 
    "\uff35", 
    "\152", 
    "\uff35", 
    "\153", 
    "\uff35", 
    "\154", 
    "\uff35", 
    "\155", 
    "\uff35", 
    "\156", 
    "\uff35", 
    "\157", 
    "\uff35", 
    "\160", 
    "\uff35", 
    "\161", 
    "\uff35", 
    "\164", 
    "\uff35", 
    "\200", 
    "\uff35", 
    "\214", 
    "\uff35", 
    "\215", 
    "\uff35", 
    "\001", 
    "\002", 
    "\000", 
    "\140", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\142", 
    "\u02ad", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\214", 
    "\ufec3", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\214", 
    "\u02bd", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\u02b4", 
    "\214", 
    "\ufef2", 
    "\001", 
    "\002", 
    "\000", 
    "\012", 
    "\010", 
    "\034", 
    "\012", 
    "\061", 
    "\105", 
    "\056", 
    "\216", 
    "\100", 
    "\001", 
    "\002", 
    "\000", 
    "\074", 
    "\032", 
    "\260", 
    "\065", 
    "\u02af", 
    "\113", 
    "\ufebe", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\214", 
    "\ufebe", 
    "\001", 
    "\002", 
    "\000", 
    "\136", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\142", 
    "\u02b0", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\012", 
    "\010", 
    "\034", 
    "\012", 
    "\061", 
    "\105", 
    "\056", 
    "\216", 
    "\100", 
    "\001", 
    "\002", 
    "\000", 
    "\072", 
    "\032", 
    "\260", 
    "\113", 
    "\ufebf", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\214", 
    "\ufebf", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\ufebb", 
    "\214", 
    "\ufebb", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\ufeba", 
    "\214", 
    "\ufeba", 
    "\001", 
    "\002", 
    "\000", 
    "\140", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\142", 
    "\u02b6", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\214", 
    "\ufef1", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\214", 
    "\ufec2", 
    "\001", 
    "\002", 
    "\000", 
    "\012", 
    "\010", 
    "\034", 
    "\012", 
    "\061", 
    "\105", 
    "\056", 
    "\216", 
    "\100", 
    "\001", 
    "\002", 
    "\000", 
    "\074", 
    "\032", 
    "\260", 
    "\065", 
    "\u02b8", 
    "\113", 
    "\ufec0", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\214", 
    "\ufec0", 
    "\001", 
    "\002", 
    "\000", 
    "\136", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\142", 
    "\u02b9", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\012", 
    "\010", 
    "\034", 
    "\012", 
    "\061", 
    "\105", 
    "\056", 
    "\216", 
    "\100", 
    "\001", 
    "\002", 
    "\000", 
    "\072", 
    "\032", 
    "\260", 
    "\113", 
    "\ufec1", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\214", 
    "\ufec1", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\ufebd", 
    "\214", 
    "\ufebd", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\ufebc", 
    "\214", 
    "\ufebc", 
    "\001", 
    "\002", 
    "\000", 
    "\106", 
    "\032", 
    "\uff1e", 
    "\034", 
    "\uff1e", 
    "\065", 
    "\uff1e", 
    "\102", 
    "\uff1e", 
    "\113", 
    "\uff1e", 
    "\114", 
    "\uff1e", 
    "\115", 
    "\uff1e", 
    "\116", 
    "\uff1e", 
    "\134", 
    "\uff1e", 
    "\135", 
    "\uff1e", 
    "\136", 
    "\uff1e", 
    "\137", 
    "\uff1e", 
    "\140", 
    "\uff1e", 
    "\141", 
    "\uff1e", 
    "\142", 
    "\uff1e", 
    "\143", 
    "\uff1e", 
    "\144", 
    "\uff1e", 
    "\145", 
    "\uff1e", 
    "\146", 
    "\uff1e", 
    "\147", 
    "\uff1e", 
    "\150", 
    "\uff1e", 
    "\151", 
    "\uff1e", 
    "\152", 
    "\uff1e", 
    "\153", 
    "\uff1e", 
    "\154", 
    "\uff1e", 
    "\155", 
    "\uff1e", 
    "\156", 
    "\uff1e", 
    "\157", 
    "\uff1e", 
    "\160", 
    "\uff1e", 
    "\161", 
    "\uff1e", 
    "\164", 
    "\uff1e", 
    "\200", 
    "\uff1e", 
    "\214", 
    "\uff1e", 
    "\215", 
    "\uff1e", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\u02c7", 
    "\135", 
    "\u02c8", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\uff84", 
    "\135", 
    "\uff84", 
    "\001", 
    "\002", 
    "\000", 
    "\014", 
    "\010", 
    "\034", 
    "\012", 
    "\061", 
    "\101", 
    "\u02c4", 
    "\105", 
    "\056", 
    "\216", 
    "\100", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\uff85", 
    "\135", 
    "\uff85", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\uff83", 
    "\135", 
    "\uff83", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\ufeea", 
    "\135", 
    "\ufeea", 
    "\001", 
    "\002", 
    "\000", 
    "\134", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\070", 
    "\032", 
    "\260", 
    "\102", 
    "\u02c6", 
    "\114", 
    "\247", 
    "\115", 
    "\267", 
    "\116", 
    "\240", 
    "\134", 
    "\244", 
    "\136", 
    "\241", 
    "\137", 
    "\261", 
    "\140", 
    "\242", 
    "\141", 
    "\251", 
    "\142", 
    "\262", 
    "\143", 
    "\266", 
    "\144", 
    "\253", 
    "\145", 
    "\236", 
    "\146", 
    "\250", 
    "\147", 
    "\265", 
    "\150", 
    "\263", 
    "\151", 
    "\245", 
    "\152", 
    "\264", 
    "\153", 
    "\257", 
    "\154", 
    "\252", 
    "\155", 
    "\270", 
    "\156", 
    "\246", 
    "\157", 
    "\256", 
    "\160", 
    "\254", 
    "\161", 
    "\237", 
    "\164", 
    "\243", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\uff82", 
    "\135", 
    "\uff82", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\012", 
    "\u02bf", 
    "\216", 
    "\u02c0", 
    "\001", 
    "\002", 
    "\000", 
    "\254", 
    "\002", 
    "\uffe4", 
    "\003", 
    "\uffe4", 
    "\004", 
    "\uffe4", 
    "\005", 
    "\uffe4", 
    "\006", 
    "\uffe4", 
    "\007", 
    "\uffe4", 
    "\010", 
    "\uffe4", 
    "\011", 
    "\uffe4", 
    "\012", 
    "\uffe4", 
    "\014", 
    "\uffe4", 
    "\016", 
    "\uffe4", 
    "\017", 
    "\uffe4", 
    "\021", 
    "\uffe4", 
    "\022", 
    "\uffe4", 
    "\023", 
    "\uffe4", 
    "\024", 
    "\uffe4", 
    "\025", 
    "\uffe4", 
    "\026", 
    "\uffe4", 
    "\027", 
    "\uffe4", 
    "\030", 
    "\uffe4", 
    "\031", 
    "\uffe4", 
    "\033", 
    "\uffe4", 
    "\035", 
    "\uffe4", 
    "\036", 
    "\uffe4", 
    "\037", 
    "\uffe4", 
    "\040", 
    "\uffe4", 
    "\041", 
    "\uffe4", 
    "\042", 
    "\uffe4", 
    "\043", 
    "\uffe4", 
    "\045", 
    "\uffe4", 
    "\046", 
    "\uffe4", 
    "\050", 
    "\uffe4", 
    "\051", 
    "\uffe4", 
    "\052", 
    "\uffe4", 
    "\054", 
    "\uffe4", 
    "\055", 
    "\uffe4", 
    "\056", 
    "\uffe4", 
    "\057", 
    "\uffe4", 
    "\060", 
    "\uffe4", 
    "\061", 
    "\uffe4", 
    "\066", 
    "\uffe4", 
    "\067", 
    "\uffe4", 
    "\070", 
    "\uffe4", 
    "\071", 
    "\uffe4", 
    "\072", 
    "\uffe4", 
    "\073", 
    "\uffe4", 
    "\074", 
    "\uffe4", 
    "\075", 
    "\uffe4", 
    "\101", 
    "\uffe4", 
    "\102", 
    "\uffe4", 
    "\104", 
    "\uffe4", 
    "\105", 
    "\uffe4", 
    "\106", 
    "\uffe4", 
    "\107", 
    "\uffe4", 
    "\110", 
    "\uffe4", 
    "\111", 
    "\uffe4", 
    "\112", 
    "\uffe4", 
    "\117", 
    "\uffe4", 
    "\135", 
    "\uffe4", 
    "\155", 
    "\uffe4", 
    "\156", 
    "\uffe4", 
    "\162", 
    "\uffe4", 
    "\163", 
    "\uffe4", 
    "\165", 
    "\uffe4", 
    "\166", 
    "\uffe4", 
    "\167", 
    "\uffe4", 
    "\170", 
    "\uffe4", 
    "\171", 
    "\uffe4", 
    "\172", 
    "\uffe4", 
    "\173", 
    "\uffe4", 
    "\174", 
    "\uffe4", 
    "\175", 
    "\uffe4", 
    "\176", 
    "\uffe4", 
    "\201", 
    "\uffe4", 
    "\202", 
    "\uffe4", 
    "\203", 
    "\uffe4", 
    "\204", 
    "\uffe4", 
    "\205", 
    "\uffe4", 
    "\206", 
    "\uffe4", 
    "\207", 
    "\uffe4", 
    "\213", 
    "\uffe4", 
    "\216", 
    "\uffe4", 
    "\217", 
    "\uffe4", 
    "\220", 
    "\uffe4", 
    "\221", 
    "\uffe4", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\113", 
    "\uff86", 
    "\135", 
    "\uff86", 
    "\001", 
    "\002", 
    "\000", 
    "\140", 
    "\004", 
    "\141", 
    "\006", 
    "\106", 
    "\007", 
    "\011", 
    "\010", 
    "\034", 
    "\011", 
    "\053", 
    "\012", 
    "\061", 
    "\016", 
    "\127", 
    "\033", 
    "\103", 
    "\055", 
    "\143", 
    "\056", 
    "\030", 
    "\066", 
    "\146", 
    "\067", 
    "\013", 
    "\070", 
    "\020", 
    "\071", 
    "\045", 
    "\072", 
    "\047", 
    "\073", 
    "\132", 
    "\074", 
    "\006", 
    "\075", 
    "\035", 
    "\105", 
    "\056", 
    "\106", 
    "\027", 
    "\107", 
    "\067", 
    "\110", 
    "\051", 
    "\111", 
    "\124", 
    "\112", 
    "\105", 
    "\117", 
    "\063", 
    "\142", 
    "\u0125", 
    "\155", 
    "\104", 
    "\156", 
    "\066", 
    "\162", 
    "\142", 
    "\163", 
    "\014", 
    "\165", 
    "\052", 
    "\166", 
    "\147", 
    "\167", 
    "\026", 
    "\170", 
    "\131", 
    "\171", 
    "\040", 
    "\172", 
    "\126", 
    "\173", 
    "\072", 
    "\174", 
    "\134", 
    "\175", 
    "\071", 
    "\176", 
    "\036", 
    "\201", 
    "\075", 
    "\213", 
    "\145", 
    "\214", 
    "\uff8d", 
    "\216", 
    "\100", 
    "\217", 
    "\112", 
    "\220", 
    "\060", 
    "\221", 
    "\116", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\214", 
    "\u02cc", 
    "\001", 
    "\002", 
    "\000", 
    "\144", 
    "\032", 
    "\uff18", 
    "\034", 
    "\uff18", 
    "\064", 
    "\uff18", 
    "\065", 
    "\uff18", 
    "\102", 
    "\uff18", 
    "\113", 
    "\uff18", 
    "\114", 
    "\uff18", 
    "\115", 
    "\uff18", 
    "\116", 
    "\uff18", 
    "\120", 
    "\uff18", 
    "\121", 
    "\uff18", 
    "\122", 
    "\uff18", 
    "\123", 
    "\uff18", 
    "\124", 
    "\uff18", 
    "\125", 
    "\uff18", 
    "\126", 
    "\uff18", 
    "\127", 
    "\uff18", 
    "\130", 
    "\uff18", 
    "\131", 
    "\uff18", 
    "\132", 
    "\uff18", 
    "\133", 
    "\uff18", 
    "\134", 
    "\uff18", 
    "\135", 
    "\uff18", 
    "\136", 
    "\uff18", 
    "\137", 
    "\uff18", 
    "\140", 
    "\uff18", 
    "\141", 
    "\uff18", 
    "\142", 
    "\uff18", 
    "\143", 
    "\uff18", 
    "\144", 
    "\uff18", 
    "\145", 
    "\uff18", 
    "\146", 
    "\uff18", 
    "\147", 
    "\uff18", 
    "\150", 
    "\uff18", 
    "\151", 
    "\uff18", 
    "\152", 
    "\uff18", 
    "\153", 
    "\uff18", 
    "\154", 
    "\uff18", 
    "\155", 
    "\uff18", 
    "\156", 
    "\uff18", 
    "\157", 
    "\uff18", 
    "\160", 
    "\uff18", 
    "\161", 
    "\uff18", 
    "\164", 
    "\uff18", 
    "\165", 
    "\uff18", 
    "\166", 
    "\uff18", 
    "\200", 
    "\uff18", 
    "\214", 
    "\uff18", 
    "\215", 
    "\uff18", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\000", 
    "\001", 
    "\002", 
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02cb\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\074\004\150\005\143\010\110\050\135\051\042" +
    "\054\107\056\014\062\015\063\053\064\116\071\067\101" +
    "\064\102\124\103\113\106\030\117\101\120\122\121\022" +
    "\125\132\126\021\127\045\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\u02bd\040\u02c0\001\001\000\002\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\u02a8\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u02a1\001\001\000\052\050\135\051\042\054\107\056" +
    "\014\062\u029f\063\053\064\116\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\052\050\135" +
    "\051\042\054\107\056\014\062\u029e\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\u0286\001" +
    "\001\000\052\050\135\051\042\054\107\056\014\062\u0285" +
    "\063\053\064\116\071\067\101\064\102\124\106\030\121" +
    "\022\134\136\136\076\137\006\141\020\143\112\145\072" +
    "\147\036\153\047\001\001\000\002\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\u0284\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\002\001\001\000\004\041\u0265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\051\042\063\053\064\116\071\067\102\u0119" +
    "\106\u011c\121\u011a\136\u0242\137\006\141\020\143\112\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\u0240\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u0239\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\135\051\042\054\107\056\014\062\u0237" +
    "\063\053\064\116\071\067\101\064\102\124\106\030\121" +
    "\022\134\136\136\076\137\006\141\020\143\112\145\072" +
    "\147\036\153\047\001\001\000\004\006\u0235\001\001\000" +
    "\002\001\001\000\052\050\135\051\042\054\107\056\014" +
    "\062\u0234\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\052\050\135\051" +
    "\042\054\107\056\014\062\u0233\063\053\064\116\071\067" +
    "\101\064\102\124\106\030\121\022\134\136\136\076\137" +
    "\006\141\020\143\112\145\072\147\036\153\047\001\001" +
    "\000\010\063\u0232\064\116\143\112\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\u0231\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\052\050\135\051\042\054\107\056\014\062" +
    "\u0230\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\063\306\064\116\071\303\106\304\141" +
    "\020\143\112\144\u022e\146\302\147\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\050\135\051\042\054\107" +
    "\056\014\062\u020c\063\053\064\116\071\067\101\064\102" +
    "\124\106\030\121\022\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\u020b\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\052\050\135\051\042\054\107\056\014\062" +
    "\u020a\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\004" +
    "\044\u0202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\u01ea\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\005\u019c\010\110\050\135\051\042\054\107\056\014" +
    "\062\015\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\052\050\135\051" +
    "\042\054\107\056\014\062\u019a\063\053\064\116\071\067" +
    "\101\064\102\124\106\030\121\022\134\136\136\076\137" +
    "\006\141\020\143\112\145\072\147\036\153\047\001\001" +
    "\000\054\045\u0194\050\135\051\042\054\107\056\014\062" +
    "\u0195\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\052" +
    "\050\135\051\042\054\107\056\014\062\u0193\063\053\064" +
    "\116\071\067\101\064\102\124\106\030\121\022\134\136" +
    "\136\076\137\006\141\020\143\112\145\072\147\036\153" +
    "\047\001\001\000\002\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\u0192\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\u0176\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\u0175\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\052\050\u0172\051\042\054\107\056\014\062\u0125\063\053" +
    "\064\116\071\067\101\064\102\124\106\030\121\u0171\134" +
    "\136\136\076\137\006\141\020\143\112\145\072\147\036" +
    "\153\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u016c\001\001\000\052\050\135" +
    "\051\042\054\107\056\014\062\u016a\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\050\135" +
    "\051\042\054\107\056\014\062\u0162\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\002\001\001\000\034\051\042\063\053\064\116" +
    "\071\067\102\u0119\106\u011c\121\u011a\136\u011b\137\006\141" +
    "\020\143\112\147\036\153\047\001\001\000\052\050\135" +
    "\051\042\054\107\056\014\062\u0117\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\154\102\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\054\160\055\165" +
    "\102\164\152\162\001\001\000\002\001\001\000\012\054" +
    "\160\055\207\102\164\152\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\054\160\055\170\102\164\152\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\054\160\055\176\057\174\061\175\102\164" +
    "\152\162\001\001\000\002\001\001\000\004\060\202\001" +
    "\001\000\002\001\001\000\012\054\160\055\200\102\164" +
    "\152\162\001\001\000\002\001\001\000\012\054\160\055" +
    "\203\102\164\152\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\054\160\055\205\102\164\152\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\005\217\010\110\020\215\050\135\051\042\054" +
    "\107\056\014\062\015\063\053\064\116\071\067\101\064" +
    "\102\124\106\030\121\022\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\004" +
    "\102\212\001\001\000\002\001\001\000\012\054\160\055" +
    "\214\102\164\152\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\220\001\001\000\002\001\001\000" +
    "\074\005\226\007\221\010\110\050\135\051\042\054\107" +
    "\056\014\062\015\063\053\064\116\071\067\101\064\102" +
    "\124\103\113\106\030\117\223\120\225\121\022\125\132" +
    "\126\021\127\045\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\234\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\002\001\001\000\052\050\135\051\042\054" +
    "\107\056\014\062\u0116\063\053\064\116\071\067\101\064" +
    "\102\124\106\030\121\022\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\052" +
    "\050\135\051\042\054\107\056\014\062\u0115\063\053\064" +
    "\116\071\067\101\064\102\124\106\030\121\022\134\136" +
    "\136\076\137\006\141\020\143\112\145\072\147\036\153" +
    "\047\001\001\000\052\050\135\051\042\054\107\056\014" +
    "\062\u0114\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\052\050\135\051" +
    "\042\054\107\056\014\062\u0113\063\053\064\116\071\067" +
    "\101\064\102\124\106\030\121\022\134\136\136\076\137" +
    "\006\141\020\143\112\145\072\147\036\153\047\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\u0112\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\052\050\135\051\042\054\107" +
    "\056\014\062\u0111\063\053\064\116\071\067\101\064\102" +
    "\124\106\030\121\022\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\u010e\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\052\050\135\051\042\054\107\056\014\062" +
    "\u010d\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\u010c\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\052\050\135\051\042\054\107\056\014\062\u010b\063\053" +
    "\064\116\071\067\101\064\102\124\106\030\121\022\134" +
    "\136\136\076\137\006\141\020\143\112\145\072\147\036" +
    "\153\047\001\001\000\052\050\135\051\042\054\107\056" +
    "\014\062\u010a\063\053\064\116\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\052\050\135" +
    "\051\042\054\107\056\014\062\u0109\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\052\050\135\051\042\054\107\056\014\062\u0108" +
    "\063\053\064\116\071\067\101\064\102\124\106\030\121" +
    "\022\134\136\136\076\137\006\141\020\143\112\145\072" +
    "\147\036\153\047\001\001\000\052\050\135\051\042\054" +
    "\107\056\014\062\u0107\063\053\064\116\071\067\101\064" +
    "\102\124\106\030\121\022\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\052" +
    "\050\135\051\042\054\107\056\014\062\u0106\063\053\064" +
    "\116\071\067\101\064\102\124\106\030\121\022\134\136" +
    "\136\076\137\006\141\020\143\112\145\072\147\036\153" +
    "\047\001\001\000\056\005\356\010\110\050\135\051\042" +
    "\054\107\056\014\062\015\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\052\050\135\051\042\054\107\056\014\062\354\063\053" +
    "\064\116\071\067\101\064\102\124\106\030\121\022\134" +
    "\136\136\076\137\006\141\020\143\112\145\072\147\036" +
    "\153\047\001\001\000\052\050\135\051\042\054\107\056" +
    "\014\062\353\063\053\064\116\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\024\063\306" +
    "\064\116\071\303\106\304\141\020\143\112\144\300\146" +
    "\302\147\301\001\001\000\052\050\135\051\042\054\107" +
    "\056\014\062\277\063\053\064\116\071\067\101\064\102" +
    "\124\106\030\121\022\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\276\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\052\050\135\051\042\054\107\056\014\062" +
    "\275\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\274\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\052\050\135\051\042\054\107\056\014\062\273\063\053" +
    "\064\116\071\067\101\064\102\124\106\030\121\022\134" +
    "\136\136\076\137\006\141\020\143\112\145\072\147\036" +
    "\153\047\001\001\000\052\050\135\051\042\054\107\056" +
    "\014\062\272\063\053\064\116\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\052\050\135" +
    "\051\042\054\107\056\014\062\271\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\052\050\135\051\042\054\107\056\014\062\270" +
    "\063\053\064\116\071\067\101\064\102\124\106\030\121" +
    "\022\134\136\136\076\137\006\141\020\143\112\145\072" +
    "\147\036\153\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\063\327\064\116\143\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\314\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\054\050\135\051\042\054\107\056\014\062\312\063\053" +
    "\064\116\065\311\071\067\101\064\102\124\106\030\121" +
    "\022\134\136\136\076\137\006\141\020\143\112\145\072" +
    "\147\036\153\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\063\321\064\116\071\320\137\317\143\112\001" +
    "\001\000\002\001\001\000\010\063\322\064\116\143\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\050\135\051\042\054\107\056\014\062\325" +
    "\063\053\064\116\071\067\101\064\102\124\106\030\121" +
    "\022\134\136\136\076\137\006\141\020\143\112\145\072" +
    "\147\036\153\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\063\321\064\116\066\334" +
    "\067\335\070\332\071\320\102\331\137\333\143\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\150\347\001\001\000\002\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\337\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\345\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\054\050\135\051\042\054\107\056\014\062" +
    "\312\063\053\064\116\065\343\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\151\350\001\001\000\002\001\001\000\024\063\321" +
    "\064\116\066\352\067\335\070\332\071\320\102\331\137" +
    "\333\143\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\370\001\001\000\004\026" +
    "\357\001\001\000\004\030\360\001\001\000\002\001\001" +
    "\000\056\005\367\010\110\050\135\051\042\054\107\056" +
    "\014\062\015\063\053\064\116\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\002\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\364\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\056\005\366" +
    "\010\110\050\135\051\042\054\107\056\014\062\015\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\005\226\007\221\010\110\027\371\050\135\051" +
    "\042\054\107\056\014\062\015\063\053\064\116\071\067" +
    "\101\064\102\124\103\113\106\030\117\223\120\225\121" +
    "\022\125\132\126\021\127\045\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\004\031\372\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\050\135\051\042\054\107\056" +
    "\014\062\376\063\053\064\116\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u0101\001\001\000\074\005" +
    "\226\007\221\010\110\050\135\051\042\054\107\056\014" +
    "\062\015\063\053\064\116\071\067\101\064\102\124\103" +
    "\113\106\030\117\223\120\225\121\022\125\132\126\021" +
    "\127\045\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\004\006\u0103\001\001" +
    "\000\074\005\226\007\221\010\110\050\135\051\042\054" +
    "\107\056\014\062\015\063\053\064\116\071\067\101\064" +
    "\102\124\103\113\106\030\117\223\120\225\121\022\125" +
    "\132\126\021\127\045\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\042\054\107\056\014\062" +
    "\u0110\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\063\321\064\116" +
    "\071\320\137\u011e\143\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\035\u0123\036\u0121\050\u0126\051\042" +
    "\054\107\056\014\062\u0125\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\u0122\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\051\042\063\053\064\116\071\067\102\u0119\105\u0127\106" +
    "\u011c\121\u0128\137\006\141\020\143\112\147\036\153\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\050\135" +
    "\051\042\054\107\056\014\062\u0149\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\052\050\135\051\042\054\107\056\014\062\u0141" +
    "\063\053\064\116\071\067\101\064\102\124\106\030\121" +
    "\022\134\136\136\076\137\006\141\020\143\112\145\072" +
    "\147\036\153\047\001\001\000\052\050\135\051\042\054" +
    "\107\056\014\062\u013f\063\053\064\116\071\067\101\064" +
    "\102\124\106\030\121\022\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\052" +
    "\050\135\051\042\054\107\056\014\062\u013e\063\053\064" +
    "\116\071\067\101\064\102\124\106\030\121\022\134\136" +
    "\136\076\137\006\141\020\143\112\145\072\147\036\153" +
    "\047\001\001\000\052\050\135\051\042\054\107\056\014" +
    "\062\u013d\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\052\050\135\051" +
    "\042\054\107\056\014\062\u013c\063\053\064\116\071\067" +
    "\101\064\102\124\106\030\121\022\134\136\136\076\137" +
    "\006\141\020\143\112\145\072\147\036\153\047\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\u013b\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\052\050\135\051\042\054\107" +
    "\056\014\062\u013a\063\053\064\116\071\067\101\064\102" +
    "\124\106\030\121\022\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\u0139\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\052\050\135\051\042\054\107\056\014\062" +
    "\u0138\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\u0137\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\052\050\135\051\042\054\107\056\014\062\u0136\063\053" +
    "\064\116\071\067\101\064\102\124\106\030\121\022\134" +
    "\136\136\076\137\006\141\020\143\112\145\072\147\036" +
    "\153\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\051\042\063\053\064\116" +
    "\071\067\102\u0119\106\u011c\121\u0143\137\006\141\020\143" +
    "\112\147\036\153\047\001\001\000\002\001\001\000\024" +
    "\063\306\064\116\071\303\106\304\141\020\143\112\144" +
    "\u0144\146\302\147\301\001\001\000\002\001\001\000\004" +
    "\053\u0145\001\001\000\002\001\001\000\056\035\u0147\036" +
    "\u0121\050\u0126\051\042\054\107\056\014\062\u0125\063\053" +
    "\064\116\071\067\101\064\102\124\106\030\121\u0122\134" +
    "\136\136\076\137\006\141\020\143\112\145\072\147\036" +
    "\153\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\u014d\051\042\054\107\056\014" +
    "\062\u0125\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\u014b\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\002\001\001\000" +
    "\034\051\042\063\053\064\116\071\067\102\u0119\105\u014e" +
    "\106\u011c\121\u0128\137\006\141\020\143\112\147\036\153" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\035\u0150\036\u0121\050\u0126\051\042\054\107\056\014\062" +
    "\u0125\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\u0122\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\035\u0153\036\u0121\050\u0126\051\042\054" +
    "\107\056\014\062\u0125\063\053\064\116\071\067\101\064" +
    "\102\124\106\030\121\u0122\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\051\042\063\053\064" +
    "\116\071\067\072\u0156\073\u0157\102\u0119\106\u011c\121\u0158" +
    "\137\006\141\020\143\112\147\036\153\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\051\042\063\053\064\116\071\067\072" +
    "\u015b\073\u0157\102\u0119\106\u011c\121\u0158\137\006\141\020" +
    "\143\112\147\036\153\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\051\042\063\053\064\116\071\067" +
    "\073\u015e\102\u0119\106\u011c\121\u0158\137\006\141\020\143" +
    "\112\147\036\153\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\050\135\051\042\054\107\056\014\062" +
    "\u0161\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\051\042\063\053\064" +
    "\116\071\067\102\u0119\106\u011c\121\u0165\137\006\141\020" +
    "\142\u0166\143\112\147\036\153\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\051\042" +
    "\063\053\064\116\071\067\102\u0119\106\u011c\121\u0169\137" +
    "\006\141\020\143\112\147\036\153\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\135\051\042\054" +
    "\107\056\014\062\u016d\063\053\064\116\071\067\101\064" +
    "\102\124\106\030\121\022\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\042\054\107\056\014" +
    "\062\u0178\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\002\001\001\000" +
    "\004\022\u017a\001\001\000\002\001\001\000\004\023\u018d" +
    "\001\001\000\004\023\u017d\001\001\000\002\001\001\000" +
    "\004\023\u017f\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\u0187\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\004\024\u0183\001\001\000\004" +
    "\006\u0186\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\005\226\007\221\010\110\050\135\051\042\054\107" +
    "\056\014\062\015\063\053\064\116\071\067\101\064\102" +
    "\124\103\113\106\030\117\223\120\225\121\022\125\132" +
    "\126\021\127\045\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\004\024\u0188" +
    "\001\001\000\004\006\u0189\001\001\000\074\005\226\007" +
    "\221\010\110\050\135\051\042\054\107\056\014\062\015" +
    "\063\053\064\116\071\067\101\064\102\124\103\113\106" +
    "\030\117\223\120\225\121\022\125\132\126\021\127\045" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\u018f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\042\054\107\056\014" +
    "\062\u0198\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\050" +
    "\135\051\042\054\107\056\014\062\u019f\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\104\u01a5" +
    "\001\001\000\002\001\001\000\006\106\u01a8\132\u01a7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\106\u01ab\001\001\000\002\001\001\000\004\042" +
    "\u01ad\001\001\000\016\043\u01ae\110\u01af\111\u01bc\113\u01ba" +
    "\114\u01b3\135\u01b7\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\107\u01dd\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\114\u01d8\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\u01bf" +
    "\001\001\000\004\102\u01c1\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\032\u01c6\033\u01c7\034\u01c8\133\u01c4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\u01ca\133\u01c4\001\001\000\002\001\001\000" +
    "\004\112\u01cc\001\001\000\002\001\001\000\004\006\u01cf" +
    "\001\001\000\002\001\001\000\074\005\226\007\221\010" +
    "\110\050\135\051\042\054\107\056\014\062\015\063\053" +
    "\064\116\071\067\101\064\102\124\103\113\106\030\117" +
    "\223\120\225\121\022\125\132\126\021\127\045\134\136" +
    "\136\076\137\006\141\020\143\112\145\072\147\036\153" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\054\160\055\u01d4\102\164\152\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\160" +
    "\055\u01d7\102\164\152\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\054\160\055\u01db" +
    "\102\164\152\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\054\160\055\u01e2\102\164\152" +
    "\162\001\001\000\002\001\001\000\012\054\160\055\u01e4" +
    "\102\164\152\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\054\160" +
    "\055\u01e9\102\164\152\162\001\001\000\002\001\001\000" +
    "\006\077\u01ec\143\u01eb\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\051\042\063\053\064\116\071\067\102" +
    "\u0119\106\u011c\121\u01f8\137\006\141\020\143\112\147\036" +
    "\153\047\001\001\000\002\001\001\000\052\050\135\051" +
    "\042\054\107\056\014\062\u01f2\063\053\064\116\071\067" +
    "\101\064\102\124\106\030\121\022\134\136\136\076\137" +
    "\006\141\020\143\112\145\072\147\036\153\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\050\135\051\042\054\107\056\014" +
    "\062\u01f5\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\100\u01fe\102\u01ff\143\u01fd\001\001\000" +
    "\004\102\u01fc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u0203\001\001\000\002\001\001" +
    "\000\012\032\u0205\033\u01c7\034\u01c8\133\u01c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0208\001\001" +
    "\000\074\005\226\007\221\010\110\050\135\051\042\054" +
    "\107\056\014\062\015\063\053\064\116\071\067\101\064" +
    "\102\124\103\113\106\030\117\223\120\225\121\022\125" +
    "\132\126\021\127\045\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\u020f\051\042\054\107\056\014\062\u0125\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\u020e" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\051\042\063\053\064\116\071\067\102\u0119\106" +
    "\u011c\121\u0211\137\006\141\020\143\112\147\036\153\047" +
    "\001\001\000\004\014\u0212\001\001\000\002\001\001\000" +
    "\034\015\u0214\051\042\063\053\064\116\071\067\102\u0119" +
    "\106\u011c\121\u0215\137\006\141\020\143\112\147\036\153" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\051\042\063\053\064\116\071\067\102\u0119\106\u011c\121" +
    "\u0217\137\006\141\020\143\112\147\036\153\047\001\001" +
    "\000\002\001\001\000\060\005\u021a\010\110\017\u021b\050" +
    "\135\051\042\054\107\056\014\062\015\063\053\064\116" +
    "\071\067\101\064\102\124\106\030\121\022\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\004\006\u021c\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\005\226\007\221\010\110\050\135" +
    "\051\042\054\107\056\014\062\015\063\053\064\116\071" +
    "\067\101\064\102\124\103\113\106\030\117\223\120\225" +
    "\121\022\125\132\126\021\127\045\134\136\136\076\137" +
    "\006\141\020\143\112\145\072\147\036\153\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\015\u0220\051" +
    "\042\063\053\064\116\071\067\102\u0119\106\u011c\121\u0215" +
    "\137\006\141\020\143\112\147\036\153\047\001\001\000" +
    "\004\014\u0221\001\001\000\002\001\001\000\060\005\u021a" +
    "\010\110\017\u0223\050\135\051\042\054\107\056\014\062" +
    "\015\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\011\u0229\012\u0227\051" +
    "\042\063\053\064\116\071\067\102\u0119\106\u011c\121\u0228" +
    "\137\006\141\020\143\112\147\036\153\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\012\u022c\051\042\063\053\064\116\071" +
    "\067\102\u0119\106\u011c\121\u0228\137\006\141\020\143\112" +
    "\147\036\153\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\u022f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\005\226\007\221\010\110" +
    "\050\135\051\042\054\107\056\014\062\015\063\053\064" +
    "\116\071\067\101\064\102\124\103\113\106\030\117\223" +
    "\120\225\121\022\125\132\126\021\127\045\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\077\u01ec\143\u01eb\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\050\135\051\042\054" +
    "\107\056\014\062\u0244\063\053\064\116\071\067\101\064" +
    "\102\124\106\030\121\022\134\136\136\076\137\006\141" +
    "\020\143\112\145\072\147\036\153\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\063\321\064\116\066" +
    "\u0247\067\335\070\332\071\320\102\331\137\333\143\112" +
    "\001\001\000\004\115\u0248\001\001\000\004\116\u024c\001" +
    "\001\000\056\035\u024a\036\u0121\050\u0126\051\042\054\107" +
    "\056\014\062\u0125\063\053\064\116\071\067\101\064\102" +
    "\124\106\030\121\u0122\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\140\u024d\001\001\000\002" +
    "\001\001\000\024\063\321\064\116\066\u024f\067\335\070" +
    "\332\071\320\102\331\137\333\143\112\001\001\000\004" +
    "\115\u0250\001\001\000\002\001\001\000\004\130\u0253\001" +
    "\001\000\004\106\u025a\001\001\000\004\131\u0254\001\001" +
    "\000\002\001\001\000\006\106\u01a8\132\u0256\001\001\000" +
    "\002\001\001\000\004\042\u0258\001\001\000\016\043\u01ae" +
    "\110\u01af\111\u01bc\113\u01ba\114\u01b3\135\u01b7\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\050\135\051\042" +
    "\054\107\056\014\062\u025c\063\053\064\116\071\067\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\002\001\001\000\060\005\u0260\010\110\025\u025f\050\135" +
    "\051\042\054\107\056\014\062\015\063\053\064\116\071" +
    "\067\101\064\102\124\106\030\121\022\134\136\136\076" +
    "\137\006\141\020\143\112\145\072\147\036\153\047\001" +
    "\001\000\004\006\u0261\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\005\226\007\221\010\110\050\135\051" +
    "\042\054\107\056\014\062\015\063\053\064\116\071\067" +
    "\101\064\102\124\103\113\106\030\117\223\120\225\121" +
    "\022\125\132\126\021\127\045\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\054\160\055\u026a\102\164\152\162\001\001" +
    "\000\002\001\001\000\012\054\160\055\u026c\102\164\152" +
    "\162\001\001\000\002\001\001\000\004\006\u026e\001\001" +
    "\000\074\005\226\007\221\010\110\050\135\051\042\054" +
    "\107\056\014\062\015\063\053\064\116\071\067\101\064" +
    "\102\124\103\113\106\030\117\223\120\225\121\022\125" +
    "\132\126\021\127\045\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\u0272\001\001\000\004" +
    "\143\u0273\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0276\001\001\000\074\005\226\007\221\010\110" +
    "\050\135\051\042\054\107\056\014\062\015\063\053\064" +
    "\116\071\067\101\064\102\124\103\113\106\030\117\223" +
    "\120\225\121\022\125\132\126\021\127\045\134\136\136" +
    "\076\137\006\141\020\143\112\145\072\147\036\153\047" +
    "\001\001\000\010\122\u0279\123\u027b\124\u027a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\124\u027c\001\001\000\002\001\001\000\004\106\u027e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\u0282\001\001\000\074\005\226\007\221\010" +
    "\110\050\135\051\042\054\107\056\014\062\015\063\053" +
    "\064\116\071\067\101\064\102\124\103\113\106\030\117" +
    "\223\120\225\121\022\125\132\126\021\127\045\134\136" +
    "\136\076\137\006\141\020\143\112\145\072\147\036\153" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\077\u01ec\143\u01eb\001\001\000\002\001" +
    "\001\000\056\046\u028b\047\u0289\050\135\051\042\054\107" +
    "\056\014\062\u028a\063\053\064\116\071\067\101\064\102" +
    "\124\106\030\121\022\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\046\u028d" +
    "\047\u0289\050\135\051\042\054\107\056\014\062\u028a\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\056\046\u028f" +
    "\047\u0289\050\135\051\042\054\107\056\014\062\u028a\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\060\005\u0293" +
    "\010\110\016\u0291\050\135\051\042\054\107\056\014\062" +
    "\015\063\053\064\116\071\067\101\064\102\124\106\030" +
    "\121\022\134\136\136\076\137\006\141\020\143\112\145" +
    "\072\147\036\153\047\001\001\000\002\001\001\000\004" +
    "\006\u0294\001\001\000\002\001\001\000\074\005\226\007" +
    "\221\010\110\050\135\051\042\054\107\056\014\062\015" +
    "\063\053\064\116\071\067\101\064\102\124\103\113\106" +
    "\030\117\223\120\225\121\022\125\132\126\021\127\045" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\u0298\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\014\063\321" +
    "\064\116\071\320\137\u011e\143\112\001\001\000\002\001" +
    "\001\000\032\051\042\063\053\064\116\071\067\102\u0119" +
    "\106\u011c\121\u029c\137\006\141\020\143\112\147\036\153" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\050\135\051\042\054\107\056\014" +
    "\062\u02ad\063\053\064\116\071\067\074\u02aa\075\u02ab\101" +
    "\064\102\124\106\030\121\022\134\136\136\076\137\006" +
    "\141\020\143\112\145\072\147\036\153\047\001\001\000" +
    "\002\001\001\000\004\060\u02b4\001\001\000\034\051\042" +
    "\063\053\064\116\071\067\102\u0119\105\u02b2\106\u011c\121" +
    "\u0128\137\006\141\020\143\112\147\036\153\047\001\001" +
    "\000\002\001\001\000\052\050\135\051\042\054\107\056" +
    "\014\062\u02b0\063\053\064\116\071\067\101\064\102\124" +
    "\106\030\121\022\134\136\136\076\137\006\141\020\143" +
    "\112\145\072\147\036\153\047\001\001\000\034\051\042" +
    "\063\053\064\116\071\067\102\u0119\105\u02b1\106\u011c\121" +
    "\u0128\137\006\141\020\143\112\147\036\153\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\050\135\051\042\054\107\056\014\062\u02b6\063\053" +
    "\064\116\071\067\101\064\102\124\106\030\121\022\134" +
    "\136\136\076\137\006\141\020\143\112\145\072\147\036" +
    "\153\047\001\001\000\002\001\001\000\034\051\042\063" +
    "\053\064\116\071\067\102\u0119\105\u02bb\106\u011c\121\u0128" +
    "\137\006\141\020\143\112\147\036\153\047\001\001\000" +
    "\002\001\001\000\052\050\135\051\042\054\107\056\014" +
    "\062\u02b9\063\053\064\116\071\067\101\064\102\124\106" +
    "\030\121\022\134\136\136\076\137\006\141\020\143\112" +
    "\145\072\147\036\153\047\001\001\000\034\051\042\063" +
    "\053\064\116\071\067\102\u0119\105\u02ba\106\u011c\121\u0128" +
    "\137\006\141\020\143\112\147\036\153\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\051" +
    "\042\063\053\064\116\071\067\102\u0119\106\u011c\121\u02c2" +
    "\134\u02c1\137\006\141\020\143\112\147\036\153\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\050\135\051\042\054\107\056\014\062\u02c4\063" +
    "\053\064\116\071\067\101\064\102\124\106\030\121\022" +
    "\134\136\136\076\137\006\141\020\143\112\145\072\147" +
    "\036\153\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u02c8\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\035\u02ca\036\u0121\050\u0126\051\042\054\107" +
    "\056\014\062\u0125\063\053\064\116\071\067\101\064\102" +
    "\124\106\030\121\u0122\134\136\136\076\137\006\141\020" +
    "\143\112\145\072\147\036\153\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ASTPHP5Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ASTPHP5Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ASTPHP5Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	protected final static Integer PUBLIC = new Integer(BodyDeclaration.Modifier.PUBLIC);
	protected final static Integer PRIVATE = new Integer(BodyDeclaration.Modifier.PRIVATE);
	protected final static Integer PROTECTED = new Integer(BodyDeclaration.Modifier.PROTECTED);
	protected final static Integer ABSTRACT = new Integer(BodyDeclaration.Modifier.ABSTRACT);
	protected final static Integer FINAL = new Integer(BodyDeclaration.Modifier.FINAL);
	protected final static Integer STATIC = new Integer(BodyDeclaration.Modifier.STATIC);
	
        private ErrorStrategy defaultStrategy = new DefaultErrorStrategy();;
        private ErrorStrategy errorStrategy = defaultStrategy;

        private ParserErrorHandler errorHandler = null;

        public void setErrorHandler (ParserErrorHandler handler) {
            this.errorHandler = handler;
        }

        public ParserErrorHandler getErrorHandler () {
            return this.errorHandler;
        }

	/*AST ast;
  
	public final void setAST (AST ast) {
		this.ast = ast;
	}*/	

	public Dispatch createDispatch(VariableBase dispatcher, VariableBase property) {
		Dispatch dispatch = null;
		if (property instanceof Variable) {
			dispatch = new FieldAccess(dispatcher.getStartOffset(), property.getEndOffset(), /*ast,*/ dispatcher, (Variable)property);
		} else if (property instanceof FunctionInvocation) {
			dispatch = new MethodInvocation(dispatcher.getStartOffset(), property.getEndOffset(), /*ast,*/ dispatcher, (FunctionInvocation)property);
		} else {
			throw new IllegalArgumentException();
		}
		return dispatch;
	}

    interface ErrorStrategy {
        public boolean errorRecovery(boolean debug) throws Exception;
    }

    class DefaultErrorStrategy implements ErrorStrategy {

        public boolean errorRecovery(boolean debug) throws Exception {
            return ASTPHP5Parser.super.error_recovery(debug);
        }
    }

    /**
     * Attempt to recover from a syntax error.  This returns false if recovery fails,
     * true if it succeeds.
     * @param debug should we produce debugging messages as we parse.
     */
    protected boolean error_recovery(boolean debug) throws java.lang.Exception {
        return errorStrategy.errorRecovery(debug);
    }

    /**
     * Report a non fatal error (or warning).  This method takes a message
     * string and an additional object (to be used by specializations implemented in subclasses).
     * The super class prints the message to System.err.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */
    public void report_error(String message, Object info) {
		 System.out.print("report_eror"  + message);
  		/* if (info instanceof Symbol)
			if (((Symbol)info).left != -1)
				System.err.println(" at character " + ((Symbol)info).left + " of input");
			else System.err.println("");
	     else 
	   		System.err.println("");*/
    }	

    /**
     * This method is called when a syntax error has been detected and recovery is about to be invoked.
     * The super class just emit a "Syntax error" error message.
     * @param cur_token the current lookahead Symbol.
     */
    public void syntax_error(java_cup.runtime.Symbol cur_token) {
        java_cup.runtime.Symbol symbol = (java_cup.runtime.Symbol)stack.peek();
        int state = symbol.parse_state;
        short[] rowOfProbe = action_tab[state];
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.SYNTAX_ERROR, rowOfProbe, cur_token, symbol);
        }
     }

     /**
     * Report a fatal error.  This method takes a message string and an additional object
     * (to be used by specializations implemented in subclasses).
     * The super class reports the error then throws an exception.
     * @param message an error message.
     * @param info    an extra object reserved for use by specialized subclasses.
     */

    public void report_fatal_error(String message, Object info) throws Exception {
        if (errorHandler != null) {
            errorHandler.handleError(ParserErrorHandler.Type.FATAL_PARSER_ERROR, null, cur_token, null);
        }
    }

    protected int error_sync_size() {
        return 1;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ASTPHP5Parser$actions {
  private final ASTPHP5Parser parser;

  /** Constructor */
  CUP$ASTPHP5Parser$actions(ASTPHP5Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ASTPHP5Parser$do_action(
    int                        CUP$ASTPHP5Parser$act_num,
    java_cup.runtime.lr_parser CUP$ASTPHP5Parser$parser,
    java.util.Stack            CUP$ASTPHP5Parser$stack,
    int                        CUP$ASTPHP5Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ASTPHP5Parser$result;

      /* select the action based on the action number */
      switch (CUP$ASTPHP5Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // string_st ::= T_DEFINE 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // string_st ::= T_STRING 
            {
              String RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = value; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("string_st",64, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // tracked_variable ::= T_VARIABLE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, /*parser.ast,*/ varName); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("tracked_variable",97, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // class_constant ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier name = new Identifier(varNameleft, varNameright, /*parser.ast,*/ varName);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, /*parser.ast,*/ className, name); 
	RESULT = constant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant",99, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // isset_variables ::= isset_variables T_COMMA variable 
            {
              List RESULT =null;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	varList.add(var);
	RESULT = varList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variables",96, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // isset_variables ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("isset_variables",96, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // internal_functions_in_yacc ::= T_REQUIRE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, /*parser.ast,*/ expr, Include.Type.REQUIRE_ONCE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // internal_functions_in_yacc ::= T_REQUIRE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, /*parser.ast,*/ expr, Include.Type.REQUIRE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // internal_functions_in_yacc ::= T_EVAL T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, /*parser.ast,*/ "eval");
	FunctionName name = new FunctionName(startleft, startright, /*parser.ast,*/ id);
	LinkedList exprList = new LinkedList();
	exprList.add(expr);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, /*parser.ast,*/ name, exprList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // internal_functions_in_yacc ::= T_INCLUDE_ONCE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, /*parser.ast,*/ expr, Include.Type.INCLUDE_ONCE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // internal_functions_in_yacc ::= T_INCLUDE expr 
            {
              Expression RESULT =null;
		int includeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int includeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String include = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Include result = new Include(includeleft, exprright, /*parser.ast,*/ expr, Include.Type.INCLUDE);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // internal_functions_in_yacc ::= T_EMPTY T_OPEN_PARENTHESE variable T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, /*parser.ast,*/ "empty");
	FunctionName name = new FunctionName(startleft, startright, /*parser.ast,*/ id);
	LinkedList varList = new LinkedList();
	varList.add(var);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, /*parser.ast,*/ name, varList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // internal_functions_in_yacc ::= T_ISSET T_OPEN_PARENTHESE isset_variables T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, /*parser.ast,*/ "isset");
	FunctionName name = new FunctionName(startleft, startright, /*parser.ast,*/ id);
	FunctionInvocation result = new FunctionInvocation(startleft, endright, /*parser.ast,*/ name, varList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("internal_functions_in_yacc",63, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // encaps_var_offset ::= tracked_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // encaps_var_offset ::= T_NUM_STRING 
            {
              Expression RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar scalar = new Scalar(numleft,numright, /*parser.ast,*/ num, Scalar.Type.REAL);
	RESULT = scalar;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // encaps_var_offset ::= string_st 
            {
              Expression RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier id = new Identifier(stringleft, stringright, /*parser.ast,*/ string);
	RESULT = id;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var_offset",62, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // encaps_var ::= T_CURLY_OPEN_WITH_DOLAR variable T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, endright, /*parser.ast,*/ var);
	RESULT = ref;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT expr T_CLOSE_RECT T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable var = new Variable(varNameleft, varNameright, /*parser.ast,*/ varName);
	Variable indexedVar = new ArrayAccess(startleft, endright, /*parser.ast,*/ var, index, ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = indexedVar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // encaps_var ::= T_DOLLAR_OPEN_CURLY_BRACES expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, /*parser.ast,*/ expr);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // encaps_var ::= tracked_variable T_OBJECT_OPERATOR string_st 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable property = new Variable(stringleft, stringright, /*parser.ast,*/ string);
	Dispatch dispatch = parser.createDispatch(var, property);
	RESULT = dispatch;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // encaps_var ::= tracked_variable T_OPEN_RECT encaps_var_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, /*parser.ast,*/ varName, index, ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // encaps_var ::= tracked_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_var",61, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // encaps_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // encaps_list ::= encaps_list T_ENCAPSED_AND_WHITESPACE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int stringleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar scalar = new Scalar(stringleft, stringright, /*parser.ast,*/ string, string == null ? Scalar.Type.UNKNOWN : Scalar.Type.STRING);
	list.add(scalar);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // encaps_list ::= encaps_list encaps_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("encaps_list",60, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // non_empty_array_pair_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference ref = new Reference(startleft, varright, /*parser.ast,*/ var);
	ArrayElement element = new ArrayElement(startleft, varright, /*parser.ast,*/ ref);	
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	Reference value = new Reference(startleft, varright, /*parser.ast,*/ var);
	ArrayElement element = new ArrayElement(keyleft, varright, /*parser.ast,*/ key, value);	
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Reference ref = new Reference(startleft, varright, /*parser.ast,*/ var);
	ArrayElement element = new ArrayElement(startleft, varright, /*parser.ast,*/ ref);	
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_REFERENCE w_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Reference value = new Reference(startleft, varright, /*parser.ast,*/ var);
	ArrayElement element = new ArrayElement(keyleft, varright, /*parser.ast,*/ key, value);	
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // non_empty_array_pair_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(exprleft, exprright, /*parser.ast,*/ expr);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // non_empty_array_pair_list ::= expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, /*parser.ast,*/ key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(exprleft, exprright, /*parser.ast,*/ expr);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // non_empty_array_pair_list ::= non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, /*parser.ast,*/ key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_array_pair_list",59, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // array_pair_list ::= non_empty_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("array_pair_list",58, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // assignment_list_element ::= 
            {
              VariableBase RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // assignment_list_element ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, endright, /*parser.ast,*/ varList);
	RESULT = vars;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // assignment_list_element ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list_element",57, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // assignment_list ::= assignment_list_element 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List listElements = new LinkedList();
	if (var != null) {
		listElements.add(var);	
	}
	RESULT = listElements;
	;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // assignment_list ::= assignment_list T_COMMA assignment_list_element 
            {
              List RESULT =null;
		int listElementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listElementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List listElements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int elementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int elementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase element = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	if (element != null) {
		listElements.add(element);
	}
	RESULT = listElements;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("assignment_list",56, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // simple_indirect_reference ::= simple_indirect_reference T_DOLLAR 
            {
              Integer RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		
	RESULT = new Integer(1 + ref.intValue());

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // simple_indirect_reference ::= T_DOLLAR 
            {
              Integer RESULT =null;
		
	RESULT = new Integer(1);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("simple_indirect_reference",55, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // variable_name ::= T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = new ReflectionVariable(startleft, endright, /*parser.ast,*/ expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // variable_name ::= string_st 
            {
              VariableBase RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = new Variable(varNameleft, varNameright, /*parser.ast,*/ varName); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_name",54, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // object_dim_list ::= variable_name 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // object_dim_list ::= object_dim_list T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, /*parser.ast,*/ var, index, ArrayAccess.Type.VARIABLE_HASHTABLE);
	RESULT = varArray;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // object_dim_list ::= object_dim_list T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable varArray = new ArrayAccess(varleft, endright, /*parser.ast,*/ var, index, ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = varArray;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_dim_list",53, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // object_property ::= variable_without_objects 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_property",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // object_property ::= object_dim_list 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("object_property",52, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // dim_offset ::= expr 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = expr; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // dim_offset ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dim_offset",51, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // compound_variable ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, /*parser.ast,*/ expr);
	RESULT = var;	 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // compound_variable ::= tracked_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("compound_variable",50, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // reference_variable ::= compound_variable 
            {
              Variable RESULT =null;
		int comp_varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int comp_varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable comp_var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = comp_var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // reference_variable ::= reference_variable T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, /*parser.ast,*/ varName, index, ArrayAccess.Type.VARIABLE_HASHTABLE);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // reference_variable ::= reference_variable T_OPEN_RECT dim_offset T_CLOSE_RECT 
            {
              Variable RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable varName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression index = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable var = new ArrayAccess(varNameleft, endright, /*parser.ast,*/ varName, index, ArrayAccess.Type.VARIABLE_ARRAY);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("reference_variable",49, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // base_variable ::= static_member 
            {
              VariableBase RESULT =null;
		int staticFieldAccessleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int staticFieldAccessright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase staticFieldAccess = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = staticFieldAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",101, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // base_variable ::= simple_indirect_reference reference_variable 
            {
              VariableBase RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	VariableBase finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, /*parser.ast,*/ finalVar);				
	}
	RESULT = finalVar;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",101, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // base_variable ::= reference_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable",101, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // base_variable_with_function_calls ::= function_call 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",105, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // base_variable_with_function_calls ::= base_variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("base_variable_with_function_calls",105, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // static_member ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	StaticFieldAccess staticFieldAccess = new StaticFieldAccess(classNameleft, varright, /*parser.ast,*/ className, var);
	RESULT = staticFieldAccess;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_member",95, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // variable_without_objects ::= simple_indirect_reference reference_variable 
            {
              Variable RESULT =null;
		int ref_countleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int ref_countright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Integer ref_count = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	// the ref_count counts the number of reflection (DOLLAR sign) so now we should 
	// accomulate the dolars into reflection variables
	Variable finalVar = var;
	for (int i=0; i<ref_count.intValue(); i++) {
		finalVar = new ReflectionVariable(ref_countright - i - 1, varright, /*parser.ast,*/ finalVar);				
	}
	RESULT = finalVar;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",93, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // variable_without_objects ::= reference_variable 
            {
              Variable RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_without_objects",93, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // method_or_not ::= 
            {
              List RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_or_not",75, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // method_or_not ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		
	RESULT = paramsList;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_or_not",75, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // variable_property ::= T_OBJECT_OPERATOR object_property method_or_not 
            {
              VariableBase RESULT =null;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	VariableBase result = null;
	if (paramsList == null) {
		result = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, /*parser.ast,*/ memberProperty);
		result = new FunctionInvocation(memberPropertyleft, paramsListright, /*parser.ast,*/ functionName, paramsList);
	}
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_property",94, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_properties",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // variable_properties ::= variable_properties variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int variablePropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int variablePropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase variableProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	variables.add(variableProperty);
	RESULT = variables;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_properties",76, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // variable ::= base_variable_with_function_calls 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = var; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable",79, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // variable ::= base_variable_with_function_calls T_OBJECT_OPERATOR object_property method_or_not variable_properties 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int memberPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int memberPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase memberProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	// get the last property 
	VariableBase firstVarProperty = null;
	if (paramsList == null) {
		firstVarProperty = memberProperty;
	} else {
		FunctionName functionName = new FunctionName(memberPropertyleft, memberPropertyright, /*parser.ast,*/ memberProperty);
		firstVarProperty = new FunctionInvocation(memberPropertyleft, paramsListright, /*parser.ast,*/ functionName, paramsList);
	}

	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	RESULT = dispatch;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable",79, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // rw_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("rw_variable",92, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // w_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("w_variable",67, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // r_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("r_variable",90, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // expr ::= expr_without_variable 
            {
              Expression RESULT =null;
		int ewvleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ewvright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ewv = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = ewv; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // expr ::= r_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr",48, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // non_empty_static_array_pair_list ::= static_scalar 
            {
              List RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(valueleft, valueright, /*parser.ast,*/ value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // non_empty_static_array_pair_list ::= static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	ArrayElement element = new ArrayElement(keyleft, valueright, /*parser.ast,*/ key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(valueleft, valueright, /*parser.ast,*/ value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // non_empty_static_array_pair_list ::= non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ArrayElement element = new ArrayElement(keyleft, valueright, /*parser.ast,*/ key, value);
	list.add(element);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_static_array_pair_list",47, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // possible_comma ::= T_COMMA 
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // possible_comma ::= 
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("possible_comma",46, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // static_array_pair_list ::= non_empty_static_array_pair_list possible_comma 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // static_array_pair_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_array_pair_list",45, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // scalar ::= T_START_HEREDOC encaps_list T_END_HEREDOC 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Quote hereDoc = new Quote(startleft, endright, /*parser.ast,*/ list, Quote.Type.HEREDOC);
	RESULT = hereDoc;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // scalar ::= T_QUATE encaps_list T_QUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Quote quote = new Quote(startleft, endright, /*parser.ast,*/ list, Quote.Type.QUOTE);
	RESULT = quote;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // scalar ::= class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // scalar ::= T_STRING_VARNAME 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	// TODO: check if this is a scalar
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // scalar ::= string_st 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("scalar",44, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // static_class_constant ::= T_STRING T_PAAMAYIM_NEKUDOTAYIM T_STRING 
            {
              StaticConstantAccess RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier vname = new Identifier(varNameleft, varNameright, /*parser.ast,*/ varName);
	Identifier cname = new Identifier(classNameleft, classNameright, /*parser.ast,*/ className);
	StaticConstantAccess constant = new StaticConstantAccess(classNameleft, varNameright, /*parser.ast,*/ cname, vname); 
	RESULT = constant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_class_constant",104, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // static_scalar ::= static_class_constant 
            {
              Expression RESULT =null;
		int classConstantleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classConstantright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		StaticConstantAccess classConstant = (StaticConstantAccess)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = classConstant;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // static_scalar ::= T_ARRAY T_OPEN_PARENTHESE static_array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ArrayCreation array = new ArrayCreation(startleft, endright, /*parser.ast,*/ list);
	RESULT = array;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // static_scalar ::= T_MINUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, /*parser.ast,*/ expr, UnaryOperation.Operator.MINUS);
	RESULT = op;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // static_scalar ::= T_PLUS static_scalar 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	UnaryOperation op = new UnaryOperation(startleft, exprright, /*parser.ast,*/ expr, UnaryOperation.Operator.PLUS);
	RESULT = op;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // static_scalar ::= string_st 
            {
              Expression RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(strleft, strright, /*parser.ast,*/ str, Scalar.Type.STRING);
	RESULT = s;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // static_scalar ::= common_scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Scalar scalar = (Scalar)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = scalar;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_scalar",43, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // common_scalar ::= T_START_NOWDOC T_ENCAPSED_AND_WHITESPACE T_END_NOWDOC 
            {
              Scalar RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
        Scalar s = new Scalar(startleft, endright, scalar, Scalar.Type.STRING);
        RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // common_scalar ::= T_FUNC_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ "__FUNCTION__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // common_scalar ::= T_METHOD_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ "__METHOD__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // common_scalar ::= T_CLASS_C 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ "__CLASS__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // common_scalar ::= T_FILE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ "__FILE__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // common_scalar ::= T_LINE 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object scalar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ "__LINE__", Scalar.Type.SYSTEM);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // common_scalar ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // common_scalar ::= T_DNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ scalar, Scalar.Type.REAL);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // common_scalar ::= T_LNUMBER 
            {
              Scalar RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ scalar, Scalar.Type.INT);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("common_scalar",42, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ctor_arguments ::= T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ctor_arguments ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("ctor_arguments",41, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // exit_expr ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		
	RESULT = expr;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // exit_expr ::= T_OPEN_PARENTHESE T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // exit_expr ::= 
            {
              Expression RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("exit_expr",40, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // dynamic_class_name_variable_property ::= T_OBJECT_OPERATOR object_property 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_property",103, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // dynamic_class_name_variable_properties ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",102, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // dynamic_class_name_variable_properties ::= dynamic_class_name_variable_properties dynamic_class_name_variable_property 
            {
              List RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List variables = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	variables.add(var);
	RESULT = variables;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_variable_properties",102, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // dynamic_class_name_reference ::= base_variable 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	 ClassName name = new ClassName(varleft, varright, /*parser.ast,*/ var);
	 RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",100, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // dynamic_class_name_reference ::= base_variable T_OBJECT_OPERATOR object_property dynamic_class_name_variable_properties 
            {
              ClassName RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int firstVarPropertyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int firstVarPropertyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase firstVarProperty = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int propertyListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int propertyListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List propertyList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	// then get the aggregated list of properties (->...->...->...)
	LinkedList list = (LinkedList) propertyList;
	list.addFirst(firstVarProperty);
	
	// now create the dispatch(es) nodes 
	Dispatch dispatch = null;
	VariableBase dispatcher = var;
	Iterator listIt = list.iterator();
	while (listIt.hasNext()) {
		VariableBase property = (VariableBase)listIt.next();
		dispatch = parser.createDispatch(dispatcher, property);
		dispatcher = dispatch;
	}	
	
	// create class name from the dispatch
	ClassName name = new ClassName(varleft, propertyListright, /*parser.ast,*/ dispatch);
	RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("dynamic_class_name_reference",100, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // class_name_reference ::= dynamic_class_name_reference 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_reference",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // class_name_reference ::= T_STRING 
            {
              ClassName RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, /*parser.ast,*/ className);
	RESULT = new ClassName(classNameleft, classNameright, /*parser.ast,*/ name);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_name_reference",98, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // fully_qualified_class_name ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier name = new Identifier(classNameleft, classNameright, /*parser.ast,*/ className);
	RESULT = name;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("fully_qualified_class_name",68, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // function_call ::= variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, /*parser.ast,*/ reflectionName); 
	RESULT = new FunctionInvocation(reflectionNameleft, endright, /*parser.ast,*/ functionName, parameters); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reflectionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reflectionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Variable reflectionName = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	FunctionName functionName = new FunctionName(reflectionNameleft, reflectionNameright, /*parser.ast,*/ reflectionName);
	FunctionInvocation functionInvocation = new FunctionInvocation(reflectionNameleft, endright, /*parser.ast,*/ functionName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, /*parser.ast,*/ className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // function_call ::= fully_qualified_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, /*parser.ast,*/ functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, /*parser.ast,*/ name);
	FunctionInvocation functionInvocation = new FunctionInvocation(functionNameleft, endright, /*parser.ast,*/ fName, parameters); 
	StaticMethodInvocation staticMethodInvocation = new StaticMethodInvocation(classNameleft, endright, /*parser.ast,*/ className, functionInvocation); 
	RESULT = staticMethodInvocation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // function_call ::= string_st T_OPEN_PARENTHESE function_call_parameter_list T_CLOSE_PARENTHESE 
            {
              VariableBase RESULT =null;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int parametersleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int parametersright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List parameters = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	Identifier name = new Identifier(functionNameleft, functionNameright, /*parser.ast,*/ functionName);
	FunctionName fName = new FunctionName(functionNameleft, functionNameright, /*parser.ast,*/ name);
	RESULT = new FunctionInvocation(functionNameleft, endright, /*parser.ast,*/ fName, parameters); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call",39, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // expr_without_variable ::= T_PRINT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, /*parser.ast,*/ "print");
	FunctionName name = new FunctionName(startleft, startright, /*parser.ast,*/ id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, /*parser.ast,*/ name, expList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // expr_without_variable ::= T_BACKQUATE encaps_list T_BACKQUATE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	BackTickExpression backTickExpression = new BackTickExpression(startleft, endright, /*parser.ast,*/ list);
	RESULT = backTickExpression;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // expr_without_variable ::= T_ARRAY T_OPEN_PARENTHESE array_pair_list T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Expression expr = new ArrayCreation(startleft, endright, /*parser.ast,*/ list);
	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // expr_without_variable ::= scalar 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = scalar; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // expr_without_variable ::= T_AT expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	IgnoreError ignoreError = new IgnoreError(startleft, exprright, /*parser.ast,*/ expr);
	RESULT = ignoreError;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // expr_without_variable ::= T_EXIT exit_expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List expList = new LinkedList();
	if (expr != null) {
		expList.add(expr);
	}
	Identifier id = new Identifier(startleft, startright, /*parser.ast,*/ start);
	FunctionName name = new FunctionName(startleft, startright, /*parser.ast,*/ id);
	FunctionInvocation result = new FunctionInvocation(startleft, exprright, /*parser.ast,*/ name, expList);
	RESULT = result;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // expr_without_variable ::= T_UNSET_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, /*parser.ast,*/ expr , CastExpression.Type.UNSET); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // expr_without_variable ::= T_BOOL_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, /*parser.ast,*/ expr , CastExpression.Type.BOOL); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // expr_without_variable ::= T_OBJECT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, /*parser.ast,*/ expr , CastExpression.Type.OBJECT); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // expr_without_variable ::= T_ARRAY_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, /*parser.ast,*/ expr , CastExpression.Type.ARRAY); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // expr_without_variable ::= T_STRING_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, /*parser.ast,*/ expr , CastExpression.Type.STRING); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // expr_without_variable ::= T_DOUBLE_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, /*parser.ast,*/ expr , CastExpression.Type.REAL); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // expr_without_variable ::= T_INT_CAST expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new CastExpression(tokenleft, exprright, /*parser.ast,*/ expr , CastExpression.Type.INT); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // expr_without_variable ::= internal_functions_in_yacc 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = expr;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // expr_without_variable ::= expr T_QUESTION_MARK expr T_NEKUDOTAIM expr 
            {
              Expression RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int ifTrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int ifTrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression ifTrue = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int ifFalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ifFalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression ifFalse = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new ConditionalExpression(conditionleft, ifFalseright, /*parser.ast,*/ condition , ifTrue, ifFalse); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // expr_without_variable ::= T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ParenthesisExpression parenthesisExpression = new ParenthesisExpression(startleft, endright, /*parser.ast,*/ expr);
	RESULT = parenthesisExpression; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // expr_without_variable ::= expr T_INSTANCEOF class_name_reference 
            {
              Expression RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InstanceOfExpression(exprleft, classNameright, /*parser.ast,*/ expr , className); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // expr_without_variable ::= expr T_IS_GREATER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.IS_GREATER_OR_EQUAL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expr_without_variable ::= expr T_LGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.LGREATER, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // expr_without_variable ::= expr T_IS_SMALLER_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.IS_SMALLER_OR_EQUAL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // expr_without_variable ::= expr T_RGREATER expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.RGREATER, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // expr_without_variable ::= expr T_IS_NOT_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.IS_NOT_EQUAL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // expr_without_variable ::= expr T_IS_EQUAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.IS_EQUAL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // expr_without_variable ::= expr T_IS_NOT_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.IS_NOT_IDENTICAL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // expr_without_variable ::= expr T_IS_IDENTICAL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.IS_IDENTICAL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expr_without_variable ::= T_TILDA expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, /*parser.ast,*/ expr , UnaryOperation.Operator.TILDA); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expr_without_variable ::= T_NOT expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, /*parser.ast,*/ expr , UnaryOperation.Operator.NOT); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // expr_without_variable ::= T_MINUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, /*parser.ast,*/ expr , UnaryOperation.Operator.MINUS); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // expr_without_variable ::= T_PLUS expr 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new UnaryOperation(tokenleft, exprright, /*parser.ast,*/ expr , UnaryOperation.Operator.PLUS); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // expr_without_variable ::= expr T_SR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.SR, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // expr_without_variable ::= expr T_SL expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.SL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // expr_without_variable ::= expr T_PRECENT expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.MOD, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // expr_without_variable ::= expr T_DIV expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.DIV, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // expr_without_variable ::= expr T_TIMES expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.MUL, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // expr_without_variable ::= expr T_MINUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.MINUS, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // expr_without_variable ::= expr T_PLUS expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.PLUS, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // expr_without_variable ::= expr T_NEKUDA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.CONCAT, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expr_without_variable ::= expr T_KOVA expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.XOR, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // expr_without_variable ::= expr T_REFERENCE expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.AND, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // expr_without_variable ::= expr T_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.OR, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // expr_without_variable ::= expr T_LOGICAL_XOR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.STRING_XOR, expr2);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // expr_without_variable ::= expr T_LOGICAL_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.STRING_AND, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // expr_without_variable ::= expr T_LOGICAL_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.STRING_OR, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // expr_without_variable ::= expr T_BOOLEAN_AND expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.BOOL_AND, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // expr_without_variable ::= expr T_BOOLEAN_OR expr 
            {
              Expression RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr1 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr2 = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new InfixExpression(expr1left, expr2right, /*parser.ast,*/ expr1 , InfixExpression.OperatorType.BOOL_OR, expr2); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // expr_without_variable ::= T_DEC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, /*parser.ast,*/ var , PrefixExpression.Operator.DEC); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // expr_without_variable ::= rw_variable T_DEC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, /*parser.ast,*/ var , PostfixExpression.Operator.DEC); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expr_without_variable ::= T_INC rw_variable 
            {
              Expression RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new PrefixExpression(tokenleft, varright, /*parser.ast,*/ var , PrefixExpression.Operator.INC); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expr_without_variable ::= rw_variable T_INC 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new PostfixExpression(varleft, tokenright, /*parser.ast,*/ var , PostfixExpression.Operator.INC); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expr_without_variable ::= variable T_SR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.SR_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expr_without_variable ::= variable T_SL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.SL_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expr_without_variable ::= variable T_XOR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.XOR_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expr_without_variable ::= variable T_OR_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.OR_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expr_without_variable ::= variable T_AND_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.AND_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expr_without_variable ::= variable T_MOD_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.MOD_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expr_without_variable ::= variable T_CONCAT_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.CONCAT_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expr_without_variable ::= variable T_DIV_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 	
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.DIV_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expr_without_variable ::= variable T_MUL_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.MUL_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expr_without_variable ::= variable T_MINUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.MINUS_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expr_without_variable ::= variable T_PLUS_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var , Assignment.Type.PLUS_EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expr_without_variable ::= T_CLONE expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	CloneExpression clone = new CloneExpression(startleft, exprright, /*parser.ast,*/ expr);
	RESULT = clone;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expr_without_variable ::= T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, /*parser.ast,*/ className, ctor);
	RESULT = classInstanceCreation;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expr_without_variable ::= variable T_EQUAL T_REFERENCE T_NEW class_name_reference ctor_arguments 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		ClassName className = (ClassName)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int ctorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int ctorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List ctor = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ClassInstanceCreation classInstanceCreation = new ClassInstanceCreation(startleft, ctorright, /*parser.ast,*/ className, ctor);
	Reference reference = new Reference(reftokenleft, ctorright, /*parser.ast,*/ classInstanceCreation);
	Assignment assignment = new Assignment(varleft, ctorright, /*parser.ast,*/ var, Assignment.Type.EQUAL, reference);
	RESULT = assignment;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expr_without_variable ::= variable T_EQUAL T_REFERENCE variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int reftokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int reftokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object reftoken = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int refvarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int refvarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase refvar = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, refvarright, /*parser.ast,*/ var, Assignment.Type.EQUAL, new Reference(reftokenleft, refvarright, /*parser.ast,*/ refvar)); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expr_without_variable ::= variable T_EQUAL expr 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new Assignment(varleft, exprright, /*parser.ast,*/ var, Assignment.Type.EQUAL, expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expr_without_variable ::= T_LIST T_OPEN_PARENTHESE assignment_list T_CLOSE_PARENTHESE T_EQUAL expr 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List varList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ListVariable vars = new ListVariable(startleft, closeright, /*parser.ast,*/ varList);
	Assignment list = new Assignment(startleft, exprright, /*parser.ast,*/ vars, Assignment.Type.EQUAL, expr);
	RESULT = list; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("expr_without_variable",38, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // non_empty_for_expr ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // non_empty_for_expr ::= non_empty_for_expr T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_for_expr",37, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // for_expr ::= non_empty_for_expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // for_expr ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_expr",36, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // echo_expr_list ::= expr 
            {
              List RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List exprList = new LinkedList();
	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // echo_expr_list ::= echo_expr_list T_COMMA expr 
            {
              List RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	exprList.add(expr);
	RESULT = exprList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("echo_expr_list",35, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // class_constant_declaration ::= T_CONST T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	Identifier constId = new Identifier(constNameleft, constNameright, /*parser.ast,*/ constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",70, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // class_constant_declaration ::= class_constant_declaration T_COMMA T_STRING T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier constId = new Identifier(constNameleft, constNameright, /*parser.ast,*/ constName);
	list.add(new ASTNode[] {constId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_constant_declaration",70, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // class_variable_declaration ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, /*parser.ast,*/ var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // class_variable_declaration ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	Variable varId = new Variable(varleft, varright, /*parser.ast,*/ var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, /*parser.ast,*/ var);
	list.add(new ASTNode[] {varId, expr});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // class_variable_declaration ::= class_variable_declaration T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable varId = new Variable(varleft, varright, /*parser.ast,*/ var);
	list.add(new ASTNode[] {varId, null});
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_variable_declaration",69, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // member_modifier ::= T_FINAL 
            {
              Integer RESULT =null;
		
	RESULT = ASTPHP5Parser.FINAL;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // member_modifier ::= T_ABSTRACT 
            {
              Integer RESULT =null;
		
	RESULT = ASTPHP5Parser.ABSTRACT;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // member_modifier ::= T_STATIC 
            {
              Integer RESULT =null;
		
	RESULT = ASTPHP5Parser.STATIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // member_modifier ::= T_PRIVATE 
            {
              Integer RESULT =null;
		
	RESULT = ASTPHP5Parser.PRIVATE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // member_modifier ::= T_PROTECTED 
            {
              Integer RESULT =null;
		
	RESULT = ASTPHP5Parser.PROTECTED;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // member_modifier ::= T_PUBLIC 
            {
              Integer RESULT =null;
		
	RESULT = ASTPHP5Parser.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("member_modifier",74, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // non_empty_member_modifiers ::= non_empty_member_modifiers member_modifier 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(modifier);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // non_empty_member_modifiers ::= member_modifier 
            {
              List RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(modifier);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_member_modifiers",73, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // method_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // method_modifiers ::= 
            {
              Integer RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_modifiers",71, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variable_modifiers ::= T_VAR 
            {
              Integer RESULT =null;
		
	RESULT = ASTPHP5Parser.PUBLIC;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",91, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // variable_modifiers ::= non_empty_member_modifiers 
            {
              Integer RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	int result = 0;
	for (Iterator it = list.iterator(); it.hasNext() ; ) {
		Integer modifier = (Integer)it.next();
		result |= modifier.intValue();
	}
	RESULT = new Integer(result);

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("variable_modifiers",91, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // method_body ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, /*parser.ast,*/ statementList);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_body",72, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // method_body ::= T_SEMICOLON 
            {
              Block RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("method_body",72, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // class_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		


              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // class_statement ::= method_modifiers T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE method_body 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block body = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	int methodStart = modifier == null ? startleft : modifierleft;
	modifier = modifier == null ? ASTPHP5Parser.PUBLIC : modifier;
	Identifier functionId = new Identifier(functionNameleft, functionNameright, /*parser.ast,*/ functionName);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, bodyright, /*parser.ast,*/ functionId, paramList, body, isReference.booleanValue());
	MethodDeclaration methodDeclaration = new MethodDeclaration(methodStart, bodyright, /*parser.ast,*/ modifier.intValue(), functionDeclaration, true);
	RESULT = methodDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // class_statement ::= class_constant_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ClassConstantDeclaration classConstantDeclaration = new ClassConstantDeclaration(listleft, endright, /*parser.ast,*/ list);
	RESULT = classConstantDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // class_statement ::= variable_modifiers class_variable_declaration T_SEMICOLON 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Integer modifier = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List decList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	FieldsDeclaration fieldsDeclaration = new FieldsDeclaration(modifierleft, endright, /*parser.ast,*/ modifier.intValue(), decList);
	RESULT = fieldsDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement",33, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // class_statement_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // class_statement_list ::= class_statement_list class_statement 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int classStatementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classStatementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement classStatement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(classStatement);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_statement_list",32, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // static_var_list ::= T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var); 
	Assignment assignment = new Assignment(varleft, exprright, /*parser.ast,*/ v, Assignment.Type.EQUAL, expr); 
	List list = new LinkedList();
	list.add(assignment);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // static_var_list ::= T_VARIABLE 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var); 
	List list = new LinkedList();
	list.add(v);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // static_var_list ::= static_var_list T_COMMA T_VARIABLE T_EQUAL static_scalar 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var); 
	Assignment assignment = new Assignment(varleft, exprright, /*parser.ast,*/ v, Assignment.Type.EQUAL, expr); 
	list.add(assignment);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // static_var_list ::= static_var_list T_COMMA T_VARIABLE 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var); 
	list.add(v);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("static_var_list",31, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // global_var ::= T_DOLLAR T_CURLY_OPEN expr T_CURLY_CLOSE 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression varName = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ReflectionVariable var = new ReflectionVariable(startleft, endright, /*parser.ast,*/ varName);
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // global_var ::= T_DOLLAR r_variable 
            {
              VariableBase RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ReflectionVariable ref = new ReflectionVariable(startleft, varright, /*parser.ast,*/ var);
	RESULT = ref;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // global_var ::= T_VARIABLE 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Variable variable = new Variable(varleft, varright, /*parser.ast,*/ var);
	RESULT = variable;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var",30, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // global_var_list ::= global_var 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // global_var_list ::= global_var_list T_COMMA global_var 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("global_var_list",29, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA T_REFERENCE w_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Expression var_ref = new Reference(startleft, varright, /*parser.ast,*/ var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // non_empty_function_call_parameter_list ::= non_empty_function_call_parameter_list T_COMMA expr_without_variable 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // non_empty_function_call_parameter_list ::= T_REFERENCE w_variable 
            {
              List RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	Expression var_ref = new Reference(startleft, varright, /*parser.ast,*/ var);
	paramsList.add(var_ref);	
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // non_empty_function_call_parameter_list ::= variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // non_empty_function_call_parameter_list ::= expr_without_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List paramsList = new LinkedList();
	paramsList.add(var);	
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_function_call_parameter_list",28, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // function_call_parameter_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList();

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // function_call_parameter_list ::= non_empty_function_call_parameter_list 
            {
              List RESULT =null;
		int paramsListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int paramsListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List paramsList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = paramsList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_call_parameter_list",27, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // optional_class_type ::= T_ARRAY 
            {
              Identifier RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object array = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier classId = new Identifier(arrayleft, arrayright, /*parser.ast,*/ "array");
	RESULT = classId;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_class_type",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // optional_class_type ::= T_STRING 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, /*parser.ast,*/ className);
	RESULT = classId;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_class_type",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // optional_class_type ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("optional_class_type",89, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var);
	Reference ref_var = new Reference (refleft, varright, /*parser.ast,*/ v);
	FormalParameter parameter = new FormalParameter(start, scalarright, /*parser.ast,*/ classType, ref_var, scalar);
	RESULT = parameter;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter ::= optional_class_type T_VARIABLE T_EQUAL static_scalar 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression scalar = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var);
	FormalParameter parameter = new FormalParameter(start, scalarright, /*parser.ast,*/ classType, v, scalar);
	RESULT = parameter;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter ::= optional_class_type T_REFERENCE T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object ref = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	int start = classType == null ? refleft : classTypeleft;
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var);
	Reference ref_var = new Reference (refleft, varright, /*parser.ast,*/ v);
	FormalParameter parameter = new FormalParameter(start, varright, /*parser.ast,*/ classType, ref_var);
	RESULT = parameter;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameter ::= optional_class_type T_VARIABLE 
            {
              FormalParameter RESULT =null;
		int classTypeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int classTyperight = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Identifier classType = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	int start = classType == null ? varleft : classTypeleft;
	Variable v = new Variable(varleft, varright, /*parser.ast,*/ var);
	FormalParameter parameter = new FormalParameter(start, varright, /*parser.ast,*/ classType, v);
	RESULT = parameter;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter",26, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // non_empty_parameter_list ::= non_empty_parameter_list T_COMMA parameter 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(parameter);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // non_empty_parameter_list ::= parameter 
            {
              List RESULT =null;
		int parameterleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int parameterright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FormalParameter parameter = (FormalParameter)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(parameter);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_parameter_list",25, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameter_list ::= non_empty_parameter_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("parameter_list",24, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // new_else_single ::= T_ELSE T_NEKUDOTAIM inner_statement_list 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block block = new Block(colonleft, statementListright, /*parser.ast,*/ statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // new_else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_else_single",23, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // else_single ::= T_ELSE statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_single ::= 
            {
              Statement RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("else_single",22, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // new_elseif_list ::= new_elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
			
	Block block = new Block(colonleft, statementListright, /*parser.ast,*/ statementList, false);
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(block);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // new_elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("new_elseif_list",21, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // elseif_list ::= elseif_list T_ELSEIF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement 
            {
              List[] RESULT =null;
		int elseifListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int elseifListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		List[] elseifList = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
			
	((LinkedList)elseifList[0]).addFirst(condition);
	((LinkedList)elseifList[1]).addFirst(iftrue);
	((LinkedList)elseifList[2]).addFirst(new Integer(tokenleft));

	RESULT = elseifList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // elseif_list ::= 
            {
              List[] RESULT =null;
		
	List listConditions = new LinkedList();
	List listStatements = new LinkedList();
	List listTokens = new LinkedList();
	
	List[] returnList = new List[] { listConditions, listStatements, listTokens };
	
	RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("elseif_list",20, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // while_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDWHILE T_SEMICOLON 
            {
              Statement RESULT =null;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		
	Block block = new Block(colonleft, statementListright, /*parser.ast,*/ statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // while_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("while_statement",19, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // case_separator ::= T_SEMICOLON 
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // case_separator ::= T_NEKUDOTAIM 
            {
              Object RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_separator",18, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // case_list ::= case_list T_DEFAULT case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, /*parser.ast,*/ null, statements, true);
	if (caseList == null) {
		caseList = new LinkedList(); // of SwitchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // case_list ::= case_list T_CASE expr case_separator inner_statement_list 
            {
              List RESULT =null;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	SwitchCase switchCase = new SwitchCase(tokenleft, statementsright, /*parser.ast,*/ expr, statements, false);
	if (caseList == null) {
		caseList = new LinkedList(); // of switchCase
	}
	caseList.add(switchCase);
	RESULT = caseList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // case_list ::= 
            {
              List RESULT =null;
		
	RESULT = new LinkedList(); // of SwitchCase

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("case_list",17, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // switch_case_list ::= T_NEKUDOTAIM T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, /*parser.ast,*/ caseList, false);	
	RESULT = block; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // switch_case_list ::= T_NEKUDOTAIM case_list T_ENDSWITCH T_SEMICOLON 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, /*parser.ast,*/ caseList, false);	
	RESULT = block; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // switch_case_list ::= T_CURLY_OPEN T_SEMICOLON case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, /*parser.ast,*/ caseList);	
	RESULT = block; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // switch_case_list ::= T_CURLY_OPEN case_list T_CURLY_CLOSE 
            {
              Block RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int caseListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int caseListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List caseList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block block = new Block(startleft, endright, /*parser.ast,*/ caseList);	
	RESULT = block; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("switch_case_list",16, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declare_list ::= declare_list T_COMMA string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int listsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier id = new Identifier(keyleft, keyright, /*parser.ast,*/ key);
	lists[0].add(id);
	lists[1].add(value);
	RESULT = lists;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declare_list ::= string_st T_EQUAL static_scalar 
            {
              List[] RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression value = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List listKeys = new LinkedList();
	List listValues = new LinkedList();
	
	Identifier id = new Identifier(keyleft, keyright, /*parser.ast,*/ key);
	listKeys.add(id);
	listValues.add(value);

	List[] returnList = new List[] { listKeys, listValues };
	RESULT = returnList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_list",15, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declare_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDDECLARE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, /*parser.ast,*/ statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declare_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("declare_statement",14, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // foreach_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOREACH T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, /*parser.ast,*/ statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // foreach_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_statement",13, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_statement ::= T_NEKUDOTAIM inner_statement_list T_ENDFOR T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		
	Block block = new Block(startleft, statementListright, /*parser.ast,*/ statementList, false);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // for_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = statement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("for_statement",12, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // foreach_variable ::= T_REFERENCE variable 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	Reference reference = new Reference (startleft, varright, /*parser.ast,*/ var);
	RESULT = reference;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // foreach_variable ::= variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_variable",11, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // foreach_optional_arg ::= T_DOUBLE_ARROW foreach_variable 
            {
              Expression RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // foreach_optional_arg ::= 
            {
              Expression RESULT =null;
		 
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("foreach_optional_arg",10, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // interface_list ::= interface_list T_COMMA fully_qualified_class_name 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(className);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_list",88, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // interface_list ::= fully_qualified_class_name 
            {
              List RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(className);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_list",88, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // implements_list ::= T_IMPLEMENTS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("implements_list",87, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // implements_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("implements_list",87, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // interface_extends_list ::= T_EXTENDS interface_list 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // interface_extends_list ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_extends_list",66, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // interface_entry ::= T_INTERFACE 
            {
              Integer RESULT =null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("interface_entry",65, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // extends_from ::= T_EXTENDS fully_qualified_class_name 
            {
              Identifier RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = className;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("extends_from",86, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // extends_from ::= 
            {
              Identifier RESULT =null;
		
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("extends_from",86, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // class_entry_type ::= T_FINAL T_CLASS 
            {
              ClassDeclaration.Modifier RESULT =null;
		
	RESULT = ClassDeclaration.Modifier.FINAL;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",85, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // class_entry_type ::= T_ABSTRACT T_CLASS 
            {
              ClassDeclaration.Modifier RESULT =null;
		
	RESULT = ClassDeclaration.Modifier.ABSTRACT;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",85, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // class_entry_type ::= T_CLASS 
            {
              ClassDeclaration.Modifier RESULT =null;
		
	RESULT = ClassDeclaration.Modifier.NONE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_entry_type",85, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // unticked_class_declaration_statement ::= interface_entry T_STRING interface_extends_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Integer start = (Integer)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, /*parser.ast,*/ className);
	Block block = new Block(blockStartleft, blockEndright, /*parser.ast,*/ statementList);
	InterfaceDeclaration interfaceDeclaration = new InterfaceDeclaration(startleft ,blockEndright, /*parser.ast,*/ classId, interfaces, block);
	RESULT = interfaceDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",84, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // unticked_class_declaration_statement ::= class_entry_type T_STRING extends_from implements_list T_CURLY_OPEN class_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int modifierleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int modifierright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		ClassDeclaration.Modifier modifier = (ClassDeclaration.Modifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int superClassleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int superClassright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Identifier superClass = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int interfacesleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int interfacesright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List interfaces = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier classId = new Identifier(classNameleft, classNameright, /*parser.ast,*/ className);
	Block block = new Block(blockStartleft, blockEndright, /*parser.ast,*/ statementList);
	ClassDeclaration classDeclaration = new ClassDeclaration(modifierleft ,blockEndright, /*parser.ast,*/ modifier, classId, superClass, interfaces, block);
	RESULT = classDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_class_declaration_statement",84, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // unticked_function_declaration_statement ::= T_FUNCTION is_reference string_st T_OPEN_PARENTHESE parameter_list T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              FunctionDeclaration RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int isReferenceleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int isReferenceright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Boolean isReference = (Boolean)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int functionNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int functionNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		String functionName = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List paramList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int blockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int blockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object blockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int blockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int blockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object blockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier functionId = new Identifier(functionNameleft, functionNameright, /*parser.ast,*/ functionName);
	Block block = new Block(blockStartleft, blockEndright, /*parser.ast,*/ statementList);
	FunctionDeclaration functionDeclaration = new FunctionDeclaration(startleft, blockEndright, /*parser.ast,*/ functionId, paramList, block, isReference.booleanValue());
	RESULT = functionDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_function_declaration_statement",83, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // is_reference ::= T_REFERENCE 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.TRUE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // is_reference ::= 
            {
              Boolean RESULT =null;
		
	RESULT = Boolean.FALSE;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("is_reference",34, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // class_declaration_statement ::= unticked_class_declaration_statement 
            {
              Statement RESULT =null;
		int classDeclarationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int classDeclarationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement classDeclaration = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = classDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("class_declaration_statement",78, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_declaration_statement ::= unticked_function_declaration_statement 
            {
              FunctionDeclaration RESULT =null;
		int functionDeclarationleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int functionDeclarationright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration functionDeclaration = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = functionDeclaration;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("function_declaration_statement",77, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // use_filename ::= T_OPEN_PARENTHESE T_CONSTANT_ENCAPSED_STRING T_CLOSE_PARENTHESE 
            {
              Expression RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(startleft, endright, /*parser.ast,*/ scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // use_filename ::= T_CONSTANT_ENCAPSED_STRING 
            {
              Expression RESULT =null;
		int scalarleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int scalarright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String scalar = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Scalar s = new Scalar(scalarleft, scalarright, /*parser.ast,*/ scalar, Scalar.Type.STRING);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("use_filename",9, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unset_variable ::= variable 
            {
              VariableBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = var;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variable",8, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unset_variables ::= unset_variables T_COMMA unset_variable 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unset_variables ::= unset_variable 
            {
              List RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(var);
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unset_variables",7, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // additional_catch ::= T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name T_VARIABLE T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              CatchClause RESULT =null;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, /*parser.ast,*/ catchList);
	Variable variable = new Variable(varleft, varright, /*parser.ast,*/ var);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, /*parser.ast,*/ className, variable, catchBlock);
	RESULT = catchClause;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catch",82, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // non_empty_additional_catches ::= non_empty_additional_catches additional_catch 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	list.add(catch_statement);
	RESULT = list;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",81, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // non_empty_additional_catches ::= additional_catch 
            {
              List RESULT =null;
		int catch_statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catch_statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		CatchClause catch_statement = (CatchClause)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(catch_statement);
	RESULT = list;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("non_empty_additional_catches",81, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // additional_catches ::= 
            {
              List RESULT =null;
		
	List list = new LinkedList();
	RESULT = list;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catches",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // additional_catches ::= non_empty_additional_catches 
            {
              List RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	RESULT = list;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("additional_catches",80, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unticked_statement ::= T_VAR_COMMENT 
            {
              Statement RESULT =null;
		int varCommentleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int varCommentright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		String varComment = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	// TODO: var comment should be added as parser.ast node

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unticked_statement ::= error 
            {
              Statement RESULT =null;
		int theErrorleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int theErrorright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object theError = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ASTError error = new ASTError(theErrorleft, theErrorright/*, parser.ast*/);
	RESULT = error;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unticked_statement ::= T_THROW expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new ThrowStatement(tokenleft, endright, /*parser.ast,*/ expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unticked_statement ::= T_TRY T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE T_CATCH T_OPEN_PARENTHESE fully_qualified_class_name tracked_variable T_CLOSE_PARENTHESE T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE additional_catches 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)).value;
		int tryBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).left;
		int tryBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).right;
		Object tryBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-11)).value;
		int tryListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).left;
		int tryListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).right;
		List tryList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-10)).value;
		int tryBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int tryBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		Object tryBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int catch_wordleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int catch_wordright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Object catch_word = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Identifier className = (Identifier)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int catchBlockStartleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int catchBlockStartright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object catchBlockStart = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int catchListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int catchListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List catchList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int catchBlockEndleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int catchBlockEndright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object catchBlockEnd = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int catchesListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int catchesListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List catchesList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block tryBlock = new Block(tryBlockStartleft, tryBlockEndright, /*parser.ast,*/ tryList);
	Block catchBlock = new Block(catchBlockStartleft, catchBlockEndright, /*parser.ast,*/ catchList);
	CatchClause catchClause = new CatchClause(catch_wordleft, catchBlockEndright, /*parser.ast,*/ className, var, catchBlock);
	((LinkedList) catchesList).addFirst(catchClause);
	TryStatement tryStatement = new TryStatement(startleft, catchesListright, /*parser.ast,*/ tryBlock, catchesList);
	RESULT = tryStatement;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-12)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unticked_statement ::= T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new EmptyStatement(tokenleft, tokenright/*, parser.ast*/); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unticked_statement ::= T_DECLARE T_OPEN_PARENTHESE declare_list T_CLOSE_PARENTHESE declare_statement 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List[] lists = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	DeclareStatement declare = new DeclareStatement(startleft, statementright, /*parser.ast,*/ lists[0], lists[1], statement);
	RESULT = declare;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE expr_without_variable T_AS variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		VariableBase var = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, /*parser.ast,*/ expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, /*parser.ast,*/ expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unticked_statement ::= T_FOREACH T_OPEN_PARENTHESE variable T_AS foreach_variable foreach_optional_arg T_CLOSE_PARENTHESE foreach_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Expression var = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ForEachStatement forEachStatement = null;
	if (arg == null) {
		forEachStatement = new ForEachStatement(tokenleft, statementright, /*parser.ast,*/ expr, var, statement);
	} else {
		forEachStatement = new ForEachStatement(tokenleft, statementright, /*parser.ast,*/ expr, var, arg, statement);
	}
	RESULT = forEachStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unticked_statement ::= T_UNSET T_OPEN_PARENTHESE unset_variables T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		String start = (String)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int closeParleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int closeParright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object closePar = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Identifier id = new Identifier(startleft, startright, /*parser.ast,*/ "unset");
	FunctionName functionName = new FunctionName(startleft, startright, /*parser.ast,*/ id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, closeParright, /*parser.ast,*/ functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, /*parser.ast,*/ functionInvocation);
	RESULT = expressionStatement;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unticked_statement ::= T_USE use_filename T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	List list = new LinkedList();
	list.add(expr);
	Identifier id = new Identifier(startleft, startright, /*parser.ast,*/ "use");
	FunctionName functionName = new FunctionName(startleft, startright, /*parser.ast,*/ id);
	FunctionInvocation functionInvocation = new FunctionInvocation(startleft, exprright, /*parser.ast,*/ functionName, list);
	ExpressionStatement expressionStatement = new ExpressionStatement(startleft, endright, /*parser.ast,*/ functionInvocation);
	RESULT = expressionStatement;	

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unticked_statement ::= expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	ExpressionStatement expressionStatement = new ExpressionStatement(exprleft, endright, /*parser.ast,*/ expr);
	RESULT = expressionStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unticked_statement ::= T_INLINE_HTML 
            {
              Statement RESULT =null;
		int htmlleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int htmlright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object html = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	InLineHtml inLineHtml = new InLineHtml(htmlleft, htmlright/*, parser.ast*/);
	RESULT = inLineHtml;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unticked_statement ::= T_ECHO echo_expr_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List exprList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new EchoStatement(startleft, endright, /*parser.ast,*/ exprList); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // unticked_statement ::= T_STATIC static_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	StaticStatement s = new StaticStatement(startleft, endright, /*parser.ast,*/ list);
	RESULT = s;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // unticked_statement ::= T_GLOBAL global_var_list T_SEMICOLON 
            {
              Statement RESULT =null;
		int startleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List list = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	GlobalStatement  global = new GlobalStatement(startleft, endright, /*parser.ast,*/ list);
	RESULT = global;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // unticked_statement ::= T_RETURN variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		VariableBase expr = (VariableBase)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, /*parser.ast,*/ expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // unticked_statement ::= T_RETURN expr_without_variable T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright, /*parser.ast,*/ expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unticked_statement ::= T_RETURN T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new ReturnStatement(tokenleft, endright/*, parser.ast*/); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unticked_statement ::= T_CONTINUE expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright, /*parser.ast,*/ expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unticked_statement ::= T_CONTINUE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new ContinueStatement(tokenleft, endright/*, parser.ast*/); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unticked_statement ::= T_BREAK expr T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright, /*parser.ast,*/ expr); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unticked_statement ::= T_BREAK T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = new BreakStatement(tokenleft, endright/*, parser.ast*/); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unticked_statement ::= T_SWITCH T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE switch_case_list 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int caseBlockleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int caseBlockright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Block caseBlock = (Block)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	SwitchStatement switchStatement = new SwitchStatement(tokenleft, caseBlockright, /*parser.ast,*/ expr, caseBlock);
	RESULT = switchStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unticked_statement ::= T_FOR T_OPEN_PARENTHESE for_expr T_SEMICOLON for_expr T_SEMICOLON for_expr T_CLOSE_PARENTHESE for_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)).value;
		int initializationsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int initializationsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		List initializations = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int conditionsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List conditions = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int increasementsleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int increasementsright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		List increasements = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
				
	ForStatement forStatement = new ForStatement(tokenleft, statementright, /*parser.ast,*/ initializations, conditions, increasements, statement);			
	RESULT = forStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-8)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unticked_statement ::= T_DO statement T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	DoStatement doStatement = new DoStatement(tokenleft, endright, /*parser.ast,*/ expr, statement);			
	RESULT = doStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unticked_statement ::= T_WHILE T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE while_statement 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	WhileStatement whileStatement = new WhileStatement(tokenleft, statementright, /*parser.ast,*/ expr, statement);			
	RESULT = whileStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE T_NEKUDOTAIM inner_statement_list new_elseif_list new_else_single T_ENDIF T_SEMICOLON 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-7)).value;
		int colonleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).left;
		int colonright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).right;
		Object colon = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-5)).value;
		int ifTrueStatementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int ifTrueStatementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		List ifTrueStatementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, /*parser.ast,*/ innerCondition, trueStatement, falseStatement);
	}
	Block block = new Block(colonleft, ifTrueStatementListright, /*parser.ast,*/ ifTrueStatementList, false);
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, /*parser.ast,*/ condition, block, falseStatement);		
	
	RESULT = ifStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-9)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unticked_statement ::= T_IF T_OPEN_PARENTHESE expr T_CLOSE_PARENTHESE statement elseif_list else_single 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)).value;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).right;
		Expression condition = (Expression)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)).value;
		int iftrueleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int iftrueright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Statement iftrue = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List[] elseif = (List[])((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int iffalseleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int iffalseright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement iffalse = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Expression innerCondition = null;	
	Statement trueStatement = null;
	Statement falseStatement = iffalse;
		
	for (int i=0 ; i < elseif[0].size() ; i++) {
		innerCondition = (Expression)elseif[0].get(i);	
	 	trueStatement = (Statement)elseif[1].get(i);
	 	int start = ((Integer)elseif[2].get(i)).intValue();
		falseStatement = new IfStatement(start, iffalseright, /*parser.ast,*/ innerCondition, trueStatement, falseStatement);
	}
	IfStatement ifStatement = new IfStatement(tokenleft, iffalseright, /*parser.ast,*/ condition, iftrue, falseStatement);		
	
	RESULT = ifStatement;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-6)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unticked_statement ::= T_CURLY_OPEN inner_statement_list T_CURLY_CLOSE 
            {
              Statement RESULT =null;
		int tokenleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).left;
		int tokenright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).right;
		Object token = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)).value;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	Block block = new Block(tokenleft, endright, /*parser.ast,*/ statementList);
	RESULT = block;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("unticked_statement",6, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-2)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= unticked_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("statement",3, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inner_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_SEMICOLON 
            {
              Statement RESULT =null;
		int haltleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).left;
		int haltright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).right;
		Object halt = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)).value;
		int closeleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int closeright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Object close = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		 
	// Note: we never generate K_HALT_COMPILER
        RESULT = null;
        System.out.println("Syntax error ??????");

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-3)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // inner_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inner_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inner_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement",5, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inner_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inner_statement_list ::= inner_statement_list inner_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	// Ignore null statements
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("inner_statement_list",4, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // top_statement ::= T_HALT_COMPILER T_OPEN_PARENTHESE T_CLOSE_PARENTHESE T_OPEN_TAG T_SEMICOLON 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	// Note: we never generate T_HALT_COMPILER
	RESULT = null;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-4)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // top_statement ::= class_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // top_statement ::= function_declaration_statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		FunctionDeclaration statement = (FunctionDeclaration)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // top_statement ::= statement 
            {
              Statement RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		 
	RESULT = statement; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement",2, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // top_statement_list ::= 
            {
              List RESULT =null;
		 
	RESULT = new LinkedList(); 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // top_statement_list ::= top_statement_list top_statement 
            {
              List RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		Statement statement = (Statement)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	if(statement != null) {
		statementList.add(statement);
	}		
	RESULT = statementList;

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("top_statement_list",1, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= thestart EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)).value;
		RESULT = start_val;
              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.elementAt(CUP$ASTPHP5Parser$top-1)), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ASTPHP5Parser$parser.done_parsing();
          return CUP$ASTPHP5Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // thestart ::= top_statement_list 
            {
              Program RESULT =null;
		int statementListleft = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).left;
		int statementListright = ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()).right;
		List statementList = (List)((java_cup.runtime.Symbol) CUP$ASTPHP5Parser$stack.peek()).value;
		
	ASTPHP5Scanner phpAstLexer5 = (ASTPHP5Scanner) parser.getScanner();
	List commentList = phpAstLexer5.getCommentList();
	Program program = new Program(statementListleft, statementListright, /*parser.ast,*/ statementList, commentList);
	RESULT = program; 

              CUP$ASTPHP5Parser$result = parser.getSymbolFactory().newSymbol("thestart",0, ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ASTPHP5Parser$stack.peek()), RESULT);
            }
          return CUP$ASTPHP5Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

