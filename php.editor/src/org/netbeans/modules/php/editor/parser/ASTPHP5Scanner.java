/* The following code was generated by JFlex 1.4.1 on 8/26/08 6:23 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.LinkedList;
import java.util.List;
import org.netbeans.modules.php.editor.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import java.io.IOException;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 8/26/08 6:23 PM from the specification file
 * <tt>/space/mercurial/trunk/main/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 14;
  public static final int ST_START_NOWDOC = 8;
  public static final int ST_IN_SCRIPTING = 1;
  public static final int ST_NOWDOC = 7;
  public static final int ST_LOOKING_FOR_PROPERTY = 10;
  public static final int ST_ONE_LINE_COMMENT = 15;
  public static final int ST_END_NOWDOC = 9;
  public static final int ST_COMMENT = 13;
  public static final int ST_BACKQUOTE = 3;
  public static final int ST_DOUBLE_QUOTES = 2;
  public static final int ST_START_HEREDOC = 5;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 12;
  public static final int ST_LOOKING_FOR_VARNAME = 11;
  public static final int ST_HEREDOC = 4;
  public static final int ST_END_HEREDOC = 6;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\14\2\0\1\12\22\0\1\13\1\62\1\16\1\103"+
    "\1\15\1\66\1\67\1\102\1\53\1\55\1\64\1\4\1\72\1\47"+
    "\1\2\1\65\1\5\11\1\1\51\1\23\1\63\1\61\1\50\1\76"+
    "\1\77\1\40\1\7\1\33\1\27\1\3\1\30\1\54\1\41\1\25"+
    "\1\56\1\44\1\43\1\46\1\32\1\34\1\45\1\60\1\36\1\35"+
    "\1\26\1\31\1\52\1\42\1\6\1\37\1\17\1\73\1\20\1\74"+
    "\1\71\1\57\1\21\1\40\1\7\1\33\1\27\1\3\1\30\1\54"+
    "\1\41\1\25\1\56\1\44\1\43\1\46\1\32\1\34\1\45\1\60"+
    "\1\36\1\101\1\26\1\31\1\52\1\42\1\6\1\37\1\17\1\24"+
    "\1\70\1\100\1\75\67\17\4\22\1\17\5\22\27\17\1\22\37\17"+
    "\1\22\10\17\u0137\10\31\0\162\10\4\0\14\10\16\0\5\10\11\0"+
    "\1\10\213\0\1\10\13\0\1\10\1\0\3\10\1\0\1\10\1\0"+
    "\24\10\1\0\54\10\1\0\46\10\1\0\5\10\4\0\202\10\10\0"+
    "\105\10\1\0\46\10\2\0\2\10\6\0\20\10\41\0\46\10\2\0"+
    "\1\10\7\0\47\10\110\0\33\10\5\0\3\10\56\0\32\10\5\0"+
    "\13\10\25\0\12\11\4\0\2\10\1\0\143\10\1\0\1\10\17\0"+
    "\2\10\7\0\2\10\12\11\3\10\2\0\1\10\20\0\1\10\1\0"+
    "\36\10\35\0\3\10\60\0\46\10\13\0\1\10\u0152\0\66\10\3\0"+
    "\1\10\22\0\1\10\7\0\12\10\4\0\12\11\25\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0"+
    "\1\10\36\0\2\10\1\0\3\10\4\0\12\11\2\10\23\0\6\10"+
    "\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\37\0\4\10\1\0\1\10\7\0\12\11\2\0\3\10"+
    "\20\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\3\0\1\10\22\0\1\10\17\0\2\10\4\0\12\11"+
    "\25\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\3\0\1\10\36\0\2\10\1\0\3\10\4\0\12\11"+
    "\1\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10"+
    "\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10"+
    "\3\0\10\10\1\0\3\10\55\0\11\11\25\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\46\0\2\10\4\0\12\11"+
    "\25\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\3\0\1\10\40\0\1\10\1\0\2\10\4\0\12\11\25\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\20\10\46\0\2\10\4\0\12\11"+
    "\25\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10"+
    "\72\0\60\10\1\0\2\10\14\0\7\10\11\0\12\11\47\0\2\10"+
    "\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10"+
    "\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10"+
    "\1\0\4\10\1\0\2\10\11\0\1\10\2\0\5\10\1\0\1\10"+
    "\11\0\12\11\2\0\2\10\42\0\1\10\37\0\12\11\26\0\10\10"+
    "\1\0\42\10\35\0\4\10\164\0\42\10\1\0\5\10\1\0\2\10"+
    "\25\0\12\11\6\0\6\10\112\0\46\10\12\0\51\10\7\0\132\10"+
    "\5\0\104\10\5\0\122\10\6\0\7\10\1\0\77\10\1\0\1\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\47\10"+
    "\1\0\1\10\1\0\4\10\2\0\37\10\1\0\1\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\7\10"+
    "\1\0\27\10\1\0\37\10\1\0\1\10\1\0\4\10\2\0\7\10"+
    "\1\0\47\10\1\0\23\10\16\0\11\11\56\0\125\10\14\0\u026c\10"+
    "\2\0\10\10\12\0\32\10\5\0\113\10\25\0\15\10\1\0\4\10"+
    "\16\0\22\10\16\0\22\10\16\0\15\10\1\0\3\10\17\0\64\10"+
    "\43\0\1\10\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10"+
    "\10\0\51\10\127\0\35\10\51\0\12\11\36\10\2\0\5\10\u038b\0"+
    "\154\10\224\0\234\10\4\0\132\10\6\0\26\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\164\0\1\10\15\0\1\10\202\0\1\10\4\0"+
    "\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\4\10\1\0\3\10\1\0\7\10\3\0"+
    "\3\10\5\0\5\10\u0ebb\0\2\10\52\0\5\10\5\0\2\10\4\0"+
    "\126\10\6\0\3\10\1\0\132\10\1\0\4\10\5\0\50\10\4\0"+
    "\136\10\21\0\30\10\70\0\20\10\u0200\0\u19b6\10\112\0\u51a6\10\132\0"+
    "\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10\225\0\7\10\14\0"+
    "\5\10\5\0\1\10\1\0\12\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0"+
    "\100\10\2\0\66\10\50\0\14\10\164\0\5\10\1\0\207\10\23\0"+
    "\12\11\7\0\32\10\6\0\32\10\13\0\131\10\3\0\6\10\2\0"+
    "\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\13\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\3\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\16\6\1\16\1\17\1\20\1\6\1\21\1\6"+
    "\1\22\1\6\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\3\1\43\1\1\1\3\1\44\2\3"+
    "\1\1\2\3\1\45\1\3\2\1\3\3\2\46\1\47"+
    "\3\3\2\50\1\51\1\52\1\53\1\52\1\54\1\55"+
    "\1\56\1\5\1\7\1\56\1\57\1\60\1\61\1\62"+
    "\1\16\1\17\1\20\1\21\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\63\1\40\1\64"+
    "\1\10\1\65\2\3\3\66\2\65\1\0\1\67\1\70"+
    "\1\2\1\71\1\0\1\72\6\6\1\73\1\74\1\0"+
    "\2\6\2\0\1\75\2\0\1\76\2\0\1\77\7\6"+
    "\1\100\12\6\1\101\5\6\1\102\5\6\1\103\1\104"+
    "\1\105\1\106\1\107\1\110\1\6\12\0\2\6\1\111"+
    "\1\112\2\113\1\114\1\115\1\0\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
    "\4\0\2\75\2\131\1\132\1\133\1\131\3\0\1\75"+
    "\3\134\3\0\2\1\1\75\2\131\1\0\1\135\10\0"+
    "\1\136\1\0\1\137\1\140\1\0\1\141\2\0\1\142"+
    "\1\143\1\144\2\0\1\71\1\0\7\6\1\71\1\145"+
    "\1\6\1\0\5\6\1\146\3\6\1\147\2\6\1\150"+
    "\1\6\1\151\1\152\12\6\1\153\6\6\1\154\1\155"+
    "\12\0\6\6\1\156\1\157\1\160\3\0\1\161\1\0"+
    "\2\121\2\130\1\0\1\162\1\1\1\162\1\1\1\162"+
    "\1\163\1\1\1\163\2\1\1\162\1\164\1\0\1\164"+
    "\1\0\1\140\1\165\2\0\6\6\1\166\1\167\1\6"+
    "\1\170\21\6\1\171\11\6\1\172\4\6\12\0\7\6"+
    "\4\0\1\173\2\0\3\1\2\0\1\6\1\174\5\6"+
    "\1\175\1\176\3\6\1\177\1\6\1\200\3\6\1\201"+
    "\2\6\1\202\1\6\1\203\1\204\1\205\1\206\5\6"+
    "\1\207\1\210\1\6\1\211\2\6\4\0\1\212\7\0"+
    "\7\6\2\213\4\0\4\214\2\215\1\0\2\6\1\216"+
    "\2\6\1\217\4\6\1\220\5\6\1\221\1\222\1\223"+
    "\2\6\1\224\2\6\3\0\1\225\5\0\1\226\1\0"+
    "\1\227\6\6\5\0\1\230\5\6\1\231\2\6\1\232"+
    "\1\233\1\6\1\234\1\6\1\235\1\6\1\236\1\6"+
    "\3\0\1\237\1\0\1\240\6\6\2\241\3\0\3\6"+
    "\1\242\4\6\1\243\1\244\1\6\1\245\1\6\1\246"+
    "\1\247\1\250\3\6\1\251\1\6\4\0\2\6\1\252"+
    "\1\253\4\6\1\254\1\6\1\255\2\6\2\0\1\256"+
    "\1\257\1\6\1\260\1\261\3\6\1\262\2\0\4\6"+
    "\3\0\1\263\1\264\1\265\1\6\1\266\1\0\1\6"+
    "\1\0\1\6\1\0\1\267\14\0\1\70\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0"+
    "\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u04c8\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u0ff0\0\u04c8\0\u04c8\0\u1034"+
    "\0\u04c8\0\u1078\0\u10bc\0\u04c8\0\u1100\0\u1144\0\u1188\0\u11cc"+
    "\0\u1210\0\u04c8\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u04c8\0\u13ec\0\u04c8\0\u1430\0\u1474\0\u14b8\0\u04c8\0\u14fc"+
    "\0\u04c8\0\u04c8\0\u1540\0\u1584\0\u04c8\0\u15c8\0\u160c\0\u04c8"+
    "\0\u04c8\0\u1650\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u1694\0\u16d8"+
    "\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u04c8\0\u04c8\0\u182c\0\u1870"+
    "\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u04c8\0\u1a08\0\u1a4c"+
    "\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u04c8\0\u04c8\0\u1ba0\0\u1be4"+
    "\0\u1c28\0\u1c6c\0\u1034\0\u1cb0\0\u07b4\0\u1cf4\0\u04c8\0\u1d38"+
    "\0\u1d7c\0\u06e8\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14"+
    "\0\u1f58\0\u06e8\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u20f0"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\u06e8\0\u2244\0\u2288\0\u22cc"+
    "\0\u2310\0\u2354\0\u06e8\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u24ec\0\u04c8\0\u04c8\0\u2530\0\u2574"+
    "\0\u0cc0\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750"+
    "\0\u2794\0\u27d8\0\u281c\0\u04c8\0\u2860\0\u28a4\0\u04c8\0\u04c8"+
    "\0\u28e8\0\u292c\0\u04c8\0\u04c8\0\u2970\0\u29b4\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u29f8\0\u2a3c\0\u2a80\0\u1100"+
    "\0\u2ac4\0\u2b08\0\u2b4c\0\u2a80\0\u04c8\0\u04c8\0\u04c8\0\u2ac4"+
    "\0\u2b90\0\u1210\0\u2bd4\0\u2c18\0\u2b90\0\u04c8\0\u2bd4\0\u2c5c"+
    "\0\u1364\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2c5c\0\u2ca0\0\u13ec"+
    "\0\u04c8\0\u2db0\0\u1430\0\u14b8\0\u1474\0\u2df4\0\u2e38\0\u2e7c"+
    "\0\u14fc\0\u04c8\0\u2ec0\0\u04c8\0\u2f04\0\u2f48\0\u04c8\0\u171c"+
    "\0\u2f8c\0\u04c8\0\u04c8\0\u04c8\0\u2fd0\0\u3014\0\u3058\0\u3058"+
    "\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u1ba0"+
    "\0\u06e8\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410"+
    "\0\u06e8\0\u3454\0\u3498\0\u34dc\0\u06e8\0\u3520\0\u3564\0\u35a8"+
    "\0\u35ec\0\u06e8\0\u06e8\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740"+
    "\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u06e8\0\u38d8\0\u391c"+
    "\0\u3960\0\u39a4\0\u39e8\0\u3a2c\0\u04c8\0\u06e8\0\u3a70\0\u3ab4"+
    "\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4"+
    "\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u04c8"+
    "\0\u4048\0\u04c8\0\u408c\0\u04c8\0\u40d0\0\u1078\0\u4114\0\u1188"+
    "\0\u04c8\0\u4158\0\u12dc\0\u419c\0\u41e0\0\u1298\0\u04c8\0\u4224"+
    "\0\u14b8\0\u4268\0\u2f48\0\u04c8\0\u42ac\0\u42f0\0\u4334\0\u4378"+
    "\0\u43bc\0\u4400\0\u4444\0\u4488\0\u06e8\0\u44cc\0\u4510\0\u06e8"+
    "\0\u4554\0\u4598\0\u45dc\0\u4620\0\u4664\0\u46a8\0\u46ec\0\u4730"+
    "\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950"+
    "\0\u4994\0\u06e8\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c"+
    "\0\u4b70\0\u4bb4\0\u4bf8\0\u06e8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08"+
    "\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28"+
    "\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148"+
    "\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u04c8\0\u52e0\0\u5324"+
    "\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u06e8\0\u5500"+
    "\0\u5544\0\u5588\0\u55cc\0\u5610\0\u06e8\0\u06e8\0\u5654\0\u5698"+
    "\0\u56dc\0\u06e8\0\u5720\0\u06e8\0\u5764\0\u57a8\0\u57ec\0\u06e8"+
    "\0\u5830\0\u5874\0\u06e8\0\u58b8\0\u06e8\0\u06e8\0\u06e8\0\u06e8"+
    "\0\u58fc\0\u5940\0\u5984\0\u59c8\0\u5a0c\0\u06e8\0\u06e8\0\u5a50"+
    "\0\u06e8\0\u5a94\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8\0\u04c8"+
    "\0\u5c2c\0\u5c70\0\u5cb4\0\u5cf8\0\u5d3c\0\u5d80\0\u5dc4\0\u5e08"+
    "\0\u5e4c\0\u5e90\0\u5ed4\0\u5f18\0\u5f5c\0\u5fa0\0\u5fe4\0\u04c8"+
    "\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u04c8\0\u1078\0\u1188\0\u1298"+
    "\0\u6138\0\u04c8\0\u617c\0\u61c0\0\u6204\0\u6248\0\u628c\0\u62d0"+
    "\0\u06e8\0\u6314\0\u6358\0\u639c\0\u63e0\0\u06e8\0\u6424\0\u6468"+
    "\0\u64ac\0\u64f0\0\u6534\0\u06e8\0\u06e8\0\u06e8\0\u6578\0\u65bc"+
    "\0\u06e8\0\u6600\0\u6644\0\u6688\0\u66cc\0\u6710\0\u04c8\0\u6754"+
    "\0\u6798\0\u67dc\0\u6820\0\u6864\0\u04c8\0\u68a8\0\u06e8\0\u68ec"+
    "\0\u6930\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u6ac8\0\u6b0c"+
    "\0\u6b50\0\u6b94\0\u06e8\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8"+
    "\0\u6d2c\0\u6d70\0\u6db4\0\u06e8\0\u06e8\0\u6df8\0\u06e8\0\u6e3c"+
    "\0\u6e80\0\u6ec4\0\u06e8\0\u6f08\0\u6f4c\0\u6f90\0\u6fd4\0\u04c8"+
    "\0\u7018\0\u04c8\0\u705c\0\u70a0\0\u70e4\0\u7128\0\u716c\0\u71b0"+
    "\0\u71f4\0\u04c8\0\u7238\0\u727c\0\u72c0\0\u7304\0\u7348\0\u738c"+
    "\0\u06e8\0\u73d0\0\u7414\0\u7458\0\u749c\0\u06e8\0\u06e8\0\u74e0"+
    "\0\u06e8\0\u7524\0\u04c8\0\u04c8\0\u06e8\0\u7568\0\u75ac\0\u75f0"+
    "\0\u06e8\0\u7634\0\u7678\0\u76bc\0\u7700\0\u7744\0\u7788\0\u77cc"+
    "\0\u06e8\0\u06e8\0\u7810\0\u7854\0\u7898\0\u78dc\0\u06e8\0\u7920"+
    "\0\u06e8\0\u7964\0\u79a8\0\u79ec\0\u7a30\0\u06e8\0\u06e8\0\u7a74"+
    "\0\u06e8\0\u06e8\0\u7ab8\0\u7afc\0\u7b40\0\u06e8\0\u7b84\0\u7bc8"+
    "\0\u7c0c\0\u7c50\0\u7c94\0\u7cd8\0\u7d1c\0\u7d60\0\u7da4\0\u06e8"+
    "\0\u06e8\0\u06e8\0\u7de8\0\u04c8\0\u7e2c\0\u7e70\0\u7eb4\0\u7ef8"+
    "\0\u7f3c\0\u06e8\0\u7f80\0\u7fc4\0\u8008\0\u804c\0\u8090\0\u80d4"+
    "\0\u8118\0\u815c\0\u81a0\0\u81e4\0\u8228\0\u826c\0\u04c8\0\u82b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\63\21\1\22\20\21\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\23\3\34\1\35\1\36"+
    "\1\33\1\23\1\37\1\23\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\33\1\54\1\33\1\55\1\56\1\33\1\57\1\33"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\33"+
    "\1\67\1\33\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\52\1\110\1\111\15\112\1\113\1\114"+
    "\1\112\1\115\3\112\1\116\57\112\15\117\1\120\2\117"+
    "\1\121\1\122\2\117\1\123\57\117\12\124\1\125\1\124"+
    "\1\125\1\126\2\124\1\127\3\124\1\130\57\124\3\131"+
    "\1\132\2\131\3\132\6\131\1\132\5\131\22\132\3\131"+
    "\1\132\1\131\1\132\1\131\3\132\20\131\1\132\2\131"+
    "\104\133\3\134\1\135\2\134\2\135\2\134\1\136\1\134"+
    "\1\136\2\134\1\135\2\134\1\23\2\134\22\135\3\134"+
    "\1\135\1\134\1\135\1\134\3\135\20\134\1\135\2\134"+
    "\3\137\1\140\2\137\3\140\6\137\1\140\5\137\22\140"+
    "\3\137\1\140\1\137\1\140\1\137\3\140\20\137\1\140"+
    "\2\137\104\141\3\142\1\143\2\142\3\143\6\142\1\143"+
    "\5\142\22\143\1\144\2\142\1\143\1\142\1\143\1\142"+
    "\3\143\20\142\1\143\2\142\3\145\1\146\2\145\3\146"+
    "\6\145\1\146\5\145\22\146\3\145\1\146\1\145\1\146"+
    "\1\145\3\146\20\145\1\146\2\145\1\23\1\147\1\150"+
    "\1\33\1\151\1\152\3\33\1\23\3\153\1\35\1\154"+
    "\1\33\1\153\1\155\1\23\1\40\1\156\22\33\1\157"+
    "\1\160\1\161\1\33\1\162\1\33\1\66\3\33\1\163"+
    "\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173"+
    "\1\101\1\102\1\174\1\104\1\175\1\106\1\176\1\33"+
    "\2\153\64\177\1\200\17\177\64\201\1\202\17\201\12\203"+
    "\1\204\1\203\1\205\33\203\1\206\15\203\1\207\7\203"+
    "\1\207\5\203\63\21\1\210\103\21\1\0\2\21\1\211"+
    "\7\21\1\212\2\21\1\213\2\21\105\0\1\24\1\214"+
    "\1\215\1\0\1\24\77\0\1\214\3\0\1\214\53\0"+
    "\1\216\23\0\1\33\1\0\1\33\1\0\1\33\1\217"+
    "\3\33\5\0\1\33\5\0\5\33\1\220\1\221\7\33"+
    "\1\222\2\33\1\223\3\0\1\224\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\6\0\1\225\54\0\1\226\23\0"+
    "\1\24\1\214\1\215\1\0\1\24\1\227\76\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\7\33"+
    "\1\230\12\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\4\0\1\36\1\33\5\0\11\33\1\231\10\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\2\0\1\232\15\0"+
    "\1\33\1\233\2\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\22\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\14\0\3\34\72\0\1\234"+
    "\2\0\3\234\6\0\1\234\5\0\22\234\3\0\1\234"+
    "\1\0\1\234\1\0\3\234\20\0\1\234\2\0\15\235"+
    "\1\236\1\237\1\235\1\240\3\235\1\241\57\235\1\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\3\33\1\242\1\33\1\243\2\33\1\244\10\33\1\245"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\244"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\11\33\1\246\2\33\1\247\5\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\250\1\0\5\33\5\0\1\33\5\0\1\251"+
    "\6\33\1\252\12\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\253\3\33\1\254\2\33"+
    "\1\255\12\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\5\33\1\256\2\33\1\257\11\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\257"+
    "\3\0\1\33\1\0\1\260\1\0\5\33\5\0\1\33"+
    "\5\0\22\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\3\33\1\261\3\33\1\262\3\33"+
    "\1\263\2\33\1\264\3\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\11\33\1\265\10\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\33\1\266\13\33\1\267\4\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\270\1\0\5\33\5\0\1\33\5\0\22\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\2\33\1\271\2\33"+
    "\5\0\1\33\5\0\5\33\1\272\2\33\1\273\1\274"+
    "\10\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\273\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\14\33\1\275\5\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\276\21\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\4\33\1\277\4\33\1\300\10\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\51\0\1\301"+
    "\1\302\10\0\1\303\72\0\1\304\10\0\1\305\73\0"+
    "\1\306\33\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\13\33\1\307\6\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\11\0\1\310\3\0"+
    "\1\311\11\0\1\312\1\0\1\313\1\314\1\315\2\0"+
    "\1\316\1\317\1\320\1\0\1\321\40\0\1\317\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\322\3\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\323\1\33\20\0\1\33\52\0"+
    "\1\324\10\0\1\325\103\0\1\326\72\0\1\327\10\0"+
    "\1\330\1\0\1\331\1\0\1\332\77\0\1\333\103\0"+
    "\1\334\2\0\1\335\1\111\66\0\1\336\10\0\1\337"+
    "\103\0\1\340\5\0\1\341\75\0\1\342\6\0\1\343"+
    "\74\0\1\344\72\0\1\345\33\0\20\233\1\346\61\233"+
    "\1\237\1\233\15\112\1\347\1\0\1\112\1\350\3\112"+
    "\1\351\62\112\1\352\2\112\2\352\1\353\4\112\1\354"+
    "\1\355\1\352\1\350\1\112\1\0\1\112\1\356\22\352"+
    "\3\112\1\352\1\112\1\352\1\112\3\352\20\112\1\352"+
    "\123\112\1\357\1\355\1\112\1\350\3\112\1\360\57\112"+
    "\15\117\1\361\2\117\1\362\1\0\2\117\1\363\62\117"+
    "\1\352\2\117\2\352\1\364\4\117\1\365\1\117\1\352"+
    "\1\362\1\366\1\0\1\117\1\356\22\352\3\117\1\352"+
    "\1\117\1\352\1\117\3\352\20\117\1\352\123\117\1\357"+
    "\2\117\1\362\1\366\2\117\1\367\57\117\12\124\1\125"+
    "\1\124\1\125\1\370\2\124\1\371\3\124\1\372\62\124"+
    "\1\373\2\124\2\373\1\374\1\124\1\125\1\124\1\125"+
    "\1\370\1\124\1\373\1\371\1\124\1\0\1\124\1\372"+
    "\22\373\3\124\1\373\1\124\1\373\1\124\3\373\20\124"+
    "\1\373\5\124\1\352\2\124\2\352\1\375\1\124\1\125"+
    "\1\124\1\125\1\376\1\124\1\352\1\371\1\124\1\0"+
    "\1\124\1\356\22\352\3\124\1\352\1\124\1\352\1\124"+
    "\3\352\20\124\1\352\14\124\1\125\1\124\1\125\101\124"+
    "\1\125\1\124\1\125\1\357\2\124\1\371\3\124\1\377"+
    "\57\124\1\0\1\u0100\1\0\1\u0100\1\0\5\u0100\1\u0101"+
    "\1\0\1\u0101\2\0\1\u0100\3\0\1\u0102\1\0\22\u0100"+
    "\3\0\1\u0100\1\0\1\u0100\1\0\3\u0100\20\0\1\u0100"+
    "\2\0\12\u0103\1\u0104\1\u0103\1\u0104\70\u0103\1\u0105\1\u0103"+
    "\1\u0105\1\u0103\3\u0105\2\u0103\1\0\1\u0103\1\0\2\u0103"+
    "\1\u0105\2\u0103\1\0\1\u0106\1\u0103\22\u0105\3\u0103\1\u0105"+
    "\1\u0103\1\u0105\1\u0103\3\u0105\20\u0103\1\u0105\5\u0103\1\u0107"+
    "\2\u0103\2\u0107\1\u0108\1\u0103\1\u0104\1\u0103\1\u0104\2\u0103"+
    "\1\u0107\2\u0103\1\0\2\u0103\22\u0107\3\u0103\1\u0107\1\u0103"+
    "\1\u0107\1\u0103\3\u0107\20\u0103\1\u0107\2\u0103\1\0\1\u0109"+
    "\1\0\1\u0109\1\0\5\u0109\1\u010a\1\0\1\u010a\2\0"+
    "\1\u0109\3\0\1\u010b\1\0\22\u0109\3\0\1\u0109\1\0"+
    "\1\u0109\1\0\3\u0109\20\0\1\u0109\3\0\1\143\1\0"+
    "\1\143\1\0\5\143\5\0\1\143\5\0\22\143\3\0"+
    "\1\143\1\0\1\143\1\0\3\143\20\0\1\143\52\0"+
    "\1\u010c\34\0\1\146\1\0\1\146\1\0\5\146\5\0"+
    "\1\146\5\0\22\146\3\0\1\146\1\0\1\146\1\0"+
    "\3\146\20\0\1\146\3\0\1\147\3\0\1\147\77\0"+
    "\1\u010d\3\0\1\u010d\1\u010e\75\0\64\177\1\0\17\177"+
    "\65\0\1\u010f\16\0\64\u0110\1\u0111\103\u0110\1\u0111\1\u0112"+
    "\16\u0110\12\203\1\204\1\203\1\205\33\203\1\205\15\203"+
    "\1\205\7\203\1\205\5\203\14\0\1\205\137\0\1\u0113"+
    "\33\0\63\21\1\0\2\21\1\0\7\21\1\0\2\21"+
    "\1\0\2\21\61\0\1\u0114\67\0\1\u0115\13\0\1\u0114"+
    "\55\0\1\u0116\51\0\1\214\1\0\1\215\1\0\1\214"+
    "\77\0\1\u0117\2\0\1\u0118\1\u0117\41\0\1\u0118\35\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\u0119\1\u011a\20\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\2\33\1\u011b\17\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\14\33\1\u011c\5\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u011d\11\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\u011d\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\20\33\1\u011e\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u011f\6\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\u0120\1\0\1\u0120\1\0\1\u0120\1\0\1\u0120\17\0"+
    "\2\u0120\2\0\1\u0120\4\0\1\u0120\44\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\11\33\1\u0121"+
    "\10\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u0122\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\65\0\1\u0123\21\0\1\234\1\0"+
    "\1\234\1\0\5\234\5\0\1\234\5\0\22\234\3\0"+
    "\1\234\1\0\1\234\1\0\3\234\20\0\1\234\2\0"+
    "\3\235\1\0\2\235\2\0\5\235\1\236\1\237\1\0"+
    "\1\240\1\235\1\0\1\235\23\0\3\235\1\0\1\235"+
    "\1\0\1\235\3\0\20\235\1\0\123\235\1\0\1\237"+
    "\1\235\1\240\3\235\1\241\57\235\1\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\33\1\u0124"+
    "\4\33\1\u0125\1\33\1\u0126\11\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\u0126\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\10\33\1\u0127"+
    "\11\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\u0127\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\20\33\1\u0128\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\12\33\1\u0129"+
    "\7\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\11\33\1\u012a\10\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\3\33\1\u012b"+
    "\2\33\1\u012c\13\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u012d\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\5\33\1\u012e"+
    "\14\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\5\33\1\u012f\14\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\11\33\1\u0130"+
    "\10\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\10\33\1\u0131\11\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\u0131\3\0\1\33\1\0"+
    "\1\u0132\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\15\33\1\u0133\4\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\4\33\1\254\15\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\5\33\1\u0134\14\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u0135\6\33\1\u0136"+
    "\11\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\u0136\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\7\33\1\u0137\3\33\1\u0138\6\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\13\33\1\u0139\6\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\u013a\21\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\33"+
    "\1\u013b\20\33\3\0\1\33\1\0\1\33\1\0\2\33"+
    "\1\u013c\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u013d\11\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\u013d\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\2\33\1\u013e\17\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\11\33\1\u013f\10\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\u0140\21\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\10\33\1\u0141\11\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\u0141\3\0\1\33"+
    "\1\0\1\33\1\0\2\33\1\u0142\2\33\5\0\1\33"+
    "\5\0\22\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\u0143\6\33\1\u0144\12\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\63\0"+
    "\1\u0145\23\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\11\33\1\u0146\10\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\27\0\1\u0147\6\0"+
    "\1\u0148\101\0\1\u0149\105\0\1\u014a\112\0\1\u014b\72\0"+
    "\1\u014c\60\0\1\u014d\122\0\1\u014e\60\0\1\u014f\136\0"+
    "\1\u0150\46\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\7\33\1\u0151\12\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\3\33\1\u0152"+
    "\2\33\1\u0153\5\33\1\u0154\1\33\1\u0155\2\33\1\u0156"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\63\0\1\u0157\103\0\1\u0158\103\0\1\u0159\1\0\1\u015a"+
    "\55\0\1\u015b\43\0\1\u015b\14\0\3\u015c\47\0\1\u015d"+
    "\12\0\1\u015e\16\0\1\u015f\1\0\1\u0160\101\0\1\u0161"+
    "\1\0\1\u0162\67\0\104\233\3\112\1\0\2\112\2\0"+
    "\5\112\1\354\1\355\1\0\1\350\1\112\1\0\1\112"+
    "\23\0\3\112\1\0\1\112\1\0\1\112\3\0\20\112"+
    "\1\0\17\112\1\0\1\355\1\112\1\350\3\112\1\360"+
    "\57\112\1\0\1\352\1\0\1\352\1\0\5\352\5\0"+
    "\1\352\5\0\22\352\1\u0163\2\0\1\352\1\0\1\352"+
    "\1\0\3\352\12\0\1\u0164\5\0\1\352\2\0\1\112"+
    "\1\353\1\112\1\353\1\112\5\353\3\112\1\347\1\0"+
    "\1\353\1\350\3\112\1\351\22\353\1\u0165\2\112\1\353"+
    "\1\112\1\353\1\112\3\353\12\112\1\u0166\5\112\1\353"+
    "\2\112\3\117\1\0\2\117\2\0\5\117\1\365\1\117"+
    "\1\0\1\362\1\366\1\0\1\117\23\0\3\117\1\0"+
    "\1\117\1\0\1\117\3\0\20\117\1\0\17\117\1\0"+
    "\2\117\1\362\1\366\2\117\1\367\60\117\1\364\1\117"+
    "\1\364\1\117\5\364\3\117\1\361\1\117\1\364\1\362"+
    "\1\0\2\117\1\363\22\364\1\u0167\2\117\1\364\1\117"+
    "\1\364\1\117\3\364\12\117\1\u0168\5\117\1\364\2\117"+
    "\3\124\1\0\2\124\2\0\2\124\1\125\1\124\1\125"+
    "\1\376\1\124\1\0\1\371\1\124\1\0\1\124\23\0"+
    "\3\124\1\0\1\124\1\0\1\124\3\0\20\124\1\0"+
    "\14\124\1\125\1\124\1\125\1\0\2\124\1\371\3\124"+
    "\1\377\60\124\1\373\1\124\1\373\1\124\3\373\2\374"+
    "\1\u0169\1\124\1\u0169\1\370\1\124\1\373\1\371\1\124"+
    "\1\0\1\u016a\1\372\22\373\3\124\1\373\1\124\1\373"+
    "\1\124\3\373\20\124\1\373\3\124\1\374\1\124\1\374"+
    "\1\124\5\374\1\u016b\1\124\1\u016b\1\370\1\124\1\374"+
    "\1\371\2\124\1\u016c\1\372\22\374\3\124\1\374\1\124"+
    "\1\374\1\124\3\374\20\124\1\374\3\124\1\375\1\124"+
    "\1\375\1\124\5\375\1\125\1\124\1\125\1\370\1\124"+
    "\1\375\1\371\3\124\1\372\22\375\1\u016d\2\124\1\375"+
    "\1\124\1\375\1\124\3\375\12\124\1\u016e\5\124\1\375"+
    "\2\124\12\0\1\u0101\1\0\1\u0101\67\0\12\u0103\1\0"+
    "\1\u0103\1\0\70\u0103\1\u0107\1\u0103\1\u0107\1\u0103\3\u0107"+
    "\2\u0108\1\u016f\1\u0103\1\u016f\2\u0103\1\u0107\2\u0103\1\0"+
    "\1\u0170\1\u0103\22\u0107\3\u0103\1\u0107\1\u0103\1\u0107\1\u0103"+
    "\3\u0107\20\u0103\1\u0107\3\u0103\1\u0108\1\u0103\1\u0108\1\u0103"+
    "\5\u0108\1\u0171\1\u0103\1\u0171\2\u0103\1\u0108\3\u0103\1\u0172"+
    "\1\u0103\22\u0108\3\u0103\1\u0108\1\u0103\1\u0108\1\u0103\3\u0108"+
    "\20\u0103\1\u0108\2\u0103\12\0\1\u010a\1\0\1\u010a\70\0"+
    "\1\u010d\3\0\1\u010d\77\0\1\u0173\1\0\1\u0173\1\0"+
    "\1\u0173\1\0\1\u0173\17\0\2\u0173\2\0\1\u0173\4\0"+
    "\1\u0173\43\0\64\u0110\1\u0111\1\u0174\16\u0110\41\0\1\u0175"+
    "\100\0\1\u0176\46\0\1\u0117\3\0\1\u0117\77\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\33"+
    "\1\u012d\20\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\u0177\1\0\5\33"+
    "\5\0\1\33\5\0\22\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\u0178\1\33\1\u0179"+
    "\1\u017a\4\33\1\u017b\4\33\1\u017c\4\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\u017b\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\7\33"+
    "\1\u017d\12\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\u017e\1\0\5\33"+
    "\5\0\1\33\5\0\22\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\33\1\u017f\20\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\16\33\1\u0180\3\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\13\33\1\u0181\6\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\65\0\1\u015a\21\0\1\33\1\0\1\u0182\1\0\5\33"+
    "\5\0\1\33\5\0\22\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\16\33\1\u0183\3\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\33\1\u0184\20\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\u0185"+
    "\1\0\5\33\5\0\1\33\5\0\22\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\16\33"+
    "\1\u0186\3\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\7\33\1\u0187\12\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\u0188"+
    "\12\33\1\u0189\6\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\16\33\1\u018a\3\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\13\33\1\u018b\6\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u018c\13\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u018d\1\0\5\33\5\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u018e\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u018f\6\33\1\u0190"+
    "\11\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\u0190\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u0191\13\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0192\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\5\33\1\u0193\14\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u0194\11\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\u0194\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u0195\20\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u0196\20\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\4\33\1\u0197\15\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\4\33\1\u0198\15\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u0199\20\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u019a\6\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\u019b\3\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u019c\20\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\u019d\3\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\5\33\1\u019e\14\33\3\0"+
    "\1\u019f\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u01a0\20\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\34\0\1\u01a1\105\0\1\u01a2\75\0"+
    "\1\u01a3\106\0\1\u01a4\106\0\1\u01a5\104\0\1\u01a6\43\0"+
    "\1\u01a6\60\0\1\u01a7\63\0\1\u01a8\105\0\1\u01a9\101\0"+
    "\1\u01aa\46\0\1\33\1\0\1\33\1\0\2\33\1\u01ab"+
    "\2\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\u01ac\3\33"+
    "\1\u01ad\15\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\16\33\1\u01ae\3\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\13\33"+
    "\1\u01af\6\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\u01b0\21\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u01b1\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\5\0"+
    "\1\u01b2\2\0\3\u01b2\2\0\1\u015a\2\0\1\u01b3\1\u01b2"+
    "\5\0\22\u01b2\3\0\1\u01b2\1\0\1\u01b2\1\0\3\u01b2"+
    "\20\0\1\u01b2\1\u01b4\34\0\1\u01b5\62\0\3\u015c\62\0"+
    "\1\u015e\71\0\1\u01b6\70\0\1\u01b7\45\0\1\u0160\103\0"+
    "\1\u0162\137\0\1\u01b8\33\0\15\112\1\347\1\0\1\112"+
    "\1\350\3\112\1\351\23\112\1\u01b9\33\112\15\117\1\361"+
    "\2\117\1\362\1\0\2\117\1\363\23\117\1\u01ba\33\117"+
    "\12\124\1\u0169\1\124\1\u0169\1\370\2\124\1\371\3\124"+
    "\1\372\71\124\1\u016b\1\124\1\u016b\1\370\2\124\1\371"+
    "\3\124\1\372\71\124\1\125\1\124\1\125\1\370\2\124"+
    "\1\371\3\124\1\372\23\124\1\u01bb\33\124\12\u0103\1\u016f"+
    "\1\u0103\1\u016f\101\u0103\1\u0171\1\u0103\1\u0171\67\u0103\45\0"+
    "\1\u01bc\63\0\1\u01bd\57\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\5\33\1\u01be\14\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\3\33\1\u01bf\16\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u01c0\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\7\33\1\u01c1"+
    "\12\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\15\33\1\u01c2\4\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\14\33\1\u01c3"+
    "\5\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\u01c4\21\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\12\33\1\u01c5\7\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\17\33\1\u01c6\2\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\11\33\1\u01c7\10\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\4\33\1\u01c8\15\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\13\33\1\u01c9\6\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\33\1\u01ca\20\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\u01cb"+
    "\1\0\5\33\5\0\1\33\5\0\22\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\15\33"+
    "\1\u01cc\4\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\5\33\1\u01cd\14\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\4\33"+
    "\1\u01ce\15\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\13\33\1\u01cf\6\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\16\33"+
    "\1\u01d0\3\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\33\1\u01d1\20\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\13\33"+
    "\1\u01d2\6\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\33\1\u01d3\20\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\u01d4"+
    "\21\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u01d5\20\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\14\33\1\u01d6"+
    "\5\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u01d7\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u01d8\11\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\u01d8\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\u01d9\21\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\6\33\1\u01da\13\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\11\33"+
    "\1\u01db\10\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\u01dc\21\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\11\33\1\u01dd"+
    "\10\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\12\33\1\u01de\7\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u01df\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\u01e0\21\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\33\1\u01e1\20\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\13\33"+
    "\1\u01e2\6\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\u01e3\1\0\5\33"+
    "\5\0\1\33\5\0\22\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\42\0\1\u01e4\106\0\1\u01e5"+
    "\43\0\1\u01e6\7\0\1\u01e7\41\0\1\u01e8\35\0\1\u01e9"+
    "\134\0\1\u01ea\46\0\1\u01eb\103\0\1\u01ec\125\0\1\u01ed"+
    "\121\0\1\u01ee\100\0\1\u01ef\44\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\13\33\1\u01f0\6\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\16\33\1\u01f1\3\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\5\33\1\u01f2\14\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\13\33\1\u01f3\6\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\16\33\1\u01f4\3\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\5\33\1\u01f5\14\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\33\1\u01f6\20\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\u01b2\1\0\1\u01b2\1\0\5\u01b2\1\u01f7\1\0"+
    "\1\u01f8\2\0\1\u01b2\5\0\22\u01b2\3\0\1\u01b2\1\0"+
    "\1\u01b2\1\0\3\u01b2\20\0\1\u01b2\5\0\1\u01f9\2\0"+
    "\3\u01f9\6\0\1\u01f9\5\0\22\u01f9\3\0\1\u01f9\1\0"+
    "\1\u01f9\1\0\3\u01f9\20\0\1\u01f9\5\0\1\u01fa\2\0"+
    "\3\u01fa\6\0\1\u01fa\5\0\22\u01fa\3\0\1\u01fa\1\0"+
    "\1\u01fa\1\0\3\u01fa\20\0\1\u01fa\40\0\1\u01fb\105\0"+
    "\1\u01fc\46\0\1\u01fd\2\0\2\u01fd\7\0\1\u01fd\2\0"+
    "\1\u01fd\2\0\22\u01fd\3\0\1\u01fd\1\0\1\u01fd\1\0"+
    "\3\u01fd\20\0\1\u01fd\2\0\3\112\1\u01fe\2\112\2\u01fe"+
    "\5\112\1\347\1\0\1\u01fe\1\350\1\112\1\u01fe\1\112"+
    "\1\351\22\u01fe\3\112\1\u01fe\1\112\1\u01fe\1\112\3\u01fe"+
    "\20\112\1\u01fe\2\112\3\117\1\u01ff\2\117\2\u01ff\5\117"+
    "\1\361\1\117\1\u01ff\1\362\1\0\1\u01ff\1\117\1\363"+
    "\22\u01ff\3\117\1\u01ff\1\117\1\u01ff\1\117\3\u01ff\20\117"+
    "\1\u01ff\2\117\3\124\1\u0200\2\124\2\u0200\2\124\1\125"+
    "\1\124\1\125\1\370\1\124\1\u0200\1\371\1\124\1\u0200"+
    "\1\124\1\372\22\u0200\3\124\1\u0200\1\124\1\u0200\1\124"+
    "\3\u0200\20\124\1\u0200\2\124\12\0\1\u0201\2\u0202\134\0"+
    "\1\u0203\37\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\2\33\1\u0204\17\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\6\33\1\u0205"+
    "\13\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\11\33\1\u0206\10\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\u0207\21\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\u0208\21\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\3\33\1\u0209\16\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\3\33\1\u020a\16\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\2\33\1\u020b\17\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\5\33\1\u020c\14\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\21\33\1\u020d\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\u020e\1\0\5\33\5\0\1\33\5\0\22\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\16\33\1\u020f\3\33\3\0\1\33\1\0\1\33"+
    "\1\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\11\33\1\u0210\10\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\u0211\21\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u0212\13\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\5\33\1\u0213\14\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u0214\13\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\14\33\1\u0215\5\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\5\33\1\u0216\14\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\11\33\1\u0217\10\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u0218\6\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\6\33\1\u0219\13\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u021a\20\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\6\33\1\u021b\13\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\40\0\1\u021c\50\0\1\u021d\7\0"+
    "\1\u021e\41\0\1\u021f\102\0\1\u0220\42\0\1\u01e7\41\0"+
    "\1\u01e8\71\0\1\u0221\66\0\1\u01ee\103\0\1\u0222\110\0"+
    "\1\u0223\102\0\1\u0224\64\0\1\u01ee\41\0\1\u0225\65\0"+
    "\1\u0226\45\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\16\33\1\u0227\3\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0228\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\6\33\1\u0229\13\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u022a\11\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\u022a\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u022b\20\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u022c\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\14\33\1\u022d"+
    "\5\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\16\0\1\u01f8\70\0\1\u01f9\1\0\1\u01f9\1\0"+
    "\5\u01f9\4\0\1\u022e\1\u01f9\5\0\22\u01f9\3\0\1\u01f9"+
    "\1\0\1\u01f9\1\0\3\u01f9\20\0\1\u01f9\3\0\1\u01fa"+
    "\1\0\1\u01fa\1\0\5\u01fa\5\0\1\u01fa\5\0\22\u01fa"+
    "\3\0\1\u01fa\1\0\1\u01fa\1\0\3\u01fa\20\0\1\u01fa"+
    "\1\u022f\26\0\1\u0230\114\0\1\u0231\61\0\1\u0202\115\0"+
    "\1\u0232\56\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\10\33\1\u0233\11\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\u0233\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\16\33\1\u0234"+
    "\3\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u0235\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u0236\20\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\u0237\3\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u0238\6\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u0239\1\0\5\33\5\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u023a\13\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u023b\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u023c\20\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u023d\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\7\33\1\u023e"+
    "\12\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\14\33\1\u023f\5\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\4\33\1\u0240"+
    "\15\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u0241\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u0242\13\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u0243\1\0\5\33\5\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u0244\20\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\41\0\1\u0245\104\0"+
    "\1\u0246\56\0\1\u021e\41\0\1\u021f\31\0\1\u0247\103\0"+
    "\1\u01ee\113\0\1\u0222\41\0\1\u0248\54\0\1\u0249\131\0"+
    "\1\u0245\42\0\1\u0226\41\0\1\u024a\27\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\u024b\1\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u024c\20\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\10\33\1\u024d"+
    "\11\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\u024d\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\1\33\1\u024e\1\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\u024f\1\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\7\33\1\u0250\12\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\14\0\1\u01f7\1\0"+
    "\1\u01f8\101\0\1\u0251\1\0\1\u0252\134\0\1\u0253\50\0"+
    "\3\u0254\101\0\3\u0255\70\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u0256\6\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\13\33\1\u0257\6\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u0258\13\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u0259\1\0\5\33\5\0\1\33\5\0"+
    "\22\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u025a\13\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\u025b\1\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u025c\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\5\33\1\u025d\14\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\5\33\1\u025e\14\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u025f\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\u0260\1\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u0261\20\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0262\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\15\0"+
    "\1\u0245\41\0\1\u0263\60\0\1\u021e\107\0\1\u01e7\60\0"+
    "\1\u0249\41\0\1\u0264\27\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\u0265\1\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\u0266\21\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\22\33\3\0\1\33\1\0\1\33"+
    "\1\0\1\33\1\u0267\1\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\6\33"+
    "\1\u0268\13\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\22\33\3\0\1\33\1\0\1\33"+
    "\1\0\1\33\1\u0269\1\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\2\33"+
    "\1\u026a\17\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\16\0\1\u0252\115\0\1\u026b\60\0\1\u026c"+
    "\2\0\3\u026c\1\0\3\u0254\1\u026d\1\0\1\u026c\5\0"+
    "\22\u026c\3\0\1\u026c\1\0\1\u026c\1\0\3\u026c\20\0"+
    "\1\u026c\14\0\3\u0255\26\0\1\u026e\41\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\11\33\1\u026f"+
    "\10\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u0270\13\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\14\33\1\u0271"+
    "\5\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u0272\1\0\5\33\5\0"+
    "\1\33\5\0\22\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\7\33\1\u0273\12\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u0274\12\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u0275\20\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u0276\12\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\2\33\1\u0277\17\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u0278\12\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\u0279\1\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u027a\12\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\3\0\1\33\1\0"+
    "\1\33\1\0\1\33\1\u027b\1\33\20\0\1\33\14\0"+
    "\3\u026b\33\0\1\345\34\0\1\u026c\1\0\1\u026c\1\0"+
    "\5\u026c\3\u027c\2\0\1\u026c\5\0\22\u026c\3\0\1\u026c"+
    "\1\0\1\u026c\1\0\3\u026c\20\0\1\u026c\5\0\1\u026c"+
    "\2\0\3\u026c\6\0\1\u026c\5\0\22\u026c\3\0\1\u026c"+
    "\1\0\1\u026c\1\0\3\u026c\20\0\1\u026c\42\0\1\u027d"+
    "\44\0\1\33\1\0\1\u027e\1\0\5\33\5\0\1\33"+
    "\5\0\22\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\14\33\1\u027f\5\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\5\33"+
    "\1\u0280\14\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\3\33\1\u0281\16\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\10\33"+
    "\1\u0282\11\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\u0282\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\5\33\1\u0283\14\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\5\33"+
    "\1\u0284\14\33\3\0\1\33\1\0\1\33\1\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\21\33\1\u0285\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\u0286\1\33\20\0"+
    "\1\33\5\0\1\u0287\2\0\3\u0287\1\0\3\u027c\2\0"+
    "\1\u0287\5\0\22\u0287\3\0\1\u0287\1\0\1\u0287\1\0"+
    "\3\u0287\20\0\1\u0287\34\0\1\u0288\52\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\6\33\1\u0289"+
    "\13\33\3\0\1\33\1\0\1\33\1\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u028a\13\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\1\33\1\u028b\1\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\20\33\1\u028c\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\3\0\1\u0287\1\0"+
    "\1\u0287\1\0\5\u0287\3\u028d\2\0\1\u0287\5\0\22\u0287"+
    "\3\0\1\u0287\1\0\1\u0287\1\0\3\u0287\3\0\1\u028e"+
    "\14\0\1\u0287\56\0\1\u028f\30\0\1\33\1\0\1\u0290"+
    "\1\0\5\33\5\0\1\33\5\0\22\33\3\0\1\33"+
    "\1\0\1\33\1\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\u0291\1\0\5\33\5\0\1\33\5\0\22\33"+
    "\3\0\1\33\1\0\1\33\1\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\22\33\3\0\1\33\1\0\1\33\1\0\1\33"+
    "\1\u0292\1\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\u0293\21\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\14\0"+
    "\3\u028d\47\0\1\u028e\104\0\1\u0294\47\0\1\u0295\53\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\u0296\3\33\3\0\1\33\1\0\1\33\1\0"+
    "\3\33\20\0\1\33\42\0\1\u0297\44\0\1\33\1\0"+
    "\1\u0298\1\0\5\33\5\0\1\33\5\0\22\33\3\0"+
    "\1\33\1\0\1\33\1\0\3\33\20\0\1\33\56\0"+
    "\1\u0299\30\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\11\33\1\u029a\10\33\3\0\1\33\1\0"+
    "\1\33\1\0\3\33\20\0\1\33\5\0\1\u029b\112\0"+
    "\3\u029b\44\0\1\u029c\34\0\3\u029c\1\0\1\u029d\26\0"+
    "\1\u029e\34\0\1\u029f\46\0\1\u02a0\77\0\1\u02a1\107\0"+
    "\1\u02a2\77\0\1\u02a3\107\0\1\u02a4\77\0\1\u02a5\107\0"+
    "\1\u02a6\50\0\3\u02a4\33\0\1\u02a7\100\0\1\u02a8\54\0"+
    "\1\u02a4\167\0\1\u02a4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33524];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\13\0\2\1\1\11\13\1\3\11\24\1"+
    "\1\11\12\1\4\11\1\1\2\11\1\1\1\11\2\1"+
    "\1\11\5\1\1\11\6\1\1\11\1\1\1\11\3\1"+
    "\1\11\1\1\2\11\2\1\1\11\2\1\2\11\1\1"+
    "\24\11\6\1\2\11\1\1\1\0\4\1\1\0\1\11"+
    "\6\1\2\11\1\0\2\1\2\0\1\1\2\0\1\11"+
    "\2\0\37\1\3\11\1\1\2\11\1\1\12\0\2\1"+
    "\1\11\2\1\2\11\1\1\1\0\2\11\2\1\6\11"+
    "\1\1\4\0\3\1\3\11\1\1\3\0\2\1\1\11"+
    "\1\1\3\0\5\1\1\0\1\11\10\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\2\0\3\11\2\0\1\1"+
    "\1\0\12\1\1\0\41\1\1\11\1\1\12\0\6\1"+
    "\3\11\3\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\0\1\11\4\1\1\11\5\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\11\2\0\52\1\12\0\7\1\4\0"+
    "\1\11\2\0\3\1\2\0\46\1\4\0\1\11\7\0"+
    "\10\1\1\11\4\0\1\11\4\1\1\11\1\0\30\1"+
    "\3\0\1\11\5\0\1\11\1\0\7\1\5\0\22\1"+
    "\3\0\1\11\1\0\1\11\7\1\1\11\3\0\15\1"+
    "\2\11\6\1\4\0\15\1\2\0\11\1\2\0\4\1"+
    "\3\0\4\1\1\11\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private final List commentList = new LinkedList();
    private String heredoc = null;
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private PHPDocCommentParser docParser = new PHPDocCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean aspTags) {
        this(in);
        asp_tags = aspTags;
    }
    //private AST ast;

    private int bracket = 0;
    
    /**
     * Returns balance beween '{' and '}'. If it's equesl 0, 
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    /*public void setAST(AST ast) {
    	this.ast = ast;
    }
    */
        public PHPVersion getPHPVersion() {
                return PHPVersion.PHP_5;
        }
    
        public boolean useAspTagsAsPhp () {
            return asp_tags;
        }

        public void reset(java.io.Reader reader) {
            yyreset(reader);
        }

        public void setState(int state) {
            yybegin(state);
        }

        public int getState() {
            return yystate();
        }

        public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}
	
	public List getCommentList() {
		return commentList;
	}	
	
	protected void addComment(Comment.Type type) {
		int leftPosition = getTokenStartPosition();
                //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
                Comment comm;
                if (type == Comment.Type.TYPE_PHPDOC) {
                    comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
                    comment = null;
                }
                else {
                    comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
                }
		commentList.add(comm);
	}	
	
	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }
	
    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }
    
    private void handleMultilineCommentEnd() {
    	addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }
    
    private void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.Type.TYPE_MULTILINE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
	private boolean parsePHPDoc(){	
		/*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/
                
                //System.out.println("#######ParsePHPDoc()");
		//return true;
                return false;
	}
	
	
	/*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}*/
	
	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];  
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 116: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
        // we need to parse at least last character of the nowdoc label
        yypushback(3);
        yybegin(ST_END_NOWDOC);
        // we need to remove the closing label from the symbol value.
        Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, label_len - nowdoc_len);
        return sym;
    }
    yypushback(1);
          }
        case 184: break;
        case 169: 
          { return createSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 185: break;
        case 139: 
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 186: break;
        case 26: 
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 187: break;
        case 89: 
          { yypushback(1);
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 188: break;
        case 121: 
          { return createSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 189: break;
        case 168: 
          { return createSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 190: break;
        case 159: 
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 191: break;
        case 152: 
          { return createSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 192: break;
        case 35: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 193: break;
        case 2: 
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 194: break;
        case 155: 
          { return createSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 195: break;
        case 21: 
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 196: break;
        case 114: 
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 197: break;
        case 53: 
          { //	yymore();
          }
        case 198: break;
        case 22: 
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 199: break;
        case 69: 
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 200: break;
        case 86: 
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 201: break;
        case 47: 
          { yypushback(1);
	popState();
	return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 202: break;
        case 13: 
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 203: break;
        case 38: 
          { yypushback(1);
	yybegin(ST_HEREDOC);
          }
        case 204: break;
        case 18: 
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 205: break;
        case 130: 
          { return createSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 206: break;
        case 42: 
          { yypushback(yylength());
    popState();
          }
        case 207: break;
        case 20: 
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 208: break;
        case 32: 
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 209: break;
        case 140: 
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 210: break;
        case 91: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 211: break;
        case 79: 
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 212: break;
        case 180: 
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 213: break;
        case 43: 
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 214: break;
        case 120: 
          { return createSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 215: break;
        case 64: 
          { return createSymbol(ASTPHP5Symbols.T_DO);
          }
        case 216: break;
        case 65: 
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 217: break;
        case 94: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yybegin(ST_NOWDOC);
        yypushback(label_len);
    }
          }
        case 218: break;
        case 76: 
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 219: break;
        case 88: 
          { yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 220: break;
        case 62: 
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 221: break;
        case 148: 
          { return createSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 222: break;
        case 107: 
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 223: break;
        case 103: 
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 224: break;
        case 36: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 225: break;
        case 126: 
          { return createSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 226: break;
        case 111: 
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 227: break;
        case 41: 
          { nowdoc=null;
    nowdoc_len=0;
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 228: break;
        case 131: 
          { return createSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 229: break;
        case 144: 
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 230: break;
        case 54: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 231: break;
        case 85: 
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 232: break;
        case 141: 
          { yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 233: break;
        case 157: 
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 234: break;
        case 51: 
          { popState();
	return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 235: break;
        case 31: 
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 236: break;
        case 16: 
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 237: break;
        case 115: 
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        	yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
	
	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        	yybegin(ST_END_HEREDOC);
        	// we need to remove the closing label from the symbol value.
        	Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        	String value = (String)sym.value;
        	sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 238: break;
        case 25: 
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 239: break;
        case 80: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 240: break;
        case 39: 
          { heredoc = null;
	yybegin(ST_IN_SCRIPTING);
	return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 241: break;
        case 179: 
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 242: break;
        case 14: 
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 243: break;
        case 104: 
          { return createSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 244: break;
        case 98: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 245: break;
        case 138: 
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 246: break;
        case 106: 
          { return createSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 247: break;
        case 67: 
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 248: break;
        case 175: 
          { return createSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 249: break;
        case 68: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 250: break;
        case 135: 
          { return createSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 251: break;
        case 92: 
          { yypushback(1);
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 252: break;
        case 12: 
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 253: break;
        case 3: 
          { // do nothing
          }
        case 254: break;
        case 45: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 255: break;
        case 163: 
          { return createSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 256: break;
        case 15: 
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 257: break;
        case 173: 
          { return createSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 258: break;
        case 97: 
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 259: break;
        case 4: 
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 260: break;
        case 164: 
          { return createSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 261: break;
        case 136: 
          { return createSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 262: break;
        case 119: 
          { return createSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 263: break;
        case 123: 
          { handleCommentStart();
          }
        case 264: break;
        case 122: 
          { return createSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 265: break;
        case 46: 
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 266: break;
        case 83: 
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 267: break;
        case 66: 
          { return createSymbol(ASTPHP5Symbols.T_AS);
          }
        case 268: break;
        case 170: 
          { return createSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 269: break;
        case 50: 
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 270: break;
        case 102: 
          { return createSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 271: break;
        case 55: 
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 272: break;
        case 162: 
          { return createSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 273: break;
        case 118: 
          { return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 274: break;
        case 100: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 275: break;
        case 160: 
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 276: break;
        case 128: 
          { return createSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 277: break;
        case 150: 
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 278: break;
        case 11: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 279: break;
        case 29: 
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 280: break;
        case 182: 
          { handleVarComment();
    return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 281: break;
        case 151: 
          { return createSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 282: break;
        case 90: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 283: break;
        case 132: 
          { return createSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 284: break;
        case 34: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 285: break;
        case 82: 
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 286: break;
        case 23: 
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 287: break;
        case 181: 
          { return createSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 288: break;
        case 154: 
          { return createSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 289: break;
        case 30: 
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 290: break;
        case 7: 
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 291: break;
        case 145: 
          { return createSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 292: break;
        case 105: 
          { return createSymbol(ASTPHP5Symbols.T_USE);
          }
        case 293: break;
        case 147: 
          { return createSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 294: break;
        case 71: 
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 295: break;
        case 134: 
          { return createSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 296: break;
        case 177: 
          { return createSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 297: break;
        case 127: 
          { return createSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 298: break;
        case 84: 
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 299: break;
        case 6: 
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 300: break;
        case 5: 
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 301: break;
        case 52: 
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 302: break;
        case 161: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            nowdoc_len--;
        }
        // first quate
        startString++;
        nowdoc = yytext().substring(startString,nowdoc_len+startString);
        yybegin(ST_START_NOWDOC);
        return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 303: break;
        case 44: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 304: break;
        case 60: 
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 305: break;
        case 99: 
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 306: break;
        case 124: 
          { return createSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 307: break;
        case 17: 
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 308: break;
        case 174: 
          { return createSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 309: break;
        case 108: 
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 310: break;
        case 56: 
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 311: break;
        case 129: 
          { return createSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 312: break;
        case 153: 
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 313: break;
        case 133: 
          { return createSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 314: break;
        case 183: 
          { return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 315: break;
        case 75: 
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 316: break;
        case 158: 
          { return createSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 317: break;
        case 78: 
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 318: break;
        case 113: 
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 319: break;
        case 156: 
          { return createSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 320: break;
        case 112: 
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 321: break;
        case 125: 
          { return createSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 322: break;
        case 117: 
          { int len = yylength();
        yypushback(2); // go back to mark end of comment in the next token
        comment = yytext();
          }
        case 323: break;
        case 167: 
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 324: break;
        case 146: 
          { return createSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 325: break;
        case 149: 
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 326: break;
        case 37: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 327: break;
        case 166: 
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 328: break;
        case 57: 
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 329: break;
        case 109: 
          { return createSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 330: break;
        case 101: 
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 331: break;
        case 24: 
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 332: break;
        case 81: 
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 333: break;
        case 63: 
          { return createSymbol(ASTPHP5Symbols.T_IF);
          }
        case 334: break;
        case 93: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
    } else {
    	   yybegin(ST_HEREDOC);
    }
          }
        case 335: break;
        case 27: 
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 336: break;
        case 178: 
          { return createSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 337: break;
        case 10: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 338: break;
        case 110: 
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 339: break;
        case 73: 
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 340: break;
        case 72: 
          { return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 341: break;
        case 70: 
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 342: break;
        case 19: 
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 343: break;
        case 28: 
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 344: break;
        case 176: 
          { return createSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 345: break;
        case 58: 
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 346: break;
        case 96: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 347: break;
        case 9: 
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 348: break;
        case 59: 
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 349: break;
        case 40: 
          { yypushback(1);
	yybegin(ST_NOWDOC);
          }
        case 350: break;
        case 142: 
          { return createSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 351: break;
        case 77: 
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 352: break;
        case 143: 
          { return createSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 353: break;
        case 74: 
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 354: break;
        case 33: 
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 355: break;
        case 48: 
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 356: break;
        case 1: 
          { return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 357: break;
        case 61: 
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 358: break;
        case 165: 
          { return createSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 359: break;
        case 172: 
          { return createSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 360: break;
        case 87: 
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 361: break;
        case 95: 
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 362: break;
        case 137: 
          { return createSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 363: break;
        case 171: 
          { return createSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 364: break;
        case 49: 
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 365: break;
        case 8: 
          { 
          }
        case 366: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(ASTPHP5Symbols.EOF);
              }
            }
            case 681: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
