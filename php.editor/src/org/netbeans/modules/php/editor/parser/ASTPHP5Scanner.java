/* The following code was generated by JFlex 1.4.3 on 6/7/09 3:06 PM */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.LinkedList;
import java.util.List;
import org.netbeans.modules.php.editor.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import java.io.IOException;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/7/09 3:06 PM from the specification file
 * <tt>/home.local/rmatous/work/netbeans/php53/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 28;
  public static final int ST_START_NOWDOC = 16;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_NOWDOC = 14;
  public static final int ST_LOOKING_FOR_PROPERTY = 20;
  public static final int ST_ONE_LINE_COMMENT = 30;
  public static final int ST_END_NOWDOC = 18;
  public static final int ST_COMMENT = 26;
  public static final int ST_BACKQUOTE = 6;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int ST_START_HEREDOC = 10;
  public static final int YYINITIAL = 0;
  public static final int ST_VAR_OFFSET = 24;
  public static final int ST_LOOKING_FOR_VARNAME = 22;
  public static final int ST_HEREDOC = 8;
  public static final int ST_END_HEREDOC = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\14\2\0\1\12\22\0\1\13\1\62\1\16\1\103"+
    "\1\15\1\66\1\67\1\102\1\54\1\55\1\64\1\4\1\72\1\50"+
    "\1\2\1\65\1\5\11\1\1\52\1\23\1\63\1\61\1\51\1\76"+
    "\1\77\1\40\1\7\1\33\1\27\1\3\1\30\1\45\1\41\1\25"+
    "\1\56\1\44\1\43\1\47\1\32\1\34\1\46\1\60\1\36\1\35"+
    "\1\26\1\31\1\53\1\42\1\6\1\37\1\17\1\73\1\20\1\74"+
    "\1\71\1\57\1\21\1\40\1\7\1\33\1\27\1\3\1\30\1\45"+
    "\1\41\1\25\1\56\1\44\1\43\1\47\1\32\1\34\1\46\1\60"+
    "\1\36\1\101\1\26\1\31\1\53\1\42\1\6\1\37\1\17\1\24"+
    "\1\70\1\100\1\75\67\17\4\22\1\17\5\22\27\17\1\22\37\17"+
    "\1\22\10\17\u0137\10\31\0\162\10\4\0\14\10\16\0\5\10\11\0"+
    "\1\10\213\0\1\10\13\0\1\10\1\0\3\10\1\0\1\10\1\0"+
    "\24\10\1\0\54\10\1\0\46\10\1\0\5\10\4\0\202\10\10\0"+
    "\105\10\1\0\46\10\2\0\2\10\6\0\20\10\41\0\46\10\2\0"+
    "\1\10\7\0\47\10\110\0\33\10\5\0\3\10\56\0\32\10\5\0"+
    "\13\10\25\0\12\11\4\0\2\10\1\0\143\10\1\0\1\10\17\0"+
    "\2\10\7\0\2\10\12\11\3\10\2\0\1\10\20\0\1\10\1\0"+
    "\36\10\35\0\3\10\60\0\46\10\13\0\1\10\u0152\0\66\10\3\0"+
    "\1\10\22\0\1\10\7\0\12\10\4\0\12\11\25\0\10\10\2\0"+
    "\2\10\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\3\0"+
    "\1\10\36\0\2\10\1\0\3\10\4\0\12\11\2\10\23\0\6\10"+
    "\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\37\0\4\10\1\0\1\10\7\0\12\11\2\0\3\10"+
    "\20\0\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\3\0\1\10\22\0\1\10\17\0\2\10\4\0\12\11"+
    "\25\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\3\0\1\10\36\0\2\10\1\0\3\10\4\0\12\11"+
    "\1\0\1\10\21\0\1\10\1\0\6\10\3\0\3\10\1\0\4\10"+
    "\3\0\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10"+
    "\3\0\10\10\1\0\3\10\55\0\11\11\25\0\10\10\1\0\3\10"+
    "\1\0\27\10\1\0\12\10\1\0\5\10\46\0\2\10\4\0\12\11"+
    "\25\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10"+
    "\3\0\1\10\40\0\1\10\1\0\2\10\4\0\12\11\25\0\10\10"+
    "\1\0\3\10\1\0\27\10\1\0\20\10\46\0\2\10\4\0\12\11"+
    "\25\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10"+
    "\72\0\60\10\1\0\2\10\14\0\7\10\11\0\12\11\47\0\2\10"+
    "\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0\4\10"+
    "\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0\2\10"+
    "\1\0\4\10\1\0\2\10\11\0\1\10\2\0\5\10\1\0\1\10"+
    "\11\0\12\11\2\0\2\10\42\0\1\10\37\0\12\11\26\0\10\10"+
    "\1\0\42\10\35\0\4\10\164\0\42\10\1\0\5\10\1\0\2\10"+
    "\25\0\12\11\6\0\6\10\112\0\46\10\12\0\51\10\7\0\132\10"+
    "\5\0\104\10\5\0\122\10\6\0\7\10\1\0\77\10\1\0\1\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\47\10"+
    "\1\0\1\10\1\0\4\10\2\0\37\10\1\0\1\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\7\10"+
    "\1\0\27\10\1\0\37\10\1\0\1\10\1\0\4\10\2\0\7\10"+
    "\1\0\47\10\1\0\23\10\16\0\11\11\56\0\125\10\14\0\u026c\10"+
    "\2\0\10\10\12\0\32\10\5\0\113\10\25\0\15\10\1\0\4\10"+
    "\16\0\22\10\16\0\22\10\16\0\15\10\1\0\3\10\17\0\64\10"+
    "\43\0\1\10\4\0\1\10\3\0\12\11\46\0\12\11\6\0\130\10"+
    "\10\0\51\10\127\0\35\10\51\0\12\11\36\10\2\0\5\10\u038b\0"+
    "\154\10\224\0\234\10\4\0\132\10\6\0\26\10\2\0\6\10\2\0"+
    "\46\10\2\0\6\10\2\0\10\10\1\0\1\10\1\0\1\10\1\0"+
    "\1\10\1\0\37\10\2\0\65\10\1\0\7\10\1\0\1\10\3\0"+
    "\3\10\1\0\7\10\3\0\4\10\2\0\6\10\4\0\15\10\5\0"+
    "\3\10\1\0\7\10\164\0\1\10\15\0\1\10\202\0\1\10\4\0"+
    "\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\4\10\1\0\3\10\1\0\7\10\3\0"+
    "\3\10\5\0\5\10\u0ebb\0\2\10\52\0\5\10\5\0\2\10\4\0"+
    "\126\10\6\0\3\10\1\0\132\10\1\0\4\10\5\0\50\10\4\0"+
    "\136\10\21\0\30\10\70\0\20\10\u0200\0\u19b6\10\112\0\u51a6\10\132\0"+
    "\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10\225\0\7\10\14\0"+
    "\5\10\5\0\1\10\1\0\12\10\1\0\15\10\1\0\5\10\1\0"+
    "\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0"+
    "\100\10\2\0\66\10\50\0\14\10\164\0\5\10\1\0\207\10\23\0"+
    "\12\11\7\0\32\10\6\0\32\10\13\0\131\10\3\0\6\10\2\0"+
    "\6\10\2\0\6\10\2\0\3\10\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\13\0\2\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\4\3\6\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\17\6\1\17\1\20\1\21\1\6\1\22"+
    "\1\23\1\6\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\3\1\44\1\45\1\3\1\46\2\3"+
    "\1\47\2\3\1\50\1\3\2\1\3\3\2\51\1\52"+
    "\3\3\2\53\1\54\1\55\1\56\1\55\1\57\1\60"+
    "\1\61\1\5\1\7\1\61\1\62\1\63\1\64\1\65"+
    "\1\17\1\20\1\21\1\22\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\66\1\41\1\67"+
    "\1\10\1\70\2\3\3\71\2\70\1\0\1\72\1\73"+
    "\1\2\1\74\1\0\1\75\6\6\1\76\1\77\1\0"+
    "\2\6\2\0\1\100\2\0\1\101\2\0\1\102\7\6"+
    "\1\103\13\6\1\104\5\6\1\105\7\6\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\6\12\0\1\6\1\114"+
    "\1\115\2\116\1\117\1\120\1\0\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
    "\4\0\2\100\2\134\1\135\1\136\1\134\3\0\1\100"+
    "\3\137\3\0\2\1\1\100\2\140\1\0\1\141\10\0"+
    "\1\142\1\0\1\143\1\144\1\0\1\145\2\0\1\146"+
    "\1\147\1\150\2\0\1\74\1\0\7\6\1\74\1\151"+
    "\1\6\1\0\5\6\1\152\3\6\1\153\2\6\1\154"+
    "\1\6\1\155\1\156\13\6\1\157\10\6\1\160\1\161"+
    "\12\0\7\6\1\162\1\163\1\164\3\0\1\165\1\0"+
    "\2\124\2\133\1\0\1\166\1\45\1\166\1\47\1\166"+
    "\1\167\1\1\1\167\2\1\1\166\1\170\1\0\1\170"+
    "\1\0\1\144\1\171\2\0\6\6\1\172\1\173\1\6"+
    "\1\174\22\6\1\175\11\6\1\176\1\177\5\6\12\0"+
    "\10\6\4\0\1\200\2\0\1\45\1\47\1\1\2\0"+
    "\1\6\1\201\5\6\1\202\1\203\3\6\1\204\1\6"+
    "\1\205\3\6\1\206\2\6\1\207\2\6\1\210\1\211"+
    "\1\212\1\213\5\6\1\214\1\215\2\6\1\216\2\6"+
    "\4\0\1\217\7\0\10\6\2\220\4\0\4\221\2\222"+
    "\1\0\2\6\1\223\2\6\1\224\4\6\1\225\6\6"+
    "\1\226\1\227\1\230\2\6\1\231\1\232\2\6\3\0"+
    "\1\233\5\0\1\234\1\0\10\6\5\0\1\235\5\6"+
    "\1\236\2\6\1\237\1\240\1\6\1\241\2\6\1\242"+
    "\1\6\1\243\1\6\3\0\1\244\1\0\1\245\1\246"+
    "\7\6\2\247\3\0\3\6\1\250\4\6\1\251\1\6"+
    "\1\252\1\6\1\253\1\6\1\254\1\255\1\256\4\6"+
    "\1\257\1\6\4\0\2\6\1\260\1\261\3\6\1\262"+
    "\1\6\1\263\2\6\1\264\2\6\2\0\1\265\1\266"+
    "\1\6\1\267\1\270\4\6\1\271\2\0\5\6\4\0"+
    "\1\272\1\273\1\274\2\6\1\275\1\0\1\276\1\6"+
    "\1\0\1\6\1\0\1\277\14\0\1\73\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[709];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u04c8\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u0ff0\0\u04c8\0\u04c8"+
    "\0\u1034\0\u04c8\0\u1078\0\u10bc\0\u04c8\0\u1100\0\u1144\0\u1188"+
    "\0\u11cc\0\u1210\0\u04c8\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364"+
    "\0\u13a8\0\u04c8\0\u13ec\0\u04c8\0\u1430\0\u1474\0\u14b8\0\u04c8"+
    "\0\u14fc\0\u04c8\0\u04c8\0\u1540\0\u1584\0\u04c8\0\u15c8\0\u160c"+
    "\0\u04c8\0\u04c8\0\u1650\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u1694"+
    "\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u04c8\0\u04c8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u04c8\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u04c8\0\u04c8\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1034\0\u1cb0\0\u07b4\0\u1cf4\0\u04c8"+
    "\0\u1d38\0\u1d7c\0\u06e8\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u06e8\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u06e8\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u06e8\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u04c8\0\u04c8\0\u04c8\0\u25b8"+
    "\0\u04c8\0\u04c8\0\u25fc\0\u2640\0\u0d04\0\u2684\0\u26c8\0\u270c"+
    "\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u04c8\0\u28e8"+
    "\0\u292c\0\u04c8\0\u04c8\0\u2970\0\u29b4\0\u04c8\0\u04c8\0\u29f8"+
    "\0\u2a3c\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u04c8\0\u2a80"+
    "\0\u2ac4\0\u2b08\0\u1100\0\u2b4c\0\u2b90\0\u2bd4\0\u2b08\0\u04c8"+
    "\0\u04c8\0\u04c8\0\u2b4c\0\u2c18\0\u1210\0\u2c5c\0\u2ca0\0\u2c18"+
    "\0\u04c8\0\u2c5c\0\u2ce4\0\u1364\0\u2d28\0\u2d6c\0\u2db0\0\u2df4"+
    "\0\u2ce4\0\u2d28\0\u13ec\0\u04c8\0\u2e38\0\u1430\0\u14b8\0\u1474"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u14fc\0\u04c8\0\u2f48\0\u04c8\0\u2f8c"+
    "\0\u2fd0\0\u04c8\0\u171c\0\u3014\0\u04c8\0\u04c8\0\u04c8\0\u3058"+
    "\0\u309c\0\u30e0\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234"+
    "\0\u3278\0\u32bc\0\u1ba0\0\u06e8\0\u3300\0\u3344\0\u3388\0\u33cc"+
    "\0\u3410\0\u3454\0\u3498\0\u06e8\0\u34dc\0\u3520\0\u3564\0\u06e8"+
    "\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u06e8\0\u06e8\0\u36b8\0\u36fc"+
    "\0\u3740\0\u3784\0\u37c8\0\u380c\0\u3850\0\u3894\0\u38d8\0\u391c"+
    "\0\u3960\0\u06e8\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8"+
    "\0\u3b3c\0\u3b80\0\u04c8\0\u06e8\0\u3bc4\0\u3c08\0\u3c4c\0\u3c90"+
    "\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4\0\u3e28\0\u3e6c\0\u3eb0"+
    "\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004\0\u04c8\0\u04c8\0\u04c8"+
    "\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u04c8\0\u41e0"+
    "\0\u04c8\0\u4224\0\u04c8\0\u4268\0\u1078\0\u42ac\0\u1188\0\u04c8"+
    "\0\u42f0\0\u12dc\0\u4334\0\u4378\0\u1298\0\u04c8\0\u43bc\0\u14b8"+
    "\0\u4400\0\u2fd0\0\u04c8\0\u4444\0\u4488\0\u44cc\0\u4510\0\u4554"+
    "\0\u4598\0\u45dc\0\u4620\0\u06e8\0\u4664\0\u46a8\0\u06e8\0\u46ec"+
    "\0\u4730\0\u4774\0\u47b8\0\u47fc\0\u4840\0\u4884\0\u48c8\0\u490c"+
    "\0\u4950\0\u4994\0\u49d8\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c"+
    "\0\u4b70\0\u06e8\0\u4bb4\0\u4bf8\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08"+
    "\0\u4d4c\0\u4d90\0\u4dd4\0\u06e8\0\u06e8\0\u4e18\0\u4e5c\0\u4ea0"+
    "\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038\0\u507c\0\u50c0"+
    "\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214\0\u5258\0\u529c\0\u52e0"+
    "\0\u5324\0\u5368\0\u53ac\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500"+
    "\0\u04c8\0\u5544\0\u5588\0\u55cc\0\u5610\0\u5654\0\u5698\0\u56dc"+
    "\0\u5720\0\u06e8\0\u5764\0\u57a8\0\u57ec\0\u5830\0\u5874\0\u06e8"+
    "\0\u06e8\0\u58b8\0\u58fc\0\u5940\0\u06e8\0\u5984\0\u06e8\0\u59c8"+
    "\0\u5a0c\0\u5a50\0\u06e8\0\u5a94\0\u5ad8\0\u06e8\0\u5b1c\0\u5b60"+
    "\0\u06e8\0\u06e8\0\u06e8\0\u06e8\0\u5ba4\0\u5be8\0\u5c2c\0\u5c70"+
    "\0\u5cb4\0\u06e8\0\u06e8\0\u5cf8\0\u5d3c\0\u06e8\0\u5d80\0\u5dc4"+
    "\0\u5e08\0\u5e4c\0\u5e90\0\u5ed4\0\u04c8\0\u5f18\0\u5f5c\0\u5fa0"+
    "\0\u5fe4\0\u6028\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u617c\0\u61c0"+
    "\0\u6204\0\u6248\0\u628c\0\u62d0\0\u6314\0\u04c8\0\u6358\0\u639c"+
    "\0\u63e0\0\u6424\0\u04c8\0\u1078\0\u1188\0\u1298\0\u6468\0\u04c8"+
    "\0\u64ac\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u6600\0\u06e8\0\u6644"+
    "\0\u6688\0\u66cc\0\u6710\0\u06e8\0\u6754\0\u6798\0\u67dc\0\u6820"+
    "\0\u6864\0\u68a8\0\u06e8\0\u06e8\0\u06e8\0\u68ec\0\u6930\0\u06e8"+
    "\0\u06e8\0\u6974\0\u69b8\0\u69fc\0\u6a40\0\u6a84\0\u04c8\0\u6ac8"+
    "\0\u6b0c\0\u6b50\0\u6b94\0\u6bd8\0\u04c8\0\u6c1c\0\u6c60\0\u6ca4"+
    "\0\u6ce8\0\u6d2c\0\u6d70\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u6ec4"+
    "\0\u6f08\0\u6f4c\0\u6f90\0\u06e8\0\u6fd4\0\u7018\0\u705c\0\u70a0"+
    "\0\u70e4\0\u7128\0\u716c\0\u71b0\0\u06e8\0\u06e8\0\u71f4\0\u06e8"+
    "\0\u7238\0\u727c\0\u72c0\0\u7304\0\u06e8\0\u7348\0\u738c\0\u73d0"+
    "\0\u7414\0\u04c8\0\u7458\0\u04c8\0\u06e8\0\u749c\0\u74e0\0\u7524"+
    "\0\u7568\0\u75ac\0\u75f0\0\u7634\0\u7678\0\u04c8\0\u76bc\0\u7700"+
    "\0\u7744\0\u7788\0\u77cc\0\u7810\0\u06e8\0\u7854\0\u7898\0\u78dc"+
    "\0\u7920\0\u06e8\0\u7964\0\u06e8\0\u79a8\0\u06e8\0\u79ec\0\u04c8"+
    "\0\u04c8\0\u06e8\0\u7a30\0\u7a74\0\u7ab8\0\u7afc\0\u06e8\0\u7b40"+
    "\0\u7b84\0\u7bc8\0\u7c0c\0\u7c50\0\u7c94\0\u7cd8\0\u06e8\0\u06e8"+
    "\0\u7d1c\0\u7d60\0\u7da4\0\u06e8\0\u7de8\0\u06e8\0\u7e2c\0\u7e70"+
    "\0\u06e8\0\u7eb4\0\u7ef8\0\u7f3c\0\u7f80\0\u06e8\0\u06e8\0\u7fc4"+
    "\0\u06e8\0\u06e8\0\u8008\0\u804c\0\u8090\0\u80d4\0\u06e8\0\u8118"+
    "\0\u815c\0\u81a0\0\u81e4\0\u8228\0\u826c\0\u82b0\0\u82f4\0\u8338"+
    "\0\u837c\0\u83c0\0\u06e8\0\u06e8\0\u06e8\0\u8404\0\u8448\0\u04c8"+
    "\0\u848c\0\u06e8\0\u84d0\0\u8514\0\u8558\0\u859c\0\u06e8\0\u85e0"+
    "\0\u8624\0\u8668\0\u86ac\0\u86f0\0\u8734\0\u8778\0\u87bc\0\u8800"+
    "\0\u8844\0\u8888\0\u88cc\0\u04c8\0\u8910";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[709];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\63\21\1\22\20\21\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\23\3\34\1\35\1\36"+
    "\1\33\1\37\1\40\1\23\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\33\1\55\1\33\1\56\1\57\1\33\1\60\1\61"+
    "\1\33\1\62\1\63\1\64\1\65\1\66\1\67\1\33"+
    "\1\70\1\33\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\53\1\111\1\112\15\113\1\114\1\115"+
    "\1\113\1\116\3\113\1\117\57\113\15\120\1\121\2\120"+
    "\1\122\1\123\2\120\1\124\57\120\12\125\1\126\1\125"+
    "\1\126\1\127\2\125\1\130\3\125\1\131\57\125\3\132"+
    "\1\133\2\132\3\133\6\132\1\133\5\132\23\133\3\132"+
    "\1\133\2\132\3\133\20\132\1\133\2\132\104\134\3\135"+
    "\1\136\2\135\2\136\2\135\1\137\1\135\1\137\2\135"+
    "\1\136\2\135\1\23\2\135\23\136\3\135\1\136\2\135"+
    "\3\136\20\135\1\136\2\135\3\140\1\141\2\140\3\141"+
    "\6\140\1\141\5\140\23\141\3\140\1\141\2\140\3\141"+
    "\20\140\1\141\2\140\104\142\3\143\1\144\2\143\3\144"+
    "\1\143\3\34\2\143\1\144\5\143\23\144\1\145\2\143"+
    "\1\144\2\143\3\144\20\143\1\144\2\143\3\146\1\147"+
    "\2\146\3\147\6\146\1\147\5\146\23\147\3\146\1\147"+
    "\2\146\3\147\20\146\1\147\2\146\1\23\1\150\1\151"+
    "\1\33\1\152\1\153\3\33\1\23\3\154\1\35\1\155"+
    "\1\33\1\154\1\156\1\23\1\41\1\157\23\33\1\160"+
    "\1\161\1\162\1\33\1\163\1\67\3\33\1\164\1\165"+
    "\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\102"+
    "\1\103\1\175\1\105\1\176\1\107\1\177\1\33\2\154"+
    "\64\200\1\201\17\200\64\202\1\203\17\202\12\204\1\205"+
    "\1\204\1\206\34\204\1\207\14\204\1\210\7\204\1\210"+
    "\5\204\63\21\1\211\103\21\1\0\2\21\1\212\7\21"+
    "\1\213\2\21\1\214\2\21\105\0\1\24\1\215\1\216"+
    "\1\0\1\24\77\0\1\215\3\0\1\215\53\0\1\217"+
    "\23\0\1\33\1\0\1\33\1\0\1\33\1\220\3\33"+
    "\5\0\1\33\5\0\5\33\1\221\1\222\7\33\1\223"+
    "\3\33\1\224\3\0\1\225\2\0\3\33\20\0\1\33"+
    "\6\0\1\226\54\0\1\227\23\0\1\24\1\215\1\216"+
    "\1\0\1\24\1\230\76\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\7\33\1\231\13\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\4\0\1\36\1\33\5\0\11\33"+
    "\1\232\11\33\3\0\1\33\2\0\3\33\2\0\1\233"+
    "\15\0\1\33\1\234\2\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\14\0\3\34\72\0\1\235\2\0"+
    "\3\235\6\0\1\235\5\0\23\235\3\0\1\235\2\0"+
    "\3\235\20\0\1\235\2\0\15\236\1\237\1\240\1\236"+
    "\1\241\3\236\1\242\57\236\1\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\3\33\1\243\1\33"+
    "\1\244\2\33\1\245\11\33\1\246\3\0\1\33\2\0"+
    "\3\33\20\0\1\245\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\11\33\1\247\2\33\1\250"+
    "\6\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\251\1\0\5\33\5\0\1\33\5\0"+
    "\1\252\6\33\1\253\13\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\254\3\33\1\255\2\33\1\256"+
    "\13\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\5\33\1\257\2\33\1\260\12\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\260\3\0\1\33\1\0\1\261\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\262\7\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\3\33\1\263"+
    "\3\33\1\264\3\33\1\265\2\33\1\266\4\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\11\33\1\267"+
    "\11\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\270\13\33\1\271\5\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\272\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\2\33\1\273\2\33\5\0\1\33\5\0\5\33\1\274"+
    "\2\33\1\275\1\276\11\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\275\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\14\33\1\277\6\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\300\22\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\7\33\1\301"+
    "\6\33\1\302\4\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\4\33\1\303\4\33\1\304\11\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\52\0\1\305\1\306"+
    "\7\0\1\307\73\0\1\310\7\0\1\311\74\0\1\312"+
    "\32\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\13\33\1\313\7\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\11\0\1\314\3\0\1\315\11\0\1\316"+
    "\1\0\1\317\1\320\1\321\2\0\1\322\1\323\1\324"+
    "\1\0\1\325\40\0\1\323\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\23\33\3\0\1\33"+
    "\2\0\1\33\1\326\1\33\20\0\1\33\53\0\1\327"+
    "\7\0\1\330\103\0\1\331\73\0\1\332\7\0\1\333"+
    "\1\0\1\334\1\0\1\335\77\0\1\336\103\0\1\337"+
    "\2\0\1\340\1\112\67\0\1\341\7\0\1\342\103\0"+
    "\1\343\5\0\1\344\75\0\1\345\6\0\1\346\74\0"+
    "\1\347\73\0\1\350\32\0\20\234\1\351\61\234\1\240"+
    "\1\234\15\113\1\352\1\0\1\113\1\353\3\113\1\354"+
    "\62\113\1\355\2\113\2\355\1\356\4\113\1\357\1\360"+
    "\1\355\1\353\1\113\1\0\1\113\1\361\23\355\3\113"+
    "\1\355\2\113\3\355\20\113\1\355\123\113\1\362\1\360"+
    "\1\113\1\353\3\113\1\363\57\113\15\120\1\364\2\120"+
    "\1\365\1\0\2\120\1\366\62\120\1\355\2\120\2\355"+
    "\1\367\4\120\1\370\1\120\1\355\1\365\1\371\1\0"+
    "\1\120\1\361\23\355\3\120\1\355\2\120\3\355\20\120"+
    "\1\355\123\120\1\362\2\120\1\365\1\371\2\120\1\372"+
    "\57\120\12\125\1\126\1\125\1\126\1\373\2\125\1\374"+
    "\3\125\1\375\62\125\1\376\2\125\2\376\1\377\1\125"+
    "\1\126\1\125\1\126\1\373\1\125\1\376\1\374\1\125"+
    "\1\0\1\125\1\375\23\376\3\125\1\376\2\125\3\376"+
    "\20\125\1\376\5\125\1\355\2\125\2\355\1\u0100\1\125"+
    "\1\126\1\125\1\126\1\u0101\1\125\1\355\1\374\1\125"+
    "\1\0\1\125\1\361\23\355\3\125\1\355\2\125\3\355"+
    "\20\125\1\355\14\125\1\126\1\125\1\126\101\125\1\126"+
    "\1\125\1\126\1\362\2\125\1\374\3\125\1\u0102\57\125"+
    "\1\0\1\u0103\1\0\1\u0103\1\0\5\u0103\1\u0104\1\0"+
    "\1\u0104\2\0\1\u0103\3\0\1\u0105\1\0\23\u0103\3\0"+
    "\1\u0103\2\0\3\u0103\20\0\1\u0103\2\0\12\u0106\1\u0107"+
    "\1\u0106\1\u0107\70\u0106\1\u0108\1\u0106\1\u0108\1\u0106\3\u0108"+
    "\2\u0106\1\0\1\u0106\1\0\2\u0106\1\u0108\2\u0106\1\0"+
    "\1\u0109\1\u0106\23\u0108\3\u0106\1\u0108\2\u0106\3\u0108\20\u0106"+
    "\1\u0108\5\u0106\1\u010a\2\u0106\2\u010a\1\u010b\1\u0106\1\u0107"+
    "\1\u0106\1\u0107\2\u0106\1\u010a\2\u0106\1\0\2\u0106\23\u010a"+
    "\3\u0106\1\u010a\2\u0106\3\u010a\20\u0106\1\u010a\2\u0106\1\0"+
    "\1\u010c\1\0\1\u010c\1\0\5\u010c\1\u010d\1\0\1\u010d"+
    "\2\0\1\u010c\3\0\1\u010e\1\0\23\u010c\3\0\1\u010c"+
    "\2\0\3\u010c\20\0\1\u010c\3\0\1\144\1\0\1\144"+
    "\1\0\5\144\5\0\1\144\5\0\23\144\3\0\1\144"+
    "\2\0\3\144\20\0\1\144\53\0\1\u010f\33\0\1\147"+
    "\1\0\1\147\1\0\5\147\5\0\1\147\5\0\23\147"+
    "\3\0\1\147\2\0\3\147\20\0\1\147\3\0\1\150"+
    "\3\0\1\150\77\0\1\u0110\3\0\1\u0110\1\u0111\75\0"+
    "\64\200\1\0\17\200\65\0\1\u0112\16\0\64\u0113\1\u0114"+
    "\103\u0113\1\u0114\1\u0115\16\u0113\12\204\1\205\1\204\1\206"+
    "\34\204\1\206\14\204\1\206\7\204\1\206\5\204\14\0"+
    "\1\206\140\0\1\u0116\32\0\63\21\1\0\2\21\1\0"+
    "\7\21\1\0\2\21\1\0\2\21\61\0\1\u0117\70\0"+
    "\1\u0118\12\0\1\u0117\55\0\1\u0119\51\0\1\215\1\0"+
    "\1\216\1\0\1\215\77\0\1\u011a\2\0\1\u011b\1\u011a"+
    "\42\0\1\u011b\34\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\u011c\1\u011d\21\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\2\33\1\u011e\20\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\14\33"+
    "\1\u011f\6\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\10\33\1\u0120\12\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\u0120\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\21\33\1\u0121\1\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\13\33\1\u0122\7\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\u0123"+
    "\1\0\1\u0123\1\0\1\u0123\1\0\1\u0123\17\0\2\u0123"+
    "\2\0\1\u0123\4\0\1\u0123\44\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\11\33\1\u0124\11\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\u0125\1\0\5\33\5\0\1\33\5\0\23\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\65\0\1\u0126"+
    "\21\0\1\235\1\0\1\235\1\0\5\235\5\0\1\235"+
    "\5\0\23\235\3\0\1\235\2\0\3\235\20\0\1\235"+
    "\2\0\3\236\1\0\2\236\2\0\5\236\1\237\1\240"+
    "\1\0\1\241\1\236\1\0\1\236\24\0\3\236\1\0"+
    "\2\236\3\0\20\236\1\0\123\236\1\0\1\240\1\236"+
    "\1\241\3\236\1\242\57\236\1\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\33\1\u0127\4\33"+
    "\1\u0128\1\33\1\u0129\12\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\u0129\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\10\33\1\u012a\12\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\u012a\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\21\33\1\u012b\1\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\12\33"+
    "\1\u012c\10\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\11\33\1\u012d\11\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\3\33\1\u012e\2\33\1\u012f\14\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\u0130\1\0\5\33\5\0\1\33\5\0\23\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\5\33"+
    "\1\u0131\15\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\5\33\1\u0132\15\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\11\33\1\u0133\11\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\10\33\1\u0134\12\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\u0134\3\0\1\33"+
    "\1\0\1\u0135\1\0\5\33\5\0\1\33\5\0\23\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\15\33"+
    "\1\u0136\5\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\22\33\1\u0137\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\4\33\1\255\16\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\5\33\1\u0138\15\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\33\1\u0139"+
    "\6\33\1\u013a\12\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\u013a\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\7\33\1\u013b\3\33\1\u013c\7\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\13\33\1\u013d"+
    "\7\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\u013e\22\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\33\1\u013f\21\33\3\0\1\33\2\0\2\33"+
    "\1\u0140\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u0141\12\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\u0141\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\2\33\1\u0142"+
    "\20\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\11\33\1\u0143\11\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\u0144\22\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\10\33\1\u0145\12\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\u0145\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\33\1\u0146\21\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\7\33"+
    "\1\u0147\13\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\2\33\1\u0148\2\33"+
    "\5\0\1\33\5\0\23\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\u0149\6\33\1\u014a\13\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\63\0\1\u014b\23\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\11\33\1\u014c\11\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\27\0\1\u014d\6\0\1\u014e\101\0\1\u014f\105\0"+
    "\1\u0150\112\0\1\u0151\72\0\1\u0152\60\0\1\u0153\122\0"+
    "\1\u0154\60\0\1\u0155\136\0\1\u0156\46\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\2\33\1\u0157"+
    "\1\u0158\1\33\1\u0159\1\u015a\5\33\1\u015b\1\33\1\u015c"+
    "\3\33\1\u015d\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\63\0\1\u015e\103\0\1\u015f\103\0\1\u0160\1\0\1\u0161"+
    "\55\0\1\u0162\43\0\1\u0162\14\0\3\u0163\47\0\1\u0164"+
    "\12\0\1\u0165\16\0\1\u0166\1\0\1\u0167\101\0\1\u0168"+
    "\1\0\1\u0169\67\0\104\234\3\113\1\0\2\113\2\0"+
    "\5\113\1\357\1\360\1\0\1\353\1\113\1\0\1\113"+
    "\24\0\3\113\1\0\2\113\3\0\20\113\1\0\17\113"+
    "\1\0\1\360\1\113\1\353\3\113\1\363\57\113\1\0"+
    "\1\355\1\0\1\355\1\0\5\355\5\0\1\355\5\0"+
    "\23\355\1\u016a\2\0\1\355\2\0\3\355\12\0\1\u016b"+
    "\5\0\1\355\2\0\1\113\1\356\1\113\1\356\1\113"+
    "\5\356\3\113\1\352\1\0\1\356\1\353\3\113\1\354"+
    "\23\356\1\u016c\2\113\1\356\2\113\3\356\12\113\1\u016d"+
    "\5\113\1\356\2\113\3\120\1\0\2\120\2\0\5\120"+
    "\1\370\1\120\1\0\1\365\1\371\1\0\1\120\24\0"+
    "\3\120\1\0\2\120\3\0\20\120\1\0\17\120\1\0"+
    "\2\120\1\365\1\371\2\120\1\372\60\120\1\367\1\120"+
    "\1\367\1\120\5\367\3\120\1\364\1\120\1\367\1\365"+
    "\1\0\2\120\1\366\23\367\1\u016e\2\120\1\367\2\120"+
    "\3\367\12\120\1\u016f\5\120\1\367\2\120\3\125\1\0"+
    "\2\125\2\0\2\125\1\126\1\125\1\126\1\u0101\1\125"+
    "\1\0\1\374\1\125\1\0\1\125\24\0\3\125\1\0"+
    "\2\125\3\0\20\125\1\0\14\125\1\126\1\125\1\126"+
    "\1\0\2\125\1\374\3\125\1\u0102\60\125\1\376\1\125"+
    "\1\376\1\125\3\376\2\377\1\u0170\1\125\1\u0170\1\373"+
    "\1\125\1\376\1\374\1\125\1\0\1\u0171\1\375\23\376"+
    "\3\125\1\376\2\125\3\376\20\125\1\376\3\125\1\377"+
    "\1\125\1\377\1\125\5\377\1\u0172\1\125\1\u0172\1\373"+
    "\1\125\1\377\1\374\2\125\1\u0173\1\375\23\377\3\125"+
    "\1\377\2\125\3\377\20\125\1\377\3\125\1\u0100\1\125"+
    "\1\u0100\1\125\5\u0100\1\126\1\125\1\126\1\373\1\125"+
    "\1\u0100\1\374\3\125\1\375\23\u0100\1\u0174\2\125\1\u0100"+
    "\2\125\3\u0100\12\125\1\u0175\5\125\1\u0100\2\125\12\0"+
    "\1\u0104\1\0\1\u0104\67\0\12\u0106\1\0\1\u0106\1\0"+
    "\70\u0106\1\u010a\1\u0106\1\u010a\1\u0106\3\u010a\2\u010b\1\u0176"+
    "\1\u0106\1\u0176\2\u0106\1\u010a\2\u0106\1\0\1\u0177\1\u0106"+
    "\23\u010a\3\u0106\1\u010a\2\u0106\3\u010a\20\u0106\1\u010a\3\u0106"+
    "\1\u010b\1\u0106\1\u010b\1\u0106\5\u010b\1\u0178\1\u0106\1\u0178"+
    "\2\u0106\1\u010b\3\u0106\1\u0179\1\u0106\23\u010b\3\u0106\1\u010b"+
    "\2\u0106\3\u010b\20\u0106\1\u010b\2\u0106\12\0\1\u010d\1\0"+
    "\1\u010d\70\0\1\u0110\3\0\1\u0110\77\0\1\u017a\1\0"+
    "\1\u017a\1\0\1\u017a\1\0\1\u017a\17\0\2\u017a\2\0"+
    "\1\u017a\4\0\1\u017a\43\0\64\u0113\1\u0114\1\u017b\16\u0113"+
    "\41\0\1\u017c\100\0\1\u017d\46\0\1\u011a\3\0\1\u011a"+
    "\77\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\33\1\u0130\21\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\u017e\1\0\5\33"+
    "\5\0\1\33\5\0\23\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\u017f\1\33\1\u0180\1\u0181\4\33"+
    "\1\u0182\4\33\1\u0183\5\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\u0182\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\7\33\1\u0184\13\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\u0185"+
    "\1\0\5\33\5\0\1\33\5\0\23\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\33\1\u0186\21\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\16\33"+
    "\1\u0187\4\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\13\33\1\u0188\7\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\65\0\1\u0161\21\0\1\33\1\0\1\u0189"+
    "\1\0\5\33\5\0\1\33\5\0\23\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\16\33\1\u018a\4\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\33"+
    "\1\u018b\21\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\u018c\1\0\5\33\5\0\1\33"+
    "\5\0\23\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\16\33\1\u018d\4\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\7\33\1\u018e\13\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\u018f\12\33\1\u0190"+
    "\7\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\u0191\4\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\13\33\1\u0192\7\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u0193\14\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0194\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0195\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0196\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\33\1\u0197"+
    "\6\33\1\u0198\12\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\u0198\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u0199\14\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u019a\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\5\33\1\u019b\15\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\10\33\1\u019c"+
    "\12\33\3\0\1\33\2\0\3\33\20\0\1\u019c\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u019d\21\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u019e\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\4\33\1\u019f\16\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\4\33\1\u01a0"+
    "\16\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u01a1\21\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\13\33\1\u01a2\7\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\16\33\1\u01a3\4\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\33\1\u01a4"+
    "\21\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u01a5\13\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\2\33\1\u01a6"+
    "\2\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\16\33\1\u01a7\4\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\5\33\1\u01a8"+
    "\15\33\3\0\1\u01a9\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u01aa\21\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\34\0\1\u01ab\105\0\1\u01ac\75\0\1\u01ad\106\0"+
    "\1\u01ae\106\0\1\u01af\104\0\1\u01b0\43\0\1\u01b0\60\0"+
    "\1\u01b1\63\0\1\u01b2\105\0\1\u01b3\101\0\1\u01b4\46\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\u01b5\22\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\u01b6\3\33\1\u01b7\16\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u01b8\7\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\16\33\1\u01b9"+
    "\4\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\13\33\1\u01ba\7\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\u01bb\22\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\u01bc\1\0\5\33"+
    "\5\0\1\33\5\0\23\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\5\0\1\u01bd\2\0\3\u01bd\2\0\1\u0161"+
    "\2\0\1\u01be\1\u01bd\5\0\23\u01bd\3\0\1\u01bd\2\0"+
    "\3\u01bd\20\0\1\u01bd\1\u01bf\34\0\1\u01c0\62\0\3\u0163"+
    "\62\0\1\u0165\71\0\1\u01c1\71\0\1\u01c2\44\0\1\u0167"+
    "\103\0\1\u0169\140\0\1\u01c3\32\0\15\113\1\352\1\0"+
    "\1\113\1\353\3\113\1\354\24\113\1\u01c4\32\113\15\120"+
    "\1\364\2\120\1\365\1\0\2\120\1\366\24\120\1\u01c5"+
    "\32\120\12\125\1\u0170\1\125\1\u0170\1\373\2\125\1\374"+
    "\3\125\1\375\71\125\1\u0172\1\125\1\u0172\1\373\2\125"+
    "\1\374\3\125\1\375\71\125\1\126\1\125\1\126\1\373"+
    "\2\125\1\374\3\125\1\375\24\125\1\u01c6\32\125\12\u0106"+
    "\1\u0176\1\u0106\1\u0176\101\u0106\1\u0178\1\u0106\1\u0178\67\u0106"+
    "\46\0\1\u01c7\62\0\1\u01c8\57\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\5\33\1\u01c9\15\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\3\33"+
    "\1\u01ca\17\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\u01cb\1\0\5\33\5\0\1\33"+
    "\5\0\23\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\7\33\1\u01cc\13\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\15\33\1\u01cd\5\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\14\33\1\u01ce\6\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\u01cf"+
    "\22\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\12\33\1\u01d0\10\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\17\33\1\u01d1\3\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\11\33\1\u01d2\11\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\4\33\1\u01d3"+
    "\16\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\13\33\1\u01d4\7\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u01d5\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u01d6\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\15\33\1\u01d7\5\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\5\33\1\u01d8"+
    "\15\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\4\33\1\u01d9\16\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\13\33\1\u01da\7\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\16\33\1\u01db\4\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\33\1\u01dc"+
    "\21\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\13\33\1\u01dd\7\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u01de\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u01df\12\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\u01df\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\u01e0\22\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\33"+
    "\1\u01e1\21\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\14\33\1\u01e2\6\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\u01e3\1\0\5\33"+
    "\5\0\1\33\5\0\23\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\10\33\1\u01e4\12\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\u01e4\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\u01e5\22\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\6\33\1\u01e6"+
    "\14\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\11\33\1\u01e7\11\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\u01e8\22\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\11\33\1\u01e9\11\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\12\33\1\u01ea\10\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\u01eb\1\0\5\33\5\0\1\33\5\0\23\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\13\33"+
    "\1\u01ec\7\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\1\u01ed\22\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u01ee\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u01ef\7\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u01f0\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\42\0\1\u01f1\106\0"+
    "\1\u01f2\43\0\1\u01f3\7\0\1\u01f4\41\0\1\u01f5\35\0"+
    "\1\u01f6\134\0\1\u01f7\46\0\1\u01f8\103\0\1\u01f9\125\0"+
    "\1\u01fa\121\0\1\u01fb\100\0\1\u01fc\44\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\11\33\1\u01fd"+
    "\11\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\u01fe\4\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\5\33\1\u01ff\15\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\22\33\1\u0200\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\13\33\1\u0201\7\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\16\33"+
    "\1\u0202\4\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\5\33\1\u0203\15\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\1\33\1\u0204\21\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\u01bd\1\0\1\u01bd"+
    "\1\0\5\u01bd\1\u0205\1\0\1\u0206\2\0\1\u01bd\5\0"+
    "\23\u01bd\3\0\1\u01bd\2\0\3\u01bd\20\0\1\u01bd\5\0"+
    "\1\u0207\2\0\3\u0207\6\0\1\u0207\5\0\23\u0207\3\0"+
    "\1\u0207\2\0\3\u0207\20\0\1\u0207\5\0\1\u0208\2\0"+
    "\3\u0208\6\0\1\u0208\5\0\23\u0208\3\0\1\u0208\2\0"+
    "\3\u0208\20\0\1\u0208\40\0\1\u0209\105\0\1\u020a\46\0"+
    "\1\u020b\2\0\2\u020b\7\0\1\u020b\2\0\1\u020b\2\0"+
    "\23\u020b\3\0\1\u020b\2\0\3\u020b\20\0\1\u020b\2\0"+
    "\3\113\1\u020c\2\113\2\u020c\5\113\1\352\1\0\1\u020c"+
    "\1\353\1\113\1\u020c\1\113\1\354\23\u020c\3\113\1\u020c"+
    "\2\113\3\u020c\20\113\1\u020c\2\113\3\120\1\u020d\2\120"+
    "\2\u020d\5\120\1\364\1\120\1\u020d\1\365\1\0\1\u020d"+
    "\1\120\1\366\23\u020d\3\120\1\u020d\2\120\3\u020d\20\120"+
    "\1\u020d\2\120\3\125\1\u020e\2\125\2\u020e\2\125\1\126"+
    "\1\125\1\126\1\373\1\125\1\u020e\1\374\1\125\1\u020e"+
    "\1\125\1\375\23\u020e\3\125\1\u020e\2\125\3\u020e\20\125"+
    "\1\u020e\2\125\12\0\1\u020f\2\u0210\135\0\1\u0211\36\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\2\33\1\u0212\20\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u0213\14\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\11\33\1\u0214\11\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\u0215\22\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\1\u0216"+
    "\22\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\3\33\1\u0217\17\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\3\33\1\u0218\17\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\2\33\1\u0219\20\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\5\33\1\u021a"+
    "\15\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\22\33\1\u021b\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\u021c\1\0\5\33\5\0\1\33"+
    "\5\0\23\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\16\33\1\u021d\4\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\11\33\1\u021e\11\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\u021f\22\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\6\33\1\u0220"+
    "\14\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\21\33\1\u0221\1\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\5\33\1\u0222\15\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u0223\14\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\14\33\1\u0224"+
    "\6\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\5\33\1\u0225\15\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\11\33\1\u0226\11\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u0227\7\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\16\33\1\u0228"+
    "\4\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\6\33\1\u0229\14\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u022a\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u022b\14\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\40\0\1\u022c\50\0"+
    "\1\u022d\7\0\1\u022e\41\0\1\u022f\73\0\1\u0230\51\0"+
    "\1\u01f4\41\0\1\u01f5\71\0\1\u0231\66\0\1\u01fb\103\0"+
    "\1\u0232\110\0\1\u0233\102\0\1\u0234\64\0\1\u01fb\41\0"+
    "\1\u0235\65\0\1\u0236\45\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\1\33\1\u0237\1\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0238\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\6\33\1\u0239"+
    "\14\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u023a\1\0\5\33\5\0\1\33\5\0"+
    "\23\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\10\33\1\u023b\12\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\u023b\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u023c\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u023d\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\14\33\1\u023e\6\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\16\0\1\u0206\70\0"+
    "\1\u0207\1\0\1\u0207\1\0\5\u0207\4\0\1\u023f\1\u0207"+
    "\5\0\23\u0207\3\0\1\u0207\2\0\3\u0207\20\0\1\u0207"+
    "\3\0\1\u0208\1\0\1\u0208\1\0\5\u0208\5\0\1\u0208"+
    "\5\0\23\u0208\3\0\1\u0208\2\0\3\u0208\20\0\1\u0208"+
    "\1\u0240\26\0\1\u0241\114\0\1\u0242\61\0\1\u0210\115\0"+
    "\1\u0243\56\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\10\33\1\u0244\12\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\u0244\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\16\33\1\u0245\4\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0246\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\33\1\u0247"+
    "\21\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\16\33\1\u0248\4\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\13\33\1\u0249\7\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u024a\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u024b\14\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u024c\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\1\33\1\u024d"+
    "\21\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u024e\1\0\5\33\5\0\1\33\5\0"+
    "\23\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u024f\13\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\14\33\1\u0250\6\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u0251\7\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\4\33\1\u0252"+
    "\16\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u0253\1\0\5\33\5\0\1\33\5\0"+
    "\23\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\6\33\1\u0254\14\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u0255\1\0\5\33\5\0"+
    "\1\33\5\0\23\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u0256\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\41\0\1\u0257\104\0\1\u0258\56\0"+
    "\1\u022e\41\0\1\u022f\31\0\1\u0259\103\0\1\u01fb\113\0"+
    "\1\u0232\41\0\1\u025a\54\0\1\u025b\122\0\1\u0257\51\0"+
    "\1\u0236\41\0\1\u025c\27\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\1\33\1\u025d\1\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\1\33\1\u025e\1\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\1\33\1\u025f\21\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\10\33\1\u0260\12\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\u0260\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\10\33\1\u0261\12\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\u0261\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\1\33\1\u0262\1\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\23\33\3\0\1\33\2\0\1\33\1\u0263\1\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\7\33\1\u0264\13\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\14\0\1\u0205\1\0\1\u0206\101\0"+
    "\1\u0265\1\0\1\u0266\135\0\1\u0267\47\0\3\u0268\101\0"+
    "\3\u0269\70\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\13\33\1\u026a\7\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\13\33\1\u026b\7\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\6\33\1\u026c"+
    "\14\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u026d\1\0\5\33\5\0\1\33\5\0"+
    "\23\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\6\33\1\u026e\14\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\23\33\3\0\1\33\2\0\1\33\1\u026f"+
    "\1\33\20\0\1\33\3\0\1\33\1\0\1\u0270\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\5\33\1\u0271\15\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\5\33\1\u0272"+
    "\15\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\6\33\1\u0273\14\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\u0274\1\0\5\33\5\0"+
    "\1\33\5\0\23\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\23\33\3\0\1\33\2\0\1\33\1\u0275"+
    "\1\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\33\1\u0276\21\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0277\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\15\0\1\u0257\41\0"+
    "\1\u0278\60\0\1\u022e\107\0\1\u01f4\60\0\1\u025b\41\0"+
    "\1\u0279\27\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\23\33\3\0\1\33\2\0\1\33\1\u027a"+
    "\1\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\1\u027b\22\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\21\33\1\u027c\1\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\23\33"+
    "\3\0\1\33\2\0\1\33\1\u027d\1\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\6\33\1\u027e\14\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\23\33\3\0\1\33\2\0\1\33"+
    "\1\u027f\1\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\2\33\1\u0280\20\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\16\0\1\u0266"+
    "\115\0\1\u0281\60\0\1\u0282\2\0\3\u0282\1\0\3\u0268"+
    "\1\u0283\1\0\1\u0282\5\0\23\u0282\3\0\1\u0282\2\0"+
    "\3\u0282\20\0\1\u0282\14\0\3\u0269\26\0\1\u0284\41\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\11\33\1\u0285\11\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u0286\14\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\14\33\1\u0287\6\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\u0288\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\7\33\1\u0289"+
    "\13\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u028a\13\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\1\33\1\u028b\21\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\u028c\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\7\33\1\u028d\13\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\2\33\1\u028e"+
    "\20\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\7\33\1\u028f\13\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\13\33\1\u0290\7\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\1\33\1\u0291\1\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\7\33\1\u0292"+
    "\13\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\23\33\3\0\1\33\2\0\1\33\1\u0293\1\33\20\0"+
    "\1\33\14\0\3\u0281\34\0\1\350\33\0\1\u0282\1\0"+
    "\1\u0282\1\0\5\u0282\3\u0294\2\0\1\u0282\5\0\23\u0282"+
    "\3\0\1\u0282\2\0\3\u0282\20\0\1\u0282\5\0\1\u0282"+
    "\2\0\3\u0282\6\0\1\u0282\5\0\23\u0282\3\0\1\u0282"+
    "\2\0\3\u0282\20\0\1\u0282\42\0\1\u0295\44\0\1\33"+
    "\1\0\1\u0296\1\0\5\33\5\0\1\33\5\0\23\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\33\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\14\33"+
    "\1\u0297\6\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\5\33\1\u0298\15\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\3\33\1\u0299\17\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\10\33\1\u029a\12\33"+
    "\3\0\1\33\2\0\3\33\20\0\1\u029a\3\0\1\33"+
    "\1\0\1\33\1\0\5\33\5\0\1\33\5\0\5\33"+
    "\1\u029b\15\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\5\33\1\u029c\15\33\3\0\1\33\2\0\3\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\6\33\1\u029d\14\33\3\0\1\33"+
    "\2\0\3\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\22\33\1\u029e\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\1\33\1\u029f\1\33\20\0\1\33\5\0"+
    "\1\u02a0\2\0\3\u02a0\1\0\3\u0294\2\0\1\u02a0\5\0"+
    "\23\u02a0\3\0\1\u02a0\2\0\3\u02a0\20\0\1\u02a0\34\0"+
    "\1\u02a1\52\0\1\33\1\0\1\33\1\0\5\33\5\0"+
    "\1\33\5\0\6\33\1\u02a2\14\33\3\0\1\33\2\0"+
    "\3\33\20\0\1\33\3\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\6\33\1\u02a3\14\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\23\33\3\0"+
    "\1\33\2\0\1\33\1\u02a4\1\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\u02a5\1\0\5\33\5\0\1\33\5\0"+
    "\23\33\3\0\1\33\2\0\3\33\20\0\1\33\3\0"+
    "\1\33\1\0\1\33\1\0\5\33\5\0\1\33\5\0"+
    "\21\33\1\u02a6\1\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\3\0\1\u02a0\1\0\1\u02a0\1\0\5\u02a0\3\u02a7"+
    "\2\0\1\u02a0\5\0\23\u02a0\3\0\1\u02a0\2\0\3\u02a0"+
    "\3\0\1\u02a8\3\0\1\u02a9\10\0\1\u02a0\47\0\1\u02aa"+
    "\37\0\1\33\1\0\1\u02ab\1\0\5\33\5\0\1\33"+
    "\5\0\23\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\u02ac\1\0\5\33\5\0\1\33"+
    "\5\0\23\33\3\0\1\33\2\0\3\33\20\0\1\33"+
    "\3\0\1\33\1\0\1\33\1\0\5\33\5\0\1\33"+
    "\5\0\23\33\3\0\1\33\2\0\1\33\1\u02ad\1\33"+
    "\20\0\1\33\3\0\1\33\1\0\1\33\1\0\5\33"+
    "\5\0\1\33\5\0\23\33\3\0\1\33\2\0\1\33"+
    "\1\u02ae\1\33\20\0\1\33\3\0\1\33\1\0\1\33"+
    "\1\0\5\33\5\0\1\33\5\0\1\u02af\22\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\14\0\3\u02a7\47\0"+
    "\1\u02a8\104\0\1\u02b0\21\0\1\u02a0\2\0\3\u02a0\6\0"+
    "\1\u02a0\5\0\23\u02a0\3\0\1\u02a0\2\0\3\u02a0\20\0"+
    "\1\u02a0\33\0\1\u02b1\53\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\23\33\3\0\1\33\2\0"+
    "\1\33\1\u02b2\1\33\20\0\1\33\3\0\1\33\1\0"+
    "\1\33\1\0\5\33\5\0\1\33\5\0\16\33\1\u02b3"+
    "\4\33\3\0\1\33\2\0\3\33\20\0\1\33\42\0"+
    "\1\u02b4\44\0\1\33\1\0\1\u02b5\1\0\5\33\5\0"+
    "\1\33\5\0\23\33\3\0\1\33\2\0\3\33\20\0"+
    "\1\33\47\0\1\u02b6\37\0\1\33\1\0\1\33\1\0"+
    "\5\33\5\0\1\33\5\0\11\33\1\u02b7\11\33\3\0"+
    "\1\33\2\0\3\33\20\0\1\33\5\0\1\u02b8\112\0"+
    "\3\u02b8\44\0\1\u02b9\34\0\3\u02b9\1\0\1\u02ba\27\0"+
    "\1\u02bb\33\0\1\u02bc\47\0\1\u02bd\76\0\1\u02be\110\0"+
    "\1\u02bf\76\0\1\u02c0\110\0\1\u02c1\76\0\1\u02c2\110\0"+
    "\1\u02c3\47\0\3\u02c1\34\0\1\u02c4\100\0\1\u02c5\53\0"+
    "\1\u02c1\167\0\1\u02c1\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[35156];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\13\0\2\1\1\11\13\1\4\11\24\1"+
    "\1\11\12\1\4\11\1\1\2\11\1\1\1\11\2\1"+
    "\1\11\5\1\1\11\6\1\1\11\1\1\1\11\3\1"+
    "\1\11\1\1\2\11\2\1\1\11\2\1\2\11\1\1"+
    "\24\11\6\1\2\11\1\1\1\0\4\1\1\0\1\11"+
    "\6\1\2\11\1\0\2\1\2\0\1\1\2\0\1\11"+
    "\2\0\42\1\3\11\1\1\2\11\1\1\12\0\1\1"+
    "\1\11\2\1\2\11\1\1\1\0\2\11\2\1\6\11"+
    "\1\1\4\0\3\1\3\11\1\1\3\0\2\1\1\11"+
    "\1\1\3\0\5\1\1\0\1\11\10\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\2\0\3\11\2\0\1\1"+
    "\1\0\12\1\1\0\44\1\1\11\1\1\12\0\7\1"+
    "\3\11\3\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\0\1\11\4\1\1\11\5\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\11\2\0\55\1\12\0\10\1\4\0"+
    "\1\11\2\0\3\1\2\0\50\1\4\0\1\11\7\0"+
    "\11\1\1\11\4\0\1\11\4\1\1\11\1\0\32\1"+
    "\3\0\1\11\5\0\1\11\1\0\10\1\5\0\23\1"+
    "\3\0\1\11\1\0\1\11\11\1\1\11\3\0\16\1"+
    "\2\11\7\1\4\0\17\1\2\0\12\1\2\0\5\1"+
    "\4\0\5\1\1\11\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\14\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[709];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new LinkedList();
    private String heredoc = null;
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private StateStack stack = new StateStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;
    
    /**
     * Returns balance beween '{' and '}'. If it's equesl 0, 
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    /*public void setAST(AST ast) {
    	this.ast = ast;
    }
    */
        public PHPVersion getPHPVersion() {
                return PHPVersion.PHP_5;
        }
    
        public boolean useAspTagsAsPhp () {
            return asp_tags;
        }

        public void reset(java.io.Reader reader) {
            yyreset(reader);
        }

        public void setState(int state) {
            yybegin(state);
        }

        public int getState() {
            return yystate();
        }

        public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}
	
	public List getCommentList() {
		return commentList;
	}	
	
	protected void addComment(Comment.Type type) {
		int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
		commentList.add(comm);
	}
	
	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}
	
    private void pushState(int state) {
        stack.pushStack(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.popStack());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }
    
    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }
	
    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }
    
    private void handleMultilineCommentEnd() {
    	addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }
    
    private void handleVarComment() {
    	commentStartPosition = zzStartRead;
    	addComment(Comment.Type.TYPE_VARTYPE);
    }
        
    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }
    
	private boolean parsePHPDoc(){	
		/*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/
                
                //System.out.println("#######ParsePHPDoc()");
		//return true;
                return false;
	}
	
	
	/*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}*/
	
	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];  
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 175: 
          { return createSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 192: break;
        case 144: 
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 193: break;
        case 27: 
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 194: break;
        case 125: 
          { return createSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 195: break;
        case 174: 
          { return createSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 196: break;
        case 164: 
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 197: break;
        case 157: 
          { return createSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 198: break;
        case 36: 
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 199: break;
        case 2: 
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 200: break;
        case 160: 
          { return createSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 201: break;
        case 22: 
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 202: break;
        case 118: 
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 203: break;
        case 56: 
          { //	yymore();
          }
        case 204: break;
        case 23: 
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 205: break;
        case 72: 
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 206: break;
        case 89: 
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 207: break;
        case 14: 
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 208: break;
        case 41: 
          { yypushback(1);
	yybegin(ST_HEREDOC);
          }
        case 209: break;
        case 19: 
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 210: break;
        case 135: 
          { return createSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 211: break;
        case 45: 
          { yypushback(yylength());
    popState();
          }
        case 212: break;
        case 21: 
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 213: break;
        case 145: 
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 214: break;
        case 33: 
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 215: break;
        case 94: 
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 216: break;
        case 82: 
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 217: break;
        case 187: 
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 218: break;
        case 46: 
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 219: break;
        case 124: 
          { return createSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 220: break;
        case 67: 
          { return createSymbol(ASTPHP5Symbols.T_DO);
          }
        case 221: break;
        case 68: 
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 222: break;
        case 98: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
        label_len--;
    }

    if (label_len==nowdoc_len && yytext().substring(0,label_len).equals(nowdoc)) {
        nowdoc=null;
        nowdoc_len=0;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yybegin(ST_NOWDOC);
        yypushback(label_len);
    }
          }
        case 223: break;
        case 79: 
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 224: break;
        case 91: 
          { yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 225: break;
        case 65: 
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 226: break;
        case 154: 
          { return createSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 227: break;
        case 111: 
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 228: break;
        case 107: 
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 229: break;
        case 38: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 230: break;
        case 131: 
          { return createSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 231: break;
        case 115: 
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 232: break;
        case 44: 
          { nowdoc=null;
    nowdoc_len=0;
    yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 233: break;
        case 136: 
          { return createSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 234: break;
        case 127: 
          { return createSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 235: break;
        case 149: 
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 236: break;
        case 57: 
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 237: break;
        case 88: 
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 238: break;
        case 146: 
          { yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 239: break;
        case 162: 
          { return createSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 240: break;
        case 54: 
          { popState();
	return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 241: break;
        case 32: 
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 242: break;
        case 17: 
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 243: break;
        case 26: 
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 244: break;
        case 83: 
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 245: break;
        case 42: 
          { heredoc = null;
	yybegin(ST_IN_SCRIPTING);
	return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 246: break;
        case 186: 
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 247: break;
        case 15: 
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 248: break;
        case 108: 
          { return createSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 249: break;
        case 102: 
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 250: break;
        case 143: 
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 251: break;
        case 110: 
          { return createSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 252: break;
        case 70: 
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 253: break;
        case 92: 
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 254: break;
        case 178: 
          { return createSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 255: break;
        case 182: 
          { return createSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 256: break;
        case 71: 
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 257: break;
        case 140: 
          { return createSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 258: break;
        case 13: 
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 259: break;
        case 190: 
          { return createSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 260: break;
        case 3: 
          { // do nothing
          }
        case 261: break;
        case 48: 
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 262: break;
        case 169: 
          { return createSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 263: break;
        case 16: 
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 264: break;
        case 180: 
          { return createSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 265: break;
        case 101: 
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 266: break;
        case 4: 
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 267: break;
        case 170: 
          { return createSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 268: break;
        case 141: 
          { return createSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 269: break;
        case 95: 
          { yypushback(1);
        /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 270: break;
        case 123: 
          { return createSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 271: break;
        case 128: 
          { handleCommentStart();
          }
        case 272: break;
        case 126: 
          { return createSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 273: break;
        case 49: 
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 274: break;
        case 86: 
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 275: break;
        case 69: 
          { return createSymbol(ASTPHP5Symbols.T_AS);
          }
        case 276: break;
        case 176: 
          { return createSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 277: break;
        case 53: 
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 278: break;
        case 106: 
          { return createSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 279: break;
        case 58: 
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 280: break;
        case 168: 
          { return createSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 281: break;
        case 122: 
          { return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 282: break;
        case 104: 
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?' && short_tags_allowed)) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG_WITH_ECHO;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 283: break;
        case 165: 
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 284: break;
        case 133: 
          { return createSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 285: break;
        case 156: 
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 286: break;
        case 12: 
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 287: break;
        case 30: 
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 288: break;
        case 153: 
          { return createSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 289: break;
        case 93: 
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 290: break;
        case 137: 
          { return createSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 291: break;
        case 35: 
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 292: break;
        case 85: 
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 293: break;
        case 24: 
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 294: break;
        case 188: 
          { return createSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 295: break;
        case 159: 
          { return createSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 296: break;
        case 31: 
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 297: break;
        case 7: 
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 298: break;
        case 150: 
          { return createSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 299: break;
        case 109: 
          { return createSymbol(ASTPHP5Symbols.T_USE);
          }
        case 300: break;
        case 166: 
          { return createSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 301: break;
        case 152: 
          { return createSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 302: break;
        case 74: 
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 303: break;
        case 139: 
          { return createSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 304: break;
        case 39: 
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 305: break;
        case 37: 
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 306: break;
        case 184: 
          { return createSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 307: break;
        case 132: 
          { return createSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 308: break;
        case 87: 
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 309: break;
        case 120: 
          { int label_len = yylength() - 1;

    if (yytext().charAt(label_len-1)==';') {
	   label_len--;
    }
    if (label_len > nowdoc_len && yytext().substring(label_len - nowdoc_len,label_len).equals(nowdoc)) {
        // we need to parse at least last character of the nowdoc label
        yypushback(3);
        yybegin(ST_END_NOWDOC);
        // we need to remove the closing label from the symbol value.
        /*<ST_NOWDOC>{NOWDOC_CHARS}*{NEWLINE}+{LABEL}";"?[\n\r]*/
        Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        String value = (String)sym.value;
        sym.value = value.substring(0, label_len - nowdoc_len);
        return sym;
    }
    yypushback(1);
          }
        case 310: break;
        case 6: 
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 311: break;
        case 5: 
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 312: break;
        case 55: 
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 313: break;
        case 167: 
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            nowdoc_len--;
        }
        // first quate
        startString++;
        nowdoc = yytext().substring(startString,nowdoc_len+startString);
        yybegin(ST_START_NOWDOC);
        return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 314: break;
        case 47: 
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 315: break;
        case 63: 
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 316: break;
        case 103: 
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 317: break;
        case 129: 
          { return createSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 318: break;
        case 18: 
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 319: break;
        case 181: 
          { return createSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 320: break;
        case 112: 
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 321: break;
        case 59: 
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 322: break;
        case 134: 
          { return createSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 323: break;
        case 158: 
          { return createSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 324: break;
        case 138: 
          { return createSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 325: break;
        case 191: 
          { return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 326: break;
        case 78: 
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 327: break;
        case 163: 
          { return createSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 328: break;
        case 81: 
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 329: break;
        case 117: 
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 330: break;
        case 161: 
          { return createSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 331: break;
        case 116: 
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 332: break;
        case 130: 
          { return createSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 333: break;
        case 121: 
          { int len = yylength();
        yypushback(2); // go back to mark end of comment in the next token
        comment = yytext();
          }
        case 334: break;
        case 173: 
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 335: break;
        case 96: 
          { yypushback(1);
    /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?("{""{"+|"$""$"+)*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 336: break;
        case 151: 
          { return createSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 337: break;
        case 155: 
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 338: break;
        case 40: 
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 339: break;
        case 11: 
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 340: break;
        case 172: 
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 341: break;
        case 50: 
          { yypushback(1);
	popState();
        /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
	return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 342: break;
        case 60: 
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 343: break;
        case 113: 
          { return createSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 344: break;
        case 105: 
          { return createSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 345: break;
        case 25: 
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 346: break;
        case 189: 
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 347: break;
        case 84: 
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 348: break;
        case 66: 
          { return createSymbol(ASTPHP5Symbols.T_IF);
          }
        case 349: break;
        case 97: 
          { String text = yytext();
    int length = text.length() - 1;
    text = text.trim();
    
    yypushback(1);
    
    if (text.endsWith(";")) {
        text = text.substring(0, text.length() - 1);
        yypushback(1);
    }
    if (text.equals(heredoc)) {
        heredoc = null;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
    } else {
    	   yybegin(ST_HEREDOC);
    }
          }
        case 350: break;
        case 28: 
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 351: break;
        case 185: 
          { return createSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 352: break;
        case 10: 
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 353: break;
        case 1: 
          { /*<ST_HEREDOC>{HEREDOC_CHARS}*({HEREDOC_NEWLINE}+({LABEL}";"?)?)?*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 354: break;
        case 114: 
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 355: break;
        case 76: 
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 356: break;
        case 75: 
          { return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 357: break;
        case 73: 
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 358: break;
        case 20: 
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 359: break;
        case 29: 
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 360: break;
        case 183: 
          { return createSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 361: break;
        case 61: 
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 362: break;
        case 100: 
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 363: break;
        case 9: 
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 364: break;
        case 62: 
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 365: break;
        case 43: 
          { yypushback(1);
	yybegin(ST_NOWDOC);
          }
        case 366: break;
        case 147: 
          { return createSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 367: break;
        case 80: 
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 368: break;
        case 148: 
          { return createSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 369: break;
        case 77: 
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 370: break;
        case 34: 
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 371: break;
        case 51: 
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 372: break;
        case 64: 
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 373: break;
        case 171: 
          { return createSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 374: break;
        case 179: 
          { return createSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 375: break;
        case 90: 
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 376: break;
        case 119: 
          { String text = yytext();

    if (text.charAt(text.length() - 2)== ';') {
		text = text.substring(0, text.length() - 2);
        	yypushback(1);
    } else {
		text = text.substring(0, text.length() - 1);
    }
	
	int textLength = text.length();
	int heredocLength = heredoc.length();
	if (textLength > heredocLength && text.substring(textLength - heredocLength, textLength).equals(heredoc)) {
		yypushback(2);
        	yybegin(ST_END_HEREDOC);
        	// we need to remove the closing label from the symbol value.
                /*<ST_HEREDOC>{HEREDOC_CHARS}*{HEREDOC_NEWLINE}+{LABEL}";"?[\n\r]*/
        	Symbol sym = createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
        	String value = (String)sym.value;
        	sym.value = value.substring(0, value.length() - heredocLength + 1);
	   	return sym;
	}
	yypushback(1);
          }
        case 377: break;
        case 99: 
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 378: break;
        case 142: 
          { return createSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 379: break;
        case 177: 
          { return createSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 380: break;
        case 52: 
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 381: break;
        case 8: 
          { 
          }
        case 382: break;
        default: 
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(ASTPHP5Symbols.EOF);
              }
            }
            case 710: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
