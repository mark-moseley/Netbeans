<#assign licenseFirst = "/*">
<#assign licensePrefix = " * ">
<#assign licenseLast = " */">
<#include "../Licenses/license-${project.license}.txt">

<#if package?? && package != "">
package ${package};

</#if>
import java.io.IOException;
import java.math.BigInteger;
import java.net.URLEncoder;
import java.security.MessageDigest;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.netbeans.saas.RestConnection;

/**
 *
 * @author ${user}
 */
public class FacebookAuthenticator {

    private static String apiKey;
    private static String secret;
    

    static {
        try {
            Properties props = new Properties();
            props.load(FacebookAuthenticator.class.getResourceAsStream(
                    "/org/netbeans/saas/facebook/facebook.properties"));
            apiKey = props.getProperty("api_key");
            secret = props.getProperty("secret");
        } catch (IOException ex) {
            Logger.getLogger(FacebookAuthenticator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static String getApiKey() {
        return apiKey;
    }

    public static String getSessionKey(HttpServletRequest request) {
        return (String) request.getSession().getAttribute("facebook_session_key");
    }

    static void login(HttpServletRequest request, HttpServletResponse response) {
        try {
            HttpSession session = request.getSession(true);
            String sessionKey = (String) session.getAttribute("facebook_session_key");

            // If there is already a session key, we are already logged in. 
            // Simply return.
            if (sessionKey != null) {
                return;
            }
            
            String authToken = (String) session.getAttribute("facebook_auth_token");
            
            // If there is an auth token instead of a session key, we need to 
            // obtain the session key using the auth token.  If there is no
            // auth token, we redirect to the login page.
            if (authToken != null) {
                session.removeAttribute("facebook_auth_token");
                String method = "facebook.auth.getSession";
                String v = "1.0";
                String sig = sign(
                        new String[][]{
                            {"method", method},
                            {"v", v},
                            {"api_key", apiKey},
                            {"auth_token", authToken}
                        });

                RestConnection conn = new RestConnection(
                        "http://api.facebook.com/restserver.php",
                        new String[][]{
                            {"method", method},
                            {"api_key", apiKey},
                            {"sig", sig},
                            {"v", v},
                            {"auth_token", authToken}
                        });
                String result = conn.get().getDataAstString();
                System.out.println("getSession result = " + result);

                sessionKey = result.substring(result.indexOf("<session_key>") + 13,
                        result.indexOf("</session_key>"));
                System.out.println("sessionKey = " + sessionKey);

                session.setAttribute("facebook_session_key", sessionKey);
                
                String returnUrl = (String) session.getAttribute("facebook_return_url");
                
                if (returnUrl != null) {
                    session.removeAttribute("facebook_return_url");
                    response.sendRedirect(returnUrl);
                }
            } else {
                session.setAttribute("facebook_return_url", request.getRequestURI());
                response.sendRedirect("FacebookLogin");
            }

        } catch (Exception ex) {
        }
    }

    private static void logout() {
    }

    public static String sign(String[][] params) {

        try {
            TreeMap<String, String> map = new TreeMap<String, String>();

            for (int i = 0; i < params.length; i++) {
                String key = params[i][0];
                String value = params[i][1];

                if (value != null) {
                    map.put(key, URLEncoder.encode(value, "UTF-8"));
                }
            }

            String signature = "";
            Set<Map.Entry<String, String>> entrySet = map.entrySet();
            for (Map.Entry<String, String> entry : entrySet) {
                signature += entry.getKey() + "=" + entry.getValue();
            }
            signature += secret;

            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] sum = md.digest(signature.getBytes("UTF-8"));
            BigInteger bigInt = new BigInteger(1, sum);

            return bigInt.toString(16);
        } catch (Exception ex) {
            Logger.getLogger(FacebookAuthenticator.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }
}
