<?php

    include_once "../org_netbeans_saas/RestConnection.php";
    include_once "FacebookSocialNetworkingServiceAuthenticatorProfile.php";

    define("_ATTR_PREFIX", "FacebookSocialNetworkingServiceAuthenticator");
    define("_SAAS", "org_netbeans_saas_");
    define("_RETURN_URL", "facebook_return_url");
    define("_AUTH_TOKEN", "facebook_auth_token");
    define("_SESSION_KEY", "facebook_session_key");
    define("_SESSION_KEY_PARAM", "fsk");
    define("_EXPIRE", "3600");
    
    class  FacebookSocialNetworkingServiceAuthenticator {

        private static $inited = false;
        private static $LOGIN_URL;

        public static function init() {
            if(self::$inited)
              return;
            self::$LOGIN_URL = "org_netbeans_saas_facebook/".str_replace("Authenticator", "Login", _ATTR_PREFIX).".php";
            self::$inited = true;
        }

        public static function getApiKey() {
            $apiKey = FacebookSocialNetworkingServiceAuthenticatorProfile::getApiKey();
            if ($apiKey == null || $apiKey == "") {
                throw new Exception("Please specify your api key in the Profile file.");
            }
            return $apiKey;
        }

        public static function getSecret() {
            $secret = FacebookSocialNetworkingServiceAuthenticatorProfile::getSecret();
            if ($secret == null || $secret == "") {
                throw new Exception("Please specify your secret key in the Profile file.");
            }
            return $secret;
        }
        
        public static function getSessionKey() {
            return self::getSession(_SESSION_KEY);
        }
        
        public static function login($authToken) {
            self::init();

            $rUrl = self::ensureSession($authToken);
            if($rUrl) {
                if($rUrl != "-1") {
                    self::doRedirect($rUrl);
                    exit(0);
                } else {
                    return;
                }
            }

            // If there is an auth token instead of a session key, we need to
            // obtain the session key using the auth token.  If there is no
            // auth token, we redirect to the login page.
            if ($authToken) {
                $method = "facebook.auth.getSession";
                $v = "1.0";
                $sig = array();
                $sig["method"] = $method;
                $sig["v"] = $v;
                $sig["api_key"] = self::getApiKey();
                $sig["auth_token"] = $authToken;

                $params = array();
                $params["method"] = $method;
                $params["api_key"] = self::getApiKey();
                $params["sig"] = self::sign($sig);
                $params["v"] = $v;
                $params["auth_token"] = $authToken;
                $conn = new RestConnection("http://api.facebook.com/restserver.php", $params);
                $res = $conn->get();

                try {
                    $xml = $res->getDataAsXml();
                    if(!($xml->session_key))
                      throw new Exception("Invalid xml: ".$res->getResponseBody());
                    $sessionKey = self::findSessionKey($res->getResponseBody());
                    self::saveSession(_SESSION_KEY, $sessionKey);
                } catch (Exception $ex) {
                    throw new Exception("Failed to get session key and secret: ".$ex);
                }

                $returnUrl = self::getSession(_RETURN_URL);

                if ($returnUrl != null) {
                    self::doRedirect($returnUrl);
                    exit(0);
                }
            } else {
                self::sessionInit();
                self::doRedirect(self::$LOGIN_URL."?rUrl=".$_SERVER['REQUEST_URI']);
                exit(0);
            }
        }
        
        private static function ensureSession($authToken) {
            $sessionKey = self::getSession(_SESSION_KEY);
            if(!$sessionKey) {
                $sessionKey = $_GET[_SESSION_KEY_PARAM];
                if($sessionKey)
                  self::saveSession(_SESSION_KEY, $sessionKey);
            }
            if ($sessionKey) {
                if($authToken && $sessionKey) {
                    $rUrl = self::getSession(_RETURN_URL);
                    if ($rUrl != null) {
                        self::saveSession(_SESSION_KEY, $sessionKey);
                        self::deleteSession(_RETURN_URL);
                        if(strpos($rUrl, '?'))
                          $rUrl.='&'._SESSION_KEY_PARAM.'='.$sessionKey;
                        else
                          $rUrl.='?'._SESSION_KEY_PARAM.'='.$sessionKey;
                        return $rUrl;
                    }
                }
                return "-1";
            }
        }
        
        private static function findSessionKey($result) {
            $result = str_replace("<", "&lt;", $result);
            $result = str_replace(">", "&gt;", $result);
            $ts = strpos($result, "&lt;session_key&gt;") + 19;
            $te = strpos($result, "&lt;", $ts);
            $len = $te - $ts;
            $sessionKey = substr($result, $ts, $len);
            return $sessionKey;
        }

        private static function logout() {
        }

        public static function sign($params)
        {
            $sign = '';
            $values = array();
            ksort($params);
            foreach($params as $k => $v) {
                $sign .= $k ."=". $v;
            }
            $sign .= self::getSecret();
            return  md5($sign);
        }
        
        private static function sessionInit() {
            session_start();
            $_SESSION = array();
            if (isset($_COOKIE[session_name()])) {
                setcookie(session_name(), '', time()-42000, '/');
            }
            session_destroy();
        }
        
        public static function getSession($name) {
            if($_SESSION[$name] != null)
              return $_SESSION[$name];
            else
              return $_COOKIE[_SAAS.$name];
        }

        public static function saveSession($name, $value) {
            setcookie(_SAAS.$name, $value, time() + _EXPIRE, "/");
            $_SESSION[$name] = $value;
        }
        
        public static function deleteSession($name) {
            setcookie(_SAAS.$name, "", time() - _EXPIRE, "/");
            $_SESSION[$name] = null;
        }
        
        public static function doRedirect($url) {
            printf("<html>");
            printf("<head>");
            printf("<title></title>");
            printf("<meta http-equiv=\"refresh\" content=\"3; URL=".$url."\">");
            printf("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">");
            printf("</head>");
            printf("<body>");
            printf("<p align=\"center\">Redirecting...</p>");
            printf("<p align=\"center\">");
            printf("<a href= \"".$url."\">".$url."</a></p>");
            printf("<p align=\"center\">If you are not redirected automatically within a few seconds then please click on the link above.</p>");
            printf("</body>");
            printf("</html>");
        }
    }

?>
