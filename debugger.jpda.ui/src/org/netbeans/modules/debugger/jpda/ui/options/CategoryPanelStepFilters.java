/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2009 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2009 Sun Microsystems, Inc.
 */

/*
 * CategoryPanelStepFilters.java
 *
 * Created on Jan 20, 2009, 3:30:38 PM
 */

package org.netbeans.modules.debugger.jpda.ui.options;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import java.util.WeakHashMap;
import java.util.prefs.Preferences;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.netbeans.api.debugger.Properties;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.NbPreferences;

/**
 *
 * @author martin
 */
class CategoryPanelStepFilters extends StorablePanel {

    /** Creates new form CategoryPanelStepFilters */
    public CategoryPanelStepFilters() {
        initComponents();
        initFilterClassesList();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        useStepFiltersCheckBox = new javax.swing.JCheckBox();
        filterSyntheticCheckBox = new javax.swing.JCheckBox();
        filterStaticInitCheckBox = new javax.swing.JCheckBox();
        filterConstructorsCheckBox = new javax.swing.JCheckBox();
        filterClassesLabel = new javax.swing.JLabel();
        filterClassesScrollPane = new javax.swing.JScrollPane();
        filterClassesList = new javax.swing.JList();
        stepThroughFiltersCheckBox = new javax.swing.JCheckBox();
        filterAddButton = new javax.swing.JButton();
        filterRemoveButton = new javax.swing.JButton();
        filtersCheckAllButton = new javax.swing.JButton();
        filtersUncheckAllButton = new javax.swing.JButton();

        useStepFiltersCheckBox.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.useStepFiltersCheckBox.text")); // NOI18N
        useStepFiltersCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useStepFiltersCheckBoxActionPerformed(evt);
            }
        });

        filterSyntheticCheckBox.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filterSyntheticCheckBox.text")); // NOI18N

        filterStaticInitCheckBox.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filterStaticInitCheckBox.text")); // NOI18N

        filterConstructorsCheckBox.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filterConstructorsCheckBox.text")); // NOI18N

        filterClassesLabel.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filterClassesLabel.text")); // NOI18N

        filterClassesScrollPane.setViewportView(filterClassesList);

        stepThroughFiltersCheckBox.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.stepThroughFiltersCheckBox.text")); // NOI18N

        filterAddButton.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filterAddButton.text")); // NOI18N
        filterAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterAddButtonActionPerformed(evt);
            }
        });

        filterRemoveButton.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filterRemoveButton.text")); // NOI18N
        filterRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterRemoveButtonActionPerformed(evt);
            }
        });

        filtersCheckAllButton.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filtersCheckAllButton.text")); // NOI18N
        filtersCheckAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtersCheckAllButtonActionPerformed(evt);
            }
        });

        filtersUncheckAllButton.setText(org.openide.util.NbBundle.getMessage(CategoryPanelStepFilters.class, "CategoryPanelStepFilters.filtersUncheckAllButton.text")); // NOI18N
        filtersUncheckAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtersUncheckAllButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(useStepFiltersCheckBox)
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(filterStaticInitCheckBox)
                            .add(filterSyntheticCheckBox)
                            .add(filterConstructorsCheckBox)
                            .add(filterClassesLabel)
                            .add(stepThroughFiltersCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(filterClassesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(filtersUncheckAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(filtersCheckAllButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(filterRemoveButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(filterAddButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(useStepFiltersCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filterSyntheticCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filterStaticInitCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filterConstructorsCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(filterClassesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(filterAddButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(filterRemoveButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(filtersCheckAllButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(filtersUncheckAllButton))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(filterClassesScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(stepThroughFiltersCheckBox)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void initFilterClassesList() {
        filterClassesList.setCellRenderer(new ListCellRenderer() {
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                ClassFilter cf = (ClassFilter) value;
                JCheckBox cb = classFilterComponents.get(cf);
                if (cb == null) {
                    cb = new JCheckBox(cf.toString(), cf.isEnabled());
                    classFilterComponents.put(cf, cb);
                }
                cb.setEnabled(list.isEnabled());
                cb.setFont(list.getFont());
                cb.setBackground(isSelected ? list.getSelectionBackground() : list.getBackground());
                cb.setForeground(isSelected ? list.getSelectionForeground() : list.getForeground());
                return cb;
            }
        });
        filterClassesList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent event) {
                JList list = (JList) event.getSource();
                // Get index of item clicked
                int index = list.locationToIndex(event.getPoint());
                if (index < 0) return ;
                int height = list.getUI().getCellBounds(filterClassesList, index, index).height;
                Point cellLocation = list.getUI().indexToLocation(filterClassesList, index);
                int x = event.getPoint().x - cellLocation.x;
                if (x >= 0 && x <= height) {
                    ClassFilter cf = (ClassFilter) list.getModel().getElementAt(index);
                    // Toggle selected state
                    cf.setEnabled(!cf.isEnabled());
                    JCheckBox cb = classFilterComponents.get(cf);
                    cb.setSelected(cf.isEnabled());
                    // Repaint cell
                    list.repaint(list.getCellBounds(index, index));
                }
            }
        });
        filterClassesList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                filterRemoveButton.setEnabled(filterClassesList.getSelectedIndex() >= 0);
            }
        });
        filterClassesList.setModel(new DefaultListModel());
        filterClassesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void useStepFiltersCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useStepFiltersCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useStepFiltersCheckBoxActionPerformed

    private void filterAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterAddButtonActionPerformed
        NotifyDescriptor.InputLine nd = new NotifyDescriptor.InputLine("Class", "Add Class Filter");
        DialogDisplayer.getDefault().notify(nd);
        ((DefaultListModel) filterClassesList.getModel()).addElement(new ClassFilter(nd.getInputText(), true));
        //JCheckBox cb = new JCheckBox(nd.getInputText());
        //cb.setSelected(true);
        //filterClassesList.add(cb);
        filterClassesList.repaint();
    }//GEN-LAST:event_filterAddButtonActionPerformed

    private void filterRemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterRemoveButtonActionPerformed
        ((DefaultListModel) filterClassesList.getModel()).remove(filterClassesList.getSelectedIndex());
        filterClassesList.repaint();
    }//GEN-LAST:event_filterRemoveButtonActionPerformed

    private void filtersCheckAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtersCheckAllButtonActionPerformed
        DefaultListModel model = (DefaultListModel) filterClassesList.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            ClassFilter cf = (ClassFilter) model.get(i);
            cf.setEnabled(true);
            classFilterComponents.get(cf).setSelected(true);
        }
        filterClassesList.repaint();
    }//GEN-LAST:event_filtersCheckAllButtonActionPerformed

    private void filtersUncheckAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtersUncheckAllButtonActionPerformed
        DefaultListModel model = (DefaultListModel) filterClassesList.getModel();
        for (int i = 0; i < model.getSize(); i++) {
            ClassFilter cf = (ClassFilter) model.get(i);
            cf.setEnabled(false);
            classFilterComponents.get(cf).setSelected(false);
        }
        filterClassesList.repaint();
    }//GEN-LAST:event_filtersUncheckAllButtonActionPerformed

    @Override
    void load() {
        //Preferences p = NbPreferences.root().node("Debugger/JPDA");
        Properties p = Properties.getDefault().getProperties("debugger.options.JPDA");
        useStepFiltersCheckBox.setSelected(p.getBoolean("UseStepFilters", true));
        filterSyntheticCheckBox.setSelected(p.getBoolean("FilterSyntheticMethods", true));
        filterStaticInitCheckBox.setSelected(p.getBoolean("FilterStaticInitializers", false));
        filterConstructorsCheckBox.setSelected(p.getBoolean("FilterConstructors", false));
        //String[] filterClasses = (String[]) pp.getArray("FilterClasses", new String[] {});
        DefaultListModel filterClassesModel = (DefaultListModel) filterClassesList.getModel();
        Set enabledFilters = (Set) Properties.getDefault ().getProperties ("debugger").
                getProperties ("sources").getProperties ("class_filters").
                getCollection (
                    "enabled",
                    Collections.EMPTY_SET
                );
        Set<String> allFilters = (Set<String>) Properties.getDefault ().getProperties ("debugger").
                getProperties ("sources").getProperties ("class_filters").
                getCollection (
                    "all",
                    Collections.EMPTY_SET
                );
        filterClassesModel.clear();
        for (String filter : allFilters) {
            ClassFilter cf = new ClassFilter(filter, enabledFilters.contains(filter));
            filterClassesModel.addElement(cf);
        }
        stepThroughFiltersCheckBox.setSelected(p.getBoolean("StepThroughFilters", false));
    }

    @Override
    void store() {
        Properties p = Properties.getDefault().getProperties("debugger.options.JPDA");
        p.setBoolean("UseStepFilters", useStepFiltersCheckBox.isSelected());
        p.setBoolean("FilterSyntheticMethods", filterSyntheticCheckBox.isSelected());
        p.setBoolean("FilterStaticInitializers", filterStaticInitCheckBox.isSelected());
        p.setBoolean("FilterConstructors", filterConstructorsCheckBox.isSelected());
        ListModel filterClassesModel = filterClassesList.getModel();
        Set<String> allFilters = new LinkedHashSet<String>();
        Set<String> enabledFilters = new HashSet<String>();
        int n = filterClassesModel.getSize();
        for (int i = 0; i < n; i++) {
            ClassFilter cf = (ClassFilter) filterClassesModel.getElementAt(i);
            allFilters.add(cf.toString());
            if (cf.isEnabled()) {
                enabledFilters.add(cf.toString());
            }
        }
        Properties.getDefault ().getProperties ("debugger").
                getProperties ("sources").getProperties ("class_filters").
                setCollection (
                    "all",
                    allFilters
                );
        Properties.getDefault ().getProperties ("debugger").
                getProperties ("sources").getProperties ("class_filters").
                setCollection (
                    "enabled",
                    enabledFilters
                );
        p.setBoolean("StepThroughFilters", stepThroughFiltersCheckBox.isSelected());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filterAddButton;
    private javax.swing.JLabel filterClassesLabel;
    private javax.swing.JList filterClassesList;
    private javax.swing.JScrollPane filterClassesScrollPane;
    private javax.swing.JCheckBox filterConstructorsCheckBox;
    private javax.swing.JButton filterRemoveButton;
    private javax.swing.JCheckBox filterStaticInitCheckBox;
    private javax.swing.JCheckBox filterSyntheticCheckBox;
    private javax.swing.JButton filtersCheckAllButton;
    private javax.swing.JButton filtersUncheckAllButton;
    private javax.swing.JCheckBox stepThroughFiltersCheckBox;
    private javax.swing.JCheckBox useStepFiltersCheckBox;
    // End of variables declaration//GEN-END:variables
    private Map<ClassFilter, JCheckBox> classFilterComponents = new WeakHashMap<ClassFilter, JCheckBox>();
    
    private static class ClassFilter {

        private String clazz;
        private boolean enabled;
        //private JCheckBox checkBox;

        private ClassFilter(String clazz, boolean enabled) {
            this.clazz = clazz;
            this.enabled = enabled;
        }

        public boolean isEnabled() {
            return enabled;
        }

        void setEnabled(boolean enabled) {
            this.enabled = enabled;
            //if (checkBox != null) {
            //    checkBox.setSelected(enabled);
            //}
        }

        @Override
        public String toString() {
            return clazz;
        }

        void setClass(String clazz) {
            this.clazz = clazz;
        }

        //JCheckBox getComponent() {
        //    if (checkBox == null) {
        //        checkBox = new JCheckBox(toString(), isEnabled());
        //    }
        //    return checkBox;
        //}
    }
}
