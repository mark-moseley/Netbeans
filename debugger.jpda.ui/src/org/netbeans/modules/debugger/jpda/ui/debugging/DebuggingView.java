/*
 * DebuggingView.java
 *
 * Created on 3. duben 2008, 15:17
 */

package org.netbeans.modules.debugger.jpda.ui.debugging;

import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.lang.ref.Reference;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeExpansionListener;
import javax.swing.tree.TreePath;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 *
 * @author  Dan
 */
public class DebuggingView extends TopComponent implements org.openide.util.HelpCtx.Provider,
       ExplorerManager.Provider, PropertyChangeListener, TreeExpansionListener  {

    /** unique ID of <code>TopComponent</code> (singleton) */
    private static final String ID = "debugging"; //NOI18N
    
    private ExplorerManager manager = new ExplorerManager();
    //private transient ViewModelListener viewModelListener;
    
    private DebugTreeView treeView;
    
    /**
     * instance/singleton of this class
     *
     * @see  #getInstance
     */
    private static Reference<DebuggingView> instance = null;
    
    
    /** Creates new form DebuggingView */
    public DebuggingView() {
        setIcon (Utilities.loadImage ("org/netbeans/modules/debugger/jpda/resources/debugging.png")); // NOI18N
        // Remember the location of the component when closed.
        putClientProperty("KeepNonPersistentTCInModelWhenClosed", Boolean.TRUE); // NOI18N
        
        initComponents();
        
        treeView = new DebugTreeView();
        treeView.setRootVisible(true);
        treeViewScrollPane.setViewportView(treeView);
        
        manager.addPropertyChangeListener(this);
        treeView.addTreeExpansionListener(this);
        manager.setRootContext(new ElemRootNode("root node", 4));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        leftPanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();
        testPanel = new javax.swing.JPanel();
        testButton = new javax.swing.JButton();
        treeViewScrollPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        mainScrollPane.setBorder(null);

        mainPanel.setLayout(new java.awt.BorderLayout());

        leftPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        leftPanel.setPreferredSize(new java.awt.Dimension(24, 0));
        leftPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        mainPanel.add(leftPanel, java.awt.BorderLayout.WEST);

        rightPanel.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.highlight"));
        rightPanel.setPreferredSize(new java.awt.Dimension(24, 0));
        rightPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        mainPanel.add(rightPanel, java.awt.BorderLayout.EAST);

        testButton.setText(org.openide.util.NbBundle.getMessage(DebuggingView.class, "DebuggingView.testButton.text")); // NOI18N
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });
        testPanel.add(testButton);

        mainPanel.add(testPanel, java.awt.BorderLayout.SOUTH);

        treeViewScrollPane.setBorder(null);
        mainPanel.add(treeViewScrollPane, java.awt.BorderLayout.CENTER);

        mainScrollPane.setViewportView(mainPanel);

        add(mainScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
    DebuggingView view = getInstance();
    view.setRootContext(new ElemRootNode("new root node", 6));
}//GEN-LAST:event_testButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton testButton;
    private javax.swing.JPanel testPanel;
    private javax.swing.JScrollPane treeViewScrollPane;
    // End of variables declaration//GEN-END:variables

    public void setRootContext(AbstractNode root) {
        manager.setRootContext(root);
    }
    
    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public static DebuggingView getInstance() {
        DebuggingView view;
        view = (DebuggingView) WindowManager.getDefault().findTopComponent(ID);
        if (view == null) {
            view = getDefault();
        }
        return view;
    }
    
    /**
     * Singleton accessor reserved for the window systemm only. The window
     * system calls this method to create an instance of this
     * <code>TopComponent</code> from a <code>.settings</code> file.
     * <p>
     * <em>This method should not be called anywhere except from the window
     * system's code. </em>
     *
     * @return  singleton - instance of this class
     */
    public static synchronized DebuggingView getDefault() {
        DebuggingView view;
        if (instance == null) {
            view = new DebuggingView();
            instance = new WeakReference<DebuggingView>(view);
        } else {
            view = instance.get();
            if (view == null) {
                view = new DebuggingView();
                instance = new WeakReference<DebuggingView>(view);
            }
        }
        return view;
    }
    
//    public void propertyChange(PropertyChangeEvent evt) {
//        //throw new UnsupportedOperationException("Not supported yet.");
//    }
    
    @Override
    protected String preferredID() {
        return this.getClass().getName();
    }

    @Override
    protected void componentShowing() {
        super.componentShowing ();
//        if (viewModelListener != null) {
//            viewModelListener.setUp();
//            return;
//        }
//        if (debuggingPanel == null) {
//            setLayout(new BorderLayout ());
//            debuggingPanel = new DebuggingPanel();
//            debuggingPanel.setName(NbBundle.getMessage (DebuggingView2.class, "CTL_Debugging_tooltip")); // NOI18N
//            add(debuggingPanel, BorderLayout.CENTER);
//        }
//        if (viewModelListener != null)
//            throw new InternalError ();
//        viewModelListener = new ViewModelListener (
//            "SourcesView",
//            tree
//        );
    }
    
    @Override
    protected void componentHidden() {
        super.componentHidden ();
        // viewModelListener.destroy ();
    }
    
//    public org.openide.util.HelpCtx getHelpCtx() {
//        return new org.openide.util.HelpCtx("NetbeansDebuggerSourcesNode"); // NOI18N
//    }
    
    @Override
    public int getPersistenceType() {
        return PERSISTENCE_ALWAYS;
    }
        
    @Override
    public boolean requestFocusInWindow() {
        return super.requestFocusInWindow();
//        if (debuggingPanel == null) return false;
//        return debuggingPanel.requestFocusInWindow ();
    }
    
    @Override
    public String getName() {
        return NbBundle.getMessage (DebuggingView.class, "CTL_Debugging_view"); // NOI18N
    }
    
    @Override
    public String getToolTipText() {
        return NbBundle.getMessage (DebuggingView.class, "CTL_Debugging_tooltip"); // NOI18N
    }

    public void propertyChange(PropertyChangeEvent evt) {
        String propertyName = evt.getPropertyName();
        if (ExplorerManager.PROP_ROOT_CONTEXT.equals(propertyName) || 
                ExplorerManager.PROP_NODE_CHANGE.equals(propertyName)) {
            refreshView();
        }
    }

    public void treeExpanded(TreeExpansionEvent event) {
        refreshView();
    }

    public void treeCollapsed(TreeExpansionEvent event) {
        refreshView();
    }
    
    // **************************************************************************
    // **************************************************************************
    
    private void refreshView() {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                leftPanel.removeAll();
                for (TreePath path : treeView.getVisiblePaths()) {
                    leftPanel.add(new JLabel(new ImageIcon(Utilities.loadImage (
                            "org/netbeans/modules/debugger/jpda/resources/debugging.png")))
                    );
                }
                leftPanel.invalidate();
            }
        });
    }
    
    // **************************************************************************
    // ElemRootNode
    // **************************************************************************
    static class ElemRootNode extends AbstractNode {
        
        private String description;
        
        public ElemRootNode(String description, int childrenCount) {
            super(new ElemRootNodeChildren(childrenCount));
            this.description = description;
            setDisplayName(description); 
        }
        
        @Override
        public Image getIcon(int type) {
             return Utilities.loadImage ("org/netbeans/modules/debugger/jpda/resources/classLoader.gif");
        }

        @Override
        public Image getOpenedIcon(int type) {
            return Utilities.loadImage ("org/netbeans/modules/debugger/jpda/resources/classLoaderOpen.gif");
        }

        @Override
        public String getDisplayName() {
            return description;
        }
        
    }

    static class ElemRootNodeChildren extends Children.Array {

        private int count;
        
        ElemRootNodeChildren(int count) {
            this.count = count;
        }
        
        @Override
        protected Collection<Node> initCollection() {
            Collection<Node> result = new ArrayList<Node>();
            for (int x = 1; x <= count; x++) {
                result.add(new ElemNode("node " + x));
            }
            return result;
        }

    }
    
    static class ElemNode extends AbstractNode {
        
        private String description;
        
        public ElemNode(String description) {
            super(Children.LEAF);
            this.description = description;
            setDisplayName(description); 
        }
        
        @Override
        public Image getIcon(int type) {
             return Utilities.loadImage ("org/netbeans/modules/debugger/jpda/resources/class.gif");
        }

//        @Override
//        public Image getOpenedIcon(int type) {
//            return Utilities.loadImage ("org/netbeans/modules/debugger/jpda/resources/classLoaderOpen.gif");
//        }

        @Override
        public String getDisplayName() {
            return description;
        }
        
    }

}
