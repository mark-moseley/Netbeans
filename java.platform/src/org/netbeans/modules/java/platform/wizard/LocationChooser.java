/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2002 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.java.platform.wizard;

import java.beans.*;
import java.util.*;
import java.awt.CardLayout;
import java.awt.event.*;
import java.io.File;
import javax.swing.event.*;
import javax.swing.*;

import org.openide.*;
import org.openide.explorer.*;
import org.openide.filesystems.*;
import org.openide.loaders.*;
import org.openide.nodes.*;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

import org.netbeans.modules.java.platform.InstallerRegistry;
import org.netbeans.modules.java.platform.wizard.InstallerKeys;
import org.netbeans.spi.java.platform.PlatformInstall;

/**
 *
 * @author  sd99038
 */
public class LocationChooser 
    extends javax.swing.JPanel
    implements ExplorerManager.Provider, NodeListener, DataFilter,
        DocumentListener, ActionListener {
    /**
     * ExplorerManager that controls the choice view
     */
    ExplorerManager manager;
    
    /**
     * Node, which hosts contents of the choice view
     */
    Node            choiceRootNode;
    
    /** Creates new form FolderChooser */
    public LocationChooser(Node rootNode) {
        initComponents();
        

        choiceRootNode = rootNode;
        // set the content to the type chooser.
        getExplorerManager().setRootContext(choiceRootNode);
        choiceRootNode.addNodeListener(this);
        
        platformPath.getDocument().addDocumentListener(this);
        browsePath.addActionListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        platformPath = new javax.swing.JTextField();
        browsePath = new javax.swing.JButton();
        typeDisplayPanel = new javax.swing.JPanel();
        typeDisplayer = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        platformType = new javax.swing.JLabel();
        typeChooserPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        typeChooser = new org.openide.explorer.view.ChoiceView();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(NbBundle.getBundle(LocationChooser.class).getString("LAB_LocationChooseFolder"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(platformPath, gridBagConstraints);

        browsePath.setText(NbBundle.getBundle(LocationChooser.class).getString("BTN_LocationChooser_Browse"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 0);
        add(browsePath, gridBagConstraints);

        typeDisplayPanel.setLayout(new java.awt.CardLayout());

        typeDisplayer.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText(NbBundle.getBundle(LocationChooser.class).getString("LAB_LocationPlatformType"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        typeDisplayer.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        typeDisplayer.add(platformType, gridBagConstraints);

        typeDisplayPanel.add(typeDisplayer, "singleMatch");

        typeChooserPanel.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText(NbBundle.getBundle(LocationChooser.class).getString("LAB_LocationChooseType"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
        typeChooserPanel.add(jLabel3, gridBagConstraints);

        typeChooserPanel.add(typeChooser, new java.awt.GridBagConstraints());

        typeDisplayPanel.add(typeChooserPanel, "multiMatch");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(typeDisplayPanel, gridBagConstraints);

    }//GEN-END:initComponents

    public ExplorerManager getExplorerManager() {
        if (manager == null)
            manager = new ExplorerManager();
        return manager;
    }    
    
    public void childrenAdded(NodeMemberEvent ev) {
        refreshTypes();
    }    
    
    public void childrenRemoved(NodeMemberEvent ev) {
        refreshTypes();
    }
    
    public void childrenReordered(NodeReorderEvent ev) {
        refreshTypes();
    }
    
    public void nodeDestroyed(NodeEvent ev) {
        refreshTypes();
    }
    
    public void propertyChange(PropertyChangeEvent e) {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel typeChooserPanel;
    private javax.swing.JPanel typeDisplayPanel;
    private javax.swing.JPanel typeDisplayer;
    private org.openide.explorer.view.ChoiceView typeChooser;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton browsePath;
    private javax.swing.JLabel platformType;
    private javax.swing.JTextField platformPath;
    // End of variables declaration//GEN-END:variables

    private File  selectedFolder;
    
    public void setFolder(File f) {
        File old = selectedFolder;
        if (f == old || f == null || !f.canRead())
            return;
        selectedFolder = f;
        platformPath.getDocument().removeDocumentListener(this);
        String filePath = f.getAbsolutePath();
        platformPath.setText(filePath);
        platformPath.getDocument().addDocumentListener(this);
        firePropertyChange("folder", null, null);
    }
    
    private void pathUpdated() {
        String s = platformPath.getText();
        if (s.length() > 1 && s.charAt(s.length() - 1) == '/') {
            s = s.substring(0, s.length() - 1);
        }
        File  file = new java.io.File(s);
        if (file.canRead()) {
            this.selectedFolder = file;
        }
        else {
            this.selectedFolder = null;
        }
        firePropertyChange("folder", null, null);
    }

    public File getFolder() {
        return selectedFolder;
    }

    /**
     * Called whenever the contents of the type chooser combo (== the list
     * of accepting installers) changes.
     */
    private void refreshTypes() {
        int count = choiceRootNode.getChildren().getNodesCount();
        // count == 0 => invalidate the panel, the selection does not really
        // match any JDK
        Node[] selection;
        
        switch (count) {
            case 0:
                ((CardLayout)typeDisplayPanel.getLayout()).show(typeDisplayPanel,
                    "singleMatch");
                selection = new Node[]{};
                platformType.setText(NbBundle.getMessage(LocationChooser.class,
                    "TXT_LocationNoSDKDetected")); // NOI18N
                break;
            case 1:
                selection = new Node[] { choiceRootNode.getChildren().getNodes()[0] };
                platformType.setText(selection[0].getDisplayName());
                ((CardLayout)typeDisplayPanel.getLayout()).show(typeDisplayPanel,
                    "singleMatch"); // NOI18N
                break;
            default:
                selection = new Node[] { choiceRootNode.getChildren().getNodes()[0] };
                ((CardLayout)typeDisplayPanel.getLayout()).show(typeDisplayPanel,
                    "multiMatch"); // NOI18N
        }
        //typeDisplayPanel.setVisible(count != 0);
        
        Node[] sel = manager.getSelectedNodes();
        if (sel.length != selection.length) {
            try {
                manager.setSelectedNodes(selection);
            } catch (PropertyVetoException ex) {
            }
        }
    }
    
    public void actionPerformed(ActionEvent e) {
        // button was pressed...
        JFileChooser chooser = new JFileChooser ();
        chooser.setFileSelectionMode (JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle (NbBundle.getMessage(LocationChooser.class,"TXT_PlatformLocation"));
        File f = this.getFolder();
        if (f != null) {
            chooser.setSelectedFile (f);
        }
        if (chooser.showOpenDialog (this) == JFileChooser.APPROVE_OPTION) {
            f = chooser.getSelectedFile();
            this.setFolder(f);
        }
    }
    
    public boolean acceptDataObject(DataObject obj) {
        return obj.getCookie(DataFolder.class) != null;
    }
    
    public void changedUpdate(DocumentEvent documentEvent) {
        pathUpdated();
    }
    
    public void insertUpdate(DocumentEvent documentEvent) {
        pathUpdated();
    }
    
    public void removeUpdate(DocumentEvent documentEvent) {
        pathUpdated();
    }
    
    /**
     * Controller for the LocationChooser panel.
     */
    public static class Panel 
        implements WizardDescriptor.Panel, PropertyChangeListener, NodeListener {
            
        LocationChooser             component;
        Collection                  listeners = new ArrayList();
        TemplateWizard.Iterator     installer;
        Node                        filteredInstallers;
        boolean                     valid;
        InstallerKeys               installerKeys;

        void setValid(boolean v) {
            if (v == valid)
                return;
            this.valid = v;
            fireStateChanged();
        }
        
        private void initializeUI() {
            AbstractNode rootNode = new AbstractNode(
                installerKeys = new InstallerKeys(InstallerRegistry.getDefault())
            );
            filteredInstallers = rootNode;
            rootNode.setName("selectionRoot");
            rootNode.setDisplayName(
                NbBundle.getBundle(LocationChooser.class).getString("TXT_LocationTypeChooserRoot")
                );
            rootNode.addNodeListener(this);
            component = new LocationChooser(rootNode);

            component.getExplorerManager().addPropertyChangeListener(this);
            component.addPropertyChangeListener(this);
        }
        
        public java.awt.Component getComponent() {
            if (component == null)
                initializeUI();
            return component;
        }
        
        public HelpCtx getHelp() {
            return HelpCtx.DEFAULT_HELP;
        }
        
        public boolean isValid() {
            return valid;
        }
        
        public void readSettings(Object settings) {
        }
        
        public void addChangeListener(ChangeListener l) {
            listeners.add(l);
        }

        public void removeChangeListener(ChangeListener l) {
            listeners.remove(l);
        }
        
        public void storeSettings(Object settings) {
        }
        
        /**
         * Returns the currently selected installer.
         */
        TemplateWizard.Iterator getInstaller() {
            return installer;
        }
        
        void fireStateChanged() {
            ChangeListener[] ll;
            synchronized (this) {
                if (listeners.isEmpty())
                    return;
                ll = (ChangeListener[])listeners.toArray(new ChangeListener[0]);
            }
            ChangeEvent ev = new ChangeEvent(this);
            for (int i = 0; i < ll.length; i++)
                ll[i].stateChanged(ev);
        }

        /**
         * Reacts to the panel type selection control; invalidates the step,
         * if there's no selection. If there is some, it extracts the TemplateWizard.Iterator
         * instance out of the node.
         */
        public void propertyChange(PropertyChangeEvent e) {
            String n = e.getPropertyName();
            if (e.getSource() == component && "folder".equals(n)) {
                File folder = component.getFolder();
                if (folder != null) {
                    FileObject[] files = FileUtil.fromFile (folder);
                    if (files.length > 0) {
                        installerKeys.setFolder(files[0]);
                    }
                }
            } else if (ExplorerManager.PROP_SELECTED_NODES.equals(n)) {
                Node[] ns = component.getExplorerManager().getSelectedNodes();
                if (ns.length == 0) {
                    platformTypeChanged(null);
                    return;
                }
                PlatformInstall pi = (PlatformInstall)ns[0].getLookup().lookup(PlatformInstall.class);
                platformTypeChanged(pi.createIterator(installerKeys.getFolder()));
            }
        }
        
        private void platformTypeChanged(TemplateWizard.Iterator installer) {
            TemplateWizard.Iterator old = this.installer;
            this.installer = installer;
            this.valid = installer != null;
            if (installer != old)
                // must fire even if only the selected installer has changed ->
                // the Iterator should update the steps.
                fireStateChanged();
        }

        void checkValid() {
        }
        
        public void childrenAdded(NodeMemberEvent ev) {
            checkValid();
        }
        
        public void childrenRemoved(NodeMemberEvent ev) {
            checkValid();
        }
        
        public void childrenReordered(NodeReorderEvent ev) {
            checkValid();
        }
        
        public void nodeDestroyed(NodeEvent ev) {
            checkValid();
        }
        
    }
}
