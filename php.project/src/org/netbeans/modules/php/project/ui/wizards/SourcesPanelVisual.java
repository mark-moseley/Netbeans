/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2008 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.project.ui.wizards;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.MutableComboBoxModel;

/**
 * @author  Tomas Mysik
 */
public class SourcesPanelVisual extends JPanel implements ActionListener {

    private static final long serialVersionUID = -358263102348820543L;

    private final DefaultComboBoxModel localServerComboBoxModel = new DefaultComboBoxModel();

    /** Creates new form SourcesPanelVisual */
    public SourcesPanelVisual() {
        initComponents();
        init();
    }

    private void init() {
        projectFolderRadioButton.addActionListener(this);
        localServerRadioButton.addActionListener(this);
        localServerComboBox.setModel(localServerComboBoxModel);
    }

    public void actionPerformed(ActionEvent evt) {
        changeLocalServerFieldsStates(localServerRadioButton.isSelected());
    }

    private void changeLocalServerFieldsStates(boolean enabled) {
        localServerComboBox.setEnabled(enabled);
        findButton.setEnabled(enabled);
        browseButton.setEnabled(enabled);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourcesGroup = new javax.swing.ButtonGroup();
        sourcesLabel = new javax.swing.JLabel();
        projectFolderLabel = new javax.swing.JLabel();
        localServerComboBox = new javax.swing.JComboBox();
        findButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();
        localServerLabel = new javax.swing.JLabel();
        projectFolderRadioButton = new javax.swing.JRadioButton();
        localServerRadioButton = new javax.swing.JRadioButton();

        org.openide.awt.Mnemonics.setLocalizedText(sourcesLabel, org.openide.util.NbBundle.getMessage(SourcesPanelVisual.class, "LBL_Sources")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(projectFolderLabel, "Project Folder"); // NOI18N
        projectFolderLabel.setEnabled(false);

        localServerComboBox.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(findButton, org.openide.util.NbBundle.getMessage(SourcesPanelVisual.class, "LBL_FindLocalServer")); // NOI18N
        findButton.setEnabled(false);

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(SourcesPanelVisual.class, "LBL_BrowseLocalServer")); // NOI18N
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(localServerLabel, org.openide.util.NbBundle.getMessage(SourcesPanelVisual.class, "TXT_LocalServer")); // NOI18N
        localServerLabel.setEnabled(false);

        sourcesGroup.add(projectFolderRadioButton);
        projectFolderRadioButton.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(projectFolderRadioButton, org.openide.util.NbBundle.getMessage(SourcesPanelVisual.class, "LBL_UseProjectFolder")); // NOI18N

        sourcesGroup.add(localServerRadioButton);
        org.openide.awt.Mnemonics.setLocalizedText(localServerRadioButton, org.openide.util.NbBundle.getMessage(SourcesPanelVisual.class, "LBL_UseLocalServer")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(sourcesLabel)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(localServerRadioButton)
                            .add(layout.createSequentialGroup()
                                .add(21, 21, 21)
                                .add(localServerComboBox, 0, 0, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(findButton)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(browseButton))))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(21, 21, 21)
                                .add(projectFolderLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(projectFolderRadioButton)
                                .add(137, 137, 137))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(localServerLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(sourcesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(projectFolderRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(projectFolderLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(localServerRadioButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(browseButton)
                    .add(findButton)
                    .add(localServerComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(localServerLabel)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        String location = (String) localServerComboBox.getSelectedItem();
        String newLocation = Utils.browseLocationAction(this, location);
        if (newLocation == null) {
            return;
        }

        for (int i = 0; i < localServerComboBoxModel.getSize(); i++) {
            String element = (String) localServerComboBoxModel.getElementAt(i);
            if (newLocation.equals(element)) {
                localServerComboBox.setSelectedIndex(i);
                return;
            }
        }
        localServerComboBoxModel.addElement(newLocation);
        localServerComboBox.setSelectedItem(newLocation);
        Utils.sortComboBoxModel(localServerComboBoxModel);
    }//GEN-LAST:event_browseButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton findButton;
    private javax.swing.JComboBox localServerComboBox;
    private javax.swing.JLabel localServerLabel;
    private javax.swing.JRadioButton localServerRadioButton;
    private javax.swing.JLabel projectFolderLabel;
    private javax.swing.JRadioButton projectFolderRadioButton;
    private javax.swing.ButtonGroup sourcesGroup;
    private javax.swing.JLabel sourcesLabel;
    // End of variables declaration//GEN-END:variables

    boolean isProjectFolderUsed() {
        return projectFolderRadioButton.isSelected();
    }

    boolean isLocalServerUsed() {
        return localServerRadioButton.isSelected();
    }

    String getLocalServerLocation() {
        if (isProjectFolderUsed()) {
            return null;
        }
        return (String) localServerComboBox.getSelectedItem();
    }

    MutableComboBoxModel getLocalServerModel() {
        return localServerComboBoxModel;
    }

    void setProjectFolderLabel(String path) {
        projectFolderLabel.setText(path);
    }

    void replaceLocalServerLocation(String path) {
        int idx = localServerComboBox.getSelectedIndex();
        if (idx != -1) {
            localServerComboBoxModel.removeElementAt(idx);
            localServerComboBoxModel.insertElementAt(path, idx);
        }
    }
}
