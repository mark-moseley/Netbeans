/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is Forte for Java, Community Edition. The Initial
 * Developer of the Original Code is Sun Microsystems, Inc. Portions
 * Copyright 1997-2000 Sun Microsystems, Inc. All Rights Reserved.
 */

package com.netbeans.developer.modules.javadoc.search;

import java.net.URL;

import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.SwingUtilities;
import java.awt.Image;
import java.awt.Dimension;

import com.netbeans.ide.windows.TopComponent;
import com.netbeans.ide.util.RequestProcessor;
import com.netbeans.ide.TopManager;
import com.netbeans.ide.NotifyDescriptor;
import com.netbeans.ide.util.NbBundle;

/** Main window for documentation index search
 *
 * @author Petr Hrebejk
 */
public class IndexSearch extends TopComponent {

  /** Search engine */
  private SearchEngine searchEngine = null;

  private String quickFind;

  private static ResourceBundle bundle = NbBundle.getBundle(IndexSearch.class);

  /** Button titles */

  private static final String STR_FIND = bundle.getString ("CTL_SEARCH_ButtonFind");
  private static final String STR_STOP = bundle.getString ("CTL_SEARCH_ButtonStop");


  /** Initializes the Form */
  public IndexSearch() {
    initComponents ();

    setName( bundle.getString ("CTL_SEARCH_WindowTitle") );
    setRequestedSize( new Dimension( 450, 200 ) );
    // Customizing the window
    DefaultListModel listModel = new DefaultListModel(); // PENDING: Change to SortedArrayList
    resultsList.setModel( listModel );

    IndexListCellRenderer cr = new IndexListCellRenderer();
    resultsList.setCellRenderer( cr );

    resultsScrollPane.validate();

    searchButton.setText( STR_FIND );

    /*
    searchComboBox.setMaximumRowCount( 4 );
    // Make the combobox do the same action as searchButton
    
    searchComboBox.addKeyListener( new java.awt.event.KeyAdapter () {
          public void keyPressed (java.awt.event.KeyEvent evt) {
            if ( evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER )
              searchButtonActionPerformed (null);
      }
    } );
    */
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    setLayout (new java.awt.GridBagLayout ());
    java.awt.GridBagConstraints gridBagConstraints1;

    searchComboBox = new javax.swing.JComboBox ();
    searchComboBox.setEditable (true);
    searchComboBox.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          searchComboBoxActionPerformed (evt);
        }
      }
    );


    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets (0, 0, 0, 8);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints1.weightx = 1.0;
    add (searchComboBox, gridBagConstraints1);

    searchButton = new javax.swing.JButton ();
    searchButton.setText ("Find");
    searchButton.addActionListener (new java.awt.event.ActionListener () {
        public void actionPerformed (java.awt.event.ActionEvent evt) {
          searchButtonActionPerformed (evt);
        }
      }
    );


    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridwidth = 0;
    add (searchButton, gridBagConstraints1);

    resultsScrollPane = new javax.swing.JScrollPane ();

      resultsList = new javax.swing.JList ();
      resultsList.addKeyListener (new java.awt.event.KeyAdapter () {
          public void keyPressed (java.awt.event.KeyEvent evt) {
            resultsListKeyPressed (evt);
          }
        }
      );
      resultsList.addMouseListener (new java.awt.event.MouseAdapter () {
          public void mouseClicked (java.awt.event.MouseEvent evt) {
            resultsListMouseClicked (evt);
          }
        }
      );

    resultsScrollPane.setViewportView (resultsList);


    gridBagConstraints1 = new java.awt.GridBagConstraints ();
    gridBagConstraints1.gridwidth = 0;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints1.insets = new java.awt.Insets (5, 0, 0, 0);
    gridBagConstraints1.weightx = 1.0;
    gridBagConstraints1.weighty = 1.0;
    add (resultsScrollPane, gridBagConstraints1);

  }//GEN-END:initComponents

  private void resultsListKeyPressed (java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resultsListKeyPressed
    // Add your handling code here:
    if ( evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER ||
         evt.getKeyCode() == java.awt.event.KeyEvent.VK_SPACE )
      showHelp();      
  }//GEN-LAST:event_resultsListKeyPressed

  private void resultsListMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsListMouseClicked
    // Add your handling code here:
    if ( evt.getClickCount() == 2 ) {
      showHelp(); 
    }
  }//GEN-LAST:event_resultsListMouseClicked

  /** Invokes the browser with help */
  private void showHelp() {
    DocIndexItem  dii = (DocIndexItem)resultsList.getModel().getElementAt( resultsList.getMinSelectionIndex() );

    try {
      URL url = dii.getURL();

      // Workaround for bug in FileSystems
      String strUrl = url.toString();
      //System.out.println ( url.toString() );
      if ( strUrl.startsWith( "nbfs:" ) && strUrl.charAt( 5 ) != '/' ){
        url = new URL( "nbfs:/" + strUrl.substring( 5 ) );
      }

      //System.out.println ( "the URL " + url );
      TopManager.getDefault().showUrl( url );
    }
    catch ( java.net.MalformedURLException ex ) {
      System.out.println ( "Malformed URL" );
    }
  }
  
  
  private void searchComboBoxActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboBoxActionPerformed
    //searchButtonActionPerformed( evt );
  }//GEN-LAST:event_searchComboBoxActionPerformed

  private void searchButtonActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
    //System.out.println ( "Button AP " );
    if ( searchEngine == null ) {
      searchEngine = new SearchEngine();
      searchEngine.go();
    }
    else {
      searchEngine.stop();
      searchEngine = null;
    }
  }//GEN-LAST:event_searchButtonActionPerformed


// Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox searchComboBox;
  private javax.swing.JButton searchButton;
  private javax.swing.JScrollPane resultsScrollPane;
  private javax.swing.JList resultsList;
// End of variables declaration//GEN-END:variables


  private void searchStoped() {
    searchEngine = null;
    javax.swing.SwingUtilities.invokeLater( new Runnable() {
      public void run() {
        searchButton.setText( STR_FIND );
        if ( resultsList.getModel().getSize() > 0 ) {
          resultsList.setSelectedIndex( 0 );
          resultsList.grabFocus();
        }
        resultsList.revalidate();    
      }
    } );
  }

  void setTextToFind( String toFind ) {
    if ( toFind != null ) {
      quickFind = toFind; 
    }
  }


  public void open() {
    super.open();

    if ( quickFind != null ) {
      searchComboBox.getEditor().setItem( quickFind ); 
      if ( searchEngine == null ) {
        searchButtonActionPerformed( null );
      }
    }

    quickFind = null;
  }

  private class SearchEngine {

    private ArrayList tasks;
    
    private DocFileSystem[] docSystems;
    private IndexSearchThread.DocIndexItemConsumer diiConsumer;

    SearchEngine() {
      docSystems = DocFileSystem.getFolders();
      tasks = new ArrayList( docSystems.length );

      diiConsumer = new IndexSearchThread.DocIndexItemConsumer() {
        public void addDocIndexItem( final DocIndexItem dii ) {
          javax.swing.SwingUtilities.invokeLater( new Runnable() {
            public void run() {
              ((DefaultListModel)resultsList.getModel()).addElement( dii );
            }
          } );
        }

        public void indexSearchThreadFinished( IndexSearchThread t ) {
          tasks.remove( t );
          if ( tasks.isEmpty() )
            searchStoped();
        }
      };
    }

    /** Starts searching */

    void go() {
      
      if ( docSystems.length <= 0 ) {
        TopManager.getDefault().notify( new NotifyDescriptor.Message( bundle.getString( "MSG_NoDoc" ) ) );
        searchStoped();  
        return;  
      }

      String toFind = new String( searchComboBox.getEditor().getItem().toString() );
    
      // Try to find this string in Combo
      
      for ( int i = 0; i < searchComboBox.getItemCount(); i++ ) {
        if ( searchComboBox.getItemAt( i ).toString().equals( toFind ) || i >= 10 ) {
          searchComboBox.removeItemAt( i );
        }
      }
      
      searchComboBox.insertItemAt( toFind, 0 );
      searchComboBox.getEditor().setItem( toFind );

      ((DefaultListModel)resultsList.getModel()).clear();
      for( int i = 0; i < docSystems.length; i++ ) {
        IndexSearchThread searchThread = new SearchThreadJdk12( toFind,  docSystems[i].getIndexFile() , diiConsumer );
        tasks.add( searchThread );
        searchThread.go();
      }
      //System.out.println ( "All started" );
      searchButton.setText( STR_STOP );
    }

    /** Stops the search */

    void stop() {
      for( int i = 0; i < tasks.size(); i++ ) {
        SearchThreadJdk12 searchThread = (SearchThreadJdk12)tasks.get( i );
        searchThread.finish();
      }

    }

  }

}
