<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See harness/README in the NetBeans platform -->
<!-- for some information on what you could do (e.g. targets to override). -->
<!-- If you delete this file and reopen the project it will be recreated. -->
<project name="org.netbeans.lib.richexecution" default="netbeans" basedir=".">
    <description>Builds, tests, and runs the project org.netbeans.lib.richexecution.</description>
    <import file="nbproject/build-impl.xml"/>

    <!-- 
    The main task is to get _some_ version of "process_start" into ${lib.dir}

    ${lib.dir} is the ultimate destination, typically ${cluster}/modules/lib.
    ${build.lib} is the local staging area, typically ./build/lib.

    For a regular user, ideally, zip versions of binaries for process_start
    are available for all platforms and they get first unzipped into build/lib
    and then copied to ${lib.dir}.
    In case the zip version is not available for some platform a fallback
    "process_start.sh" always gets copied to ${lib.dir}. It has lesser
    capabilities.

    For the maintainer(s) of this module process_start.c is compiled into
    build/lib and then copied to ${lib.dir}. This is only done for
    the current platform. A failed compilation is not a fatal error ...
    There's always "process_start.sh" for the runtime to fall back on.

    Once in a blue moon the maintainer will use the 'update_zip' target
    to create new zipfiles. This has to be done once on each platform and
    need not be done simultaneously.

      Default target sequence:
          setup
          work
          copy-sh
          process_start
          if (maintainer)
            maybe-process_start-maintainer
            process_start-maintainer
          else // builder
            maybe-process_start-builder
            process_start-builder
            unzip-process_start ${plat}
          endif
          copy-all-process_start
          copy-process_start ${plat}

    PACKAGING FOR STANDALONE USE
    [ TBD ]

    -->

    <target name="netbeans-extra" depends="init,setup, work" />

    <!--
      Setup various properties:
      - ${platform}
        One of:
            solaris-sparc
            solaris-intel
            linux-intel
      - ${role}
        One of maintainer or builder
      - ${builder}
        If our "role" is builder.
      - ${maintainer}
        If our "role" is maintainer.
      - ${lib.dir}
      - ${build.lib}
      -->
    <target name="setup">
        <echo message="setup: release = ${release.dir}" />
        <echo message="setup: cluster = ${cluster}" />
        <echo message="setup: module.jar.dir = ${module.jar.dir}" />

        <!--
         platform
         -->
        <condition property="platform" value="solaris-sparc">
            <or>
                <os name="SunOS" arch="sparc"/>
                <os name="SunOS" arch="sparcv9"/>
            </or>
        </condition>
        <condition property="platform" value="solaris-intel">
            <or>
                <os name="SunOS" arch="x86"/>
                <os name="SunOS" arch="amd64"/>
            </or>
        </condition>
        <condition property="platform" value="mac-intel">
            <or>
                <os name="Mac OS X" arch="i386"/>
            </or>
        </condition>
        <condition property="platform" value="linux-intel">
            <or>
                <os name="Linux" arch="i386"/>
                <os name="Linux" arch="amd64"/>
            </or>
        </condition>
        <condition property="platform" value="windows-intel">
            <or>
                <os name="Windows XP" arch="x86"/>
            </or>
        </condition>

        <fail message="Cannot determine platform for '${os.name}'/'${os.arch}'"
              unless="platform" />


        <!-- List of "maintainers" -->
        <property file="maintainers.properties"/>

	<!--
        <property environment="env"/>
	-->

        <echo message="setup: maintainers=${maintainers}" />
        <echo message="setup: user=${user.name}" />

        <!-- what is our role ? -->
        <condition property="role"
                   value="maintainer"
                   else="builder">
            <matches string="${maintainers}"
                      pattern="\b${user.name}\b" />
        </condition>

        <!-- are we a maintainer ? -->
        <condition property="maintainer">
            <matches string="${maintainers}"
                      pattern="\b${user.name}\b" />
        </condition>

        <!-- are we a builder ? -->
        <condition property="builder">
            <not>
                <matches string="${maintainers}"
                          pattern="\b${user.name}\b" />
            </not>
        </condition>

        <echo message="setup: role      =${role}" />
        <echo message="setup: builder   =${builder}" />
        <echo message="setup: maintainer=${maintainer}" />



        <property name="lib.dir"
                  value="${cluster}/${module.jar.dir}/lib" />
        <property name="build.lib"
                  value="${basedir}/build/lib" />

        <echo message="setup: platform=${platform}" />
        <echo message="setup: lib.dir = ${lib.dir}" />
        <echo message="setup: build.lib = ${build.lib}" />

        <!--
        <fail message="Just checking" />
        -->
    </target>

    <target name="work"
            depends="copy-sh,process_start,copy-all-process_start" />


    <target name="copy-sh">
        <echo message="copy-sh: Copying process_start.sh to cluster/modules/lib ..." />
        <copy file="process_start.sh"
              preservelastmodified="true"
              todir="${lib.dir}" />
        <chmod file="${lib.dir}/process_start.sh"
               perm="+x" />
    </target>


    <!-- Create a process_start executable in build/lib.
         We accomplish this goal using either process_start-maintainer or
         process_start-builder depending on our "role"
     -->
    <target name="process_start"
            depends="maybe-process_start-builder,
                     maybe-process_start-maintainer" />

    <target name="maybe-process_start-maintainer"
            if="maintainer">
        <antcall target="process_start-maintainer" />
    </target>

    <target name="maybe-process_start-builder"
            if="builder">
        <antcall target="process_start-builder" />
    </target>


    <!-- Build a process_start executable into build/lib -->
    <target name="process_start-maintainer">
        <!--
          Compilation can fail for a variety of reasons.
          Ideally, for some things, like syntax errors, we want to stop
          the build, and for others we want to keep going and let RichExecution
          fall back on the shell version.
          But it's very hard to be picky about errors.
          So, for now, we will keep on going no matter what kind of failure.
          -->

        <echo message="Building process_start to build/lib ..." />
        <mkdir dir="${build.lib}"/>
        <delete file="${build.lib}/process_start-${platform}"/>
        <exec executable="cc"
              resultproperty="exitcode"
              failifexecutionfails="false">
            <arg value="process_start.c"/>
            <arg value="-m32"/>
            <arg value="-o"/>
            <arg value="${build.lib}/process_start-${platform}"/>
        </exec>
        <!--
        <echo message="exitcode=${exitcode}" />
        -->

        <!-- strip it to reduce impact on Hg repository
             The stripped binary is about half the size of the original
          -->
        <exec executable="strip"
              resultproperty="exitcode"
              failifexecutionfails="false">
            <arg value="${build.lib}/process_start-${platform}"/>
        </exec>
    </target>


    <!-- Extract a process_start executable from prepared zipfiles
         into build/lib
     -->
    <target name="process_start-builder">
        <mkdir dir="${build.lib}"/>

        <!-- Determine which versions of the binary zipfiles are available.  -->
        <available file="process_start-solaris-sparc.zip"
                   property="process_start.zip.solaris-sparc.available"/>
        <available file="process_start-solaris-intel.zip"
                   property="process_start.zip.solaris-intel.available"/>
        <available file="process_start-linux-intel.zip"
                   property="process_start.zip.linux-intel.available"/>

        <!-- unzip for each platform -->
        <antcall target="unzip-process_start">
            <param name="plat" value="solaris-sparc"/>
        </antcall>
        <antcall target="unzip-process_start">
            <param name="plat" value="solaris-intel"/>
        </antcall>
        <antcall target="unzip-process_start">
            <param name="plat" value="linux-intel"/>
        </antcall>
    </target>

    <!-- "subroutine"
         ${plat} set to one of valid values for ${platform}.
     -->
    <target name="unzip-process_start"
            if="process_start.zip.${plat}.available">
        <echo message="Extracting process_start-${plat} to build/lib ..." />
        <delete file="${build.lib}/process_start-${plat}"/>
        <unzip src="process_start-${plat}.zip"
               dest="${build.lib}" />
    </target>


    <target name="copy-all-process_start">

        <!-- Determine which versions of the binaries are available -->
        <available file="${build.lib}/process_start-solaris-sparc"
                   property="process_start.solaris-sparc.available"/>
        <available file="${build.lib}/process_start-solaris-intel"
                   property="process_start.solaris-intel.available"/>
        <available file="${build.lib}/process_start-linux-intel"
                   property="process_start.linux-intel.available"/>
        <available file="${build.lib}/process_start-mac-intel"
                   property="process_start.mac-intel.available"/>

        <!-- copy for each platform -->
        <antcall target="copy-process_start">
            <param name="plat" value="solaris-sparc"/>
        </antcall>
        <antcall target="copy-process_start">
            <param name="plat" value="solaris-intel"/>
        </antcall>
        <antcall target="copy-process_start">
            <param name="plat" value="linux-intel"/>
        </antcall>
        <antcall target="copy-process_start">
            <param name="plat" value="mac-intel"/>
        </antcall>
     </target>

    <!--
         copy ${plat}-specific process_start from build/lib to ${lib.dir}
         "subroutine"
         ${plat} set to one of valid values for ${platform}.
     -->
    <target name="copy-process_start"
            if="process_start.${plat}.available">
        <echo message="Copying process_start-${plat} to cluster/modules/lib ..." />
        <copy file="${build.lib}/process_start-${plat}"
              preservelastmodified="true"
              todir="${lib.dir}" />
        <chmod file="${lib.dir}/process_start-${plat}"
               perm="+x" />
    </target>


    <!--
     zip up process_start
     -->
    <target name="update_zip" depends="setup,process_start">
        <!-- setup defines ${lib.dir} and ${build.lib} -->

        <fail message="Need to be in maintainer role to reposit process_start"
              unless="maintainer" />

        <!-- make sure the binary we're trying to zip actually exists -->
        <available file="${build.lib}/process_start-${platform}"
                   property="process_start.available"/>
        <fail unless="process_start.available"
              message="Binary doesn't exist"/>

        <!-- strip it to reduce impact on Hg repository
             The stripped binary is about half the size of the original
          -->
        <!--
        We now strip as we build on the built platform
        <exec executable="strip"
              resultproperty="exitcode"
              failifexecutionfails="false">
            <arg value="${build.lib}/process_start-${platform}"/>
        </exec>
        -->

        <zip basedir="${build.lib}"
             includes="process_start-${platform}"
             destfile="process_start-${platform}.zip"/>
    </target>

    <target name="clean" depends="setup,projectized-common.clean">
        <delete dir="${lib.dir}"/>
    </target>

</project>
