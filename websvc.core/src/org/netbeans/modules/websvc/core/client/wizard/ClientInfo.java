/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.websvc.core.client.wizard;

import java.io.File;

import javax.swing.JPanel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import org.openide.WizardDescriptor;
import org.openide.filesystems.FileUtil;

import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.spi.project.ui.templates.support.Templates;

import org.netbeans.modules.web.api.webmodule.WebModule;
import org.netbeans.modules.web.spi.webmodule.WebModuleImplementation;

import org.netbeans.modules.websvc.core.Utilities;

/**
 *
 * @author Peter Williams
 */
public final class ClientInfo extends JPanel implements DocumentListener {
	
	private static final FileFilter WSDL_FILE_FILTER = new WsdlFileFilter();
	private static String previousDirectory = "";
	
	private WebServiceClientWizardDescriptor descriptorPanel;
	
	public ClientInfo(WebServiceClientWizardDescriptor panel) {
		descriptorPanel = panel;
		
		initComponents();
		initUserComponents();
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents() {//GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;
		
		btnGrpWsdlSource = new javax.swing.ButtonGroup();
		jLblChooseSource = new javax.swing.JLabel();
		jRbnFilesystem = new javax.swing.JRadioButton();
		jTxtWsdlFile = new javax.swing.JTextField();
		jBtnBrowse = new javax.swing.JButton();
		jRbnServiceURL = new javax.swing.JRadioButton();
		jTxtWsdlURL = new javax.swing.JTextField();
		jBtnProxy = new javax.swing.JButton();
		jLblProject = new javax.swing.JLabel();
		jTxtProject = new javax.swing.JTextField();
		jLblPackageName = new javax.swing.JLabel();
		jTxtPackageName = new javax.swing.JTextField();
		jLblClientType = new javax.swing.JLabel();
		jCbxClientType = new javax.swing.JComboBox();
		
		FormListener formListener = new FormListener();
		
		
		setLayout(new java.awt.GridBagLayout());
		
		jLblChooseSource.setText("Select source of WSDL file for the web service to be added to this module :");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
		add(jLblChooseSource, gridBagConstraints);
		
		jRbnFilesystem.setSelected(true);
		jRbnFilesystem.setText("From local filesystem :");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(jRbnFilesystem, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
		gridBagConstraints.weightx = 1.0;
		add(jTxtWsdlFile, gridBagConstraints);
		
		jBtnBrowse.setText("Browse...");
		jBtnBrowse.addActionListener(formListener);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
		add(jBtnBrowse, gridBagConstraints);
		
		jRbnServiceURL.setText("From URL of running service :");
		jRbnServiceURL.setFocusable(false);
		jRbnServiceURL.setEnabled(false);
		jRbnServiceURL.addActionListener(formListener);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(jRbnServiceURL, gridBagConstraints);
		
		jTxtWsdlURL.setFocusable(false);
		jTxtWsdlURL.setEnabled(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
		add(jTxtWsdlURL, gridBagConstraints);
		
		jBtnProxy.setText("Proxy Settings...");
		jBtnProxy.setFocusable(false);
		jBtnProxy.setEnabled(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
		add(jBtnProxy, gridBagConstraints);
		
		jLblProject.setText("Project :");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(8, 4, 0, 4);
		add(jLblProject, gridBagConstraints);
		
		jTxtProject.setEditable(false);
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
		add(jTxtProject, gridBagConstraints);
		
		jLblPackageName.setText("Package name for generated interfaces :");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(4, 4, 0, 4);
		add(jLblPackageName, gridBagConstraints);
		
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
		gridBagConstraints.weightx = 1.0;
		add(jTxtPackageName, gridBagConstraints);
		
		jLblClientType.setText("Web service client type :");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.ipady = 4;
		gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		gridBagConstraints.weighty = 1.0;
		add(jLblClientType, gridBagConstraints);
		
		jCbxClientType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "J2EE 1.4 (JSR-109)" }));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
		add(jCbxClientType, gridBagConstraints);
		
	}
	
	// Code for dispatching events from components to event handlers.
	
	private class FormListener implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent evt) {
			if (evt.getSource() == jBtnBrowse) {
				ClientInfo.this.jBtnBrowseActionPerformed(evt);
			}
			else if (evt.getSource() == jRbnServiceURL) {
				ClientInfo.this.jRbnServiceURLActionPerformed(evt);
			}
		}
	}//GEN-END:initComponents

	private void jRbnServiceURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbnServiceURLActionPerformed
		// TODO add your handling code here:
	}//GEN-LAST:event_jRbnServiceURLActionPerformed

	private void jBtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBrowseActionPerformed
		JFileChooser chooser = new JFileChooser(previousDirectory);
		chooser.setMultiSelectionEnabled(false);
		chooser.setAcceptAllFileFilterUsed(false);
		chooser.addChoosableFileFilter(WSDL_FILE_FILTER);
		chooser.setFileFilter(WSDL_FILE_FILTER);

		if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File wsdlFile = chooser.getSelectedFile();
			jTxtWsdlFile.setText(wsdlFile.getAbsolutePath());
			previousDirectory = wsdlFile.getPath();
		}
	}//GEN-LAST:event_jBtnBrowseActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup btnGrpWsdlSource;
	private javax.swing.JButton jBtnBrowse;
	private javax.swing.JButton jBtnProxy;
	private javax.swing.JComboBox jCbxClientType;
	private javax.swing.JLabel jLblChooseSource;
	private javax.swing.JLabel jLblClientType;
	private javax.swing.JLabel jLblPackageName;
	private javax.swing.JLabel jLblProject;
	private javax.swing.JRadioButton jRbnFilesystem;
	private javax.swing.JRadioButton jRbnServiceURL;
	private javax.swing.JTextField jTxtPackageName;
	private javax.swing.JTextField jTxtProject;
	private javax.swing.JTextField jTxtWsdlFile;
	private javax.swing.JTextField jTxtWsdlURL;
	// End of variables declaration//GEN-END:variables

	private void initUserComponents() {
		setName("Specify Web Service Client Information");

		// Register listener on the textFields to make the automatic updates
        jTxtWsdlFile.getDocument().addDocumentListener(this);
        jTxtPackageName.getDocument().addDocumentListener(this);
	}

    void store(WizardDescriptor d) {
        d.putProperty(WizardProperties.WSDL_FILE_PATH, jTxtWsdlFile.getText().trim());
        d.putProperty(WizardProperties.WSDL_PACKAGE_NAME, jTxtPackageName.getText().trim());
	}

    void read(WizardDescriptor d) {
		jTxtProject.setText(ProjectUtils.getInformation(Templates.getProject(d)).getDisplayName());
		jTxtWsdlFile.setText((String) d.getProperty(WizardProperties.WSDL_FILE_PATH));
		jTxtPackageName.setText((String) d.getProperty(WizardProperties.WSDL_PACKAGE_NAME));
	}
	
	boolean valid(WizardDescriptor wizardDescriptor) {
		// !PW 50047 - for EA1 (JSR-109 only) wizard is only valid if the project
		// supports Servlet 2.4 (and thus J2EE 1.4).
		Project p = Templates.getProject(wizardDescriptor);
		// !PW FIXME this lookup call will need to be updated for freeform projects in EA2.
		WebModuleImplementation wm = (WebModuleImplementation) p.getLookup().lookup(WebModuleImplementation.class);
		if(WebModule.J2EE_13_LEVEL.equals(wm.getJ2eePlatformVersion())) {
			final String message = "JSR-109 web service clients are not supported in Servlet 2.3 (J2EE 1.3) web applications.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false; // servlet 2.3/j2ee 1.3 webapp project
		}

		String wsdlFilePath = jTxtWsdlFile.getText().trim();
		
		if(wsdlFilePath == null || wsdlFilePath.length() == 0) {
			final String message = "Enter the name of the WSDL file representing the service you wish to use.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false; // unspecified WSDL file
		}
		
		File f = new File(wsdlFilePath);
		String wsdlFileText = f.getAbsolutePath();
		f = Utilities.getCanonicalFile(f);
		if(f == null) {
			final String message = "WSDL file is invalid.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false; // invalid WSDL file
		}
		
		if(!f.exists()) {
			final String message = "WSDL file is does not exist.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false; // invalid WSDL file
		}
		
		// !PW FIXME should also detect if WSDL file has previously been added to
		// this project.  Note that not doing so and overwriting the existing entry
		// is the equivalent of doing an update on it.  Nothing bad will happen
		// unless it turns out the user didn't want to update the service in the
		// first place.
		
		String packageName = jTxtPackageName.getText().trim();
		
		if(packageName == null || packageName.length() == 0) {
			final String message = "Enter the java package where the service interfaces should be generated.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false; // unspecified WSDL file
		}
		
		if(!Utilities.isJavaPackage(packageName)) {
			final String message = "Package name is invalid.";
			wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
			return false; // invalid package name
		}
		
		wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
		return true;
	}
	
    // Implementation of DocumentListener --------------------------------------
	public void changedUpdate(DocumentEvent e) {
		updateTexts(e);
	}
	
	public void insertUpdate(DocumentEvent e) {
		updateTexts(e);
	}
	
	public void removeUpdate(DocumentEvent e) {
		updateTexts(e);
	}
	
    private void updateTexts(DocumentEvent e) {
        descriptorPanel.fireChangeEvent(); // Notify that the panel changed
    }
    // End of Implementation of DocumentListener --------------------------------------
	
	private static class WsdlFileFilter extends FileFilter {
		public boolean accept(File f) {
			boolean result;
			if(f.isDirectory() || "wsdl".equalsIgnoreCase(FileUtil.getExtension(f.getName()))) {
				result = true;
			} else {
				result = false;
			}
			return result;
		}

		public String getDescription() {
			return "Web Service Descriptor Files (*.wsdl)";
		}
	}	
}
