/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.websvc.core.client.wizard;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.Iterator;
import java.util.List;

import java.awt.Component;

import javax.swing.JPanel;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import javax.swing.filechooser.FileFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.text.JTextComponent;

import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.WizardDescriptor;
import org.openide.filesystems.FileUtil;
import org.openide.util.NbBundle;

import org.netbeans.api.java.project.JavaProjectConstants;
import org.netbeans.spi.java.project.support.ui.PackageView;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectUtils;
import org.netbeans.api.project.SourceGroup;
import org.netbeans.api.project.Sources;
import org.netbeans.spi.project.ui.templates.support.Templates;
        
import org.netbeans.modules.j2ee.deployment.devmodules.api.Deployment;
import org.netbeans.modules.j2ee.deployment.devmodules.api.J2eePlatform;
import org.netbeans.modules.j2ee.deployment.devmodules.spi.J2eeModuleProvider;

import org.netbeans.modules.websvc.api.client.WebServicesClientSupport;
import org.netbeans.modules.websvc.spi.webservices.WebServicesConstants;
import org.netbeans.modules.websvc.core.Utilities;


/**
 *
 * @author Peter Williams
 */
public final class ClientInfo extends JPanel implements WsdlRetriever.MessageReceiver {

    private static final String PROP_ERROR_MESSAGE = "WizardPanel_errorMessage"; // NOI18N

    private static final int WSDL_FROM_FILE = 1;
    private static final int WSDL_FROM_SERVICE = 2;

	private static final FileFilter WSDL_FILE_FILTER = new WsdlFileFilter();
	private static String previousDirectory = "";

	private WebServiceClientWizardDescriptor descriptorPanel;

    private boolean settingFields;
    private int wsdlSource;
    private File wsdlTmpFile;

    // properties for 'get from server'
    private WsdlRetriever retriever;
    private String downloadMsg;

	public ClientInfo(WebServiceClientWizardDescriptor panel) {
		descriptorPanel = panel;

        this.settingFields = false;
        this.wsdlSource = WSDL_FROM_SERVICE;
        this.wsdlTmpFile = null;
        this.retriever = null;

		initComponents();
		initUserComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnGrpWsdlSource = new javax.swing.ButtonGroup();
        jLblChooseSource = new javax.swing.JLabel();
        jRbnServiceURL = new javax.swing.JRadioButton();
        jLblWsdlURL = new javax.swing.JLabel();
        jTxtWsdlURL = new javax.swing.JTextField();
        jBtnGetWsdl = new javax.swing.JButton();
        jLblLocalFNDescription = new javax.swing.JLabel();
        jBtnProxy = new javax.swing.JButton();
        jLblLocalFilename = new javax.swing.JLabel();
        jTxtLocalFilename = new javax.swing.JTextField();
        jLblDummy = new javax.swing.JLabel();
        jRbnFilesystem = new javax.swing.JRadioButton();
        jLblWsdlFile = new javax.swing.JLabel();
        jTxtWsdlFile = new javax.swing.JTextField();
        jBtnBrowse = new javax.swing.JButton();
        jSeparator = new javax.swing.JSeparator();
        jLblProject = new javax.swing.JLabel();
        jTxtProject = new javax.swing.JTextField();
        jLblPackageDescription = new javax.swing.JLabel();
        jLblPackageName = new javax.swing.JLabel();
        jCbxPackageName = new javax.swing.JComboBox();
        jLblClientType = new javax.swing.JLabel();
        jCbxClientType = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLblChooseSource, NbBundle.getMessage(ClientInfo.class, "LBL_WsdlSource"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        add(jLblChooseSource, gridBagConstraints);

        btnGrpWsdlSource.add(jRbnServiceURL);
        org.openide.awt.Mnemonics.setLocalizedText(jRbnServiceURL, NbBundle.getMessage(ClientInfo.class, "LBL_WsdlSourceUrl"));
        jRbnServiceURL.setFocusable(false);
        jRbnServiceURL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbnServiceURLActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jRbnServiceURL, gridBagConstraints);

        jLblWsdlURL.setLabelFor(jTxtWsdlURL);
        org.openide.awt.Mnemonics.setLocalizedText(jLblWsdlURL, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_WsdlUrl"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 22, 6, 6);
        add(jLblWsdlURL, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
        add(jTxtWsdlURL, gridBagConstraints);
        jTxtWsdlURL.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ClientInfo.class, "ACSN_WsdlSourceUrl"));
        jTxtWsdlURL.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ClientInfo.class, "ACSD_WsdlSourceUrl"));

        org.openide.awt.Mnemonics.setLocalizedText(jBtnGetWsdl, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_RetrieveWsdl"));
        jBtnGetWsdl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnGetWsdlActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
        add(jBtnGetWsdl, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLblLocalFNDescription, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_LocalFNDescription"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 22, 6, 6);
        add(jLblLocalFNDescription, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jBtnProxy, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_ProxySettings"));
        jBtnProxy.setFocusable(false);
        jBtnProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnProxyActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 6, 6);
        add(jBtnProxy, gridBagConstraints);

        jLblLocalFilename.setLabelFor(jTxtLocalFilename);
        org.openide.awt.Mnemonics.setLocalizedText(jLblLocalFilename, NbBundle.getMessage(ClientInfo.class, "LBL_LocalFilename"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 22, 12, 6);
        add(jLblLocalFilename, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jTxtLocalFilename, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        add(jLblDummy, gridBagConstraints);

        btnGrpWsdlSource.add(jRbnFilesystem);
        org.openide.awt.Mnemonics.setLocalizedText(jRbnFilesystem, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_WsdlSourceFilesystem"));
        jRbnFilesystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRbnFilesystemActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jRbnFilesystem, gridBagConstraints);

        jLblWsdlFile.setLabelFor(jTxtWsdlFile);
        org.openide.awt.Mnemonics.setLocalizedText(jLblWsdlFile, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_WsdlFilename"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 22, 12, 6);
        add(jLblWsdlFile, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jTxtWsdlFile, gridBagConstraints);
        jTxtWsdlFile.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(ClientInfo.class, "ACSN_WsdlSourceFilesystem"));
        jTxtWsdlFile.getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(ClientInfo.class, "ACSD_WsdlSourceFile"));

        org.openide.awt.Mnemonics.setLocalizedText(jBtnBrowse, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_Browse"));
        jBtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBrowseActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jBtnBrowse, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 12, 0);
        add(jSeparator, gridBagConstraints);

        jLblProject.setLabelFor(jTxtProject);
        org.openide.awt.Mnemonics.setLocalizedText(jLblProject, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_Project"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jLblProject, gridBagConstraints);

        jTxtProject.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jTxtProject, gridBagConstraints);

        jLblPackageDescription.setLabelFor(jCbxPackageName);
        org.openide.awt.Mnemonics.setLocalizedText(jLblPackageDescription, NbBundle.getMessage(ClientInfo.class, "LBL_PackageDescription"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jLblPackageDescription, gridBagConstraints);

        jLblPackageName.setLabelFor(jCbxPackageName);
        org.openide.awt.Mnemonics.setLocalizedText(jLblPackageName, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_PackageName"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jLblPackageName, gridBagConstraints);

        jCbxPackageName.setEditable(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jCbxPackageName, gridBagConstraints);

        jLblClientType.setLabelFor(jCbxClientType);
        org.openide.awt.Mnemonics.setLocalizedText(jLblClientType, org.openide.util.NbBundle.getMessage(ClientInfo.class, "LBL_ClientType"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jLblClientType, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 12, 6);
        add(jCbxClientType, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents

    private void jBtnProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnProxyActionPerformed
        ProxySettingsDlg.showProxyDlg();
    }//GEN-LAST:event_jBtnProxyActionPerformed

    private void jBtnGetWsdlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnGetWsdlActionPerformed
//        System.out.println("get WSDL from server...");
        jTxtWsdlURL.setEditable(false);
        retriever = new WsdlRetriever(this, jTxtWsdlURL.getText().trim());
        new Thread(retriever).start();
    }//GEN-LAST:event_jBtnGetWsdlActionPerformed

	private void jBtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBrowseActionPerformed
// 		System.out.println("browse for wsdl file...");
        JFileChooser chooser = new JFileChooser(previousDirectory);
		chooser.setMultiSelectionEnabled(false);
		chooser.setAcceptAllFileFilterUsed(false);
		chooser.addChoosableFileFilter(WSDL_FILE_FILTER);
		chooser.setFileFilter(WSDL_FILE_FILTER);

		if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File wsdlFile = chooser.getSelectedFile();
			jTxtWsdlFile.setText(wsdlFile.getAbsolutePath());
			previousDirectory = wsdlFile.getPath();
		}
	}//GEN-LAST:event_jBtnBrowseActionPerformed

    private void jRbnFilesystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbnFilesystemActionPerformed
//        System.out.println("get from filesystem selected.");
        wsdlSource = WSDL_FROM_FILE;
        enableWsdlSourceFields(false, true);
        descriptorPanel.fireChangeEvent();
    }//GEN-LAST:event_jRbnFilesystemActionPerformed

	private void jRbnServiceURLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRbnServiceURLActionPerformed
//        System.out.println("get from url selected.");
        wsdlSource = WSDL_FROM_SERVICE;
        enableWsdlSourceFields(true, false);
        descriptorPanel.fireChangeEvent();
	}//GEN-LAST:event_jRbnServiceURLActionPerformed

    private void enableWsdlSourceFields(boolean fromService, boolean fromFile) {
        // file related fields
        jLblWsdlFile.setEnabled(fromFile);
        jTxtWsdlFile.setEnabled(fromFile);
        jBtnBrowse.setEnabled(fromFile);

        // service related fields
        jLblLocalFNDescription.setEnabled(fromService);
        jLblWsdlURL.setEnabled(fromService);
        jTxtWsdlURL.setEnabled(fromService);
        String wsdlUrlText = jTxtWsdlURL.getText().trim();
        jBtnGetWsdl.setEnabled(fromService && isValidUrl(wsdlUrlText));
        jBtnProxy.setEnabled(fromService);
        jLblLocalFilename.setEnabled(fromService);
        jTxtLocalFilename.setEnabled(fromService);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGrpWsdlSource;
    private javax.swing.JButton jBtnBrowse;
    private javax.swing.JButton jBtnGetWsdl;
    private javax.swing.JButton jBtnProxy;
    private javax.swing.JComboBox jCbxClientType;
    private javax.swing.JComboBox jCbxPackageName;
    private javax.swing.JLabel jLblChooseSource;
    private javax.swing.JLabel jLblClientType;
    private javax.swing.JLabel jLblDummy;
    private javax.swing.JLabel jLblLocalFNDescription;
    private javax.swing.JLabel jLblLocalFilename;
    private javax.swing.JLabel jLblPackageDescription;
    private javax.swing.JLabel jLblPackageName;
    private javax.swing.JLabel jLblProject;
    private javax.swing.JLabel jLblWsdlFile;
    private javax.swing.JLabel jLblWsdlURL;
    private javax.swing.JRadioButton jRbnFilesystem;
    private javax.swing.JRadioButton jRbnServiceURL;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JTextField jTxtLocalFilename;
    private javax.swing.JTextField jTxtProject;
    private javax.swing.JTextField jTxtWsdlFile;
    private javax.swing.JTextField jTxtWsdlURL;
    // End of variables declaration//GEN-END:variables

	private void initUserComponents() {
//        System.out.println("wizard panel created");
		setName(NbBundle.getMessage(ClientInfo.class, "TITLE_WebServiceClientWizard")); // NOI18N

		// Register listener on the textFields to make the automatic updates
        jTxtWsdlURL.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    wsdlUrlChanged();
                }
                public void insertUpdate(DocumentEvent e) {
                    wsdlUrlChanged();
                }
                public void removeUpdate(DocumentEvent e) {
                    wsdlUrlChanged();
                }
            });
        jTxtLocalFilename.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    updateTexts();
                }
                public void insertUpdate(DocumentEvent e) {
                    updateTexts();
                }
                public void removeUpdate(DocumentEvent e) {
                    updateTexts();
                }
            });
        jTxtWsdlFile.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    updateTexts();
                }
                public void insertUpdate(DocumentEvent e) {
                    updateTexts();
                }
                public void removeUpdate(DocumentEvent e) {
                    updateTexts();
                }
            });
            
        Component editorComponent = jCbxPackageName.getEditor().getEditorComponent();
        if(editorComponent instanceof JTextComponent) {
            ((JTextComponent) editorComponent).getDocument().addDocumentListener(new DocumentListener() {
                    public void changedUpdate(DocumentEvent e) {
                        updateTexts();
                    }
                    public void insertUpdate(DocumentEvent e) {
                        updateTexts();
                    }
                    public void removeUpdate(DocumentEvent e) {
                        updateTexts();
                    }
                });
        } else {
            // JComboBox is supposed to use a JTextComponent for editing, but in case
            // it isn't, at least do something to track changes.
            jCbxPackageName.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    if(!settingFields) {
                        descriptorPanel.fireChangeEvent(); // Notify that the panel changed
                    }
                }
            });
        }
        
        jCbxPackageName.setRenderer(PackageView.listRenderer());
	}

    void store(WizardDescriptor d) {
//        System.out.println("storing wizard properties");

        if(wsdlSource == WSDL_FROM_SERVICE) {
            d.putProperty(WizardProperties.WSDL_DOWNLOAD_URL, getDownloadUrl());
            d.putProperty(WizardProperties.WSDL_DOWNLOAD_FILE, getDownloadWsdl());
            d.putProperty(WizardProperties.WSDL_DOWNLOAD_SCHEMAS, getDownloadedSchemas());
            d.putProperty(WizardProperties.WSDL_FILE_PATH, jTxtLocalFilename.getText().trim());
        } else if(wsdlSource == WSDL_FROM_FILE) {
            d.putProperty(WizardProperties.WSDL_DOWNLOAD_URL, null);
            d.putProperty(WizardProperties.WSDL_DOWNLOAD_FILE, null);
            d.putProperty(WizardProperties.WSDL_DOWNLOAD_SCHEMAS, null);
            d.putProperty(WizardProperties.WSDL_FILE_PATH, jTxtWsdlFile.getText().trim());
        }
        d.putProperty(WizardProperties.WSDL_PACKAGE_NAME, getPackageName());
        d.putProperty(WizardProperties.CLIENT_STUB_TYPE, jCbxClientType.getSelectedItem());
	}
    
    void read(WizardDescriptor d) {
//        System.out.println("reading wizard properties");
        try {
            settingFields = true;

            Project p = Templates.getProject(d);

            jTxtProject.setText(ProjectUtils.getInformation(p).getDisplayName());
            jTxtWsdlURL.setText((String) d.getProperty(WizardProperties.WSDL_DOWNLOAD_URL));
            jTxtLocalFilename.setText(retriever != null ? retriever.getWsdlFileName() : "");
            jTxtWsdlFile.setText((String) d.getProperty(WizardProperties.WSDL_FILE_PATH));

            jCbxPackageName.setModel(getPackageModel(p));
            jCbxPackageName.setSelectedItem(getPackageItem((String) d.getProperty(WizardProperties.WSDL_PACKAGE_NAME)));
            
            // Normalize selection, in case it's unspecified.
            Integer source = (Integer) d.getProperty(WizardProperties.WSDL_SOURCE);
            if(source == null || source.intValue() < WSDL_FROM_SERVICE || source.intValue() > WSDL_FROM_FILE) {
                source = new Integer(WSDL_FROM_SERVICE);
            }

            this.wsdlSource = source.intValue();
            this.wsdlTmpFile = null;
            this.retriever = null;
            this.downloadMsg = null;

            enableWsdlSourceFields(wsdlSource == WSDL_FROM_SERVICE, wsdlSource == WSDL_FROM_FILE);
            btnGrpWsdlSource.setSelected(getSelectedRadioButton(wsdlSource).getModel(), true);

            // Retrieve stub list from current project (have to be careful with caching
            // because the user might go back and change the project.)
            // Then set the stub list and current selected stub only if there was one
            // saved *and* it's in the list that the current project supports.
            WebServicesClientSupport clientSupport =
                WebServicesClientSupport.getWebServicesClientSupport(p.getProjectDirectory());

            Object selectedStub = d.getProperty(WizardProperties.CLIENT_STUB_TYPE);
            DefaultComboBoxModel stubModel = new DefaultComboBoxModel();
            if(clientSupport != null) {
                List clientStubs = clientSupport.getStubDescriptors();
                for(Iterator iter = clientStubs.iterator(); iter.hasNext(); ) {
                    stubModel.addElement(iter.next());
                }

                if(!clientStubs.contains(selectedStub)) {
                    selectedStub = null;
                }
            } else {
                selectedStub = null;
            }

            jCbxClientType.setModel(stubModel);

            if(selectedStub != null) {
                jCbxClientType.setSelectedItem(selectedStub);
            }
        } finally {
            settingFields = false;
        }
	}
    
    private ComboBoxModel getPackageModel(Project p) {
        ComboBoxModel result;
        Sources sources = ProjectUtils.getSources(p);
        SourceGroup[] groups = sources.getSourceGroups(JavaProjectConstants.SOURCES_TYPE_JAVA);

        if(groups.length > 1) {
// !PW We cannot make the distinction between source and test source roots, so I don't
// want to merge all the packages at this time.  For now, just pick the first one,
// and maybe we can do better in the next version.
//            DefaultComboBoxModel packageModel = new DefaultComboBoxModel();
//            for(int i = 0; i < groups.length; i++) {
//                ComboBoxModel model = PackageView.createListView(groups[i]);
//                for(int j = 0, m = model.getSize(); j < m; j++) {
//                    packageModel.addElement(model.getElementAt(j));
//                }
//            }
//            result = packageModel;
            // Default to showing packages from first source root only for now.
            result = PackageView.createListView(groups[0]);
        } else if(groups.length == 1) {
            // Only one group, no processing needed.
            result = PackageView.createListView(groups[0]);
        } else {
            result = new DefaultComboBoxModel();
        }

        return result;
    }

    private Object getPackageItem(String name) {
        Object result = name;
        
        ComboBoxModel model = jCbxPackageName.getModel();
        int max = model.getSize();
        for (int i = 0; i < max; i++) {
            Object item = model.getElementAt(i);
            if(item.toString().equals(name)) {
                result = item;
                break;
            }
        }

        return result;
    }

    private String getPackageName() {
        return jCbxPackageName.getEditor().getItem().toString().trim();
    }
    
	private JRadioButton getSelectedRadioButton(int selected) {
        JRadioButton result = jRbnServiceURL;

        switch(selected) {
        case WSDL_FROM_FILE:
            result = jRbnFilesystem;
            break;
        case WSDL_FROM_SERVICE:
            result = jRbnServiceURL;
            break;
        }

        return result;
    }

    private byte [] getDownloadWsdl() {
        byte [] result = null;
        if(retriever != null && retriever.getState() == WsdlRetriever.STATUS_COMPLETE) {
            result = retriever.getWsdl();
        }
        return result;
    }
    
    private List /*WsdlRetriever.SchemaInfo */ getDownloadedSchemas() {
        List result = null;
        if(retriever != null && retriever.getState() == WsdlRetriever.STATUS_COMPLETE) {
            result = retriever.getSchemas();
        }
        return result;
    }

    private String getDownloadUrl() {
        String result;

        if(retriever != null) {
            // If we've done a download, save the URL that was actually used, not
            // what the user typed in.
            result = retriever.getWsdlUrl();
        } else {
            // If no download yet, then use what the user has typed.
            result = jTxtWsdlURL.getText().trim();
        }

        return result;
    }

	boolean valid(WizardDescriptor wizardDescriptor) {
		Project p = Templates.getProject(wizardDescriptor);

        // Project must currently have a target server that supports wscompile.
        if(!isWsCompileSupported(p)) {
			wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_WsCompileNotSupportedByTargetServer")); // NOI18N
			return false; // project with web service client support, but no stub types defined.
        }

        // Project selected must support at least one stub type.
        WebServicesClientSupport clientSupport =
            WebServicesClientSupport.getWebServicesClientSupport(p.getProjectDirectory());
        List clientStubs = (clientSupport != null) ? clientSupport.getStubDescriptors() : null;
        if(clientStubs == null || clientStubs.size() == 0) {
			wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_NoStubsDefined")); // NOI18N
			return false; // project with web service client support, but no stub types defined.
        }

        if(wsdlSource == WSDL_FROM_SERVICE) {
            String wsdlUrl = jTxtWsdlURL.getText().trim();
            if(wsdlUrl == null || wsdlUrl.length() == 0) {
                wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "MSG_EnterURL")); // NOI18N
                return false;
            }

            if(retriever == null) {
                wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "MSG_RetrieveWSDL")); // NOI18N
                return false;
            }

            if(retriever.getState() < WsdlRetriever.STATUS_COMPLETE) {
                wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "MSG_DownloadProgress",  // NOI18N
                    ((downloadMsg != null) ? downloadMsg : NbBundle.getMessage(ClientInfo.class, "LBL_Unknown")))); // NOI18N
                return false;
            }

            if(retriever.getState() > WsdlRetriever.STATUS_COMPLETE) {
                if(downloadMsg != null) {
                    wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_DownloadFailed", downloadMsg)); // NOI18N
                } else {
                    wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_DownloadFailedUnknown")); // NOI18N
                }
                return false;
            }

            // url is ok, and file is downloaded if we get here.  Now check generated local filename
            // !PW FIXME what do we want to check it for?  Existence in temp directory?

            // Now drop down to do package validation.
        } else if(wsdlSource == WSDL_FROM_FILE) {
            String wsdlFilePath = jTxtWsdlFile.getText().trim();

            if(wsdlFilePath == null || wsdlFilePath.length() == 0) {
                wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "MSG_EnterFilename")); // NOI18N
                return false; // unspecified WSDL file
            }

            File f = new File(wsdlFilePath);
            String wsdlFileText = f.getAbsolutePath();
            if(f == null) {
                wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_WsdlInvalid")); // NOI18N
                return false; // invalid WSDL file
            }

            if(!f.exists()) {
                wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_WsdlDoesNotExist")); // NOI18N
                return false; // invalid WSDL file
            }

            // 50103 - could be done via xml api, but this way should be quicker and suffice the need
            FileReader fr = null;
            try {
                fr = new FileReader(f);
                LineNumberReader lnReader = new LineNumberReader(fr);
                if (lnReader != null) {
                    String line = null;
                    try {
                        line = lnReader.readLine();
                    } catch (IOException ioe) {
                        //ignore
                    }
                    while (line != null) {
                        if (line.indexOf("REPLACE_WITH_ACTUAL_URL") > 0) {
                            wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_WrongWsdl")); // NOI18N
                            return false;
                        } //NOI18N
                        try {
                            line = lnReader.readLine();
                        } catch (IOException ioe) {
                            //ignore
                        }
                    }
                }
            } catch (FileNotFoundException fne) {
                wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_WsdlDoesNotExist")); // NOI18N
            }

            // !PW FIXME should also detect if WSDL file has previously been added to
            // this project.  Note that not doing so and overwriting the existing entry
            // is the equivalent of doing an update on it.  Nothing bad will happen
            // unless it turns out the user didn't want to update the service in the
            // first place.
        }

		String packageName = getPackageName();
		if(packageName == null || packageName.length() == 0) {
			wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "MSG_EnterJavaPackageName")); // NOI18N
			return false; // unspecified WSDL file
		}

		if(!Utilities.isJavaPackage(packageName)) {
			wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, NbBundle.getMessage(ClientInfo.class, "ERR_PackageInvalid")); // NOI18N
			return false; // invalid package name
		}

		wizardDescriptor.putProperty(PROP_ERROR_MESSAGE, "");
		return true;
	}

    private boolean isWsCompileSupported(Project p) {
        // Determine if wscompile is supported by the current target server of
        // this project.  Default to true so that the user can still continue, if on
        // their own, in case we have difficulty getting the correct answer.
        boolean result = true;

        J2eeModuleProvider provider = (J2eeModuleProvider) p.getLookup().lookup(J2eeModuleProvider.class);
        if(provider != null) {
            String serverInstanceID = provider.getServerInstanceID();
            if(serverInstanceID != null && serverInstanceID.length() > 0) {
                J2eePlatform j2eePlatform = Deployment.getDefault().getJ2eePlatform(serverInstanceID);
                if(!j2eePlatform.isToolSupported(WebServicesConstants.WSCOMPILE)) {
                    result = false;
                }
            }
        }

        return result;
    }

    private void wsdlUrlChanged() {
        // Throw away any existing retriever.  New URL means user has to download it again.
        retriever = null;

        // Only enable retrieval button if there is a URL specified.
        String wsdlUrlText = jTxtWsdlURL.getText().trim();
        jBtnGetWsdl.setEnabled(isValidUrl(wsdlUrlText));

        updateTexts();
    }

    private void updateTexts() {
        if(!settingFields) {
            descriptorPanel.fireChangeEvent(); // Notify that the panel changed
        }
    }

    private boolean isValidUrl(String urlText) {
        if(urlText == null || urlText.length() == 0) {
            return false;
        }

        // !PW Be very careful adding conditions to this method (such as seeing if
        // conversion of url text to URL would throw a MalformedURLException and
        // reporting it to the user early.)  It is a non-trivial change that would
        // require significant synchronization with code in the retriever object.
        // as well as the valid() method of this object.  See IZ 52685.
        return true;
    }

    public void setWsdlDownloadMessage(String m) {
        downloadMsg = m;

        // reenable edit control if state indicates download is completed (or failed).
        if(retriever.getState() >= WsdlRetriever.STATUS_COMPLETE) {
            jTxtWsdlURL.setEditable(true);
            jTxtLocalFilename.setText(retriever.getWsdlFileName());
        }

        descriptorPanel.fireChangeEvent();
    }

	private static class WsdlFileFilter extends FileFilter {
		public boolean accept(File f) {
			boolean result;
			if(f.isDirectory() || "wsdl".equalsIgnoreCase(FileUtil.getExtension(f.getName()))) { // NOI18N
				result = true;
			} else {
				result = false;
			}
			return result;
		}

		public String getDescription() {
			return NbBundle.getMessage(ClientInfo.class, "LBL_WsdlFilterDescription"); // NOI18N
		}
	}
}
