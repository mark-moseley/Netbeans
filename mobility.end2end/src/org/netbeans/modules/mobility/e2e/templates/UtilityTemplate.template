//GEN-BEGIN:Client
/**
 * This file is generated. Please do not change
 */
<#assign packageName = mapping.getServerMapping().getPackageName()/>
package ${packageName};

import java.io.*;
import java.lang.reflect.*;
import java.util.*;

/**
 *  This class is used as an external protocol utility. It is so we don't
 *  generate as much code.
 */

public class Utility {

    /** Registered types */
    <#list instanceTypes as type>
        <#if type.getName() != "void">
            <#assign serializer = mapping.getRegistry().getTypeSerializer( type )/>
            private final static int ${serializer.instanceOf( type )?upper_case?replace( "[]", "_ARRAY" )?replace( ".", "_" ) }_TYPE = ${registry.getRegisteredTypeId( type )};
        </#if>
    </#list>

    /** Marker for null. Null is a type and a value together. */
    private final static short NULL_TYPE = -1;
    
    /** Marker for void return types. */
    public final static Object VOID_VALUE = new Object();
    
    /**
     * Sends return values to the client output stream.
     *
     * @param output The output stream into which all the data should be written
     * @param  returnValue The value which we should write into the stream
     * @throws IOException If an error occured while writing the results
     */
    public static void writeResults( DataOutput output, Object returnValue, int[] paramIDs) throws IOException {
        for ( int i = 0; i < paramIDs.length; i++ ) {
            writeObject(output, returnValue, paramIDs[i]);
        }
    }
    
<#list instanceTypes as type>
    <#if type.isPrimitive() && type.getName() != "void">
    static Object toObject( ${type.getName()} value ) {
        return ${registry.getTypeSerializer( type ).toObject( type, "value" )};
    }

    </#if>
</#list>

    /**
     * 
     * @param output 
     * @param o 
     * @throws java.io.IOException 
     */
    public static void writeObject(DataOutput output, Object o, int id) throws IOException {
        if( o == null ) {
            // write null type to the stream
            output.writeShort( NULL_TYPE );
            return;
        }
        switch( id ) {
        <#list returnInstanceTypes as type>
            case ${registry.getRegisteredTypeId( type )}:
                <#assign serializer = mapping.getRegistry().getTypeSerializer( type )/>
                output.writeShort(${serializer.instanceOf( type )?upper_case?replace( "[]", "_ARRAY" )?replace( ".", "_" ) }_TYPE);                    
                <#if type.isPrimitive()>
                    ${serializer.toStream( mapping, type, "output", serializer.fromObject( type, "o" ))}
                <#else>
                    ${serializer.toStream( mapping, type, "output", "o" )}
                </#if>
                break;
        </#list>
            default:
                // default if a data type is not supported
                throw new IllegalArgumentException("Unsupported parameter type: " + o.getClass());
        }
    }

    /**
     * 
     * @param in 
     * @return 
     * @throws java.io.IOException 
     */
    protected static Object readObject(DataInput in) throws IOException {
        short type = in.readShort();        
        Object result;
        switch (type) {
        <#list parameterInstanceTypes as type>
            <#assign serializer = mapping.getRegistry().getTypeSerializer( type )/>
            <#if type.getName() != "void">
                case ${registry.getRegisteredTypeId( type )}:
                    <#if type.isPrimitive() && !type.isArray()>
                        <#assign typeFromStream = serializer.fromStream( mapping, type, "in", null )/>
                        // Primitive
                        return ${serializer.toObject( type, typeFromStream )};
                    <#else>
                        // COmplex
                        ${serializer.fromStream( mapping, type, "in", "result" )}
                        return result;
                    </#if>
            </#if>
        </#list>
            case NULL_TYPE: /* null */
                return null;
            default:
                throw new IllegalArgumentException(
                    "Unsupported return type (" + type + ")");
        }
    }
}
//GEN-END:Client