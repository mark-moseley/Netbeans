/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

/*
 * ServerGeneralInfoPanel.java
 *
 * Created on July 25, 2005, 10:45 AM
 */
package org.netbeans.modules.mobility.end2end.multiview;
import java.util.Properties;
import org.netbeans.modules.xml.multiview.ui.SectionInnerPanel;
import org.netbeans.modules.xml.multiview.ui.SectionView;
import javax.swing.JComponent;
import org.netbeans.modules.mobility.end2end.E2EDataObject;
import org.netbeans.modules.mobility.end2end.client.config.Configuration;
import org.netbeans.modules.mobility.end2end.client.config.ServerConfiguration;

/**
 *
 * @author  Michal Skvor
 */
public class ServerGeneralInfoPanel extends SectionInnerPanel {
    
    final private transient E2EDataObject dataObject;
    protected transient ServerConfiguration serverConfiguration;
    
    /** Creates new form ServerGeneralInfoPanel */
    public ServerGeneralInfoPanel( SectionView sectionView, E2EDataObject dataObject ) {
        super( sectionView );
        
        this.dataObject = dataObject;
        
        dataObject.addSaveCallback( new SaveCallbackImpl());
        
        initComponents();
        
        initValues();
    }
    
    private void initValues() {
        final Configuration config = dataObject.getConfiguration();
        
        serverConfiguration = config.getServerConfigutation();
        textProject.setText( serverConfiguration.getProjectName());
        textServletName.setText( serverConfiguration.getClassDescriptor().getLeafClassName());
        textPackage.setText( serverConfiguration.getClassDescriptor().getPackageName());
        
        final Properties props = serverConfiguration.getProperties();
        if( "true".equals( props.getProperty( ServerConfiguration.PROP_TRACE ))) {
            serverTrace.setSelected( true );
        } else {
            serverTrace.setSelected( false );
        }
    }
    
    public JComponent getErrorComponent( @SuppressWarnings("unused")
	final String errorId ) {
        return null;
    }
    
    public void linkButtonPressed( @SuppressWarnings("unused")
	final Object ddBean, @SuppressWarnings("unused")
	final String ddProperty ) {
    }
    
    public void setValue( @SuppressWarnings("unused")
	final JComponent source, @SuppressWarnings("unused")
	final Object value ) {
    }
    
    private class SaveCallbackImpl implements E2EDataObject.SaveCallback {
        
        SaveCallbackImpl() {
            //To avoid creation of accessor class
        }
        @SuppressWarnings("synthetic-access")
		public void save() {
            
            final Properties props = serverConfiguration.getProperties();
            if( serverTrace.getSelectedObjects() == null ) {
                props.setProperty( ServerConfiguration.PROP_TRACE, "false" ); // NOI18N
            } else {
                props.setProperty( ServerConfiguration.PROP_TRACE, "true" ); // NOI18N
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel2 = new javax.swing.JLabel();
        textPackage = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        textServletName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        textProject = new javax.swing.JTextField();
        serverTrace = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        jLabel2.setLabelFor(textPackage);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ServerGeneralInfoPanel.class, "LABEL_Server_Package")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        add(jLabel2, gridBagConstraints);

        textPackage.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 6, 0, 10);
        add(textPackage, gridBagConstraints);

        jLabel3.setLabelFor(textServletName);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ServerGeneralInfoPanel.class, "LABEL_Servlet_Name")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        add(jLabel3, gridBagConstraints);

        textServletName.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 6, 0, 10);
        add(textServletName, gridBagConstraints);

        jLabel4.setLabelFor(textProject);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(ServerGeneralInfoPanel.class, "LABEL_Server_Project")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 0);
        add(jLabel4, gridBagConstraints);

        textProject.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 6, 0, 10);
        add(textProject, gridBagConstraints);

        serverTrace.setBackground(java.awt.Color.white);
        org.openide.awt.Mnemonics.setLocalizedText(serverTrace, org.openide.util.NbBundle.getMessage(ServerGeneralInfoPanel.class, "LABEL_Server_Tracking")); // NOI18N
        serverTrace.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        serverTrace.setMargin(new java.awt.Insets(0, 0, 0, 0));
        serverTrace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverTraceActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        add(serverTrace, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    private void serverTraceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverTraceActionPerformed
        dataObject.setModified( true );
    }//GEN-LAST:event_serverTraceActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JCheckBox serverTrace;
    private javax.swing.JTextField textPackage;
    private javax.swing.JTextField textProject;
    private javax.swing.JTextField textServletName;
    // End of variables declaration//GEN-END:variables
    
}
