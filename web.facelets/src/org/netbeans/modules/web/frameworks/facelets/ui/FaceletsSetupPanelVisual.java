/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-200? Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.web.frameworks.facelets.ui;

import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.project.libraries.Library;
import org.netbeans.api.project.libraries.LibraryManager;
import org.netbeans.modules.web.api.webmodule.ExtenderController.Properties;
import org.netbeans.modules.web.frameworks.facelets.FaceletsUtils;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 *
 * @author  Petr Pisl
 */
public class FaceletsSetupPanelVisual extends javax.swing.JPanel implements HelpCtx.Provider, DocumentListener {
    
    private FaceletsSetupPanel frameworkSetup;
    private boolean customizer;
    private ArrayList <Library> faceletsLibraries;
    
    /** Creates new form FaceletsSetupPanel */
    public FaceletsSetupPanelVisual(FaceletsSetupPanel panel, boolean customizer) {
        this.frameworkSetup = panel;
        this.customizer = customizer;
        initComponents();
        initLibraries();
        if(customizer){
            enableComponents(false);
        }
    }
    
    private void initLibraries(){
        Library libraries[] = LibraryManager.getDefault().getLibraries();
        Vector <String> items = new Vector();
        faceletsLibraries = new ArrayList();
        
        for (int i = 0; i < libraries.length; i++) {
            if (libraries[i].getName().startsWith("facelets-") && !libraries[i].getName().endsWith("el-api")    //NOI18N
            && !libraries[i].getName().endsWith("jsf-ri") && !libraries[i].getName().endsWith("myfaces")){                                            //NOI18N
                String displayName = libraries[i].getDisplayName();
                items.add(displayName);
                faceletsLibraries.add(libraries[i]);
            }
        }
        
        cbLibraries.setModel(new DefaultComboBoxModel(items));
        if (items.size() == 0){
            rbRegisteredLibrary.setEnabled(false);
            cbLibraries.setEnabled(false);
            rbNewLibrary.setSelected(true);
            rbNoneLibrary.setSelected(false);
            frameworkSetup.setLibrary(null);
        } else {
            rbRegisteredLibrary.setEnabled(true);
            rbRegisteredLibrary.setSelected(true);
            cbLibraries.setEnabled(true);
        }
        repaint();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgLibrary = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        jpSetup = new javax.swing.JPanel();
        jcbDebug = new javax.swing.JCheckBox();
        jcbComment = new javax.swing.JCheckBox();
        jlFacesSuffix = new javax.swing.JLabel();
        jtfFacesSuffix = new javax.swing.JTextField();
        jlFacesServletMapping = new javax.swing.JLabel();
        jtfFacesServletMapping = new javax.swing.JTextField();
        jlFacesConfiguration = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jcbCreateExampleFiles = new javax.swing.JCheckBox();
        jpLibrary = new javax.swing.JPanel();
        jtFolder = new javax.swing.JTextField();
        jbBrowse = new javax.swing.JButton();
        rbRegisteredLibrary = new javax.swing.JRadioButton();
        cbLibraries = new javax.swing.JComboBox();
        rbNewLibrary = new javax.swing.JRadioButton();
        lVersion = new javax.swing.JLabel();
        jtVersion = new javax.swing.JTextField();
        lDirectory = new javax.swing.JLabel();
        rbNoneLibrary = new javax.swing.JRadioButton();

        setAlignmentX(0.2F);
        setAlignmentY(0.2F);
        setPreferredSize(new java.awt.Dimension(0, 0));
        setLayout(new java.awt.CardLayout());

        jpSetup.setAlignmentX(0.2F);
        jpSetup.setAlignmentY(0.2F);

        jcbDebug.setSelected(frameworkSetup.isDebugFacelets());
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/netbeans/modules/web/frameworks/facelets/ui/Bundle"); // NOI18N
        jcbDebug.setText(bundle.getString("LBL_Debug")); // NOI18N
        jcbDebug.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jcbDebug.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jcbDebug.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbDebugItemStateChanged(evt);
            }
        });

        jcbComment.setSelected(frameworkSetup.isSkipComments());
        jcbComment.setText(bundle.getString("LBL_Skip_Comment")); // NOI18N
        jcbComment.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jcbComment.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jcbComment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbCommentItemStateChanged(evt);
            }
        });

        jlFacesSuffix.setText(bundle.getString("LBL_FacesMapping")); // NOI18N

        jtfFacesSuffix.setEditable(false);
        jtfFacesSuffix.setText(frameworkSetup.getFacesSuffix());

        jlFacesServletMapping.setText(bundle.getString("LBL_FacesServletMapping")); // NOI18N

        jtfFacesServletMapping.setEditable(false);
        jtfFacesServletMapping.setText(frameworkSetup.getFacesMapping());

        jlFacesConfiguration.setText(bundle.getString("LBL_FacesConfiguration")); // NOI18N

        jcbCreateExampleFiles.setSelected(frameworkSetup.isCreateExamples());
        jcbCreateExampleFiles.setText(bundle.getString("LBL_Create_Example_Files")); // NOI18N
        jcbCreateExampleFiles.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jcbCreateExampleFiles.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jcbCreateExampleFiles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbCreateExampleFilesItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jpSetupLayout = new org.jdesktop.layout.GroupLayout(jpSetup);
        jpSetup.setLayout(jpSetupLayout);
        jpSetupLayout.setHorizontalGroup(
            jpSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpSetupLayout.createSequentialGroup()
                .addContainerGap()
                .add(jcbDebug, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                .add(157, 157, 157)
                .add(jcbComment, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 270, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jpSetupLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jlFacesSuffix)
                    .add(jlFacesServletMapping))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtfFacesServletMapping, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                    .add(jtfFacesSuffix, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
                .addContainerGap())
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
            .add(jpSetupLayout.createSequentialGroup()
                .addContainerGap()
                .add(jcbCreateExampleFiles, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
            .add(jpSetupLayout.createSequentialGroup()
                .addContainerGap()
                .add(jlFacesConfiguration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpSetupLayout.setVerticalGroup(
            jpSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpSetupLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jcbDebug)
                    .add(jcbComment))
                .add(4, 4, 4)
                .add(jcbCreateExampleFiles)
                .add(4, 4, 4)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(4, 4, 4)
                .add(jlFacesConfiguration)
                .add(4, 4, 4)
                .add(jpSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlFacesSuffix)
                    .add(jtfFacesSuffix, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(4, 4, 4)
                .add(jpSetupLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jlFacesServletMapping)
                    .add(jtfFacesServletMapping, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(17, 17, Short.MAX_VALUE))
        );

        tabbedPane.addTab(bundle.getString("LBL_TAB_CONFIGURATION"), jpSetup); // NOI18N

        jpLibrary.setAlignmentX(0.2F);
        jpLibrary.setAlignmentY(0.2F);
        jpLibrary.setPreferredSize(new java.awt.Dimension(0, 0));

        jtFolder.setToolTipText(bundle.getString("HINT_Facelets_Directory")); // NOI18N
        jtFolder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtFolderKeyPressed(evt);
            }
        });

        jbBrowse.setText(bundle.getString("LBL_Browse")); // NOI18N
        jbBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBrowseActionPerformed(evt);
            }
        });

        bgLibrary.add(rbRegisteredLibrary);
        rbRegisteredLibrary.setText(bundle.getString("LBL_REGISTERED_LIBRARIES")); // NOI18N
        rbRegisteredLibrary.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rbRegisteredLibrary.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rbRegisteredLibrary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbRegisteredLibraryItemStateChanged(evt);
            }
        });

        cbLibraries.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbLibraries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLibrariesActionPerformed(evt);
            }
        });

        bgLibrary.add(rbNewLibrary);
        rbNewLibrary.setText(bundle.getString("LBL_CREATE_NEW_LIBRARY")); // NOI18N
        rbNewLibrary.setToolTipText(bundle.getString("MSG_CreatingLibraries")); // NOI18N
        rbNewLibrary.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rbNewLibrary.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rbNewLibrary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbNewLibraryItemStateChanged(evt);
            }
        });

        lVersion.setText(bundle.getString("LBL_VERSION")); // NOI18N
        lVersion.setToolTipText(bundle.getString("HINT_Version")); // NOI18N

        jtVersion.setToolTipText(bundle.getString("HINT_Version")); // NOI18N
        jtVersion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtVersionKeyReleased(evt);
            }
        });

        lDirectory.setText(bundle.getString("LBL_INSTALL_DIR")); // NOI18N
        lDirectory.setToolTipText(bundle.getString("HINT_Facelets_Directory")); // NOI18N

        bgLibrary.add(rbNoneLibrary);
        rbNoneLibrary.setText(bundle.getString("LBL_Any_Library")); // NOI18N
        rbNoneLibrary.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rbNoneLibrary.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rbNoneLibrary.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbNoneLibraryItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jpLibraryLayout = new org.jdesktop.layout.GroupLayout(jpLibrary);
        jpLibrary.setLayout(jpLibraryLayout);
        jpLibraryLayout.setHorizontalGroup(
            jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpLibraryLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpLibraryLayout.createSequentialGroup()
                        .add(rbRegisteredLibrary)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cbLibraries, 0, 334, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpLibraryLayout.createSequentialGroup()
                                .add(jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jtVersion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                                    .add(jtFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jbBrowse))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, rbNewLibrary, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                    .add(rbNoneLibrary, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                    .add(jpLibraryLayout.createSequentialGroup()
                        .add(22, 22, 22)
                        .add(jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, lDirectory, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                            .add(lVersion, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jpLibraryLayout.setVerticalGroup(
            jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpLibraryLayout.createSequentialGroup()
                .addContainerGap()
                .add(jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rbRegisteredLibrary)
                    .add(cbLibraries, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(4, 4, 4)
                .add(rbNewLibrary)
                .add(4, 4, 4)
                .add(jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbBrowse)
                    .add(lDirectory)
                    .add(jtFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(2, 2, 2)
                .add(jpLibraryLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lVersion)
                    .add(jtVersion, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(4, 4, 4)
                .add(rbNoneLibrary)
                .add(15, 15, Short.MAX_VALUE))
        );

        tabbedPane.addTab(bundle.getString("LBL_TAB_LIBRARIES"), jpLibrary); // NOI18N

        add(tabbedPane, "card2");
    }// </editor-fold>//GEN-END:initComponents
    
    private void jtVersionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtVersionKeyReleased
        checkNewLibrarySetting();
    }//GEN-LAST:event_jtVersionKeyReleased
    
    private void rbNoneLibraryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbNoneLibraryItemStateChanged
        updateLibrary();
    }//GEN-LAST:event_rbNoneLibraryItemStateChanged
    
    private void rbNewLibraryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbNewLibraryItemStateChanged
        updateLibrary();
    }//GEN-LAST:event_rbNewLibraryItemStateChanged
    
    private void rbRegisteredLibraryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbRegisteredLibraryItemStateChanged
        updateLibrary();
    }//GEN-LAST:event_rbRegisteredLibraryItemStateChanged
    
    private void jcbCreateExampleFilesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbCreateExampleFilesItemStateChanged
        frameworkSetup.setCreateExamples(jcbCreateExampleFiles.isSelected());
    }//GEN-LAST:event_jcbCreateExampleFilesItemStateChanged
    
    private void jcbCommentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbCommentItemStateChanged
        frameworkSetup.setSkipComments(jcbComment.isSelected());
    }//GEN-LAST:event_jcbCommentItemStateChanged
    
    private void jcbDebugItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbDebugItemStateChanged
        frameworkSetup.setDebugFacelets(jcbDebug.isSelected());
    }//GEN-LAST:event_jcbDebugItemStateChanged
    
    private void cbLibrariesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLibrariesActionPerformed
        frameworkSetup.setLibrary(faceletsLibraries.get(cbLibraries.getSelectedIndex()));
    }//GEN-LAST:event_cbLibrariesActionPerformed
    
    private void updateLibrary(){
        if (rbNoneLibrary.isSelected()){
            enableNewLibraryComponent(false);
            enableDefinedLibraryComponent(false);
            frameworkSetup.setLibraryType(FaceletsSetupPanel.LibraryType.NONE);
            frameworkSetup.setErrorMessage(null);
        } else if (rbRegisteredLibrary.isSelected()){
            enableNewLibraryComponent(false);
            enableDefinedLibraryComponent(true);
            frameworkSetup.setLibraryType(FaceletsSetupPanel.LibraryType.USED);
            if (faceletsLibraries.size() > 0){
                frameworkSetup.setLibrary(faceletsLibraries.get(cbLibraries.getSelectedIndex()));
            }
            frameworkSetup.setErrorMessage(null);
        } else if (rbNewLibrary.isSelected()){
            enableNewLibraryComponent(true);
            enableDefinedLibraryComponent(false);
            frameworkSetup.setLibraryType(FaceletsSetupPanel.LibraryType.NEW);
            checkNewLibrarySetting();
        }
    }
    
    private void enableDefinedLibraryComponent(boolean enabled){
        cbLibraries.setEnabled(enabled);
    }
    
    private void enableNewLibraryComponent(boolean enabled){
        lDirectory.setEnabled(enabled);
        jtFolder.setEnabled(enabled);
        jbBrowse.setEnabled(enabled);
        lVersion.setEnabled(enabled);
        jtVersion.setEnabled(enabled);
    }
    
    private void jtFolderKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtFolderKeyPressed
        checkNewLibrarySetting();
    }//GEN-LAST:event_jtFolderKeyPressed
    
    private void jbBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBrowseActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setDialogTitle(NbBundle.getMessage(FaceletsSetupPanelVisual.class,"LBL_SelectLibraryLocation")); //NOI18N
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        if (JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this)) {
            File projectDir = chooser.getSelectedFile();
            jtFolder.setText(projectDir.getAbsolutePath());
            checkNewLibrarySetting();
        }
    }//GEN-LAST:event_jbBrowseActionPerformed
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgLibrary;
    private javax.swing.JComboBox cbLibraries;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbBrowse;
    private javax.swing.JCheckBox jcbComment;
    private javax.swing.JCheckBox jcbCreateExampleFiles;
    private javax.swing.JCheckBox jcbDebug;
    private javax.swing.JLabel jlFacesConfiguration;
    private javax.swing.JLabel jlFacesServletMapping;
    private javax.swing.JLabel jlFacesSuffix;
    private javax.swing.JPanel jpLibrary;
    private javax.swing.JPanel jpSetup;
    private javax.swing.JTextField jtFolder;
    private javax.swing.JTextField jtVersion;
    private javax.swing.JTextField jtfFacesServletMapping;
    private javax.swing.JTextField jtfFacesSuffix;
    private javax.swing.JLabel lDirectory;
    private javax.swing.JLabel lVersion;
    private javax.swing.JRadioButton rbNewLibrary;
    private javax.swing.JRadioButton rbNoneLibrary;
    private javax.swing.JRadioButton rbRegisteredLibrary;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
    
    boolean valid(WizardDescriptor wizardDescriptor) {
        boolean value = !(jpLibrary.isVisible() && jbBrowse.isEnabled());
        return value;
    }
    
    void enableComponents(boolean enable) {
        Component[] components;
        
        components = jpSetup.getComponents();
        for (int i = 0; i < components.length; i++) {
            components[i].setEnabled(enable);
        }
        
        components = jpLibrary.getComponents();
        for (int i = 0; i < components.length; i++) {
            components[i].setEnabled(enable);
        }
        
        if (enable){
            updateLibrary();
        }  
    }
    
    private void setVisibleJSFConfiguration(boolean visible){
        jSeparator1.setVisible(visible);
        jlFacesConfiguration.setVisible(visible);
        jlFacesServletMapping.setVisible(visible);
        jlFacesSuffix.setVisible(visible);
        jtfFacesServletMapping.setVisible(visible);
        jtfFacesSuffix.setVisible(visible);
    }
    
    public HelpCtx getHelpCtx() {
        return new HelpCtx(FaceletsSetupPanelVisual.class);
    }
    
    public void insertUpdate(DocumentEvent e) {
        frameworkSetup.fireChangeEvent();
    }
    
    public void removeUpdate(DocumentEvent e) {
        frameworkSetup.fireChangeEvent();
    }
    
    public void changedUpdate(DocumentEvent e) {
        frameworkSetup.fireChangeEvent();
    }
    
    
    public boolean debugFacelets(){
        return jcbDebug.isSelected();
    }
    
    public boolean skipComments(){
        return jcbComment.isSelected();
    }
    
    public boolean createExampleFiles(){
        return jcbCreateExampleFiles.isSelected();
    }
    
    public void setDebugFacelets(boolean value){
        jcbDebug.setSelected(value);
    }
    
    public void setSkipComments(boolean value){
        jcbComment.setSelected(value);
    }
    
    public void setCreateExampleFiles(boolean value){
        jcbCreateExampleFiles.setSelected(value);
    }
    
    private void checkNewLibrarySetting(){
        String message = null;
        String fileName = jtFolder.getText();
        if (fileName == null || "".equals(fileName)){
            message = NbBundle.getMessage(FaceletsSetupPanelVisual.class, "MSG_PathIsNotFaceletsFolder");
        } else {
            File folder = new File(fileName);
            if (!FaceletsUtils.isFaceletsInstallFolder(folder)){
                message = NbBundle.getMessage(FaceletsSetupPanelVisual.class, "MSG_PathIsNotFaceletsFolder");
            } else {
                frameworkSetup.setInstallFolder(folder);
                
                String version = jtVersion.getText().trim();
                if (version == null || "".equals(version)){
                    message = NbBundle.getMessage(FaceletsSetupPanelVisual.class, "MSG_VersionHasToBeDefined");
                } else{
                    String name = "facelets-"+ FaceletsUtils.convertLibraryVersion(version);  //NOI18N
                    int length = faceletsLibraries.size();
                    for (int i = 0; i < length; i++) {
                        if(faceletsLibraries.get(i).getName().equals(name)){
                            message = NbBundle.getMessage(FaceletsSetupPanelVisual.class, "MSG_VersionAlreadyExist");
                        }
                    }
                }
                if (message == null){
                    frameworkSetup.setNewLibraryVersion(jtVersion.getText().trim());
                }
            }
        }
        frameworkSetup.setErrorMessage(message);
    }

    public void update(){
        Properties properties = frameworkSetup.getController().getProperties();
        //TODO: properties.setProperty();
    }
}
