
########### tokens #############################################################

TOKEN:css-comment:( "/*" - "*/" )
TOKEN:css-comment:( "<!--" | "-->" )
TOKEN:css-whitespace: ([" " "\t" "\n" "\r"]+)

TOKEN:css-operator:( ["*" "#" "." "," ":" "-" "+" ">" "(" ")" "{" "}" ";" "[" "]" "!" "/"] )
TOKEN:css-identifier: (
    "-"? ["a"-"z" "A"-"Z" "_"]
         ["a"-"z" "A"-"Z" "_" "0" - "9" "-"]*
)
TOKEN:css-keyword: (
    "@charset" |
    "@import" |
    "@media" |
    "@page" |
    "important" |
    "url"
)

TOKEN:css-url: (
    "url" [" " "\t" "\n" "\r"]* ("(" - ")")
)

TOKEN:css-number:( 
    ["0"-"9"]+ 
    ( "pt" | "pc" | "in" | "mm" | "cm" | "em" |
      "ex" | "px" | "ms" | "s" | "%"
    )?
)

TOKEN:css-number:(
    ["0"-"9"]* "." ["0"-"9"]+
    ( "pt" | "pc" | "in" | "mm" | "cm" | "em" |
      "ex" | "px" | "ms" | "s" | "%"
    )?
)

TOKEN:css-hash:( "#" ["a"-"z" "A"-"Z" "0"-"9" "-" "_"]+)

TOKEN:css-string: (
    "\""
        ( [^ "\"" "\n" "\r"] |
          ("\\" ["r" "n" "t" "\\" "\'" "\""])
        )*
    "\""
)
TOKEN:css-string: (
    "\'"
        ( [^ "\"" "\n" "\r"] |
          ("\\" ["r" "n" "t" "\\" "\'" "\""])
        )*
    "\'"
)


########### grammar ############################################################

SKIP:css-comment
SKIP:css-whitespace
SKIP:css-error

S = [charset] (import)* (ruleset | media | page)*;
charset = "@charset"  <css-string> ";";
import = "@import" (<css-string> | <css-url>) (<css-identifier>)* ";";
media = "@media" mediaName mediaBody;
mediaName = <css-identifier> ("," <css-identifier>)*;
mediaBody = "{" (ruleset)* "}";
page = "@page" [":" <css-indentifier>] body;

ruleset = selectors body;
body = "{" declarations "}";
selectors = selector ("," selector)*;
selector = simple_selector (combinator simple_selector)*;
combinator = ">" | "+" | ;
#attrib removed!!!
simple_selector = element_name (hash | class | attrib | pseudo)* |
                  (hash | class | attrib | pseudo)+;
element_name = <css-identifier> | "*";
hash = <css-hash>;
class = "." <css-identifier>;
attrib = "[" <css-identifier> [ ("=" | "~=" | "|=") (<css-identifier> | <css-string>) ] "]";
pseudo = ":" [ <css-identifier> ["(" <css-identifier> ")"] ];

declarations = declaration ";" declarations;
declarations = declaration;
declarations = ;
declaration = key ":" expr [prio];
key = <css-identifier>;
expr = term (operator term)*;
term = ["-" | "+"] (<css-number> | <css-identifier> | <css-string> | <css-url> | <css-hash> | function);
operator = "/" | "," |;
function = <css-identifier> "(" expr ")";
prio = "!" "important";

########### color ##############################################################
 
COLOR:selector {
    default-coloring: "identifier";
} 
 
COLOR:key {
    default-coloring: "keyword";
    foreground-color:"#000099";
    font-type:"bold";
} 

########### code folding #######################################################

FOLD:body
FOLD:mediaBody

########### navigator ##########################################################

NAVIGATOR:media {
    display-name: "@media $mediaName$";
    icon: "/org/netbeans/modules/languages/resources/css.gif";
}

NAVIGATOR:ruleset {
    display-name: "$selectors$";
    tooltip: org.netbeans.modules.languages.css.CSS.navigatorTooltip;
    icon: "/org/netbeans/modules/languages/resources/css.gif";
}

TOOLTIP:selectors:org.netbeans.modules.languages.css.CSS.tooltip
 
HYPERLINK:string:org.netbeans.modules.languages.css.CSS.hyperlink  

COMPLETE "(:)"
COMPLETE "{:}"
COMPLETE "\":\""
COMPLETE "':'"

INDENT "(:)"
INDENT "{:}"

REFORMAT:ruleset:"i"
REFORMAT:declarations:"++i"
REFORMAT:css-key:"i"
REFORMAT:body:" "
REFORMAT:value:" "


########### completion #########################################################

COMPLETION:css-key {
#    recursive:    "true";
    text1: "azimuth";
    text2: "background-attachment";
    text3: "background-color";
    text4: "background-image";
    text5: "background-position";
    text6: "background-repeat";
    text7: "background";
    text8: "border-collapse";
    text9: "border-color";
    text10: "border-spacing";
    text11: "border-style";
    text12: "border-top";
    text13: "border-right";
    text14: "border-bottom";
    text15: "border-left";
    text16: "border-top-color";
    text17: "border-right-color";
    text18: "border-bottom-color";
    text19: "border-left-color";
    text20: "border-top-style";
    text21: "border-right-style";
    text22: "border-bottom-style";
    text23: "border-left-style";
    text24: "border-top-width";
    text25: "border-right-width";
    text26: "border-bottom-width";
    text27: "border-left-width";
    text28: "border-width";
    text29: "border";
    text30: "bottom";
    text31: "caption-side";
    text32: "clear";
    text33: "clip";
    text34: "color";
    text35: "content";
    text36: "counter-increment";
    text37: "counter-reset";
    text38: "cue-after";
    text39: "cue-before";
    text40: "cue";
    text41: "cursor";
    text42: "direction";
    text43: "display";
    text44: "elevation"; 	
    text45: "empty-cells"; 	
    text46: "float"; 	
    text47: "font-family"; 	
    text48: "font-size";
    text49: "font-style"; 	
    text50: "font-variant"; 	
    text51: "font-weight"; 	
    text52: "font"; 	
    text53: "height"; 	
    text54: "left"; 	
    text55: "letter-spacing"; 	
    text56: "line-height";
    text57: "list-style-image"; 	
    text58: "list-style-position"; 	
    text59: "list-style-type";
    text60: "list-style"; 	
    text61: "margin-right"; 
    text62: "margin-left"; 	
    text63: "margin-top"; 
    text64: "margin-bottom"; 	
    text65: "margin"; 	
    text66: "max-height"; 	
    text67: "max-width"; 	
    text68: "min-height"; 	
    text69: "min-width"; 	
    text70: "orphans"; 	
    text71: "outline-color"; 	
    text72: "outline-style"; 	
    text73: "outline-width"; 	
    text74: "outline"; 	
    text75: "overflow"; 	
    text76: "padding-top"; 
    text77: "padding-right"; 
    text78: "padding-bottom"; 
    text79: "padding-left"; 	
    text80: "padding"; 	
    text81: "page-break-after"; 	
    text82: "page-break-before"; 	
    text83: "page-break-inside"; 	
    text84: "pause-after"; 	
    text85: "pause-before"; 	
    text86: "pause"; 	
    text87: "pitch-range"; 	
    text88: "pitch"; 	
    text89: "play-during"; 	
    text90: "position"; 	
    text91: "quotes"; 	
    text92: "richness"; 	
    text93: "right"; 	
    text94: "speak-header"; 	
    text95: "speak-numeral"; 	
    text96: "speak-punctuation"; 	
    text97: "speak"; 	
    text98: "speech-rate"; 	
    text99: "stress"; 	
    text100: "table-layout"; 	
    text101: "text-align"; 	
    text102: "text-decoration"; 	
    text103: "text-indent"; 	
    text104: "text-transform"; 	
    text105: "top"; 	
    text106: "unicode-bidi"; 	
    text107: "vertical-align"; 	
    text108: "visibility"; 	
    text109: "voice-family"; 	
    text110: "volume"; 	
    text111: "white-space"; 	
    text112: "widows"; 	
    text113: "width"; 	
    text114: "word-spacing"; 	
    text115: "z-index"; 
}

MARK:ERROR {
    type:"Error";
    message:"Syntax error.";
}

PROPERTIES {
    navigator-sort:"true"; 
    #traceSteps:"true";
    #printRules:"true";
    #printFirst:"true";
}
