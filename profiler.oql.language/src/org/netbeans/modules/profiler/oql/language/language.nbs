# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.



########### tokens #############################################################
TOKEN:numeric:(
    ["0"-"9"] ['l' 'L']? |
    ["1"-"9"] ["0"-"9"]* ['l' 'L']? |
    "0" ["0"-"7"]+ ['l' 'L']? |
    ["0"-"9"]+ "." ["0"-"9"]* (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]? |
    "." ["0"-"9"]+ (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]? |
    ["0"-"9"]+ ["e" "E"] ["+" "-"]? ["0"-"9"]+ ["f" "F" "d" "D"]? |
    ["0"-"9"]+ (["e" "E"] ["+" "-"]? ["0"-"9"]+)? ["f" "F" "d" "D"]
)
TOKEN:hex_number:(
    "0" ["x" "X"] ["0"-"9" "a"-"f" "A"-"F"]+ ['l' 'L']?
)
TOKEN:string:(
    "\'" (
        [^ "\\" "\'" "\n" "\r"] |
        ("\\" (
            . |
            (["0"-"7"] ["0"-"7"] ["0"-"7"]) |
            ("x" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"]) |
            ("u" ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"] ["0"-"9" "a"-"f" "A"-"F"])
        ))
    )*
    "\'"
)

TOKEN:operator: ( ">" | "<" | "==" | "<=" | ">=" | "!=" | "*" | "/" | "+" | "-" | "%" )
TOKEN:braces: ( "(" | ")" | "[" | "]" )

TOKEN:keyword:( "select" ):<SELECT>

<SELECT> {
    TOKEN:whitespace:( ["\n" "\r" " "]+ ):<SELECTOR>
}

<SELECTOR> {
    TOKEN:keyword:( "from" ):<FROM>
    TOKEN:from_adept:( ["f" "r" "o" "m"]+ )
    TOKEN:selector:( [^ "\n" "\r" " "]+ )
    TOKEN:whitespace:( ["\n" "\r" " "]+ )
}

<FROM> {
    TOKEN:instanceof:( "instanceof" )
    TOKEN:instanceof_adept:( ["i" "n" "s" "t" "a" "c" "e" "o" "f"]+ )
    TOKEN:class:( ["a"-"z" "A"-"Z"]+ ("." ["a"-"z" "A"-"Z"]+)* ("[" "]")* ):<CLASS_ALIAS>
    TOKEN:whitespace:( ["\n" "\r" " "]+ )
}

<CLASS_ALIAS> {
    TOKEN:whitespace:( ["\n" "\r" " "]+ ):<IN_CLASS_ALIAS>
}

<IN_CLASS_ALIAS> {
    TOKEN:identifier:( ["a"-"z" "A"-"Z"]+ )
    TOKEN:whitespace:( ["\n" "\r" " "]+ ):<AFTER_CLASS_ALIAS>
}

<AFTER_CLASS_ALIAS> {
    TOKEN:keyword: ( "where" ):<WHERE>
    TOKEN:unknown_keyword:( ["a"-"z" "A"-"Z"]+ )
    TOKEN:whitespace:( ["\n" "\r" " "]+ )
}

<WHERE> {
    TOKEN:condition:( [^ "\n" "\r" " "]+ )
    TOKEN:whitespace:( ["\n" "\r" " "]+ )
}

TOKEN:unknown_keyword:( ["a"-"z" "A"-"Z"]+ )

SKIP:whitespace

BRACE "(:)"
BRACE "{:}"
BRACE "[:]"

COMPLETE "(:)"
COMPLETE "{:}"
COMPLETE "':'"
COMPLETE "[:]"

INDENT "(:)"
INDENT "{:}"
INDENT "[:]"

COMPLETION:class: {
    text1:org.netbeans.modules.profiler.oql.language.CodeCompletion.getClasses;
    confirmChars:" \t";
}

COMPLETION:whitespace,unknown_keyword: {
    recursive: "true";
    text1: "select";
    text2: "where";
}

COMPLETION:whitespace,instanceof_adept: {
    text1: "instanceof";
}

COMPLETION:whitepsace,from_adept: {
    text1: "from";
}

COMPLETION:whitespace,selector, condition: {
    text1: "objectid";
    text2: "classof";
    text3: "sizeof";
    text4: "identical";
    text5: "referrers";
    text6: "referees";
    text7: "reachables";
    text8: "root";
    text9: "forEachReferrer";
    text10: "toHtml";
    text11: "concat";
    text12: "contains";
    text13: "count";
    text14: "filter";
    text15: "length";
    text16: "map";
    text17: "min";
    text18: "max";
    text19: "sum";
    text20: "sort";
    text21: "toArray";
    text22: "unique";
    text23: "forEachClass";
    text24: "forEachObject";
    text25: "findClass";
    text26: "findObject";
    text27: "classes";
    text28: "objects";
    text29: "finalizables";
    text30: "livePaths";
    text31: "roots";
}

S = SelectStatement;

SelectStatement = "select" <selector>+ ["from" ["instanceof"] <class> <identifier> ["where" <condition>+]];
