# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
#
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.


COMMENT_InitMethodToDoMarker=TODO - insert any required initialization code
COMMENT_InitSuperCall=Perform initializations inherited from our superclass
COMMENT_UserPreInit=Perform application initialization that must complete\n\        // *before* managed components are initialized\n\        // TODO - add your own initialiation code here\n
COMMENT_PropInit=Initialize automatically managed components\n\        // *Note* - this logic should NOT be modified
COMMENT_UserPostInit=Perform application initialization that must complete\n\        // *after* managed components are initialized\n\        // TODO - add your own initialization code here\n
COMMENT_PreprocessMethodToDoMarker=TODO - insert any required preprocessing code
COMMENT_PrerenderMethodToDoMarker=TODO - insert any required prerendering code
#COMMENT_InitDescription=Creator-managed Component Initialization
COMMENT_InitDescription=Visual-Web-managed Component Initialization

COMMENT_ApplicationBeanClassComment=<p>Application scope data bean for your application.  Create properties\n\
  here to represent cached data that should be made available to all users\n\
  and pages in the application.</p>
COMMENT_ApplicationBeanConstructorComment=<p>Construct a new application data bean instance.</p>
COMMENT_ApplicationBeanDestroyMethodComment=<p>This method is called when this bean is removed from\n\
  application scope.  Typically, this occurs as a result of\n\
  the application being shut down by its owning container.</p>\n\
  \n\
  <p>You may customize this method to clean up resources allocated\n\
  during the execution of the <code>init()</code> method, or\n\
  at any later time during the lifetime of the application.</p>
COMMENT_ApplicationBeanDestroyMethodToDoMarker=TODO - insert any required cleanup code
COMMENT_ApplicationBeanInitMethodComment=<p>This method is called when this bean is initially added to\n\
  application scope.  Typically, this occurs as a result of evaluating\n\
  a value binding or method binding expression, which utilizes the\n\
  managed bean facility to instantiate this bean and store it into\n\
  application scope.</p>\n\
  \n\
  <p>You may customize this method to initialize and cache application wide\n\
  data values (such as the lists of valid options for dropdown list\n\
  components), or to allocate resources that are required for the\n\
  lifetime of the application.</p>

COMMENT_PageBeanClassComment=<p>Page bean that corresponds to a similarly named JSP page.  This\n\
  class contains component definitions (and initialization code) for\n\
  all components that you have defined on this page, as well as\n\
  lifecycle methods and event handlers where you may add behavior\n\
  to respond to incoming events.</p>
COMMENT_PageBeanConstructorComment=<p>Construct a new Page bean instance.</p>
COMMENT_PageBeanDestroyMethodComment=<p>Callback method that is called after rendering is completed for\n\
  this request, if <code>init()</code> was called (regardless of whether\n\
  or not this was the page that was actually rendered).  Customize this\n\
  method to release resources acquired in the <code>init()</code>,\n\
  <code>preprocess()</code>, or <code>prerender()</code> methods (or\n\
  acquired during execution of an event handler).</p>
COMMENT_PageBeanInitMethodComment=<p>Callback method that is called whenever a page is navigated to,\n\
  either directly via a URL, or indirectly via page navigation.\n\
  Customize this method to acquire resources that will be needed\n\
  for event handlers and lifecycle methods, whether or not this\n\
  page is performing post back processing.</p>\n\
  \n\
  <p>Note that, if the current request is a postback, the property\n\
  values of the components do <strong>not</strong> represent any\n\
  values submitted with this request.  Instead, they represent the\n\
  property values that were saved for this view when it was rendered.</p>
COMMENT_PageBeanPreprocessMethodComment=<p>Callback method that is called after the component tree has been\n\
  restored, but before any event processing takes place.  This method\n\
  will <strong>only</strong> be called on a postback request that\n\
  is processing a form submit.  Customize this method to allocate\n\
  resources that will be required in your event handlers.</p>
COMMENT_PageBeanPrerenderMethodComment=<p>Callback method that is called just before rendering takes place.\n\
  This method will <strong>only</strong> be called for the page that\n\
  will actually be rendered (and not, for example, on a page that\n\
  handled a postback and then navigated to a different page).  Customize\n\
  this method to allocate resources that will be required for rendering\n\
  this page.</p>

COMMENT_RequestBeanClassComment=<p>Request scope data bean for your application.  Create properties\n\
  here to represent data that should be made available across different\n\
  pages in the same HTTP request, so that the page bean classes do not\n\
  have to be directly linked to each other.</p>
COMMENT_RequestBeanConstructorComment=<p>Construct a new request data bean instance.</p>
COMMENT_RequestBeanInitMethodComment=<p>This method is called when this bean is initially added to\n\
  request scope.  Typically, this occurs as a result of evaluating\n\
  a value binding or method binding expression, which utilizes the\n\
  managed bean facility to instantiate this bean and store it into\n\
  request scope.</p>\n\
  \n\
  <p>You may customize this method to allocate resources that are required\n\
  for the lifetime of the current request.</p>
COMMENT_RequestBeanDestroyMethodComment= <p>This method is called when this bean is removed from\n\
  request scope.  This occurs automatically when the corresponding\n\
  HTTP response has been completed and sent to the client.</p>\n\
  \n\
  <p>You may customize this method to clean up resources allocated\n\
  during the execution of the <code>init()</code> method, or\n\
  at any later time during the lifetime of the request.</p>

COMMENT_SessionBeanClassComment=<p>Session scope data bean for your application.  Create properties\n\
  here to represent cached data that should be made available across\n\
  multiple HTTP requests for an individual user.</p>
COMMENT_SessionBeanConstructorComment=<p>Construct a new session data bean instance.</p>
COMMENT_SessionBeanDestroyMethodComment=<p>This method is called when this bean is removed from\n\
  session scope.  Typically, this occurs as a result of\n\
  the session timing out or being terminated by the application.</p>\n\
  \n\
  <p>You may customize this method to clean up resources allocated\n\
  during the execution of the <code>init()</code> method, or\n\
  at any later time during the lifetime of the application.</p>
COMMENT_SessionBeanInitMethodComment=<p>This method is called when this bean is initially added to\n\
  session scope.  Typically, this occurs as a result of evaluating\n\
  a value binding or method binding expression, which utilizes the\n\
  managed bean facility to instantiate this bean and store it into\n\
  session scope.</p>\n\
  \n\
  <p>You may customize this method to initialize and cache data values\n\
  or resources that are required for the lifetime of a particular\n\
  user session.</p>
COMMENT_SessionBeanActivateMethodComment=<p>This method is called when the session containing it was\n\
  reactivated.</p>\n\
  \n\
  <p>You may customize this method to reacquire references to session\n\
  data or resources that could not be serialized with the\n\
  session itself.</p>
COMMENT_SessionBeanPassivateMethodComment=<p>This method is called when the session containing it is about to be\n\
  passivated.  Typically, this occurs in a distributed servlet container\n\
  when the session is about to be transferred to a different\n\
  container instance, after which the <code>activate()</code> method\n\
  will be called to indicate that the transfer is complete.</p>\n\
  \n\
  <p>You may customize this method to release references to session data\n\
  or resources that can not be serialized with the session itself.</p>

COMMENT_FragmentBeanClassComment= <p>Fragment bean that corresponds to a similarly named JSP page\n\
  fragment.  This class contains component definitions (and initialization\n\
  code) for  all components that you have defined on this fragment, as well\n\
  as lifecycle methods and event handlers where you may add behavior\n\
  to respond to incoming events.</p>
COMMENT_FragmentBeanConstructorComment=<p>Construct a new Fragment bean instance.</p>
COMMENT_FragmentBeanDestroyMethodComment=<p>Callback method that is called after rendering is completed for\n\
  this request, if <code>init()</code> was called.  Override this\n\
  method to release resources acquired in the <code>init()</code>\n\
  resources that will be needed for event handlers and lifecycle methods.</p>\n\
  \n\
  <p>The default implementation does nothing.</p>
COMMENT_FragmentBeanInitMethodComment=<p>Callback method that is called whenever a page containing\n\
  this page fragment is navigated to, either directly via a URL,\n\
  or indirectly via page navigation.  Override this method to acquire\n\
  resources that will be needed for event handlers and lifecycle methods.</p>\n\
  \n\
  <p>The default implementation does nothing.</p>

COMMENT_PropInitMethodComment=<p>Automatically managed component initialization.  <strong>WARNING:</strong>\n\
  This method is automatically generated, so any user-specified code inserted\n\
  here is subject to being replaced.</p>

# Entities
LBL_IllegalEntity=Illegal entity
LBL_NoSuchEntity=No such entity
  
