/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.

 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.uml.codegen.action.ui;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;

import org.netbeans.modules.uml.codegen.CodeGenUtil;
import org.netbeans.modules.uml.codegen.action.GenerateCodeDescriptor;
import org.netbeans.modules.uml.codegen.ui.customizer.TabbedPanel;
import org.netbeans.modules.uml.codegen.ui.customizer.TemplateModel;
import org.netbeans.modules.uml.codegen.ui.customizer.VerticalTabbedPanel;
import org.netbeans.modules.uml.project.ui.customizer.UMLProjectProperties;

import org.openide.util.NbBundle;

/**
 *
 * @author  Craig Conover, craig.conover@sun.com
 */
public class GenerateCodePanel extends javax.swing.JPanel
    implements ActionListener, PropertyChangeListener
{
    private VerticalTabbedPanel templateFamilies = null;
    private TemplateModel model = null;
    private String folderPath;
    
    /**
     * Creates new form ExportCodeOptionsPanel
     */
    public GenerateCodePanel(
        String folderPath, UMLProjectProperties prjProps)
    {
        initComponents();
        
        this.folderPath = folderPath;
        locationText.setText(folderPath);
            
        scrollPlaceHolder.setVisible(true);
        templatesLabel.setVisible(true);
        statusLabel.setVisible(true);
            
        prjProps.setCodeGenTemplates(CodeGenUtil.cleanProjectTemplatesList(
            (ArrayList<String>)prjProps.getCodeGenTemplatesArray()));
        prjProps.save();
        
        model = new TemplateModel(prjProps);
        model.getPropertyChangeSupport().addPropertyChangeListener(this);
        
        templateFamilies = new VerticalTabbedPanel(model, TabbedPanel.EXPAND_ALL);
        panelPlaceHolder.add(templateFamilies, BorderLayout.CENTER);
        
        boolean flag = areTemplatesEnabled(prjProps);
        
        if (flag)
        {
            advancedBtn.setText(NbBundle.getMessage(
                GenerateCodePanel.class, "LBL_Button_More")); // NOI18N
             org.openide.awt.Mnemonics.setLocalizedText(advancedBtn, 
                 NbBundle.getMessage(GenerateCodePanel.class, "LBL_Button_More")); // NOI18N

            setSize(getWidth(), getHeight() - 200);
            scrollPlaceHolder.setVisible(false);
            templatesLabel.setVisible(false);

            statusLabel.setText(""); // NIO18N
        }
        
        else
        {
            advancedBtn.setText(NbBundle.getMessage(
                GenerateCodePanel.class, "LBL_Button_Less")); // NOI18N
             org.openide.awt.Mnemonics.setLocalizedText(advancedBtn, 
                 NbBundle.getMessage(GenerateCodePanel.class, "LBL_Button_Less")); // NOI18N

            statusLabel.setText(NbBundle.getMessage(
                GenerateCodePanel.class, "MSG_AtLeastOneTemplate")); // NIO18N
        }
    }

    public void requestFocus()
    {
        locationText.requestFocus();
    }
    
    private boolean areTemplatesEnabled(UMLProjectProperties prjProps)
    {
        List<String> templates = prjProps.getCodeGenTemplatesArray();
        return templates != null && templates.size() > 0;
    }
    
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        locationLabel = new javax.swing.JLabel();
        locationText = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        backupSourcesCheck = new javax.swing.JCheckBox();
        generateMarkersCheck = new javax.swing.JCheckBox();
        templatesLabel = new javax.swing.JLabel();
        advancedBtn = new javax.swing.JButton();
        scrollPlaceHolder = new javax.swing.JScrollPane();
        panelPlaceHolder = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();

        locationLabel.setLabelFor(locationText);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/netbeans/modules/uml/codegen/action/ui/Bundle"); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, bundle.getString("LBL_ExportLocationLabel")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(browseButton, bundle.getString("LBL_BrowseButton")); // NOI18N
        browseButton.setActionCommand("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseButtonActionPerformed(evt);
            }
        });

        backupSourcesCheck.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(backupSourcesCheck, bundle.getString("LBL_BackupSourcesCheckBox")); // NOI18N
        backupSourcesCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        backupSourcesCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        generateMarkersCheck.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(generateMarkersCheck, bundle.getString("LBL_GenerateMarkersCheckBox")); // NOI18N
        generateMarkersCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        generateMarkersCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));

        templatesLabel.setText("Templates:");

        org.openide.awt.Mnemonics.setLocalizedText(advancedBtn, org.openide.util.NbBundle.getMessage(GenerateCodePanel.class, "LBL_Button_Less")); // NOI18N
        advancedBtn.setActionCommand("TEMPLATES_PANEL_SWITCH");
        advancedBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                advancedBtnexpand(evt);
            }
        });

        panelPlaceHolder.setLayout(new java.awt.BorderLayout());
        scrollPlaceHolder.setViewportView(panelPlaceHolder);

        statusLabel.setForeground(new java.awt.Color(255, 0, 0));
        statusLabel.setText("<status message>");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(scrollPlaceHolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(locationLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(generateMarkersCheck, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                                .addContainerGap())
                            .add(layout.createSequentialGroup()
                                .add(locationText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(browseButton)
                                .add(10, 10, 10))
                            .add(layout.createSequentialGroup()
                                .add(backupSourcesCheck, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                                .add(97, 97, 97))))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(advancedBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(templatesLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(statusLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(locationLabel)
                    .add(browseButton)
                    .add(locationText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(backupSourcesCheck)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(generateMarkersCheck)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(advancedBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(templatesLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollPlaceHolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusLabel)
                .addContainerGap())
        );

        locationLabel.getAccessibleContext().setAccessibleName("");
        locationLabel.getAccessibleContext().setAccessibleDescription(bundle.getString("ACSD_ExportFolder")); // NOI18N
        locationText.getAccessibleContext().setAccessibleName("");
        locationText.getAccessibleContext().setAccessibleDescription(bundle.getString("ACSD_ExportFolder")); // NOI18N
        browseButton.getAccessibleContext().setAccessibleName("");
        browseButton.getAccessibleContext().setAccessibleDescription(bundle.getString("ACSD_BrowseButton")); // NOI18N
        backupSourcesCheck.getAccessibleContext().setAccessibleName("");
        backupSourcesCheck.getAccessibleContext().setAccessibleDescription(bundle.getString("ACSD_BackupSourcesCheckBox")); // NOI18N

        getAccessibleContext().setAccessibleName("");
        getAccessibleContext().setAccessibleDescription(org.openide.util.NbBundle.getMessage(GenerateCodePanel.class, "ASCD_ExportCodePanel")); // NOI18N
    }// </editor-fold>//GEN-END:initComponents

private void advancedBtnexpand(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedBtnexpand
    Container topCont = getTopLevelAncestor();

    scrollPlaceHolder.setVisible(!scrollPlaceHolder.isVisible());
    templatesLabel.setVisible(scrollPlaceHolder.isVisible());
    
    if (scrollPlaceHolder.isVisible())
    {
        advancedBtn.setText(NbBundle.getMessage(
            GenerateCodePanel.class, "LBL_Button_Less")); // NOI18N
         org.openide.awt.Mnemonics.setLocalizedText(advancedBtn, 
             NbBundle.getMessage(GenerateCodePanel.class, "LBL_Button_Less")); // NOI18N
       
//        setSize(getWidth(), getHeight() + 200);
        topCont.setSize(topCont.getWidth(), topCont.getHeight() + 300);
    }
    
    else
    {
        advancedBtn.setText(NbBundle.getMessage(
            GenerateCodePanel.class, "LBL_Button_More")); // NOI18N
         org.openide.awt.Mnemonics.setLocalizedText(advancedBtn, 
             NbBundle.getMessage(GenerateCodePanel.class, "LBL_Button_More")); // NOI18N

//        setSize(getWidth(), getHeight() - 200);
        topCont.setSize(topCont.getWidth(), topCont.getHeight() - 300);
    }
    
    topCont.doLayout();
}//GEN-LAST:event_advancedBtnexpand

    private ChooseLocationDialog chooser = null;
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseButtonActionPerformed
    {//GEN-HEADEREND:event_browseButtonActionPerformed
        javax.swing.JFrame parentFrame = new javax.swing.JFrame();
        parentFrame.setLocation(getLocationOnScreen());
        
        chooser = new ChooseLocationDialog(
            parentFrame, true, new File(folderPath), 
            NbBundle.getMessage(GenerateCodePanel.class, 
                "LBL_GenCodeSourceFolderChooseDialog_Title")); // NOI18N
        
        chooser.getLocationChooser().addActionListener(
            new java.awt.event.ActionListener()
            {
                public void actionPerformed(java.awt.event.ActionEvent evt)
                {
                    locationChooserActionPerformed(evt);
                }
            });
            
        chooser.setLocation(getLocationOnScreen());
        chooser.setVisible(true);
    }//GEN-LAST:event_browseButtonActionPerformed

    
    public void locationChooserActionPerformed(ActionEvent evt)
    {
        if (evt.getActionCommand().equals(JFileChooser.APPROVE_SELECTION))
        {
            locationText.setText(chooser.getFolderLocation().getPath());
        }
    }
    
    public void actionPerformed(ActionEvent actionEvent)
    {
        if (actionEvent.getActionCommand().equals("OK")) // NOI18N
        {
            model.getUMLProjectProperties().save();
        }
    }
    
    public String getSelectedFolderName()
    {
        return locationText.getText();
    }

    public boolean isBackupSources()
    {
        return backupSourcesCheck.isSelected();
    }
    
    public boolean isGenerateMarkers()
    {
        return generateMarkersCheck.isSelected();
    }
    
    public void propertyChange(PropertyChangeEvent event)
    {
        String propName = event.getPropertyName();
        
        if (propName.equals(TemplateModel.PROP_NO_TEMPLATES_ENABLED))
        {
            statusLabel.setText(NbBundle.getMessage(
                GenerateCodePanel.class, "MSG_AtLeastOneTemplate")); // NIO18N
            firePropertyChange(GenerateCodeDescriptor.PROP_VALID, null, Boolean.FALSE);
        }
        
        else if (propName.equals(TemplateModel.PROP_ONE_TEMPLATE_ENABLED))
        {
            statusLabel.setText(""); // NOI18N
            firePropertyChange(GenerateCodeDescriptor.PROP_VALID, null, Boolean.TRUE);
        }

//        else if (propName.equals(TemplateModel.PROP_TEMPLATE_STATE_CHANGE))
//        {
//            
//        }

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton advancedBtn;
    private javax.swing.JCheckBox backupSourcesCheck;
    private javax.swing.JButton browseButton;
    private javax.swing.JCheckBox generateMarkersCheck;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationText;
    private javax.swing.JPanel panelPlaceHolder;
    private javax.swing.JScrollPane scrollPlaceHolder;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel templatesLabel;
    // End of variables declaration//GEN-END:variables
    
}
