<#--
  Library of macros
-->


<#import "NormalClassDeclaration.java" as NCDecl />
<#import "EnumDeclaration.java" as EnDecl />
<#import "InterfaceDeclaration.java" as InDecl />


<#-- constants -->
<#assign JAVA_IDENT="    " />
<#assign BETWEEN_FIELDS_LINE_SPACING="\n" />
<#assign BETWEEN_METHODS_LINE_SPACING="\n" />
<#assign BETWEEN_TYPES_LINE_SPACING="\n\n" />


<#macro PackageDeclaration classInfo>
<#if (classInfo.getPackage())?? >  
package ${classInfo.getPackage()};

</#if>
</#macro>


<#macro ImportDeclarations classInfo>
<#if classInfo.getImportedTypes()?? >
<#list classInfo.getImportedTypes() as type>
<@ImportDeclaration type />
</#list>

</#if>
</#macro>


<#macro ImportDeclaration type>
import ${type}; 
</#macro>


<#macro TypeDeclaration classInfo nestingLevel > 
<#if classInfo.isInterface()> 
<@InDecl.InterfaceDeclaration classInfo nestingLevel />
<#elseif classInfo.isEnumeration()> 
<@EnDecl.EnumDeclaration classInfo nestingLevel />
<#else>
<@NCDecl.NormalClassDeclaration classInfo nestingLevel />
</#if>
${BETWEEN_TYPES_LINE_SPACING}
</#macro>


<#macro TypeDeclarationComment classInfo nestingLevel >
<#if classInfo.getComment()?? >
<#assign comment=classInfo.getComment() />
<@ident nestingLevel />/**
<#list comment?split("\n") as line >
<@ident nestingLevel /> *  ${line}
</#list>
<@ident nestingLevel /> */
</#if>
</#macro>


<#macro MemberDeclarationComment memberInfo nestingLevel >
<#if memberInfo.getComment()?? >
<#assign comment=memberInfo.getComment() />
<@ident nestingLevel />/**
<#list comment?split("\n") as line >
<@ident nestingLevel /> *  ${line}
</#list>
<@ident nestingLevel /> */
</#if>
</#macro>


<#macro TypeDeclarationModifiers classInfo >
${classInfo.getModifierText(classInfo.getModifiers())}
</#macro>


<#macro TypeDeclarationTypeParameters classInfo >
</#macro>


<#macro NormalClassExtends classInfo >
<@singleline>
<#if  classInfo.getSuperClass()?? > 
extends ${classInfo.getSuperClass().getName()} 
</#if>
</@singleline>
</#macro>

<#macro ClassImplements classInfo >
<@singleline>
<#if  classInfo.getSuperInterfaces()?? && (classInfo.getSuperInterfaces()?size > 0) >
implements 
<#list classInfo.getSuperInterfaces() as interfaceName > 
 ${interfaceName}
<#if interfaceName_has_next>
,
</#if>
</#list>
</#if>
</@singleline>
</#macro>


<#macro InterfaceExtends classInfo >
<@singleline>
<#if  classInfo.getSuperInterfaces()?? && (classInfo.getSuperInterfaces()?size > 0) >
extends 
<#list classInfo.getSuperInterfaces() as interfaceName > 
 ${interfaceName}
<#if interfaceName_has_next>
,
</#if>
</#list>
</#if>
</@singleline>
</#macro>


<#macro ClassBodyDeclaration classInfo nestingLevel >
<@FieldDeclarations classInfo nestingLevel
/>
<@ConstructorDeclarations classInfo nestingLevel 
/>
<@MethodDeclarations classInfo nestingLevel  
/>
<@MemberTypeDeclarations classInfo nestingLevel 
/>
</#macro>


<#macro FieldDeclarations classInfo nestingLevel >
<#if classInfo.getFieldsCodeGenSorted()?? >
<#list classInfo.getFieldsCodeGenSorted() as fieldInfo > 
<@FieldDeclaration fieldInfo nestingLevel />
</#list>
</#if>
</#macro>


<#--
<#assign accessList = ["public", "protected", "package", "private"] />
<#assign staticList = ["static", ""] />

<#macro FieldDeclarations classInfo nestingLevel >
<#list staticList as staticParm >
<#list accessList as accessParm >
<#if classInfo.getFields(staticParm, accessParm)?? >
<#list classInfo.getFields(staticParm, accessParm) as fieldInfo > 
<@FieldDeclaration fieldInfo nestingLevel />
</#list>
</#if>
</#list>
</#list>
</#macro>
-->


<#macro FieldDeclaration fieldInfo nestingLevel >
<@MemberDeclarationComment fieldInfo nestingLevel />
<@ident nestingLevel /><@compress single_line=true>
${classInfo.getModifierText(fieldInfo.getModifiers())} ${fieldInfo.getCodeGenType()} ${fieldInfo.getName()} 
<#if fieldInfo.getInitializer()??> 
= ${fieldInfo.getInitializer()} 
</#if> 
</@compress>;${BETWEEN_FIELDS_LINE_SPACING} 
</#macro>


<#macro ConstructorDeclarations classInfo nestingLevel >
<#if classInfo.getConstructorsCodeGenSorted()?? >
<#list classInfo.getConstructorsCodeGenSorted() as methodInfo > 
<@ConstructorDeclaration methodInfo nestingLevel />
</#list>
</#if> 
</#macro>


<#macro ConstructorDeclaration methodInfo nestingLevel >
<@MemberDeclarationComment methodInfo nestingLevel />
<@ident nestingLevel /><@compress single_line=true>
${classInfo.getModifierText(methodInfo.getModifiers())} ${methodInfo.getName()} <@MethodDeclarationFormalParameters methodInfo /> <@MethodDeclarationThrows methodInfo /> 
</@compress> 
<@MethodDeclarationBody methodInfo nestingLevel />
${BETWEEN_METHODS_LINE_SPACING} 
</#macro>


<#macro MethodDeclarations classInfo nestingLevel >
<#if classInfo.getMethodsCodeGenSorted()?? >
<#list classInfo.getMethodsCodeGenSorted() as methodInfo > 
<@MethodDeclaration methodInfo nestingLevel />
</#list>
</#if>

</#macro>


<#macro MethodDeclaration methodInfo nestingLevel >
<@MemberDeclarationComment methodInfo nestingLevel />
<@ident nestingLevel /><@compress single_line=true>
${classInfo.getModifierText(methodInfo.getModifiers())} ${methodInfo.getCodeGenReturnType()} ${methodInfo.getName()} <@MethodDeclarationFormalParameters methodInfo /> <@MethodDeclarationThrows methodInfo /> 
<#if methodInfo.isAbstract() >;</#if>
</@compress> 
<#if ! methodInfo.isAbstract() >
<@MethodDeclarationBody methodInfo nestingLevel />
</#if>
${BETWEEN_METHODS_LINE_SPACING} 
</#macro>


<#macro MethodDeclarationBody methodInfo nestingLevel >
<@ident nestingLevel />{
<@MethodBodyGetterSetter methodInfo nestingLevel+1 />
<@ident nestingLevel />}
</#macro>


<#macro MethodBodyGetterSetter methodInfo nestingLevel >
<#if methodInfo.getMemberName()?? >
<@singleline>
<#if methodInfo.isAccessor() >
<@ident nestingLevel />return ${methodInfo.getMemberName()};
<#else>
<#assign params=methodInfo.getParameterInfos() />
<@ident nestingLevel />this.${methodInfo.getMemberName()} = ${params[0].getName()};
</#if>
</@singleline>

</#if>
</#macro>


<#macro MethodDeclarationThrows methodInfo >
<#if methodInfo.getExceptions()?? >
throws 
<#list methodInfo.getExceptions() as exception >
${exception}
</#list>
</#if>
</#macro>


<#macro MethodDeclarationFormalParameters methodInfo >
(<@singleline>
<#if methodInfo.getParameterInfos()?? >
<#list methodInfo.getParameterInfos() as parameterInfo> 
${parameterInfo.getCodeGenType()} ${parameterInfo.getName()}<#if parameterInfo_has_next>, </#if>
</#list>
</#if>
</@singleline>)
</#macro>


<#macro MemberTypeDeclarations classInfo nestingLevel >
<#if classInfo.getInnerClasses()?? >
<#list classInfo.getInnerClasses() as innerClass >
<@TypeDeclaration innerClass nestingLevel+1 />
</#list>
</#if>
</#macro>


<#macro ident nestingLevel > 
<@singleline >
<#if (nestingLevel > 0) >
${JAVA_IDENT}
<@ident (nestingLevel - 1) />
</#if>
</@singleline>
</#macro>


<#macro singleline >
<#assign input >
<#nested />
</#assign>
${input?replace("\n","")}<#return />
</#macro> 

<#-- stndard compress somehow didn't make it into integrated version -->
<#macro compress single_line >
<#assign input >
<#nested />
</#assign>
<#assign words =input?word_list >
<@singleline >
<#list words as word>${word}
<#if word_has_next> </#if>
</#list>
</@singleline >
</#macro> 


 





