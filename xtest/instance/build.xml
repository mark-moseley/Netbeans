<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->

<project basedir="." default="all" name="xtest-master">

    <property name="build.sysclasspath" value="ignore"/>

    <property name="xtest.home" location=".."/>
    <property name="xtest.basedir" location="../.."/>

    <property name="xtest.instance.name" value="NetBeans tests"/>

    <property name="xtest.harness.antfile" location="${xtest.home}/lib/harness.xml"/>
    <!-- location of zip file with tests distribution -->
    <property name="xtest.testsdist.zip" location="./tests-distribution.zip"/>

    <!-- ============= -->

    <!-- Generate custom master config and run it.
        Usage:  ant -DmoduleMask=ide -Dxtest.attribs=stable
        -->
    <target name="all">
    	<property name="moduleMask" value="**"/>
        <property name="mc.configfile" value="${basedir}${file.separator}current-config.xml"/>
        <property name="xtest.config" value="custom"/>

        <antcall target="mc.init"/>
        <antcall target="mc.generate" />
        <antcall target="mc.close"/>
        <antcall target="mc.execute"/>
    </target>
    
    <target name="runtests">
        <property name="xtest.config" value="unit-nb"/>
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="runtests"/>
    </target>

    <target name="coverage">
       <xslt in="master-config.xml" out="coveragebuild.xml"
          style="coverage.xsl">
          <xmlcatalog>
              <dtd
                 publicId="-//NetBeans//DTD XTest Master Config 1.0//EN"
                 location="dtd/xtest-master-config-1_0.dtd"/>
          </xmlcatalog>
       </xslt>
       <ant antfile="coveragebuild.xml" target="${xtest.config}">
         <property name="netbeans.dest.dir" location="${netbeans.dest.dir}"/>
       </ant>     
       <delete file="coveragebuild.xml"/>
    </target>
      
    <target name="removeFailedTests">
       <xslt in="master-config.xml" out="removefailedbuild.xml"
          style="removefailed.xsl">
          <xmlcatalog>
              <dtd
                 publicId="-//NetBeans//DTD XTest Master Config 1.0//EN"
                 location="dtd/xtest-master-config-1_0.dtd"/>
          </xmlcatalog>
       </xslt>
       <ant antfile="removefailedbuild.xml" target="${xtest.config}">
         <property name="netbeans.dest.dir" location="${netbeans.dest.dir}"/>
       </ant>  
       <delete file="removefailedbuild.xml"/>
    </target>
    
    <target name="runtestsdist">
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="runtestsdist"/>
    </target>

    <target name="buildnetbeans">
        <ant dir="../../nbbuild"/>
    </target>	    
    <target name="buildtests">
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="buildtests"/>
    </target>
    
    <target name="cleantests">        
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="cleantests"/>
    </target>
    
    <target name="cleanresults">
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="cleanresults"/>
    </target>
    
    <!-- Deprecated - use clean instead. This target cleans both tests and results. -->
    <target name="realclean" depends="clean"/>
    
    <target name="clean">
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="clean"/>
    </target>
    
    <target name="buildtestsdist"
            description="Zip tests and libraries necessary to run test">
        <!-- prepare build.xml to zip -->
        <echo file="build-testsdist.xml">&lt;?xml version="1.0" encoding="UTF-8"?>
            &lt;project name="NetBeans Tests Distribution" default="runtestsdist" basedir=".">
                &lt;target name="runtestsdist">
                    &lt;ant dir="xtest/instance" target="runtestsdist">
                        &lt;property name="xtest.config" value="${xtest.config}"/>
                    &lt;/ant>
                &lt;/target>
            &lt;/project>
        </echo>
        <property name="nb_all" location="../.."/>
        <delete file="${xtest.testsdist.zip}"/>
        <!-- build tests and add them to zip file (need to be first to build XTest) -->
        <ant dir="." antfile="${xtest.harness.antfile}" target="buildtestsdist"/>
        <zip destfile="${xtest.testsdist.zip}" excludes="**/CVS/**" update="true">
            <!-- add build file -->
            <zipfileset dir="." includes="build-testsdist.xml" fullpath="build.xml"/>
            <!-- add xtest -->
            <zipfileset dir="${nb_all}/xtest" prefix="xtest" 
                        includes="lib/**,plugins/**,instance/*.xml,standard-test-*cludes.txt"/>
            <zipfileset dir="${nb_all}/xtest" includes="dist_build.xml" fullpath="xtest/build.xml"/>
            <!-- add nbbuild -->
            <zipfileset dir="${nb_all}/nbbuild" prefix="nbbuild" 
                    includes="templates/**,*.xml,*.jar,*.txt,*.properties"/>
            <!-- add jemmy/jellytools libraries -->
            <zipfileset dir="${nb_all}/jemmy/builds" prefix="jemmy/builds"/>
            <zipfileset dir="${nb_all}/jellytools/builds" prefix="jellytools/builds"/>
         </zip>
         <delete file="build-testsdist.xml"/>
    </target>

    <target name="cleantestsdist">
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="cleantestsdist"/>
    </target>
    
    <target name="localresults-clean">
        <ant dir="." antfile="${xtest.harness.antfile}"
             target="localresults-clean"/>
    </target>



    <!--  ==== Custom testrun ==== -->

    
    <target name="mc.init">
       <echo>We are going to run regression tests via master config.</echo>
       <echo>Check ${mc.configfile} for test list.</echo>
       <echo file="${mc.configfile}" append="false">&lt;testconfig&gt;
    &lt;config name="custom" defaultTesttypes="gui" defaultAttributes="all"&gt;</echo>
    </target>

    <target name="mc.generate">
        <subant failonerror="true" genericantfile="mccheck.xml">
            <property name="mc.configfile" value="${mc.configfile}"/>
	    <property name="xtest.basedir" value="${xtest.basedir}"/>
            <dirset dir="${xtest.basedir}">
		<include name="${moduleMask}/**/test/**"/>
	    </dirset>
        </subant>
    </target>
      
    <target name="mc.close">
       <echo file="${mc.configfile}" append="true">
    &lt;/config&gt;</echo>
       <echo file="${mc.configfile}" append="true">
&lt;/testconfig&gt;</echo>
       <path id="tb.path">
          <pathelement location="${tb.dir}"/>
       </path>
       <pathconvert targetos="unix" property="tb.unixstyle.path" refid="tb.path"/>
       <replace file="${mc.configfile}" token="${tb.unixstyle.path}/" value=""/>
    </target>   

    <target name="mc.execute">
       <property name="xtest.instance.master-config" value="${mc.configfile}"/>
       <antcall target="runtests"/>
       <delete file="${mc.configfile}"/>
    </target>

</project>
