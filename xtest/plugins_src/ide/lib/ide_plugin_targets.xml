<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->

<!-- plugin targets, currently only executor and parts of results processor
     for IDE XTest plugin -->
<project default="forbidden" name="ide_plugin_targets">



    <!-- ============= -->
    <!-- IDE test part -->
    <!-- ============= -->
    <target name="ide_execution" depends="init,extra-classpath,prepare-testdata,prepare-projects,init-branding">

        <xtest executeAction="prepare-tests"/>
        <!-- BEGIN this has to be here, though it should be rather only in module_harness !!! -->
        <property name="_ideplugin.test.propertyfile" location="${xtest.workdir}/sys/userdata.properties"/>
        <!-- END -->    
    
        <!-- prepare workdir structure for ide executor -->
        <mkdir dir="${xtest.workdir}/sys/ide"/>
        
        <!--
        <echo message="tbag.classpath = ${tbag.classpath}"/>
        -->
        
        <!-- there should be some better userdir than this -->
        <property name="xtest.userdir" location="${xtest.workdir}/sys/ide"/>

        <property name="xtest.debug.port" value="0"/>
        <property name="xtest.debug.suspend" value="true"/>
        <property name="xtest.enable.assertions" value="true"/>
        <property name="xtest.ide.commandline.suffix" value=""/>
        <property name="xtest.ide.jvmargs" value=""/>
        <property name="xtest.ide.coverage.args" value=""/>
        <property name="junit.properties.file" value=""/>
        <property name="xtest.ide.reuse.userdir" value="false"/>
        <property name="xtest.ide.exit" value="true"/>
        <!-- create an empty Java project in IDE -->
        <property name="xtest.ide.create.project" value="false"/>
        <!-- open project at specified location -->
        <property name="xtest.ide.open.project" value=""/>
        <!-- open all projects from specified location -->
        <property name="xtest.ide.open.projects" value=""/>
        <!-- install xtest error manager to IDE which tracks internal errors. 
             If exception or error appear, the test is signed as error. -->
        <property name="xtest.ide.error.manager" value="true"/>
        <!-- Add XTestIDEHandler to IDE which tracks internal errors. 
             If exception or error appear, the test is signed as error. -->
        <property name="xtest.ide.handler" value="true"/>
        <!-- BlacklistedClassesHandler support -->
        <property name="xtest.ide.blacklist.txt" location="${xtest.ide.blacklist}"/>
        <property name="xtest.ide.whitelist.txt" location="${xtest.ide.whitelist}"/>        
        <property name="xtest.ide.whitelist.storage.dir" location="${user.home}/whitelist_storage"/>        
        <condition property="xtest.ide.blacklist.args.part1" value="-J-Dxtest.ide.blacklist=${xtest.ide.blacklist.txt}" else="">
            <isset property="xtest.ide.blacklist"/>
        </condition>            
        <condition property="xtest.ide.blacklist.args.part2" value="-J-Dxtest.ide.whitelist=${xtest.ide.whitelist.txt}" else="">
            <isset property="xtest.ide.whitelist"/>
        </condition>            
        <condition property="xtest.ide.blacklist.args.part3" value="-J-Dxtest.ide.generate.whitelist=${xtest.ide.generate.whitelist}" else="">
            <istrue value="${xtest.ide.generate.whitelist}"/>
        </condition>            
        <condition property="xtest.ide.blacklist.args.part4" value="-J-Dxtest.ide.whitelist.storage=&quot;${xtest.ide.whitelist.storage.dir}&quot;" else="">
            <istrue value="${xtest.ide.whitelist.use.storage}"/>
        </condition>            
        <condition property="xtest.ide.blacklist.args" value=" -J-Dorg.netbeans.ProxyClassLoader.level=ALL ${xtest.ide.blacklist.args.part1} ${xtest.ide.blacklist.args.part2} ${xtest.ide.blacklist.args.part3} ${xtest.ide.blacklist.args.part4} " else="">
            <or>
                <isset property="xtest.ide.blacklist"/>
                <isset property="xtest.ide.whitelist"/>
                <istrue value="${xtest.ide.generate.whitelist}"/>
                <istrue value="${xtest.ide.whitelist.use.storage}"/>
            </or>
        </condition>            
        <!-- Use prebuilt JDK mdr storage at specified location. It sets 
             IDE option -J-Dprebuilt.storage.dir -->
        <property name="xtest.ide.mdrstorage" location="${jdkhome}/mdrstorage"/>
        <!-- #52385 - added property java.io.tmpdir.default which points to original system value of java.io.tmpdir property. 
             It has to be translated through location to strip ending backslash. -->
        <property name="java.io.tmpdir.default" location="${java.io.tmpdir}"/>
        <!-- Used to run tests against platform application. -->
        <property name="xtest.ide.branding" value=""/>
        
        <property name="xtest.ide.use.classloader" value=""/>
        
        <condition property="xtest.reuse.ide.false">
           <equals arg1="${xtest.ide.reuse.userdir}" arg2="false"/>
        </condition>
        <antcall target="delete-userdir"/>

        <available file="${xtest.userdir}/var/log/messages.log" property="ide.old.userdir.available"/>
        <available file="${xtest.userdir}/lock" property="ide.old.userdir.locked"/>
        <!-- If user wants to reuse userdir and userdir is locked or empty, it 
             sets xtest.reuse.and.invalid property which is used in check-userdir target.
             Then it is generated message according to reason of failure. -->
        <condition property="xtest.reuse.and.invalid">
           <not>
              <or>
                 <equals arg1="${xtest.ide.reuse.userdir}" arg2="false"/>
                 <and>
                    <isset property="ide.old.userdir.available"/>
                    <not>
                        <isset property="ide.old.userdir.locked"/>
                    </not>
                 </and>   
              </or>
           </not>
        </condition>
        
        <antcall target="check-userdir"/>
        <antcall target="ide_test_bootstrap_cont"/>
    </target>


    <!-- prepare user dirs and workdirs for ide mode tests -->
    <target name="ide_prepare_userdir_and_workdir">

        <property name="xtest.workdir.idejars" value="${xtest.workdir}/sys/idejars"/>
        <mkdir dir="${xtest.workdir.idejars}"/>
        
        <!-- let's put our jars under ${xtest.userdir}/xtest ... -->
        <mkdir dir="${xtest.userdir}/xtest/lib/ext"/>
        
        <copy file="${xtest.home}/lib/xtest.jar" todir="${xtest.userdir}/xtest/lib"/>
        <copy file="${xtest.plugin.home}/lib/xtest-ide-main.jar" todir="${xtest.userdir}/xtest/lib"/>
        <copy file="${xtest.home}/lib/junit.jar" todir="${xtest.userdir}/xtest/lib/ext"/>
        <copy file="${xtest.home}/lib/nbjunit.jar" todir="${xtest.userdir}/xtest/lib/ext"/>
        <copy file="${xtest.home}/lib/insanelib.jar" todir="${xtest.userdir}/xtest/lib/ext"/>
                
        <copy file="${xtest.home}/lib/xtest-junit-testrunner.jar" todir="${xtest.workdir.idejars}"/> 
        <copy file="${xtest.plugin.home}/lib/xtest-ide-testexec.jar" todir="${xtest.workdir.idejars}"/> 
        <!-- Add projects support to system classloader classpath. 
            It is added in module_harness.xml to compile classpath. --> 
        <copy file="${xtest.home}/lib/nbjunit-ide.jar" todir="${xtest.workdir.idejars}" failonerror="false"/>

        <antcall target="copy-user-jars"/>    
    </target>    
    
    
    <target name="set_openide_classloader">
    	<condition property="_use.openide.classloader">
    	    <equals arg1="${xtest.ide.use.classloader}" arg2="openide" casesensitive="false"/>
    	</condition>
    </target>
    
    
    <!-- default netbeans.classpath !!! -->        
    <target name="ide_set_netbeans_classpath_default" unless="_use.openide.classloader"
            depends="ide_prepare_userdir_and_workdir, set_openide_classloader">
        <property name="xtest.netbeans.classpath" refid="xtest.netbeans.classpath">
            <classpath id="xtest.netbeans.classpath">
                <fileset dir="${xtest.userdir}/xtest/lib">
                    <include name="xtest.jar"/>
                    <include name="xtest-ide-main.jar"/>
                </fileset>
            </classpath>        
        </property>        
    </target>
            
    
    <!-- netbeans.classpath for core/openide tests which need to be loaded by openide/core classloader -->        
    <target name="ide_set_netbeans_classpath_test_core" if="_use.openide.classloader"
            depends="ide_prepare_userdir_and_workdir, set_openide_classloader">
        <echo message="Using openide/core classloader to load tests ..."/>
        <property name="_helper_xtest.netbeans.classpath" refid="xtest.netbeans.classpath">
            <classpath id="xtest.netbeans.classpath">
                <fileset dir="${xtest.userdir}/xtest/lib">
                    <include name="xtest.jar"/>
                    <include name="xtest-ide-main.jar"/>         
                </fileset>
            </classpath>        
        </property>
        <property name="xtest.netbeans.classpath" value="${_helper_xtest.netbeans.classpath}${path.separator}${tbag.classpath}"/>
    </target>
    
    <target name="ide_test_bootstrap_cont" unless="xtest.reuse.and.invalid" 
            depends="ide_set_netbeans_classpath_default,ide_set_netbeans_classpath_test_core">

        <ide-jvmargs jvmargs="${xtest.ide.jvmargs}" property="xtest.ide.commandline.jvmargs"/>
            
        <condition property="xtest.ide.timeout" value="0">
 	   <equals arg1="${xtest.ide.exit}" arg2="false"/>
 	</condition>        
        
        <property name="xtest.ide.timeout" value="${xtest.timeout}"/>
        
        
        <!-- now create a system classloader path to be supplied to ide -->
        <property name="xtest.netbeans.systemclassloader.patches" refid="xtest.netbeans.systemclassloader.path">
            <classpath id="xtest.netbeans.systemclassloader.path">
                <fileset dir="${xtest.workdir.idejars}">
                    <include name="*.jar"/>
                </fileset>       
                <!-- this needs to be fixed, because of openide/core tests ... -->
                <pathelement path="${tbag.classpath}"/>
                <pathelement path="${test.classpath}"/>
            </classpath>
        </property>
        
        <property name="coverage.lib.path" value=""/>
        
        <!-- ide classpath - ant and junit -->
        <property name="xtest.ide.path" refid="xtest.ide.path">
            <classpath id="xtest.ide.path">
                <fileset dir="${xtest.userdir}/xtest/lib/ext">
                    <include name="*.jar"/>
                </fileset>
                <pathelement path="${coverage.lib.path}"/>
            </classpath>
        </property>
        
        <!-- to  be removed -->
        <property name="test.propertyfile" value=""/>
        
        <property name="args" value="--jdkhome &quot;${jdkhome}&quot; --userdir &quot;${xtest.userdir}&quot; --nosplash 
--cp:p &quot;${xtest.ide.path}&quot; 
-J-Dnetbeans.classpath=&quot;${xtest.netbeans.classpath}&quot; 
-J-Dnetbeans.mainclass=org.netbeans.xtest.plugin.ide.Main 
-J-Dnetbeans.full.hack=true 
-J-Dnetbeans.systemclassloader.patches=&quot;${xtest.netbeans.systemclassloader.patches}&quot; 
-J-Dtest.exit=${xtest.ide.exit} 
-J-Dtest.reuse.ide=${xtest.ide.reuse.userdir} 
-J-Dtest.output.redirect=true 
-J-Dtbag.classpath=&quot;${tbag.classpath}&quot; 

-J-Dxtest.home=&quot;${xtest.home}&quot;         
-J-Dnbjunit.home=&quot;${nbjunit.home}&quot;
-J-Dtestrunner.workdir=&quot;${xtest.workdir}/sys&quot;
-J-Dtestrunner.timeout=${xtest.timeout} 

-J-Dwork.dir=&quot;${xtest.workdir}/sys&quot;
-J-Dxtest.workdir=&quot;${xtest.workdir}&quot;
-J-Dxtest.data=&quot;${xtest.data}&quot;
-J-Dxtest.tmpdir=&quot;${xtest.tmpdir}&quot;
-J-Djava.io.tmpdir.default=&quot;${java.io.tmpdir.default}&quot;
-J-Djava.io.tmpdir=&quot;${xtest.tmpdir}&quot;
-J-Dxtest.sketchpad=&quot;${xtest.sketchpad}&quot;
-J-Dnbjunit.workdir=&quot;${xtest.workdir}/user&quot;
-J-Djunit.properties.file=&quot;${junit.properties.file}&quot;
-J-Dxtest.timeout=${xtest.timeout}
-J-Dxtest.ide.create.project=${xtest.ide.create.project}
-J-Dxtest.ide.open.project=&quot;${xtest.ide.open.project}&quot;
-J-Dxtest.ide.open.projects=&quot;${xtest.ide.open.projects}&quot;
-J-Dxtest.ide.error.manager=${xtest.ide.error.manager}
-J-Dxtest.ide.handler=${xtest.ide.handler}
-J-Dxtest.userdir=&quot;${xtest.userdir}&quot;
-J-Dxtest.ide.use.classloader=${xtest.ide.use.classloader}
-J-Dprebuilt.storage.dir=&quot;${xtest.ide.mdrstorage}&quot;
${xtest.ide.blacklist.args}
${xtest.ide.branding}
${xtest.ide.commandline.jvmargs} ${xtest.ide.commandline.suffix}
${xtest.ide.coverage.args}"/>

<!--
http://www.netbeans.org/issues/show_bug.cgi?id=52385
It can cause problems when temp files are not deleted if test crashes
-J-Djava.io.tmpdir=&quot;${xtest.tmpdir}&quot;

-->     

        <echo message="enableAssertions=${xtest.enable.assertions} debugPort=${xtest.debug.port} debugSuspend=${xtest.debug.suspend}"/>

        <condition property="is.windows">
            <os family="windows"/>
        </condition>
        <antcall target="ideWatchdog"/>
        <antcall target="ideRunnerWindows"/>
        <antcall target="ideRunner"/>
        <antcall target="finishWatchdog"/>
        
        <delete dir="${xtest.userdir}/xtest"/>
                                
        <antcall target="delete-user-jars"/>        
        
        <delete dir="${xtest.workdir.idejars}"/>
        
        <!-- check whether IDE finished abnormally, in this case
             add failure information to the testbag -->
        <available file="${xtest.workdir}/ide.flag" property="testbag.failure"/>
        <antcall target="testbag-failure"/>
        
    </target>

    <!-- Starts watchdog in separate VM. -->
    <target name="ideWatchdog">
        <java classname="org.netbeans.xtest.plugin.ide.IdeWatchdog" 
              classpath="${xtest.plugin.home}/lib/xtest-ide-plugin.jar:${xtest.home}/lib/xtest.jar"
              fork="true" spawn="true">
            <arg value="${xtest.ide.timeout}"/>
            <arg value="${xtest.home}"/>
            <arg value="${xtest.workdir}"/>
            <arg value="${xtest.userdir}"/>
        </java>
    </target>
    
    <!-- Stops watchdog or prints a message when IDE was killed by watchdog -->
    <target name="finishWatchdog">
        <java classname="org.netbeans.xtest.plugin.ide.IdeWatchdog" fork="true"
              classpath="${xtest.plugin.home}/lib/xtest-ide-plugin.jar:${xtest.home}/lib/xtest.jar">
            <arg value="${xtest.workdir}"/>
        </java>
    </target>

    <target name="ideRunnerWindows" if="is.windows">
        <!-- If nb.exe is available, run it because it prints log messages to the 
             console. Otherwise run netbeans.exe launcher. If none of them is found,
             try to find application exe launcher (e.g. paintit.exe). -->
        <available file="${netbeans.dest.dir}/bin/nb.exe" property="xtest.ide.launcher" value="nb.exe"/>
        <condition property="xtest.ide.launcher" value="netbeans.exe">
            <available file="${netbeans.dest.dir}/bin/netbeans.exe"/>
        </condition>
        <fileset dir="${netbeans.dest.dir}/bin" id="exe.launcher">
            <include name="*.exe"/>
            <exclude name="*_w.exe"/>
        </fileset>
        <property name="xtest.ide.launcher" refid="exe.launcher"/>
        <ideTestRunner dir="${netbeans.dest.dir}/bin" executable="${netbeans.dest.dir}/bin/${xtest.ide.launcher}"
                workdir="${xtest.workdir}/sys"
                failonerror="no" timeout="${xtest.ide.timeout}" ideuserdir="${xtest.userdir}"
                enableAssertions="${xtest.enable.assertions}" debugPort="${xtest.debug.port}" debugSuspend="${xtest.debug.suspend}">
            <arg line="${args}"/>
            <syspropertyfile file="${_ideplugin.test.propertyfile}"/>
        </ideTestRunner>
    </target>
    
    <target name="ideRunner" unless="is.windows">
        <!-- If bin/netbeans is available, run it. Otherwise try to find application 
             unix launcher (e.g. paintit). -->
        <available file="${netbeans.dest.dir}/bin/netbeans" property="xtest.ide.launcher" value="netbeans"/>
        <fileset dir="${netbeans.dest.dir}/bin" id="unix.launcher">
            <exclude name="*.*"/>
        </fileset>
        <property name="xtest.ide.launcher" refid="unix.launcher"/>
        <ideTestRunner dir="${netbeans.dest.dir}/bin" executable="sh"  workdir="${xtest.workdir}/sys"
                failonerror="no" timeout="${xtest.ide.timeout}" ideuserdir="${xtest.userdir}"
                enableAssertions="${xtest.enable.assertions}" debugPort="${xtest.debug.port}" debugSuspend="${xtest.debug.suspend}">
            <arg line="./${xtest.ide.launcher} ${args}"/>
            <syspropertyfile file="${_ideplugin.test.propertyfile}"/>
        </ideTestRunner>    
    </target>
    
    <target name="check-userdir" if="xtest.reuse.and.invalid">
        <antcall target="check-userdir-available"/>
        <antcall target="check-userdir-locked"/>
    </target>

    <target name="check-userdir-available" unless="ide.old.userdir.available">
        <testbaginfo unexpectedFailure="This testbag wants to reuse old userdir, but it doesn't exist. Testbag wasn't executed." outfile="${xtest.workdir}/xmlresults/testbag.xml"/> 
    </target>
    
    <target name="check-userdir-locked" if="ide.old.userdir.locked">
        <testbaginfo unexpectedFailure="This testbag wants to reuse old userdir, but it is locked from previous session. Testbag wasn't executed." outfile="${xtest.workdir}/xmlresults/testbag.xml"/> 
    </target>
    
    <target name="delete-userdir" if="xtest.reuse.ide.false">
        <delete dir="${xtest.userdir}"/>
    </target>
    
    <target name="copy-user-jars" depends="init,ide-extra-jars" if="xtest.extra.jars.ide">
         <for list="${ide.extra.classpath}" delimiters=";${path.separator}," property="xtest.ide.onejar">
           <antcall target="copy-jar"/>
         </for>
    </target>
    
    <target name="copy-jar">
        <!--
         <copy file="${xtest.ide.onejar}" todir="${netbeans.home}/lib"/>
         -->
         <copy file="${xtest.ide.onejar}" todir="${xtest.workdir.idejars}"/>
    </target>
    
    <target name="delete-user-jars" depends="init" if="xtest.extra.jars.ide">
         <for list="${xtest.extra.jars.ide}" delimiters=";${path.separator}," property="xtest.ide.onejar">
           <antcall target="delete-jar"/>
         </for>
    </target>
    
    <target name="delete-jar">
        <!--
         <delete file="${netbeans.home}/lib/${xtest.ide.onejar}"/>
         -->
         <delete file="${xtest.workdir.idejars}/${xtest.ide.onejar}"/>
    </target>

    <target name="ide-extra-jars" if="xtest.extra.jars.ide">
        <jar-finder dirs="${xtest.extra.jars.path}" files="${xtest.extra.jars.ide}" 
                   property="ide.extra.classpath"/>
    </target>
    
    <!-- if testbag did not finish correctly, notice this state to the current testbag -->
    <target name="testbag-failure" if="testbag.failure">
        <testbaginfo unexpectedFailure="testbag did not finish correctly, some tests may not have run" outfile="${xtest.workdir}/xmlresults/testbag.xml"/> 
    </target>
    
    <!-- ======================== -->
    <!-- stuff for moving results -->
    <!-- ======================== -->
    
    <target name="move-ide-results">
        <available file="${xtest.workdir}/sys/ide/var/log/messages.log" property="ide.userdir.available"/>
        <antcall target="move-ide-userdir"/>
    </target>
    
    <target name="move-ide-userdir" if="ide.userdir.available">
        <!-- copy messages.log -->
        <copy file="${xtest.workdir}/sys/ide/var/log/messages.log" todir="${xtest.current.results}/sys/ide"/>
        <!-- copy output dir -->
        <available file="${xtest.workdir}/sys/ide/output" type="dir" property="xtest.ide.output.exists"/>
        <antcall target="copy-output"/>
        <!-- copy ide screenshot image -->
        <available file="${xtest.workdir}/sys/ide/var/screenshots" type="dir" property="xtest.ide.screenshot.exists"/>
        <antcall target="copy-ide-screenshots"/>
        <!-- copy ide.zip -->
        <condition property="xtest.userdir.move">
           <equals arg1="${xtest.archive.ide.userdir}" arg2="true"/>
        </condition>
        <antcall target="copy-ide.zip"/>
    </target>
    
    <target name="copy-ide.zip" if="xtest.userdir.move">
        <!-- zip the ide userdir stuff -->
        <zip zipfile="${xtest.current.results}/sys/ide/ide.zip" basedir="${xtest.workdir}/sys/ide"/>
    </target>

    <target name="copy-output" if="xtest.ide.output.exists">
        <copy todir="${xtest.current.results}/sys/ide/output">
           <fileset dir="${xtest.workdir}/sys/ide/output"/>
        </copy>
    </target>
    
    <target name="copy-ide-screenshots" if="xtest.ide.screenshot.exists">
        <copy todir="${xtest.current.results}/sys/ide/screenshots">
            <fileset dir="${xtest.workdir}/sys/ide/var/screenshots"/>
        </copy>
    </target>
    

    
    
    <!-- =============== -->
    <!-- utility targets -->
    <!-- =============== -->
    
    <!-- init target - even this script have to initialize some stuff :-)) -->
    <target name="init">
        <taskdef name="nbtaskdef" classname="org.netbeans.xtest.NbMultiTaskDef" 
                 classpath="${xtest.home}/lib/xtest.jar"/>
             
        <echo message="${xtest.plugin.home}/lib/xtest-ide-plugin.jar"/>
                 
        <!-- the junit in the task is required, because it is used to prepare testlist -->
        <nbtaskdef classpath="${xtest.plugin.home}/lib/xtest-ide-plugin.jar:${xtest.home}/lib/xtest-junit-testrunner.jar:${xtest.home}/lib/junit.jar:${xtest.home}/lib/nbjunit.jar:${xtest.home}/lib/xtest.jar">
            <taskdef name="ide-jvmargs" classname="org.netbeans.xtest.plugin.ide.IdeJvmArgs"/>
            <taskdef name="ideTestRunner" classname="org.netbeans.xtest.plugin.ide.IdeTestRunnerTask"/>
        </nbtaskdef>
    </target>
    
    <!-- !!!! this target is copied directly from module_harness.xml !!!! -->
    <!-- !!!! please keep in sync !!! -->
    <target name="extra-classpath" if="xtest.extra.jars">
        <jar-finder dirs="${xtest.extra.jars.path}" files="${xtest.extra.jars}" 
                   property="test.extra.classpath"/>
    </target>
    
    <!-- Inits property xtest.ide.branding when we run tests in module of branded application. -->
    <target name="init-branding" if="branding.token">
        <pathconvert property="run.platform.clusters">
            <path>
                <pathelement location="${cluster}"/>
                <dirset dir="${netbeans.dest.dir}" includes="${enabled.clusters}" excludes="platform*"/>
            </path>
        </pathconvert>
        <!-- branding.token is defined in ${suite.dir}/nbproject/project.properties. -->
        <property name="xtest.ide.branding" value='--branding "${branding.token}" --clusters "${run.platform.clusters}"'/>
    </target>
    
    <!-- ====================================================================== -->
    <!-- These targets prepare test data to be extracted to xtest data directory-->
    <!-- ====================================================================== -->

    <!-- prepare-testdata target unzips testdata.zip to testdata.dst and passes testdata.dst to the test -->
    <property name="testdata.zip" location="${xtest.data}/data.zip"/>
    <property name="testdata.dst" location="${xtest.data}/data"/>
   
    <target name="check-testdata.zip">
        <available file="${testdata.zip}" property="testdata.zip.available"/>
    </target>

    <target name="prepare-testdata" depends="check-testdata.zip" if="testdata.zip.available">
        <delete dir="${testdata.dst}"/>        
        <mkdir dir="${testdata.dst}"/>
        <unzip src="${testdata.zip}" dest="${testdata.dst}"/>
    </target>
    

    <!-- ==================================================== -->
    <!-- These targets prepare multiple projects to be opened -->
    <!-- ==================================================== -->
    
    <!-- prepare-projects target allows to open in ide several projects stored to 'data/projects.zip' -->
    <property name="projects.zip" location="${xtest.data}/projects.zip"/>
    <property name="projects.dst" location="${xtest.data}/projects"/>

    <target name="check-projects.zip">
        <available file="${projects.zip}" property="projects.zip.available"/>
    </target>

    <target name="prepare-projects" depends="check-projects.zip" if="projects.zip.available">
        <delete dir="${projects.dst}"/>        
        <mkdir dir="${projects.dst}"/>
        <unzip src="${projects.zip}" dest="${projects.dst}"/>
        <property name="xtest.ide.open.projects" value="${projects.dst}"/>
    </target>

    
    <!-- forbidden main target -->
    <target name="forbidden">
       <fail message="This script is not intended to be directly executed. This in only library."/>
    </target>
    
</project>
