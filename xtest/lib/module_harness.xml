<?xml version="1.0"?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2003 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="module-harness" default="forbidden">

    <!-- location for workdir for the harness -->
    <property name="xtest.workdir" location="work"/>
    <!-- location for results from the harness -->
    <property name="xtest.results" location="results"/>

    <property name="xtest.tmpdir" location="${xtest.workdir}/tmpdir"/>
    <property name="xtest.sketchpad" location="${xtest.workdir}/user/sketch-pad"/>

    <property name="xtest.module" value="Unknown"/>
    
    <!-- hard timeout for single testbag (in miliseconds)-->    
    <property name="xtest.timeout" value="2400000"/>    
    
    <!-- properties just for compiler -->
    <property name="build.compiler.deprecation" value="off"/>
    <!-- should be default ON, because it helps to find problems -->
    <property name="build.compiler.debug" value="on"/>
    
    <property name="xtest.build" location="."/>    
    <property name="xtest.file.name" value="tests.xar"/>
    <property name="xtest.file.location" value="lib"/>
    
    <!-- XTest ide plugin ant script name - mostly for compatibility reason -->
    <property name="xtest.ide.plugin.ant.script" value="${xtest.home}/plugins/ide/lib/ide_plugin_targets.xml"/>


    <!-- These in/excludes will be added to xtest.pattern    -->
    <!-- if you want to use these properties, you should use -->
    <!-- config with empty testbag                           -->    
    <property name="xtest.includes" value=""/>
    <property name="xtest.excludes" value=""/>   
    

    <target name="forbidden">
       <antcall target="version"/>
       <fail message="This script is not intended to be directly executed. This in only library."/>
    </target>
        
    <target name="version" description="Shows version of XTest">
        <property name="xtest.jar" value="${xtest.home}/lib/xtest.jar"/>
        <taskdef name="version" classname="org.netbeans.xtest.XTestVersion" 
                 classpath="${xtest.jar}"/>
        <version/>
    </target>    
    
    <!-- =========== -->
    <!-- Init target -->
    <!-- =========== -->
    
    <target name="init" depends="prepare-xtest">
        <taskdef name="nbtaskdef" classname="org.netbeans.xtest.NbMultiTaskDef" 
                 classpath="${xtest.home}/lib/xtest.jar"/>
                 
        <nbtaskdef classpath="${xtest.home}/lib/xtest.jar">
            <taskdef name="nbpath" classname="org.netbeans.xtest.NbPath"/>
            <taskdef name="nbpatternset" classname="org.netbeans.xtest.NbPatternset"/>
            <taskdef name="pathdef" classname="org.netbeans.xtest.PathDef"/>                        
            <taskdef name="write-property" classname="org.netbeans.xtest.UserPropertyWriter"/>
            <taskdef name="for" classname="org.netbeans.xtest.driver.ForTask"/>
            <taskdef name="jar-finder" classname="org.netbeans.xtest.JarFinder"/>
        </nbtaskdef>
        
        <nbpath xtesthome="${xtest.home}"/>

	<!-- XML, XSLT reporters -->
        <nbtaskdef classpath="${xtest.home}/lib/xtest.jar">
            <taskdef name="testruninfo" classname="org.netbeans.xtest.pe.TestRunInfoTask"/>
            <taskdef name="testbaginfo" classname="org.netbeans.xtest.pe.TestBagInfoTask"/>
            <taskdef name="regenerateXML" classname="org.netbeans.xtest.pe.RegenerateXMLTask"/>
            <taskdef name="transformXML" classname="org.netbeans.xtest.pe.TransformXMLTask"/>
            <taskdef name="printSummary" classname="org.netbeans.xtest.pe.PrintSummary"/>
            <taskdef name="getResultsDirs" classname="org.netbeans.xtest.pe.GetResultsDirsTask"/>
            <taskdef name="pluginsInit" classname="org.netbeans.xtest.plugin.PluginsInitTask"/>
            <taskdef name="pluginExecute" classname="org.netbeans.xtest.plugin.PluginExecuteTask"/>
        </nbtaskdef>

        <!-- Executors/Compilers-->
         <nbtaskdef classpath="${junit.path};${xtest.path}">
            <taskdef name="test-executor" classname="org.netbeans.xtest.harness.MTestExecutor"/>            
            <taskdef name="test-configurator" classname="org.netbeans.xtest.harness.MTestConfigTask"/>
            <taskdef name="test-compiler" classname="org.netbeans.xtest.harness.MTestCompiler"/>            
         </nbtaskdef>    


        <nbpatternset useid="xtest.pattern">
            <patternset includes="${xtest.includes}" excludes="${xtest.excludes}">
                <!--
                <exclude name="**/*Suite.class"/>
                -->
                <exclude name="**/*$$*.class"/>
                <exclude name="**/data/**"/>
                <exclude name="**/hidden/**"/>
                <exclude name="**/*Hidden.*"/>
                <exclude name="**/*Hid.*"/>
            </patternset>
        </nbpatternset>
        
        <!-- There will be test classpath created from folowing two properties inside   -->
        <!-- test executor in folowing way:                                             -->
        <!-- ${xtest.classpath.root}/${xtest.testtype}/${tbag.classpath.work}           -->
        <!-- and then testset specific dir and then returned in property tbag.classpath -->
        <property name="tbag.classpath.root" location="${xtest.workdir}"/>
        <property name="tbag.classpath.work" value="sys/tests"/>
        
       	<property file="${xtest.userdata.propertyfile}"/>       
        
        <!-- initialize plugins -->
        <pluginsInit pluginsHome="${xtest.home}/plugins"/>
        
        
        <!-- check whether XTest ide-plugin is available  !!! TO BE REMOVED -->
        <available file="${xtest.ide.plugin.ant.script}" property="xtest.ide.plugin.available"/>
        
        
                
    </target>
    
    <target name="prepare-xtest">
        <ant dir="${xtest.home}/lib" antfile="harness.xml" target="buildxtest"/>
    </target>
    
    <target name="extra-classpath" if="xtest.extra.jars">
        <jar-finder dirs="${xtest.extra.jars.path}" files="${xtest.extra.jars}" 
                   property="test.extra.classpath"/>
    </target>

    
    <!-- ======== -->
    <!-- Run test -->
    <!-- ======== -->
    
    <target name="config" depends="init, cleanworkdir">
        <property name="xtest.executors" value=""/>
        <property name="xtest.testbags" value=""/>
        <property name="xtest.module.configfile" value=""/>
        <property name="xtest.patternset.attribs" value=""/>
        <property name="xtest.run.singletest" value=""/>
        <!-- This task reads config file cfg-${xtest.testtype}.xml and selects all -->
        <!-- testbags, which conforms to ${xtest.attribs} - is subset or equals -->
        <test-configurator testtype="${xtest.testtype}" 
                           testattributes="${xtest.attribs}"
                           testexecutors="${xtest.executors}"
                           testbags="${xtest.testbags}"
                           testconfig="${xtest.module.configfile}"
                           patternsetattribs="${xtest.patternset.attribs}"
                           singleTest="${xtest.run.singletest}">
             <patternset refid="xtest.pattern"/>
	</test-configurator>                           
    </target>
    
    <target name="runtests" depends="config">
        <condition property="xtest.runmessage" value="attributes: ${xtest.attribs}">
           <equals arg1="${xtest.testbags}" arg2=""/>
        </condition>
        <property name="xtest.runmessage" value="testbags: ${xtest.testbags}"/>
        <echo message="Running ${xtest.module} tests, testtype: ${xtest.testtype}, ${xtest.runmessage}"/>

        <!-- prepare result dir and produce some informatino about this testrun -->
        <mkdir dir="${xtest.results}"/>
        <getResultsDirs testRunDirProperty="xtest.results.testrun.dir"/>
        <testruninfo outfile="${xtest.results.testrun.dir}/xmlresults/testrun.xml"/>

        <mkdir dir="${xtest.workdir}/user/sketch-pad"/>
        <mkdir dir="${xtest.workdir}/tmpdir"/>
        <mkdir dir="${xtest.workdir}/sys"/>
        
        <test-executor paramClasspathProp="tbag.classpath"
                       paramTestConfigProp="tbag.testtype"
                       paramNameProp="tbag.name"
                       paramExecutorProp="tbag.executor"
                       resultDir="${xtest.workdir}/xmlresults/suites"
                       workDir="${xtest.workdir}/sys"/>
                       
        <ant antfile="${xtest.home}/lib/harness.xml" target="mail-results"/>

        <!-- print summary -->
        <printSummary resultsDir="${xtest.results}"/>   
    </target>        
    
    
    <target name="test" depends="deprecated_executors">

        <!-- prepare workdir structure -->
        <mkdir dir="${xtest.workdir}/xmlresults"/>
        <mkdir dir="${xtest.workdir}/xmlresults/suites"/>
        <mkdir dir="${xtest.workdir}/sys/tests"/>        
        <mkdir dir="${xtest.workdir}/user"/>

        <property name="test.propertyfile" location="${xtest.workdir}/sys/userdata.properties"/>
   	<write-property propertyPrefix="xtest.userdata" attribs="${xtest.attribs}" file="${test.propertyfile}"/>

        <!-- create testbag info for report -->
        <testbaginfo name="${tbag.name}" testType="${tbag.testtype}" testAttribs="${xtest.attribs}"
                      executor="${tbag.executor}" module="${xtest.module}"
                      outfile="${xtest.workdir}/xmlresults/testbag.xml"/>  
        
        <antcall target="prepare-tests"/>
        
        <echo message="Just a simple try - tests don't run ..."/>
        <property name="plugin.name" value=""/>
        <property name="plugin.executor" value=""/>
        <pluginExecute  pluginName="${plugin.name}" executeType="executor" executeTarget="${plugin.executor}"/>
        <!--
        <antcall target="${xtest.exectype}_test_bootstrap"/>
        -->
    </target>
    
    <!-- deprecated executors - !!! -->
    <target name="deprecated_executors" if="xtest.exectype">
        <echo message="**********"/>
        <echo message="! This is DEPRECATED test mode. Please refer to a http://xtest.netbeans.org to get information how to update your tests"/>
        <echo message="**********"/>
        <echo message="Requested xtest.exectype=${xtest.exectype}"/>
       
        <!-- original code mode -->
        <condition property="plugin.name" value="jvm">
            <equals arg1="code" arg2="${xtest.exectype}"/>
        </condition>
        <condition property="plugin.executor" value="jvm_execution">
            <equals arg1="code" arg2="${xtest.exectype}"/>
        </condition>        
        
        <!-- original ide mode -->
        <condition property="plugin.name" value="ide">
            <equals arg1="ide" arg2="${xtest.exectype}"/>
        </condition>
        <condition property="plugin.executor" value="ide_internal_execution">
            <equals arg1="ide" arg2="${xtest.exectype}"/>
        </condition>
        
        <echo message="Using plugin ${plugin.name}, executor ${plugin.executor}"/>
        <echo message="**********"/>
    </target>
    
    
    
    <target name="prepare-tests" depends="test-unjared" unless="unjared">
        <unjar dest="${xtest.workdir}/sys/tests" 
               src="${xtest.build}/${xtest.file.location}/${xtest.file.name}"/>
    </target>
    
    <!-- Just test whether tests are already unzipped -->
    <target name="test-unjared">
        <available property="unjared" file="${xtest.workdir}/sys/tests/META-INF/MANIFEST.MF"/>
    </target>
    
    <!-- ============== -->
    <!-- Code test part -->
    <!-- ============== -->
   
    <!-- nothing - everything has moved to jvm plugin -->
     
  
    <!-- ============= -->
    <!-- IDE test part -->
    <!-- ============= -->
    
    <!-- this needs to be here, beacuse of compilation !!! - might be removed
         for projectized IDE -->
    <target name="ide-extra-jars" if="xtest.extra.jars.ide">
        <jar-finder dirs="${xtest.extra.jars.path}" files="${xtest.extra.jars.ide}" 
                   property="ide.extra.classpath"/>
    </target>
                
    <!-- proxy for moving results from ide testrun 
        - this should be solved differently in XTest 2 
    -->
    <target name="move-ide-results-proxy" if="xtest.ide.plugin.available">
        <ant antfile="${xtest.ide.plugin.ant.script}" target="move-ide-results"/>
    </target>
    
    
    
    
    
    <!-- ======================= -->
    <!-- Test results formatting -->
    <!-- ======================= -->
    <target name="test_report" depends="init">
    
        <!-- give me a new dir for just run testbag -->
        <getResultsDirs testRunDirProperty="xtest.results.testrun.dir" testBagDirProperty="xtest.results.testbag.dir"/>
       
        <property name="xtest.current.results" value="${xtest.results.testbag.dir}"/>
       
        <!-- move the results -->
        <antcall target="move-results"/>       
        
        <!-- a mew testbag was added, regenerate the XML tree -->
        <regenerateXML inputDir="${xtest.results}"/>
                      
        <!-- transform XML files of new testbag to HTML format -->
        <transformXML inputDir="${xtest.current.results}"
                      outputDir="${xtest.current.results}"/>
            
          
        <!-- because we have regenerated the XML tree, we need to\
            transform the new stuff to HTML -->
        <transformXML inputDir="${xtest.results}"
                      outputDir="${xtest.results}"/>                      
        
        <!-- print summary -->
        <!-- Moved to target runtests
        <printSummary resultsDir="${xtest.results}"/>
        -->
        

    </target>
    
    <target name="move-results">
        <!-- copy results from workdir to result dir --> 
        <copy toDir="${xtest.current.results}">
            <fileset dir="${xtest.workdir}" defaultexcludes="no">
                <include name="user/**"/>
                <include name="xmlresults/**"/>
                <include name="sys/userdata.properties"/>
            </fileset>
        </copy>
        
        <!-- if ide plugin is available -> move results from ide to report -->
        <!-- do the ide userdir stuff  (if ide-plugin is available) -->
        <antcall target="move-ide-results-proxy"/>
        
        <!--  now delete all the stuff -->
        <delete dir="${xtest.workdir}/sys/tests" />
        <delete includeEmptyDirs="true">
            <fileset dir="${xtest.workdir}/user">
                <exclude name="sketch-pad/**"/>
            </fileset>
        </delete>
        <delete dir="${xtest.workdir}/xmlresults"/>
    </target>
    
    
    
    <!-- ======== -->
    <!-- Building -->
    <!-- ======== -->
    
    <target name="compiler-launcher" depends="config,deleteworkdir" unless="xtest.distexec">
       <test-compiler  paramClasspathProp="tbag.classpath"
                       paramTestConfigProp="tbag.testtype"
                       paramNameProp="tbag.name"
                       paramExecutorProp="tbag.executor"/>    
    </target>
    
    <target name="compiletests" depends="init" unless="xtest.distexec">
       <for list="${compile.srcdir}" delimiters=";${path.separator}," property="compile.srcdir.parsed">
         <antcall target="compile-one-dir"/>
       </for>
    </target>
    
    <target name="compile-one-dir" depends="init,extra-classpath,ide-extra-jars">
        <property name="test.extra.classpath" value=""/>
        <property name="compiletest.classpath" value=""/>
        <property name="compile.excludes" value=""/>
        <javac srcdir="${compile.srcdir.parsed}" 
               deprecation="${build.compiler.deprecation}"
               debug="${build.compiler.debug}"
               excludes="${compile.excludes}">
            <classpath>
           	<pathelement path="${junit.path}"/>    		
    		<pathelement path="${test.extra.classpath}"/>
		<pathelement path="${compiletest.classpath}"/>
		<pathelement path="${ide.extra.classpath}"/>
            </classpath>
        </javac>
    </target>
    
    <!-- Creates lib/test.jar with all tests for this module,       -->
    <!-- maybe there should be more includes here, not just classes -->
    <target name="buildtests" depends="compiletests" unless="xtest.distexec">
        <antcall target="jartests"/>
    </target>
    
    <!-- Creates lib/test.jar with all tests for this module,       -->
    <!-- maybe there should be more includes here, not just classes -->
    <target name="jartests" unless="xtest.distexec">
        <mkdir dir="${xtest.build}/${xtest.file.location}"/>
        <property name="jartests.includes" value=""/>
        <property name="jartests.excludes" value=""/>
        <jar basedir="." 
             jarfile="${xtest.build}/${xtest.file.location}/${xtest.file.name}"
             includesfile="${xtest.home}/standard-test-includes.txt"
             includes="${jartests.includes}"
             excludesfile="${xtest.home}/standard-test-excludes.txt"
             excludes="${jartests.excludes}">
        </jar>
    </target>
    
    <target name="cleantests">
        <delete>
            <fileset dir=".">
                <include name="**/src/**/*.class"/>
            </fileset>
        </delete>
        <delete dir="${xtest.file.location}"/>
    </target>
    
    <!-- Removes results from previous test execution of given testtype  -->
    <!-- xtest.testtype is defined either by default or by test executor -->    
    <target name="cleanworkdir" description="Deletes working directory">
        <available file="${xtest.workdir}" property="xtest.workdir.available"/>
        <antcall target="cleanworkdir2"/>
    </target>
   
    <target name="cleanworkdir2" if="xtest.workdir.available">
        <delete includeEmptyDirs="true">
           <fileset dir="${xtest.workdir}">
             <exclude name="tmpdir/**"/>
             <exclude name="user/sketch-pad/**"/>
           </fileset>
        </delete>
    </target>
        
    <target name="deleteworkdir" description="Deletes working directory">
        <delete includeEmptyDirs="true" dir="${xtest.workdir}"/>
    </target>
    
    <target name="cleanresults" description="Deletes results" depends="cleanworkdir">
        <delete dir="${xtest.results}"/>
    </target>
    
    <target name="realclean"
            description="Deletes classes, ${xtest.file.location}/${xtest.file.name} and *all* results."
            depends="cleantests,cleanresults">
    </target>

    <!-- ================= -->
    <!-- Config generation -->
    <!-- ================= -->
    <!-- Generate config with failed tests from the last test run. -->
    <target name="generateFailedConfig" description="Generates config of failed tests from last results">
        <taskdef name="generateFailedConfig" classpath="${xtest.home}/lib/xtest.jar"
                 classname="org.netbeans.xtest.pe.GenerateFailedTask"/>
	<generateFailedConfig inputDir="${xtest.results}" outputDir="."/>
    </target>

    <!-- Generates config from tests excluded in given config or in all configs 
    find in input directory -->
    <target name="generateExcludedConfig">
        <taskdef name="generateExcludedConfig" classpath="${xtest.home}/lib/xtest.jar"
                 classname="org.netbeans.xtest.pe.GenerateExcludedTask"/>
        <property name="configFile" value="" />
	<generateExcludedConfig inputDir="." outputDir="." configFile="${configFile}"/>
    </target>
    
    <!-- =============== -->
    <!-- Utility targets -->
    <!-- =============== -->
    
    <!-- target for providing callback to defined script and target -->
    <target name="callback" if="callback.file">
        <echo message="Calling back buildfile ${callback.file}, target ${callback.target}" level="verbose"/>
        <ant antfile="${callback.file}" target="${callback.target}"/>
    </target>
    
</project>
