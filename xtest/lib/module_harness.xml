<?xml version="1.0"?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="module-harness" default="forbidden">

    <!-- location for workdir for the harness -->
    <property name="xtest.workdir" location="work"/>
    <!-- location for results from the harness -->
    <property name="xtest.results" location="results"/>

    <property name="xtest.tmpdir" location="${xtest.workdir}/tmpdir"/>
    <property name="xtest.sketchpad" location="${xtest.workdir}/user/sketch-pad"/>

    <property name="xtest.module" value="Unknown"/>
    
    <!-- hard timeout for single testbag (in miliseconds)-->    
    <property name="xtest.timeout" value="2400000"/>    
    
    <!-- properties just for compiler -->
    <property name="build.compiler.deprecation" value="off"/>
    <!-- should be default ON, because it helps to find problems -->
    <property name="build.compiler.debug" value="on"/>
    
    <property name="xtest.build" location="."/>    
    <property name="xtest.file.name" value="test.jar"/>
    <property name="xtest.file.location" value="lib"/>

    <!-- These in/excludes will be added to xtest.pattern    -->
    <!-- if you want to use these properties, you should use -->
    <!-- config with empty testbag                           -->    
    <property name="xtest.includes" value=""/>
    <property name="xtest.excludes" value=""/>   
    

    <target name="forbidden">
       <fail message="This script is not intended to be directly executed. This in only library."/>
    </target>
    
    <!-- =========== -->
    <!-- Init target -->
    <!-- =========== -->
    
    <target name="init" depends="prepare-xtest">
        <taskdef name="nbtaskdef" classname="org.netbeans.xtest.NbMultiTaskDef" 
                 classpath="${xtest.home}/lib/xtest.jar"/>
                 
        <nbtaskdef classpath="${xtest.home}/lib/xtest.jar">
            <taskdef name="nbpath" classname="org.netbeans.xtest.NbPath"/>
            <taskdef name="nbpatternset" classname="org.netbeans.xtest.NbPatternset"/>
            <taskdef name="pathdef" classname="org.netbeans.xtest.PathDef"/>                        
            <taskdef name="write-property" classname="org.netbeans.xtest.UserPropertyWriter"/>
            <taskdef name="for" classname="org.netbeans.xtest.driver.ForTask"/>
            <taskdef name="jar-finder" classname="org.netbeans.xtest.JarFinder"/>
            <taskdef name="ide-jvmargs" classname="org.netbeans.xtest.IdeJvmArgs"/>
            <taskdef name="ideexec" classname="org.netbeans.xtest.IdeExecTask"/>
        </nbtaskdef>
        
        <nbpath nbhome="${netbeans.home}" xthome="${xtest.home}" xtexhome="${xtest.home}"/>

	<!-- XML, XSLT reporters -->
        <nbtaskdef classpath="${xtest.path};${xalan.path}">
            <taskdef name="test-configurator" classname="org.netbeans.xtest.MTestConfigurator"/>
            <taskdef name="test-compiler" classname="org.netbeans.xtest.MTestCompiler"/>            
            <taskdef name="test-executor" classname="org.netbeans.xtest.MTestExecutor"/>            
            <taskdef name="testruninfo" classname="org.netbeans.xtest.pe.TestRunInfoTask"/>
            <taskdef name="testbaginfo" classname="org.netbeans.xtest.pe.TestBagInfoTask"/>
            <taskdef name="regenerateXML" classname="org.netbeans.xtest.pe.RegenerateXMLTask"/>
            <taskdef name="transformXML" classname="org.netbeans.xtest.pe.TransformXMLTask"/>
            <taskdef name="printSummary" classname="org.netbeans.xtest.pe.PrintSummary"/>
            <taskdef name="getResultsDirs" classname="org.netbeans.xtest.pe.GetResultsDirsTask"/>
        </nbtaskdef>

        <!-- JUnit -->
        <nbtaskdef name="nbjunit" classname="org.netbeans.xtest.junit.JUnitTaskExt" 
                   classpath="${junit.path};${xtest.path};${xerces.path}"/>

        <!-- Needed for running code-mode tests with Clover (see build-clover.xml): -->
        <property name="clover.test.path" value=""/>
        <pathdef useid="test.basepath">
            <path>
                <pathelement path="${junit.path};${xtest.path};${xerces.path}"/>
                <pathelement location="${xtest.workdir}/sys/tests"/>
                <pathelement path="${clover.test.path}"/>
            </path>
        </pathdef>

        <nbpatternset useid="xtest.pattern">
            <patternset includes="${xtest.includes}" excludes="${xtest.excludes}">
                <!--
                <exclude name="**/*Suite.class"/>
                -->
                <exclude name="**/*$$*.class"/>
                <exclude name="**/data/**"/>
                <exclude name="**/hidden/**"/>
                <exclude name="**/*Hidden.*"/>
                <exclude name="**/*Hid.*"/>
            </patternset>
        </nbpatternset>
        
        <!-- There will be test classpath created from folowing two properties inside   -->
        <!-- test executor in folowing way:                                             -->
        <!-- ${xtest.classpath.root}/${xtest.testtype}/${tbag.classpath.work}           -->
        <!-- and then testset specific dir and then returned in property tbag.classpath -->
        <property name="tbag.classpath.root" location="${xtest.workdir}"/>
        <property name="tbag.classpath.work" value="sys/tests"/>
        
       	<property file="${xtest.userdata.propertyfile}"/>
    </target>
    
    <target name="prepare-xtest">
        <ant dir="${xtest.home}/lib" antfile="harness.xml" target="buildxtest"/>
    </target>
    
    <target name="extra-classpath" if="xtest.extra.jars">
        <jar-finder dirs="${xtest.extra.jars.path}" files="${xtest.extra.jars}" 
                   property="test.extra.classpath"/>
    </target>

    
    <!-- ======== -->
    <!-- Run test -->
    <!-- ======== -->
    
    <target name="config" depends="init, cleanworkdir">
        <property name="xtest.executors" value=""/>
        <property name="xtest.testbags" value=""/>
        <!-- This task reads config file cfg-${xtest.testtype}.xml and selects all -->
        <!-- testbags, which conforms to ${xtest.attribs} - is subset or equals -->
        <test-configurator testtype="${xtest.testtype}" 
                           testattributes="${xtest.attribs}"
                           testexecutors="${xtest.executors}"
                           testbags="${xtest.testbags}"/>
    </target>
    
    <target name="runtests" depends="config">
        <condition property="xtest.runmessage" value="attributes: ${xtest.attribs}">
           <equals arg1="${xtest.testbags}" arg2=""/>
        </condition>
        <property name="xtest.runmessage" value="testbags: ${xtest.testbags}"/>
        <echo message="Running ${xtest.module} tests, testtype: ${xtest.testtype}, ${xtest.runmessage}"/>

        <!-- prepare result dir and produce some informatino about this testrun -->
        <mkdir dir="${xtest.results}"/>
        <getResultsDirs testRunDirProperty="xtest.results.testrun.dir"/>
        <testruninfo outfile="${xtest.results.testrun.dir}/xmlresults/testrun.xml"/>

        <mkdir dir="${xtest.workdir}/user/sketch-pad"/>
        <mkdir dir="${xtest.workdir}/tmpdir"/>
        
        <test-executor paramClasspathProp="tbag.classpath"
                       paramPatternsetInProp="tbag.patternset.include"
                       paramPatternsetExProp="tbag.patternset.exclude"
                       paramTestConfigProp="tbag.testtype"
                       paramFormaterProp="tbag.formater"
                       paramNameProp="tbag.name"
                       paramExecutorProp="tbag.executor"/>
    </target>
    
    <target name="test">
        <!--
        <mkdir dir="${xtest.workdir}/${tbag.testtype}/work"/>
        <mkdir dir="${xtest.workdir}/${tbag.testtype}/formaters/${tbag.formater}/xml"/>
        <mkdir dir="${xtest.workdir}/${tbag.testtype}/formaters/${tbag.formater}/html"/>
        -->
        <!-- prepare workdir structure -->
        <mkdir dir="${xtest.workdir}/xmlresults"/>
        <mkdir dir="${xtest.workdir}/xmlresults/suites"/>
        <mkdir dir="${xtest.workdir}/sys/tests"/>
        <mkdir dir="${xtest.workdir}/sys/ide"/>
        <mkdir dir="${xtest.workdir}/user"/>

        <property name="test.propertyfile" location="${xtest.workdir}/sys/userdata.properties"/>
   	<write-property propertyPrefix="xtest.userdata" attribs="${xtest.attribs}" file="${test.propertyfile}"/>

        <!-- create testbag info for report -->
        <testbaginfo name="${tbag.name}" testType="${tbag.testtype}" testAttribs="${xtest.attribs}"
                      executor="${tbag.executor}" module="${xtest.module}"
                      outfile="${xtest.workdir}/xmlresults/testbag.xml"/>  
        
        <antcall target="prepare-tests"/>
        <antcall target="${xtest.exectype}_test_bootstrap"/>
    </target>
    
    <target name="prepare-tests" depends="test-unjared" unless="unjared">
        <unjar dest="${xtest.workdir}/sys/tests" 
               src="${xtest.build}/${xtest.file.location}/${xtest.file.name}"/>
    </target>
    
    <!-- Just test whether tests are already unzipped -->
    <target name="test-unjared">
        <available property="unjared" file="${xtest.workdir}/sys/tests/META-INF/MANIFEST.MF"/>
    </target>
    
    <!-- ============== -->
    <!-- Code test part -->
    <!-- ============== -->
    
    <target name="code_test_bootstrap" depends="init,code_test_init,junit_test"/>
    
    <target name="code_test_init" depends="extra-classpath">
        <property name="junit.fork" value="yes"/>
        <property name="test.extra.classpath" value=""/>
        <property name="codetest.classpath" value=""/>
        <pathdef useid="test.classpath">
            <path refid="test.basepath"/>
            <path path="${tbag.classpath}"/>
            <path path="${test.extra.classpath}"/>
            <path path="${codetest.classpath}"/>
        </pathdef>
        
    </target>
    
    <!-- ============= -->
    <!-- IDE test part -->
    <!-- ============= -->
    <target name="ide_test_bootstrap" depends="init,extra-classpath">
        <property name="test.extra.classpath" value=""/>
        <property name="xtest.extra.ide.mounts" value=""/>
        <!-- by default use XTestErrorManager to keep eye on errors notified via ErrorManager -->
        <property name="xtest.error.manager" value="true"/>
        <pathdef useid="test.classpath">
            <!-- this path is mounted to repo in IDE -->
            <!-- <path refid="test.basepath"/> -->
            <path path="${tbag.classpath}"/>
            <path path="${test.extra.classpath}"/>
            <path path="${xtest.extra.ide.mounts}"/>
        </pathdef>

        <!-- there should be some better userdir than this -->
        <property name="xtest.userdir" location="${xtest.workdir}/sys/ide"/>
        <property name="test.class" value="org.netbeans.xtest.AntRunner"/>
        <property name="test.classpath" refid="test.classpath"/>
        <property name="test.target" value="ide_test_helper"/>
        
        <property name="xtest.ide.commandline.suffix" value=""/>
        <property name="xtest.jvmargs" value=""/>
        <property name="junit.properties.file" value=""/>
        <property name="xtest.reuse.ide" value="false"/>
        <property name="xtest.ide.winsys" value="mdi"/>
        <property name="xtest.ide.exit" value="true"/>
        
        <condition property="xtest.reuse.ide.false">
           <equals arg1="${xtest.reuse.ide}" arg2="false"/>
        </condition>
        <antcall target="delete-userdir"/>
        
        <condition property="xtest.reuse.and.noexist">
           <not>
              <or>
                 <equals arg1="${xtest.reuse.ide}" arg2="false"/>
                 <available file="${xtest.userdir}/system/ide.log" property="ide.userdir.available"/>
              </or>
           </not>
        </condition>
        <antcall target="check-userdir"/>
        <antcall target="ide_test_bootstrap_cont"/>
    </target>
    
    <target name="ide_test_bootstrap_cont" unless="xtest.reuse.and.noexist">

        <ide-jvmargs jvmargs="${xtest.jvmargs}" property="xtest.ide.commandline.jvmargs"/>
            
        <!--
        <property name="args" value="-jdkhome ${jdkhome} -userdir &quot;${xtest.userdir}&quot; -nosplash -cp:p &quot;${xtest.ide.path}&quot; -J-Dtest.class=${test.class} -J-Dtest.classpath=&quot;${test.classpath}&quot; -J-Dtest.basedir=&quot;${basedir}&quot; -J-Dtest.ant.file=&quot;${ant.file}&quot; -J-Dtest.target=${test.target} -J-Dtest.reuse.ide=${xtest.reuse.ide} -J-Dxtest.home=&quot;${xtest.home}&quot; -J-Dxtest.includes=&quot;${xtest.includes}&quot; -J-Dxtest.excludes=&quot;${xtest.excludes}&quot; -J-Dtbag.classpath=&quot;${tbag.classpath}&quot; -J-Dtbag.patternset.include=${tbag.patternset.include} -J-Dtbag.patternset.exclude=${tbag.patternset.exclude} -J-Dtbag.testtype=${tbag.testtype} -J-Dtbag.formater=${tbag.formater} -J-Dtbag.name=&quot;${tbag.name}&quot; -J-Dtbag.executor=${tbag.executor} -J-Dxtest.module=&quot;${xtest.module}&quot; -J-Dxtest.attribs=&quot;${xtest.attribs}&quot; -J-Dxtest.distexec=true -J-Dtest.exit=${xtest.ide.exit} -J-Dtest.propertyfile=&quot;${test.propertyfile}&quot; -J-Dxtest.workdir=&quot;${xtest.workdir}&quot; -J-Dxtest.results=&quot;${xtest.results}&quot; -J-Dxtest.results.testrun.dir=&quot;${xtest.results.testrun.dir}&quot; -J-Dtest.output.redirect=true -J-Dnetbeans.full.hack=true -J-Djunit.properties.file=${junit.properties.file} -J-Dnetbeans.windows=${xtest.ide.winsys} -J-Dxtest.error.manager=${xtest.error.manager} ${xtest.ide.commandline.jvmargs} ${xtest.ide.commandline.suffix}"/>
        -->
        
        <condition property="xtest.ide.timeout" value="0">
 	   <equals arg1="${xtest.ide.exit}" arg2="false"/>
 	</condition>
        <property name="xtest.ide.timeout" value="${xtest.timeout}"/>
        

        <!--
        <property name="xtest.workdir.idejars" value="${netbeans.home}/lib/xtest"/>
        -->
        <property name="xtest.workdir.idejars" value="${xtest.workdir}/sys/idejars"/>
        <mkdir dir="${xtest.workdir.idejars}"/>
        
        
        <copy file="${xtest.home}/lib/xtest.jar" todir="${netbeans.home}/lib"/>
        <copy file="${xtest.home}/lib/xtest-ext.jar" todir="${xtest.workdir.idejars}"/>
        
        <copy file="${xtest.home}/lib/junit.jar" todir="${netbeans.home}/lib/ext"/>
        <copy file="${xtest.home}/lib/junit-ext.jar" todir="${netbeans.home}/lib/ext"/>
        

        <antcall target="copy-user-jars"/>
        
        <!-- now create a system classloader path to be supplied to ide -->
        <property name="xtest.netbeans.systemclassloader.patches" refid="xtest.netbeans.systemclassloader.path">
            <classpath id="xtest.netbeans.systemclassloader.path">
                <fileset dir="${xtest.workdir.idejars}">
                    <include name="*.jar"/>
                </fileset>
            </classpath>
        </property>
        
        <!-- ide classpath - ant and junit -->
        <property name="xtest.ide.path" refid="xtest.ide.path">
            <classpath id="xtest.ide.path">
                <!-- XXX this is bad, it assumes the Ant module is installed! -->
                <fileset dir="${netbeans.home}/modules/ext">
                    <include name="ant*.jar"/>
                </fileset>
                <fileset dir="${netbeans.home}/lib/ext">
                    <include name="junit*.jar"/>
                </fileset>
            </classpath>
        </property>        
        
        <!-- temporary only !!!! remove ASAP -->
        <!--
        <property name="xtest.ide.security" value="-J-Dnetbeans.security.nocheck=true"/>
        -->
        <property name="xtest.ide.security" value=""/>
        
        <property name="args" value="-jdkhome ${jdkhome} -userdir &quot;${xtest.userdir}&quot; -nosplash -cp:p &quot;${xtest.ide.path}&quot; -J-Dnetbeans.mainclass=org.netbeans.xtest.ide.Main -J-Dtest.class=${test.class} -J-Dtest.classpath=&quot;${test.classpath}&quot; -J-Dtest.basedir=&quot;${basedir}&quot; -J-Dtest.ant.file=&quot;${ant.file}&quot; -J-Dtest.target=${test.target} -J-Dtest.reuse.ide=${xtest.reuse.ide} -J-Dxtest.home=&quot;${xtest.home}&quot; -J-Dxtest.includes=&quot;${xtest.includes}&quot; -J-Dxtest.excludes=&quot;${xtest.excludes}&quot; -J-Dtbag.classpath=&quot;${tbag.classpath}&quot; -J-Dtbag.patternset.include=${tbag.patternset.include} -J-Dtbag.patternset.exclude=${tbag.patternset.exclude} -J-Dtbag.testtype=${tbag.testtype} -J-Dtbag.formater=${tbag.formater} -J-Dtbag.name=&quot;${tbag.name}&quot; -J-Dtbag.executor=${tbag.executor} -J-Dxtest.module=&quot;${xtest.module}&quot; -J-Dxtest.attribs=&quot;${xtest.attribs}&quot; -J-Dxtest.distexec=true -J-Dtest.exit=${xtest.ide.exit} -J-Dtest.propertyfile=&quot;${test.propertyfile}&quot; -J-Dxtest.workdir=&quot;${xtest.workdir}&quot; -J-Dxtest.results=&quot;${xtest.results}&quot; -J-Dxtest.results.testrun.dir=&quot;${xtest.results.testrun.dir}&quot; -J-Dtest.output.redirect=true -J-Dnetbeans.full.hack=true -J-Djunit.properties.file=${junit.properties.file} -J-Dnetbeans.windows=${xtest.ide.winsys} -J-Dxtest.error.manager=${xtest.error.manager} -J-Dxtest.timeout=${xtest.timeout} -J-Dnetbeans.systemclassloader.patches=${xtest.netbeans.systemclassloader.patches} ${xtest.ide.security} ${xtest.ide.commandline.jvmargs} ${xtest.ide.commandline.suffix}"/>
        <echo message="ARGUMENTS = ${args}"/>        
        
        <ideexec dir="${netbeans.home}/bin" executable="${netbeans.home}/bin/runide.exe" 
              os="Windows 95 Windows 98 Windows Me Windows NT Windows 2000 Windows XP"
              failonerror="no" timeout="${xtest.ide.timeout}" ideuserdir="${xtest.userdir}">
	    	  <arg line="${args}"/>
        </ideexec>
        
        <ideexec dir="${netbeans.home}/bin" executable="sh"  
              os="Linux SunOS Solaris"
              failonerror="no" timeout="${xtest.ide.timeout}" ideuserdir="${xtest.userdir}">
            <arg line="runide.sh ${args}"/>
        </ideexec>

        <delete file="${netbeans.home}/lib/xtest.jar"/>
        <delete file="${xtest.workdir.idejars}/xtest-ext.jar"/>
        <delete file="${netbeans.home}/lib/ext/junit.jar"/>
        <delete file="${netbeans.home}/lib/ext/junit-ext.jar"/>
        
                
        <antcall target="delete-user-jars"/>
        
        <!-- check whether IDE finished abnormally, in this case
             add failure information to the testbag -->
        <available file="${xtest.workdir}/ide.flag" property="testbag.failure"/>
        <antcall target="testbag-failure"/>
        
    </target>

    <target name="check-userdir" if="xtest.reuse.and.noexist">
        <testbaginfo unexpectedFailure="This testbag wants to reuse old userdir, but it doesn't exists. Testbag wasn't executed." outfile="${xtest.workdir}/xmlresults/testbag.xml"/> 
    </target>
    
    <target name="delete-userdir" if="xtest.reuse.ide.false">
        <delete dir="${xtest.userdir}"/>
    </target>
    
    <target name="copy-user-jars" depends="init,ide-extra-jars" if="xtest.extra.jars.ide">
         <for list="${ide.extra.classpath}" delimiters=";${path.separator}," property="xtest.ide.onejar">
           <antcall target="copy-jar"/>
         </for>
    </target>
    
    <target name="copy-jar">
        <!--
         <copy file="${xtest.ide.onejar}" todir="${netbeans.home}/lib"/>
         -->
         <copy file="${xtest.ide.onejar}" todir="${xtest.workdir.idejars}"/>
    </target>
    
    <target name="delete-user-jars" depends="init" if="xtest.extra.jars.ide">
         <for list="${xtest.extra.jars.ide}" delimiters=";${path.separator}," property="xtest.ide.onejar">
           <antcall target="delete-jar"/>
         </for>
    </target>
    
    <target name="delete-jar">
        <!--
         <delete file="${netbeans.home}/lib/${xtest.ide.onejar}"/>
         -->
         <delete file="${xtest.workdir.idejars}/${xtest.ide.onejar}"/>
    </target>

    <target name="ide-extra-jars" if="xtest.extra.jars.ide">
        <jar-finder dirs="${xtest.extra.jars.path}" files="${xtest.extra.jars.ide}" 
                   property="ide.extra.classpath"/>
    </target>

    <!-- This target is executed from running IDE -->
    <target name="ide_test_helper" depends="init,ide_test_init,junit_test"/>
    
    <target name="ide_test_init">
        <property name="junit.fork" value="no"/>
        <!-- !! always use empty path, JUnit task will use IDE filesystems instead !! -->
        <pathdef useid="test.classpath"/>
    </target>
    
    <!-- if testbag did not finish correctly, notice this state to the current testbag -->
    <target name="testbag-failure" if="testbag.failure">
        <testbaginfo unexpectedFailure="testbag did not finish correctly, some tests did not have to run" outfile="${xtest.workdir}/xmlresults/testbag.xml"/> 
    </target>
    
    
    
    <!-- ================= -->
    <!-- Main JUnit target -->
    <!-- ================= -->
    <target name="junit_test">
        <!-- create testbag info for report -->
        <!-- moved to target test
        <testbaginfo name="${tbag.name}" testType="${tbag.testtype}" testAttribs="${xtest.attribs}"
                      executor="${tbag.executor}" module="${xtest.module}"
                      outfile="${xtest.workdir}/xmlresults/testbag.xml"/>  
        -->
        <property name="xtest.jvmargs" value=""/>
        <property name="junit.properties.file" value=""/>
        
        <!-- run the tests -->
        <nbjunit fork="${junit.fork}" printsummary="yes" timeout="${xtest.timeout}" jvmargs="${xtest.jvmargs}">            
            <sysproperty key="work.dir" value="${xtest.workdir}/sys"/>
            <sysproperty key="xtest.workdir" value="${xtest.workdir}"/>
            <sysproperty key="system.dir" value="${xtest.workdir}/sys"/>
            <sysproperty key="xtest.tmpdir" value="${xtest.tmpdir}"/>
            <sysproperty key="xtest.sketchpad" value="${xtest.sketchpad}"/>
            <sysproperty key="nbjunit.workdir" value="${xtest.workdir}/user"/>
            <sysproperty key="junit.properties.file" value="${junit.properties.file}"/>
            <syspropertyfile file="${test.propertyfile}"/>

            <formatter classname="org.netbeans.xtest.pe.junit.JUnitResultsReporter" extension=".xml"/>
            
            <classpath refid="test.classpath"/>
            
            <batchtest todir="${xtest.workdir}/xmlresults/suites">
                <testset path="${tbag.classpath}">
                   <patternset refid="xtest.pattern"/>
                   <patternset includes="${tbag.patternset.include}"
                               excludes="${tbag.patternset.exclude}"/>
                </testset>
            </batchtest>
        </nbjunit>
        
        <!-- check whether JVM finished abnormally, in this case
            add failure information to the testbag -->
        <!--    
        <available file="${xtest.workdir}/nbjunit.flag" property="testbag.failure"/>
        <antcall target="testbag-failure"/>
        -->
    </target>
    
    <!-- ======================= -->
    <!-- Test results formatting -->
    <!-- ======================= -->
    <target name="test_report" depends="init">
    
        <!-- give me a new dir for just run testbag -->
        <getResultsDirs testRunDirProperty="xtest.results.testrun.dir" testBagDirProperty="xtest.results.testbag.dir"/>
       
        <property name="xtest.current.results" value="${xtest.results.testbag.dir}"/>
       
        <!-- move the results -->
        <antcall target="move-results"/>       
        
        <!-- a mew testbag was added, regenerate the XML tree -->
        <regenerateXML inputDir="${xtest.results}"/>
                      
        <!-- transform XML files of new testbag to HTML format -->
        <transformXML inputDir="${xtest.current.results}"
                      outputDir="${xtest.current.results}"/>
            
          
        <!-- because we have regenerated the XML tree, we need to\
            transform the new stuff to HTML -->
        <transformXML inputDir="${xtest.results}"
                      outputDir="${xtest.results}"/>                      
        
        <!-- print summary -->
        <printSummary resultsDir="${xtest.results}"/>
        
    </target>        
    <!--
    -->
    
    <target name="move-results">
        <!-- copy results from workdir to result dir --> 
        <copy toDir="${xtest.current.results}">
            <fileset dir="${xtest.workdir}" defaultexcludes="no">
                <include name="user/**"/>
                <include name="xmlresults/**"/>
                <include name="sys/userdata.properties"/>
            </fileset>
        </copy>
        
        <!-- do the ide userdir stuff  -->
        <available file="${xtest.workdir}/sys/ide/system/ide.log" property="ide.userdir.available"/>
        <antcall target="move-ide-userdir"/>
        
        <!--  now delete all the stuff -->
        <delete dir="${xtest.workdir}/sys/tests" />
        <delete includeEmptyDirs="true">
            <fileset dir="${xtest.workdir}/user">
                <exclude name="sketch-pad/**"/>
            </fileset>
        </delete>
        <delete dir="${xtest.workdir}/xmlresults"/>
    </target>
    
    <target name="move-ide-userdir" if="ide.userdir.available">
        <!-- copy ide.log -->
        <copy file="${xtest.workdir}/sys/ide/system/ide.log" todir="${xtest.current.results}/sys/ide"/>
        <!-- copy output dir -->
        <available file="${xtest.workdir}/sys/ide/output" type="dir" property="xtest.ide.output.exists"/>
        <antcall target="copy-output"/>
        <!-- copy ide screenshot image -->
        <available file="${xtest.workdir}/sys/ide/system/screenshots" type="dir" property="xtest.ide.screenshot.exists"/>
        <antcall target="copy-ide-screenshots"/>
        <!-- copy ide.zip -->
        <condition property="xtest.userdir.move">
           <equals arg1="${xtest.archive.ide.userdir}" arg2="true"/>
        </condition>
        <antcall target="copy-ide.zip"/>
    </target>
    
    <target name="copy-ide.zip" if="xtest.userdir.move">
        <!-- zip the ide userdir stuff -->
        <zip zipfile="${xtest.current.results}/sys/ide/ide.zip" basedir="${xtest.workdir}/sys/ide"/>
    </target>

    <target name="copy-output" if="xtest.ide.output.exists">
        <copy todir="${xtest.current.results}/sys/ide/output">
           <fileset dir="${xtest.workdir}/sys/ide/output"/>
        </copy>
    </target>
    
    <target name="copy-ide-screenshots" if="xtest.ide.screenshot.exists">
        <copy todir="${xtest.current.results}/sys/ide/screenshots">
            <fileset dir="${xtest.workdir}/sys/ide/system/screenshots"/>
        </copy>
    </target>
    
    
    <!-- ======== -->
    <!-- Building -->
    <!-- ======== -->
    
    <target name="compiler-launcher" depends="config,deleteworkdir" unless="xtest.distexec">
       <test-compiler paramClasspathProp="tbag.classpath"
                        paramPatternsetInProp="tbag.patternset.include"
                        paramPatternsetExProp="tbag.patternset.exclude"
                        paramTestConfigProp="tbag.testtype"
                        paramFormaterProp="tbag.formater"
                        paramNameProp="tbag.name"
                        paramExecutorProp="tbag.executor"/>    
    </target>
    
    <target name="compiletests" depends="init" unless="xtest.distexec">
       <for list="${compile.srcdir}" delimiters=";${path.separator}," property="compile.srcdir.parsed">
         <antcall target="compile-one-dir"/>
       </for>
    </target>
    
    <target name="compile-one-dir" depends="init,extra-classpath,ide-extra-jars">
        <property name="test.extra.classpath" value=""/>
        <property name="compiletest.classpath" value=""/>
        <property name="compile.excludes" value=""/>
        <javac srcdir="${compile.srcdir.parsed}" 
               deprecation="${build.compiler.deprecation}"
               debug="${build.compiler.debug}"
               excludes="${compile.excludes}">
            <classpath>
           	<pathelement path="${junit.path}"/>
    		<pathelement path="${xerces.path}"/>
    		<pathelement path="${test.extra.classpath}"/>
		<pathelement path="${compiletest.classpath}"/>
		<pathelement path="${ide.extra.classpath}"/>
            </classpath>
        </javac>
    </target>
    
    <!-- Creates lib/test.jar with all tests for this module,       -->
    <!-- maybe there should be more includes here, not just classes -->
    <target name="buildtests" depends="compiletests" unless="xtest.distexec">
        <antcall target="jartests"/>
    </target>
    
    <!-- Creates lib/test.jar with all tests for this module,       -->
    <!-- maybe there should be more includes here, not just classes -->
    <target name="jartests" unless="xtest.distexec">
        <mkdir dir="${xtest.build}/${xtest.file.location}"/>
        <jar basedir="." 
             jarfile="${xtest.build}/${xtest.file.location}/${xtest.file.name}"
             includesfile="${xtest.home}/standard-test-includes.txt"
             excludesfile="${xtest.home}/standard-test-excludes.txt">
        </jar>
    </target>
    
    <target name="cleantests">
        <delete>
            <fileset dir=".">
                <include name="**/src/**/*.class"/>
            </fileset>
        </delete>
        <delete dir="${xtest.file.location}"/>
    </target>
    
    <!-- Removes results from previous test execution of given testtype  -->
    <!-- xtest.testtype is defined either by default or by test executor -->    
    <target name="cleanworkdir" description="Deletes working directory">
        <available file="${xtest.workdir}" property="xtest.workdir.available"/>
        <antcall target="cleanworkdir2"/>
    </target>
   
    <target name="cleanworkdir2" if="xtest.workdir.available">
        <delete includeEmptyDirs="true">
           <fileset dir="${xtest.workdir}">
             <exclude name="tmpdir/**"/>
             <exclude name="user/sketch-pad/**"/>
           </fileset>
        </delete>
    </target>
        
    <target name="deleteworkdir" description="Deletes working directory">
        <delete includeEmptyDirs="true" dir="${xtest.workdir}"/>
    </target>
    
    <target name="cleanresults" description="Deletes results" depends="cleanworkdir">
        <delete dir="${xtest.results}"/>
    </target>
    
    <target name="realclean"
            description="Deletes classes, ${xtest.file.location}/${xtest.file.name} and *all* results."
            depends="cleantests,cleanresults">
    </target>
    
</project>
