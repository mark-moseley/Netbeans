<#assign licenseFirst = "/*">
<#assign licensePrefix = " * ">
<#assign licenseLast = " */">
<#include "../Licenses/license-${project.license}.txt">

<#if package?? && package != "">
package ${package};

</#if>
import java.util.List;
import org.netbeans.modules.vmd.api.model.ComponentDescriptor;
import org.netbeans.modules.vmd.api.model.Presenter;
import org.netbeans.modules.vmd.api.model.PropertyDescriptor;
import org.netbeans.modules.vmd.api.model.TypeDescriptor;
import org.netbeans.modules.vmd.api.model.TypeID;
import org.netbeans.modules.vmd.api.model.VersionDescriptor;
import org.netbeans.modules.vmd.midp.components.MidpVersionDescriptor;
<#if superDescriptorClassFQN?? && superDescriptorClassFQN != "">
import ${superDescriptorClassFQN};
</#if>

/**
 *
 * @author ${user}
 */
public class ${cdName} extends ComponentDescriptor {

  public static final TypeID TYPEID = new TypeID( TypeID.Kind.COMPONENT, 
          "${typeId}");

       
    /**
     * Returns a type descriptor of this component descriptor.
     * @return the type descriptor
     */
    @Override
    public TypeDescriptor getTypeDescriptor() {
        return new TypeDescriptor(${superDescriptorClass}.TYPEID, // This indicates that ${prefix} derives from component descriptor ${superDescriptorClass}.
                TYPEID,                          // TypeID of this component descriptor.
                ${canInstantiate},                            // Instantiate ability. Indicates if DesignComponent can be create based on this Component Descriptor.
                ${canBeSuper});                           // Derive ability. Indicates if this DesignComponent could be used as a super type.

    }

    /**
     * Returns a list of property descriptors that are newly declared in the component descriptor or override property descriptors from the super component descriptor.
     * @return the list of property descriptors
     */
    @Override
    public List<PropertyDescriptor> getDeclaredPropertyDescriptors() {
        return null;
    }

    /**
     * Returns a version descriptor of this component descriptor.
     * @return the version descriptor
     */
    @Override
    public VersionDescriptor getVersionDescriptor() {
        // For which version of MIDP this ComponentDescriptor is valid
        return ${midpVersion}; 
    }

    /**
     * Returns a list of new instances of presenters that are declared in the component descriptor or override presenters
     * from the super component descriptor.
     * @return the list of presenters
     */
    @Override
    protected List<? extends Presenter> createPresenters() {
        return null;
    }
}
