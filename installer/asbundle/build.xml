<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="NetBeans AS Bundle Installer" default="build" basedir=".">

  <property file="nbproject/private/private.properties"/>  
  <property file="build.properties" />

  <property name="storage.builder" location="../../java/storagebuilder/dist/storagebuilder.jar"/>
  <property name="preparse.files" location="../../java/storagebuilder/preparse-files.txt"/>
  <property name="nb.dir" location="../../nbbuild/netbeans"/>

  <!-- Specific to Mac OS X installer -->
  <property name="appname" value="NetBeans4.1dev"/>
  <property name="appversion" value="4.1dev"/>
  <property name="version" value="4.1dev"/>
                                                                                                                                 
  <property name="app.dir" value="${appname}.app"/>
  <property name="build.dir" value="build"/>
  <!-- End -->
  
  <target name="init" depends="set-buildnumber, set-installer.basename, copy-localized-data" unless="inited">
    <property name="inited" value="true" />
  </target>
  
  <target name="copy-localized-data">
      <copy todir="." failonerror="false">
          <fileset dir="../../translatedfiles/src/installer/asbundle"/>
      </copy>
  </target>
  
  <target name="set-ismp.cp" unless="ismp.cp-set">
    <path id="ismp.cp">        
        <pathelement path="${ismp.home}" />
        <pathelement path="${ismp.home}/i18n" />
        <fileset dir="${ismp.home}">
          <include name="lib/*.jar"/>
          <include name="ppk/*.jar"/>
          <include name="lib/ppk/*.jar"/>
          <exclude name="lib/conversion.jar"/>
        </fileset>        
        <fileset dir="../lib">
          <include name="dist/*.jar"/>
        </fileset>
    </path>
    <property name="ismp.cp-set" value="true" />
  </target>

  <target name="set-buildnumber" unless="buildnumber">
    <tstamp>
    	<format property="buildnumber" pattern="yyMMdd"/>
    </tstamp>
  </target>
  
  <target name="set-installer.basename" unless="installer.basename" depends="set-buildnumber">
    <property name="installer.basename" value="NetBeans-dev-${buildnumber}"/>
  </target>

  <target name="build-linux" depends="init, clean-build, compile, create-statefile">
    <copy file="scripts/as-unix-install.template" tofile="build/scripts/as-unix-install.template"/>
    <copy file="scripts/as-unix-uninstall.template" tofile="build/scripts/as-unix-uninstall.template"/>
    <copy file="../lib/scripts/run-storage-builder-unix.template"
          tofile="build/storagebuilder/run-storage-builder-unix.template"/>
    <copy file="${preparse.files}"
          tofile="build/storagebuilder/preparse-files.txt"/>
    <java classname="com.installshield.isje.ISJE" fork="true">
      <arg value="as-linux.xml" />
      <arg value="-build" />
      <arg value="-alias"/>
      <arg value="basedir=${basedir}"/>
      <arg value="-alias"/>
      <arg value="nb.dir=${nb.dir}"/>
      <arg value="-alias"/>
      <arg value="as.installer=${as.installer}"/>
      <arg value="-alias"/>
      <arg value="as.scripts.dir=build/scripts"/>
      <arg value="-alias"/>
      <arg value="storage.builder=${storage.builder}"/>
      <arg value="-alias"/>
      <arg value="sb.scripts.dir=build/storagebuilder"/>
      <classpath>
        <pathelement path="build/classes" />      
        <path refid="ismp.cp"/>
      </classpath>
    </java>
    <move file="build/disk1/setuplinux.bin" tofile="dist/${installer.basename}-linux.bin"/>
  </target>

  <target name="build-solaris-sparc" depends="init, clean-build, compile, create-statefile">
    <copy file="scripts/as-unix-install.template" tofile="build/scripts/as-unix-install.template"/>
    <copy file="scripts/as-unix-uninstall.template" tofile="build/scripts/as-unix-uninstall.template"/>
    <copy file="../lib/scripts/run-storage-builder-unix.template"
          tofile="build/storagebuilder/run-storage-builder-unix.template"/>
    <copy file="${preparse.files}"
          tofile="build/storagebuilder/preparse-files.txt"/>
    <java classname="com.installshield.isje.ISJE" fork="true">
      <arg value="as-solaris-sparc.xml" />
      <arg value="-build" />
      <arg value="-alias"/>
      <arg value="basedir=${basedir}"/>
      <arg value="-alias"/>
      <arg value="nb.dir=${nb.dir}"/>
      <arg value="-alias"/>
      <arg value="as.installer=${as.installer}"/>
      <arg value="-alias"/>
      <arg value="as.scripts.dir=build/scripts"/>
      <arg value="-alias"/>
      <arg value="storage.builder=${storage.builder}"/>
      <arg value="-alias"/>
      <arg value="sb.scripts.dir=build/storagebuilder"/>
      <classpath>
        <pathelement path="build/classes" />
        <path refid="ismp.cp"/>
      </classpath>
    </java>
    <move file="build/disk1/setupSolarisSparc.bin" tofile="dist/${installer.basename}-solsparc.bin"/>
  </target>

  <target name="build-solaris-x86" depends="init, clean-build, compile, create-statefile">
    <copy file="scripts/as-unix-install.template" tofile="build/scripts/as-unix-install.template"/>
    <copy file="scripts/as-unix-uninstall.template" tofile="build/scripts/as-unix-uninstall.template"/>
    <copy file="../lib/scripts/run-storage-builder-unix.template"
          tofile="build/storagebuilder/run-storage-builder-unix.template"/>
    <copy file="${preparse.files}"
          tofile="build/storagebuilder/preparse-files.txt"/>
    <java classname="com.installshield.isje.ISJE" fork="true">
      <arg value="as-solaris-x86.xml" />
      <arg value="-build" />
      <arg value="-alias"/>
      <arg value="basedir=${basedir}"/>
      <arg value="-alias"/>
      <arg value="nb.dir=${nb.dir}"/>
      <arg value="-alias"/>
      <arg value="as.installer=${as.installer}"/>
      <arg value="-alias"/>
      <arg value="as.scripts.dir=build/scripts"/>
      <arg value="-alias"/>
      <arg value="storage.builder=${storage.builder}"/>
      <arg value="-alias"/>
      <arg value="sb.scripts.dir=build/storagebuilder"/>
      <classpath>
        <pathelement path="build/classes" />
        <path refid="ismp.cp"/>
      </classpath>
    </java>
    <move file="build/disk1/setupSolarisX86.bin" tofile="dist/${installer.basename}-solx86.bin"/>
  </target>

  <target name="build-windows" depends="init, clean-build, compile, create-statefile">
    <mkdir dir="build/scripts/as_setup"/>
    <copy file="scripts/as-win-install.template" tofile="build/scripts/as_setup/as-win-install.template"/>
    <copy file="scripts/as-win-uninstall.template" tofile="build/scripts/as-win-uninstall.template"/>
    <copy file="../lib/scripts/run-storage-builder-windows.template"
          tofile="build/storagebuilder/run-storage-builder-windows.template"/>
    <copy file="${preparse.files}"
          tofile="build/storagebuilder/preparse-files.txt"/>
    <move file="build/scripts/statefile" todir="build/scripts/as_setup"/>
    <exec os="Linux SunOS" executable="unzip">
      <arg line="${as.installer} -d build/scripts/as_setup"/>
    </exec>
    <!-- Ant 'unzip' task does not work from unknown reason on AS Installer exe file so we use 'exec' task. -->
    <!-- <unzip src="${as.installer}" dest="build/scripts/as_setup"/> -->
    <java classname="com.installshield.isje.ISJE" fork="true">
      <arg value="as-windows.xml" />
      <arg value="-build" />
      <arg value="-alias"/>
      <arg value="basedir=${basedir}"/>
      <arg value="-alias"/>
      <arg value="nb.dir=${nb.dir}"/>
      <arg value="-alias"/>
      <arg value="as.scripts.dir=build/scripts"/>
      <arg value="-alias"/>
      <arg value="storage.builder=${storage.builder}"/>
      <arg value="-alias"/>
      <arg value="sb.scripts.dir=build/storagebuilder"/>
      <classpath>
        <pathelement path="build/classes" />
        <path refid="ismp.cp"/>
      </classpath>
    </java>
    <move file="build/disk1/setupwin32.exe" tofile="dist/${installer.basename}-win.exe"/>
  </target>

  <target name="build-macosx" depends="init, clean-build, compile, create-statefile, create-app">
    <mkdir dir="build/scripts/as_setup"/>
    <copy file="scripts/as-macosx-install.template" tofile="build/scripts/as_setup/as-macosx-install.template"/>
    <copy file="scripts/as-macosx-uninstall.template" tofile="build/scripts/as-macosx-uninstall.template"/>
    <copy file="../lib/scripts/run-storage-builder-unix.template"
          tofile="build/storagebuilder/run-storage-builder-unix.template"/>
    <copy file="${preparse.files}"
          tofile="build/storagebuilder/preparse-files.txt"/>
    <move file="build/scripts/statefile" todir="build/scripts/as_setup"/>
    <exec os="Linux SunOS" executable="unzip">
      <arg line="${as.installer} -d build/scripts/as_setup"/>
    </exec>
    <!-- Ant 'unzip' task does not work from unknown reason on AS Installer exe file so we use 'exec' task. -->
    <!-- <unzip src="${as.installer}" dest="build/scripts/as_setup"/> -->
    <java classname="com.installshield.isje.ISJE" fork="true">
      <arg value="as-macosx.xml" />
      <arg value="-build" />
      <arg value="-alias"/>
      <arg value="basedir=${basedir}"/>
      <arg value="-alias"/>
      <arg value="nb.dir=${build.dir}/${app.dir}"/>
      <arg value="-alias"/>
      <arg value="as.scripts.dir=build/scripts"/>
      <arg value="-alias"/>
      <arg value="storage.builder=${storage.builder}"/>
      <arg value="-alias"/>
      <arg value="sb.scripts.dir=build/storagebuilder"/>
      <classpath>
        <pathelement path="build/classes" />
        <path refid="ismp.cp"/>
      </classpath>
    </java>
    <!--<move file="build/disk1/setupMac.command" tofile="dist/${installer.basename}-macosx.command"/>-->
    <move file="build/disk1/setup.jar" tofile="dist/${installer.basename}-macosx.jar"/>
  </target>
 
  <target name="compile" depends="init, build-library" description="compile custom beans and panels">
    <mkdir dir="build/classes"/>
    
    <javac destdir="build/classes" srcdir="src" source="1.4" target="1.4" debug="true" deprecation="true">
      <classpath>
        <path refid="ismp.cp"/>
      </classpath>
    </javac>
    <copy todir="build/classes">
        <fileset dir="src">
            <include name="**/*.properties"/>
        </fileset>
    </copy>
  </target>

  <!-- Build library -->
  <target name="build-library" description="compile shared library">
    <ant antfile="../lib/build.xml" target="jar" inheritAll="false"/>
  </target>

  <!-- Clean library -->
  <target name="clean-library" description="clean shared library">
    <ant antfile="../lib/build.xml" target="clean" inheritAll="false"/>
  </target>

  <target name="run" depends="init" description="run the installer">
    <exec os="Windows NT Windows 95 Windows 98 Windows 2000 Windows XP" executable="${basedir}/dist/${installer.basename}-win.exe" failonerror="yes"/>
    <exec os="Linux"  executable="${basedir}/dist/${installer.basename}-linux.bin" failonerror="yes"/>
  </target>
    
  <target name="test" depends="init, compile" description="run the installer in debug mode">
    <java classname="run" fork="true">
      <sysproperty key="is.debug" value="true" />
      <classpath>
        <pathelement path="build/classes" />
        <pathelement path="dist/${installer.basename}.jar"/>
      </classpath>
    </java>
  </target>
  
  <!-- Delete build dir -->
  <target name="clean-build" depends="init" description="Delete build directory.">
    <delete dir="build"/>
  </target>

  <target name="clean" depends="init, clean-build, clean-library" description="Clean all build products and temp/backup files.">
    <delete>
      <fileset dir=".">
        <include name="**/*~"/>
      </fileset>
    </delete>
    <delete dir="dist"/>
  </target>
  
  <target name="ismp" depends="init, compile" description="launch ISMP IDE">
    <exec os="Linux" command="sh -c &quot;${ismp.home}/ismp &amp;&quot;" />
  </target>

  <target name="create-statefile" description="Create statefile for AS installer">
    <mkdir dir="build/scripts"/>
    <exec os="Linux SunOS" executable="scripts/make_statefile.sh" failonerror="true">
      <arg line="-statefile build/scripts/statefile -asinstaller ${as.installer} -password adminadmin -storeauth"/>
    </exec>
    <!-- Debug output statefile to console -->
    <loadfile property="file.content" srcFile="build/scripts/statefile" failonerror="false"/>
    <echo message="Content of generated statefile:"/>
    <echo message="${file.content}"/>
    <!-- End of debug -->
  </target>

  <!-- Specific to Mac OS X -->
  <target name="create-app" description="Organize NetBeans into a standard mac-os NetBeans.app application layout">
    <echo>
Creating NetBeans.app bundle using ${nb.dir} as master
================================================================
    </echo>
                                                                                                                                 
    <delete dir="${build.dir}/${app.dir}"/>
                                                                                                                                 
    <mkdir dir="${build.dir}/${app.dir}/Contents"/>
    <mkdir dir="${build.dir}/${app.dir}/Contents/MacOS"/>
    <mkdir dir="${build.dir}/${app.dir}/Contents/Resources"/>
                                                                                                                                 
    <echo message="Copying netbeans home dir to ${build.dir}/${app.dir}/Contents/Resources/NetBeans"/>
    <exec executable="sh" failonerror="yes">
      <arg value="-c"/>
      <arg value="cp -r ${nb.dir} '${build.dir}/${app.dir}/Contents/Resources/NetBeans'"/>
    </exec>
                                                                                                                                 
    <echo message="Copying the icon into the correct place" />
    <copy file="${build.dir}/${app.dir}/Contents/Resources/NetBeans/nb4.1/netbeans.icns"
          todir="${build.dir}/${app.dir}/Contents/Resources"/>
                                                                                                                                 
    <echo message="Generating Info.plist" />
    <copy file="../mac/Info.plist" filtering="true" tofile="${build.dir}/${app.dir}/Contents/Info.plist">
      <filterset>
        <filter token="APPNAME" value="${appname}"/>
        <filter token="APPVERSION" value="${appversion}"/>
        <filter token="VERSION" value="${version}"/>
        <filter token="EXENAME" value="netbeans"/>
        <filter token="ICONFILENAME" value="netbeans.icns"/>
      </filterset>
    </copy>

    <!-- Link must be created by installer during installation
    <echo message="Creating launch script symlink ${build.dir}/${app.dir}/Contents/MacOS/netbeans"/>
    <exec executable="sh" failonerror="yes">
      <arg value="-c"/>
      <arg value="ln -s ../Resources/NetBeans/bin/netbeans '${build.dir}/${app.dir}/Contents/MacOS/netbeans'"/>
    </exec>
    -->
  </target>
  <!-- End -->

</project>
