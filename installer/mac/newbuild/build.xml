<?xml version="1.0" encoding="UTF-8"?>

<!--
The contents of this file are subject to the terms of the Common Development
and Distribution License (the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at http://www.netbeans.org/cddl.html
or http://www.netbeans.org/cddl.txt.

When distributing Covered Code, include this CDDL Header Notice in each file
and include the License file at http://www.netbeans.org/cddl.txt.
If applicable, add the following below the CDDL Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="Mac Installer" basedir="." default="build-all-dmg">
    
    <import file="${basedir}/build.pro"/>
    <property file="${basedir}/Bundle.properties"/>     
            
    <target name="build-glassfish-pkg" >
        <echo message="Building ${glassfish-title} into ${basedir}/glassfish"/>
        <ant dir="glassfish"/>      
    </target>
    
    <target name="build-tomcat-pkg">
        <echo message="Building ${tomcat-title} into ${basedir}/tomcat"/>
        <ant dir="tomcat" target="build-pkg"/>              
    </target>
        
    <target name="build-openesb-pkg">
        <echo message="Building ${openesb-title} into ${basedir}/openesb"/>
        <ant dir="openesb" target="build-pkg"/>                     
    </target>
    
    <target name="clean">
        <delete dir="${basedir}/build"/>
        <delete dir="${basedir}/dist"/>             
        <delete dir="${basedir}/netBeans/soa/build"/>
        <delete dir="${basedir}/netBeans/ruby/build"/>
        <delete dir="${basedir}/netBeans/cpp/build"/>
        <delete dir="${basedir}/netBeans/javase/build"/>
        <delete dir="${basedir}/netBeans/javaee/build"/>
        <delete dir="${basedir}/netBeans/baseide/build"/>    
        <delete dir="${basedir}/netBeans/php/build"/> 
        <delete dir="${basedir}/tools/classes"/>           
    </target>
    
    <target name="init">    
        <mkdir dir="${basedir}/tools/classes"/> 
        <javac 
            srcdir="${basedir}/tools/src" 
            destdir="${basedir}/tools/classes"          
            debug="true"/>  
        <taskdef 
           name="for-each" 
           classname="org.netbeans.installer.mac.ant.ForEach" 
           classpath="${basedir}/tools/classes/"/>           
    </target>        

    <target name="unzip-nb" description="Unzip clusters to modules" >                                                  
        <mkdir dir="build"/> 
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="cnd"/>
            <property name="module.name" value="cpp"/>          
        </ant>         
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="apisupport"/>
            <property name="module.name" value="javase"/>          
        </ant> 
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="profiler"/>
            <property name="module.name" value="javase"/>          
        </ant> 
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="java"/>
            <property name="module.name" value="javase"/>          
        </ant>         
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="harness"/>
            <property name="module.name" value="javase"/>          
        </ant>        
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="soa"/>
            <property name="module.name" value="soa"/>          
        </ant>          
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="ruby"/>
            <property name="module.name" value="ruby"/>          
        </ant>
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="php"/>
            <property name="module.name" value="php"/>          
        </ant>            
        
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="enterprise"/>
            <property name="module.name" value="javaee"/>          
        </ant>
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="identity"/>
            <property name="module.name" value="javaee"/>          
        </ant>
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="xml"/>
            <property name="module.name" value="javaee"/>          
        </ant>
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="visualweb"/>
            <property name="module.name" value="javaee"/>          
        </ant>        
        
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="ide"/>
            <property name="module.name" value="baseide"/>          
        </ant>  
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="nb6.0-etc"/>
            <property name="module.name" value="baseide"/>          
        </ant>
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="platform"/>
            <property name="module.name" value="baseide"/>          
        </ant>  
        <ant target="unzip-cluster">            
            <property name="cluster.name" value="gsf"/>
            <property name="module.name" value="baseide"/>          
        </ant>    
    </target>
    
    <target name="unzip-cluster">
        <mkdir dir="${basedir}/netBeans/${module.name}/build/netbeans"/>
        <exec executable="sh" failonerror="yes">
            <arg value="-c"/>
            <arg value="unzip -d ${basedir}/netBeans/${module.name}/build/netbeans ${common.name}-${cluster.name}${ml_postfix}.zip"/>
        </exec>      
    </target>
    
    <target name="size-pack-module" depends="instrument-module" description="Count up size of the module, pack200">           
        <exec executable="sh" failonerror="yes" outputproperty="size">
            <arg value="-c"/>
            <arg value="cd ${basedir}/netBeans/${module.name}; du -sk build | sed 's/[\t]*build//'"/>
        </exec>        
        <echo message="sizeof.${module.name}=${size}${line.separator}" file="${basedir}/build/sizes.pro" append="true"/>                    
        <exec executable="sh" failonerror="yes">
            <arg value="-c"/>
            <arg value="sh ${basedir}/pack200.sh ${basedir}/netBeans/${module.name}/build"/>
        </exec>           
    </target>

    <target name="init-instrumentation">
	<condition property="do.instrumentation">
	    <and>
	        <isset property="instrument.jars"/>
	        <equals arg1="${instrument.jars}" arg2="true"/> 
	    </and>
        </condition>
    </target>

    <target name="add-instrumentation-option" if="do.instrumentation">
        <echo message="Adding instrumentation option to etc/netbeans.conf"/>
	<property name="baseide.dir" value="${basedir}/netBeans/baseide/build/netbeans"/>
	<mkdir dir="${baseide.dir}/emma-lib"/>
        <copy file="${emma.jar.file}" todir="${baseide.dir}/emma-lib"/>
        <chmod dir="${baseide.dir}/emma-lib" perm="a+w"/>

        <replace 
              file="${baseide.dir}/etc/netbeans.conf" 
              token="netbeans_default_options=&quot;"
              value="netbeans_default_options=&quot;--cp:p &quot;\&quot;&quot;${NETBEANS_HOME}/emma-lib/emma.jar&quot;\&quot;&quot; -J-Demma.coverage.file=&quot;\&quot;&quot;${NETBEANS_HOME}/emma-lib/netbeans_coverage.ec&quot;\&quot;&quot; -J-Dnetbeans.security.nocheck=true "/>
    </target>

    <target name="instrument-module" if="do.instrumentation">
	<echo message="Instrumenting module ${module.name}..."/>
	<exec executable="${bash.executable}" failonerror="true" dir="${basedir}/netBeans/${module.name}/build/netbeans">
                <arg value="${emma.sh.file}"/>
                <arg value="."/>
                <arg value="${emma.txt.file}"/>
                <arg value="${emma.jar.file}"/>
                <arg value="$[emma.out.file}"/>
        </exec>
    </target>    
    
    <target name="build-pkg" depends="unzip-nb,init-instrumentation,add-instrumentation-option" description="Builds NB and packs packages" >                  
        <ant target="size-pack-module">
            <property name="module.name" value="baseide"/>            
        </ant>            
        <ant dir="${basedir}/netBeans/baseide"/>          
        <ant target="build-modules"/>       
    </target>
    
    <target name="build-modules">
        <ant target="build-module">
            <property name="module.name" value="javase"/>
            <property name="module.title" value="${javase-title}"/>            
        </ant>
        
        <ant target="build-module">
            <property name="module.name" value="javaee"/>
            <property name="module.title" value="${javaee-title}"/>            
        </ant>
        
        <ant target="build-module">
            <property name="module.name" value="cpp"/>
            <property name="module.title" value="${cpp-title}"/>            
        </ant>
        
        <ant target="build-module">
            <property name="module.name" value="ruby"/>
            <property name="module.title" value="${ruby-title}"/>            
        </ant>
        
        <ant target="build-module">
            <property name="module.name" value="soa"/>
            <property name="module.title" value="${soa-title}"/>          
        </ant>      
        
        <ant target="build-module">
            <property name="module.name" value="php"/>
            <property name="module.title" value="${php-title}"/>          
        </ant>          
        
    </target>
    
    <target name="build-module">
        <copy file="commonfiles/Info.plist" filtering="true" tofile="netBeans/${module.name}/build/Info.plist">
            <filterset>
                <filter token="INSTALLDIR" value="${app.name}/Contents/Resources/NetBeans"/>
                <filter token="BUNDLE" value="netbeans.ide.${module.name}"/>
            </filterset>
        </copy>
        
        <ant target="size-pack-module"/>
        
        <copy file="commonfiles/Description.plist" filtering="true" overwrite="true" tofile="${basedir}/netBeans/${module.name}/pkg/scripts/Description.plist">
            <filterset>
                <filter token="TITLE" value="${module.title}"/>
            </filterset>
        </copy>        
        
        <echo message="Building ${module.name} into ${basedir}/build/${module.name}.pkg"/>
        <exec executable="sh" failonerror="yes">
            <arg value="-c"/>
            <arg value=" /Developer/Tools/packagemaker -build -v -p ${basedir}/build/${module.name}.pkg -f ${basedir}/netBeans/${module.name}/build/netbeans -i ${basedir}/netBeans/${module.name}/build/Info.plist -r ${basedir}/netBeans/${module.name}/pkg/scripts -d ${basedir}/netBeans/${module.name}/pkg/scripts/Description.plist"/>
        </exec>                                         
    </target>          
    
    <target name="build-all-dmg" depends="clean,init,build-pkg,build-glassfish-pkg,build-tomcat-pkg,build-openesb-pkg">                                                    
        <property file="${basedir}/build/sizes.pro"/>  

        <mkdir dir="dist"/>  
        <ant target="build-dmg" > 
           <property name="bundle.type" value=""/>           
           <property name="packages" value="./build/*pkg"/>          
        </ant>   
        <ant target="build-dmg"> 
           <property name="bundle.type" value="-javase"/>                
           <property name="packages" value="./build/baseide.pkg ./build/javase.pkg"/>          
        </ant> 
        <ant target="build-dmg"> 
           <property name="bundle.type" value="-javaee"/>           
           <property name="packages" value="./build/baseide.pkg ./build/javase.pkg  ./build/javaee.pkg ./build/glassfish.pkg ./build/tomcat.pkg"/>          
        </ant> 
        <ant target="build-dmg"> 
           <property name="bundle.type" value="-cpp"/>           
           <property name="packages" value="./build/baseide.pkg ./build/cpp.pkg"/>          
        </ant> 
        <ant target="build-dmg"> 
           <property name="bundle.type" value="-ruby"/>           
           <property name="packages" value="./build/baseide.pkg ./build/ruby.pkg"/>          
        </ant>
        <ant target="build-dmg"> 
           <property name="bundle.type" value="-php"/>         
           <property name="packages" value="./build/baseide.pkg ./build/php.pkg"/>          
        </ant>       
        <delete file="${basedir}/build/sizes.pro"/>
    </target>     
            
    <target name="prepare-lproj-dirs">  
        <mkdir dir="${basedir}/dmg/Resources_full"/>
        <property name="resources.full.dir" value="${basedir}/dmg/Resources_full"/> 
        <copy file="${basedir}/Bundle.properties" todir="${resources.full.dir}"/>
        <copy  todir="${resources.full.dir}">
            <fileset dir="${basedir}/dmg/Resources/" includes="*.html"/>
        </copy>
        <ant target="copy-translated-files"/>
        <condition property="nb.locales.nonzero.length">
            <length string="${nb.locales}" when="greater" length="0"/>
        </condition>   
        <condition property="locales" value=",${nb.locales}" else="">
            <and>
                <istrue value="${mlbuild}"/>
                <istrue value="${nb.locales.nonzero.length}"/>
            </and>   
        </condition>                   
        <for-each list="${locales}" separator="," property="locale">
            <ant target="build-lproj-dir"/>                           
        </for-each>    
        <delete dir="${resources.full.dir}"/>
    </target> 
  
    <target name="copy-translated-files" if="mlbuild">    
        <copy todir="${resources.full.dir}">   
            <fileset dir="${basedir}/../translatedfiles/"/>
        </copy>
    </target>    
       
    <target name="init-locale-propeties">
        <echo message="Init locale properties for locale: ${locale}"/>
        <!-- set the name of the locale suffix-->                                   
        <condition property="locale.suffix" value="" else="_${locale}">
            <equals arg1="${locale}" arg2=""/>
        </condition>
        <condition property="locale.name" value="english" else="${locale}">
            <equals arg1="${locale}" arg2=""/>
        </condition>                                                            
        <!-- find out name of lproj dir from the map file-->
        <exec executable="sh" failonerror="yes" outputproperty="locale.dir">
            <arg value="-c"/>
            <arg value="cat ${basedir}/dmg/lprojdirnames.map  | sed '/'${locale.name}'=/!d;s/'${locale.name}'=//'"/>
        </exec>                     
    </target>  

    <target name="build-lproj-dir" depends="init-locale-propeties">
        <echo message="Building ${locale.dir}.lproj dir..."/>        
        <!-- create lproj dir -->
        <mkdir dir="${mpkgfile}/Contents/Resources/${locale.dir}.lproj"/>
        <!-- copy Welcome.html and Localizable.strings -->                 
        <copy file="${resources.full.dir}/Welcome${bundle.type}${locale.suffix}.html"
              tofile="${mpkgfile}/Contents/Resources/${locale.dir}.lproj/Welcome.html"/>               
        <exec executable="sh" failonerror="yes" outputproperty="size">
            <arg value="-c"/>
            <arg value="cat ${resources.full.dir}/Bundle${locale.suffix}.properties |
                sed 's/#.*$//;s/^/&quot;/;s/$/&quot;;/;s/=/&quot; = &quot;/;s/^&quot;&quot;;//' 
                > ${resources.full.dir}/Localizable.strings"/>
        </exec>                                           
                            
        <move file="${resources.full.dir}/Localizable.strings"
              tofile="${mpkgfile}/Contents/Resources/${locale.dir}.lproj/Localizable.strings">
            <filterchain>                       
                <replacetokens begintoken="$" endtoken="}">
                    <token key="{buildnumber" value="${buildnumber}"/>  
                    <token key="{tomcat.version" value="${tomcat.version}"/>                        
                </replacetokens>
            </filterchain>
        </move>                                                    
    </target>     
            
    <target name="build-dmg">     
        <echo message="Building dmg for ${dmg.prefix.name}${bundle.type}..."/>             
        <delete dir="dist_dmg"/>        
        <property name="mpkgfile" value="dist_dmg/${appname}.mpkg"/>               
        <copy file="${basedir}/dmg/Resources/bgimage.tif" 
              tofile="${mpkgfile}/Contents/Resources/background.tif"/>  
        <copy file="${basedir}/dmg/Resources/license.txt" 
              tofile="${mpkgfile}/Contents/Resources/License.txt" />                         
                         
        <ant target="prepare-lproj-dirs"/>                                             

        <mkdir dir="${mpkgfile}/Contents/Packages"/>        
        <copy file="dmg/distribution${bundle.type}.dist" tofile="${mpkgfile}/Contents/distribution.dist">                                    
            <filterset>                      
                <filter token="SIZE_CPP" value="${sizeof.cpp}"/>                
                <filter token="SIZE_JAVASE" value="${sizeof.javase}"/> 
                <filter token="SIZE_JAVAEE" value="${sizeof.javaee}"/>
                <filter token="SIZE_RUBY" value="${sizeof.ruby}"/>
                <filter token="SIZE_SOA" value="${sizeof.soa}"/>
                <filter token="SIZE_GLASSFISH" value="${sizeof.glassfish}"/>
                <filter token="SIZE_TOMCAT" value="${sizeof.tomcat}"/>                
                <filter token="SIZE_OPENESB" value="${sizeof.openesb}"/>   
                <filter token="SIZE_BASEIDE" value="${sizeof.baseide}"/>                
                <filter token="SIZE_PHP" value="${sizeof.php}"/>                 
            </filterset>
        </copy>            
        
        <exec executable="sh" failonerror="yes">
            <arg value="-c"/>
            <arg value="cp -RPf ${packages} ./dist_dmg/'${appname}'.mpkg/Contents/Packages"/>
        </exec>                      
                  
        <condition property="ml.suffix" value="-ml" else="">
            <equals arg1="${mlbuild}" arg2="true"/>
        </condition>  
        
        <exec executable="sh" failonerror="yes">
          <arg value="-c"/>
          <arg value="sh dmg/createdmg.sh '${dmg.prefix.name}${bundle.type}'-macosx'${ml.suffix}'.dmg '${appname}'"/>
        </exec>  
        <delete dir="dist_dmg"/>
    </target>             
</project>          