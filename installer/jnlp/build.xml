<?xml version="1.0" encoding="UTF-8"?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Nokia. Portions Copyright 2003 Nokia.
All Rights Reserved.
-->

<project basedir="." default="netbeans" name="jnlpinstaller">

    <property name="nb_all" location="../.."/>
    <import file="${nb_all}/nbbuild/default.xml" />
    
    <property name="jnlp-api.file.location" value="../external/jnlp.jar"/>
    <property name="jnlp-servlet.file.location" value="../external/jnlp-servlet.jar"/>

    
    <property name="jnlp.signjar.alias" value="jnlp" />
    <property name="jnlp.signjar.keystore" location="default.keystore" />
    <property name="jnlp.signjar.password" value="netbeans" />
    
    <target name="compile">
        <ant dir="../external"/>
        <javac debug="${build.compiler.debug}" deprecation="${build.compiler.deprecation}" destdir="src" srcdir="src">
            <classpath refid="cp"/>
        </javac>
    </target>

    <!-- The main target -->
    <target depends="jnlp-expand1, create-war" name="netbeans">
    </target>

    <!-- This target fills in the content of file nb-launch.jnlp.
         Scans all the available jar files and adds entries to the .jnlp file.
    -->
    <target depends="copy-to-release, create-jnlp-jars" name="create-config">
        <!-- This target creates the end of nb-launch.jnlp file -->
        <path id="jarfiles">
            <fileset dir="release">
                <include name="*.jar"/>
            </fileset>
        </path>
        <property location="${nb_all}/installer/jnlp/release/" name="dirname"/>
        <!-- save directory name for replacing back -->
        <replace file="release/nb-launch.jnlp" token="${dirname}" value="D#I#R#_#N#A#M#E"/>
        <pathconvert dirsep="${file.separator}" pathsep="" property="jar-files-list" refid="jarfiles"/>
        <echo append="true" file="release/nb-launch.jnlp" message="@@@${jar-files-list}%%%"/>
        <echo message="Replacing ${dirname}"/>
        <replace file="release/nb-launch.jnlp" token="${dirname}${file.separator}" value="@@@###"/>
        <replace file="release/nb-launch.jnlp" token="@@@@@@" value=""/>
        <replace file="release/nb-launch.jnlp" token="@@@">
            <replacevalue><![CDATA["/>
]]></replacevalue>
        </replace>
        <replace file="release/nb-launch.jnlp" token="%%%">
            <replacevalue><![CDATA["/>
]]></replacevalue>
        </replace>
        <replace file="release/nb-launch.jnlp" token="###">
            <replacevalue><![CDATA[        <jar href="]]></replacevalue>
        </replace>
        <echo append="true" file="release/nb-launch.jnlp" message="${jnlp.extra.properties}"/>
        <echo append="true" file="release/nb-launch.jnlp">
<![CDATA[        
    </resources>
    <application-desc main-class="org.netbeans.jnlp.Main"/>
</jnlp>
]]></echo>
        <!-- replace back accidentally replaced name of the directory -->
        <replace file="release/nb-launch.jnlp" token="D#I#R#_#N#A#M#E" value="${dirname}${file.separator}"/>
    </target>
    
    <target depends="jars" name="copy-to-release">
        <mkdir dir="release"/>
        <delete file="release/nb-launch.jnlp"/>
        <copy flatten="true" todir="release">
            <fileset dir="">
                <include name="*.jnlp"/>
            </fileset>
        </copy>
    </target>
    
    <target name="jnlp-expand1" depends="create-config" if="jnlp.static">
        <replace file="release/nb-launch.jnlp" token="@CODEBASE@" value="${jnlp.codebase}"/>
        <replace file="release/nb-launch.jnlp" token="@NAME@" value="nb-launch.jnlp"/>
    </target>
    
    <target name="jnlp-expand2" depends="create-config" unless="jnlp.static">
        <replace file="release/nb-launch.jnlp" token="@CODEBASE@" value="$$$$codebase"/>
        <replace file="release/nb-launch.jnlp" token="@NAME@" value="$$$$name"/>
    </target>

    <target name="create-war" depends="jnlp-expand2" unless="jnlp.static">
        <mkdir dir="release/WEB-INF/lib"/>
        <copy file="${jnlp-servlet.file.location}" todir="release/WEB-INF/lib"/>
        <mkdir dir="release/WEB-INF/classes"/>
        <copy todir="release/WEB-INF/classes" flatten="false">
            <fileset dir="src" excludesfile="${nb_all}/nbbuild/standard-jar-excludes.txt">
                <include name="**/IndexServlet*"/>
            </fileset>
        </copy>
        <war basedir="release" 
            compress="false"
            webxml="web.xml"
            warfile="${netbeans.dest}.war"/>
    </target>
        
    <target depends="jars,generate-keystore" name="create-jnlp-jars">
        <mkdir dir="release"/>
        <copy flatten="true" todir="release">
            <fileset dir="jars">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
        <!-- now they can be signed -->
        <signjar alias="${jnlp.signjar.alias}" keystore="${jnlp.signjar.keystore}" storepass="${jnlp.signjar.password}">
            <fileset dir=".">
                <include name="release/*.jar"/>
            </fileset>
        </signjar>
    </target>
    
    <target name="nbm"/>
    
    <target description="Clean build products." name="clean">
        <delete>
            <fileset dir="src">
                <include name="**/*.class"/>
            </fileset>
        </delete>
	<!-- workaround for issue 20745 -->
        <delete dir="netbeans/lib"/>
        <delete dir="Info"/>
        <delete file="manifest-subst.mf"/>
        <delete dir="javadoc"/>
        <delete dir="release"/>
        <delete dir="jars"/>
        <delete file="${netbeans.dest}.war"/>
    </target>

    <target depends="clean" name="real-clean">
        <delete dir="reload"/>
    </target>

    <path id="cp">
        <pathelement location="${core.dir}/core/core.jar"/>
        <pathelement location="${jnlp-api.file.location}"/>
        <pathelement location="${nb_all}/web/external/servlet-2.3.jar"/>
    </path>
    
    <target name="jars" depends="compile">
        <taskdef name="repeat" classname="org.netbeans.nbbuild.Repeat" classpath="${nb_all}/nbbuild/nbantext.jar"/>
        
        <repeat values="${allmodules}" name="maindir" target="buildjar"/>

        <mkdir dir="jars"/>
        <jar compress="false"
             jarfile="jars/nbjnlpinstaller.jar">
             <fileset dir="src" excludesfile="${nb_all}/nbbuild/standard-jar-excludes.txt">
             </fileset>
        </jar>

    </target>

    <!-- copies and conditionally repackages all jars -->
    <target name="buildjar">
        <echo message="buildjar running with property maindir == ${maindir}"/>
        
        
        <mkdir dir="jars/${maindir}"/>
        
        <fileset dir="../../${maindir}" id="modules">
            <include name="netbeans/modules/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-locale">
            <include name="netbeans/modules/locale/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-ext">
            <include name="netbeans/modules/ext/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-autoload">
            <include name="netbeans/modules/autoload/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-autoload-locale">
            <include name="netbeans/modules/autoload/locale/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-autoload-ext">
            <include name="netbeans/modules/autoload/ext/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-eager">
            <include name="netbeans/modules/eager/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-eager-locale">
            <include name="netbeans/modules/eager/locale/*.jar"/>
        </fileset>
        
        <fileset dir="../../${maindir}" id="modules-eager-ext">
            <include name="netbeans/modules/eager/ext/*.jar"/>
        </fileset>
        
        <copy flatten="true" todir="jars/${maindir}">
            <fileset dir="../../${maindir}" id="without-repackaging">
                <include name="netbeans/lib/**/*.jar"/>
            </fileset>
        </copy>

        <pathconvert pathsep="," property="f1" refid="modules" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules"/>
            <param name="forconversion" value="${f1}"/>
        </antcall>
        
        <pathconvert pathsep="," property="f2" refid="modules-ext" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/ext"/>
            <param name="forconversion" value="${f2}"/>
        </antcall>
        
        <pathconvert pathsep="," property="f3" refid="modules-autoload" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/autoload"/>
            <param name="forconversion" value="${f3}"/>
        </antcall>
        
        <pathconvert pathsep="," property="f4" refid="modules-autoload-ext" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/autoload/ext"/>
            <param name="forconversion" value="${f4}"/>
        </antcall>
        
        <pathconvert pathsep="," property="f5" refid="modules-eager" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/eager"/>
            <param name="forconversion" value="${f5}"/>
        </antcall>
        
        <pathconvert pathsep="," property="f6" refid="modules-eager-ext" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/eager/ext"/>
            <param name="forconversion" value="${f6}"/>
        </antcall>

        <pathconvert pathsep="," property="f7" refid="modules-locale" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/locale"/>
            <param name="forconversion" value="${f7}"/>
        </antcall>

        <pathconvert pathsep="," property="f8" refid="modules-eager-locale" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/eager/locale"/>
            <param name="forconversion" value="${f8}"/>
        </antcall>

        <pathconvert pathsep="," property="f9" refid="modules-autoload-locale" setonempty="false"/>
        <antcall target="repackage-all">
            <param name="subdir" value="modules/autoload/locale"/>
            <param name="forconversion" value="${f9}"/>
        </antcall>
    </target>
    
    <target name="repackage-all">
        <condition property="run-repackage">
            <not>
                <!-- This a little trick to find out whether property
                    forconversion contains real set of path or one of
                    the strings ${f1} .. ${f6}. It contains this strange
                    string in case the folder for conversion is emtpy.
                    Sorry I did not find any better way to decide whether
                    a property is empty - it would require a dedicated task.
                -->
                <contains string="${forconversion}" substring="{f"/>
            </not>
        </condition>
        <antcall target="repackage-all2"/>
    </target>
    
    <target name="repackage-all2" if="run-repackage">
        <echo message="repackage-all called with --${forconversion}--"/>
        <repeat values="${forconversion}" name="filetoconvert" target="repackage"/>
    </target>
    
    <target name="repackage">
        <echo message="Trying to repackage ${filetoconvert}"/>
        <basename property="fname" file="${filetoconvert}" suffix=".jar"/>
        <uptodate srcfile="${filetoconvert}" targetfile="jars/${maindir}/${fname}.jar" property="jaruptodate"/>
        <antcall target="repackage2"/>
    </target>
    <!-- This target takes a jar file and adds additional directory to the packed
        directory structure
    -->
    <target name="repackage2" unless="jaruptodate">
        <mkdir dir="jars/${maindir}/tmp/${fname}"/>
        <unjar src="${filetoconvert}" dest="jars/${maindir}/tmp/${fname}"/>
        <echo file="jars/${maindir}/${fname}-manifest.mf"><![CDATA[Manifest-Version: 1.0
NetBeans-Location: ${subdir}
NetBeans-Prefix: ${fname}

]]></echo>
        <jar jarfile="jars/${maindir}/${fname}.jar" 
             basedir="jars/${maindir}/tmp"
             manifest="jars/${maindir}/${fname}-manifest.mf"
        />
        <delete dir="jars/${maindir}/tmp"/>
    </target>

    <available file="${jnlp.signjar.keystore}" property="do.not.generate.keystore" />
    <target name="generate-keystore" unless="do.not.generate.keystore" >
        <echo message="Going to create default keystore in ${jnlp.signjar.keystore}" />
        <exec 
            executable="keytool" 
            dir="."  
            inputstring="
            noname${line.separator}
            noorganization${line.separator}
            nolocation${line.separator}
            nostate${line.separator}
            no${line.separator}yes${line.separator}yes${line.separator}"
        >
          <arg value="--genkey" />
          <arg value="--alias" />
          <arg value="${jnlp.signjar.alias}" />
          <arg value="--keystore" />
          <arg file="${jnlp.signjar.keystore}" />
          <arg value="--storepass" />
          <arg value="${jnlp.signjar.password}" />
          <arg value="--keypass" />
          <arg value="${jnlp.signjar.password}" />
        </exec>
    </target>
</project>

