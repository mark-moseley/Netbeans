<?xml version="1.0" encoding="UTF-8"?>
<!--
  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  
  Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
  
  The contents of this file are subject to the terms of either the GNU General Public
  License Version 2 only ("GPL") or the Common Development and Distribution
  License("CDDL") (collectively, the "License"). You may not use this file except in
  compliance with the License. You can obtain a copy of the License at
  http://www.netbeans.org/cddl-gplv2.html or nbbuild/licenses/CDDL-GPL-2-CP. See the
  License for the specific language governing permissions and limitations under the
  License.  When distributing the software, include this License Header Notice in
  each file and include the License file at nbbuild/licenses/CDDL-GPL-2-CP.  Sun
  designates this particular file as subject to the "Classpath" exception as provided
  by Sun in the GPL Version 2 section of the License file that accompanied this code.
  If applicable, add the following below the License Header, with the fields enclosed
  by brackets [] replaced by your own identifying information:
  "Portions Copyrighted [year] [name of copyright owner]"
  
  Contributor(s):
  
  The Original Software is NetBeans. The Initial Developer of the Original Software
  is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun Microsystems, Inc. All
  Rights Reserved.
  
  If you wish your version of this file to be governed by only the CDDL or only the
  GPL Version 2, indicate your decision by adding "[Contributor] elects to include
  this software in this distribution under the [CDDL or GPL Version 2] license." If
  you do not indicate a single choice of license, a recipient has the option to
  distribute your version of this file under either the CDDL, the GPL Version 2 or
  to extend the choice of license to its licensees as provided above. However, if you
  add GPL Version 2 code and therefore, elected the GPL Version 2 license, then the
  option applies only if the new code is made subject to such option by the copyright
  holder.
-->

<project name="bootstrap" default="all" basedir=".">
    <property file="${basedir}/build.properties"/>
    
    <target name="build" depends="init,-build"/>
    
    <target name="init" depends="-clean,-init-ml,-init-sources,-get-sources,-init,-init-properties,-post-init-clean"/>

    
    <target name="-clean">
        <delete dir="${output.dir}"/>
    </target>


    <target name="-init-sources">
	<!-- use.hg.root property is set if hg.root is set and not empty -->
	<condition property="use.hg.root">
	    <and>
	        <isset property="hg.root"/>
	        <not>
	            <equals arg1="${hg.root}" arg2=""/> 
	         </not>
	    </and>
        </condition>

        <!-- use.hg.root.translatedfiles property is set if ml.build is set and hg.root.translated is set and not empty -->
	<condition property="use.hg.root.translatedfiles">
	    <and>
	        <isset property="hg.root.translatedfiles"/>
	        <not>
	            <equals arg1="${hg.root.translatedfiles}" arg2=""/> 
	         </not>		
		<isset property="ml.build"/>
	    </and>
        </condition>
    </target>


    <target name="-get-sources" depends="-init-working-dir,-get-installer-sources,-get-translatedfiles"/>

    <target name="-init-working-dir" if="use.hg.root">
	<delete dir="${nbi.all.dir}"/>
    </target>
    
    <target name="-get-installer-sources" if="use.hg.root">
        <copy todir="${nbi.core.dir}">
            <fileset dir="${hg.root}/nbi">
                <exclude name="infra/server/**/build/**/*.*"/>
                <exclude name="infra/server/**/dist/**/*.*"/>
                <exclude name="infra/server/**/private/**/*.*"/>
            </fileset>
        </copy>
        <copy todir="${nbi.netbeans.dir}">
            <fileset dir="${hg.root}/installer">
                <exclude name="infra/server/**/build/**/*.*"/>
                <exclude name="infra/server/**/dist/**/*.*"/>
                <exclude name="infra/server/**/private/**/*.*"/>
                <exclude name="${nbi.all.relative.path}/**/*.*"/>
                <include name="components/**/*.*"/>
                <include name="infra/**/*.*"/>
                <include name="engine/**/*.*"/>
            </fileset>
        </copy>
        <mkdir dir="${nbi.all.dir}/reglib"/>
        <copy todir="${nbi.all.dir}/reglib">
            <fileset dir="${hg.root}/reglib">
		<include name="src/**/*.*"/>
                <exclude name="build/**/*.*"/>
                <exclude name="dist/**/*.*"/>                
            </fileset>
        </copy>
    </target>

    <target name="-get-translatedfiles" if="use.hg.root.translatedfiles">
	<copy todir="${nbi.all.dir}/translatedfiles/src">
            <fileset dir="${hg.root.translatedfiles}/src">
               <include name="*/other/nbi/**/*.*"/>
               <include name="*/other/installer/**/*.*"/>
            </fileset>
	    <regexpmapper handledirsep="true" from="(.*)/other/(.*)" to="\2"/>
        </copy>
	<copy todir="${nbi.all.dir}/translatedfiles/src/installer/engine/src">
            <fileset dir="${hg.root.translatedfiles}/src">
               <include name="*/nb*/reglib/reglib/**/*.*"/>
            </fileset>
	    <regexpmapper handledirsep="true" from="(.*)/nb.*/reglib/reglib/(.*)" to="\2"/>
        </copy>
    </target>


    <target name="-remove-wrong-locale-files" if="nb.locales.isset">
        <echo file="${nbi.all.dir}/locales.tmp">**/*_${nb.locales}.*</echo> 
        <loadfile srcFile="${nbi.all.dir}/locales.tmp" property="locale.pattern.excludes">
            <filterchain>
                <tokenfilter>
                    <replaceregex pattern="\," replace="\.\* \*\*\/\*_" flags="g"/>
           	</tokenfilter>
               </filterchain>
        </loadfile>
        <delete file="${nbi.all.dir}/locales.tmp"/>

	<delete failonerror="false" verbose="true">
            	<fileset dir="${nbi.all.dir}/translatedfiles" excludes="${locale.pattern.excludes}"/>
	</delete>
    </target>

    <target name="-init-ml">
        <condition property="ml.build">
	     <equals arg1="${nb.build.type}" arg2="ml"/>
        </condition>
        <condition property="nb.locales.isset">
 	     <not>
 	     	<equals arg1="${nb.locales}" arg2=""/>
 	     </not>
        </condition>
    </target>

    <target name="-init">
        <delete dir="${custom.tasks.cls}"/>
        <mkdir dir="${custom.tasks.cls}"/>
        
        <!-- first we need to perform an "unofficial" build of the engine in order 
             to ensure it's available in the classpath for the custom ant tasks -->
        <subant buildpath="${nbi.core.dir}/engine" 
                target="compile" 
                failonerror="true" 
                output="core.engine.unofficial.build.output">
            <property name="platforms.JDK_1.5.home" value="${jdk.home}"/>
            <property name="basedir" value="${nbi.core.dir}/engine"/>
        </subant>
        <copy todir="${custom.tasks.cls}">
            <fileset dir="${nbi.core.dir}/engine/build/classes">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        
        <!-- second we compile the required custom libraries -->
        <javac 
            srcdir="${nbi.core.dir}/infra/lib/registries-management" 
            destdir="${custom.tasks.cls}"
            classpath="${custom.tasks.cls}"
            debug="true"/>
        
        <!-- then compile all the custom ant tasks -->
        <javac 
            srcdir="${custom.tasks.src.1}"
            destdir="${custom.tasks.cls}"
            classpath="${custom.tasks.cls}"
            debug="true"/>
        <javac 
            srcdir="${custom.tasks.src.2}" 
            destdir="${custom.tasks.cls}"
            classpath="${custom.tasks.cls}"
            debug="true"/>
        <javac 
            srcdir="${custom.tasks.src.3}" 
            destdir="${custom.tasks.cls}"
            classpath="${custom.tasks.cls}"
            debug="true"/>
        
        <taskdef 
            name="glassfish-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberGlassFish"/>
        <taskdef 
            name="openesb-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberOpenEsb"/>
        <taskdef 
            name="sjsam-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberSjsam"/>
        <taskdef 
            name="swdp-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberSwdp"/>
        <taskdef 
            name="portletcontainer-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberPortletContainer"/>
        <taskdef 
            name="javaeesdk-firstcup-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberFirstCup"/>
        <taskdef 
            name="javaeesdk-blueprints-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberBluePrints"/>
	<taskdef 
            name="wsrp-buildnumber" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.BuildNumberWsrp"/>

        <taskdef 
            name="for-each"
            classname="org.netbeans.installer.infra.build.ant.ForEach"
            classpath="${custom.tasks.cls}"/>
        <taskdef 
            name="if" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.If"/>
        <taskdef 
            name="set" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.SetProperty"/>
        <taskdef 
            name="export-registry" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.registries.ExportRegistry"/>
        <taskdef 
            name="create-bundle" 
            classpath="${custom.tasks.cls}" 
            classname="org.netbeans.installer.infra.build.ant.registries.CreateBundle"/>

	<set property="nb.build.type.number"
                 value="0"/>
        <set property="nb.build.suffix"
                 value=""/>

        <if property="nb.build.type" value="ml">
            <set property="nb.build.type.number"
                 value="1"/>
	    <set property="nb.build.suffix"
                 value="-ml"/>
        </if>

        <if property="gf.build.type" value="">
            <set property="gf.build.suffix"
	         value="en"/>
            <set property="sjsas.build.suffix"
	         value="en"/>
        </if>
        <if property="gf.build.type" value="ml">
            <set property="gf.build.suffix"
		 value="ml"/>
            <set property="sjsas.build.suffix"
		 value="ml"/>
        </if>


	<set property="nb.full.version"
             value="6.5.0.${nb.build.type.number}.${build.number}"/>

        <set property="nb.zip.files.prefix"
             value="${nb.files.prefix}-${build.number}${nb.build.suffix}"/>

        <set property="nb.bundle.files.prefix"
             value="${nb.files.prefix}-${build.number}${nb.build.suffix}"/>

        <set property="jdk.bundle.files.suffix"
             value="${nb.files.prefix}-${build.number}${nb.build.suffix}"/>
	
        <set property="jdk.bundle.files.suffix"
             value="nb-6_5"/>
	
	<set property="nb.bundles.output.dir"
             value="${output.dir}/bundles"/>

        <condition property="do.build.jdk">
             <or>
	         <equals arg1="${build.jdk5}" arg2="1"/>
                 <equals arg1="${build.jdk6}" arg2="1"/>
             </or>
        </condition>
        <condition property="do.build.jdk5">
	     <equals arg1="${build.jdk5}" arg2="1"/>
        </condition>
        <condition property="do.build.jdk6">
	     <equals arg1="${build.jdk6}" arg2="1"/>
        </condition>
        <condition property="do.build.netbeans">
	     <equals arg1="${build.netbeans.bundles}" arg2="1"/>
        </condition>

        <condition property="do.build.jtb">
	     <and>
		     <equals arg1="${build.jtb}" arg2="1"/>
		     <not>
			<isset property="do.build.netbeans"/>
		     </not>
             </and>
        </condition>
	<condition property="server-uid" value="sjsas" else="glassfish">	
	    <isset property="do.build.jtb"/>
	</condition>

        <condition property="do.build.mysql">
	     <equals arg1="${build.mysql}" arg2="1"/>
        </condition>

        <condition property="nb.locales.isset">
 	     <not>
 	     	<equals arg1="${nb.locales}" arg2=""/>
 	     </not>
        </condition>

	<!--
        <get
	    src="${glassfish.builds.host}/java/re/glassfish/9.1_01/promoted/fcs/latest/bundles/"
            dest="${temp.file}"/>
        <glassfish-buildnumber 
            file="${temp.file}" 
            prefix="glassfish"/>
        <glassfish-buildnumber 
            file="${temp.file}" 
            prefix="sjsas"/>
	-->

	<set property="glassfish.milestone.number" value="04"/>
	<set property="glassfish.milestone.number.real" value="04"/>
	<set property="glassfish.build.type" value="fcs"/>
	
	<set property="sjsas.milestone.number" value="04"/>
	<set property="sjsas.milestone.number.real" value="04"/>
	<set property="sjsas.build.type" value="fcs"/>
	        	        
	<if property="gf.build.type" value="">
        	<set property="glassfish.build.number" value="20080411"/>
		<set property="sjsas.build.number" value="20080411"/>
	</if>

	<if property="gf.build.type" value="ml">
	        <set property="glassfish.build.number" value="20080515"/>
	        <set property="sjsas.build.number" value="20080515"/>
	</if>

        <get
            src="${glassfish.builds.host}/java/re/glassfish/10.0/promoted/trunk-latest/bundles/"
            dest="${temp.file}"/>
        <glassfish-buildnumber 
            file="${temp.file}" 
            prefix="glassfish-mod"/>

	<!--
	<set property="glassfish-mod.milestone.number"      value="15"/>
	<set property="glassfish-mod.milestone.number.real" value="15a"/>
	<set property="glassfish-mod.build.type"            value="express"/>
	<set property="glassfish-mod.build.number"          value="20080722"/>
	-->

        <!--
        -->
        <!--
        <set property="openesb.build.number" value="2008012302"/>                       
        <set property="openesb.build.number.real" value="080123_2"/>
	-->
        <get
            src="${openesb.builds.host}/kits/ojc/openesb_as9_ur2/latest/solsparc/ojc/version.txt"
            dest="${temp.file}"/>
        <openesb-buildnumber 
            file="${temp.file}" 
            prefix="openesb"/>

        <if property="do.build.jtb">
	    <!--
            <get
                src="${glassfish.builds.host}/java/re/swdp/1.0/promoted/fcs/latest/bundles/"
                dest="${temp.file}"/>
            <swdp-buildnumber 
                file="${temp.file}" 
                prefix="swdp"/>
	    -->
            <get
                src="${glassfish.builds.host}/java/re/javaeesdk/5.0_06/archive/fcs/latest/bundles/"
                dest="${temp.file}"/>
	    <sjsam-buildnumber
	        file="${temp.file}" 
                prefix="sjsam"/>
            <portletcontainer-buildnumber 
                file="${temp.file}" 
                prefix="portletcontainer"/>
            <javaeesdk-firstcup-buildnumber 
                file="${temp.file}" 
                prefix="javaeesdk-firstcup"/>
            <javaeesdk-blueprints-buildnumber 
                file="${temp.file}" 
                prefix="javaeesdk-blueprints"/>
            <javaeesdk-blueprints-buildnumber 
                file="${temp.file}" 
                prefix="javaeesdk-samples"/>
	    
	    <wsrp-buildnumber
	        file="${temp.file}" 
                prefix="wsrp"/>
            
            <get
                src="${portalpack.builds.host}/portalserver/PortalTooling/updates/nb65/build.txt"
                dest="${temp.file}"/>
            <loadfile property="portalpack.build.number"
          	    srcFile="${temp.file}">
	        <filterchain>
        	    <striplinebreaks/>
    	        </filterchain>
	    </loadfile>            
            <property name="javaeesdk-javadocs.build.number" value="20070814"/>
        </if>
        
        <delete file="${temp.file}" failonerror="false"/>
    </target>
    
    <target name="-init-properties">
        <echo file="${environment.properties}"/>
        <!-- Obligatory properties -->

        <echo file="${environment.properties}" append="true">
cvs.root=${cvs.root}
cvs.module=installer
cvs.timestamp=${cvs.timestamp}
cvs.branch=${cvs.branch}

checkout.sources=false
sources.dir=${nbi.all.dir}

release.to.server=false
release.registry.dir=${output.dir}/registry-temp

build.number=${build.number}
dont.build.custom.tasks=true
custom.tasks.cls=${custom.tasks.cls}

build.engine=false

engine.dist.file.name=nbi-engine.jar
engine.dist.file=${nbi.netbeans.dir}/infra/build/engine/dist/nbi-engine.jar

release.url=http://${glassfish.host}:${glassfish.http.port}${context.path}/admin
release.registry=NetBeans

packaged.data.dir=${nbi.cache.dir}/packaged
downloads.cache.dir=${nbi.cache.dir}/raw

binary.cache.host=${binary.cache.host}
nb.builds.host=${nb.builds.host}
glassfish.builds.host=${glassfish.builds.host}
openesb.builds.host=${openesb.builds.host}
remote.work.dir=~/.${nb.bundle.files.prefix}
	</echo>

	<!-- NetBeans Build properties -->
        <echo file="${environment.properties}" append="true">
glassfish.milestone.number=${glassfish.milestone.number}
glassfish.milestone.number.real=${glassfish.milestone.number.real}
glassfish.build.type=${glassfish.build.type}
glassfish.build.number=${glassfish.build.number}

glassfish-mod.milestone.number=${glassfish-mod.milestone.number}
glassfish-mod.milestone.number.real=${glassfish-mod.milestone.number.real}
glassfish-mod.build.type=${glassfish-mod.build.type}
glassfish-mod.build.number=${glassfish-mod.build.number}

sjsas.milestone.number=${sjsas.milestone.number}
sjsas.milestone.number.real=${sjsas.milestone.number.real}
sjsas.build.type=${sjsas.build.type}
sjsas.build.number=${sjsas.build.number}

openesb.build.number=${openesb.build.number}
openesb.build.number.real=${openesb.build.number.real}

nb.full.version=${nb.full.version}
nb.build.suffix=${nb.build.suffix}
nb.zip.files.prefix=${nb.zip.files.prefix}
nb.bundle.files.prefix=${nb.bundle.files.prefix}
	</echo>

        <if property="do.build.jtb">
	<!-- SJSAM properties -->
        <echo file="${environment.properties}" append="true">
sjsam.builds.host=${sjsam.builds.host}
sjsam.milestone.number=${sjsam.milestone.number}
sjsam.build.number=${sjsam.build.number}
	</echo>
	<!-- SWDP properties -->
	<!--
        <echo file="${environment.properties}" append="true">
swdp.milestone.number=${swdp.milestone.number}
swdp.build.type=${swdp.build.type}
swdp.build.number=${swdp.build.number}
swdp.macro.number=${swdp.macro.number}
	</echo>
	-->

	<!-- Java EE SDK component properties -->
        <echo file="${environment.properties}" append="true">
portalpack.builds.host=${portalpack.builds.host}

javaeesdk-firstcup.milestone.number=${javaeesdk-firstcup.milestone.number}
javaeesdk-firstcup.build.number=${javaeesdk-firstcup.build.number}
javaeesdk-firstcup.macro.number=${javaeesdk-firstcup.macro.number}
javaeesdk-firstcup.micro.number=${javaeesdk-firstcup.micro.number}

javaeesdk-blueprints.milestone.number=${javaeesdk-blueprints.milestone.number}
javaeesdk-blueprints.build.number=${javaeesdk-blueprints.build.number}
javaeesdk-blueprints.build.type=${javaeesdk-blueprints.build.type}
javaeesdk-blueprints.update.number=${javaeesdk-blueprints.update.number}

javaeesdk-samples.milestone.number=${javaeesdk-samples.milestone.number}
javaeesdk-samples.build.type=${javaeesdk-samples.build.type}
javaeesdk-samples.build.number=${javaeesdk-samples.build.number}
javaeesdk-samples.update.number=${javaeesdk-samples.update.number}

javaeesdk-javadocs.build.number=${javaeesdk-javadocs.build.number}

portletcontainer.milestone.number=${portletcontainer.milestone.number}
portletcontainer.build.number=${portletcontainer.build.number}
portletcontainer.macro.number=${portletcontainer.macro.number}
portletcontainer.micro.number=${portletcontainer.micro.number}
portletcontainer.minor.number=${portletcontainer.minor.number}

wsrp.macro.number=${wsrp.macro.number}
wsrp.micro.number=${wsrp.micro.number}
wsrp.milestone.number=${wsrp.milestone.number}
wsrp.build.number=${wsrp.build.number}
portalpack.build.number=${portalpack.build.number}
        </echo>
        </if>

        <if property="do.build.jtb">
	<!-- SJSAS Image properties -->
         <echo file="${environment.properties}" append="true">
remote.host.windows=${remote.host.windows}
remote.port.windows=${remote.port.windows}
remote.user.windows=${remote.user.windows}

remote.host.linux=${remote.host.linux}
remote.port.linux=${remote.port.linux}
remote.user.linux=${remote.user.linux}

remote.host.solaris-x86=${remote.host.solaris-x86}
remote.port.solaris-x86=${remote.port.solaris-x86}
remote.user.solaris-x86=${remote.user.solaris-x86}

remote.host.solaris-sparc=${remote.host.solaris-sparc}
remote.port.solaris-sparc=${remote.port.solaris-sparc}
remote.user.solaris-sparc=${remote.user.solaris-sparc}

remote.host.macosx=${remote.host.macosx}
remote.port.macosx=${remote.port.macosx}
remote.user.macosx=${remote.user.macosx}

sjsas.image.token.hostname.windows=${sjsas.image.token.hostname.windows}
sjsas.image.token.hostname.linux=${sjsas.image.token.hostname.linux}
sjsas.image.token.hostname.solaris-x86=${sjsas.image.token.hostname.solaris-x86}
sjsas.image.token.hostname.solaris-sparc=${sjsas.image.token.hostname.solaris-sparc}
sjsas.image.token.hostname.macosx=${sjsas.image.token.hostname.macosx}
        </echo>
        </if>

        <!-- Jar singing properties -->
	<if property="jarsigner.enabled" value="true">
	    <echo file="${environment.properties}" append="true">
jarsigner.keystore=${jarsigner.keystore}
jarsigner.alias=${jarsigner.alias}
jarsigner.storepass=${jarsigner.storepass}
            </echo>
	</if>
        
        <replace file="${environment.properties}" token="\" value="/"/>
    </target>
    
    <target name="-post-init-clean" depends="-remove-wrong-locale-files">
        <delete dir="${nbi.cache.dir}/raw" failonerror="false"/>
        <delete failonerror="false">
            <fileset dir="${nbi.cache.dir}/packaged">
                <!-- nb components -->
		<include name="**/nb*"/>
                <exclude name="**/nb*${build.number}*"/>
                <exclude name="**/nb-portalpack*"/>

                <!-- glassfish -->
                <include name="**/glassfish*"/>
                <exclude name="**/glassfish*2.0.2.${glassfish.milestone.number}.*"/>
                <exclude name="**/glassfish-mod*3.0.0.${glassfish-mod.milestone.number}.*"/>

                <!-- openesb -->
		<include name="**/openesb*"/>
                <exclude name="**/openesb*${glassfish.milestone.number}.${openesb.build.number}*"/>
                
                <!-- tomcat -->
		<include name="**/tomcat*"/>
                <exclude name="**/tomcat*6.0.16.0.0*"/>

		<!-- wtk -->
                <exclude name="**/wtk*"/>

		<!-- JDK -->
                <exclude name="**/jdk*"/>
            </fileset>
        </delete>

	<if property="do.build.jtb">
		<delete failonerror="false">
        	    <fileset dir="${nbi.cache.dir}/packaged">        
			<!-- javaeesdk components -->
			<include name="**/sjsam*"/>
			<exclude name="**/sjsam*${sjsas.milestone.number}.${sjsam.build.number}*"/>

			<include name="**/javaeesdk-samples*"/>
		        <exclude name="**/javaeesdk-samples*${javaeesdk-samples.milestone.number}.${javaeesdk-samples.build.number}*"/>

			<include name="**/javaeesdk-blueprints*"/>
			<exclude name="**/javaeesdk-blueprints*${javaeesdk-blueprints.milestone.number}.${javaeesdk-blueprints.build.number}*"/>
			
			<include name="**/javaeesdk-firstcup*"/>
			<exclude name="**/javaeesdk-firstcup*${javaeesdk-firstcup.milestone.number}.${javaeesdk-firstcup.build.number}*"/>

			<include name="**/javaeesdk-javadocs"/>
			<exclude name="**/javaeesdk-javadocs*${javaeesdk-javadocs.build.number}*"/>

			<include name="**/portletcontainer*"/>
			<exclude name="**/portletcontainer*${portletcontainer.milestone.number}.${portletcontainer.build.number}*"/>

			<include name="**/wsrp*"/>
			<exclude name="**/wsrp*${wsrp.milestone.number}.${wsrp.build.number}*"/>

		        <include name="**/sjsas*"/>
		        <exclude name="**/sjsas*9.1_02.${sjsas.milestone.number}.*"/>

			<include name="**/nb-portalpack*"/>
			<exclude name="**/nb-portalpack*${portalpack.build.number}*"/>
                	
        	    </fileset>
	        </delete>
	</if>
    </target>


    <target name="prepare-web-page">
	<ant dir="${basedir}/web">
	    <property name="web.page.dir"                 value="${nbi.all.dir}/webtemp"/>
            <property name="web.page.translatedfiles.dir" value="${nbi.all.dir}/translatedfiles/src/installer/infra/build/web"/>
	    <property name="registry.root.dir"            value="${output.dir}/registry-temp"/>
            <property name="web.page.release.dir"         value="${output.dir}"/>
	</ant>
    </target>

    <target name="prepare-output-dir">
	<delete dir="${output.dir}"/>
        
        <mkdir dir="${output.dir}"/>
        <mkdir dir="${nb.bundles.output.dir}"/>
        <mkdir dir="${output.dir}/components"/>        
    </target>

    <target name="export-temp-registry">
	<export-registry 
            root="${output.dir}/registry-temp" 
            destination="${output.dir}/registry" 
            codebase="http://bits.netbeans.org/download/6.5/nightly/${build.number}/registry"/>
    </target>


    <target name="-build">     
        <antcall target="prepare-output-dir"/>
        <antcall target="build-engine"/>
                
        <antcall target="build-netbeans-components"/>
	<antcall target="build-nbmysql-components"/>
        <antcall target="build-javatools-components"/>
        <antcall target="build-nbjdk-components"/>

        <!--<antcall target="export-temp-registry"/>-->
        
	<antcall target="generate-bundles"/>

	<antcall target="prepare-web-page"/>
        
        <delete dir="${output.dir}/registry-temp"/>        
        <delete dir="${output.dir}/components"/>
    </target>


    <target name="build-list">
	<for-each list="${build.list}" separator=" " property="tobuild.component.uid">
	    <antcall target="build-${tobuild.component.uid}"/>
        </for-each>
    </target>

    <target name="build-engine">
	<antcall target="build-core-engine"/>
        <antcall target="build-netbeans-engine"/>
    </target>
    <target name="build-nbmysql-components" if="do.build.mysql">
	<set property="netbeans.group.uid" value=""/>
        <antcall target="build-list">
	    <param name="build.list" value="nb-base nb-javase nb-javaee nb-webcommon nb-ruby runtimes-group glassfish mysql mysql-connector"/>
        </antcall>
    </target>

    <target name="build-netbeans-components" if="do.build.netbeans">
	<set property="netbeans.group.uid" value=""/>
	<antcall target="build-list">
	    <param name="build.list" value="nb-base nb-javase nb-webcommon nb-javaee nb-javame nb-soa nb-ruby nb-cnd nb-php runtimes-group glassfish glassfish-mod tomcat openesb"/>
        </antcall>
     </target>

    <target name="build-nbjdk-components" if="do.build.jdk">
	<set property="netbeans.group.uid" value=""/>
        <antcall target="build-list">
	     <param name="build.list" value="nb-base nb-javase jdk5 jdk6"/>
        </antcall>
    </target>

    <target name="build-javatools-components" if="do.build.jtb">
	<set property="netbeans.group.uid" value="nb-ide-group"/>
        <antcall target="build-list">
	    <param name="build.list"  value="tools-group nb-ide-group nb-base nb-javase nb-javaee nb-webcommon nb-soa nb-portalpack"/>
        </antcall>
        <antcall target="build-list">
	     <param name="build.list" value="runtimes-group sjsas sjsam openesb portletcontainer wsrp documentation-group javaeesdk-firstcup javaeesdk-blueprints javaeesdk-samples"/>
        </antcall>
    </target>


    <target name="generate-netbeans-bundles" if="do.build.netbeans">
        <for-each list="javase java ruby cpp php full" separator=" " property="bundle.type">
	     <antcall target="generate-netbeans-${bundle.type}-bundles"/>
        </for-each>
    </target>

    <target name="generate-bundles">
	<property name="welcome.type" value="NWP.welcome.page.type"/>
        <antcall target="generate-netbeans-bundles"/>
        <antcall target="generate-mysql-bundles"/>
        <antcall target="generate-jdk-bundles"/>
        <antcall target="generate-javatoolsbundle-bundles"/>
    </target>

    <target name="generate-jdk-bundles" depends="init-jdk-bundles,init-bundled-jvms" if="do.build.jdk">	
	<antcall target="generate-jdk5-bundles"/>
        <antcall target="generate-jdk6-bundles"/>
    </target>

    <target name="build-core-engine">
	<property name="engine.dist.file.name" value="nbi-engine.jar"/>
        
        <echo message="BUILDING CORE ENGINE ======================================"/>
        <ant dir="${nbi.core.dir}/infra/build/engine" target="build-all">
            <property 
                name="basedir" 
                value="${nbi.core.dir}/infra/build/engine"/>
            <property 
                name="environment.properties" 
                value="${environment.properties}"/>
            
            <property
                name="build.native"
                value="false"/>
            <property 
                name="cvs.module" 
                value="${core.module.name}"/>
        </ant>
    </target>

    <target name="build-netbeans-engine">        
        <echo message="BUILDING NETBEANS ENGINE =================================="/>
        <ant dir="${nbi.netbeans.dir}/infra/build/engine" target="release-all">
            <property 
                name="basedir" 
                value="${nbi.netbeans.dir}/infra/build/engine"/>
            <property 
                name="environment.properties" 
                value="${environment.properties}"/>
            
            <property 
                name="core.engine.dist.file" 
                value="${nbi.core.dir}/infra/build/engine/dist/${engine.dist.file.name}"/>
        </ant>
    </target>


    <target name="build-group">
        <echo message="BUILDING GROUP ${component.uid} ====================================="/>
        <ant dir="${nbi.netbeans.dir}/infra/build/groups/${component.uid}" target="release-all">
            <property 
                name="basedir" 
                value="${nbi.netbeans.dir}/infra/build/groups/${component.uid}"/>
            <property 
                name="environment.properties" 
                value="${environment.properties}"/>
            
            <property
                name="release.parent.uid"
                value="${release.parent.uid}"/>
            <property
                name="release.parent.version"
                value=""/>
            <property
                name="release.parent.platforms"
                value=""/>
        </ant>
    </target>

    <target name="build-product">
        <echo message="BUILDING PRODUCT ${component.uid} =========================================="/>
        <ant dir="${nbi.netbeans.dir}/infra/build/products/${component.uid}" target="release-all">
            <property 
                name="basedir" 
                value="${nbi.netbeans.dir}/infra/build/products/${component.uid}"/>
            <property 
                name="environment.properties" 
                value="${environment.properties}"/>
            
            <property
                name="dist.dir"
                value="${output.dir}/components"/>
            
            <property
                name="release.parent.uid"
                value="${release.parent.uid}"/>
            <property
                name="release.parent.version"
                value=""/>
            <property
                name="release.parent.platforms"
                value=""/>
        </ant>
    </target>

    <target name="build-jdk-product">
        <echo message="BUILDING JDK (${jdk.build.file}) ========================================"/>
        <ant dir="${nbi.netbeans.dir}/infra/build/products/jdk" antfile="${jdk.build.file}" target="release-all">
            <property 
                name="basedir" 
                value="${nbi.netbeans.dir}/infra/build/products/jdk"/>
            <property 
                name="environment.properties" 
                value="${environment.properties}"/>
            
            <property
                name="dist.dir"
                value="${output.dir}/components"/>
            
            <property
                name="release.parent.uid"
                value=""/>
            <property
                name="release.parent.version"
                value=""/>
            <property
                name="release.parent.platforms"
                value=""/>
        </ant>
     </target>

    <target name="build-tools-group">
	<antcall target="build-group">
             <param name="component.uid" value="tools-group"/>
        </antcall>
    </target>

    <target name="build-nb-ide-group">
	<antcall target="build-group">
             <param name="component.uid"      value="nb-ide-group"/>
	     <param name="release.parent.uid" value="tools-group"/>
        </antcall>
    </target>

    <target name="build-documentation-group">
	<antcall target="build-group">
             <param name="component.uid" value="documentation-group"/>
        </antcall>
    </target>


    <target name="build-nb-product">
	<antcall target="build-product">
	    <param name="release.parent.uid" value="${netbeans.group.uid}"/>
        </antcall>
    </target>

    <target name="build-runtime-product">
	<antcall target="build-product">
	    <param name="release.parent.uid" value="runtimes-group"/>
        </antcall>
    </target>

    <target name="build-documentation-component">
	<antcall target="build-product">
	    <param name="release.parent.uid" value="documentation-group"/>
        </antcall>
    </target>


    <target name="build-runtimes-group">
	<antcall target="build-group">
             <param name="component.uid" value="runtimes-group"/>
        </antcall>
     </target>

    <target name="build-nb-base">
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-base"/>
        </antcall>
    </target>


    <target name="build-nb-javase">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-javase"/>
        </antcall>
    </target>

    <target name="build-nb-webcommon">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-webcommon"/>
        </antcall>
    </target>

    <target name="build-nb-javaee">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-javaee"/>
        </antcall>
    </target>


    <target name="build-nb-javame">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-javame"/>
        </antcall>
    </target>


    <target name="build-nb-soa">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-soa"/>
        </antcall>
    </target>


    <target name="build-nb-uml">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-uml"/>
        </antcall>
    </target>

    <target name="build-nb-ruby">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-ruby"/>
        </antcall>
    </target>

    <target name="build-nb-groovy">        
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-groovy"/>
        </antcall>
    </target>

    <target name="build-nb-cnd">
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-cnd"/>
        </antcall>
    </target>

    <target name="build-nb-php">	
	<antcall target="build-nb-product">
	    <param name="component.uid"  value="nb-php"/>
        </antcall>
    </target>

    <target name="build-glassfish">        
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="glassfish"/>
        </antcall>
    </target>

    <target name="build-glassfish-mod">        
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="glassfish-mod"/>
        </antcall>
    </target>

    <target name="build-tomcat">        
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="tomcat"/>
        </antcall>
    </target>

    <target name="build-openesb">
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="openesb"/>
        </antcall>
    </target>

    <target name="build-mysql">
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="mysql"/>
        </antcall>
    </target>

    <target name="build-mysql-connector">
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="mysql-connector"/>
        </antcall>
    </target>

    <target name="build-sjsas">        
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="sjsas"/>
        </antcall>
    </target>

    <target name="build-sjsam">        
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="sjsam"/>
        </antcall>
    </target>

    <target name="build-swdp">        
	<antcall target="build-runtime-product">
	    <param name="component.uid" value="swdp"/>
        </antcall>
    </target>

    <target name="build-javaeesdk-firstcup">        
	<antcall target="build-documentation-component">
	    <param name="component.uid" value="javaeesdk-firstcup"/>
        </antcall>
    </target>

    <target name="build-javaeesdk-blueprints">
	<antcall target="build-documentation-component">
	    <param name="component.uid" value="javaeesdk-blueprints"/>
        </antcall>
    </target>

    <target name="build-javaeesdk-samples">
       <antcall target="build-documentation-component">
	    <param name="component.uid" value="javaeesdk-samples"/>
        </antcall>
    </target>

    <target name="build-javaeesdk-javadocs">
        <antcall target="build-documentation-component">
	    <param name="component.uid" value="javaeesdk-javadocs"/>
        </antcall>
    </target>

    <target name="build-portletcontainer">
        <antcall target="build-runtime-product">
	    <param name="component.uid" value="portletcontainer"/>
        </antcall>
    </target>

    <target name="build-wsrp">
        <antcall target="build-runtime-product">
	    <param name="component.uid" value="wsrp"/>
        </antcall>
    </target>

    <target name="build-nb-portalpack">
        <antcall target="build-product">
	    <param name="component.uid" value="nb-portalpack"/>
	    <param name="release.parent.uid" value="tools-group"/>
        </antcall>
    </target>

     <target name="build-jdk5" if="do.build.jdk5">
	<antcall target="build-jdk-product">
	    <param name="jdk.build.file" value="build_jdk5.xml"/>
	</antcall>
     </target>


     <target name="build-jdk6" if="do.build.jdk6">
	<antcall target="build-jdk-product">
	    <param name="jdk.build.file" value="build_jdk6.xml"/>
	</antcall>
     </target>


    <!-- GENERATE NetBeans/JDK/JavaTools/MySQL BUNDLES -->

    <target name="generate-netbeans-javase-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-javase-${bundle.platform}"/>

        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"   version="${nb.full.version}"/>
            <component uid="nb-javase" version="${nb.full.version}"/>
	    <bundleProperty name="${welcome.type}" value="javase"/>
        </create-bundle>

	<antcall target="convert-netbeans-bundle"/>
    </target>

    <target name="generate-netbeans-java-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-java-${bundle.platform}"/>
        <condition property="is.mobility.available" value="false" else="true">
	    <or>
                <contains string="${bundle.platform}" substring="macosx"/>
	        <contains string="${bundle.platform}" substring="solaris"/>
	    </or>
        </condition>

	<if property="is.mobility.available" value="true">
            <condition property="is.solaris.platform" value="true" else="false">
                <contains string="${bundle.platform}" substring="solaris"/>
            </condition>

            <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"       version="${nb.full.version}"/>
            <component uid="nb-javase"     version="${nb.full.version}"/>
            <component uid="nb-javame"     version="${nb.full.version}"/>
            <component uid="nb-webcommon"  version="${nb.full.version}"/>
            <component uid="nb-javaee"     version="${nb.full.version}"/>
            <component uid="glassfish"     version="2.0.2.${glassfish.milestone.number}.${glassfish.build.number}"/>
            <component uid="glassfish-mod" version="3.0.0.${glassfish-mod.milestone.number}.${glassfish-mod.build.number}"/>
            <component uid="tomcat"        version="6.0.16.0.0"/>
	    <bundleProperty name="${welcome.type}" value="java"/>
            </create-bundle>
	</if>

	<if property="is.mobility.available" value="false">
            <condition property="is.solaris.platform" value="true" else="false">
                <contains string="${bundle.platform}" substring="solaris"/>
            </condition>
            <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"       version="${nb.full.version}"/>
            <component uid="nb-javase"     version="${nb.full.version}"/>
            <component uid="nb-webcommon"  version="${nb.full.version}"/>
            <component uid="nb-javaee"     version="${nb.full.version}"/>
            <component uid="glassfish"     version="2.0.2.${glassfish.milestone.number}.${glassfish.build.number}"/>
            <component uid="glassfish-mod" version="3.0.0.${glassfish-mod.milestone.number}.${glassfish-mod.build.number}"/>
            <component uid="tomcat"        version="6.0.16.0.0"/>
	    <bundleProperty name="${welcome.type}" value="java"/>
            </create-bundle>
	</if>
	<antcall target="convert-netbeans-bundle"/>
    </target>

    <target name="generate-netbeans-javame-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-mobility-${bundle.platform}"/>

        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"   version="${nb.full.version}"/>
            <component uid="nb-javase" version="${nb.full.version}"/>
            <component uid="nb-javame" version="${nb.full.version}"/>
	    <bundleProperty name="${welcome.type}" value="javame"/>
        </create-bundle>
	<antcall target="convert-netbeans-bundle"/>
    </target>

    <target name="generate-netbeans-ruby-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-ruby-${bundle.platform}"/>

        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"        version="${nb.full.version}"/>
            <component uid="nb-webcommon"   version="${nb.full.version}"/>
            <component uid="nb-ruby"        version="${nb.full.version}"/>
            <component uid="glassfish-mod"  version="3.0.0.${glassfish-mod.milestone.number}.${glassfish-mod.build.number}"/>
	    <bundleProperty name="${welcome.type}" value="ruby"/>
        </create-bundle>
	<antcall target="convert-netbeans-bundle"/>
    </target>

    <target name="generate-netbeans-cpp-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-cpp-${bundle.platform}"/>

        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base" version="${nb.full.version}"/>
            <component uid="nb-cnd"  version="${nb.full.version}"/>
	    <bundleProperty name="${welcome.type}" value="cnd"/>
        </create-bundle>

	<antcall target="convert-netbeans-bundle"/>
    </target>

    <target name="generate-netbeans-php-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-php-${bundle.platform}"/>

        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"      version="${nb.full.version}"/>
            <component uid="nb-webcommon" version="${nb.full.version}"/>
            <component uid="nb-php"       version="${nb.full.version}"/>
	    <bundleProperty name="${welcome.type}" value="php"/>
        </create-bundle>

	<antcall target="convert-netbeans-bundle"/>
    </target>

    <target name="generate-netbeans-full-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-${bundle.platform}"/>

        <condition property="is.mac.platform" value="true" else="false">
            <contains string="${bundle.platform}" substring="macosx"/>
        </condition>

	<if property="is.mac.platform" value="false">
            <condition property="is.solaris.platform" value="true" else="false">
                <contains string="${bundle.platform}" substring="solaris"/>
            </condition>
	    <if property="is.solaris.platform" value="false">	    
                   <create-bundle root="${output.dir}/registry-temp" 
                                  platform="${bundle.platform}" 
                                  target="${bundle.prefix}.${bundle.extension}">
                       <component uid="nb-base"        version="${nb.full.version}"/>
                       <component uid="nb-javase"      version="${nb.full.version}"/>
                       <component uid="nb-webcommon"   version="${nb.full.version}"/>
                       <component uid="nb-javaee"      version="${nb.full.version}"/>
                       <component uid="nb-javame"      version="${nb.full.version}"/>
                       <component uid="nb-soa"         version="${nb.full.version}"/>
                       <!--<component uid="nb-uml"         version="${nb.full.version}"/>-->
                       <component uid="nb-ruby"        version="${nb.full.version}"/>
                       <component uid="nb-cnd"         version="${nb.full.version}"/>
                       <component uid="nb-php"         version="${nb.full.version}"/>
                       <component uid="glassfish"      version="2.0.2.${glassfish.milestone.number}.${glassfish.build.number}"/>
                       <component uid="glassfish-mod"  version="3.0.0.${glassfish-mod.milestone.number}.${glassfish-mod.build.number}"/>
                       <component uid="tomcat"         version="6.0.16.0.0"/>
                   <component uid="openesb"        version="5.0.5.${glassfish.milestone.number}.${openesb.build.number}"/>
                   </create-bundle>
            </if>
            <if property="is.solaris.platform" value="true">	    
                   <create-bundle root="${output.dir}/registry-temp" 
                                  platform="${bundle.platform}" 
                                  target="${bundle.prefix}.${bundle.extension}">
                       <component uid="nb-base"        version="${nb.full.version}"/>
                       <component uid="nb-javase"      version="${nb.full.version}"/>
                       <component uid="nb-webcommon"   version="${nb.full.version}"/>
                       <component uid="nb-javaee"      version="${nb.full.version}"/>
                       <!--<component uid="nb-javame"      version="${nb.full.version}"/>-->
                       <component uid="nb-soa"         version="${nb.full.version}"/>
                       <!--<component uid="nb-uml"         version="${nb.full.version}"/>-->
                       <component uid="nb-ruby"        version="${nb.full.version}"/>
                       <component uid="nb-cnd"         version="${nb.full.version}"/>
                       <component uid="nb-php"         version="${nb.full.version}"/>
                       <component uid="glassfish"      version="2.0.2.${glassfish.milestone.number}.${glassfish.build.number}"/>
                       <component uid="glassfish-mod"  version="3.0.0.${glassfish-mod.milestone.number}.${glassfish-mod.build.number}"/>
                       <component uid="tomcat"         version="6.0.16.0.0"/>
                       <component uid="openesb"        version="5.0.5.${glassfish.milestone.number}.${openesb.build.number}"/>
                   </create-bundle>
            </if>
        </if>

	<if property="is.mac.platform" value="true">
        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"       version="${nb.full.version}"/>
            <component uid="nb-javase"     version="${nb.full.version}"/>
            <component uid="nb-webcommon"  version="${nb.full.version}"/>
            <component uid="nb-javaee"     version="${nb.full.version}"/>
            <!--<component uid="nb-javame"     version="${nb.full.version}"/>-->
            <component uid="nb-soa"        version="${nb.full.version}"/>
            <!--<component uid="nb-uml"    version="${nb.full.version}"/>-->
            <component uid="nb-ruby"       version="${nb.full.version}"/>
            <component uid="nb-cnd"        version="${nb.full.version}"/>
            <component uid="nb-php"        version="${nb.full.version}"/>
            <component uid="glassfish"     version="2.0.2.${glassfish.milestone.number}.${glassfish.build.number}"/>
            <component uid="glassfish-mod" version="3.0.0.${glassfish-mod.milestone.number}.${glassfish-mod.build.number}"/>
            <component uid="tomcat"        version="6.0.16.0.0"/>
            <component uid="openesb"       version="5.0.5.${glassfish.milestone.number}.${openesb.build.number}"/>
        </create-bundle>
        </if>
	<antcall target="convert-netbeans-bundle"/>
    </target>
 
    <target name="convert-netbeans-bundle" depends="convert-zip-to-tgz"/>

    <target name="convert-zip-to-tgz" depends="init-zip-to-tgz,perform-zip-to-tgz"/>

    <target name="init-zip-to-tgz">
        <condition property="convert.zip.to.tgz">
            <contains string="${bundle.platform}" substring="macos"/>
        </condition>
    </target>

    <target name="perform-zip-to-tgz" if="convert.zip.to.tgz">
        <antcall target="zip-to-tgz">
            <param name="input.file"  value="${bundle.prefix}.${bundle.extension}"/>
            <param name="output.file" value="${bundle.prefix}.tgz"/>
        </antcall>
	<delete file="${bundle.prefix}.${bundle.extension}"/>
     </target>

    <target name="convert-zip-to-dmg" depends="init-zip-to-dmg,perform-zip-to-dmg"/>

    <target name="init-zip-to-dmg">
        <condition property="convert.zip.to.dmg">
            <contains string="${bundle.platform}" substring="macos"/>
        </condition>
    </target>

    <target name="perform-zip-to-dmg" if="convert.zip.to.dmg">
         <antcall target="zip-to-dmg">
             <param name="input.file"   value="${bundle.prefix}.${bundle.extension}"/>
             <param name="output.file"  value="${bundle.prefix}.dmg"/>
             <param name="dmg.name"     value="${bundle.dmg.name}"/>
         </antcall>        
	 <delete file="${bundle.prefix}.${bundle.extension}"/>
    </target>


    <target name="generate-netbeans-javase-bundles">
        <!-- JavaSE bundles -->        
	<antcall target="generate-netbeans-javase-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-javase-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-javase-bundle">	
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-javase-bundle">	
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-javase-bundle">	
	    <param name="bundle.platform"  value="macosx-x86"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-netbeans-javase-bundle">	
	    <param name="bundle.platform"  value="macosx-ppc"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>


    <target name="generate-netbeans-javaee-bundles">
        <!-- JavaEE bundles -->        
	<antcall target="generate-netbeans-javaee-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-javaee-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-javaee-bundle">	
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-javaee-bundle">	
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-javaee-bundle">	
	    <param name="bundle.platform"  value="macosx-x86"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-netbeans-javaee-bundle">	
	    <param name="bundle.platform"  value="macosx-ppc"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>


    <target name="generate-netbeans-java-bundles">
        <!-- JavaEE bundles -->        
	<antcall target="generate-netbeans-java-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-java-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-java-bundle">	
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-java-bundle">	
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-java-bundle">	
	    <param name="bundle.platform"  value="macosx-x86"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-netbeans-java-bundle">	
	    <param name="bundle.platform"  value="macosx-ppc"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>


    <target name="generate-netbeans-javame-bundles">
        <!-- JavaME bundles (only for windows and linux) -->
	<antcall target="generate-netbeans-javame-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-javame-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
    </target>
   
    <target name="generate-netbeans-ruby-bundles">
        <!-- Ruby bundles -->
	<antcall target="generate-netbeans-ruby-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-ruby-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-ruby-bundle">	
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-ruby-bundle">	
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-ruby-bundle">	
	    <param name="bundle.platform"  value="macosx-x86"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-netbeans-ruby-bundle">	
	    <param name="bundle.platform"  value="macosx-ppc"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>

    <target name="generate-netbeans-cpp-bundles">
        <!-- CPP bundles -->
	<antcall target="generate-netbeans-cpp-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-cpp-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-cpp-bundle">	
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-cpp-bundle">	
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-cpp-bundle">	
	    <param name="bundle.platform"  value="macosx-x86"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-netbeans-cpp-bundle">	
	    <param name="bundle.platform"  value="macosx-ppc"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>

    
    <target name="generate-netbeans-php-bundles">
        <!-- PHP bundles -->
	<antcall target="generate-netbeans-php-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-php-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-php-bundle">	
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-php-bundle">	
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-php-bundle">	
	    <param name="bundle.platform"  value="macosx-x86"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-netbeans-php-bundle">	
	    <param name="bundle.platform"  value="macosx-ppc"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>


    <target name="generate-netbeans-full-bundles">
        <!-- Full bundles -->
	<antcall target="generate-netbeans-full-bundle">	
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-netbeans-full-bundle">	
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-full-bundle">	
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-full-bundle">	
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-netbeans-full-bundle">	
	    <param name="bundle.platform"  value="macosx-x86"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-netbeans-full-bundle">	
	    <param name="bundle.platform"  value="macosx-ppc"/>
	    <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>

  

    <target name="init-jtb-bundles" if="do.build.jtb">
	<set property="jtb.output.dir"
             value="${nb.bundles.output.dir}"/>

        <mkdir dir="${jtb.output.dir}"/>
        <antcall target="build-netbeans-engine">
		<param name="netbeans.engine.branding.kit" value="jtb"/>
	</antcall>
    </target>


    <target name="generate-javatoolsbundle-bundle">
	<property name="bundle.prefix" 
             value="${nb.bundles.output.dir}/${jtb.bundles.prefix}-${bundle.platform}"/>

        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${bundle.prefix}.${bundle.extension}">
            <component uid="nb-base"               version="${nb.full.version}"/>
            <component uid="nb-javase"             version="${nb.full.version}"/>
            <component uid="nb-webcommon"          version="${nb.full.version}"/>
            <component uid="nb-javaee"             version="${nb.full.version}"/>
            <component uid="nb-soa"                version="${nb.full.version}"/>
            <component uid="nb-portalpack"         version="2.0.1.0.${portalpack.build.number}"/>            
            <component uid="sjsas"                 version="9.1.2.${sjsas.milestone.number}.${sjsas.build.number}"/>            
            <component uid="openesb"               version="5.0.5.${glassfish.milestone.number}.${openesb.build.number}"/>	                
            <component uid="sjsam"                 version="5.0.6.${sjsas.milestone.number}.${sjsam.build.number}"/>
	    <component uid="javaeesdk-samples"     version="1.0.${javaeesdk-samples.update.number}.${javaeesdk-samples.milestone.number}.${javaeesdk-samples.build.number}"/>
            <component uid="javaeesdk-blueprints"  version="1.0.${javaeesdk-blueprints.update.number}.${javaeesdk-blueprints.milestone.number}.${javaeesdk-blueprints.build.number}"/>
	    <component uid="javaeesdk-firstcup"    version="${javaeesdk-firstcup.macro.number}.${javaeesdk-firstcup.micro.number}.0.${javaeesdk-firstcup.milestone.number}.${javaeesdk-firstcup.build.number}"/>
	    <!--component uid="javaeesdk-javadocs" version="1.0.0.0.${javaeesdk-javadocs.build.number}"/-->
	    <component uid="portletcontainer"      version="${portletcontainer.macro.number}.${portletcontainer.micro.number}.${portletcontainer.minor.number}.${portletcontainer.milestone.number}.${portletcontainer.build.number}"/>
	    <component uid="wsrp"                  version="${wsrp.macro.number}.${wsrp.micro.number}.0.${wsrp.milestone.number}.${wsrp.build.number}"/>
	    <bundleProperty name="${welcome.type}" value="java.tools"/>            
            <bundleProperty name="nbi.overall.license.resource" value="$S{nbi.overall.license.jtb.resource}"/>
        </create-bundle>

	<antcall target="convert-javatoolsbundle"/>	
    </target>

    <target name="convert-javatoolsbundle" depends="convert-zip-to-dmg"/>	

    <target name="generate-javatoolsbundle-bundles" depends="init-jtb-bundles" if="do.build.jtb">
	<!-- Java Tools Bundle installer -->
        <set property="jtb.bundles.prefix" value="java-tools-bundle-update6"/>
        <set property="bundle.dmg.name"    value="Java EE 5 Tools Bundle Update 6"/>

	<antcall target="generate-javatoolsbundle-bundle">
               <param name="bundle.platform"  value="windows"/>
               <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-javatoolsbundle-bundle">
               <param name="bundle.platform"  value="linux"/>
               <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-javatoolsbundle-bundle">
               <param name="bundle.platform"  value="solaris-x86"/>
               <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-javatoolsbundle-bundle">
               <param name="bundle.platform"  value="solaris-sparc"/>
               <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-javatoolsbundle-bundle">
               <param name="bundle.platform"  value="macosx-x86"/>
               <param name="bundle.extension" value="zip"/>
        </antcall>
	<antcall target="generate-javatoolsbundle-bundle">
               <param name="bundle.platform"  value="macosx-ppc"/>
               <param name="bundle.extension" value="zip"/>
        </antcall>
    </target>

    <target name="init-mysql-bundles" if="do.build.mysql">
        <antcall target="build-netbeans-engine">
		<param name="netbeans.engine.branding.kit" value="mysql"/>
	</antcall>
    </target>

    <target name="generate-mysql-bundle">
	<create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${nb.bundles.output.dir}/${nb.bundle.files.prefix}-mysql-${bundle.platform}.${bundle.extension}">
            <component uid="nb-base"         version="${nb.full.version}"/>
            <component uid="nb-javase"       version="${nb.full.version}"/>
            <component uid="nb-webcommon"    version="${nb.full.version}"/>
            <component uid="nb-javaee"       version="${nb.full.version}"/>
            <component uid="nb-ruby"         version="${nb.full.version}"/>
            <component uid="glassfish"       version="2.0.2.${glassfish.milestone.number}.${glassfish.build.number}"/>
            <component uid="mysql"           version="5.0.67.0.0"/>
            <component uid="mysql-connector" version="5.1.6.0.0"/>
	    <bundleProperty name="${welcome.type}" value="mysql"/>
            <bundleProperty name="nbi.overall.license.resource" value="$S{nbi.overall.license.mysql.resource}"/>
        </create-bundle>
    </target>


    <target name="generate-mysql-bundles" depends="init-mysql-bundles" if="do.build.mysql">
	<antcall target="generate-mysql-bundle">
	    <param name="bundle.platform"  value="windows"/>
	    <param name="bundle.extension" value="exe"/>
        </antcall>
	<antcall target="generate-mysql-bundle">
	    <param name="bundle.platform"  value="linux"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-mysql-bundle">
	    <param name="bundle.platform"  value="solaris-x86"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
	<antcall target="generate-mysql-bundle">
	    <param name="bundle.platform"  value="solaris-sparc"/>
	    <param name="bundle.extension" value="sh"/>
        </antcall>
    </target>

    <target name="init-bundled-jvms" if="do.build.jdk">
        <set property="jvm.cache.dir" 
             value="${nbi.cache.dir}/jvm"/>
	<mkdir dir="${jvm.cache.dir}"/>
    </target>

    <target name="get-bundled-jvm" if="do.build.jdk">
	<get src="${binary.cache.host}/bundledjvm/${bundled.jvm.file.prefix}-${bundled.jvm.file.suffix}"
	     dest="${jvm.cache.dir}/${bundled.jvm.file.prefix}-${bundled.jvm.file.suffix}"
	     usetimestamp="true"/>
    </target>


    <target name="init-jdk-bundles" if="do.build.jdk">
	<set property="jdk.output.dir"
             value="${nb.bundles.output.dir}/jdk"/>

        <mkdir dir="${jdk.output.dir}"/>
        <antcall target="build-netbeans-engine">
		<param name="netbeans.engine.branding.kit" value="jdk"/>
	</antcall>
    </target>

    <target name="generate-jdk5-bundles" if="do.build.jdk5">
	<!-- JavaSE + JDK5 bundles -->
	<antcall target="generate-jdk-bundle-single">
	    <param name="jdk.bundle.files.prefix"     value="jdk-1_5_0_16"/>
	    <param name="jdk.full.version"            value="1.5.0.16.2"/>
      	    <param name="bundled.jvm.file.prefix"     value="jre-1_5_0_15"/>
    	    <param name="license.resource"            value="$S{nbi.overall.license.jdk5.resource}"/>
	</antcall>
    </target>

    <target name="generate-jdk6-bundles" if="do.build.jdk6">
        <!-- JavaSE + JDK6 bundles -->
	<antcall target="generate-jdk-bundle-single">
	    <param name="jdk.bundle.files.prefix"     value="jdk-6u10"/>
	    <param name="jdk.full.version"            value="1.6.0.10.30"/>
            <param name="bundled.jvm.file.prefix"     value="jre-6u7"/>
	    <param name="license.resource"            value="$S{nbi.overall.license.jdk6.resource}"/>
	</antcall>
    </target>

    <target name="generate-jdk-bundle"  depends="get-bundled-jvm">
        <create-bundle root="${output.dir}/registry-temp" 
                       platform="${bundle.platform}" 
                       target="${jdk.output.dir}/${jdk.bundle.files.prefix}-${jdk.bundle.files.suffix}-${bundle.platform}${nb.build.suffix}${bundle.extension}">
            <component uid="nb-base"   version="${nb.full.version}"/>
            <component uid="nb-javase" version="${nb.full.version}"/>
	    <component uid="jdk"       version="${jdk.full.version}"/>
	    <bundleProperty name="${welcome.type}" value="javase.jdk"/>
            <bundleProperty name="nbi.overall.license.resource" value="${license.resource}"/>
	    <property name="nbi.bundled.jvm.file" value="${jvm.cache.dir}/${bundled.jvm.file.prefix}-${bundled.jvm.file.suffix}"/>
        </create-bundle>
    </target>

    <target name="generate-jdk-bundle-single">
	<antcall target="generate-jdk-bundle">
		<param name="bundle.platform"           value="windows"/>
		<param name="bundle.extension"		value=".exe"/>
		<param name="bundled.jvm.file.suffix"   value="windows-i586.exe"/>
	</antcall>
	<antcall target="generate-jdk-bundle">
		<param name="bundle.platform"           value="linux"/>
		<param name="bundle.extension"		value=".sh"/>
		<param name="bundled.jvm.file.suffix"   value="linux-i586.bin"/>
	</antcall>

	<antcall target="generate-jdk-bundle">
		<param name="bundle.platform"           value="solaris-x86"/>
		<param name="bundle.extension"		value=".sh"/>
		<param name="bundled.jvm.file.suffix"   value="solaris-i586.sh"/>
	</antcall>
	<antcall target="generate-jdk-bundle">
		<param name="bundle.platform"           value="solaris-sparc"/>
		<param name="bundle.extension"		value=".sh"/>
		<param name="bundled.jvm.file.suffix"   value="solaris-sparc.sh"/>
	</antcall>
    </target>


    <target name="zip-to-tgz">
	<set property="tar.tmpdir"
             value="${nb.bundles.output.dir}/tempdir"/>

	<mkdir dir="${tar.tmpdir}"/>

	<unzip 
		src="${input.file}"
		dest="${tar.tmpdir}"/>

        <tar tarfile="${output.file}" 
             compression="gzip">
            <tarfileset dir="${tar.tmpdir}" mode="644">
                <include name="**/*.*"/>
		<exclude name="**/executable"/>
            </tarfileset>
	    <tarfileset dir="${tar.tmpdir}" mode="755">
		<include name="**/executable"/>
            </tarfileset>
        </tar>
	<delete dir="${tar.tmpdir}"/>
    </target>
    <target name="zip-to-dmg"> 
	<antcall target="zip-to-tgz">
            <param name="input.file"  value="${input.file}"/>
            <param name="output.file" value="${input.file}.tgz"/>
        </antcall>
	<antcall target="tgz-to-dmg">
            <param name="input.file"  value="${input.file}.tgz"/>
            <param name="output.file" value="${output.file}"/>
        </antcall>
	<delete file="${input.file}.tgz"/>
    </target>

    <target name="tgz-to-dmg">        
	<echo message="Creating directory structure at MacOS system"/>	
        <echo message=""/>
	<property name="temp.build.directory" value="~/.nbi-build"/>

        <sshexec host="${makedmg.remote.host}"
                 username="${makedmg.remote.user}"
		 port="${makedmg.remote.port}"
                 command="mkdir -p ${temp.build.directory}/src ${temp.build.directory}/tmp ${temp.build.directory}/dmg"
                 verbose="true"
                 trust="true"
                 keyfile="${makedmg.ssh.keyfile}"
                 passphrase="${makedmg.ssh.keypass}"/>

	<echo message=""/>
	<echo message="Copying file ${input.file} to the MacOS system"/>
	<scp keyfile="${makedmg.ssh.keyfile}"
             passphrase="${makedmg.ssh.keypass}"
             verbose="true"
             trust="true"
             remoteTofile="${makedmg.remote.user}@${makedmg.remote.host}:${temp.build.directory}/src/temp.tgz"
	     file="${input.file}"/>

	<echo message=""/>
	<echo message="Untar archive to temporary directory"/>

	<sshexec host="${makedmg.remote.host}"
                 username="${makedmg.remote.user}"
		 port="${makedmg.remote.port}"
                 command="cd ${temp.build.directory}/tmp; tar -xzvf ${temp.build.directory}/src/temp.tgz; rm -rf ${temp.build.directory}/src"
                 verbose="true"
                 trust="true"
                 keyfile="${makedmg.ssh.keyfile}"
                 passphrase="${makedmg.ssh.keypass}"/>

	<echo message=""/>
	<echo message="Create DMG from the source folder"/>
        
        <sshexec host="${makedmg.remote.host}"
                 username="${makedmg.remote.user}"
		 port="${makedmg.remote.port}"
                 command="hdiutil create -fs HFS+ -srcfolder ${temp.build.directory}/tmp -volname &quot;${dmg.name}&quot; ${temp.build.directory}/dmg/image.dmg"
                 verbose="true"
                 trust="true"
                 keyfile="${makedmg.ssh.keyfile}"
                 passphrase="${makedmg.ssh.keypass}"/>

        <echo message=""/>
	<echo message="Copying file image.dmg back to the build system"/>
        
	<scp keyfile="${makedmg.ssh.keyfile}"
             passphrase="${makedmg.ssh.keypass}"
             verbose="true"
             trust="true"
             localTofile="${output.file}"
	     file="${makedmg.remote.user}@${makedmg.remote.host}:${temp.build.directory}/dmg/image.dmg"/>

	<echo message=""/>
	<echo message="Clear temporary build directory on MacOS system"/>

	<sshexec host="${makedmg.remote.host}"
                 username="${makedmg.remote.user}"
		 port="${makedmg.remote.port}"
                 command="rm -rf ${temp.build.directory}"
                 verbose="true"
                 trust="true"
                 keyfile="${makedmg.ssh.keyfile}"
                 passphrase="${makedmg.ssh.keypass}"/>

    </target>

    <target name="replace">
        <property file="${token.file}"/>
        <replaceregexp file="${file.to.replace}" flags="mg">
            <regexp pattern="${regexp.token}"/>
            <substitution expression="${regexp.replacement}"/>
        </replaceregexp>
    </target>
</project>
