/*
 * HibernateConfigurationWizardPanel.java
 *
 * Created on January 9, 2008, 4:26 PM
 */
package org.netbeans.modules.hibernate.wizards;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.project.Project;
import org.openide.filesystems.FileObject;
import org.openide.util.ChangeSupport;

/**
 *
 * @author  gowri
 */
public class HibernateConfigurationWizardPanel extends javax.swing.JPanel implements ActionListener, DocumentListener {

    private final ChangeSupport changeSupport = new ChangeSupport(this);
    private Project project;

    /** Creates new form HibernateConfigurationWizardPanel */
    public HibernateConfigurationWizardPanel(HibernateConfigurationWizardDescriptor descriptor) {
        initComponents();
        project = descriptor.getProject();
        cmbDialect.setModel(new javax.swing.DefaultComboBoxModel(Util.getDialectCodes()));
        cmbDriver.setModel(new javax.swing.DefaultComboBoxModel(new String[0]));
        cmbURL.setModel(new javax.swing.DefaultComboBoxModel(new String[0]));
        txtConf.getDocument().addDocumentListener(this);
        txtConf.selectAll();
    }

    public boolean isValidPanel() {
        if (!isNameValid()) {
            return false;
        }
        return true;
    }

    /**
     * Checks whether name of the configuration file is valid, i.e. it's not
     * empty and it's unique.
     */
    private boolean isNameValid() {
        return Util.isEmpty(getConfigurationFileName()) ? false : isNameUnique();
    }

    public final boolean isNameUnique() {
        return true;
    }

    private void fillCombos() {
//        int index = cmbDialect.getSelectedIndex();        
//        String strIndex = Integer.toString(index);     
        String strIndex = cmbDialect.getSelectedItem().toString();
        String drivers = Util.getSelectedDriver(strIndex);
        String urlConnection = Util.getSelectedURLConnection(strIndex);
        cmbDriver.setModel(new javax.swing.DefaultComboBoxModel(new String[]{drivers}));
        cmbURL.setModel(new javax.swing.DefaultComboBoxModel(new String[]{urlConnection}));

    }

    public void initValues(FileObject template, FileObject preSelectedFolder, String documentName) {
        if (template != null) {
            if (documentName == null) {
                final String baseName = template.getName();
                documentName = baseName;
                if (preSelectedFolder != null) {
                    int index = 0;
                    while (true) {
                        FileObject _tmp = preSelectedFolder.getFileObject(documentName, template.getExt());
                        if (_tmp == null) {
                            break;
                        }
                        documentName = baseName + ++index;
                    }
                }
            }
            txtConf.setText(documentName);
            txtConf.selectAll();
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txtConf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmbDialect = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbDriver = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbURL = new javax.swing.JComboBox();

        setName(org.openide.util.NbBundle.getMessage(HibernateConfigurationWizardPanel.class, "LBL_HibernateConfigurationPanel_Name")); // NOI18N

        jLabel2.setText(org.openide.util.NbBundle.getMessage(HibernateConfigurationWizardPanel.class, "HibernateConfigurationWizardPanel.jLabel2.text")); // NOI18N

        txtConf.setColumns(40);
        txtConf.setName(""); // NOI18N

        jLabel4.setText(org.openide.util.NbBundle.getMessage(HibernateConfigurationWizardPanel.class, "HibernateConfigurationWizardPanel.jLabel4.text")); // NOI18N

        cmbDialect.setEditable(true);
        cmbDialect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbDialect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDialectActionPerformed(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(HibernateConfigurationWizardPanel.class, "HibernateConfigurationWizardPanel.jLabel5.text")); // NOI18N

        cmbDriver.setEditable(true);
        cmbDriver.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText(org.openide.util.NbBundle.getMessage(HibernateConfigurationWizardPanel.class, "HibernateConfigurationWizardPanel.jLabel6.text")); // NOI18N

        cmbURL.setEditable(true);
        cmbURL.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jLabel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cmbURL, 0, 483, Short.MAX_VALUE)
                    .add(cmbDriver, 0, 483, Short.MAX_VALUE)
                    .add(cmbDialect, 0, 483, Short.MAX_VALUE)
                    .add(txtConf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 483, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(txtConf, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(cmbDialect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(14, 14, 14)
                        .add(jLabel5))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cmbDriver, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(cmbURL, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void cmbDialectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDialectActionPerformed
        // TODO add your handling code here:
        fillCombos();
    }//GEN-LAST:event_cmbDialectActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbDialect;
    private javax.swing.JComboBox cmbDriver;
    private javax.swing.JComboBox cmbURL;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtConf;
    // End of variables declaration//GEN-END:variables
    /**
     * Document listener that invokes <code>checkValidity</code> when
     * changes are made.
     */
    public void changedUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    public void insertUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    public void removeUpdate(DocumentEvent e) {
        changeSupport.fireChange();
    }

    public void actionPerformed(ActionEvent e) {
    }

    public void addChangeListener(ChangeListener l) {
        changeSupport.addChangeListener(l);
    }

    public void removeChangeListener(ChangeListener l) {
        changeSupport.removeChangeListener(l);
    }

    public String getConfigurationFileName() {
        return txtConf.getText();
    }

    public String getSelectedDialect() {
        if (cmbDialect.getSelectedItem() != null) {
            return Util.getSelectedDialect(cmbDialect.getSelectedItem().toString());
        }
        return null;
    }

    public String getSelectedDriver() {
        if (cmbDriver.getSelectedItem() != null) {
            return cmbDriver.getSelectedItem().toString();
        }
        return null;
    }

    public String getSelectedURL() {
        if (cmbURL.getSelectedItem() != null) {
            return cmbURL.getSelectedItem().toString();
        }
        return null;

    }
}
