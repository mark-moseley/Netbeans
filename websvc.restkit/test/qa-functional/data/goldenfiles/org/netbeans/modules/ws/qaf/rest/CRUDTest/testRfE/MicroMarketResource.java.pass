/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package o.n.m.ws.qaf.rest.crud.service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.ProduceMime;
import javax.ws.rs.ConsumeMime;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import com.sun.jersey.api.core.ResourceContext;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import o.n.m.ws.qaf.rest.crud.MicroMarket;
import o.n.m.ws.qaf.rest.crud.converter.MicroMarketConverter;

/**
 *
 * @author lukas
 */

public class MicroMarketResource {
    @Context
    protected UriInfo uriInfo;
    @Context
    protected ResourceContext resourceContext;
    protected String id;
  
    /** Creates a new instance of MicroMarketResource */
    public MicroMarketResource() {
    }

    public void setId(String id) {
        this.id = id;
    }

    /**
     * Get method for retrieving an instance of MicroMarket identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of MicroMarketConverter
     */
    @GET
    @ProduceMime({"application/xml", "application/json"})
    public MicroMarketConverter get(@QueryParam("expandLevel")
    @DefaultValue("1")
    int expandLevel) {
        try {
            return new MicroMarketConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
        } finally {
            PersistenceService.getInstance().close();
        }
    }

    /**
     * Put method for updating an instance of MicroMarket identified by id using XML as the input format.
     *
     * @param id identifier for the entity
     * @param data an MicroMarketConverter entity that is deserialized from a XML stream
     */
    @PUT
    @ConsumeMime({"application/xml", "application/json"})
    public void put(MicroMarketConverter data) {
        PersistenceService persistenceSvc = PersistenceService.getInstance();
        try {
            persistenceSvc.beginTx();
            EntityManager em = persistenceSvc.getEntityManager();
            updateEntity(getEntity(), data.resolveEntity(em));
            persistenceSvc.commitTx();
        } finally {
            persistenceSvc.close();
        }
    }

    /**
     * Delete method for deleting an instance of MicroMarket identified by id.
     *
     * @param id identifier for the entity
     */
    @DELETE
    public void delete() {
        PersistenceService persistenceSvc = PersistenceService.getInstance();
        try {
            persistenceSvc.beginTx();
            deleteEntity(getEntity());
            persistenceSvc.commitTx();
        } finally {
            persistenceSvc.close();
        }
    }

    /**
     * Returns an instance of MicroMarket identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of MicroMarket
     */
    protected MicroMarket getEntity() {
        EntityManager em = PersistenceService.getInstance().getEntityManager();
        try {
            return (MicroMarket) em.createQuery("SELECT e FROM MicroMarket e where e.zipCode = :zipCode").setParameter("zipCode", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable("Resource for " + uriInfo.getAbsolutePath() + " does not exist."), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    protected MicroMarket updateEntity(MicroMarket entity, MicroMarket newEntity) {
        EntityManager em = PersistenceService.getInstance().getEntityManager();
        entity = em.merge(newEntity);
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    protected void deleteEntity(MicroMarket entity) {
        EntityManager em = PersistenceService.getInstance().getEntityManager();
        em.remove(entity);
    }
}
