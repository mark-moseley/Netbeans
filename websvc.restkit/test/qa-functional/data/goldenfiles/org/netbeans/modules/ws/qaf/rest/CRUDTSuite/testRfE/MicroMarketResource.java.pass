/*
 *  MicroMarketResource
 *
 * Created on December 6, 2007, 2:14 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package o.n.m.ws.qaf.rest.crud.service;

import javax.ws.rs.Path;
import javax.ws.rs.UriParam;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.ProduceMime;
import javax.ws.rs.ConsumeMime;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.ws.rs.core.UriInfo;
import o.n.m.ws.qaf.rest.crud.MicroMarket;
import o.n.m.ws.qaf.rest.crud.converter.MicroMarketConverter;


/**
 *
 * @author lukas
 */

public class MicroMarketResource {
    private UriInfo context;
    
    /** Creates a new instance of MicroMarketResource */
    public MicroMarketResource() {
    }

    /**
     * Constructor used for instantiating an instance of dynamic resource.
     *
     * @param context HttpContext inherited from the parent resource
     */
    public MicroMarketResource(UriInfo context) {
        this.context = context;
    }

    /**
     * Get method for retrieving an instance of MicroMarket identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of MicroMarketConverter
     */
    @GET
    @ProduceMime({"application/xml", "application/json"})
    public MicroMarketConverter get(@UriParam("zipCode")
    String id) {
        try {
            return new MicroMarketConverter(getEntity(id), context.getAbsolutePath());
        } finally {
            PersistenceService.getInstance().close();
        }
    }

    /**
     * Put method for updating an instance of MicroMarket identified by id using XML as the input format.
     *
     * @param id identifier for the entity
     * @param data an MicroMarketConverter entity that is deserialized from a XML stream
     */
    @PUT
    @ConsumeMime({"application/xml", "application/json"})
    public void put(@UriParam("zipCode")
    String id, MicroMarketConverter data) {
        PersistenceService service = PersistenceService.getInstance();
        try {
            service.beginTx();
            updateEntity(getEntity(id), data.getEntity());
            service.commitTx();
        } finally {
            service.close();
        }
    }

    /**
     * Delete method for deleting an instance of MicroMarket identified by id.
     *
     * @param id identifier for the entity
     */
    @DELETE
    public void delete(@UriParam("zipCode")
    String id) {
        PersistenceService service = PersistenceService.getInstance();
        try {
            service.beginTx();
            MicroMarket entity = getEntity(id);
            service.removeEntity(entity);
            service.commitTx();
        } finally {
            service.close();
        }
    }

    /**
     * Returns an instance of MicroMarket identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of MicroMarket
     */
    protected MicroMarket getEntity(String id) {
        try {
            return (MicroMarket) PersistenceService.getInstance().createQuery("SELECT e FROM MicroMarket e where e.zipCode = :zipCode").setParameter("zipCode", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable("Resource for " + context.getAbsolutePath() + " does not exist."), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    protected MicroMarket updateEntity(MicroMarket entity, MicroMarket newEntity) {
        newEntity.setZipCode(entity.getZipCode());
        entity = PersistenceService.getInstance().mergeEntity(newEntity);
        return entity;
    }
}
