/*
 *  ProductResource
 *
 * Created on July 8, 2008, 10:54 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package o.n.m.ws.qaf.rest.crud.service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.ProduceMime;
import javax.ws.rs.ConsumeMime;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import java.util.Collection;
import javax.ws.rs.core.UriInfo;
import o.n.m.ws.qaf.rest.crud.Product;
import o.n.m.ws.qaf.rest.crud.ProductCode;
import o.n.m.ws.qaf.rest.crud.PurchaseOrder;
import o.n.m.ws.qaf.rest.crud.Manufacturer;
import o.n.m.ws.qaf.rest.crud.converter.ProductConverter;


/**
 *
 * @author lukas
 */

public class ProductResource {
    private Integer id;
    private UriInfo context;
    
    /** Creates a new instance of ProductResource */
    public ProductResource() {
    }

    /**
     * Constructor used for instantiating an instance of dynamic resource.
     *
     * @param context HttpContext inherited from the parent resource
     */
    public ProductResource(Integer id, UriInfo context) {
        this.id = id;
        this.context = context;
    }

    /**
     * Get method for retrieving an instance of Product identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of ProductConverter
     */
    @GET
    @ProduceMime({"application/xml", "application/json"})
    public ProductConverter get(@QueryParam("expandLevel")
    @DefaultValue("1")
    int expandLevel) {
        try {
            return new ProductConverter(getEntity(), context.getAbsolutePath(), expandLevel);
        } finally {
            PersistenceService.getInstance().close();
        }
    }

    /**
     * Put method for updating an instance of Product identified by id using XML as the input format.
     *
     * @param id identifier for the entity
     * @param data an ProductConverter entity that is deserialized from a XML stream
     */
    @PUT
    @ConsumeMime({"application/xml", "application/json"})
    public void put(ProductConverter data) {
        PersistenceService persistenceSvc = PersistenceService.getInstance();
        try {
            persistenceSvc.beginTx();
            updateEntity(getEntity(), data.getEntity());
            persistenceSvc.commitTx();
        } finally {
            persistenceSvc.close();
        }
    }

    /**
     * Delete method for deleting an instance of Product identified by id.
     *
     * @param id identifier for the entity
     */
    @DELETE
    public void delete() {
        PersistenceService persistenceSvc = PersistenceService.getInstance();
        try {
            persistenceSvc.beginTx();
            Product entity = getEntity();
            deleteEntity(entity);
            persistenceSvc.commitTx();
        } finally {
            persistenceSvc.close();
        }
    }

    /**
     * Returns a dynamic instance of ManufacturerResource used for entity navigation.
     *
     * @param id identifier for the parent entity
     * @return an instance of ManufacturerResource
     */
    @Path("manufacturerId/")
    public ManufacturerResource getManufacturerIdResource() {
        final Product parent = getEntity();
        return new ManufacturerResource(null, context) {

            @Override
            protected Manufacturer getEntity() {
                Manufacturer entity = parent.getManufacturerId();
                if (entity == null) {
                    throw new WebApplicationException(new Throwable("Resource for " + context.getAbsolutePath() + " does not exist."), 404);
                }
                return entity;
            }
        };
    }

    /**
     * Returns a dynamic instance of ProductCodeResource used for entity navigation.
     *
     * @param id identifier for the parent entity
     * @return an instance of ProductCodeResource
     */
    @Path("productCode/")
    public ProductCodeResource getProductCodeResource() {
        final Product parent = getEntity();
        return new ProductCodeResource(null, context) {

            @Override
            protected ProductCode getEntity() {
                ProductCode entity = parent.getProductCode();
                if (entity == null) {
                    throw new WebApplicationException(new Throwable("Resource for " + context.getAbsolutePath() + " does not exist."), 404);
                }
                return entity;
            }
        };
    }

    /**
     * Returns a dynamic instance of PurchaseOrdersResource used for entity navigation.
     *
     * @param id identifier for the parent entity
     * @return an instance of PurchaseOrdersResource
     */
    @Path("purchaseOrderCollection/")
    public PurchaseOrdersResource getPurchaseOrderCollectionResource() {
        final Product parent = getEntity();
        return new PurchaseOrdersResource(context) {

            @Override
            protected Collection<PurchaseOrder> getEntities(int start, int max, String query) {
                Collection<PurchaseOrder> result = new java.util.ArrayList<PurchaseOrder>();
                int index = 0;
                for (PurchaseOrder e : parent.getPurchaseOrderCollection()) {
                    if (index >= start && (index - start) < max) {
                        result.add(e);
                    }
                    index++;
                }
                return result;
            }

            @Override
            protected void createEntity(PurchaseOrder entity) {
                super.createEntity(entity);
                entity.setProductId(parent);
            }
        };
    }

    /**
     * Returns an instance of Product identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of Product
     */
    protected Product getEntity() {
        try {
            return (Product) PersistenceService.getInstance().createQuery("SELECT e FROM Product e where e.productId = :productId").setParameter("productId", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable("Resource for " + context.getAbsolutePath() + " does not exist."), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    protected Product updateEntity(Product entity, Product newEntity) {
        Manufacturer manufacturerId = entity.getManufacturerId();
        Manufacturer manufacturerIdNew = newEntity.getManufacturerId();
        ProductCode productCode = entity.getProductCode();
        ProductCode productCodeNew = newEntity.getProductCode();
        Collection<PurchaseOrder> purchaseOrderCollection = entity.getPurchaseOrderCollection();
        Collection<PurchaseOrder> purchaseOrderCollectionNew = newEntity.getPurchaseOrderCollection();
        entity = PersistenceService.getInstance().mergeEntity(newEntity);
        if (manufacturerId != null && !manufacturerId.equals(manufacturerIdNew)) {
            manufacturerId.getProductCollection().remove(entity);
        }
        if (manufacturerIdNew != null && !manufacturerIdNew.equals(manufacturerId)) {
            manufacturerIdNew.getProductCollection().add(entity);
        }
        if (productCode != null && !productCode.equals(productCodeNew)) {
            productCode.getProductCollection().remove(entity);
        }
        if (productCodeNew != null && !productCodeNew.equals(productCode)) {
            productCodeNew.getProductCollection().add(entity);
        }
        for (PurchaseOrder value : purchaseOrderCollection) {
            if (!purchaseOrderCollectionNew.contains(value)) {
                throw new WebApplicationException(new Throwable("Cannot remove items from purchaseOrderCollection"));
            }
        }
        for (PurchaseOrder value : purchaseOrderCollectionNew) {
            if (!purchaseOrderCollection.contains(value)) {
                Product oldEntity = value.getProductId();
                value.setProductId(entity);
                if (oldEntity != null && !oldEntity.equals(entity)) {
                    oldEntity.getPurchaseOrderCollection().remove(value);
                }
            }
        }
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    protected void deleteEntity(Product entity) {
        Manufacturer manufacturerId = entity.getManufacturerId();
        if (manufacturerId != null) {
            manufacturerId.getProductCollection().remove(entity);
        }
        ProductCode productCode = entity.getProductCode();
        if (productCode != null) {
            productCode.getProductCollection().remove(entity);
        }
        if (!entity.getPurchaseOrderCollection().isEmpty()) {
            throw new WebApplicationException(new Throwable("Cannot delete entity because purchaseOrderCollection is not empty."));
        }
        PersistenceService.getInstance().removeEntity(entity);
    }
}
