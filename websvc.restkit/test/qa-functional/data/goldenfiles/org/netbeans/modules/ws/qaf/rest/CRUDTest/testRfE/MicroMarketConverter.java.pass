/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package o.n.m.ws.qaf.rest.crud.converter;

import java.net.URI;
import o.n.m.ws.qaf.rest.crud.MicroMarket;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlAttribute;
import javax.ws.rs.core.UriBuilder;
import javax.persistence.EntityManager;

/**
 *
 * @author lukas
 */

@XmlRootElement(name = "microMarket")
public class MicroMarketConverter {
    private MicroMarket entity;
    private URI uri;
    private int expandLevel;
  
    /** Creates a new instance of MicroMarketConverter */
    public MicroMarketConverter() {
        entity = new MicroMarket();
    }

    /**
     * Creates a new instance of MicroMarketConverter.
     *
     * @param entity associated entity
     * @param uri associated uri
     * @param expandLevel indicates the number of levels the entity graph should be expanded@param isUriExtendable indicates whether the uri can be extended
     */
    public MicroMarketConverter(MicroMarket entity, URI uri, int expandLevel, boolean isUriExtendable) {
        this.entity = entity;
        this.uri = (isUriExtendable) ? UriBuilder.fromUri(uri).path(entity.getZipCode() + "/").build() : uri;
        this.expandLevel = expandLevel;
    }

    /**
     * Creates a new instance of MicroMarketConverter.
     *
     * @param entity associated entity
     * @param uri associated uri
     * @param expandLevel indicates the number of levels the entity graph should be expanded
     */
    public MicroMarketConverter(MicroMarket entity, URI uri, int expandLevel) {
        this(entity, uri, expandLevel, false);
    }

    /**
     * Getter for zipCode.
     *
     * @return value for zipCode
     */
    @XmlElement
    public String getZipCode() {
        return (expandLevel > 0) ? entity.getZipCode() : null;
    }

    /**
     * Setter for zipCode.
     *
     * @param value the value to set
     */
    public void setZipCode(String value) {
        entity.setZipCode(value);
    }

    /**
     * Getter for radius.
     *
     * @return value for radius
     */
    @XmlElement
    public Double getRadius() {
        return (expandLevel > 0) ? entity.getRadius() : null;
    }

    /**
     * Setter for radius.
     *
     * @param value the value to set
     */
    public void setRadius(Double value) {
        entity.setRadius(value);
    }

    /**
     * Getter for areaLength.
     *
     * @return value for areaLength
     */
    @XmlElement
    public Double getAreaLength() {
        return (expandLevel > 0) ? entity.getAreaLength() : null;
    }

    /**
     * Setter for areaLength.
     *
     * @param value the value to set
     */
    public void setAreaLength(Double value) {
        entity.setAreaLength(value);
    }

    /**
     * Getter for areaWidth.
     *
     * @return value for areaWidth
     */
    @XmlElement
    public Double getAreaWidth() {
        return (expandLevel > 0) ? entity.getAreaWidth() : null;
    }

    /**
     * Setter for areaWidth.
     *
     * @param value the value to set
     */
    public void setAreaWidth(Double value) {
        entity.setAreaWidth(value);
    }

    /**
     * Returns the URI associated with this converter.
     *
     * @return the uri
     */
    @XmlAttribute
    public URI getUri() {
        return uri;
    }

    /**
     * Sets the URI for this reference converter.
     *
     */
    public void setUri(URI uri) {
        this.uri = uri;
    }

    /**
     * Returns the MicroMarket entity.
     *
     * @return an entity
     */
    @XmlTransient
    public MicroMarket getEntity() {
        if (entity.getZipCode() == null) {
            MicroMarketConverter converter = UriResolver.getInstance().resolve(MicroMarketConverter.class, uri);
            if (converter != null) {
                entity = converter.getEntity();
            }
        }
        return entity;
    }

    /**
     * Returns the resolved MicroMarket entity.
     *
     * @return an resolved entity
     */
    public MicroMarket resolveEntity(EntityManager em) {
        return entity;
    }
}
