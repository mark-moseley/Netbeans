/*
 *  ProductConverter
 *
 * Created on July 8, 2008, 10:54 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package o.n.m.ws.qaf.rest.crud.converter;

import java.math.BigDecimal;
import java.net.URI;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlAttribute;
import javax.ws.rs.core.UriBuilder;
import o.n.m.ws.qaf.rest.crud.Product;
import o.n.m.ws.qaf.rest.crud.service.PersistenceService;


/**
 *
 * @author lukas
 */

@XmlRootElement(name = "product")
public class ProductConverter {
    private Product entity;
    private URI uri;
    private int expandLevel;
    
    /** Creates a new instance of ProductConverter */
    public ProductConverter() {
    }

    /**
     * Creates a new instance of ProductConverter.
     *
     * @param entity associated entity
     * @param uri associated uri
     * @param expandLevel indicates the number of levels the entity graph should be expanded@param isUriExtendable indicates whether the uri can be extended
     */
    public ProductConverter(Product entity, URI uri, int expandLevel, boolean isUriExtendable) {
        this.entity = entity;
        this.uri = (isUriExtendable) ? UriBuilder.fromUri(uri).path(entity.getProductId() + "/").build() : uri;
        this.expandLevel = expandLevel;
    }

    /**
     * Creates a new instance of ProductConverter.
     *
     * @param entity associated entity
     * @param uri associated uri
     * @param expandLevel indicates the number of levels the entity graph should be expanded
     */
    public ProductConverter(Product entity, URI uri, int expandLevel) {
        this(entity, uri, expandLevel, false);
    }

    /**
     * Getter for productId.
     *
     * @return value for productId
     */
    @XmlElement
    public Integer getProductId() {
        return (expandLevel > 0) ? getEntity().getProductId() : null;
    }

    /**
     * Setter for productId.
     *
     * @param value the value to set
     */
    public void setProductId(Integer value) {
        getEntity().setProductId(value);
    }

    /**
     * Getter for purchaseCost.
     *
     * @return value for purchaseCost
     */
    @XmlElement
    public BigDecimal getPurchaseCost() {
        return (expandLevel > 0) ? getEntity().getPurchaseCost() : null;
    }

    /**
     * Setter for purchaseCost.
     *
     * @param value the value to set
     */
    public void setPurchaseCost(BigDecimal value) {
        getEntity().setPurchaseCost(value);
    }

    /**
     * Getter for quantityOnHand.
     *
     * @return value for quantityOnHand
     */
    @XmlElement
    public Integer getQuantityOnHand() {
        return (expandLevel > 0) ? getEntity().getQuantityOnHand() : null;
    }

    /**
     * Setter for quantityOnHand.
     *
     * @param value the value to set
     */
    public void setQuantityOnHand(Integer value) {
        getEntity().setQuantityOnHand(value);
    }

    /**
     * Getter for markup.
     *
     * @return value for markup
     */
    @XmlElement
    public BigDecimal getMarkup() {
        return (expandLevel > 0) ? getEntity().getMarkup() : null;
    }

    /**
     * Setter for markup.
     *
     * @param value the value to set
     */
    public void setMarkup(BigDecimal value) {
        getEntity().setMarkup(value);
    }

    /**
     * Getter for available.
     *
     * @return value for available
     */
    @XmlElement
    public String getAvailable() {
        return (expandLevel > 0) ? getEntity().getAvailable() : null;
    }

    /**
     * Setter for available.
     *
     * @param value the value to set
     */
    public void setAvailable(String value) {
        getEntity().setAvailable(value);
    }

    /**
     * Getter for description.
     *
     * @return value for description
     */
    @XmlElement
    public String getDescription() {
        return (expandLevel > 0) ? getEntity().getDescription() : null;
    }

    /**
     * Setter for description.
     *
     * @param value the value to set
     */
    public void setDescription(String value) {
        getEntity().setDescription(value);
    }

    /**
     * Getter for manufacturerId.
     *
     * @return value for manufacturerId
     */
    @XmlElement
    public ManufacturerConverter getManufacturerId() {
        if (expandLevel > 0) {
            if (getEntity().getManufacturerId() != null) {
                return new ManufacturerConverter(getEntity().getManufacturerId(), uri.resolve("manufacturerId/"), expandLevel - 1, false);
            }
        }
        return null;
    }

    /**
     * Setter for manufacturerId.
     *
     * @param value the value to set
     */
    public void setManufacturerId(ManufacturerConverter value) {
        getEntity().setManufacturerId((value != null) ? value.resolveEntity() : null);
    }

    /**
     * Getter for productCode.
     *
     * @return value for productCode
     */
    @XmlElement
    public ProductCodeConverter getProductCode() {
        if (expandLevel > 0) {
            if (getEntity().getProductCode() != null) {
                return new ProductCodeConverter(getEntity().getProductCode(), uri.resolve("productCode/"), expandLevel - 1, false);
            }
        }
        return null;
    }

    /**
     * Setter for productCode.
     *
     * @param value the value to set
     */
    public void setProductCode(ProductCodeConverter value) {
        getEntity().setProductCode((value != null) ? value.resolveEntity() : null);
    }

    /**
     * Getter for purchaseOrderCollection.
     *
     * @return value for purchaseOrderCollection
     */
    @XmlElement
    public PurchaseOrdersConverter getPurchaseOrderCollection() {
        if (expandLevel > 0) {
            if (getEntity().getPurchaseOrderCollection() != null) {
                return new PurchaseOrdersConverter(getEntity().getPurchaseOrderCollection(), uri.resolve("purchaseOrderCollection/"), expandLevel - 1);
            }
        }
        return null;
    }

    /**
     * Setter for purchaseOrderCollection.
     *
     * @param value the value to set
     */
    public void setPurchaseOrderCollection(PurchaseOrdersConverter value) {
        getEntity().setPurchaseOrderCollection((value != null) ? value.getEntities() : null);
    }

    /**
     * Returns the URI associated with this converter.
     *
     * @return the uri
     */
    @XmlAttribute
    public URI getUri() {
        return uri;
    }

    /**
     * Sets the URI for this reference converter.
     *
     */
    public void setUri(URI uri) {
        this.uri = uri;
    }

    /**
     * Returns the Product entity.
     *
     * @return an entity
     */
    @XmlTransient
    public Product getEntity() {
        if (entity == null) {
            entity = new Product();
        }
        return entity;
    }

    /**
     * Returns the resolved Product entity.
     *
     * @return an resolved entity
     */
    public Product resolveEntity() {
        if (entity != null) {
            return PersistenceService.getInstance().resolveEntity(Product.class, entity.getProductId());
        } else {
            return (Product) UriResolver.getInstance().resolve(ProductConverter.class, uri);
        }
    }
}
