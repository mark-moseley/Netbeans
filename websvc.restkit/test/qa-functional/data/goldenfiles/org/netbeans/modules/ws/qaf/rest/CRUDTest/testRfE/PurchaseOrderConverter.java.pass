/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package o.n.m.ws.qaf.rest.crud.converter;

import java.math.BigDecimal;
import java.net.URI;
import java.util.Date;
import o.n.m.ws.qaf.rest.crud.PurchaseOrder;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlAttribute;
import javax.ws.rs.core.UriBuilder;
import javax.persistence.EntityManager;
import o.n.m.ws.qaf.rest.crud.Product;
import o.n.m.ws.qaf.rest.crud.Customer;

/**
 *
 * @author lukas
 */

@XmlRootElement(name = "purchaseOrder")
public class PurchaseOrderConverter {
    private PurchaseOrder entity;
    private URI uri;
    private int expandLevel;
  
    /** Creates a new instance of PurchaseOrderConverter */
    public PurchaseOrderConverter() {
        entity = new PurchaseOrder();
    }

    /**
     * Creates a new instance of PurchaseOrderConverter.
     *
     * @param entity associated entity
     * @param uri associated uri
     * @param expandLevel indicates the number of levels the entity graph should be expanded@param isUriExtendable indicates whether the uri can be extended
     */
    public PurchaseOrderConverter(PurchaseOrder entity, URI uri, int expandLevel, boolean isUriExtendable) {
        this.entity = entity;
        this.uri = (isUriExtendable) ? UriBuilder.fromUri(uri).path(entity.getOrderNum() + "/").build() : uri;
        this.expandLevel = expandLevel;
    }

    /**
     * Creates a new instance of PurchaseOrderConverter.
     *
     * @param entity associated entity
     * @param uri associated uri
     * @param expandLevel indicates the number of levels the entity graph should be expanded
     */
    public PurchaseOrderConverter(PurchaseOrder entity, URI uri, int expandLevel) {
        this(entity, uri, expandLevel, false);
    }

    /**
     * Getter for orderNum.
     *
     * @return value for orderNum
     */
    @XmlElement
    public Integer getOrderNum() {
        return (expandLevel > 0) ? entity.getOrderNum() : null;
    }

    /**
     * Setter for orderNum.
     *
     * @param value the value to set
     */
    public void setOrderNum(Integer value) {
        entity.setOrderNum(value);
    }

    /**
     * Getter for quantity.
     *
     * @return value for quantity
     */
    @XmlElement
    public Short getQuantity() {
        return (expandLevel > 0) ? entity.getQuantity() : null;
    }

    /**
     * Setter for quantity.
     *
     * @param value the value to set
     */
    public void setQuantity(Short value) {
        entity.setQuantity(value);
    }

    /**
     * Getter for shippingCost.
     *
     * @return value for shippingCost
     */
    @XmlElement
    public BigDecimal getShippingCost() {
        return (expandLevel > 0) ? entity.getShippingCost() : null;
    }

    /**
     * Setter for shippingCost.
     *
     * @param value the value to set
     */
    public void setShippingCost(BigDecimal value) {
        entity.setShippingCost(value);
    }

    /**
     * Getter for salesDate.
     *
     * @return value for salesDate
     */
    @XmlElement
    public Date getSalesDate() {
        return (expandLevel > 0) ? entity.getSalesDate() : null;
    }

    /**
     * Setter for salesDate.
     *
     * @param value the value to set
     */
    public void setSalesDate(Date value) {
        entity.setSalesDate(value);
    }

    /**
     * Getter for shippingDate.
     *
     * @return value for shippingDate
     */
    @XmlElement
    public Date getShippingDate() {
        return (expandLevel > 0) ? entity.getShippingDate() : null;
    }

    /**
     * Setter for shippingDate.
     *
     * @param value the value to set
     */
    public void setShippingDate(Date value) {
        entity.setShippingDate(value);
    }

    /**
     * Getter for freightCompany.
     *
     * @return value for freightCompany
     */
    @XmlElement
    public String getFreightCompany() {
        return (expandLevel > 0) ? entity.getFreightCompany() : null;
    }

    /**
     * Setter for freightCompany.
     *
     * @param value the value to set
     */
    public void setFreightCompany(String value) {
        entity.setFreightCompany(value);
    }

    /**
     * Getter for customerId.
     *
     * @return value for customerId
     */
    @XmlElement
    public CustomerConverter getCustomerId() {
        if (expandLevel > 0) {
            if (entity.getCustomerId() != null) {
                return new CustomerConverter(entity.getCustomerId(), uri.resolve("customerId/"), expandLevel - 1, false);
            }
        }
        return null;
    }

    /**
     * Setter for customerId.
     *
     * @param value the value to set
     */
    public void setCustomerId(CustomerConverter value) {
        entity.setCustomerId((value != null) ? value.getEntity() : null);
    }

    /**
     * Getter for productId.
     *
     * @return value for productId
     */
    @XmlElement
    public ProductConverter getProductId() {
        if (expandLevel > 0) {
            if (entity.getProductId() != null) {
                return new ProductConverter(entity.getProductId(), uri.resolve("productId/"), expandLevel - 1, false);
            }
        }
        return null;
    }

    /**
     * Setter for productId.
     *
     * @param value the value to set
     */
    public void setProductId(ProductConverter value) {
        entity.setProductId((value != null) ? value.getEntity() : null);
    }

    /**
     * Returns the URI associated with this converter.
     *
     * @return the uri
     */
    @XmlAttribute
    public URI getUri() {
        return uri;
    }

    /**
     * Sets the URI for this reference converter.
     *
     */
    public void setUri(URI uri) {
        this.uri = uri;
    }

    /**
     * Returns the PurchaseOrder entity.
     *
     * @return an entity
     */
    @XmlTransient
    public PurchaseOrder getEntity() {
        if (entity.getOrderNum() == null) {
            PurchaseOrderConverter converter = UriResolver.getInstance().resolve(PurchaseOrderConverter.class, uri);
            if (converter != null) {
                entity = converter.getEntity();
            }
        }
        return entity;
    }

    /**
     * Returns the resolved PurchaseOrder entity.
     *
     * @return an resolved entity
     */
    public PurchaseOrder resolveEntity(EntityManager em) {
        Customer customerId = entity.getCustomerId();
        if (customerId != null) {
            entity.setCustomerId(em.getReference(Customer.class, customerId.getCustomerId()));
        }
        Product productId = entity.getProductId();
        if (productId != null) {
            entity.setProductId(em.getReference(Product.class, productId.getProductId()));
        }
        return entity;
    }
}
