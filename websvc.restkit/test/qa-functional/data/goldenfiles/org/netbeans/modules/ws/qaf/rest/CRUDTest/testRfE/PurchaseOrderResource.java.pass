/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package o.n.m.ws.qaf.rest.crud.service;

import javax.ws.rs.Path;
import javax.ws.rs.GET;
import javax.ws.rs.PUT;
import javax.ws.rs.DELETE;
import javax.ws.rs.ProduceMime;
import javax.ws.rs.ConsumeMime;
import javax.ws.rs.QueryParam;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.UriInfo;
import com.sun.jersey.api.core.ResourceContext;
import javax.ws.rs.WebApplicationException;
import javax.persistence.NoResultException;
import javax.persistence.EntityManager;
import o.n.m.ws.qaf.rest.crud.Product;
import o.n.m.ws.qaf.rest.crud.Customer;
import o.n.m.ws.qaf.rest.crud.PurchaseOrder;
import o.n.m.ws.qaf.rest.crud.converter.PurchaseOrderConverter;

/**
 *
 * @author lukas
 */

public class PurchaseOrderResource {
    @Context
    protected UriInfo uriInfo;
    @Context
    protected ResourceContext resourceContext;
    protected Integer id;
  
    /** Creates a new instance of PurchaseOrderResource */
    public PurchaseOrderResource() {
    }

    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Get method for retrieving an instance of PurchaseOrder identified by id in XML format.
     *
     * @param id identifier for the entity
     * @return an instance of PurchaseOrderConverter
     */
    @GET
    @ProduceMime({"application/xml", "application/json"})
    public PurchaseOrderConverter get(@QueryParam("expandLevel")
    @DefaultValue("1")
    int expandLevel) {
        try {
            return new PurchaseOrderConverter(getEntity(), uriInfo.getAbsolutePath(), expandLevel);
        } finally {
            PersistenceService.getInstance().close();
        }
    }

    /**
     * Put method for updating an instance of PurchaseOrder identified by id using XML as the input format.
     *
     * @param id identifier for the entity
     * @param data an PurchaseOrderConverter entity that is deserialized from a XML stream
     */
    @PUT
    @ConsumeMime({"application/xml", "application/json"})
    public void put(PurchaseOrderConverter data) {
        PersistenceService persistenceSvc = PersistenceService.getInstance();
        try {
            persistenceSvc.beginTx();
            EntityManager em = persistenceSvc.getEntityManager();
            updateEntity(getEntity(), data.resolveEntity(em));
            persistenceSvc.commitTx();
        } finally {
            persistenceSvc.close();
        }
    }

    /**
     * Delete method for deleting an instance of PurchaseOrder identified by id.
     *
     * @param id identifier for the entity
     */
    @DELETE
    public void delete() {
        PersistenceService persistenceSvc = PersistenceService.getInstance();
        try {
            persistenceSvc.beginTx();
            deleteEntity(getEntity());
            persistenceSvc.commitTx();
        } finally {
            persistenceSvc.close();
        }
    }

    /**
     * Returns an instance of PurchaseOrder identified by id.
     *
     * @param id identifier for the entity
     * @return an instance of PurchaseOrder
     */
    protected PurchaseOrder getEntity() {
        EntityManager em = PersistenceService.getInstance().getEntityManager();
        try {
            return (PurchaseOrder) em.createQuery("SELECT e FROM PurchaseOrder e where e.orderNum = :orderNum").setParameter("orderNum", id).getSingleResult();
        } catch (NoResultException ex) {
            throw new WebApplicationException(new Throwable("Resource for " + uriInfo.getAbsolutePath() + " does not exist."), 404);
        }
    }

    /**
     * Updates entity using data from newEntity.
     *
     * @param entity the entity to update
     * @param newEntity the entity containing the new data
     * @return the updated entity
     */
    protected PurchaseOrder updateEntity(PurchaseOrder entity, PurchaseOrder newEntity) {
        EntityManager em = PersistenceService.getInstance().getEntityManager();
        Customer customerId = entity.getCustomerId();
        Customer customerIdNew = newEntity.getCustomerId();
        Product productId = entity.getProductId();
        Product productIdNew = newEntity.getProductId();
        entity = em.merge(newEntity);
        if (customerId != null && !customerId.equals(customerIdNew)) {
            customerId.getPurchaseOrderCollection().remove(entity);
        }
        if (customerIdNew != null && !customerIdNew.equals(customerId)) {
            customerIdNew.getPurchaseOrderCollection().add(entity);
        }
        if (productId != null && !productId.equals(productIdNew)) {
            productId.getPurchaseOrderCollection().remove(entity);
        }
        if (productIdNew != null && !productIdNew.equals(productId)) {
            productIdNew.getPurchaseOrderCollection().add(entity);
        }
        return entity;
    }

    /**
     * Deletes the entity.
     *
     * @param entity the entity to deletle
     */
    protected void deleteEntity(PurchaseOrder entity) {
        EntityManager em = PersistenceService.getInstance().getEntityManager();
        Customer customerId = entity.getCustomerId();
        if (customerId != null) {
            customerId.getPurchaseOrderCollection().remove(entity);
        }
        Product productId = entity.getProductId();
        if (productId != null) {
            productId.getPurchaseOrderCollection().remove(entity);
        }
        em.remove(entity);
    }

    /**
     * Returns a dynamic instance of CustomerResource used for entity navigation.
     *
     * @param id identifier for the parent entity
     * @return an instance of CustomerResource
     */
    @Path("customerId/")
    public CustomerResource getCustomerIdResource() {
        CustomerIdResourceSub resource = resourceContext.getResource(CustomerIdResourceSub.class);
        resource.setParent(getEntity());
        return resource;
    }

    /**
     * Returns a dynamic instance of ProductResource used for entity navigation.
     *
     * @param id identifier for the parent entity
     * @return an instance of ProductResource
     */
    @Path("productId/")
    public ProductResource getProductIdResource() {
        ProductIdResourceSub resource = resourceContext.getResource(ProductIdResourceSub.class);
        resource.setParent(getEntity());
        return resource;
    }

    public static class CustomerIdResourceSub extends CustomerResource {

        private PurchaseOrder parent;

        public void setParent(PurchaseOrder parent) {
            this.parent = parent;
        }

        @Override
        protected Customer getEntity() {
            Customer entity = parent.getCustomerId();
            if (entity == null) {
                throw new WebApplicationException(new Throwable("Resource for " + uriInfo.getAbsolutePath() + " does not exist."), 404);
            }
            return entity;
        }
    }

    public static class ProductIdResourceSub extends ProductResource {

        private PurchaseOrder parent;

        public void setParent(PurchaseOrder parent) {
            this.parent = parent;
        }

        @Override
        protected Product getEntity() {
            Product entity = parent.getProductId();
            if (entity == null) {
                throw new WebApplicationException(new Throwable("Resource for " + uriInfo.getAbsolutePath() + " does not exist."), 404);
            }
            return entity;
        }
    }
}
