/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is Forte for Java, Community Edition. The Initial
 * Developer of the Original Code is Sun Microsystems, Inc. Portions
 * Copyright 1997-2000 Sun Microsystems, Inc. All Rights Reserved.
 */

package com.netbeans.developer.editors;

import java.util.*;
//import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

import org.openide.*;
import org.openide.compiler.CompilerType;
import org.openide.explorer.*;
import org.openide.execution.*;
import org.openide.nodes.*;

/** Service type panel for viewing, selecting and configuring 
* of executors and other services.
*
* @author Jaroslav Tulach
*/
public class ServiceTypePanel extends ExplorerPanel {
  /** the super class of objects that we display.
  */
  private Class clazz;
  
  /** list of all services */
  private List services;
  
  /** Creates new Panel PropertyEditor
  * @param clazz the super class of objects that we display
  * @param name string to name the panel with
  */
  public ServiceTypePanel(Class clazz, String name) {
    this.clazz = clazz;
    update ();
    
    initComponents ();
    
    setBorder (new javax.swing.border.TitledBorder(name));
    
    getExplorerManager ().addPropertyChangeListener (new java.beans.PropertyChangeListener () {
      public void propertyChange (java.beans.PropertyChangeEvent ev) { 
        firePropertyChange ();
      }
    });
  }
  
  /** Sets the selected value of the component.
  */
  public void setServiceType (ServiceType s) {
    int i = services.indexOf (s);
    
    if (i < 0) i = 0;
    
    Node[] nodes = getExplorerManager ().getRootContext ().getChildren ().getNodes ();
    if (i >= nodes.length) return;
    
    try {
      getExplorerManager ().setSelectedNodes (new Node[] { 
        nodes[i]
      });
    } catch (java.beans.PropertyVetoException ex) {
      throw new InternalError();
    }
    
    firePropertyChange ();
  }

  /** Sets the selected value of the component.
  * @return selected type or null
  */
  public ServiceType getServiceType () {
    Node[] arr = getExplorerManager ().getSelectedNodes ();
    if (arr.length > 0) {
      return ((MN)arr[0]).getServiceType ();
    }
    return null;
  }
  
  /** Fires property change.
  */
  void firePropertyChange () {
    firePropertyChange ("serviceType", null, null);
  }
  
  /** Updates the current state of the explorer manager.
  */
  private void update () {
    Children ch = new Children.Array ();
    AbstractNode n = new AbstractNode (ch);
    
    ch.add ((Node[])nodes ().toArray (new Node[0]));
    
    getExplorerManager ().setRootContext (n);
  }
  
  /** Computes the list of nodes that should represent all services classes 
  * of the given type.
  *
  * @return list of Nodes
  */
  private List nodes () {
    services = new ArrayList (20);
    List l = new LinkedList ();
    Enumeration en = TopManager.getDefault ().getServices ().services (clazz);
    while (en.hasMoreElements ()) {
      try {
        Object service = en.nextElement ();
        l.add (new MN ((ServiceType)service));
        
        services.add (service);
      } catch (java.beans.IntrospectionException ex) {
      }
    }
    return l;
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents () {//GEN-BEGIN:initComponents
    setLayout (new java.awt.BorderLayout ());
    setPreferredSize (new java.awt.Dimension(480, 320));

    listView1 = new org.openide.explorer.view.ListView ();
    listView1.setTraversalAllowed (false);
    listView1.setSelectionMode (1);
    listView1.setPopupAllowed (false);


    add (listView1, "Center");

    propertySheetView1 = new org.openide.explorer.propertysheet.PropertySheetView ();


    add (propertySheetView1, "East");

  }//GEN-END:initComponents


  private void removeButtonPressed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonPressed
   }//GEN-LAST:event_removeButtonPressed

  private void addButtonPressed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonPressed
  }//GEN-LAST:event_addButtonPressed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private org.openide.explorer.view.ListView listView1;
  private org.openide.explorer.propertysheet.PropertySheetView propertySheetView1;
  // End of variables declaration//GEN-END:variables

  private static final class MN extends BeanNode {
    public MN (ServiceType t) throws java.beans.IntrospectionException {
      super (t);
    }
    
    public ServiceType getServiceType () {
      return (ServiceType)getBean ();
    }
      
  }
  
}
