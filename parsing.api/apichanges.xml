<?xml version="1.0" encoding="UTF-8"?>
<!--
   - DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
   -
   - Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
   -
   - The contents of this file are subject to the terms of either the GNU
   - General Public License Version 2 only ("GPL") or the Common
   - Development and Distribution License("CDDL") (collectively, the
   - "License"). You may not use this file except in compliance with the
   - License. You can obtain a copy of the License at
   - http://www.netbeans.org/cddl-gplv2.html
   - or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
   - specific language governing permissions and limitations under the
   - License.  When distributing the software, include this License Header
   - Notice in each file and include the License file at
   - nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
   - particular file as subject to the "Classpath" exception as provided
   - by Sun in the GPL Version 2 section of the License file that
   - accompanied this code. If applicable, add the following below the
   - License Header, with the fields enclosed by brackets [] replaced by
   - your own identifying information:
   - "Portions Copyrighted [year] [name of copyright owner]"
   -
   - Contributor(s):
   -
   - The Original Software is NetBeans. The Initial Developer of the Original
   - Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
   - Microsystems, Inc. All Rights Reserved.
   -
   - If you wish your version of this file to be governed by only the CDDL
   - or only the GPL Version 2, indicate your decision by adding
   - "[Contributor] elects to include this software in this distribution
   - under the [CDDL or GPL Version 2] license." If you do not indicate a
   - single choice of license, a recipient has the option to distribute
   - your version of this file under either the CDDL, the GPL Version 2 or
   - to extend the choice of license to its licensees as provided above.
   - However, if you add GPL Version 2 code and therefore, elected the GPL
   - Version 2 license, then the option applies only if the new code is
   - made subject to such option by the copyright holder.
  -->
<?xml-stylesheet type="text/xml" href="../nbbuild/javadoctools/apichanges.xsl"?>
<!DOCTYPE apichanges PUBLIC
	"-//NetBeans//DTD API changes list 1.0//EN"
        "../nbbuild/javadoctools/apichanges.dtd"
>

<!--

INFO FOR PEOPLE ADDING CHANGES:

Check the DTD (apichanges.dtd) for details on the syntax. You do not
need to regenerate the HTML, this will be done periodically; just
change the XML. If you can, validate the XML against the DTD, if not
do not worry about it. Rough syntax of a change (several parts optional):

<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>

Also permitted elements: <package>, <branch>. <version> is API spec
version, recommended for all new changes. <compatibility> should say
if things were added/modified/deprecated/etc. and give all information
related to upgrading old code. List affected top-level classes and
link to issue numbers if applicable. See the DTD for more details.

Changes need not be in any particular order, they are sorted in various
ways by the stylesheet anyway.

Dates are assumed to mean "on the trunk". If you *also* make the same
change on a stabilization branch, use the <branch> tag to indicate this
and explain why the change was made on a branch in the <description>.

Please only change this file on the trunk! Rather: you can change it
on branches if you want, but these changes will be ignored; only the
trunk version of this file is important.

Deprecations do not count as incompatible, assuming that code using the
deprecated calls continues to see their documented behavior. But do
specify deprecation="yes" in <compatibility>.

This file is not a replacement for Javadoc: it is intended to list changes,
not describe the complete current behavior, for which ordinary documentation
is the proper place.

-->

<apichanges>

  <!-- First, a list of API names you may use: -->
  <apidefs>
    <!-- org.netbeans.modules.parsing.api -->
    <apidef name="ParsingAPI">Parsing API</apidef>
  </apidefs>

<!-- ACTUAL CHANGES BEGIN HERE: -->

  <changes>
  <change id="adding-context-isSourceForBinaryRootIndexing">
      <api name="ParsingAPI"/>
      <summary>Adding Context.isSourceForBinaryRootIndexing()</summary>
      <version major="1" minor="17"/>
      <date day="23" month="6" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Added <code>Context.isSourceForBinaryRootIndexing()</code> in order to further
              optimize java indexing.
          </p>
      </description>
  </change>

  <change id="adding-forceRefresh">
      <api name="ParsingAPI"/>
      <summary>Adding IndexingManager.refreshIndex methods with forceRefresh parameter</summary>
      <version major="1" minor="16"/>
      <date day="10" month="6" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Added <code>IndexingManager.refreshIndex(URL root, Collection&lt;? extends URL&gt; files, boolean forceRefresh)</code>
              and <code>IndexingManager.refreshIndexAndWait(URL root, Collection&lt;? extends URL&gt; files, boolean forceRefresh)</code>.
          </p>
      </description>
  </change>

  <change id="changes-Indexable-Context">
      <api name="ParsingAPI"/>
      <summary>Tweaking Indexable and Context</summary>
      <version major="1" minor="13"/>
      <date day="21" month="5" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="incompatible" binary="incompatible" semantic="compatible" deletion="yes" addition="yes" modification="no"/>
      <description>
          <p>
              Added <code>Indexable.getMimeType()</code>, <code>Context.isCancelled()</code>.
              Removed <code>Indexabe.getName()</code>, <code>Indexable.getLastModified()</code>,
              <code>Indexable.openInputStream()</code>.
          </p>
      </description>
  </change>

  <change id="typo-IndexingManager-refreshAllIndices">
      <api name="ParsingAPI"/>
      <summary>Fixing typo: IndexingManager.refreshAllIndices()</summary>
      <version major="1" minor="12"/>
      <date day="20" month="4" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="incompatible" binary="incompatible" semantic="compatible" deletion="no" addition="no" modification="yes"/>
      <description>
          <p>
              Fixing typo in <code>IndexingManager.refreshAllIndicies(String)</code> method
              name. Technically this method was removed and a new one called
              <code>IndexingManager.refreshAllIndices(String)</code> was created. The same happened
              for <code>IndexingManager.refreshAllIndicies(FileObject...)</code>.
          </p>
      </description>
  </change>

  <change id="Context-checkForEditorModifications">
      <api name="ParsingAPI"/>
      <summary>Adding Context.checkForEditorModifications</summary>
      <version major="1" minor="10"/>
      <date day="15" month="4" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Adding <code>Context.checkForEditorModifications()</code> in order to
              signal indexers whether they should or should not care about editor documents.
          </p>
      </description>
  </change>

  <change id="IndexResult-getRoot-getRelativePath">
      <api name="ParsingAPI"/>
      <summary>Adding IndexResult.getRoot and getRelativePath</summary>
      <version major="1" minor="9"/>
      <date day="2" month="4" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Adding <code>IndexResult.getRoot()</code> and <code>IndexResult.getRelativePath()</code>
              methods.
          </p>
      </description>
  </change>

  <change id="IndexingManager-refreshAllIndicies">
      <api name="ParsingAPI"/>
      <summary>Adding IndexingManager.refreshAllIndicies()</summary>
      <version major="1" minor="8"/>
      <date day="27" month="3" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Adding <code>IndexingManager.refreshAllIndicies(String)</code> method
              for refreshing all indices created by a given indexer.
          </p>
      </description>
  </change>

  <change id="QuerySupport-findRoots">
      <api name="ParsingAPI"/>
      <summary>Adding QuerySupport.findRoots(...) methods</summary>
      <version major="1" minor="7"/>
      <date day="27" month="3" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Adding two <code>QuerySupport.findRoots(...)</code> methods that can be used
              for finding classpath roots from classpaths marked with specific IDs
              and supplied by specific project.
          </p>
      </description>
  </change>

  <change id="IndexingManager-refreshIndexAndWait">
      <api name="ParsingAPI"/>
      <summary>Adding IndexingManager.refreshIndexAndWait()</summary>
      <version major="1" minor="6"/>
      <date day="2" month="3" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Adding <code>IndexingManager.refreshIndexAndWait(URL, Collection&lt;? extends URL&gt;)</code>
              for synchronous index refreshing.
          </p>
      </description>
  </change>

  <change id="Support-for-dirty-files">
      <api name="ParsingAPI"/>
      <summary>Support for marking files dirty</summary>
      <version major="1" minor="4"/>
      <date day="1" month="3" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="incompatible" binary="incompatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
          <p>
              Adding <code>CustomIndexerFactory.filesDirty</code>,
              <code>EmbeddingIndexerFactory.filesDirty</code> and <code>IndexingSupport.markDirtyDocuments</code>
              in order to support on-the-fly reindexing of files modified in the
              editor.
          </p>
      </description>
  </change>

  <change id="Explicit-index-refresh">
      <api name="ParsingAPI"/>
      <summary>Support for explicit index refreshing</summary>
      <version major="1" minor="6"/>
      <date day="26" month="2" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="incompatible" binary="incompatible" semantic="compatible" deletion="yes" addition="yes" modification="no"/>
      <description>
          <p>
              Adding <code>IndexingManager</code> class, which allows requesting
              to reindex a set of files. Also adding <code>addSupplemntaryFiles</code>
              and <code>isSupplementaryFilesIndexing</code> methods to <code>Context</code>
              class in order to allow indexers to request reindexing of additional files.
          </p>
      </description>
  </change>

  <change id="Context.addIndexingJob">
      <api name="ParsingAPI"/>
      <summary>Adding Context.addIndexingJob</summary>
      <version major="1" minor="2"/>
      <date day="25" month="2" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
      </description>
  </change>

  <change id="Snapshot.getTokenHierarchy">
      <api name="ParsingAPI"/>
      <summary>Adding Snapshot.getTokenHierarchy</summary>
      <version major="1" minor="1"/>
      <date day="20" month="2" year="2009"/>
      <author login="vstejskal"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
        <p>
            Adding <code>Snapshot.getTokenHierarchy()</code> in order to provide
            effective way for accessing lexer tokens created from a <code>Snapshot</code>.
        </p>
      </description>
  </change>

  <change id="ParsingAPI-created">
      <api name="ParsingAPI"/>
      <summary>Parsing API created</summary>
      <version major="1" minor="0"/>
      <date day="1" month="1" year="2009"/>
      <author login="jjancura"/>
      <compatibility source="compatible" binary="compatible" semantic="compatible" deletion="no" addition="yes" modification="no"/>
      <description>
        <p>
            Creating Parsing API.
        </p>
      </description>
      <issue number="133900"/>
  </change>

  </changes>

  <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <======================

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE parsing.api/apichanges.xml

-->
    <head>
        <title>Change History for the Parsing &amp; Indexing API</title>
        <link rel="stylesheet" href="prose.css" type="text/css"/>
        <meta name="CATEGORY" content="OtherDevelopmentDoc"/>
        <meta name="DESCRIPTION" content="A cross-indexed list of all changes made to the Parsing &amp; Indexing API."/>
    </head>
    <body>
        <p class="overviewlink">
            <a href="overview-summary.html">Overview</a>
        </p>
        <h1>Introduction</h1>
        <h2>What do the Dates Mean?</h2>
        <p>
            The supplied dates indicate when the API change was made, on the CVS
            trunk. From this you can generally tell whether the change should be
            present in a given build or not; for trunk builds, simply whether it
            was made before or after the change; for builds on a stabilization
            branch, whether the branch was made before or after the given date. In
            some cases corresponding API changes have been made both in the trunk
            and in an in-progress stabilization branch, if they were needed for a
            bug fix; this ought to be marked in this list.
        </p>
        <hr/>
        <standard-changelists module-code-name="$codebase"/>
        <hr/>
        <p>@FOOTER@</p>
    </body>
  </htmlcontents>

</apichanges>
