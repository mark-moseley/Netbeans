var _globalScope = this;

<Function>function <Jmaki>Jmaki</Jmaki>() {
    this.<String>version</String> = <String>'.9.2'</String>;
    this.<String>debugGlue</String> = <Boolean>false</Boolean>;
    this.<String>debug</String> = <Boolean>false</Boolean>;
    var _jmaki = this;
    var <Array>libraries = <Array>[]</Array></Array>;
    var <Array>widgets = <Array>[]</Array></Array>;
    this.<String>loaded</String> = <Boolean>false</Boolean>;
    this.<String>initialized</String> = <Boolean>false</Boolean>;
    this.<String>webRoot</String> = <String>""</String>;
    this.<String>resourcesRoot</String> = <String>"resources"</String>;
    
    this.<String>Map</String> = <Function>function() {
        /**
         * This class provides a hash table like utility
         */
        var map = {};
        /**
         * Get a list of the keys to check
         */
        this.<String>keys</String> = <Function>function() {
            var o = {};
            var <Array>_keys = <Array>[]</Array></Array>;
            
            for (var _i in map){
                // make sure we don't return prototype properties.
                if (<Boolean>typeof o[_i] == <String>'undefined'</String></Boolean>) <Array.push><Array>_keys</Array>.<Array.push>push</Array.push>(_i)</Array.push>;
            }
            return <Array>_keys</Array>;
        }</Function>
        /**
         * Put stores the value in the table
         * @param key the index in the table where the value will be stored
         * @param value the value to be stored 
         */
        this.<String>put</String> = <Function>function(key,value) {
            map[key] = value;
        }</Function>
        
        /**
         * Return the value stored in the table
         * @param key the index of the value to retrieve
         */
        this.<String>get</String> = <Function>function(key) {
            return map[key];
        }</Function>
        
        /**
         * Remove the value from the table
         * @param key the index of the value to be removed
         */
        this.<String>remove</String> =  <Function>function(key) {
            delete map[key];
        }</Function>
        /**
         *  Clear the table
         */
        this.<String>clear</String> = <Function>function() {
            delete map;
            map = {};
        }</Function>
    }</Function>
    
    this.<String>attributes</String> = new this.Map();	
    var topics = new this.Map();

    /**
     * Subscribe to a new topic
     * @param name Name of the topic to subscribe to
     * @param listener Callback listener
     */
    this.<String>subscribe</String> = <Function>function(name, _l) {
        var topic = <topics.get>topics.<topics.get>get</topics.get>(name)</topics.get>;
        // create the topic if it has not been created yet
        if (!topic) {
            <Array>topic</Array> = <Array>[]</Array>;
            <topics.put>topics.<topics.put>put</topics.put>(name, <Array>topic</Array>)</topics.put>;
        }
        // make sure that a listener is only added once
        for (var <MyObj><MyObj>i</MyObj></MyObj> in <Array>topic</Array>) {
            if (<Boolean><MyObj>i</MyObj> == _l</Boolean>) {
                return;
            }
        }
        <Array.push><Array>topic</Array>.<Array.push>push</Array.push>(_l)</Array.push>;
    }</Function>
	
    /**
     *  Unsubscribe a listener from a topic
     *  @param name Name of the topic 
     *  @param listener 
     */
    this.<String>unsubscribe</String> = <Function>function(name, listener) {
        var topic = <topics.get>topics.<topics.get>get</topics.get>(name)</topics.get>;
        // create the topic if it has not been created yet
        if (topic) {
            for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <topic.length>topic.length</topic.length></Boolean>; <Number>i</Number>++) {
                if (<Boolean>topic[<Number>i</Number>] == listener</Boolean>) {
                    <topic.splice>topic.<topic.splice>splice</topic.splice>(<Number>i</Number>,<Number>1</Number>)</topic.splice>;
                    break;
                }
            }
        }
    }</Function>  
	
    /**
     *  Publish an event to a topic
     *  @param name of the topic to be published to
     *  @param args any object
     */
    this.<String>publish</String> = <Function>function(name, args, bubbleDown, bubbleUp) {
        if (typeof <Boolean>name == <String>'undefined'</String></Boolean> || typeof <Boolean>args == <String>'undefined'</String></Boolean>) return;
        var topic = <topics.get>topics.<topics.get>get</topics.get>(name)</topics.get>;        
        if (<_jmaki.debugGlue>_jmaki.debugGlue</_jmaki.debugGlue>) {
           var _me = args;
           if (<Boolean>typeof args == <String>'object'</String></Boolean>) {
             var <Array>_m = <Array>[]</Array></Array>;
             for (var _o in args) {
                 <Array.push><Array>_m</Array>.<Array.push>push</Array.push>(_o + <String>" : "</String> + args[_o])</Array.push>;
             }
             if (<Boolean><Array.length><Array>_m</Array>.length</Array.length> &gt;<Number>0</Number></Boolean>)_me = <String>"{"</String> + <_m.join><Array>_m</Array>.<_m.join>join</_m.join>(<String>" , "</String>)</_m.join> + <String>"}"</String>;
             else <String>_me</String> = <String>"{}"</String>;
           }
            <_jmaki.log>_jmaki.<_jmaki.log>log</_jmaki.log>(<String>"&lt;span style='color:red'&gt;Publish &lt;/span&gt; : Topic:"</String> + name + <String>" message: "</String> + <String>_me</String>)</_jmaki.log>;
        }
        // create the topic if it does not exist
        if (!topic) {
            <Array>topic</Array> = <Array>[]</Array>;
            <topics.put>topics.<topics.put>put</topics.put>(name, <Array>topic</Array>)</topics.put>;
        }
        // notify the listeners
        for (var <Number>index=<Number>0</Number></Number>;<Boolean><Number>index</Number> &lt; <Array.length><Array>topic</Array>.length</Array.length></Boolean>;<Number>index</Number>++) {
            if (<Boolean>typeof <Array>topic</Array>[<Number>index</Number>] ==<String>'function'</String></Boolean>) {
                  <args><Array>topic</Array>[<Number>index</Number>](args)</args>;            
            }
        }
         if (<_jmaki.debugGlue>_jmaki.debugGlue</_jmaki.debugGlue> &amp;&amp; <Boolean><Array.length><Array>topic</Array>.length</Array.length> &gt; <Number>0</Number></Boolean>) <_jmaki.log>_jmaki.<_jmaki.log>log</_jmaki.log>(<String>"&lt;span style='color:green'&gt;Point to Point Pubish match&lt;/span&gt; : Topic:"</String> + name + <String>" listeners : "</String> + <Array.length><Array>topic</Array>.length</Array.length>)</_jmaki.log>;  
        // check the glue for listeners
        if (<_jmaki.config>_jmaki.config</_jmaki.config>  &amp;&amp;
            <_jmaki.config.glue>_jmaki.<_jmaki.config>config</_jmaki.config>.glue</_jmaki.config.glue> &amp;&amp;
            <_jmaki.config.glue.listeners>_jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.listeners</_jmaki.config.glue.listeners>){
            
            for (var <Number>_l=<Number>0</Number></Number>; <Boolean><Number>_l</Number> &lt; <_jmaki.config.glue.listeners.length>_jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.<_jmaki.config.glue.listeners>listeners</_jmaki.config.glue.listeners>.length</_jmaki.config.glue.listeners.length></Boolean>;<Number>_l</Number>++ ) {
                var _listener = _jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.<_jmaki.config.glue.listeners>listeners</_jmaki.config.glue.listeners>[<Number>_l</Number>];

                    if ((<_listener.topic>_listener.topic</_listener.topic> instanceof RegExp &amp;&amp; <_listener.topic.test>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.test>test</_listener.topic.test>(name)</_listener.topic.test>) || ( <Boolean><_listener.topic>_listener.topic</_listener.topic> == name)</Boolean>   ||
                    (typeof <Boolean><_listener.topic.charAt>_listener.<_listener.topic>topic</_listener.topic>.charAt</_listener.topic.charAt> == <String>'function'</String></Boolean> &amp;&amp; <Boolean><_listener.topic.charAt>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.charAt>charAt</_listener.topic.charAt>(<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>-<Number>1</Number>)</_listener.topic.charAt>== <String>'*'</String></Boolean>  &amp;&amp;
                       (<Boolean><name.indexOf>name.<name.indexOf>indexOf</name.indexOf>(<_listener.topic.substring>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.substring>substring</_listener.topic.substring>(<Number>0</Number>,<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length> -<Number>1</Number>)</_listener.topic.substring>)</name.indexOf> == <Number>0</Number>)</Boolean>  &amp;&amp;
                       <Boolean><name.substring>name.<name.substring>substring</name.substring>(<Number>0</Number>, <_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>-<Number>1</Number>)</name.substring> == <_listener.topic.substring>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.substring>substring</_listener.topic.substring>(<Number>0</Number>,<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>-<Number>1</Number>)</_listener.topic.substring></Boolean> ) ||
                    (typeof <Boolean><_listener.topic.charAt>_listener.<_listener.topic>topic</_listener.topic>.charAt</_listener.topic.charAt> == <String>'function'</String></Boolean> &amp;&amp;<Boolean><_listener.topic.charAt>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.charAt>charAt</_listener.topic.charAt>(<Number>0</Number>)</_listener.topic.charAt> == <String>'*'</String></Boolean> &amp;&amp;
                     (<Boolean><name.indexOf>name.<name.indexOf>indexOf</name.indexOf>(<_listener.topic.substring>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.substring>substring</_listener.topic.substring>(<Number>1</Number>,<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>)</_listener.topic.substring>)</name.indexOf> != -<Number>1</Number>)</Boolean> &amp;&amp;
                    <Boolean><name.substring>name.<name.substring>substring</name.substring>(<name.indexOf>name.<name.indexOf>indexOf</name.indexOf>(<_listener.topic.substring>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.substring>substring</_listener.topic.substring>(<Number>1</Number>,<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>)</_listener.topic.substring>)</name.indexOf> ,<name.length>name.length</name.length>)</name.substring> == <_listener.topic.substring>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.substring>substring</_listener.topic.substring>(<Number>1</Number>,<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>)</_listener.topic.substring></Boolean> ) ||

                    (typeof <Boolean><_listener.topic.charAt>_listener.<_listener.topic>topic</_listener.topic>.charAt</_listener.topic.charAt> == <String>'function'</String></Boolean> &amp;&amp; <Boolean><_listener.topic.charAt>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.charAt>charAt</_listener.topic.charAt>(<Number>0</Number>)</_listener.topic.charAt> == <String>'*'</String></Boolean>  &amp;&amp;
                       <Boolean><_listener.topic.charAt>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.charAt>charAt</_listener.topic.charAt>(<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>-<Number>1</Number>)</_listener.topic.charAt>== <String>'*'</String></Boolean>  &amp;&amp;
                        <Boolean><name.indexOf>name.<name.indexOf>indexOf</name.indexOf>(<_listener.topic.substring>_listener.<_listener.topic>topic</_listener.topic>.<_listener.topic.substring>substring</_listener.topic.substring>(<Number>1</Number>,<_listener.topic.length>_listener.<_listener.topic>topic</_listener.topic>.length</_listener.topic.length>-<Number>1</Number>)</_listener.topic.substring>)</name.indexOf> != -<Number>1</Number></Boolean>)
                     ) {
                         
                    if (<_jmaki.debugGlue>_jmaki.debugGlue</_jmaki.debugGlue>) <_jmaki.log>_jmaki.<_jmaki.log>log</_jmaki.log>(<String>"&lt;span style='color:green'&gt;Publish Match&lt;/span&gt; : Topic:"</String> + name + <String>" listener: "</String> + _listener)</_jmaki.log>;                    
                    if (<Boolean><_listener.action>_listener.action</_listener.action> == <String>'call'</String></Boolean> &amp;&amp; <_listener.target>_listener.target</_listener.target>) {
                        // get the top level object                   
                        var _obj;
                        if (<_listener.target.functionName>_listener.<_listener.target>target</_listener.target>.functionName</_listener.target.functionName>) {
                            _obj = <_jmaki.findObject>_jmaki.<_jmaki.findObject>findObject</_jmaki.findObject>(<_listener.target.object>_listener.<_listener.target>target</_listener.target>.object</_listener.target.object>)</_jmaki.findObject>;
                            // create an instance of the object if needed.
                            if (<Boolean>typeof _obj == <String>'function'</String></Boolean>) {
                                <_obj>myo</_obj> = <_obj>new _obj</_obj>;
                            } else if (_obj) {
                                myo = _obj;
                            } else {
                                if (<_jmaki.debugGlue>_jmaki.debugGlue</_jmaki.debugGlue>) <_jmaki.log>_jmaki.<_jmaki.log>log</_jmaki.log>(<String>"Publish Error :  Object found: "</String> + <_listener.target.object>_listener.<_listener.target>target</_listener.target>.object</_listener.target.object>)</_jmaki.log>;
                            }
                            if (typeof <Boolean>myo != <String>'undefined'</String></Boolean> &amp;&amp;
                                typeof <Boolean>myo[<_listener.target.functionName>_listener.<_listener.target>target</_listener.target>.functionName</_listener.target.functionName>] == <String>'function'</String></Boolean>){
                                myo[<_listener.target.functionName>_listener.<_listener.target>target</_listener.target>.functionName</_listener.target.functionName>].call(_globalScope,args);
                            } else {
                                if (<_jmaki.debugGlue>_jmaki.debugGlue</_jmaki.debugGlue>) <_jmaki.log>_jmaki.<_jmaki.log>log</_jmaki.log>(<String>"Publish Error : function "</String> + <_listener.target.functionName>_listener.<_listener.target>target</_listener.target>.functionName</_listener.target.functionName> + <String>" not found on object "</String> + <_listener.target.object>_listener.<_listener.target>target</_listener.target>.object</_listener.target.object>)</_jmaki.log>; 
                            }                        
                        } else if  (<_listener.target.functionHandler>_listener.<_listener.target>target</_listener.target>.functionHandler</_listener.target.functionHandler>) {
                            <_listener.target.functionHandler.call>_listener.<_listener.target>target</_listener.target>.<_listener.target.functionHandler>functionHandler</_listener.target.functionHandler>.<_listener.target.functionHandler.call>call</_listener.target.functionHandler.call>(_globalScope,args)</_listener.target.functionHandler.call>;
                        } else {
                            if (<_jmaki.debugGlue>_jmaki.debugGlue</_jmaki.debugGlue>) <_jmaki.log>_jmaki.<_jmaki.log>log</_jmaki.log>(<String>"Publish Error : no fuctionName or functionHandler specified on listener mapped to "</String> + name)</_jmaki.log>; 
                        }

                    }
                } else if (<Boolean>_jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.<_jmaki.config.glue.listeners>listeners</_jmaki.config.glue.listeners>[<Number>_l</Number>].action == <String>'forward'</String></Boolean>) {
                    var _topics = _jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.<_jmaki.config.glue.listeners>listeners</_jmaki.config.glue.listeners>[<Number>_l</Number>].topics;
                    // now multiplex the event
                    for (var <Number>ti = <Number>0</Number></Number>; <Boolean><Number>ti</Number> &lt; <_topics.length>_topics.length</_topics.length></Boolean>; <Number>ti</Number>++){
                        // don't cause a recursive loop if the topic is this one
                        if (<Boolean>_topics[<Number>ti</Number>] != name</Boolean>) {
                            <_jmaki.publish>_jmaki.<_jmaki.publish>publish</_jmaki.publish>(_topics[<Number>ti</Number>], args)</_jmaki.publish>;
                        }
                    }
                }
            }
        }
        // publish to subframes with a global context appended
        var <Boolean>bd = <Boolean>true</Boolean></Boolean>;
        if (<Boolean>typeof bubbleDown != <String>'undefined'</String></Boolean>) bd = bubbleDown;
      
        if ( bd &amp;&amp; <Boolean><Window.frames.length><Window>window</Window>.<Window.frames>frames</Window.frames>.length</Window.frames.length> &gt; <Number>0</Number></Boolean>){
            for (var <Number>i=<Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <Window.frames.length><Window>window</Window>.<Window.frames>frames</Window.frames>.length</Window.frames.length></Boolean>; <Number>i</Number>++){
              if (<Window>window</Window>.<Window.frames>frames</Window.frames>[<Number>i</Number>].jmaki){
                  <Window>window</Window>.<Window.frames>frames</Window.frames>[<Number>i</Number>].jmaki.publish(<String>"/global"</String> + name, args, <Boolean>true</Boolean>, <Boolean>false</Boolean>);
              }
            }
        }
        //  publish to parent frame if we are a sub-frame. This will prevent duplicate events
        if (<Boolean><Window>window</Window> != <Window.top><Window>window</Window>.top</Window.top></Boolean>){
            var <Boolean>bu = <Boolean>true</Boolean></Boolean>;
            if (<Boolean>typeof bubbleUp != <String>'undefined'</String></Boolean>) bu = bubbleUp;
              if (bu &amp;&amp; <Window.parent.jmaki><Window>window</Window>.<Window.parent>parent</Window.parent>.jmaki</Window.parent.jmaki>){
                  <Window.parent.jmaki.publish><Window>window</Window>.<Window.parent>parent</Window.parent>.<Window.parent.jmaki>jmaki</Window.parent.jmaki>.<Window.parent.jmaki.publish>publish</Window.parent.jmaki.publish>(<String>"/global"</String> + name, args, <Boolean>false</Boolean>, <Boolean>true</Boolean>)</Window.parent.jmaki.publish>;
            }
        }        
    }</Function>

    /**
     * Load a set of libraries in order
     */
    this.<String>addLibraries</String> = <Function>function(_libs, <void>_cb</void>, _inprocess) {
        if (<Boolean><_libs.length>_libs.length</_libs.length> &lt;= <Number>0</Number></Boolean>) {
            if (<Boolean>typeof _cb == <String>'function'</String></Boolean>) {
                <_cb><void>_cb</void>()</_cb>;
                return;
            }
        }
        if (<Boolean>typeof _inprocess == <String>'undefined'</String></Boolean>) {
            <_jmaki.Map>_inprocess</_jmaki.Map> = <_jmaki.Map>new <_jmaki.Map>_jmaki.Map</_jmaki.Map>()</_jmaki.Map>;
        }
        var _uuid = <Date.getMilliseconds><Date>new Date</Date>().<Date.getMilliseconds>getMilliseconds</Date.getMilliseconds>()</Date.getMilliseconds>;
        var _lib = _libs[<_libs.length>_libs.length</_libs.length>-<Number>1</Number>];
        var _s_uuid = <String>"c_script_"</String> + <_libs.length>_libs.length</_libs.length> + <String>"_"</String> + _uuid;
        var head = <HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByTagName><HTMLDocument.getElementsByTagName>getElementsByTagName</HTMLDocument.getElementsByTagName>(<String>"head"</String></HTMLDocument.getElementsByTagName>)[<Number>0</Number>];
        var e = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"script"</String>)</HTMLDocument.createElement>;
        e.<String>start</String> = _uuid;
        e.<String>id</String> =  _s_uuid;
        e.<String>type</String> = <String>'text/javascript'</String>;
        <head.appendChild>head.<head.appendChild>appendChild</head.appendChild>(e)</head.appendChild>;
        var se = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_s_uuid)</HTMLDocument.getElementById>;
        <_jmaki.Map.put><_jmaki.Map>_inprocess</_jmaki.Map>.<_jmaki.Map.put>put</_jmaki.Map.put>(_s_uuid,_lib)</_jmaki.Map.put>;
        var <Function>loadHandler = <Function>function (_id) {
            var t = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_id)</HTMLDocument.getElementById>;
            if (t &amp;&amp; <t.timeoutHandler>t.timeoutHandler</t.timeoutHandler>) {
               <clearInterval>clearInterval(<t.timeoutHandler.interval>t.<t.timeoutHandler>timeoutHandler</t.timeoutHandler>.interval</t.timeoutHandler.interval>)</clearInterval>;
               delete t.<String>timeoutHandler</String>;
            }
            var _s = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_id)</HTMLDocument.getElementById>;
            // remove the script node
            if (_s) <_s.parentNode.removeChild>_s.<_s.parentNode>parentNode</_s.parentNode>.<_s.parentNode.removeChild>removeChild</_s.parentNode.removeChild>(_s)</_s.parentNode.removeChild>;
            <_inprocess.remove>_inprocess.<_inprocess.remove>remove</_inprocess.remove>(_id)</_inprocess.remove>;
            var <void>_cbk = <void>_cb</void></void>;
            if (<Boolean><_libs.length>_libs.length</_libs.length>-<Number>1</Number> &gt; <Number>0</Number></Boolean>) {
                <_libs.pop>_libs.<_libs.pop>pop</_libs.pop>()</_libs.pop>;
                <_jmaki.addLibraries>_jmaki.<_jmaki.addLibraries>addLibraries</_jmaki.addLibraries>(_libs, <void>_cb</void>,_inprocess)</_jmaki.addLibraries>;
             /**  rather than check length check for inprocess **/
            } 
            if (<Boolean>_inprocess.<_inprocess.keys><_inprocess.keys>keys</_inprocess.keys></_inprocess.keys>().length == <Number>0</Number></Boolean>) {
                if (<Boolean>typeof _cb != <String>'undefined'</String></Boolean>){
                    var <Number>timout = <Number>0</Number></Number>;
                    delete _inprocess;
                    <setTimeout>setTimeout(<Function>function(){<_cbk>_cbk()</_cbk>;}</Function>, <Number>0</Number>)</setTimeout>;
                }
            }
        }</Function></Function>
        if (<RegExp.test><RegExp>/MSIE/i</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>) {
            se.<String>onreadystatechange</String> = <Function>function () {
                if (<Boolean>this.readyState == <String>'loaded'</String></Boolean>) {
                    var _id = _s_uuid;
                    <loadHandler>loadHandler(_id)</loadHandler>;
                }
            }</Function>; 
            <HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById><HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_s_uuid</HTMLDocument.getElementById>).<String>src</String> = _lib;
        } else {   
            if (<se.addEventListener>se.addEventListener</se.addEventListener>) {
               // force a load using a timer if all else fails
               var <Function>loader = <Function>function(_id) {
                 var <Number>_c = <Number>0</Number></Number>;
                 var self = this;
                 this.<String>interval</String> = <setInterval>setInterval(<Function>function() {
                 if (<Boolean>_c&gt;<Number>2</Number></Boolean>){
                   <clearInterval>clearInterval(<self.interval>self.interval</self.interval>)</clearInterval>;
                   <loadHandler>loadHandler(_id)</loadHandler>;
                 } else {
                   _c++;
                 }
                   }</Function>, <Number>250</Number>)</setInterval>;
                }</Function></Function>
              se.<String>timeoutHandler</String> = <loader>new <Function>loader</Function>(_s_uuid)</loader>;
              <se.addEventListener>se.<se.addEventListener>addEventListener</se.addEventListener>(<String>"load"</String>, <Function>function(){var _id = _s_uuid;<loadHandler>loadHandler(_id)</loadHandler>}</Function>, <Boolean>true</Boolean>)</se.addEventListener>;
            }
            <setTimeout>setTimeout(<Function>function(){<HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById><HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_s_uuid</HTMLDocument.getElementById>).<String>src</String> = _lib;}</Function>, <Number>0</Number>)</setTimeout>;
        }
        se = null;
        head = null;
    }</Function>

    /**
     *  Get the XMLHttpRequest object
     *
     */
    this.<String>getXHR</String> = <Function>function () {
        if (<Window.XMLHttpRequest><Window>window</Window>.XMLHttpRequest</Window.XMLHttpRequest>) {
            return <XMLHttpRequest>new XMLHttpRequest()</XMLHttpRequest>;
        } else if (<Window.ActiveXObject><Window>window</Window>.ActiveXObject</Window.ActiveXObject>) {
            return <ActiveXObject>new ActiveXObject(<String>"Microsoft.XMLHTTP"</String>)</ActiveXObject>;
        }
    }</Function>
    
    /**
    * Generalized XMLHttpRequest which can be used from evaluated code. Evaluated code is not allowed to make calls.
    * @param args is an object literal containing configuration parameters including method[get| post, get is default], body[bodycontent for a post], asynchronous[true is default]
    */
    this.<String>doAjax</String>= <Function>function(args) {
       if (typeof <Boolean>args == <String>'undefined'</String></Boolean> || !<args.url>args.url</args.url>) return;
       var _req = this.getXHR();
       var <String>method = <String>"GET"</String></String>;
       var <Boolean>async = <Boolean>true</Boolean></Boolean>;
       var callback;
       if  (<Boolean>typeof <args.asynchronous>args.asynchronous</args.asynchronous> != <String>'undefined'</String></Boolean>) {
            <args.asynchronous>async</args.asynchronous>=<args.asynchronous>args.asynchronous</args.asynchronous>;
       }
       if (<args.method>args.method</args.method>) {
            <args.method>method</args.method>=<args.method>args.method</args.method>;
       }
       if (<Boolean>typeof <args.callback>args.callback</args.callback> == <String>'function'</String></Boolean>) {
           <args.callback>callback</args.callback> = <args.callback>args.callback</args.callback>;
       }
       var body = null;
       if (<args.content>args.content</args.content>) {
           <String>body</String> = <String>""</String>;
           for (var l in <args.content>args.content</args.content>) {
               if (<Boolean>typeof args.<args.content>content</args.content>[l] == <String>"string"</String></Boolean>) { 
                   body = body +  l + <String>"="</String> + <encodeURIComponent>encodeURIComponent(args.<args.content>content</args.content>[l])</encodeURIComponent> + <String>"&amp;"</String>;
               }
           }
        }
       if (<Boolean><args.asynchronous>async</args.asynchronous> == <Boolean>true</Boolean></Boolean>) _req.<String>onreadystatechange</String> = <Function>function() {<callback>callback(_req)</callback>;}</Function>;
       <_req.open>_req.<_req.open>open</_req.open>(<args.method>method</args.method>, <args.url>args.url</args.url>, <args.asynchronous>async</args.asynchronous>)</_req.open>;
       if (<args.method>args.method</args.method>) {
            <args.method>method</args.method>=<args.method>args.method</args.method>;
            if (<Boolean><args.method.toLowerCase><args.method>method</args.method>.<args.method.toLowerCase>toLowerCase</args.method.toLowerCase>()</args.method.toLowerCase> == <String>'post'</String></Boolean>) {
                <_req.setRequestHeader>_req.<_req.setRequestHeader>setRequestHeader</_req.setRequestHeader>(<String>"Content-Type"</String>, <String>"application/x-www-form-urlencoded"</String>)</_req.setRequestHeader>;
            }
       }
       <_req.send>_req.<_req.send>send</_req.send>(body)</_req.send>;
       if (<args.callback>callback</args.callback>) return <callback><args.callback>callback</args.callback>(_req)</callback>;
    }</Function>
    
    /**
     *  Dynamically load a type using the parameters in the config.json
     *  @param name of the type to load 
     */
    this.<String>addType</String> = <Function>function(name) {
        var _type = null;
        if (<_jmaki.config>_jmaki.config</_jmaki.config> &amp;&amp; 
            <_jmaki.config.types>_jmaki.<_jmaki.config>config</_jmaki.config>.types</_jmaki.config.types>) {
            for (var <Number>_i =<Number>0</Number></Number>; <Boolean><Number>_i</Number> &lt; <_jmaki.config.types.length>_jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.types>types</_jmaki.config.types>.length</_jmaki.config.types.length></Boolean>; <Number>_i</Number>++) {
                if (<Boolean>name == _jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.types>types</_jmaki.config.types>[<Number>_i</Number>].id</Boolean>) {
                   _type = _jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.types>types</_jmaki.config.types>[<Number>_i</Number>];
                   break;
                }
            }
            if (_type) {
                if (<_type.preload>_type.preload</_type.preload>) {
                    <_globalScope.eval>_globalScope.<_globalScope.eval>eval</_globalScope.eval>(<_type.preload>_type.preload</_type.preload>)</_globalScope.eval>;
                }
                // don't include scripts already loaded.
                var <Array>_libs = <Array>[]</Array></Array>;
                for (var <Number>_i=<Number>0</Number></Number>; <Boolean><Number>_i</Number> &lt; <_type.libs.length>_type.<_type.libs>libs</_type.libs>.length</_type.libs.length></Boolean>; <Number>_i</Number>++) {
                    if (!this.isScriptLoaded(this.webRoot + _type.<_type.libs>libs</_type.libs>[<Number>_i</Number>])) {
                        <Array.push><Array>_libs</Array>.<Array.push>push</Array.push>(this.webRoot + _type.<_type.libs>libs</_type.libs>[<Number>_i</Number>])</Array.push>;
                    }
                }
                // call the post load
                var <void>_cb</void>;
                if (<_type.postload>_type.postload</_type.postload>) {
                    <Function>_cb</Function> = <Function>function() {
                        var <_type.postload>postLoad = <_type.postload>_type.postload</_type.postload></_type.postload>;
                        <_globalScope.eval>_globalScope.<_globalScope.eval>eval</_globalScope.eval>(<_type.postload>postLoad</_type.postload>)</_globalScope.eval>;
                    }</Function>
                }
                <_jmaki.addLibraries>_jmaki.<_jmaki.addLibraries>addLibraries</_jmaki.addLibraries>(<Array>_libs</Array>, <Function>_cb</Function>)</_jmaki.addLibraries>;
            }
        }
    }</Function>
    
    /**
     *  Library name is added as a script element which will be loaded when the page is rendered
     *  @param lib library to add 
     */
    this.<String>addLibrary</String> = <Function>function(lib, <void>cb</void>) {
      var <Array>libs = <Array>[]</Array></Array>;
      <Array.push><Array>libs</Array>.<Array.push>push</Array.push>(lib)</Array.push>;
      return <_jmaki.addLibraries>_jmaki.<_jmaki.addLibraries>addLibraries</_jmaki.addLibraries>(<Array>libs</Array>, <void>cb</void>)</_jmaki.addLibraries>;
    }</Function>
    
    /**
     * Register widget with jMaki 
     * @param widget Object respresenting the widget
     */
    this.<String>addWidget</String> = <Function>function(widget) {
        <widgets.push>widgets.<widgets.push>push</widgets.push>(widget)</widgets.push>;
        if (this.loaded){this.loadWidget(widget);}
    }</Function>
    
    /**
     * Bootstrap or load all registered widgets
     */
    this.<String>bootstrapWidgets</String> = <Function>function() {
        _jmaki.<String>loaded</String> = <Boolean>true</Boolean>;
        for (var <Number>l=<Number>0</Number></Number>; <Boolean><Number>l</Number> &lt; <widgets.length>widgets.length</widgets.length></Boolean>; <Number>l</Number>++) {
            this.loadWidget(widgets[<Number>l</Number>]);
        }
    }</Function>

  
   /**
     * Checks wheter a script has been loaded yet
     */
    this.<String>writeScript</String> = <Function>function(_s, _id) {
        if (<Boolean><_jmaki.loaded>_jmaki.loaded</_jmaki.loaded> == <Boolean>true</Boolean></Boolean>) {
            if (<HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_id)</HTMLDocument.getElementById>) {
                <HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById><HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_id</HTMLDocument.getElementById>).<String>innerHTML</String> = <String>"Attempt to write a script that can not be dynamically load widget with  id "</String> + _id + <String>". Consider using the widget in an iframe."</String>;
            }
        } else {
            <HTMLDocument.write><HTMLDocument>document</HTMLDocument>.<HTMLDocument.write>write</HTMLDocument.write>(<String>"&lt;script src='"</String> + _s + <String>"'&gt;&lt;/script&gt;"</String>)</HTMLDocument.write>;
        }
    }</Function>
   
    /**
     * Loads the style sheet by adding a link element to the DOM 
     * @param target name of style sheet to load 
     */
    this.<String>loadStyle</String> = <Function>function(target) {
        var styleElement = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"link"</String>)</HTMLDocument.createElement>;
        styleElement.<String>type</String> = <String>"text/css"</String>;
        styleElement.<String>rel</String>=<String>"stylesheet"</String>
        if (<Boolean>target[<Number>0</Number>] == <String>'/'</String></Boolean>) target = <_jmaki.webRoot>_jmaki.webRoot</_jmaki.webRoot> + target;
        styleElement.<String>href</String> = target;
        if (<Boolean><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByTagName><HTMLDocument.getElementsByTagName>getElementsByTagName</HTMLDocument.getElementsByTagName>(<String>'head'</String></HTMLDocument.getElementsByTagName>).length == <Number>0</Number></Boolean>) {
            var headN = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"head"</String>)</HTMLDocument.createElement>;
            <HTMLDocument.documentElement.insertBefore><HTMLDocument>document</HTMLDocument>.<HTMLDocument.documentElement>documentElement</HTMLDocument.documentElement>.<HTMLDocument.documentElement.insertBefore>insertBefore</HTMLDocument.documentElement.insertBefore>(headN, <HTMLDocument.documentElement.firstChild><HTMLDocument>document</HTMLDocument>.<HTMLDocument.documentElement>documentElement</HTMLDocument.documentElement>.firstChild</HTMLDocument.documentElement.firstChild>)</HTMLDocument.documentElement.insertBefore>;
        }
        <HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByTagName><HTMLDocument.getElementsByTagName>getElementsByTagName</HTMLDocument.getElementsByTagName>(<String>'head'</String></HTMLDocument.getElementsByTagName>)[<Number>0</Number>].appendChild(styleElement);
    }</Function>
    /**
     * Replace style class
     * @param root root of the oldStyle classes
     * @param oldStyle name of class or classes to replace
     * @param targetStyle name of new class or classes to use 
     */
    this.<String>replaceStyleClass</String> = <Function>function (root, oldStyle, targetStyle) {
        var elements = this.getElementsByStyle(oldStyle,root);
        for (var <Number>i=<Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <elements.length>elements.length</elements.length></Boolean>; <Number>i</Number>++) {
            // Handle cases where there are multiple classnames
            if (<Boolean>elements[<Number>i</Number>].className.indexOf(<String>' '</String>) != -<Number>1</Number></Boolean>) {
                var classNames = elements[<Number>i</Number>].className.split(<String>' '</String>);
                for (var ci in classNames) {
                    if (<Boolean>classNames[ci] == oldStyle</Boolean>) {
                        classNames[ci] = targetStyle;
                    }
                }
                // now reset the styles with the replaced values
                elements[<Number>i</Number>].<String>className</String> = <classNames.join>classNames.<classNames.join>join</classNames.join>(<String>' '</String>)</classNames.join>;
            } else  if (<Boolean>elements[<Number>i</Number>].className == oldStyle</Boolean>) {
                elements[<Number>i</Number>].<String>className</String> = targetStyle;
            }
        }
    }</Function>
    
    /**
    * Find a set of child nodes that contain the className specified
    * @param className is the targetClassName you are looking for
    * @param root  An optional root node to start searching from. The entire document will be searched if not specfied.
    *
    */
    this.<String>getElementsByStyle</String> = <Function>function(className, root){
        var <Array>elements = <Array>[]</Array></Array>;
        if (<Boolean>typeof root != <String>'undefined'</String></Boolean>) {
            var rootNode = root;
            if (<Boolean>typeof root == <String>'string'</String></Boolean>) {
                rootNode = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(root)</HTMLDocument.getElementById>;
            }    
            elements = this.getAllChildren(rootNode, <Array>[]</Array>);
        } else {
            elements = (<HTMLDocument.all><HTMLDocument>document</HTMLDocument>.all)</HTMLDocument.all> ? <HTMLDocument.all><HTMLDocument>document</HTMLDocument>.all</HTMLDocument.all> : <HTMLDocument.getElementsByTagName><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByTagName>getElementsByTagName</HTMLDocument.getElementsByTagName>(<String>"*"</String>)</HTMLDocument.getElementsByTagName>;
        }
	var <Array>found = <Array>[]</Array></Array>;
	for (var <Number>i=<Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <elements.length>elements.length</elements.length></Boolean>; <Number>i</Number>++) {
	// Handle cases where there are multiple classnames
            if (<Boolean>elements[<Number>i</Number>].className.indexOf(<String>' '</String>) != -<Number>1</Number></Boolean>) {
                var cn = elements[<Number>i</Number>].className.split(<String>' '</String>);
                for (var <Number>ci =<Number>0</Number></Number>; <Boolean><Number>ci</Number> &lt; <cn.length>cn.length</cn.length></Boolean>; <Number>ci</Number>++) {
                    if (<Boolean>cn[<Number>ci</Number>] == className</Boolean>) {
                        <Array.push><Array>found</Array>.<Array.push>push</Array.push>(elements[<Number>i</Number>])</Array.push>;
                    }
                }
            } else  if (<Boolean>elements[<Number>i</Number>].className == className</Boolean>) {
                <Array.push><Array>found</Array>.<Array.push>push</Array.push>(elements[<Number>i</Number>])</Array.push>;
            }
        }
        return <Array>found</Array>;
    }</Function>
    
    /**
     * Utility Function to get children
     * @param element for which to get the children
     */
    this.<String>getAllChildren</String> = <Function>function(target, children) {
        var <target.childNodes>_nc = <target.childNodes>target.childNodes</target.childNodes></target.childNodes>;
        for (var <Number>l=<Number>0</Number></Number>; <Boolean><Number>l</Number> &lt;  <target.childNodes.length><target.childNodes>_nc</target.childNodes>.length</target.childNodes.length></Boolean>; <Number>l</Number>++) {
            if (<Boolean><target.childNodes>_nc</target.childNodes>[<Number>l</Number>].nodeType == <Number>1</Number></Boolean>) {
                <children.push>children.<children.push>push</children.push>(<target.childNodes>_nc</target.childNodes>[<Number>l</Number>])</children.push>;
                if (<Boolean><target.childNodes>_nc</target.childNodes>[<Number>l</Number>].childNodes.length &gt; <Number>0</Number></Boolean>) {
                    this.getAllChildren(<target.childNodes>_nc</target.childNodes>[<Number>l</Number>], children);
                }
            }
        }
        return children;
    }</Function>
    
    /**
     * Load a widget
     * @param widget Object representing widget to load
     */
    this.<String>loadWidget</String> = <Function>function(_jmw) {
        // see if the widget has been defined.
        if (<Boolean><_jmaki.attributes.get>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get>get</_jmaki.attributes.get>(<_jmw.uuid>_jmw.uuid</_jmw.uuid>)</_jmaki.attributes.get> != null</Boolean>) {
            return;
        }
        var targetName =<String>"jmaki.widgets."</String> + <_jmw.name>_jmw.name</_jmw.name> + <String>".Widget"</String>;
        var con = this.findObject(targetName);
        if (<Boolean>typeof con != <String>"function"</String></Boolean>) {
            <logError><void>logError</void>(<String>"Could not find widget constructor for: "</String> + targetName + <String>". Please make sure the widget constructor is properly defined."</String>, <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<_jmw.uuid>_jmw.uuid</_jmw.uuid>)</HTMLDocument.getElementById>)</logError>;
        }
        var wimpl;
        // bind the value using a @{foo.obj} notation       
        if ((typeof <Boolean><_jmw.value>_jmw.value</_jmw.value> == <String>'string'</String>)</Boolean> &amp;&amp; <Boolean><_jmw.value.indexOf>_jmw.<_jmw.value>value</_jmw.value>.<_jmw.value.indexOf>indexOf</_jmw.value.indexOf>(<String>"@{"</String>)</_jmw.value.indexOf> == <Number>0</Number></Boolean>) {      
            var _vw = <RegExp.exec><RegExp>/[^@{].*[^}]/</RegExp>.<RegExp.exec>exec</RegExp.exec>(<_jmw.value>_jmw.value</_jmw.value>)</RegExp.exec>;
            _jmw.<String>value</String> = <_jmaki.findObject>_jmaki.<_jmaki.findObject>findObject</_jmaki.findObject>(<String>new String(_vw)</String>)</_jmaki.findObject>;
        }
        // do not wrap IE with exception handler
        // because we cant' get the right line number
        var <_jmw.uuid>_uuid = <_jmw.uuid>_jmw.uuid</_jmw.uuid></_jmw.uuid>;      
        if (<RegExp.test><RegExp>/MSIE/i</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>) {
            var <_jmw.uuid>_uuid = <_jmw.uuid>_jmw.uuid</_jmw.uuid></_jmw.uuid>;
            var oldError = null;
            if (<Window.onerror><Window>window</Window>.onerror</Window.onerror>) {
                <Window.onerror>oldError</Window.onerror> = <Window.onerror><Window>window</Window>.onerror</Window.onerror>;
            }
            var <Function>eh = <Function>function(message, url, line) {
                var _puuid = _uuid;
                <logWidgetError><void>logWidgetError</void>(targetName, _puuid,url, line, message, <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_puuid)</HTMLDocument.getElementById>)</logWidgetError>;
            }</Function></Function>
            <Window>window</Window>.<String>onerror</String> = <Function>eh</Function>;
            <con>wimpl</con> = <con>new con(_jmw)</con>;          
            <Window>window</Window>.<String>onerror</String> = null;
            if (<Window.onerror>oldError</Window.onerror>) {
                <Window>window</Window>.<String>onerror</String> = <Window.onerror>oldError</Window.onerror>;
            }              
        } else if (<Boolean>typeof con == <String>'function'</String></Boolean>){
            try {
                <con>wimpl</con> = <con>new con(_jmw)</con>;
            } catch (e){
                var <String>line = <String>"unknown"</String></String>;
                var description = null;
                if (<e.lineNumber>e.lineNumber</e.lineNumber>) <e.lineNumber>line</e.lineNumber> = <e.lineNumber>e.lineNumber</e.lineNumber>;
                if (<e.message>e.message</e.message>) <e.message>description</e.message> = <e.message>e.message</e.message>;
 
                if (<_jmaki.debug>_jmaki.debug</_jmaki.debug>) {
                    <logWidgetError><void>logWidgetError</void>(targetName, <_jmw.uuid>_jmw.uuid</_jmw.uuid>,<_jmw.script>_jmw.script</_jmw.script>, <e.lineNumber>line</e.lineNumber>, <e.message>description</e.message> , <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<_jmw.uuid>_jmw.uuid</_jmw.uuid>)</HTMLDocument.getElementById>)</logWidgetError>;
                    return;
                }
            }
        } else if (<Boolean>typeof con == <String>'undefined'</String></Boolean>) {          
            <logError><void>logError</void>(<String>"Unable to find widget constructor "</String> + targetName + <String>" check log and make sure constructor is defined."</String>, <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<_jmw.uuid>_jmw.uuid</_jmw.uuid>)</HTMLDocument.getElementById>)</logError>;
            return;
        }
        if (<Boolean>typeof wimpl == <String>'object'</String></Boolean>) {
            <_jmaki.attributes.put>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.put>put</_jmaki.attributes.put>(<_jmw.uuid>_jmw.uuid</_jmw.uuid>, <con>wimpl</con>)</_jmaki.attributes.put>;
             if (<Boolean><con.postLoad><con>wimpl</con>.postLoad</con.postLoad> == <String>'function'</String></Boolean>) {
                <con.postLoad><con>wimpl</con>.<con.postLoad>postLoad</con.postLoad>()</con.postLoad>;
             }
             <_jmaki.publish>_jmaki.<_jmaki.publish>publish</_jmaki.publish>(<String>"/jmaki/runtime/widget/loaded"</String>, _jmw)</_jmaki.publish>;
        } else {          
            <logError><void>logError</void>(<String>"Unable to create an instance of "</String> + targetName + <String>". See the error log for more detials."</String>, <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<_jmw.uuid>_jmw.uuid</_jmw.uuid> )</HTMLDocument.getElementById>)</logError>;
        }
    }</Function>
    
    <Function>function <void>logWidgetError</void>(name,uuid, url, line, _m, div) {
        var message= <String>"&lt;span&gt;Error loading "</String> + name + <String>" : id="</String> + uuid + <String>"&lt;br&gt;"</String> +
        <String>"Script: "</String>  + url + <String>" (line:"</String> + line + <String>")."</String> +
        <String>"&lt;br&gt;Message: "</String> + _m + <String>"&lt;/span&gt;"</String>;
        <logError><void>logError</void>(message, div)</logError>;
    }</Function>
 
    <Function>function <void>logError</void>(message, div) {
        if (<Boolean>div == null</Boolean> || typeof <Boolean><div.className>div.className</div.className> == <String>'undefined'</String></Boolean>) {
            div = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"div"</String>)</HTMLDocument.createElement>;
            <HTMLDocument.body.appendChild><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.<HTMLDocument.body.appendChild>appendChild</HTMLDocument.body.appendChild>(div)</HTMLDocument.body.appendChild>;
        }
        div.<String>className</String> = <String>""</String>;
        div.<div.style>style</div.style>.<String>color</String> = <String>"red"</String>;
        div.<String>innerHTML</String> = message;
    }</Function>
    /**
     * An easy way to get a instance of a widget.
     * returns null if their is not a widget with the id.
     */
    this.<String>getWidget</String> = <Function>function(id) {
        return <_jmaki.attributes.get>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get>get</_jmaki.attributes.get>(id)</_jmaki.attributes.get>;
    }</Function>
    
    /**
     * destroy all registered widgets under the target node
     * @param _root - The _root to start at. All widgets will be removed if not specified.
     */
    this.<String>clearWidgets</String> = <Function>function(_root) {
        if (<Boolean>typeof _root == <String>"undefined"</String></Boolean>) {
            var _k = <_jmaki.attributes.keys>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.keys>keys</_jmaki.attributes.keys>()</_jmaki.attributes.keys>;
            // call destroy on objects that were registered in the attribute map
            for (var <Number>l=<Number>0</Number></Number>; <Boolean><Number>l</Number> &lt; <_k.length>_k.length</_k.length></Boolean>; <Number>l</Number>++) {
                if (typeof <Boolean>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get><_jmaki.attributes.get>get</_jmaki.attributes.get>(_k[<Number>l</Number>]</_jmaki.attributes.get>).destroy != <String>'undefined'</String></Boolean> &amp;&amp;
                    typeof <Boolean>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get><_jmaki.attributes.get>get</_jmaki.attributes.get>(_k[<Number>l</Number>]</_jmaki.attributes.get>).destroy == <String>'function'</String></Boolean>) {
                    _jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get><_jmaki.attributes.get>get</_jmaki.attributes.get>(_k[<Number>l</Number>]</_jmaki.attributes.get>).destroy();
                }
                <_jmaki.attributes.remove>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.remove>remove</_jmaki.attributes.remove>(_k[<Number>l</Number>])</_jmaki.attributes.remove>;                
            }
            _jmaki.<String>loaded</String> = <Boolean>false</Boolean>;
            <Array>widgets</Array> = <Array>[]</Array>;
        } else {
            var _ws = <_jmaki.getAllChildren>_jmaki.<_jmaki.getAllChildren>getAllChildren</_jmaki.getAllChildren>(_root,<Array>[]</Array>)</_jmaki.getAllChildren>;           
            for (var <Number>l=<Number>0</Number></Number>; <Boolean><Number>l</Number> &lt; <_ws.length>_ws.length</_ws.length></Boolean>; <Number>l</Number>++) {
                if (_ws[<Number>l</Number>].id &amp;&amp; <_jmaki.attributes.get>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get>get</_jmaki.attributes.get>(_ws[<Number>l</Number>].id)</_jmaki.attributes.get> &amp;&amp;
                    typeof <Boolean>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get><_jmaki.attributes.get>get</_jmaki.attributes.get>(_ws[<Number>l</Number>].id</_jmaki.attributes.get>).destroy == <String>'function'</String></Boolean>) {
                    _jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.get><_jmaki.attributes.get>get</_jmaki.attributes.get>(_ws[<Number>l</Number>].id</_jmaki.attributes.get>).destroy();
                    var _p = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_ws[<Number>l</Number>].id)</HTMLDocument.getElementById>;
                    <_p.parentNode.removeChild>_p.<_p.parentNode>parentNode</_p.parentNode>.<_p.parentNode.removeChild>removeChild</_p.parentNode.removeChild>(_p)</_p.parentNode.removeChild>;
                } 
                <_jmaki.attributes.remove>_jmaki.<_jmaki.attributes>attributes</_jmaki.attributes>.<_jmaki.attributes.remove>remove</_jmaki.attributes.remove>(_ws[<Number>l</Number>].id)</_jmaki.attributes.remove>;           
            }
        }
    }</Function>
    
    /*
     * Add a glue listener programatcially. following is an example.
     *
     *{topic : "/dojo/fisheye",action: "call", target: { object: "jmaki.dynamicfaces",functionName: "fishEyeValueUpdate"}}
     *   or 
     * @param l as topic and 
     * @param t as the target object path ending with a function 
     */
    this.<String>addGlueListener</String> = <Function>function(l, t) {      
        if (!<_jmaki.config>_jmaki.config</_jmaki.config>) _jmaki.<String>config</String> = {};
        if (!<_jmaki.config.glue>_jmaki.<_jmaki.config>config</_jmaki.config>.glue</_jmaki.config.glue>) _jmaki.<_jmaki.config>config</_jmaki.config>.<String>glue</String> = {};
        if (!<_jmaki.config.glue.listeners>_jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.listeners</_jmaki.config.glue.listeners>) _jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.<String>listeners</String> = <Array>[]</Array>;
        // handle key word arguments
        if (typeof <Boolean>l == <String>'object'</String></Boolean> &amp;&amp; !(l instanceof RegExp)) {          
            if (<l.topic>l.topic</l.topic>) l.<String>topic</String> = <l.topic.replace>l.<l.topic>topic</l.topic>.<l.topic.replace>replace</l.topic.replace>(<RegExp>/^\s+|\s+$/g</RegExp>, <String>""</String>)</l.topic.replace>;
            if (<l.topicRegExp>l.topicRegExp</l.topicRegExp>) l.<String>topic</String> = <RegExp>new RegExp(<l.topicRegExp>l.topicRegExp</l.topicRegExp>)</RegExp>;
            lis = l;
        // function binding
        } else if (<Boolean>typeof t == <String>'string'</String></Boolean>){
          lis = {};     
          if (<l.topicRegExp>l.topicRegExp</l.topicRegExp>) lis.<String>topic</String> = <RegExp>new RegExp(<l.topicRegExp>l.topicRegExp</l.topicRegExp>)</RegExp>;
          else lis.<String>topic</String> = l;
          lis.<String>target</String> = {};
          var _is = <t.split>t.<t.split>split</t.split>(<String>'.'</String>)</t.split>;
          lis.<String>action</String> = <String>"call"</String>;
          lis.<lis.target>target</lis.target>.<String>functionName</String> = <_is.pop>_is.<_is.pop>pop</_is.pop>()</_is.pop>;
          lis.<lis.target>target</lis.target>.<String>object</String> = <_is.join>_is.<_is.join>join</_is.join>(<String>'.'</String>)</_is.join>;
        // inline function
        } else if (<Boolean>typeof t == <String>'function'</String></Boolean>) {
          lis = {};
          if (<l.topicRegExp>l.topicRegExp</l.topicRegExp>) lis.<String>topic</String> =  <RegExp>new RegExp(<l.topicRegExp>l.topicRegExp</l.topicRegExp>)</RegExp>;
          else lis.<String>topic</String> = l;          
          lis.<String>target</String> = {};
          lis.<String>action</String> = <String>"call"</String>;
          lis.<lis.target>target</lis.target>.<String>functionHandler</String> = t;
        } else {
          <_jmaki.log>_jmaki.<_jmaki.log>log</_jmaki.log>(<String>"don't know what to do with "</String> + l)</_jmaki.log>;
        }
        if (<Boolean>typeof lis != <String>'undefined'</String></Boolean>)<_jmaki.config.glue.listeners.push>_jmaki.<_jmaki.config>config</_jmaki.config>.<_jmaki.config.glue>glue</_jmaki.config.glue>.<_jmaki.config.glue.listeners>listeners</_jmaki.config.glue.listeners>.<_jmaki.config.glue.listeners.push>push</_jmaki.config.glue.listeners.push>(lis)</_jmaki.config.glue.listeners.push>;
    }</Function>
    
    /*
     * @param _src is the source object
     * @param _par is the class to extend
     */
    this.<String>extend</String> = <Function>function(_src, _par) {
        _src.<String>prototype</String> = <_par>new _par()</_par>;
        _src.<_src.prototype>prototype</_src.prototype>.<String>constructor</String> = _src;
        _src.<String>superclass</String> = <_par.prototype>_par.prototype</_par.prototype>;
        for (<MyObj>i</MyObj> in _par) {
            _src.<_src.prototype>prototype</_src.prototype>[<MyObj>i</MyObj>] = _par[<MyObj>i</MyObj>];
        }
    }</Function>
    
    this.<String>log</String> = <Function>function(text, level) {
        if (!<_jmaki.debug>_jmaki.debug</_jmaki.debug>) return;
        if (!<_jmaki.ld>_jmaki.ld</_jmaki.ld>){
            var ld = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"div"</String>)</HTMLDocument.createElement>;
            ld.<ld.style>style</ld.style>.<String>border</String> = <String>"1px solid #000000"</String>;
            ld.<ld.style>style</ld.style>.<String>fontSize</String> = <String>"12px"</String>;
            ld.<ld.style>style</ld.style>.<String>position</String>  = <String>"absolute"</String>;
            ld.<ld.style>style</ld.style>.<String>zIndex</String>  = <String>"999"</String>;
            ld.<ld.style>style</ld.style>.<String>bottom</String> = <String>"0px"</String>;
            ld.<ld.style>style</ld.style>.<String>background</String> = <String>"yellow"</String>;
            ld.<ld.style>style</ld.style>.<String>right</String> =<String>"0px"</String>;
            ld.<ld.style>style</ld.style>.<String>width</String> = <String>"400px"</String>;
            ld.<ld.style>style</ld.style>.<String>height</String> = <String>"200px"</String>;
            ld.<ld.style>style</ld.style>.<String>overflowY</String> = <String>"auto"</String>;
            <HTMLDocument.body.appendChild><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.<HTMLDocument.body.appendChild>appendChild</HTMLDocument.body.appendChild>(ld)</HTMLDocument.body.appendChild>;
            _jmaki.<String>ld</String> = ld;
        }
        var lm = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"div"</String>)</HTMLDocument.createElement>;
        lm.<String>innerHTML</String> = text;
        <_jmaki.ld.appendChild>_jmaki.<_jmaki.ld>ld</_jmaki.ld>.<_jmaki.ld.appendChild>appendChild</_jmaki.ld.appendChild>(lm)</_jmaki.ld.appendChild>;
    }</Function>
    
    /**
     * Initialize jMaki by loading the config.json
     *  Write in the glue by loading dependencies and
     *  Register listeners.
     */
    this.<String>initialize</String> = <Function>function() {     
        if (!<_jmaki.config>_jmaki.config</_jmaki.config>)_jmaki.<String>config</String> = {};
        if (!<_jmaki.config.glue>_jmaki.<_jmaki.config>config</_jmaki.config>.glue</_jmaki.config.glue>)_jmaki.<_jmaki.config>config</_jmaki.config>.<String>glue</String> = {};
    
        var req = this.getXHR();
        try {
            <req.open>req.<req.open>open</req.open>(<String>"GET"</String>, this.webRoot + this.resourcesRoot + <String>"/config.json"</String>, <Boolean>false</Boolean>)</req.open>;
            <req.send>req.<req.send>send</req.send>(null)</req.send>;
        }  catch (e) {}
        if (<Boolean><req.readyState>req.readyState</req.readyState> == <Number>4</Number></Boolean>) { 
            // status of 200 signifies sucessful HTTP call
            if (<Boolean><req.status>req.status</req.status> == <Number>200</Number></Boolean>) {
                if (<Boolean><req.responseText>req.responseText</req.responseText> == <String>''</String></Boolean>) return;
                var obj = <eval>eval(<String>'('</String> + <req.responseText>req.responseText</req.responseText> + <String>')'</String>)</eval>;
                if (<obj.config>obj.config</obj.config>) {
                    _jmaki.<_jmaki.config>config</_jmaki.config>.<String>theme</String> = <obj.config.theme>obj.<obj.config>config</obj.config>.theme</obj.config.theme>;
                    // write out the dependent libraries so we have access
                    if (<obj.config.glue.timers>obj.<obj.config>config</obj.config>.<obj.config.glue>glue</obj.config.glue>.timers</obj.config.glue.timers>) {  
                        <_jmaki.addTimers>_jmaki.<_jmaki.addTimers>addTimers</_jmaki.addTimers>(<obj.config.glue.timers>obj.<obj.config>config</obj.config>.<obj.config.glue>glue</obj.config.glue>.timers</obj.config.glue.timers>)</_jmaki.addTimers>;
                    }
                    if (<obj.config.gluelisteners>obj.<obj.config>config</obj.config>.gluelisteners</obj.config.gluelisteners>){
                        for (var <Number>gl=<Number>0</Number></Number>; <Boolean><Number>gl</Number> &lt; <obj.config.glue.listeners.length>obj.<obj.config>config</obj.config>.<obj.config.glue>glue</obj.config.glue>.<obj.config.glue.listeners>listeners</obj.config.glue.listeners>.length</obj.config.glue.listeners.length></Boolean>;<Number>gl</Number>++) {
                               <_jmaki.addGlueListener>_jmaki.<_jmaki.addGlueListener>addGlueListener</_jmaki.addGlueListener> (obj.<obj.config>config</obj.config>.<obj.config.glue>glue</obj.config.glue>.<obj.config.glue.listeners>listeners</obj.config.glue.listeners>[<Number>gl</Number>])</_jmaki.addGlueListener>; 
                        }
                
                    }
                }
            }
        }
        <postInitialize><void>postInitialize</void>()</postInitialize>;
    }</Function>
    
    var <Array>timers = <Array>[]</Array></Array>;
    
    /**
     * Create a namespace with the given string
     */
    this.<String>namespace</String> = <Function>function(_path, target) {
        // get the top level object
        var paths = <_path.split>_path.<_path.split>split</_path.split>(<String>'.'</String>)</_path.split>;
        var _obj = _globalScope[paths[<Number>0</Number>]];
        if (<Boolean>typeof _obj == <String>'undefined'</String></Boolean>) _globalScope[paths[<Number>0</Number>]] = _obj = {};
        for (var <Number>ii = <Number>1</Number></Number>; <Boolean><Number>ii</Number> &lt; <paths.length>paths.length</paths.length></Boolean>; <Number>ii</Number>++) {
            if (<Boolean>typeof _obj[paths[<Number>ii</Number>]] != <String>'undefined'</String></Boolean> ) {
                _obj = _obj[paths[<Number>ii</Number>]];                                       
            } else {
                _obj[paths[<Number>ii</Number>]] = {};
                _obj = _obj[paths[<Number>ii</Number>]];
            }
        }
        // if object provided it becomes the last in the chain
        if (<Boolean>typeof target == <String>'object'</String></Boolean>) {
            _obj = target;
        }
        return _obj;
    }</Function>
    
    this.<String>findObject</String> = <Function>function(_path) {
        var paths = <_path.split>_path.<_path.split>split</_path.split>(<String>'.'</String>)</_path.split>;
        var _obj = _globalScope[paths[<Number>0</Number>]];
        var <Boolean>found = <Boolean>true</Boolean></Boolean>;
        if (<Boolean>typeof _obj != <String>'undefined'</String></Boolean> ){
            for (var <Number>ii =<Number>1</Number></Number>; <Boolean><Number>ii</Number> &lt; <paths.length>paths.length</paths.length></Boolean>; <Number>ii</Number>++) {
                var _lp = paths[<Number>ii</Number>];
                if (<Boolean><_lp.indexOf>_lp.<_lp.indexOf>indexOf</_lp.indexOf>(<String>'()'</String>)</_lp.indexOf> != -<Number>1</Number></Boolean>){                  
                  var _ns = <_lp.split>_lp.<_lp.split>split</_lp.split>(<String>'()'</String>)</_lp.split>;
                  if (<Boolean>typeof _obj[_ns[<Number>0</Number>]] == <String>'function'</String></Boolean>){
                      var _fn = _obj[_ns[<Number>0</Number>]];              
                      return <_fn.call>_fn.<_fn.call>call</_fn.call>(_globalScope)</_fn.call>;
                  }
                }     
                if (<Boolean>typeof _obj[_lp] != <String>'undefined'</String></Boolean> ) {
                    _obj = _obj[_lp];                                       
                    <Boolean>found</Boolean> = <Boolean>true</Boolean>;
                } else {
                    <Boolean>found</Boolean> = <Boolean>false</Boolean>;
                    break;
                }
            }
            if (<Boolean>found</Boolean>) {
                return _obj;
            }
        }
        return null;
    }</Function>
    
    this.<String>Timer</String> = <Function>function(args, isCall) {
        var _src = this;
        this.<String>args</String> = args;
        var _target;
        
        this.<String>processTopic</String> = <Function>function() {
            for (var <Number>ti = <Number>0</Number></Number>; <Boolean><Number>ti</Number> &lt; <topics.length>args.<topics>topics</topics>.length</topics.length></Boolean>; <Number>ti</Number>++){
                <_jmaki.publish>_jmaki.<_jmaki.publish>publish</_jmaki.publish>(args.<topics>topics</topics>[<Number>ti</Number>], {topic: args.<topics>topics</topics>[<Number>ti</Number>],
                type:<String>'timer'</String>,
                src:_src,
                timeout: <args.to>args.to</args.to>})</_jmaki.publish>;
            }
        }</Function>
        
        this.<String>processCall</String> = <Function>function() {
            if (!_target) {
             var  _obj = <_jmaki.findObject>_jmaki.<_jmaki.findObject>findObject</_jmaki.findObject>(<args.on>args.on</args.on>)</_jmaki.findObject>;
                if (<Boolean>typeof _obj == <String>'function'</String></Boolean>){
                    <_obj>_target</_obj> = <_obj>new _obj()</_obj>;
                } else if (<Boolean>typeof _obj == <String>'object'</String></Boolean>){
                    _target = _obj;
                }
            }
            if ((_target &amp;&amp; typeof <Boolean>_target == <String>'object'</String></Boolean>)) {
              if(<Boolean>typeof _target[<args.fn>args.fn</args.fn>] == <String>'function'</String></Boolean>) {
                _target[<args.fn>args.fn</args.fn>]({type:<String>'timer'</String>, src:_src, timeout: <args.to>args.to</args.to>});
              }
            }
        }</Function>
        
        this.<String>run</String> = <Function>function() {
            if (isCall) {
                <_src.processCall>_src.<_src.processCall>processCall</_src.processCall>()</_src.processCall>;
            } else {
                <_src.processTopic>_src.<_src.processTopic>processTopic</_src.processTopic>()</_src.processTopic>;
            }
            <_globalScope.setTimeout>_globalScope.<_globalScope.setTimeout>setTimeout</_globalScope.setTimeout>(<_src.run>_src.run</_src.run>,<args.to>args.to</args.to>)</_globalScope.setTimeout>;
        }</Function>
    }</Function>
    
    this.<String>addTimer</String> = <Function>function(_timer){
        var <Array>timers = <Array>[]</Array></Array>;
        <Array.push><Array>timers</Array>.<Array.push>push</Array.push>(_timer)</Array.push>;
        this.addTimers(<Array>timers</Array>);
    }</Function>
    
    this.<String>addTimers</String> = <Function>function(_timers){
        if (<Boolean>typeof _timers != <String>'undefined'</String></Boolean>){
            for (var <Number>_l=<Number>0</Number></Number>; <Boolean><Number>_l</Number> &lt;<_timers.length>_timers.length</_timers.length></Boolean>;<Number>_l</Number>++ ) {
                // create a wrapper and add the timer
                var _timer = _timers[<Number>_l</Number>];              
                if (<Boolean><_timer.action>_timer.action</_timer.action> == <String>'call'</String></Boolean> &amp;&amp;
                <Boolean><_timer.target>_timer.target</_timer.target> != <String>'undefined'</String></Boolean> &amp;&amp;
                <Boolean><_timer.target.object>_timer.<_timer.target>target</_timer.target>.object</_timer.target.object> != <String>'undefined'</String></Boolean> &amp;&amp;
                <Boolean><_timer.target.functionName>_timer.<_timer.target>target</_timer.target>.functionName</_timer.target.functionName> != <String>'undefined'</String></Boolean> &amp;&amp;
                typeof <Boolean><_timer.timeout>_timer.timeout</_timer.timeout> != <String>'undefined'</String></Boolean>) {
                    // create the timer
                    var args = {on: <_timer.target.object>_timer.<_timer.target>target</_timer.target>.object</_timer.target.object>,
                    fn: <_timer.target.functionName>_timer.<_timer.target>target</_timer.target>.functionName</_timer.target.functionName>,
                    to: <_timer.timeout>_timer.timeout</_timer.timeout>
                    }
                    var <_jmaki.Timer>timer = <_jmaki.Timer>new <_jmaki.Timer>_jmaki.Timer</_jmaki.Timer>(args,<Boolean>true</Boolean>)</_jmaki.Timer></_jmaki.Timer>;
                    <timers.push>timers.<timers.push>push</timers.push>(<_jmaki.Timer>timer</_jmaki.Timer>)</timers.push>;
                    <_jmaki.Timer.run><_jmaki.Timer>timer</_jmaki.Timer>.<_jmaki.Timer.run>run</_jmaki.Timer.run>()</_jmaki.Timer.run>;
                    
                } else if (<Boolean>_timers[<Number>_l</Number>].action == <String>'publish'</String></Boolean>) {
                    var args = {topics: _timers[<Number>_l</Number>].topics,
                    to: <_timer.timeout>_timer.timeout</_timer.timeout>
                    }
                    var <_jmaki.Timer>timer = <_jmaki.Timer>new <_jmaki.Timer>_jmaki.Timer</_jmaki.Timer>(args,<Boolean>false</Boolean>)</_jmaki.Timer></_jmaki.Timer>;
                    <timers.push>timers.<timers.push>push</timers.push>(<_jmaki.Timer>timer</_jmaki.Timer>)</timers.push>;
                    <_jmaki.Timer.run><_jmaki.Timer>timer</_jmaki.Timer>.<_jmaki.Timer.run>run</_jmaki.Timer.run>()</_jmaki.Timer.run>;
                }
            }            
        }
    }</Function>
    
    <Function>function <void>postInitialize</void>() {

        if (<_jmaki.initialized>_jmaki.initialized</_jmaki.initialized>) return;
        else _jmaki.<String>initialized</String> = <Boolean>true</Boolean>;

        <_jmaki.publish>_jmaki.<_jmaki.publish>publish</_jmaki.publish>(<String>"/jmaki/runtime/intialized"</String>, {})</_jmaki.publish>;
        <_jmaki.bootstrapWidgets>_jmaki.<_jmaki.bootstrapWidgets>bootstrapWidgets</_jmaki.bootstrapWidgets>()</_jmaki.bootstrapWidgets>;
        <_jmaki.publish>_jmaki.<_jmaki.publish>publish</_jmaki.publish>(<String>"/jmaki/runtime/widgetsLoaded"</String>, {})</_jmaki.publish>;
        // load the theme
        if ( <_jmaki.config>_jmaki.config</_jmaki.config> &amp;&amp; <_jmaki.config.theme>_jmaki.<_jmaki.config>config</_jmaki.config>.theme</_jmaki.config.theme>) {
            var <_jmaki.config.theme>theme = <_jmaki.config.theme>_jmaki.<_jmaki.config>config</_jmaki.config>.theme</_jmaki.config.theme></_jmaki.config.theme>;
            if (!<RegExp.test><RegExp>/(^http)/i</RegExp>.<RegExp.test>test</RegExp.test>(<_jmaki.config.theme>theme</_jmaki.config.theme>)</RegExp.test>) theme = <_jmaki.webRoot>_jmaki.webRoot</_jmaki.webRoot> + theme;             
            <_jmaki.loadStyle>_jmaki.<_jmaki.loadStyle>loadStyle</_jmaki.loadStyle>(theme)</_jmaki.loadStyle>;
        }
        <_jmaki.publish>_jmaki.<_jmaki.publish>publish</_jmaki.publish>(<String>"/jmaki/runtime/loadComplete"</String>, {})</_jmaki.publish>;
    }</Function>
    /**
     *  All for a filter to be applied to a dataset
     *  @param input - An object you wish to filter
     *  @param a string representing the path to the object or
     *    a funciton reference to procress the input
     */
    this.<String>filter</String> = <Function>function(input, filter){
        if (<Boolean>typeof filter == <String>'string'</String></Boolean>) {
            var h = <_jmaki.findObject>_jmaki.<_jmaki.findObject>findObject</_jmaki.findObject>(filter)</_jmaki.findObject>;
            return <h.call>h.<h.call>call</h.call>(_globalScope,input)</h.call>;
        } else if (<Boolean>typeof filter == <String>'function'</String></Boolean>){
            return <filter.call>filter.<filter.call>call</filter.call>(_globalScope, input)</filter.call>;
        }
    }</Function>
    
 this.<String>DContainer</String> = <Function>function(args){
        var _self = this;
        var uuid;
        var _container;
        var ie = <RegExp.test><RegExp>/MSIE/i</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>;
        
        if (<Boolean>typeof <args.target>args.target</args.target> == <String>'string'</String></Boolean>) {
            <args.target>uuid</args.target> = <args.target>args.target</args.target>;
            _container = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(target)</HTMLDocument.getElementById>;
        } else {
            <args.target.id>uuid</args.target.id> = <args.target.id>args.<args.target>target</args.target>.id</args.target.id>;
            <args.target>_container</args.target> = <args.target>args.target</args.target>;
        }
        
        if (typeof <Boolean>overflow != <String>'undefined'</String></Boolean> &amp;&amp; <args.target.style.overflow><args.target>_container</args.target>.<args.target.style>style</args.target.style>.overflow</args.target.style.overflow>) {
            <args.target>_container</args.target>.<_container.style>style</_container.style>.<String>overflow</String> = <String>'true'</String>;
        }
        
        var oldWidth;
        this.<String>url</String> = null;
        var <Boolean>autoSizeH = <Boolean>false</Boolean></Boolean>;
        var <Boolean>autoSizeW = <Boolean>false</Boolean></Boolean>;
        
        if (<args.autosize>args.autosize</args.autosize>) {
            <Boolean>autoSizeH</Boolean> = <Boolean>true</Boolean>;
            <Boolean>autoSizeW</Boolean> = <Boolean>true</Boolean>;
        }
        
        // default sizes are all based on the width of the container   
        var VIEWPORT_WIDTH;
        var VIEWPORT_HEIGHT;
        
        this.<String>loadURL</String> = <Function>function(_url){
            if (<Boolean>typeof _url != <String>'undefined'</String></Boolean>) { 
                if (<Boolean>typeof _url == <String>'string'</String></Boolean>){
                   _self.<String>url</String> = _url; 
                } else if (<_url.url>_url.url</_url.url>) {               
                    _self.<String>url</String> = <_url.url>_url.url</_url.url>;
                }
                if (<args.useIframe>args.useIframe</args.useIframe>) {
                    _self.<_self.iframe>iframe</_self.iframe>.<String>src</String> =  <_self.url>_self.url</_self.url>;
                } else {
                    <_jmaki.injector.inject>_jmaki.<_jmaki.injector>injector</_jmaki.injector>.<_jmaki.injector.inject>inject</_jmaki.injector.inject>({url: <_self.url>_self.url</_self.url>, injectionPoint: _container})</_jmaki.injector.inject>;
                }
            }
        }</Function>
      
        <Function>function getPosition(_e) {
            var <Number>pX = <Number>0</Number></Number>;
            var <Number>pY = <Number>0</Number></Number>;
            try {
             while (<_e.offsetParent.offsetParent><_e.offsetParent>_e</_e.offsetParent>.offsetParent</_e.offsetParent.offsetParent>) {               
                pY += <_e.offsetTop>_e.offsetTop</_e.offsetTop>;               
                pX += <_e.offsetLeft>_e.offsetLeft</_e.offsetLeft>;
                <_e.offsetParent>_e</_e.offsetParent> = <_e.offsetParent><_e.offsetParent>_e</_e.offsetParent>.offsetParent</_e.offsetParent>;
            }
            } catch(e){};
            return {x: pX, y: pY};
        }</Function>
        
        this.<String>resize</String> = <Function>function() {
            var pos = <getPosition>getPosition(_container)</getPosition>;       
            if (autoSizeH || autoSizeW){
                if (!<_container.parentNode>_container.parentNode</_container.parentNode>) return;
                var pos = <getPosition>getPosition(_container)</getPosition>;
                if (<Boolean><_container.parentNode.nodeName>_container.<_container.parentNode>parentNode</_container.parentNode>.nodeName</_container.parentNode.nodeName> == <String>"BODY"</String></Boolean>) {
                    if (<Window.innerHeight><Window>window</Window>.innerHeight</Window.innerHeight>){
                        VIEWPORT_HEIGHT = <Window.innerHeight><Window>window</Window>.innerHeight</Window.innerHeight> - <pos.y>pos.y</pos.y> -<Number>40</Number>;
                        VIEWPORT_WIDTH = <Window.innerWidth><Window>window</Window>.innerWidth</Window.innerWidth> - <Number>20</Number>;
                    } else {
                        var <_container.parentNode>_tNode = <_container.parentNode>_container.parentNode</_container.parentNode></_container.parentNode>;
                        while(<Boolean><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode> != null</Boolean> &amp;&amp;
                        (<Boolean><_container.parentNode.parentNode.clientHeight><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientHeight</_container.parentNode.parentNode.clientHeight> == <Number>0</Number></Boolean> ||
                        typeof <Boolean><_container.parentNode.parentNode.clientWidth><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientWidth</_container.parentNode.parentNode.clientWidth> == <String>'undefined'</String></Boolean>)) {
                            <_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode> = <_tNode.parentNode><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.parentNode</_tNode.parentNode>;
                        }
                        if (<Boolean><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode> == null</Boolean>) {
                            
                            <Number>VIEWPORT_WIDTH</Number> = <Number>400</Number>;
                        } else {
                            VIEWPORT_WIDTH = <_tNode.clientWidth><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientWidth</_tNode.clientWidth> -<Number>20</Number>;
                            VIEWPORT_HEIGHT = <_container.parentNode.parentNode.clientHeight><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientHeight</_container.parentNode.parentNode.clientHeight> - <pos.y>pos.y</pos.y> - <Number>15</Number>;
                        }
                    }
                } else {
                    
                    var <_container.parentNode>_tNode = <_container.parentNode>_container.parentNode</_container.parentNode></_container.parentNode>;
                    while(<Boolean><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode> != null</Boolean> &amp;&amp;
                    (<Boolean><_container.parentNode.parentNode.clientHeight><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientHeight</_container.parentNode.parentNode.clientHeight> == <Number>0</Number></Boolean> ||
                    typeof <Boolean><_container.parentNode.parentNode.clientWidth><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientWidth</_container.parentNode.parentNode.clientWidth> == <String>'undefined'</String></Boolean>)) {
                        <_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode> = <_tNode.parentNode><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.parentNode</_tNode.parentNode>;
                    }
                    if (<Boolean><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode> == null</Boolean>) {
                        <Number>VIEWPORT_WIDTH</Number> = <Number>400</Number>;
                    } else {
                        <_container.parentNode.parentNode.clientWidth>VIEWPORT_WIDTH</_container.parentNode.parentNode.clientWidth> = <_tNode.clientWidth><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientWidth</_tNode.clientWidth>;
                        <_container.parentNode.parentNode.clientHeight>VIEWPORT_HEIGHT</_container.parentNode.parentNode.clientHeight> = <_tNode.clientHeight><_container.parentNode.parentNode>_tNode</_container.parentNode.parentNode>.clientHeight</_tNode.clientHeight>;
                    }
                }         
                if (autoSizeH) {                  
                    if (<Boolean><_container.parentNode.parentNode.clientHeight>VIEWPORT_HEIGHT</_container.parentNode.parentNode.clientHeight> &lt; <Number>0</Number></Boolean>) <Number>VIEWPORT_HEIGHT</Number> = <Number>320</Number>;
                    _container.<_container.style>style</_container.style>.<String>height</String> = <Number>VIEWPORT_HEIGHT</Number> + <String>"px"</String>;
                }
                if (autoSizeW) {
                    _container.<_container.style>style</_container.style>.<String>width</String> = <_container.parentNode.parentNode.clientWidth>VIEWPORT_WIDTH</_container.parentNode.parentNode.clientWidth> + <String>"px"</String>;
                }
            } else {
                _container.<_container.style>style</_container.style>.<String>width</String> = <_container.parentNode.parentNode.clientWidth>VIEWPORT_WIDTH</_container.parentNode.parentNode.clientWidth> + <String>"px"</String>;
                _container.<_container.style>style</_container.style>.<String>height</String> = <Number>VIEWPORT_HEIGHT</Number> + <String>"px"</String>;          
            }
            if (<Boolean><Number>VIEWPORT_HEIGHT</Number> &lt; <Number>0</Number></Boolean>) {
                <Number>VIEWPORT_HEIGHT</Number> = <Number>320</Number>;
            }
            if (<Boolean><_container.parentNode.parentNode.clientWidth>VIEWPORT_WIDTH</_container.parentNode.parentNode.clientWidth> &lt; <Number>0</Number></Boolean>) {
                <Number>VIEWPORT_WIDTH</Number> = <Number>500</Number>;
            }
            
            if (<args.useIframe>args.useIframe</args.useIframe>) {
                if (<_self.iframe>_self.iframe</_self.iframe>) {                  
                    _self.<_self.iframe>iframe</_self.iframe>.<_self.iframe.style>style</_self.iframe.style>.<String>height</String> = <Number>VIEWPORT_HEIGHT</Number> + <String>"px"</String>;
                    _self.<_self.iframe>iframe</_self.iframe>.<_self.iframe.style>style</_self.iframe.style>.<String>width</String> = <Number>VIEWPORT_WIDTH</Number> + <String>"px"</String>;
                }
            }
            // used for tracking with IE
            <HTMLDocument.body.clientWidth>oldWidth</HTMLDocument.body.clientWidth> = <HTMLDocument.body.clientWidth><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.clientWidth</HTMLDocument.body.clientWidth>;
        }</Function>
        
        <Function>function <void>init</void>() {
            if (<Window.attachEvent><Window>window</Window>.attachEvent</Window.attachEvent>) {
                <Window.attachEvent><Window>window</Window>.<Window.attachEvent>attachEvent</Window.attachEvent>(<String>'onresize'</String>, <void>layout</void>)</Window.attachEvent>;
            } else if (<Window.addEventListener><Window>window</Window>.addEventListener</Window.addEventListener>) {
                <Window.addEventListener><Window>window</Window>.<Window.addEventListener>addEventListener</Window.addEventListener>(<String>'resize'</String>, <void>layout</void>, <Boolean>true</Boolean>)</Window.addEventListener>;
            }     
            if (<args.startWidth>args.startWidth</args.startWidth>) {
                VIEWPORT_WIDTH = <Number>Number(<args.startWidth>args.startWidth</args.startWidth>)</Number>;
                _container.<_container.style>style</_container.style>.<String>width</String> = VIEWPORT_WIDTH + <String>"px"</String>;
            } else {
                <_container.clientWidth>VIEWPORT_WIDTH</_container.clientWidth> = <_container.clientWidth>_container.clientWidth</_container.clientWidth>;
                <Boolean>autoSizeW</Boolean> = <Boolean>true</Boolean>;
            }
            
            if (<args.startHeight>args.startHeight</args.startHeight>) {
                VIEWPORT_HEIGHT = <Number>Number(<args.startHeight>args.startHeight</args.startHeight>)</Number>;
            } else {
                <_container.clientHeight>VIEWPORT_HEIGHT</_container.clientHeight> = <_container.clientHeight>_container.clientHeight</_container.clientHeight>;
                <Boolean>autoSizeH</Boolean> = <Boolean>true</Boolean>;
            }
            if (<Boolean><_container.clientHeight>VIEWPORT_HEIGHT</_container.clientHeight> &lt;= <Number>0</Number></Boolean>) <Number>VIEWPORT_HEIGHT</Number> = <Number>320</Number>;
            _container.<_container.style>style</_container.style>.<String>height</String> = <Number>VIEWPORT_HEIGHT</Number> + <String>"px"</String>;
            if (<args.useIFrame>args.useIFrame</args.useIFrame> &amp;&amp;  <_self.iframe>_self.iframe</_self.iframe>) {
                _self.<_self.iframe>iframe</_self.iframe>.<_self.iframe.style>style</_self.iframe.style>.<String>height</String> = <Number>VIEWPORT_HEIGHT</Number> + <String>"px"</String>;
            }
     
            // listen for load requests
            <_jmaki.subscribe>_jmaki.<_jmaki.subscribe>subscribe</_jmaki.subscribe>(<args.topic>args.topic</args.topic>, <_self.loadURL>_self.loadURL</_self.loadURL>)</_jmaki.subscribe>;  

            <_self.resize>_self.<_self.resize>resize</_self.resize>()</_self.resize>;
            if (<args.url>args.url</args.url> &amp;&amp; !<args.useIframe>args.useIframe</args.useIframe>) {
                <_self.loadURL>_self.<_self.loadURL>loadURL</_self.loadURL>(<args.url>args.url</args.url>)</_self.loadURL>;
            }         
        }</Function>
        
        var <Boolean>resizing = <Boolean>false</Boolean></Boolean>;
        var <Number>lastSize = <Number>0</Number></Number>;
        
        <Function>function <void>layout</void>() {
            if (!ie) {
                <_self.resize>_self.<_self.resize>resize</_self.resize>()</_self.resize>;
                return;
            }
            // special handling for ie resizing.
            // we wait for no change for a full second before resizing.
            if (<Boolean>oldWidth != <HTMLDocument.body.clientWidth><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.clientWidth</HTMLDocument.body.clientWidth></Boolean> &amp;&amp; !resizing) {
                if (!resizing) {
                    <Boolean>resizing</Boolean> = <Boolean>true</Boolean>;
                    <setTimeout>setTimeout(<void>layout</void>,<Number>500</Number>)</setTimeout>;
                }
            } else if (<Boolean>resizing</Boolean> &amp;&amp; <Boolean><HTMLDocument.body.clientWidth><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.clientWidth</HTMLDocument.body.clientWidth> == lastSize</Boolean>) {
                <Boolean>resizing</Boolean> = <Boolean>false</Boolean>;
                <_self.resize>_self.<_self.resize>resize</_self.resize>()</_self.resize>;
            } else if (<Boolean>resizing</Boolean>) {
                <HTMLDocument.body.clientWidth>lastSize</HTMLDocument.body.clientWidth> = <HTMLDocument.body.clientWidth><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.clientWidth</HTMLDocument.body.clientWidth>;
                <setTimeout>setTimeout(<void>layout</void>, <Number>500</Number>)</setTimeout>;
            }
        }</Function>
        
        if (<args.useIframe>args.useIframe</args.useIframe> &amp;&amp; <Boolean><args.useIframe>args.useIframe</args.useIframe> == <Boolean>true</Boolean></Boolean>) {
            var <String>srcString = <String>""</String></String>;
            if (<args.url>args.url</args.url>) srcString = <String>"src='"</String> + <args.url>args.url</args.url> + <String>"'"</String>;
            // use this technique as creating the iframe programmatically does not allow us to turn the border off
            var iframeTemplate = <String>"&lt;IFRAME ID='"</String> + <args.target.id>uuid</args.target.id> + <String>"_iframe' "</String> + srcString + <String>" FRAMEBORDER=0 SCROLLING="</String> + ((!<args.overflow>args.overflow</args.overflow>) ? <String>'NO'</String> : <String>'YES'</String>) + <String>"&gt;&lt;/IFRAME&gt;"</String>;
            <args.target>_container</args.target>.<String>innerHTML</String> = iframeTemplate;
            // wait for the iframe
            var _t = <setInterval>setInterval(<Function>function() {
                if (<HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(uuid + <String>"_iframe"</String>)</HTMLDocument.getElementById>) {
                    <clearInterval>clearInterval(_t)</clearInterval>;               
                    _self.<String>iframe</String> = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(uuid + <String>"_iframe"</String>)</HTMLDocument.getElementById>;
                    <setTimeout>setTimeout(<Function>function(){<init><void>init</void>()</init>;}</Function>,<Number>0</Number>)</setTimeout>;
                }
            }</Function>, <Number>5</Number>)</setInterval>;
        } else <init><void>init</void>()</init>;
    }</Function>
    
    this.<String>destroy</String> = <Function>function() {
        if (<Window.attachEvent><Window>window</Window>.attachEvent</Window.attachEvent>) {
            <Window.dettachEvent><Window>window</Window>.<Window.dettachEvent>dettachEvent</Window.dettachEvent>(<String>'onresize'</String>, <void>layout</void>)</Window.dettachEvent>;
        } else if (<Window.addEventListener><Window>window</Window>.addEventListener</Window.addEventListener>) {
            <Window.removeEventListener><Window>window</Window>.<Window.removeEventListener>removeEventListener</Window.removeEventListener>(<String>'resize'</String>, <void>layout</void>, <Boolean>true</Boolean>)</Window.removeEventListener>;
        } 
    }</Function>    
    
this.<String>Injector</String> = <Function>function() {
 
  var _uuid = <Date.getMilliseconds><Date>new Date</Date>().<Date.getMilliseconds>getMilliseconds</Date.getMilliseconds>()</Date.getMilliseconds>;
  var _injector = this;
  var <Boolean>_processing = <Boolean>false</Boolean></Boolean>;

  var <Array>styles = <Array>[]</Array></Array>;
  
  var <Array>tasks = <Array>[]</Array></Array>;
  
  this.<String>inject</String> = <Function>function(task) {
   // make sure jmaki creates a list of libraries it can not load
   
    if (<Boolean><tasks.length>tasks.length</tasks.length> == <Number>0</Number></Boolean> &amp;&amp; !_processing) {
        <inject><void>inject</void>(task)</inject>;
    } else {
        <tasks.push>tasks.<tasks.push>push</tasks.push>(task)</tasks.push>;
    }
  }</Function>

  /**
   * 
   * Load template text aloing with an associated script
   * 
   * Argument p properties are as follows:
   *
   * url :              Not required but used if you want to get the template from
   *                    something other than the injection serlvet. For example if
   *                    you want to load content directly from a a JSP or HTML file.
   * 
   * p.injectionPoint:  Not required. This is the id of an element into. If this is
   *                    not specfied a div will be created under the root node of
   *                    the document and the template will be injected into it.
   *                    Content is injected by setting the innerHTML property
   *                    of an element to the template text.
   */
  <Function>function <void>inject</void>(task) {
      <Boolean>_processing</Boolean> = <Boolean>true</Boolean>;
      <_jmaki.doAjax>_jmaki.<_jmaki.doAjax>doAjax</_jmaki.doAjax>({
            method:<String>"GET"</String>,
            url: <task.url>task.url</task.url>,
            asynchronous: <Boolean>false</Boolean>,
            callback: <Function>function(req){
               if (<Boolean><req.readyState>req.readyState</req.readyState> == <Number>4</Number></Boolean>) {
                   <getContent><void>getContent</void>(<req.responseText>req.responseText</req.responseText>, task)</getContent>;               
               //if no parent is given append to the document root   
               var injectionPoint;
               if (<Boolean>typeof <task.injectionPoint>task.injectionPoint</task.injectionPoint> == <String>'string'</String></Boolean>) {
                   injectionPoint = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<task.injectionPoint>task.injectionPoint</task.injectionPoint>)</HTMLDocument.getElementById>;
                   // wait for the injection point
                   if (!<HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<task.injectionPoint>task.injectionPoint</task.injectionPoint>)</HTMLDocument.getElementById>) {
                       var _t = <setInterval>setInterval(<Function>function() {
                           if (<HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<task.injectionPoint>task.injectionPoint</task.injectionPoint>)</HTMLDocument.getElementById>) {
                               <clearInterval>clearInterval(_t)</clearInterval>;
                               injectionPoint = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<task.injectionPoint>task.injectionPoint</task.injectionPoint>)</HTMLDocument.getElementById>;
                               <setTimeout>setTimeout(<Function>function(){<processTask><void>processTask</void>(injectionPoint,task)</processTask>;}</Function>,<Number>0</Number>)</setTimeout>;                      
                           }
                       }</Function>, <Number>25</Number>)</setInterval>;
                   } else {
                       <processTask><void>processTask</void>(injectionPoint, task)</processTask>;             
                   }
                } else {
                    <processTask><void>processTask</void>(<task.injectionPoint>task.injectionPoint</task.injectionPoint>, task)</processTask>;
                }
            }
         }</Function>
       })</_jmaki.doAjax>;
  }</Function>
  
  <Function>function <void>processTask</void>(injectionPoint, task) {
      <_jmaki.clearWidgets>_jmaki.<_jmaki.clearWidgets>clearWidgets</_jmaki.clearWidgets>(injectionPoint)</_jmaki.clearWidgets>;
      var _id = <String>"injector_"</String> + _uuid;
      var data = <task.content>task.content</task.content> + <String>"&lt;div id='"</String> + _id + <String>"'&gt;&lt;/div&gt;"</String>;
      injectionPoint.<String>innerHTML</String> = data;
      // wait for the content to be loaded
      var _t = <setInterval>setInterval(<Function>function() {
          if (<HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(_id)</HTMLDocument.getElementById>) {
              <clearInterval>clearInterval(_t)</clearInterval>;
              try {
                  <_injector.loadScripts>_injector.<_injector.loadScripts>loadScripts</_injector.loadScripts>(task,<void>processNextTask</void>)</_injector.loadScripts>;
              } catch (e) {
                  injectionPoint.<String>innerHTML</String> = <String>"&lt;span style='color:red'&gt;"</String> + <e.message>e.message</e.message> + <String>"&lt;/span&gt;"</String>;
              }
          }
      }</Function>, <Number>25</Number>)</setInterval>;
  }</Function>
  
  // pass in a reference to the task
  // start the next task
  <Function>function <void>processNextTask</void>() {
      if (<Boolean><tasks.length>tasks.length</tasks.length> &gt;<Number>0</Number></Boolean>) {
          var _t = <tasks.shift>tasks.<tasks.shift>shift</tasks.shift>()</tasks.shift>;
          <inject><void>inject</void>(_t)</inject>;
      };
      <Boolean>_processing</Boolean> = <Boolean>false</Boolean>;
  }</Function>
  

  /**
   * 
   * Load template text aloing with an associated script
   * 
   * Argument p properties are as follows:
   *
   * url :              Not required but used if you want to get the template from
   *                    something other than the injection serlvet. For example if
   *                    you want to load content directly from a a JSP, JSF call, PHP, or HTML file.
   */
  this.<String>get</String> = <Function>function (p) {
      var _data;
       <_jmaki.doAjax>_jmaki.<_jmaki.doAjax>doAjax</_jmaki.doAjax>({
            method:<String>"GET"</String>,
            url: <p.url>p.url</p.url>,
            asynchronous: <Boolean>false</Boolean>,
            callback: <Function>function(req){
                <void>_data</void> = <getContent><void>getContent</void>(<req.responseText>req.responseText</req.responseText>)</getContent>;
            }</Function>
           }
           )</_jmaki.doAjax>;
           return <void>_data</void>;
  }</Function>

  /**
   * If were returning an text document remove any script in the
   * the document and add it to the global scope using a time out.
   */
  <Function>function <void>getContent</void>(rawContent, _task) {
   
   _task.<String>embeddedScripts</String> = <Array>[]</Array>;
   _task.<String>embeddedStyles</String> = <Array>[]</Array>;
   _task.<String>scriptReferences</String> = <Array>[]</Array>;
   _task.<String>styleReferences</String> = <Array>[]</Array>;
  
    var _t = rawContent;
    var <String>bodyText = <String>""</String></String>;

    // recursively go through and weed out the scripts
    // TODO: Use some better REGEX processing
    // TODO: Also support single quotes
    var gscripts = <HTMLDocument.getElementsByTagName><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByTagName>getElementsByTagName</HTMLDocument.getElementsByTagName>(<String>"script"</String>)</HTMLDocument.getElementsByTagName>;
    var gstyles = <HTMLDocument.getElementsByTagName><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByTagName>getElementsByTagName</HTMLDocument.getElementsByTagName>(<String>"link"</String>)</HTMLDocument.getElementsByTagName>;
    while (<Boolean><_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;script"</String>)</_t.indexOf> != -<Number>1</Number></Boolean>) {
            var realStart = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;script"</String>)</_t.indexOf>;
            var scriptSourceStart = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"src="</String>, (realStart))</_t.indexOf>;
            var scriptElementEnd = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&gt;"</String>, realStart)</_t.indexOf>;
            var end = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;/script&gt;"</String>, (realStart))</_t.indexOf> + <String.length><String>"&lt;/script&gt;"</String>.length</String.length>;
            if (<Boolean>realStart != -<Number>1</Number></Boolean> &amp;&amp; <Boolean>scriptSourceStart != -<Number>1</Number></Boolean>) {
                var scriptSourceName;
                var scriptSourceLinkStart= scriptSourceStart + <Number>5</Number>;
                var quoteType =  <_t.substring>_t.<_t.substring>substring</_t.substring>(scriptSourceStart + <Number>4</Number>, (scriptSourceStart +<Number>5</Number>))</_t.substring>
                var scriptSourceLinkEnd= <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"\""</String>, (scriptSourceLinkStart + <Number>1</Number>))</_t.indexOf>;
              	scriptSourceLinkEnd= <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(quoteType, (scriptSourceLinkStart + <Number>1</Number>))</_t.indexOf>;
                if (<Boolean>scriptSourceStart &lt; scriptElementEnd</Boolean>) {
                    scriptSourceName = <_t.substring>_t.<_t.substring>substring</_t.substring>(scriptSourceLinkStart, scriptSourceLinkEnd)</_t.substring>;
                    // prevent multiple inclusions of the same script
                    var <Boolean>exists = <Boolean>false</Boolean></Boolean>;
                    for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <gscripts.length>gscripts.length</gscripts.length></Boolean>; <Number>i</Number>++) {
                        if (typeof gscripts[<Number>i</Number>].src) {
                            if (<Boolean>gscripts[<Number>i</Number>].src == scriptSourceName</Boolean>) {
                                <Boolean>exists</Boolean> = <Boolean>true</Boolean>;
                                break;
                            }
                        }
                    }
                    if (!<Boolean>exists</Boolean>) {
                        <_task.scriptReferences.push>_task.<_task.scriptReferences>scriptReferences</_task.scriptReferences>.<_task.scriptReferences.push>push</_task.scriptReferences.push>(scriptSourceName)</_task.scriptReferences.push>;
                    }
                }
            }
           // now remove the script body
           var scriptBodyStart =  scriptElementEnd + <Number>1</Number>;
           var sBody = <_t.substring>_t.<_t.substring>substring</_t.substring>(scriptBodyStart, end - <String.length><String>"&lt;/script&gt;"</String>.length</String.length>)</_t.substring>;
           if (<Boolean><sBody.length>sBody.length</sBody.length> &gt; <Number>0</Number></Boolean>) {
              	<_task.embeddedScripts.push>_task.<_task.embeddedScripts>embeddedScripts</_task.embeddedScripts>.<_task.embeddedScripts.push>push</_task.embeddedScripts.push>(sBody)</_task.embeddedScripts.push>;
           }
           //remove script
           _t = <_t.substring>_t.<_t.substring>substring</_t.substring>(<Number>0</Number>, realStart)</_t.substring> + <_t.substring>_t.<_t.substring>substring</_t.substring>(end, <_t.length>_t.length</_t.length>)</_t.substring>;
           <Number>scriptSourceLinkEnd</Number> = -<Number>1</Number>;
      }
      while (<Boolean><_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;style"</String>)</_t.indexOf> != -<Number>1</Number></Boolean>) {
           var realStart = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;style"</String>)</_t.indexOf>;
           var styleElementEnd = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&gt;"</String>, realStart)</_t.indexOf>;
           var end = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;/style&gt;"</String>, (realStart))</_t.indexOf> ;
           var styleBodyStart =  styleElementEnd + <Number>1</Number>;
           var sBody = <_t.substring>_t.<_t.substring>substring</_t.substring>(styleBodyStart, end)</_t.substring>;
           if (<Boolean><sBody.length>sBody.length</sBody.length> &gt; <Number>0</Number></Boolean>) {
              <_task.embeddedStyles.push>_task.<_task.embeddedStyles>embeddedStyles</_task.embeddedStyles>.<_task.embeddedStyles.push>push</_task.embeddedStyles.push>(sBody)</_task.embeddedStyles.push>;
           }
           //remove style
           _t = <_t.substring>_t.<_t.substring>substring</_t.substring>(<Number>0</Number>, realStart)</_t.substring> + <_t.substring>_t.<_t.substring>substring</_t.substring>(end + <String.length><String>"&lt;/style&gt;"</String>.length</String.length>, <_t.length>_t.length</_t.length>)</_t.substring>;
        }
        // get the links    
        while (<Boolean><_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;link"</String>)</_t.indexOf> != -<Number>1</Number></Boolean>) {
            var realStart = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&lt;link"</String>)</_t.indexOf>;
            var styleSourceStart = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"href="</String>, (realStart))</_t.indexOf>;
            var styleElementEnd = <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(<String>"&gt;"</String>, realStart)</_t.indexOf> +<Number>1</Number>;
            if (<Boolean>realStart != -<Number>1</Number></Boolean> &amp;&amp; <Boolean>styleSourceStart != -<Number>1</Number></Boolean>) {
                var styletSourceName;
                var styleSourceLinkStart= styleSourceStart + <Number>6</Number>;
                var quoteType =  <_t.substring>_t.<_t.substring>substring</_t.substring>(styleSourceStart + <Number>5</Number>, (styleSourceStart + <Number>6</Number>))</_t.substring>                
                var styleSourceLinkEnd= <_t.indexOf>_t.<_t.indexOf>indexOf</_t.indexOf>(quoteType, (styleSourceLinkStart + <Number>1</Number>))</_t.indexOf>;
                if (<Boolean>styleSourceStart &lt; styleElementEnd</Boolean>) {
                    styleSourceName = <_t.substring>_t.<_t.substring>substring</_t.substring>(styleSourceLinkStart, styleSourceLinkEnd)</_t.substring>;
	              	var <Boolean>exists = <Boolean>false</Boolean></Boolean>;
                        for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <gstyles.length>gstyles.length</gstyles.length></Boolean>; <Number>i</Number>++) {
                            if (<Boolean>typeof gstyles[<Number>i</Number>].src != <String>'undefined'</String></Boolean>) {
                                if (<Boolean>gstyles[<Number>i</Number>].src == styleSourceName</Boolean>) {
                                    <Boolean>exists</Boolean> = <Boolean>true</Boolean>;	
                                }
                            }
                        }
		          if (!<Boolean>exists</Boolean>) {
		          	<_task.styleReferences.push>_task.<_task.styleReferences>styleReferences</_task.styleReferences>.<_task.styleReferences.push>push</_task.styleReferences.push>(styleSourceName)</_task.styleReferences.push>;
	    	      }
                }
                //remove style
                _t = <_t.substring>_t.<_t.substring>substring</_t.substring>(<Number>0</Number>, realStart)</_t.substring> + <_t.substring>_t.<_t.substring>substring</_t.substring>(styleElementEnd, <_t.length>_t.length</_t.length>)</_t.substring>;
            }
        }
        
        var head = <HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByTagName><HTMLDocument.getElementsByTagName>getElementsByTagName</HTMLDocument.getElementsByTagName>(<String>"head"</String></HTMLDocument.getElementsByTagName>)[<Number>0</Number>];
        
        // inject the links
        for(var <Number>loop = <Number>0</Number></Number>; <Boolean><Number>loop</Number> &lt; <_task.styleReferences.length>_task.<_task.styleReferences>styleReferences</_task.styleReferences>.length</_task.styleReferences.length></Boolean>; <Number>loop</Number>++) {
            var link = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"link"</String>)</HTMLDocument.createElement>;
            link.<String>href</String> = _task.<_task.styleReferences>styleReferences</_task.styleReferences>[<Number>loop</Number>];
            link.<String>type</String> = <String>"text/css"</String>;
            link.<String>rel</String> = <String>"stylesheet"</String>;
            <head.appendChild>head.<head.appendChild>appendChild</head.appendChild>(link)</head.appendChild>;
        }
        
        var stylesElement;
        if (<Boolean><_task.embeddedStyles.length>_task.<_task.embeddedStyles>embeddedStyles</_task.embeddedStyles>.length</_task.embeddedStyles.length> &gt; <Number>0</Number></Boolean>) {
            stylesElement = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"style"</String>)</HTMLDocument.createElement>;
            stylesElement.<String>type</String>=<String>"text/css"</String>;
            var stylesText;
            for(var <Number>loop = <Number>0</Number></Number>; <Boolean><Number>loop</Number> &lt; <_task.embeddedStyles.length>_task.<_task.embeddedStyles>embeddedStyles</_task.embeddedStyles>.length</_task.embeddedStyles.length></Boolean>; <Number>loop</Number>++) {
                stylesText = stylesText + _task.<_task.embeddedStyles>embeddedStyles</_task.embeddedStyles>[<Number>loop</Number>];
            }
            if (<HTMLDocument>document</HTMLDocument>.<HTMLDocument.styleSheets>styleSheets</HTMLDocument.styleSheets>[<Number>0</Number>].cssText) {
               <HTMLDocument>document</HTMLDocument>.<HTMLDocument.styleSheets>styleSheets</HTMLDocument.styleSheets>[<Number>0</Number>].<String>cssText</String> = <HTMLDocument>document</HTMLDocument>.<HTMLDocument.styleSheets>styleSheets</HTMLDocument.styleSheets>[<Number>0</Number>].cssText + stylesText;
            } else {
                <stylesElement.appendChild>stylesElement.<stylesElement.appendChild>appendChild</stylesElement.appendChild>(<HTMLDocument.createTextNode><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createTextNode>createTextNode</HTMLDocument.createTextNode>(stylesText)</HTMLDocument.createTextNode>)</stylesElement.appendChild>;
                <head.appendChild>head.<head.appendChild>appendChild</head.appendChild>(stylesElement)</head.appendChild>;
            }
        }
        _task.<String>content</String> = _t;
      }</Function>
  
      this.<String>loadScripts</String> = <Function>function(task, initFunction) {    
          var <Function>_loadEmbeded = <Function>function() {
              // evaluate the embedded javascripts in the order they were added
              for(var <Number>loop = <Number>0</Number></Number>; <Boolean><Number>loop</Number> &lt; <task.embeddedScripts.length>task.<task.embeddedScripts>embeddedScripts</task.embeddedScripts>.length</task.embeddedScripts.length></Boolean>; <Number>loop</Number>++) {
                  var script = task.<task.embeddedScripts>embeddedScripts</task.embeddedScripts>[<Number>loop</Number>];
                  // append to the script a method to call the scriptLoaderCallback
                  <eval>eval(script)</eval>;
                  if (<Boolean><Number>loop</Number> == (<task.embeddedScripts.length>task.<task.embeddedScripts>embeddedScripts</task.embeddedScripts>.length</task.embeddedScripts.length> -<Number>1</Number>)</Boolean>) {
                      if (<Boolean>typeof initFunction != <String>'undefined'</String></Boolean>) <initFunction>initFunction()</initFunction>;
                      return;
                  }
              }
              if (<Boolean><task.embeddedScripts.length>task.<task.embeddedScripts>embeddedScripts</task.embeddedScripts>.length</task.embeddedScripts.length> == <Number>0</Number></Boolean> &amp;&amp; typeof <Boolean>initFunction != <String>'undefined'</String></Boolean>) <initFunction>initFunction()</initFunction>;
          }</Function></Function>
          if (<Boolean><task.scriptReferences.length>task.<task.scriptReferences>scriptReferences</task.scriptReferences>.length</task.scriptReferences.length> &gt; <Number>0</Number></Boolean>){
              // load the global scripts before loading the embeded scripts
              return <_jmaki.addLibraries>_jmaki.<_jmaki.addLibraries>addLibraries</_jmaki.addLibraries>(<task.scriptReferences.reverse>task.<task.scriptReferences>scriptReferences</task.scriptReferences>.<task.scriptReferences.reverse>reverse</task.scriptReferences.reverse>()</task.scriptReferences.reverse>,<Function>_loadEmbeded</Function>)</_jmaki.addLibraries>;   
          } else {
              <_loadEmbeded><Function>_loadEmbeded</Function>()</_loadEmbeded>;
          }
          return <Boolean>true</Boolean>;
    }</Function>
  }</Function>
  this.<String>injector</String> = new this.Injector(); 
}</Function>

if (!<Jmaki>jmaki</Jmaki>) {
    var <Jmaki>jmaki = <Jmaki>new <Jmaki>Jmaki</Jmaki>()</Jmaki></Jmaki>;  
    <Jmaki>jmaki</Jmaki>.<String>widgets</String> = {};

    var <Window.onload>oldLoad  = <Window.onload><Window>window</Window>.onload</Window.onload></Window.onload>;
    
    /**
     * onload calls bootstrap function to initialize and load all registered widgets
     * override initial onload.
     */
    <Window>window</Window>.<String>onload</String> = <Function>function() {
        if (!<Boolean><Jmaki>jmaki</Jmaki>.initialized</Boolean>) {
            <Jmaki.initialize><Jmaki>jmaki</Jmaki>.<void>initialize</void>()</Jmaki.initialize>;
        } else {
            <Jmaki.bootstrapWidgets><Jmaki>jmaki</Jmaki>.<void>bootstrapWidgets</void>()</Jmaki.bootstrapWidgets>;
            return;
        }
        if (<Boolean>typeof oldLoad  == <String>'function'</String></Boolean>) {
            <oldLoad>oldLoad()</oldLoad>;
        }
    }</Function>
}
