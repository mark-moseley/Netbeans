/* SpryData.js - Revision: Spry Preview Release 1.3 */

// Copyright (c) 2006. Adobe Systems Incorporated.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//   * Neither the name of Adobe Systems Incorporated nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

var Spry; if (!Spry) Spry = {};

//////////////////////////////////////////////////////////////////////
//
// Spry.Utils
//
//////////////////////////////////////////////////////////////////////

if (!<Spry.Utils>Spry.Utils</Spry.Utils>) Spry.<String>Utils</String> = {};

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>msProgIDs</String> = [<Array><String>"MSXML2.XMLHTTP.5.0"</String>, <String>"MSXML2.XMLHTTP.4.0"</String>, <String>"MSXML2.XMLHTTP.3.0"</String>, <String>"MSXML2.XMLHTTP"</String>, <String>"Microsoft.XMLHTTP"</String>]</Array>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>createXMLHttpRequest</String> = <Function>function()
{
	var req = null;
	try
	{
		if (<Window.XMLHttpRequest><Window>window</Window>.XMLHttpRequest</Window.XMLHttpRequest>)
			<XMLHttpRequest>req</XMLHttpRequest> = <XMLHttpRequest>new XMLHttpRequest()</XMLHttpRequest>;
		else if (<Window.ActiveXObject><Window>window</Window>.ActiveXObject</Window.ActiveXObject>)
		{
			while (!req &amp;&amp; <Spry.Utils.msProgIDs.length>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.msProgIDs>msProgIDs</Spry.Utils.msProgIDs>.length</Spry.Utils.msProgIDs.length>)
			{
				try { <ActiveXObject>req</ActiveXObject> = <ActiveXObject>new ActiveXObject(Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.msProgIDs>msProgIDs</Spry.Utils.msProgIDs>[<Number>0</Number>])</ActiveXObject>; } catch (e) { req = null; }
				if (!req)
					<Spry.Utils.msProgIDs.splice>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.msProgIDs>msProgIDs</Spry.Utils.msProgIDs>.<Spry.Utils.msProgIDs.splice>splice</Spry.Utils.msProgIDs.splice>(<Number>0</Number>, <Number>1</Number>)</Spry.Utils.msProgIDs.splice>;
			}
		}
	}
	catch (e) { req = null;	}

	if (!req)
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Failed to create an XMLHttpRequest object!"</String> )</Spry.Debug.reportError>;

	return req;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>loadURL</String> = <Function>function(method, url, async, callback, opts)
{
	var <Spry.Utils.loadURL.Request>req = <Spry.Utils.loadURL.Request>new <Spry.Utils.loadURL.Request>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.Request</Spry.Utils.loadURL.Request>()</Spry.Utils.loadURL.Request></Spry.Utils.loadURL.Request>;
	<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<String>method</String> = method;
	<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<String>url</String> = url;
	<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<String>async</String> = async;
	<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<String>successCallback</String> = callback;
	<Spry.Utils.setOptions>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>setOptions</void>(<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>, opts)</Spry.Utils.setOptions>;
	
	try
	{
		<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<String>xhRequest</String> = <Spry.Utils.createXMLHttpRequest>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.createXMLHttpRequest>createXMLHttpRequest</Spry.Utils.createXMLHttpRequest>()</Spry.Utils.createXMLHttpRequest>;
		if (!<Spry.Utils.loadURL.Request.xhRequest><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.xhRequest</Spry.Utils.loadURL.Request.xhRequest>)
			return null;

		if (<Boolean><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.async</Boolean>)
			<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<Spry.Utils.loadURL.Request.xhRequest>xhRequest</Spry.Utils.loadURL.Request.xhRequest>.<String>onreadystatechange</String> = <Function>function() { <Spry.Utils.loadURL.callback>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<void>callback</void>(req)</Spry.Utils.loadURL.callback>; }</Function>;

		<Spry.Utils.loadURL.Request.xhRequest.open><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<Spry.Utils.loadURL.Request.xhRequest>xhRequest</Spry.Utils.loadURL.Request.xhRequest>.<Spry.Utils.loadURL.Request.xhRequest.open>open</Spry.Utils.loadURL.Request.xhRequest.open>(<String><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.method</String>, <Spry.Utils.loadURL.Request.url><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.url</Spry.Utils.loadURL.Request.url>, <Boolean><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.async</Boolean>, <Spry.Utils.loadURL.Request.username><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.username</Spry.Utils.loadURL.Request.username>, <Spry.Utils.loadURL.Request.password><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.password</Spry.Utils.loadURL.Request.password>)</Spry.Utils.loadURL.Request.xhRequest.open>;
		
		if (<Spry.Utils.loadURL.Request.headers><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.headers</Spry.Utils.loadURL.Request.headers>)
		{
			for (var name in <Spry.Utils.loadURL.Request.headers><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.headers</Spry.Utils.loadURL.Request.headers>)
				<Spry.Utils.loadURL.Request.xhRequest.setRequestHeader><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<Spry.Utils.loadURL.Request.xhRequest>xhRequest</Spry.Utils.loadURL.Request.xhRequest>.<Spry.Utils.loadURL.Request.xhRequest.setRequestHeader>setRequestHeader</Spry.Utils.loadURL.Request.xhRequest.setRequestHeader>(name, <Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<Spry.Utils.loadURL.Request.headers>headers</Spry.Utils.loadURL.Request.headers>[name])</Spry.Utils.loadURL.Request.xhRequest.setRequestHeader>;
		}

		<Spry.Utils.loadURL.Request.xhRequest.send><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<Spry.Utils.loadURL.Request.xhRequest>xhRequest</Spry.Utils.loadURL.Request.xhRequest>.<Spry.Utils.loadURL.Request.xhRequest.send>send</Spry.Utils.loadURL.Request.xhRequest.send>(<Spry.Utils.loadURL.Request.postData><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.postData</Spry.Utils.loadURL.Request.postData>)</Spry.Utils.loadURL.Request.xhRequest.send>;

		if (!<Boolean><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.async</Boolean>)
			<Spry.Utils.loadURL.callback>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<void>callback</void>(<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>)</Spry.Utils.loadURL.callback>;
	}
	catch(e) { req = null; <Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Exception caught while loading "</String> + url + <String>": "</String> + <e.message>e.message</e.message>)</Spry.Debug.reportError>; }

	return req;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<String>callback</String> = <Function>function(req)
{
	if (!req || <Boolean><req.xhRequest.readyState>req.<req.xhRequest>xhRequest</req.xhRequest>.readyState</req.xhRequest.readyState> != <Number>4</Number></Boolean>)
		return;
	if (<req.successCallback>req.successCallback</req.successCallback> &amp;&amp; (<Boolean><req.xhRequest.status>req.<req.xhRequest>xhRequest</req.xhRequest>.status</req.xhRequest.status> == <Number>200</Number></Boolean> || <Boolean><req.xhRequest.status>req.<req.xhRequest>xhRequest</req.xhRequest>.status</req.xhRequest.status> == <Number>0</Number></Boolean>))
		<req.successCallback>req.<req.successCallback>successCallback</req.successCallback>(req)</req.successCallback>;
	else if (<req.errorCallback>req.errorCallback</req.errorCallback>)
		<req.errorCallback>req.<req.errorCallback>errorCallback</req.errorCallback>(req)</req.errorCallback>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<String>Request</String> = <Function>function()
{
	var <Spry.Utils.loadURL.Request.props>props = <Spry.Utils.loadURL.Request.props>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<Spry.Utils.loadURL.Request>Request</Spry.Utils.loadURL.Request>.props</Spry.Utils.loadURL.Request.props></Spry.Utils.loadURL.Request.props>;
	var <Spry.Utils.loadURL.Request.props.length>numProps = <Spry.Utils.loadURL.Request.props.length><Spry.Utils.loadURL.Request.props>props</Spry.Utils.loadURL.Request.props>.length</Spry.Utils.loadURL.Request.props.length></Spry.Utils.loadURL.Request.props.length>;

	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <Spry.Utils.loadURL.Request.props.length>numProps</Spry.Utils.loadURL.Request.props.length></Boolean>; <Number>i</Number>++)
		this[<Spry.Utils.loadURL.Request.props>props</Spry.Utils.loadURL.Request.props>[<Number>i</Number>]] = null;

	this.<String>method</String> = <String>"GET"</String>;
	this.<String>async</String> = <Boolean>true</Boolean>;
	this.<String>headers</String> = {};
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<Spry.Utils.loadURL.Request>Request</Spry.Utils.loadURL.Request>.<String>props</String> = [ <Array><String>"method"</String>, <String>"url"</String>, <String>"async"</String>, <String>"username"</String>, <String>"password"</String>, <String>"postData"</String>, <String>"successCallback"</String>, <String>"errorCallback"</String>, <String>"headers"</String>, <String>"userData"</String>, <String>"xhRequest"</String> ]</Array>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<Spry.Utils.loadURL.Request>Request</Spry.Utils.loadURL.Request>.<Spry.Utils.loadURL.Request.prototype>prototype</Spry.Utils.loadURL.Request.prototype>.<String>extractRequestOptions</String> = <Function>function(opts, undefineRequestProps)
{
	if (!opts)
		return;

	var <Spry.Utils.loadURL.Request.props>props = <Spry.Utils.loadURL.Request.props>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<Spry.Utils.loadURL.Request>Request</Spry.Utils.loadURL.Request>.props</Spry.Utils.loadURL.Request.props></Spry.Utils.loadURL.Request.props>;
	var <Spry.Utils.loadURL.Request.props.length>numProps = <Spry.Utils.loadURL.Request.props.length><Spry.Utils.loadURL.Request.props>props</Spry.Utils.loadURL.Request.props>.length</Spry.Utils.loadURL.Request.props.length></Spry.Utils.loadURL.Request.props.length>;

	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <Spry.Utils.loadURL.Request.props.length>numProps</Spry.Utils.loadURL.Request.props.length></Boolean>; <Number>i</Number>++)
	{
		var prop = <Spry.Utils.loadURL.Request.props>props</Spry.Utils.loadURL.Request.props>[<Number>i</Number>];
		if (<Boolean>opts[prop] != undefined</Boolean>)
		{
			this[prop] = opts[prop];
			if (undefineRequestProps)
				opts[prop] = undefined;
		}
	}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<Spry.Utils.loadURL.Request>Request</Spry.Utils.loadURL.Request>.<Spry.Utils.loadURL.Request.prototype>prototype</Spry.Utils.loadURL.Request.prototype>.<String>clone</String> = <Function>function()
{
	var <Spry.Utils.loadURL.Request.props>props = <Spry.Utils.loadURL.Request.props>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.<Spry.Utils.loadURL.Request>Request</Spry.Utils.loadURL.Request>.props</Spry.Utils.loadURL.Request.props></Spry.Utils.loadURL.Request.props>;
	var <Spry.Utils.loadURL.Request.props.length>numProps = <Spry.Utils.loadURL.Request.props.length><Spry.Utils.loadURL.Request.props>props</Spry.Utils.loadURL.Request.props>.length</Spry.Utils.loadURL.Request.props.length></Spry.Utils.loadURL.Request.props.length>;
	var <Spry.Utils.loadURL.Request>req = <Spry.Utils.loadURL.Request>new <Spry.Utils.loadURL.Request>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.Request</Spry.Utils.loadURL.Request></Spry.Utils.loadURL.Request></Spry.Utils.loadURL.Request>;
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <Spry.Utils.loadURL.Request.props.length>numProps</Spry.Utils.loadURL.Request.props.length></Boolean>; <Number>i</Number>++)
		<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>[<Spry.Utils.loadURL.Request.props>props</Spry.Utils.loadURL.Request.props>[<Number>i</Number>]] = this[<Spry.Utils.loadURL.Request.props>props</Spry.Utils.loadURL.Request.props>[<Number>i</Number>]];
	if (this.headers)
	{
		<Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.<String>headers</String> = {};
		<Spry.Utils.setOptions>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>setOptions</void>(<Spry.Utils.loadURL.Request.headers><Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>.headers</Spry.Utils.loadURL.Request.headers>, this.headers)</Spry.Utils.setOptions>;
	}
	return <Spry.Utils.loadURL.Request>req</Spry.Utils.loadURL.Request>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>addEventListener</String> = <Function>function(<HTMLElement>element</HTMLElement>, eventType, handler, capture)
{
	try
	{
		if (<HTMLElement.addEventListener><HTMLElement>element</HTMLElement>.addEventListener</HTMLElement.addEventListener>)
			<HTMLElement.addEventListener><HTMLElement>element</HTMLElement>.<HTMLElement.addEventListener>addEventListener</HTMLElement.addEventListener>(eventType, handler, capture)</HTMLElement.addEventListener>;
		else if (<HTMLElement.attachEvent><HTMLElement>element</HTMLElement>.attachEvent</HTMLElement.attachEvent>)
			<HTMLElement.attachEvent><HTMLElement>element</HTMLElement>.<HTMLElement.attachEvent>attachEvent</HTMLElement.attachEvent>(<String>"on"</String> + eventType, handler)</HTMLElement.attachEvent>;
	}
	catch (e) {}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>removeEventListener</String> = <Function>function(<HTMLElement>element</HTMLElement>, eventType, handler, capture)
{
	try
	{
		if (<HTMLElement.removeEventListener><HTMLElement>element</HTMLElement>.removeEventListener</HTMLElement.removeEventListener>)
			<HTMLElement.removeEventListener><HTMLElement>element</HTMLElement>.<HTMLElement.removeEventListener>removeEventListener</HTMLElement.removeEventListener>(eventType, handler, capture)</HTMLElement.removeEventListener>;
		else if (<HTMLElement.detachEvent><HTMLElement>element</HTMLElement>.detachEvent</HTMLElement.detachEvent>)
			<HTMLElement.detachEvent><HTMLElement>element</HTMLElement>.<HTMLElement.detachEvent>detachEvent</HTMLElement.detachEvent>(<String>"on"</String> + eventType, handler)</HTMLElement.detachEvent>;
	}
	catch (e) {}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>addLoadListener</String> = <Function>function(handler)
{
	if (<Boolean>typeof <Window.addEventListener><Window>window</Window>.addEventListener</Window.addEventListener> != <String>'undefined'</String></Boolean>)
		<Window.addEventListener><Window>window</Window>.<Window.addEventListener>addEventListener</Window.addEventListener>(<String>'load'</String>, handler, <Boolean>false</Boolean>)</Window.addEventListener>;
	else if (<Boolean>typeof <HTMLDocument.addEventListener><HTMLDocument>document</HTMLDocument>.addEventListener</HTMLDocument.addEventListener> != <String>'undefined'</String></Boolean>)
		<HTMLDocument.addEventListener><HTMLDocument>document</HTMLDocument>.<HTMLDocument.addEventListener>addEventListener</HTMLDocument.addEventListener>(<String>'load'</String>, handler, <Boolean>false</Boolean>)</HTMLDocument.addEventListener>;
	else if (<Boolean>typeof <Window.attachEvent><Window>window</Window>.attachEvent</Window.attachEvent> != <String>'undefined'</String></Boolean>)
		<Window.attachEvent><Window>window</Window>.<Window.attachEvent>attachEvent</Window.attachEvent>(<String>'onload'</String>, handler)</Window.attachEvent>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>eval</String> = <Function>function(str)
{
	// Call this method from your JS function when
	// you don't want the JS expression to access or
	// interfere with any local variables in your JS
	// function.

	return <eval>eval(str)</eval>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>escapeQuotesAndLineBreaks</String> = <Function>function(str)
{
	if (str)
	{
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/\\/g</RegExp>, <String>"\\\\"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/["']/g</RegExp>, <String>"\\$&amp;"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/\n/g</RegExp>, <String>"\\n"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/\r/g</RegExp>, <String>"\\r"</String>)</str.replace>;
	}
	return str;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>encodeEntities</String> = <Function>function(str)
{
	if (str &amp;&amp; <Boolean><str.search>str.<str.search>search</str.search>(<RegExp>/[&amp;&lt;&gt;"]/</RegExp>)</str.search> != -<Number>1</Number></Boolean>)
	{
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/&amp;/g</RegExp>, <String>"&amp;amp;"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/&lt;/g</RegExp>, <String>"&amp;lt;"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/&gt;/g</RegExp>, <String>"&amp;gt;"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/"/g</RegExp>, <String>"&amp;quot;"</String>)</str.replace>;
	}
	return str
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>decodeEntities</String> = <Function>function(str)
{
	var <Spry.Utils.decodeEntities.div>d = <Spry.Utils.decodeEntities.div>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.decodeEntities>decodeEntities</Spry.Utils.decodeEntities>.div</Spry.Utils.decodeEntities.div></Spry.Utils.decodeEntities.div>;
	if (!<Spry.Utils.decodeEntities.div>d</Spry.Utils.decodeEntities.div>)
	{
		d = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>'div'</String>)</HTMLDocument.createElement>;
		Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.decodeEntities>decodeEntities</Spry.Utils.decodeEntities>.<String>div</String> = d;
		if (!d) return str;
	}
	d.<String>innerHTML</String> = str;
	if (<Boolean><d.childNodes.length>d.<d.childNodes>childNodes</d.childNodes>.length</d.childNodes.length> == <Number>1</Number></Boolean> &amp;&amp; <Boolean><d.firstChild.nodeType>d.<d.firstChild>firstChild</d.firstChild>.nodeType</d.firstChild.nodeType> == <Number>3</Number></Boolean> /* Node.TEXT_NODE */ &amp;&amp; <Boolean><d.firstChild.nextSibling>d.<d.firstChild>firstChild</d.firstChild>.nextSibling</d.firstChild.nextSibling> == null</Boolean>)
		<d.firstChild.data>str</d.firstChild.data> = <d.firstChild.data>d.<d.firstChild>firstChild</d.firstChild>.data</d.firstChild.data>;
	else
	{
		// Hmmm, innerHTML processing of str produced content
		// we weren't expecting, so just replace entities we
		// expect folks will use in node attributes that contain
		// JavaScript.
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/&amp;lt;/</RegExp>, <String>"&lt;"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/&amp;gt;/</RegExp>, <String>"&gt;"</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/&amp;quot;/</RegExp>, <String>"\""</String>)</str.replace>;
		str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/&amp;amp;/</RegExp>, <String>"&amp;"</String>)</str.replace>;
	}
	return str;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>fixupIETagAttributes</String> = <Function>function(inStr)
{
	var <String>outStr = <String>""</String></String>;

	// Break the tag string into 3 pieces.

	var tagStart = inStr.<inStr.match><inStr.match>match</inStr.match>(<RegExp>/^&lt;[^\s&gt;]+\s*/</RegExp></inStr.match>)[<Number>0</Number>];
	var tagEnd = inStr.<inStr.match><inStr.match>match</inStr.match>(<RegExp>/\s*\/?&gt;$/</RegExp></inStr.match>)[<Number>0</Number>];
	var tagAttrs = <inStr.replace>inStr.<inStr.replace>replace</inStr.replace>(<RegExp>/^&lt;[^\s&gt;]+\s*|\s*\/?&gt;/g</RegExp>, <String>""</String>)</inStr.replace>;

	// Write out the start of the tag.
	outStr += tagStart;

	// If the tag has attributes, parse it out manually to avoid accidentally fixing up
	// attributes that contain JavaScript expressions.

	if (tagAttrs)
	{
		var <Number>startIndex = <Number>0</Number></Number>;
		var <Number>endIndex = <Number>0</Number></Number>;

		while (<Boolean>startIndex &lt; <tagAttrs.length>tagAttrs.length</tagAttrs.length></Boolean>)
		{
			// Find the '=' char of the attribute.
			while (<Boolean><tagAttrs.charAt>tagAttrs.<tagAttrs.charAt>charAt</tagAttrs.charAt>(<Number>endIndex</Number>)</tagAttrs.charAt> != <String>'='</String></Boolean> &amp;&amp; <Boolean><Number>endIndex</Number> &lt; <tagAttrs.length>tagAttrs.length</tagAttrs.length></Boolean>)
				++<Number>endIndex</Number>;

			// If we are at the end of the string, just write out what we've
			// collected.

			if (<Boolean><Number>endIndex</Number> &gt;= <tagAttrs.length>tagAttrs.length</tagAttrs.length></Boolean>)
			{
				outStr += <tagAttrs.substring>tagAttrs.<tagAttrs.substring>substring</tagAttrs.substring>(<Number>startIndex</Number>, <Number>endIndex</Number>)</tagAttrs.substring>;
				break;
			}

			// Step past the '=' character and write out what we've
			// collected so far.

			++<Number>endIndex</Number>;
			outStr += <tagAttrs.substring>tagAttrs.<tagAttrs.substring>substring</tagAttrs.substring>(<Number>startIndex</Number>, <Number>endIndex</Number>)</tagAttrs.substring>;
			<Number>startIndex</Number> = <Number>endIndex</Number>;

			if (<Boolean><tagAttrs.charAt>tagAttrs.<tagAttrs.charAt>charAt</tagAttrs.charAt>(<Number>endIndex</Number>)</tagAttrs.charAt> == <String>'"'</String></Boolean> || <Boolean><tagAttrs.charAt>tagAttrs.<tagAttrs.charAt>charAt</tagAttrs.charAt>(<Number>endIndex</Number>)</tagAttrs.charAt> == <String>"'"</String></Boolean>)
			{
				// Attribute is quoted. Advance us past the quoted value!
				var savedIndex = <Number>endIndex</Number>++;
				while (<Boolean><Number>endIndex</Number> &lt; <tagAttrs.length>tagAttrs.length</tagAttrs.length></Boolean>)
				{
					if (<Boolean><tagAttrs.charAt>tagAttrs.<tagAttrs.charAt>charAt</tagAttrs.charAt>(<Number>endIndex</Number>)</tagAttrs.charAt> == <tagAttrs.charAt>tagAttrs.<tagAttrs.charAt>charAt</tagAttrs.charAt>(savedIndex)</tagAttrs.charAt></Boolean>)
					{
						<Number>endIndex</Number>++;
						break;
					}
					else if (<Boolean><tagAttrs.charAt>tagAttrs.<tagAttrs.charAt>charAt</tagAttrs.charAt>(<Number>endIndex</Number>)</tagAttrs.charAt> == <String>"\\"</String></Boolean>)
						<Number>endIndex</Number>++;
					<Number>endIndex</Number>++;
				}

				outStr += <tagAttrs.substring>tagAttrs.<tagAttrs.substring>substring</tagAttrs.substring>(<Number>startIndex</Number>, <Number>endIndex</Number>)</tagAttrs.substring>;
				<Number>startIndex</Number> = <Number>endIndex</Number>;
			}
			else
			{
				// This attribute value wasn't quoted! Wrap it with quotes and
				// write out everything till we hit a space, or the end of the
				// string.

				outStr += <String>"\""</String>;
				
				var sIndex = tagAttrs.<tagAttrs.slice><tagAttrs.slice>slice</tagAttrs.slice>(<Number>endIndex</Number></tagAttrs.slice>).search(<RegExp>/\s/</RegExp>);
				endIndex = (<Boolean>sIndex != -<Number>1</Number>)</Boolean> ? (endIndex + sIndex) : <tagAttrs.length>tagAttrs.length</tagAttrs.length>;
				outStr += <tagAttrs.slice>tagAttrs.<tagAttrs.slice>slice</tagAttrs.slice>(<Number>startIndex</Number>, endIndex)</tagAttrs.slice>;				
				outStr += <String>"\""</String>;				
				startIndex = endIndex;
			}
		}
	}

	outStr += tagEnd;

	// Write out the end of the tag.
	return outStr;
}</Function>

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>fixUpIEInnerHTML</String> = <Function>function(inStr)
{
	var <String>outStr = <String>""</String></String>;

	// Create a regular expression that will match:
	//     &lt;!--
	//     &lt;![CDATA[
	//     &lt;tag&gt;
	//     --&gt;
	//     ]]&gt;
	//     ]]&amp;gt;   // Yet another workaround for an IE innerHTML bug.
	//
	// The idea here is that we only want to fix up attribute values on tags that
	// are not in any comments or CDATA.

	var <RegExp>regexp = <RegExp>new RegExp(<String>"&lt;\\!--|&lt;\\!\\[CDATA\\[|&lt;\\w+[^&lt;&gt;]*&gt;|--&gt;|\\]\\](&gt;|\&amp;gt;)"</String>, <String>"g"</String>)</RegExp></RegExp>;
	var <Number>searchStartIndex = <Number>0</Number></Number>;
	var <Number>skipFixUp = <Number>0</Number></Number>;
	
	while (<inStr.length>inStr.length</inStr.length>)
	{
		var results = <RegExp.exec><RegExp>regexp</RegExp>.<RegExp.exec>exec</RegExp.exec>(inStr)</RegExp.exec>;
		if (!results || !results[<Number>0</Number>])
		{
			outStr += <inStr.substr>inStr.<inStr.substr>substr</inStr.substr>(<Number>searchStartIndex</Number>, <inStr.length>inStr.length</inStr.length> - <Number>searchStartIndex</Number>)</inStr.substr>;
			break;
		}

		if (<Boolean><results.index>results.index</results.index> != <Number>searchStartIndex</Number></Boolean>)
		{
			// We found a match but it's not at the start of the inStr.
			// Create a string token for everything that precedes the match.
			outStr += <inStr.substr>inStr.<inStr.substr>substr</inStr.substr>(<Number>searchStartIndex</Number>, <results.index>results.index</results.index> - <Number>searchStartIndex</Number>)</inStr.substr>;
		}

		if (<Boolean>results[<Number>0</Number>] == <String>"&lt;!--"</String></Boolean> || <Boolean>results[<Number>0</Number>] == <String>"&lt;![CDATA["</String></Boolean>)
		{
			++<Number>skipFixUp</Number>;
			outStr += results[<Number>0</Number>];
		}
		else if (<Boolean>results[<Number>0</Number>] == <String>"--&gt;"</String></Boolean> || <Boolean>results[<Number>0</Number>] == <String>"]]&gt;"</String></Boolean> || (<Number>skipFixUp</Number> &amp;&amp; <Boolean>results[<Number>0</Number>] == <String>"]]&amp;gt;"</String></Boolean>))
		{
			--<Number>skipFixUp</Number>;
			outStr += results[<Number>0</Number>];
		}
		else if (!<Number>skipFixUp</Number> &amp;&amp; <Boolean>results[<Number>0</Number>].charAt(<Number>0</Number>) == <String>'&lt;'</String></Boolean>)
			outStr += <Spry.Utils.fixupIETagAttributes>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.fixupIETagAttributes>fixupIETagAttributes</Spry.Utils.fixupIETagAttributes>(results[<Number>0</Number>])</Spry.Utils.fixupIETagAttributes>;
		else
			outStr += results[<Number>0</Number>];

		<RegExp.lastIndex>searchStartIndex</RegExp.lastIndex> = <RegExp.lastIndex><RegExp>regexp</RegExp>.lastIndex</RegExp.lastIndex>;
	}
	
	return outStr;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>getStyleProperty</String> = <Function>function(<HTMLElement>element</HTMLElement>, property)
{
	try
	{
		if (<HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>[property])
			return <HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>[property];
		else if (<HTMLElement.currentStyle><HTMLElement>element</HTMLElement>.currentStyle</HTMLElement.currentStyle>)
			return <HTMLElement>element</HTMLElement>.<HTMLElement.currentStyle>currentStyle</HTMLElement.currentStyle>[property];
		else if (<HTMLDocument.defaultView><HTMLDocument>document</HTMLDocument>.defaultView</HTMLDocument.defaultView> &amp;&amp; <HTMLDocument.defaultView.getComputedStyle><HTMLDocument>document</HTMLDocument>.<HTMLDocument.defaultView>defaultView</HTMLDocument.defaultView>.getComputedStyle</HTMLDocument.defaultView.getComputedStyle>)
		{
			var <Style>style = <HTMLDocument.defaultView.getComputedStyle><HTMLDocument>document</HTMLDocument>.<HTMLDocument.defaultView>defaultView</HTMLDocument.defaultView>.<HTMLDocument.defaultView.getComputedStyle>getComputedStyle</HTMLDocument.defaultView.getComputedStyle>(<HTMLElement>element</HTMLElement>, null)</HTMLDocument.defaultView.getComputedStyle></Style>;
			return <Style.getPropertyValue><Style>style</Style>.<Style.getPropertyValue>getPropertyValue</Style.getPropertyValue>(property)</Style.getPropertyValue>;
		}
	}
	catch (e) {}

	return null;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>stringToXMLDoc</String> = <Function>function(str)
{
	var xmlDoc = null;

	try
	{
		// Attempt to parse the string using the IE method.

		var <ActiveXObject>xmlDOMObj = <ActiveXObject>new ActiveXObject(<String>"Microsoft.XMLDOM"</String>)</ActiveXObject></ActiveXObject>;
		<ActiveXObject>xmlDOMObj</ActiveXObject>.<String>async</String> = <Boolean>false</Boolean>;
		<ActiveXObject.loadXML><ActiveXObject>xmlDOMObj</ActiveXObject>.<ActiveXObject.loadXML>loadXML</ActiveXObject.loadXML>(str)</ActiveXObject.loadXML>;
		<ActiveXObject>xmlDoc</ActiveXObject> = <ActiveXObject>xmlDOMObj</ActiveXObject>;
	}
	catch (e)
	{
		// The IE method didn't work. Try the Mozilla way.

		try
		{
			var <DOMParser>domParser = <DOMParser>new DOMParser</DOMParser></DOMParser>;
			xmlDoc = <DOMParser.parseFromString><DOMParser>domParser</DOMParser>.<DOMParser.parseFromString>parseFromString</DOMParser.parseFromString>(str, <String>'text/xml'</String>)</DOMParser.parseFromString>;
		}
		catch (e)
		{
			<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Caught exception in Spry.Utils.stringToXMLDoc(): "</String> + e + <String>"\n"</String>)</Spry.Debug.reportError>;
			xmlDoc = null;
		}
	}

	return xmlDoc;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>getNodesByFunc</String> = <Function>function(root, func)
{
	var <Array>nodeStack = <Array>new Array</Array></Array>;
	var <Array>resultArr = <Array>new Array</Array></Array>;
	var node = root;

	while (node)
	{
		if (<func>func(node)</func>)
			<Array.push><Array>resultArr</Array>.<Array.push>push</Array.push>(node)</Array.push>;

		if (<node.hasChildNodes>node.<node.hasChildNodes>hasChildNodes</node.hasChildNodes>()</node.hasChildNodes>)
		{
			<Array.push><Array>nodeStack</Array>.<Array.push>push</Array.push>(node)</Array.push>;
			<node.firstChild>node</node.firstChild> = <node.firstChild.firstChild><node.firstChild>node</node.firstChild>.firstChild</node.firstChild.firstChild>;
		}
		else
		{
			if (<Boolean><node.firstChild>node</node.firstChild> == root</Boolean>)
				node = null;
			else
				try { <node.nextSibling>node</node.nextSibling> = <node.nextSibling.nextSibling><node.nextSibling>node</node.nextSibling>.nextSibling</node.nextSibling.nextSibling>; } catch (e) { node = null; };
		}
		
		while (!node &amp;&amp; <Boolean><Array.length><Array>nodeStack</Array>.length</Array.length> &gt; <Number>0</Number></Boolean>)
		{
			node = <Array.pop><Array>nodeStack</Array>.<Array.pop>pop</Array.pop>()</Array.pop>;
			if (<Boolean>node == root</Boolean>)
				node = null;
			else
				try { <node.nextSibling>node</node.nextSibling> = <node.nextSibling.nextSibling><node.nextSibling>node</node.nextSibling>.nextSibling</node.nextSibling.nextSibling>; } catch (e) { node = null; }
		}
	}
	
	if (<Array>nodeStack</Array> &amp;&amp; <Boolean><Array.length><Array>nodeStack</Array>.length</Array.length> &gt; <Number>0</Number></Boolean>)
		<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"-- WARNING: Spry.Utils.getNodesByFunc() failed to traverse all nodes!\n"</String>)</Spry.Debug.trace>;

	return <Array>resultArr</Array>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>addClassName</String> = <Function>function(ele, className)
{
	if (!ele || !className || (<ele.className>ele.className</ele.className> &amp;&amp; <Boolean><ele.className.search>ele.<ele.className>className</ele.className>.<ele.className.search>search</ele.className.search>(<RegExp>new RegExp(<String>"\\b"</String> + className + <String>"\\b"</String>)</RegExp>)</ele.className.search> != -<Number>1</Number></Boolean>))
		return;
	ele.<String>className</String> += (<ele.className>ele.className</ele.className> ? <String>" "</String> : <String>""</String>) + className;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>removeClassName</String> = <Function>function(ele, className)
{
	if (!ele || !className || (<ele.className>ele.className</ele.className> &amp;&amp; <Boolean><ele.className.search>ele.<ele.className>className</ele.className>.<ele.className.search>search</ele.className.search>(<RegExp>new RegExp(<String>"\\b"</String> + className + <String>"\\b"</String>)</RegExp>)</ele.className.search> == -<Number>1</Number></Boolean>))
		return;
	ele.<String>className</String> = <ele.className.replace>ele.<ele.className>className</ele.className>.<ele.className.replace>replace</ele.className.replace>(<RegExp>new RegExp(<String>"\\s*\\b"</String> + className + <String>"\\b"</String>, <String>"g"</String>)</RegExp>, <String>""</String>)</ele.className.replace>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>removeAllChildren</String> = <Function>function(node)
{
	while (node &amp;&amp; <node.firstChild>node.firstChild</node.firstChild>)
		<node.removeChild>node.<node.removeChild>removeChild</node.removeChild>(<node.firstChild>node.firstChild</node.firstChild>)</node.removeChild>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>getFirstChildWithNodeName</String> = <Function>function(node, nodeName)
{
	var <node.firstChild>child = <node.firstChild>node.firstChild</node.firstChild></node.firstChild>;

	while (<node.firstChild.nextSibling>child</node.firstChild.nextSibling>)
	{
		if (<Boolean><node.firstChild.nodeName><node.firstChild>child</node.firstChild>.nodeName</node.firstChild.nodeName> == nodeName</Boolean>)
			return <node.firstChild>child</node.firstChild>;
		<node.firstChild.nextSibling>child</node.firstChild.nextSibling> = <node.firstChild.nextSibling.nextSibling><node.firstChild.nextSibling>child</node.firstChild.nextSibling>.nextSibling</node.firstChild.nextSibling.nextSibling>;
	} 

	return null;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>nodeContainsElementNode</String> = <Function>function(node)
{
	if (node)
	{
		<node.firstChild>node</node.firstChild> = <node.firstChild.firstChild><node.firstChild>node</node.firstChild>.firstChild</node.firstChild.firstChild>;

		while (<node.firstChild.nextSibling>node</node.firstChild.nextSibling>)
		{
			if (<Boolean><node.firstChild.nodeType><node.firstChild>node</node.firstChild>.nodeType</node.firstChild.nodeType> == <Number>1</Number></Boolean> /* Node.ELEMENT_NODE */)
				return <Boolean>true</Boolean>;

			<node.firstChild.nextSibling>node</node.firstChild.nextSibling> = <node.firstChild.nextSibling.nextSibling><node.firstChild.nextSibling>node</node.firstChild.nextSibling>.nextSibling</node.firstChild.nextSibling.nextSibling>;
		}
	}
	return <Boolean>false</Boolean>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>getNodeText</String> = <Function>function(node)
{
	var <String>txt = <String>""</String></String>;
  
	if (!node)
		return;

	try
	{
		var <node.firstChild>child = <node.firstChild>node.firstChild</node.firstChild></node.firstChild>;
 
		while (<node.firstChild.nextSibling>child</node.firstChild.nextSibling>)
		{
			try
			{
				if (<Boolean><node.firstChild.nodeType><node.firstChild>child</node.firstChild>.nodeType</node.firstChild.nodeType> == <Number>3</Number></Boolean> /* TEXT_NODE */)
					txt += <Spry.Utils.encodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.encodeEntities>encodeEntities</Spry.Utils.encodeEntities>(<node.firstChild.data><node.firstChild>child</node.firstChild>.data</node.firstChild.data>)</Spry.Utils.encodeEntities>;
				else if (<Boolean><node.firstChild.nodeType><node.firstChild>child</node.firstChild>.nodeType</node.firstChild.nodeType> == <Number>4</Number></Boolean> /* CDATA_SECTION_NODE */)
					txt += <node.firstChild.data><node.firstChild>child</node.firstChild>.data</node.firstChild.data>;
			} catch (e) { <Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Utils.getNodeText() exception caught: "</String> + e + <String>"\n"</String>)</Spry.Debug.reportError>; }

			<node.firstChild.nextSibling>child</node.firstChild.nextSibling> = <node.firstChild.nextSibling.nextSibling><node.firstChild.nextSibling>child</node.firstChild.nextSibling>.nextSibling</node.firstChild.nextSibling.nextSibling>;
		}
	}
	catch (e) { <Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Utils.getNodeText() exception caught: "</String> + e + <String>"\n"</String>)</Spry.Debug.reportError>; }
  
	return txt;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>CreateObjectForNode</String> = <Function>function(node)
{
	if (!node)
		return null;

	var obj = null;
	var <Number>i = <Number>0</Number></Number>;
	var attr = null;

	try
	{
		for (<Number>i</Number> = <Number>0</Number>; <Boolean><Number>i</Number> &lt; <node.attributes.length>node.<node.attributes>attributes</node.attributes>.length</node.attributes.length></Boolean>; <Number>i</Number>++)
		{
			attr = node.<node.attributes>attributes</node.attributes>[<Number>i</Number>];
			if (attr &amp;&amp; <Boolean><attr.nodeType>attr.nodeType</attr.nodeType> == <Number>2</Number></Boolean> /* Node.ATTRIBUTE_NODE */)
			{
				if (!obj)
				{
					<Object>obj</Object> = <Object>new Object()</Object>;
					if (!<Object>obj</Object>)
					{
						<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Utils.CreateObjectForNode(): Object creation failed!"</String>)</Spry.Debug.reportError>;
						return null;
					}
				}
		
				<Object>obj</Object>[<String>"@"</String> + <attr.name>attr.name</attr.name>] = <attr.value>attr.value</attr.value>;
			}
		}
	}
	catch (e)
	{
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Utils.CreateObjectForNode() caught exception while accessing attributes: "</String> + e + <String>"\n"</String>)</Spry.Debug.reportError>;
	}
  
	var <node.firstChild>child = <node.firstChild>node.firstChild</node.firstChild></node.firstChild>;
	
	if (<node.firstChild>child</node.firstChild> &amp;&amp; !<node.firstChild.nextSibling><node.firstChild>child</node.firstChild>.nextSibling</node.firstChild.nextSibling> &amp;&amp; <Boolean><node.firstChild.nodeType><node.firstChild>child</node.firstChild>.nodeType</node.firstChild.nodeType> != <Number>1</Number></Boolean> /* Node.ELEMENT_NODE */)
	{
		// We have a single child and it's not an element. It must
		// be the text value for this node. Add it to the record set and
		// give it the column the same name as the node.

		if (!<Object>obj</Object>)
		{
			<Object>obj</Object> = <Object>new Object()</Object>;
			if (!<Object>obj</Object>)
			{
				<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Utils.CreateObjectForNode(): Object creation failed!"</String>)</Spry.Debug.reportError>;
				return null;
			}
		}

		<Object>obj</Object>[<node.nodeName>node.nodeName</node.nodeName>] = <Spry.Utils.getNodeText>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.getNodeText>getNodeText</Spry.Utils.getNodeText>(node)</Spry.Utils.getNodeText>;
	}
  
	while (<node.firstChild.nextSibling>child</node.firstChild.nextSibling>)
	{
		// Add the text value for each child element. Note that
		// We skip elements that have element children (sub-elements)
		// because we don't handle multi-level data sets right now.
	
		if (<Boolean><node.firstChild.nodeType><node.firstChild>child</node.firstChild>.nodeType</node.firstChild.nodeType> == <Number>1</Number></Boolean> /* Node.ELEMENT_NODE */)
		{
			if (!<Spry.Utils.nodeContainsElementNode>Spry.<Spry.Utils>Utils</Spry.Utils>.<Boolean>nodeContainsElementNode</Boolean>(<node.firstChild>child</node.firstChild>)</Spry.Utils.nodeContainsElementNode>)
			{
				var txt = <Spry.Utils.getNodeText>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.getNodeText>getNodeText</Spry.Utils.getNodeText>(<node.firstChild>child</node.firstChild>)</Spry.Utils.getNodeText>;
				if (!<Object>obj</Object>)
				{
					<Object>obj</Object> = <Object>new Object()</Object>;
					if (!<Object>obj</Object>)
					{
						<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Utils.CreateObjectForNode(): Object creation failed!"</String>)</Spry.Debug.reportError>;
						return null;
					}
				}
	  
				<Object>obj</Object>[<node.firstChild.nodeName><node.firstChild>child</node.firstChild>.nodeName</node.firstChild.nodeName>] = txt;

				// Now add properties for any attributes on the child. The property
				// name will be of the form "&lt;child.nodeName&gt;/@&lt;attr.name&gt;".
				try
				{
					var namePrefix = <node.firstChild.nodeName><node.firstChild>child</node.firstChild>.nodeName</node.firstChild.nodeName> + <String>"/@"</String>;
					
					for (<Number>i</Number> = <Number>0</Number>; <Boolean><Number>i</Number> &lt; <node.firstChild.attributes.length><node.firstChild>child</node.firstChild>.<node.firstChild.attributes>attributes</node.firstChild.attributes>.length</node.firstChild.attributes.length></Boolean>; <Number>i</Number>++)
					{
						attr = <node.firstChild>child</node.firstChild>.<node.firstChild.attributes>attributes</node.firstChild.attributes>[<Number>i</Number>];
						if (attr &amp;&amp; <Boolean><attr.nodeType>attr.nodeType</attr.nodeType> == <Number>2</Number></Boolean> /* Node.ATTRIBUTE_NODE */)
							<Object>obj</Object>[namePrefix + <attr.name>attr.name</attr.name>] = <attr.value>attr.value</attr.value>;
					}
				}
				catch (e)
				{
					<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Utils.CreateObjectForNode() caught exception while accessing attributes: "</String> + e + <String>"\n"</String>)</Spry.Debug.reportError>;
				}
        
			}
			// else Spry.Debug.trace("WARNING: Skipping '" + child.nodeName + "' node! Multi-level data sets are not supported right now!\n");
		}

		<node.firstChild.nextSibling>child</node.firstChild.nextSibling> = <node.firstChild.nextSibling.nextSibling><node.firstChild.nextSibling>child</node.firstChild.nextSibling>.nextSibling</node.firstChild.nextSibling.nextSibling>;
	}
  
	return <Object>obj</Object>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>getRecordSetFromXMLDoc</String> = <Function>function(xmlDoc, path)
{
	if (!xmlDoc || !path)
		return null;

	var <Object>recordSet = <Object>new Object()</Object></Object>;
	<Object>recordSet</Object>.<String>xmlDoc</String> = xmlDoc;
	<Object>recordSet</Object>.<String>xmlPath</String> = path;
	<Object>recordSet</Object>.<String>dataHash</String> = <Object>new Object</Object>;
	<Object>recordSet</Object>.<String>data</String> = <Array>new Array</Array>;
	<Object>recordSet</Object>.<String>getData</String> = <Function>function() { return this.data; }</Function>;

	// Use the XPath library to find the nodes that will
	// make up our data set. The result should be an array
	// of subtrees that we need to flatten.

	var <ExprContext>ctx = <ExprContext>new ExprContext(xmlDoc)</ExprContext></ExprContext>;
	var pathExpr = <xpathParse>xpathParse(path)</xpathParse>;
	var e = <pathExpr.evaluate>pathExpr.<pathExpr.evaluate>evaluate</pathExpr.evaluate>(<ExprContext>ctx</ExprContext>)</pathExpr.evaluate>;

	// XXX: Note that we should check the result type of the evaluation
	// just in case it's a boolean, string, or number value instead of
	// a node set.
  
	var nodeArray = <e.nodeSetValue>e.<e.nodeSetValue>nodeSetValue</e.nodeSetValue>()</e.nodeSetValue>;

	var <Boolean>isDOMNodeArray = <Boolean>true</Boolean></Boolean>;

	if (nodeArray &amp;&amp; <Boolean><nodeArray.length>nodeArray.length</nodeArray.length> &gt; <Number>0</Number></Boolean>)
		<Boolean>isDOMNodeArray</Boolean> = <Boolean>nodeArray[<Number>0</Number>].nodeType != <Number>2</Number></Boolean> /* Node.ATTRIBUTE_NODE */;

	var <Number>nextID = <Number>0</Number></Number>;

	// We now have the set of nodes that make up our data set
	// so process each one.

	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <nodeArray.length>nodeArray.length</nodeArray.length></Boolean>; <Number>i</Number>++)
	{
		var rowObj = null;
	
		if (<Boolean>isDOMNodeArray</Boolean>)
			<Spry.Utils.CreateObjectForNode>rowObj</Spry.Utils.CreateObjectForNode> = <Spry.Utils.CreateObjectForNode>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.CreateObjectForNode>CreateObjectForNode</Spry.Utils.CreateObjectForNode>(nodeArray[<Number>i</Number>])</Spry.Utils.CreateObjectForNode>;
		else // Must be a Node.ATTRIBUTE_NODE array.
		{
			<Object>rowObj</Object> = <Object>new Object</Object>;
			<Object>rowObj</Object>[<String>"@"</String> + nodeArray[<Number>i</Number>].name] = nodeArray[<Number>i</Number>].value;
		}
	
		if (<Object>rowObj</Object>)
		{
			// We want to make sure that every row has a unique ID and since we
			// we don't know which column, if any, in this recordSet is a unique
			// identifier, we generate a unique ID ourselves and store it under
			// the ds_RowID column in the row object.

			<Object>rowObj</Object>[<String>'ds_RowID'</String>] = <Number>nextID</Number>++;
			<Object>recordSet</Object>.<Object.dataHash>dataHash</Object.dataHash>[<Object>rowObj</Object>[<String>'ds_RowID'</String>]] = <Object>rowObj</Object>;
			<Object.data.push><Object>recordSet</Object>.<Object.data>data</Object.data>.<Object.data.push>push</Object.data.push>(<Object>rowObj</Object>)</Object.data.push>;
		}
	}
  
	return <Object>recordSet</Object>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>setOptions</String> = <Function>function(obj, optionsObj, ignoreUndefinedProps)
{
	if (!optionsObj)
		return;

	for (var optionName in optionsObj)
	{
		if (ignoreUndefinedProps &amp;&amp; <Boolean>optionsObj[optionName] == undefined</Boolean>)
			continue;
		obj[optionName] = optionsObj[optionName];
	}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>SelectionManager</String> = {};
Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<String>selectionGroups</String> = <Object>new Object</Object>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<String>SelectionGroup</String> = <Function>function()
{
	this.<String>selectedElements</String> = <Array>new Array</Array>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.SelectionGroup>SelectionGroup</Spry.Utils.SelectionManager.SelectionGroup>.<Spry.Utils.SelectionManager.SelectionGroup.prototype>prototype</Spry.Utils.SelectionManager.SelectionGroup.prototype>.<String>select</String> = <Function>function(<HTMLElement>element</HTMLElement>, className, multiSelect)
{
	var selObj = null;

	if (!multiSelect)
	{
		// Multiple selection is not enabled, so clear any
		// selected elements from our list.

		this.clearSelection();
	}
	else
	{
		// Multiple selection is enabled, so check to see if element
		// is already in the array. If it is, make sure the className
		// is the className that was passed in.

		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.selectedElements.length</Boolean>; <Number>i</Number>++)
		{
			selObj = this.selectedElements[<Number>i</Number>].element;

			if (<Boolean><selObj.element>selObj.element</selObj.element> == <HTMLElement>element</HTMLElement></Boolean>)
			{
				if (<Boolean><selObj.className>selObj.className</selObj.className> != className</Boolean>)
				{
					<Spry.Utils.removeClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>removeClassName</void>(<HTMLElement>element</HTMLElement>, <selObj.className>selObj.className</selObj.className>)</Spry.Utils.removeClassName>;
					<Spry.Utils.addClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>addClassName</void>(<HTMLElement>element</HTMLElement>, className)</Spry.Utils.addClassName>;
				}
				return;
			}
		}
	}

	// Add the element to our list of selected elements.

	<Object>selObj</Object> = <Object>new Object</Object>;
	<Object>selObj</Object>.<String>element</String> = <HTMLElement>element</HTMLElement>;
	<Object>selObj</Object>.<String>className</String> = className;
	this.selectedElements.push(<Object>selObj</Object>);
	<Spry.Utils.addClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>addClassName</void>(<HTMLElement>element</HTMLElement>, className)</Spry.Utils.addClassName>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.SelectionGroup>SelectionGroup</Spry.Utils.SelectionManager.SelectionGroup>.<Spry.Utils.SelectionManager.SelectionGroup.prototype>prototype</Spry.Utils.SelectionManager.SelectionGroup.prototype>.<String>unSelect</String> = <Function>function(<HTMLElement>element</HTMLElement>)
{
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.selectedElements.length</Boolean>; <Number>i</Number>++)
	{
		var selObj = this.selectedElements[<Number>i</Number>].element;
	
		if (<Boolean><selObj.element>selObj.element</selObj.element> == <HTMLElement>element</HTMLElement></Boolean>)
		{
			<Spry.Utils.removeClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>removeClassName</void>(<selObj.element>selObj.element</selObj.element>, <selObj.className>selObj.className</selObj.className>)</Spry.Utils.removeClassName>;
			return;
		}
	}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.SelectionGroup>SelectionGroup</Spry.Utils.SelectionManager.SelectionGroup>.<Spry.Utils.SelectionManager.SelectionGroup.prototype>prototype</Spry.Utils.SelectionManager.SelectionGroup.prototype>.<String>clearSelection</String> = <Function>function()
{
	var selObj = null;

	do
	{
		selObj = this.selectedElements.shift();
		if (selObj)
			<Spry.Utils.removeClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>removeClassName</void>(<selObj.element>selObj.element</selObj.element>, <selObj.className>selObj.className</selObj.className>)</Spry.Utils.removeClassName>;
	}
	while (selObj);
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<String>getSelectionGroup</String> = <Function>function(selectionGroupName)
{
	if (!selectionGroupName)
		return null;

	var groupObj = Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.selectionGroups>selectionGroups</Spry.Utils.SelectionManager.selectionGroups>[selectionGroupName];

	if (!groupObj)
	{
		<Spry.Utils.SelectionManager.SelectionGroup>groupObj</Spry.Utils.SelectionManager.SelectionGroup> = <Spry.Utils.SelectionManager.SelectionGroup>new <Spry.Utils.SelectionManager.SelectionGroup>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.SelectionGroup</Spry.Utils.SelectionManager.SelectionGroup>()</Spry.Utils.SelectionManager.SelectionGroup>;
		Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.selectionGroups>selectionGroups</Spry.Utils.SelectionManager.selectionGroups>[selectionGroupName] = <Spry.Utils.SelectionManager.SelectionGroup>groupObj</Spry.Utils.SelectionManager.SelectionGroup>;
	}

	return <Spry.Utils.SelectionManager.SelectionGroup>groupObj</Spry.Utils.SelectionManager.SelectionGroup>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<String>select</String> = <Function>function(selectionGroupName, <HTMLElement>element</HTMLElement>, className, multiSelect)
{
	var groupObj = <Spry.Utils.SelectionManager.getSelectionGroup>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.getSelectionGroup>getSelectionGroup</Spry.Utils.SelectionManager.getSelectionGroup>(selectionGroupName)</Spry.Utils.SelectionManager.getSelectionGroup>;

	if (!groupObj)
		return;

	<groupObj.select>groupObj.<groupObj.select>select</groupObj.select>(<HTMLElement>element</HTMLElement>, className, multiSelect)</groupObj.select>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<String>unSelect</String> = <Function>function(selectionGroupName, <HTMLElement>element</HTMLElement>)
{
	var groupObj = <Spry.Utils.SelectionManager.getSelectionGroup>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.getSelectionGroup>getSelectionGroup</Spry.Utils.SelectionManager.getSelectionGroup>(selectionGroupName)</Spry.Utils.SelectionManager.getSelectionGroup>;

	if (!groupObj)
		return;

	<groupObj.unSelect>groupObj.<groupObj.unSelect>unSelect</groupObj.unSelect>(<HTMLElement>element</HTMLElement>, className)</groupObj.unSelect>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<String>clearSelection</String> = <Function>function(selectionGroupName)
{
	var groupObj = <Spry.Utils.SelectionManager.getSelectionGroup>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<Spry.Utils.SelectionManager.getSelectionGroup>getSelectionGroup</Spry.Utils.SelectionManager.getSelectionGroup>(selectionGroupName)</Spry.Utils.SelectionManager.getSelectionGroup>;

	if (!groupObj)
		return;

	<groupObj.clearSelection>groupObj.<groupObj.clearSelection>clearSelection</groupObj.clearSelection>()</groupObj.clearSelection>;
}</Function>;

//////////////////////////////////////////////////////////////////////
//
// Define Prototype's $() convenience function.
//
//////////////////////////////////////////////////////////////////////

<Function>function $()
{
	var <Array>elements = <Array>new Array()</Array></Array>;
	
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <arguments.length>arguments.length</arguments.length></Boolean>; <Number>i</Number>++)
	{
		var <HTMLElement>element = arguments[<Number>i</Number>]</HTMLElement>;
		if (<Boolean>typeof element == <String>'string'</String></Boolean>)
			<HTMLElement>element</HTMLElement> = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<HTMLElement>element</HTMLElement>)</HTMLDocument.getElementById>;
		
		if (<Boolean><arguments.length>arguments.length</arguments.length> == <Number>1</Number></Boolean>)
			return <HTMLElement>element</HTMLElement>;
		
		<Array.push><Array>elements</Array>.<Array.push>push</Array.push>(<HTMLElement>element</HTMLElement>)</Array.push>;
	}
	
	return <Array>elements</Array>;
}</Function>

Spry.<Spry.Utils>Utils</Spry.Utils>.<String>Notifier</String> = <Function>function()
{
	this.<String>observers</String> = <Array>[]</Array>;
	this.<String>suppressNotifications</String> = <Number>0</Number>;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.Notifier>Notifier</Spry.Utils.Notifier>.<Spry.Utils.Notifier.prototype>prototype</Spry.Utils.Notifier.prototype>.<String>addObserver</String> = <Function>function(observer)
{
	if (!observer)
		return;

	// Make sure the observer isn't already on the list.

	var len = this.observers.length;
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; len</Boolean>; <Number>i</Number>++)
	{
		if (<Boolean>this.observers[<Number>i</Number>] == observer</Boolean>)
			return;
	}
	this.observers[len] = observer;
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.Notifier>Notifier</Spry.Utils.Notifier>.<Spry.Utils.Notifier.prototype>prototype</Spry.Utils.Notifier.prototype>.<String>removeObserver</String> = <Function>function(observer)
{
	if (!observer)
		return;

	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.observers.length</Boolean>; <Number>i</Number>++)
	{
		if (<Boolean>this.observers[<Number>i</Number>] == observer</Boolean>)
		{
			this.observers.splice(<Number>i</Number>, <Number>1</Number>);
			break;
		}
	}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.Notifier>Notifier</Spry.Utils.Notifier>.<Spry.Utils.Notifier.prototype>prototype</Spry.Utils.Notifier.prototype>.<String>notifyObservers</String> = <Function>function(methodName, data)
{
	if (!methodName)
		return;

	if (!this.suppressNotifications)
	{
		var len = this.observers.length;
		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; len</Boolean>; <Number>i</Number>++)
		{
			var obs = this.observers[<Number>i</Number>];
			if (obs)
			{
				if (<Boolean>typeof obs == <String>"function"</String></Boolean>)
					<obs>obs(methodName, this, data)</obs>;
				else if (obs[methodName])
					obs[methodName](this, data);
			}
		}
	}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.Notifier>Notifier</Spry.Utils.Notifier>.<Spry.Utils.Notifier.prototype>prototype</Spry.Utils.Notifier.prototype>.<String>enableNotifications</String> = <Function>function()
{
	if (<Boolean>--this.suppressNotifications &lt; <Number>0</Number></Boolean>)
	{
		this.<String>suppressNotifications</String> = <Number>0</Number>;
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Unbalanced enableNotifications() call!\n"</String>)</Spry.Debug.reportError>;
	}
}</Function>;

Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.Notifier>Notifier</Spry.Utils.Notifier>.<Spry.Utils.Notifier.prototype>prototype</Spry.Utils.Notifier.prototype>.<String>disableNotifications</String> = <Function>function()
{
	++this.suppressNotifications;
}</Function>;

//////////////////////////////////////////////////////////////////////
//
// Spry.Debug
//
//////////////////////////////////////////////////////////////////////

Spry.<String>Debug</String> = {};
Spry.<Spry.Debug>Debug</Spry.Debug>.<String>enableTrace</String> = <Boolean>true</Boolean>;
Spry.<Spry.Debug>Debug</Spry.Debug>.<String>debugWindow</String> = null;

Spry.<Spry.Debug>Debug</Spry.Debug>.<String>createDebugWindow</String> = <Function>function()
{
	if (!<Spry.Debug.enableTrace>Spry.<Spry.Debug>Debug</Spry.Debug>.enableTrace</Spry.Debug.enableTrace> || <Spry.Debug.debugWindow>Spry.<Spry.Debug>Debug</Spry.Debug>.debugWindow</Spry.Debug.debugWindow>)
		return;
	try
	{
		Spry.<Spry.Debug>Debug</Spry.Debug>.<String>debugWindow</String> = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"div"</String>)</HTMLDocument.createElement>;
		var <Spry.Debug.debugWindow>div = <Spry.Debug.debugWindow>Spry.<Spry.Debug>Debug</Spry.Debug>.debugWindow</Spry.Debug.debugWindow></Spry.Debug.debugWindow>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>fontSize</String> = <String>"12px"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>fontFamily</String> = <String>"console"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>position</String> = <String>"absolute"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>width</String> = <String>"400px"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>height</String> = <String>"300px"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>overflow</String> = <String>"auto"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>border</String> = <String>"solid 1px black"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>backgroundColor</String> = <String>"white"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>color</String> = <String>"black"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>bottom</String> = <String>"0px"</String>;
		<Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.style>style</Spry.Debug.debugWindow.style>.<String>right</String> = <String>"0px"</String>;
		// div.style.opacity = "0.5";
		// div.style.filter = "alpha(opacity=50)";
		<Spry.Debug.debugWindow.setAttribute><Spry.Debug.debugWindow>div</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.setAttribute>setAttribute</Spry.Debug.debugWindow.setAttribute>(<String>"id"</String>, <String>"SpryDebugWindow"</String>)</Spry.Debug.debugWindow.setAttribute>;
		<HTMLDocument.body.appendChild><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.<HTMLDocument.body.appendChild>appendChild</HTMLDocument.body.appendChild>(<Spry.Debug.debugWindow>Spry.<Spry.Debug>Debug</Spry.Debug>.debugWindow</Spry.Debug.debugWindow>)</HTMLDocument.body.appendChild>;
	}
	catch (e) {}
}</Function>;

Spry.<Spry.Debug>Debug</Spry.Debug>.<String>debugOut</String> = <Function>function(str, bgColor)
{
	if (!<Spry.Debug.debugWindow>Spry.<Spry.Debug>Debug</Spry.Debug>.debugWindow</Spry.Debug.debugWindow>)
	{
		<Spry.Debug.createDebugWindow>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>createDebugWindow</void>()</Spry.Debug.createDebugWindow>;
		if (!<Spry.Debug.debugWindow>Spry.<Spry.Debug>Debug</Spry.Debug>.debugWindow</Spry.Debug.debugWindow>)
			return;
	}

	var d = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>"div"</String>)</HTMLDocument.createElement>;
	if (bgColor)
		d.<d.style>style</d.style>.<String>backgroundColor</String> = bgColor;
	d.<String>innerHTML</String> = str;
	<Spry.Debug.debugWindow.appendChild>Spry.<Spry.Debug>Debug</Spry.Debug>.<Spry.Debug.debugWindow>debugWindow</Spry.Debug.debugWindow>.<Spry.Debug.debugWindow.appendChild>appendChild</Spry.Debug.debugWindow.appendChild>(d)</Spry.Debug.debugWindow.appendChild>;	
}</Function>;

Spry.<Spry.Debug>Debug</Spry.Debug>.<String>trace</String> = <Function>function(str)
{
	<Spry.Debug.debugOut>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>debugOut</void>(str)</Spry.Debug.debugOut>;
}</Function>;

Spry.<Spry.Debug>Debug</Spry.Debug>.<String>reportError</String> = <Function>function(str)
{
	<Spry.Debug.debugOut>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>debugOut</void>(str, <String>"red"</String>)</Spry.Debug.debugOut>;
}</Function>;

//////////////////////////////////////////////////////////////////////
//
// Spry.Data
//
//////////////////////////////////////////////////////////////////////

Spry.<String>Data</String> = {};
Spry.<Spry.Data>Data</Spry.Data>.<String>regionsArray</String> = {};

Spry.<Spry.Data>Data</Spry.Data>.<String>initRegions</String> = <Function>function(rootNode)
{
	if (!rootNode)
		<HTMLDocument.body>rootNode</HTMLDocument.body> = <HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body>;

	var regions = <Spry.Utils.getNodesByFunc>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.getNodesByFunc>getNodesByFunc</Spry.Utils.getNodesByFunc>(<HTMLDocument.body>rootNode</HTMLDocument.body>, <Function>function(node)
	{
		try
		{
			if (<Boolean><node.nodeType>node.nodeType</node.nodeType> != <Number>1</Number></Boolean> /* Node.ELEMENT_NODE */)
				return <Boolean>false</Boolean>;

			// Region elements must have an spryregion attribute with a
			// non-empty value. An id attribute is also required so we can
			// reference the region by name if necessary.

			var <String>attrName = <String>"spry:region"</String></String>;
			var attr = <node.attributes.getNamedItem>node.<node.attributes>attributes</node.attributes>.<node.attributes.getNamedItem>getNamedItem</node.attributes.getNamedItem>(<String>attrName</String>)</node.attributes.getNamedItem>;
			if (!attr)
			{
				<String>attrName</String> = <String>"spry:detailregion"</String>;
				attr = <node.attributes.getNamedItem>node.<node.attributes>attributes</node.attributes>.<node.attributes.getNamedItem>getNamedItem</node.attributes.getNamedItem>(<String>attrName</String>)</node.attributes.getNamedItem>;
			}
			if (attr)
			{
				if (<attr.value>attr.value</attr.value>)
				{
					attr = <node.attributes.getNamedItem>node.<node.attributes>attributes</node.attributes>.<node.attributes.getNamedItem>getNamedItem</node.attributes.getNamedItem>(<String>"id"</String>)</node.attributes.getNamedItem>;
					if (!attr || !<attr.value>attr.value</attr.value>)
					{
						// The node is missing an id attribute so add one.
						<node.setAttribute>node.<node.setAttribute>setAttribute</node.setAttribute>(<String>"id"</String>, <String>"spryregion"</String> + (++<void.nextUniqueRegionID>Spry.<Spry.Data>Data</Spry.Data>.<void>initRegions</void>.nextUniqueRegionID</void.nextUniqueRegionID>))</node.setAttribute>;
					}
	
					return <Boolean>true</Boolean>;
				}
				else
					<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>attrName</String> + <String>" attributes require one or more data set names as values!"</String>)</Spry.Debug.reportError>;
			}
		}
		catch(e) {}
		return <Boolean>false</Boolean>;
	}</Function>)</Spry.Utils.getNodesByFunc>;

	var name, dataSets, <MyObj>i</MyObj>;
  
	for (<Number>i</Number> = <Number>0</Number>; <Boolean><Number>i</Number> &lt; <regions.length>regions.length</regions.length></Boolean>; <Number>i</Number>++)
	{
		var rgn = regions[<Number>i</Number>];

		var <Boolean>isDetailRegion = <Boolean>false</Boolean></Boolean>;

		// Get the region name.
		name = rgn.<rgn.attributes>attributes</rgn.attributes>.<rgn.attributes.getNamedItem><rgn.attributes.getNamedItem>getNamedItem</rgn.attributes.getNamedItem>(<String>"id"</String></rgn.attributes.getNamedItem>).value;

		attr = <rgn.attributes.getNamedItem>rgn.<rgn.attributes>attributes</rgn.attributes>.<rgn.attributes.getNamedItem>getNamedItem</rgn.attributes.getNamedItem>(<String>"spry:region"</String>)</rgn.attributes.getNamedItem>;
		if (!attr)
		{
			attr = <rgn.attributes.getNamedItem>rgn.<rgn.attributes>attributes</rgn.attributes>.<rgn.attributes.getNamedItem>getNamedItem</rgn.attributes.getNamedItem>(<String>"spry:detailregion"</String>)</rgn.attributes.getNamedItem>;
			<Boolean>isDetailRegion</Boolean> = <Boolean>true</Boolean>;
		}

		if (!<attr.value>attr.value</attr.value>)
		{
			<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"spry:region and spry:detailregion attributes require one or more data set names as values!"</String>)</Spry.Debug.reportError>;
			continue;
		}

		// Remove the spry:region or spry:detailregion attribute so it doesn't appear in
		// the output generated by our processing of the dynamic region.
		<rgn.attributes.removeNamedItem>rgn.<rgn.attributes>attributes</rgn.attributes>.<rgn.attributes.removeNamedItem>removeNamedItem</rgn.attributes.removeNamedItem>(<attr.nodeName>attr.nodeName</attr.nodeName>)</rgn.attributes.removeNamedItem>;

		// Remove the hiddenRegionCSS class from the rgn.
		<Spry.Utils.removeClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>removeClassName</void>(rgn, <Spry.Data.Region.hiddenRegionClassName>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.hiddenRegionClassName</Spry.Data.Region.hiddenRegionClassName>)</Spry.Utils.removeClassName>;

		// Get the DataSets that should be bound to the region.
		dataSets = <Spry.Data.Region.strToDataSetsArray>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.strToDataSetsArray>strToDataSetsArray</Spry.Data.Region.strToDataSetsArray>(<attr.value>attr.value</attr.value>)</Spry.Data.Region.strToDataSetsArray>;

		if (!<dataSets.length>dataSets.length</dataSets.length>)
		{
			<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"spry:region or spry:detailregion attribute has no data set!"</String>)</Spry.Debug.reportError>;
			continue;
		}
	
		var <Boolean>hasBehaviorAttributes = <Boolean>false</Boolean></Boolean>;
		var <Boolean>hasSpryContent = <Boolean>false</Boolean></Boolean>;
		var <String>dataStr = <String>""</String></String>;

		var parent = null;
		var regionStates = {};

		// Find all of the processing instruction regions in the region.
		// Insert comments around the regions we find so we can identify them
		// easily when tokenizing the region html string.

		var piRegions = <Spry.Utils.getNodesByFunc>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.getNodesByFunc>getNodesByFunc</Spry.Utils.getNodesByFunc>(rgn, <Function>function(node)
		{
			try
			{
				if (<Boolean><node.nodeType>node.nodeType</node.nodeType> == <Number>1</Number></Boolean> /* ELEMENT_NODE */)
				{
					var <node.attributes>attributes = <node.attributes>node.attributes</node.attributes></node.attributes>;
					var <Spry.Data.Region.PI.orderedInstructions.length>numPI = <Spry.Data.Region.PI.orderedInstructions.length>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.orderedInstructions>orderedInstructions</Spry.Data.Region.PI.orderedInstructions>.length</Spry.Data.Region.PI.orderedInstructions.length></Spry.Data.Region.PI.orderedInstructions.length>;
					var lastStartComment = null;
					var lastEndComment = null;

					for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <Spry.Data.Region.PI.orderedInstructions.length>numPI</Spry.Data.Region.PI.orderedInstructions.length></Boolean>; <Number>i</Number>++)
					{
						var piName = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.orderedInstructions>orderedInstructions</Spry.Data.Region.PI.orderedInstructions>[<Number>i</Number>];
						var attr = <node.attributes.getNamedItem><node.attributes>attributes</node.attributes>.<node.attributes.getNamedItem>getNamedItem</node.attributes.getNamedItem>(piName)</node.attributes.getNamedItem>;
						if (!attr)
							continue;
	
						var piDesc = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[piName];
						var childrenOnly = (<Boolean>node == rgn)</Boolean> ? <Boolean>true</Boolean> : <piDesc.childrenOnly>piDesc.childrenOnly</piDesc.childrenOnly>;
						var openTag = <piDesc.getOpenTag>piDesc.<piDesc.getOpenTag>getOpenTag</piDesc.getOpenTag>(node, piName)</piDesc.getOpenTag>;
						var closeTag = <piDesc.getCloseTag>piDesc.<piDesc.getCloseTag>getCloseTag</piDesc.getCloseTag>(node, piName)</piDesc.getCloseTag>;
	
						if (childrenOnly)
						{
								var oComment = <HTMLDocument.createComment><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createComment>createComment</HTMLDocument.createComment>(openTag)</HTMLDocument.createComment>;
								var cComment = <HTMLDocument.createComment><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createComment>createComment</HTMLDocument.createComment>(closeTag)</HTMLDocument.createComment>

								if (!lastStartComment)
									<node.insertBefore>node.<node.insertBefore>insertBefore</node.insertBefore>(oComment, <node.firstChild>node.firstChild</node.firstChild>)</node.insertBefore>;
								else
									<node.insertBefore>node.<node.insertBefore>insertBefore</node.insertBefore>(oComment, <lastStartComment.nextSibling>lastStartComment.nextSibling</lastStartComment.nextSibling>)</node.insertBefore>;
								lastStartComment = oComment;

								if (!lastEndComment)
									<node.appendChild>node.<node.appendChild>appendChild</node.appendChild>(cComment)</node.appendChild>;
								else
									<node.insertBefore>node.<node.insertBefore>insertBefore</node.insertBefore>(cComment, lastEndComment)</node.insertBefore>;
								lastEndComment = cComment;
						}
						else
						{
							var <node.parentNode>parent = <node.parentNode>node.parentNode</node.parentNode></node.parentNode>;
							<node.parentNode.insertBefore><node.parentNode>parent</node.parentNode>.<node.parentNode.insertBefore>insertBefore</node.parentNode.insertBefore>(<HTMLDocument.createComment><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createComment>createComment</HTMLDocument.createComment>(openTag)</HTMLDocument.createComment>, node)</node.parentNode.insertBefore>;
							<node.parentNode.insertBefore><node.parentNode>parent</node.parentNode>.<node.parentNode.insertBefore>insertBefore</node.parentNode.insertBefore>(<HTMLDocument.createComment><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createComment>createComment</HTMLDocument.createComment>(closeTag)</HTMLDocument.createComment>, <node.nextSibling>node.nextSibling</node.nextSibling>)</node.parentNode.insertBefore>;
						}

						// If this is a spry:state processing instruction, record the state name
						// so we know that we should re-generate the region if we ever see that state.

						if (<Boolean>piName == <String>"spry:state"</String></Boolean>)
							regionStates[<attr.value>attr.value</attr.value>] = <Boolean>true</Boolean>;

						<node.removeAttribute>node.<node.removeAttribute>removeAttribute</node.removeAttribute>(piName)</node.removeAttribute>;
					}

					if (!hasBehaviorAttributes &amp;&amp; <Spry.Data.Region.enableBehaviorAttributes>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.enableBehaviorAttributes</Spry.Data.Region.enableBehaviorAttributes>)
					{
						for (var behaviorAttrName in <Spry.Data.Region.behaviorAttrs>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.behaviorAttrs</Spry.Data.Region.behaviorAttrs>)
						{
							if (<node.attributes.getNamedItem><node.attributes>attributes</node.attributes>.<node.attributes.getNamedItem>getNamedItem</node.attributes.getNamedItem>(behaviorAttrName)</node.attributes.getNamedItem>)
							{
								<Boolean>hasBehaviorAttributes</Boolean> = <Boolean>true</Boolean>;
								break;
							}
						}
					}
				}
			}
			catch(e) {}
			return <Boolean>false</Boolean>;
		}</Function>)</Spry.Utils.getNodesByFunc>;
	
		// Get the data in the region.
		<rgn.innerHTML>dataStr</rgn.innerHTML> = <rgn.innerHTML>rgn.innerHTML</rgn.innerHTML>;

		// Argh! IE has an innerHTML bug where it will remove the quotes around any
		// attribute value that it thinks is a single word. This includes removing quotes
		// around our data references which is problematic since a single data reference
		// can be replaced with multiple words. If we are running in IE, we have to call
		// fixUpIEInnerHTML to get around this problem.

		if (<Window.ActiveXObject><Window>window</Window>.ActiveXObject</Window.ActiveXObject> &amp;&amp; !<Spry.Data.Region.disableIEInnerHTMLFixUp>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.disableIEInnerHTMLFixUp</Spry.Data.Region.disableIEInnerHTMLFixUp> &amp;&amp; <Boolean><rgn.innerHTML.search><rgn.innerHTML>dataStr</rgn.innerHTML>.<rgn.innerHTML.search>search</rgn.innerHTML.search>(<RegExp>/=\{/)</RegExp></rgn.innerHTML.search> != -<Number>1</Number></Boolean>)
		{
			if (<Spry.Data.Region.debug>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.debug</Spry.Data.Region.debug>)
				<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"&lt;hr /&gt;Performing IE innerHTML fix up of Region: "</String> + name + <String>"&lt;br /&gt;&lt;br /&gt;"</String> + <Spry.Utils.encodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.encodeEntities>encodeEntities</Spry.Utils.encodeEntities>(<rgn.innerHTML>dataStr</rgn.innerHTML>)</Spry.Utils.encodeEntities>)</Spry.Debug.trace>;

			dataStr = <Spry.Utils.fixUpIEInnerHTML>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.fixUpIEInnerHTML>fixUpIEInnerHTML</Spry.Utils.fixUpIEInnerHTML>(dataStr)</Spry.Utils.fixUpIEInnerHTML>;
		}

		if (<Spry.Data.Region.debug>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.debug</Spry.Data.Region.debug>)
			<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"&lt;hr /&gt;Region template markup for '"</String> + name + <String>"':&lt;br /&gt;&lt;br /&gt;"</String> + <Spry.Utils.encodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.encodeEntities>encodeEntities</Spry.Utils.encodeEntities>(dataStr)</Spry.Utils.encodeEntities>)</Spry.Debug.trace>;

		if (!<Boolean>hasSpryContent</Boolean>)
		{
			// Clear the region.
			<Spry.Utils.removeAllChildren>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>removeAllChildren</void>(rgn)</Spry.Utils.removeAllChildren>;
		}

		// Create a Spry.Data.Region object for this region.
		var <Spry.Data.Region>region = <Spry.Data.Region>new <Spry.Data.Region>Spry.<Spry.Data>Data</Spry.Data>.Region</Spry.Data.Region>(rgn, name, <Boolean>isDetailRegion</Boolean>, dataStr, dataSets, regionStates, <Boolean>hasBehaviorAttributes</Boolean>)</Spry.Data.Region></Spry.Data.Region>;
		Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.regionsArray>regionsArray</Spry.Data.regionsArray>[<Spry.Data.Region.name><Spry.Data.Region>region</Spry.Data.Region>.name</Spry.Data.Region.name>] = <Spry.Data.Region>region</Spry.Data.Region>;
	}

	<Spry.Data.updateAllRegions>Spry.<Spry.Data>Data</Spry.Data>.<void>updateAllRegions</void>()</Spry.Data.updateAllRegions>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<void>initRegions</void>.<String>nextUniqueRegionID</String> = <Number>0</Number>;

Spry.<Spry.Data>Data</Spry.Data>.<String>updateRegion</String> = <Function>function(regionName)
{
	if (!regionName || !<Spry.Data.regionsArray>Spry.<Spry.Data>Data</Spry.Data>.regionsArray</Spry.Data.regionsArray> || !Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.regionsArray>regionsArray</Spry.Data.regionsArray>[regionName])
		return;

	try { Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.regionsArray>regionsArray</Spry.Data.regionsArray>[regionName].updateContent(); }
	catch(e) { <Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Data.updateRegion("</String> + regionName + <String>") caught an exception: "</String> + e + <String>"\n"</String>)</Spry.Debug.reportError>; }
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<String>getRegion</String> = <Function>function(regionName)
{
	return Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.regionsArray>regionsArray</Spry.Data.regionsArray>[regionName];
}</Function>;


Spry.<Spry.Data>Data</Spry.Data>.<String>updateAllRegions</String> = <Function>function()
{
	if (!<Spry.Data.regionsArray>Spry.<Spry.Data>Data</Spry.Data>.regionsArray</Spry.Data.regionsArray>)
		return;

	for (var regionName in <Spry.Data.regionsArray>Spry.<Spry.Data>Data</Spry.Data>.regionsArray</Spry.Data.regionsArray>)
		<Spry.Data.updateRegion>Spry.<Spry.Data>Data</Spry.Data>.<void>updateRegion</void>(regionName)</Spry.Data.updateRegion>;
}</Function>;

//////////////////////////////////////////////////////////////////////
//
// Spry.Data.DataSet
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Data>Data</Spry.Data>.<String>DataSet</String> = <Function>function()
{
	<Spry.Utils.Notifier.call>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.Notifier>Notifier</Spry.Utils.Notifier>.<Spry.Utils.Notifier.call>call</Spry.Utils.Notifier.call>(this)</Spry.Utils.Notifier.call>;

	this.<String>name</String> = <String>""</String>;
	this.<String>internalID</String> = <Spry.Data.DataSet.nextDataSetID>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.nextDataSetID</Spry.Data.DataSet.nextDataSetID>++;
	this.<String>curRowID</String> = <Number>0</Number>;
	this.<String>data</String> = null;
	this.<String>unfilteredData</String> = null;
	this.<String>dataHash</String> = null;
	this.<String>columnTypes</String> = <Object>new Object</Object>;
	this.<String>filterFunc</String> = null;		// non-destructive filter function
	this.<String>filterDataFunc</String> = null;	// destructive filter function

	this.<String>distinctOnLoad</String> = <Boolean>false</Boolean>;
	this.<String>sortOnLoad</String> = null;
	this.<String>sortOrderOnLoad</String> = <String>"ascending"</String>;
	this.<String>keepSorted</String> = <Boolean>false</Boolean>;

	this.<String>dataWasLoaded</String> = <Boolean>false</Boolean>;
	this.<String>pendingRequest</String> = null;

	this.<String>lastSortColumns</String> = <Array>[]</Array>;
	this.<String>lastSortOrder</String> = <String>""</String>;

	this.<String>loadIntervalID</String> = <Number>0</Number>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<String>prototype</String> = <Spry.Utils.Notifier>new <Spry.Utils.Notifier>Spry.<Spry.Utils>Utils</Spry.Utils>.Notifier</Spry.Utils.Notifier>()</Spry.Utils.Notifier>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>constructor</String> = <Spry.Data.DataSet>Spry.<Spry.Data>Data</Spry.Data>.DataSet</Spry.Data.DataSet>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getData</String> = <Function>function()
{
	return this.data;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getUnfilteredData</String> = <Function>function()
{
	return this.unfilteredData ? this.unfilteredData : this.data;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getLoadDataRequestIsPending</String> = <Function>function()
{
	return <Boolean>this.pendingRequest != null</Boolean>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getDataWasLoaded</String> = <Function>function()
{
	return this.dataWasLoaded;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>loadData</String> = <Function>function()
{
	// The idea here is that folks using the base class DataSet directly
	// would change the data in the DataSet manually and then call loadData()
	// to fire off an async notifications to say that it was ready for consumption.
	//
	// Firing off data changed notificataions synchronously from this method
	// can wreak havoc with complicated master/detail regions that use data sets
	// that have master/detail relationships with other data sets. Our data set
	// logic already handles async data loading nicely so we use a timer to fire
	// off the data changed notification to insure that it happens after this
	// function is finished and the JS stack unwinds.
	//
	// Other classes that derive from this class and load data synchronously
	// inside their loadData() implementation should also fire off an async
	// notification in this same manner to avoid this same problem.

	var self = this;

	this.<String>pendingRequest</String> = <Object>new Object</Object>;
	this.<String>dataWasLoaded</String> = <Boolean>false</Boolean>;
	this.pendingRequest.<String>timer</String> = <setTimeout>setTimeout(<Function>function()
	{
		self.<String>pendingRequest</String> = null;
		self.<String>dataWasLoaded</String> = <Boolean>true</Boolean>;

		if (<self.filterDataFunc>self.filterDataFunc</self.filterDataFunc>)
			<self.filterData>self.<self.filterData>filterData</self.filterData>(<self.filterDataFunc>self.filterDataFunc</self.filterDataFunc>, <Boolean>true</Boolean>)</self.filterData>;

		if (<self.distinctOnLoad>self.distinctOnLoad</self.distinctOnLoad>)
			<self.distinct>self.<self.distinct>distinct</self.distinct>()</self.distinct>;

		if (<self.keepSorted>self.keepSorted</self.keepSorted> &amp;&amp; <self.getSortColumn>self.<self.getSortColumn>getSortColumn</self.getSortColumn>()</self.getSortColumn>)
			<self.sort>self.<self.sort>sort</self.sort>(<self.lastSortColumns>self.lastSortColumns</self.lastSortColumns>, <self.lastSortOrder>self.lastSortOrder</self.lastSortOrder>)</self.sort>
		else if (<self.sortOnLoad>self.sortOnLoad</self.sortOnLoad>)
			<self.sort>self.<self.sort>sort</self.sort>(<self.sortOnLoad>self.sortOnLoad</self.sortOnLoad>, <self.sortOrderOnLoad>self.sortOrderOnLoad</self.sortOrderOnLoad>)</self.sort>;
	
		if (<self.filterFunc>self.filterFunc</self.filterFunc>)
			<self.filter>self.<self.filter>filter</self.filter>(<self.filterFunc>self.filterFunc</self.filterFunc>, <Boolean>true</Boolean>)</self.filter>;
	
		<self.notifyObservers>self.<self.notifyObservers>notifyObservers</self.notifyObservers>(<String>"onDataChanged"</String>)</self.notifyObservers>;
	}</Function>, <Number>0</Number>)</setTimeout>;  
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>cancelLoadData</String> = <Function>function()
{
	if (this.pendingRequest &amp;&amp; this.pendingRequest.timer)
		<clearTimeout>clearTimeout(this.pendingRequest.timer)</clearTimeout>;
	this.<String>pendingRequest</String> = null;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getCurrentRow</String> = <Function>function()
{
	if (!this.data)
		return null;
	return this.dataHash[this.curRowID];
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>setCurrentRow</String> = <Function>function(rowID)
{
	if (<Boolean>this.curRowID == rowID</Boolean>)
		return;

	var nData = { oldRowID: this.curRowID, newRowID: rowID };
	this.<String>curRowID</String> = rowID;
	this.notifyObservers(<String>"onCurrentRowChanged"</String>, nData);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getRowNumber</String> = <Function>function(row)
{
	if (row &amp;&amp; this.data &amp;&amp; this.data.length)
	{
		var numRows = this.data.length;
		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; numRows</Boolean>; <Number>i</Number>++)
		{
			if (<Boolean>this.data[<Number>i</Number>] == row</Boolean>)
				return <Number>i</Number>;
		}
	}

	return <Number>0</Number>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getCurrentRowNumber</String> = <Function>function()
{
	return this.getRowNumber(this.getCurrentRow());
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>setCurrentRowNumber</String> = <Function>function(rowNumber)
{
	if (!this.data || <Boolean>rowNumber &gt;= this.data.length</Boolean>)
	{
		<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"Invalid row number: "</String> + rowNumber + <String>"\n"</String>)</Spry.Debug.trace>;
		return;
	}

	var rowID = this.data[rowNumber][<String>"ds_RowID"</String>];

	if (<Boolean>rowID == undefined</Boolean> || <Boolean>this.curRowID == rowID</Boolean>)
		return;

	this.setCurrentRow(rowID);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>setColumnType</String> = <Function>function(columnName, columnType)
{
	if (columnName)
		this.columnTypes[columnName] = columnType;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getColumnType</String> = <Function>function(columnName)
{
	if (this.columnTypes[columnName])
		return this.columnTypes[columnName];
	return <String>"string"</String>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>distinct</String> = <Function>function()
{
	if (this.data)
	{
		var oldData = this.data;
		this.<String>data</String> = <Array>[]</Array>;
		this.<String>dataHash</String> = {};

		var alreadySeenHash = {};
		var <Number>i = <Number>0</Number></Number>;

		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <oldData.length>oldData.length</oldData.length></Boolean>; <Number>i</Number>++)
		{
			var rec = oldData[<Number>i</Number>];
			var <String>hashStr = <String>""</String></String>;
			for (var recField in rec)
			{
				if (<Boolean>recField != <String>"ds_RowID"</String></Boolean>)
				{
					if (<String>hashStr</String>)
						hashStr += <String>","</String>;
					hashStr += recField + <String>":"</String> + <String>"\""</String> + rec[recField] + <String>"\""</String>;
				}
			}
			if (!alreadySeenHash[hashStr])
			{
				this.data.push(rec);
				this.dataHash[rec[<String>'ds_RowID'</String>]] = rec;
				alreadySeenHash[hashStr] = <Boolean>true</Boolean>;
			}
		}
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>getSortColumn</String> = <Function>function() {
	return (this.lastSortColumns &amp;&amp; <Boolean>this.lastSortColumns.length &gt; <Number>0</Number></Boolean>) ? this.lastSortColumns[<Number>0</Number>] : <String>""</String>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>sort</String> = <Function>function(columnNames, sortOrder)
{
	// columnNames can be either the name of a column to
	// sort on, or an array of column names, but it can't be
	// null/undefined.

	if (!columnNames)
		return;

	// If only one column name was specified for sorting, do a
	// secondary sort on ds_RowID so we get a stable sort order.

	if (<Boolean>typeof columnNames == <String>"string"</String></Boolean>)
		<Array>columnNames</Array> = [ <Array><Array>columnNames</Array>, <String>"ds_RowID"</String> ]</Array>;
	else if (<Boolean><Array.length><Array>columnNames</Array>.length</Array.length> &lt; <Number>2</Number></Boolean> &amp;&amp; <Boolean><Array>columnNames</Array>[<Number>0</Number>] != <String>"ds_RowID"</String></Boolean>)
		<Array.push><Array>columnNames</Array>.<Array.push>push</Array.push>(<String>"ds_RowID"</String>)</Array.push>;

	if (<Boolean>sortOrder == <String>"toggle"</String></Boolean>)
	{
		if (<Boolean>this.lastSortColumns.length &gt; <Number>0</Number></Boolean> &amp;&amp; <Boolean>this.lastSortColumns[<Number>0</Number>] == <Array>columnNames</Array>[<Number>0</Number>]</Boolean> &amp;&amp; <Boolean>this.lastSortOrder == <String>"ascending"</String></Boolean>)
			<String>sortOrder</String> = <String>"descending"</String>;
		else
			<String>sortOrder</String> = <String>"ascending"</String>;
	}

	if (!<String>sortOrder</String>)
		<String>sortOrder</String> = <String>"ascending"</String>;

	if (<Boolean><String>sortOrder</String> != <String>"ascending"</String></Boolean> &amp;&amp; <Boolean><String>sortOrder</String> != <String>"descending"</String></Boolean>)
	{
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Invalid sort order type specified: "</String> + <String>sortOrder</String> + <String>"\n"</String>)</Spry.Debug.reportError>;
		return;
	}

	var nData = {
		oldSortColumns: this.lastSortColumns,
		oldSortOrder: this.lastSortOrder,
		newSortColumns: <Array>columnNames</Array>,
		newSortOrder: <String>sortOrder</String>
	};
	this.notifyObservers(<String>"onPreSort"</String>, nData);

	var cname = <Array>columnNames</Array>[<Array.length><Array>columnNames</Array>.length</Array.length> - <Number>1</Number>];
	var sortfunc = <Spry.Data.DataSet.prototype.sort.getSortFunc>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<Spry.Data.DataSet.prototype.sort>sort</Spry.Data.DataSet.prototype.sort>.<Spry.Data.DataSet.prototype.sort.getSortFunc>getSortFunc</Spry.Data.DataSet.prototype.sort.getSortFunc>(cname, this.getColumnType(cname), <String>sortOrder</String>)</Spry.Data.DataSet.prototype.sort.getSortFunc>;

	for (var <MyObj>i = <Array.length><Array>columnNames</Array>.length</Array.length> - <Number>2</Number></MyObj>; <Boolean><MyObj>i</MyObj> &gt;= <Number>0</Number></Boolean>; <MyObj>i</MyObj>--)
	{
		cname = <Array>columnNames</Array>[<MyObj>i</MyObj>];
		sortfunc = <Spry.Data.DataSet.prototype.sort.buildSecondarySortFunc>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<Spry.Data.DataSet.prototype.sort>sort</Spry.Data.DataSet.prototype.sort>.<Spry.Data.DataSet.prototype.sort.buildSecondarySortFunc>buildSecondarySortFunc</Spry.Data.DataSet.prototype.sort.buildSecondarySortFunc>(<Spry.Data.DataSet.prototype.sort.getSortFunc>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<Spry.Data.DataSet.prototype.sort>sort</Spry.Data.DataSet.prototype.sort>.<Spry.Data.DataSet.prototype.sort.getSortFunc>getSortFunc</Spry.Data.DataSet.prototype.sort.getSortFunc>(cname, this.getColumnType(cname), <String>sortOrder</String>)</Spry.Data.DataSet.prototype.sort.getSortFunc>, sortfunc)</Spry.Data.DataSet.prototype.sort.buildSecondarySortFunc>;
	}

	if (this.unfilteredData)
	{
		this.unfilteredData.sort(sortfunc);
		if (this.filterFunc)
			this.filter(this.filterFunc, <Boolean>true</Boolean>);
	}
	else
		this.data.sort(sortfunc);

	this.<String>lastSortColumns</String> = <Array.slice><Array>columnNames</Array>.<Array.slice>slice</Array.slice>(<Number>0</Number>)</Array.slice>; // Copy the array.
	this.<String>lastSortOrder</String> = <String>sortOrder</String>;

	this.notifyObservers(<String>"onPostSort"</String>, nData);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<Spry.Data.DataSet.prototype.sort>sort</Spry.Data.DataSet.prototype.sort>.<String>getSortFunc</String> = <Function>function(prop, type, order)
{
	var sortfunc = null;
	if (<Boolean>type == <String>"number"</String></Boolean>)
	{
		if (<Boolean>order == <String>"ascending"</String></Boolean>)
			<Function>sortfunc</Function> = <Function>function(a, b){ return a[prop]-b[prop]; }</Function>;
		else // order == "descending"
			<Function>sortfunc</Function> = <Function>function(a, b){ return b[prop]-a[prop]; }</Function>;
	}
	else if (<Boolean>type == <String>"date"</String></Boolean>)
	{
		if (<Boolean>order == <String>"ascending"</String></Boolean>)
			<Function>sortfunc</Function> = <Function>function(a, b)
			{
				var dA = a[prop];
				var dB = b[prop];			
				dA = dA ? (<Date>new Date(dA))</Date> : <Number>0</Number>;
				dB = dB ? (<Date>new Date(dB))</Date> : <Number>0</Number>;
				return dA - dB;
			}</Function>;
		else // order == "descending"
			<Function>sortfunc</Function> = <Function>function(a, b)
			{
				var dA = a[prop];
				var dB = b[prop];			
				dA = dA ? (<Date>new Date(dA))</Date> : <Number>0</Number>;
				dB = dB ? (<Date>new Date(dB))</Date> : <Number>0</Number>;
				return dB - dA;
			}</Function>;
	}
	else // type == "string"
	{
		if (<Boolean>order == <String>"ascending"</String></Boolean>)
			<Function>sortfunc</Function> = <Function>function(a, b){ return (<Boolean>a[prop] &lt; b[prop])</Boolean> ? -<Number>1</Number> : ((<Boolean>a[prop] &gt; b[prop])</Boolean> ? <Number>1</Number> : <Number>0</Number>) }</Function>;
		else // order == "descending"
			<Function>sortfunc</Function> = <Function>function(a, b){ return (<Boolean>a[prop] &gt; b[prop])</Boolean> ? -<Number>1</Number> : ((<Boolean>a[prop] &lt; b[prop])</Boolean> ? <Number>1</Number> : <Number>0</Number>) }</Function>;
	}

	return <Function>sortfunc</Function>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<Spry.Data.DataSet.prototype.sort>sort</Spry.Data.DataSet.prototype.sort>.<String>buildSecondarySortFunc</String> = <Function>function(funcA, funcB)
{
	return <Function>function(a, b)
	{
		var ret = <funcA>funcA(a, b)</funcA>;
		if (<Boolean>ret == <Number>0</Number></Boolean>)
			ret = <funcB>funcB(a, b)</funcB>;
		return ret;
	}</Function>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>filterData</String> = <Function>function(filterFunc, filterOnly)
{
	// This is a destructive filter function.
	
	var <Boolean>dataChanged = <Boolean>false</Boolean></Boolean>;

	if (!filterFunc)
	{
		// Caller wants to remove the filter.

		this.<String>filterDataFunc</String> = null;
		<Boolean>dataChanged</Boolean> = <Boolean>true</Boolean>;
	}
	else
	{
		this.<String>filterDataFunc</String> = filterFunc;
		
		if (this.dataWasLoaded &amp;&amp; ((this.unfilteredData &amp;&amp; this.unfilteredData.length) || (this.data &amp;&amp; this.data.length)))
		{
			if (this.unfilteredData)
			{
				this.<String>data</String> = this.unfilteredData;
				this.<String>unfilteredData</String> = null;
			}
	
			var oldData = this.data;
			this.<String>data</String> = <Array>[]</Array>;
			this.<String>dataHash</String> = {};
	
			for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <oldData.length>oldData.length</oldData.length></Boolean>; <Number>i</Number>++)
			{
				var newRow = <filterFunc>filterFunc(this, oldData[<Number>i</Number>], <Number>i</Number>)</filterFunc>;
				if (newRow)
				{
					this.data.push(newRow);
					this.dataHash[newRow[<String>"ds_RowID"</String>]] = newRow;
				}
			}
	
			<Boolean>dataChanged</Boolean> = <Boolean>true</Boolean>;
		}
	}

	if (<Boolean>dataChanged</Boolean>)
	{
		if (!filterOnly)
		{
			this.disableNotifications();
			if (this.filterFunc)
				this.filter(this.filterFunc, <Boolean>true</Boolean>);
			this.enableNotifications();
		}

		this.notifyObservers(<String>"onDataChanged"</String>);
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>filter</String> = <Function>function(filterFunc, filterOnly)
{
	// This is a non-destructive filter function.

	var <Boolean>dataChanged = <Boolean>false</Boolean></Boolean>;

	if (!filterFunc)
	{
		if (this.filterFunc &amp;&amp; this.unfilteredData)
		{
			// Caller wants to remove the filter. Restore the unfiltered
			// data and trigger a data changed notification.
	
			this.<String>data</String> = this.unfilteredData;
			this.<String>unfilteredData</String> = null;
			this.<String>filterFunc</String> = null;
			<Boolean>dataChanged</Boolean> = <Boolean>true</Boolean>;
		}
	}
	else
	{
		this.<String>filterFunc</String> = filterFunc;
		
		if (this.dataWasLoaded &amp;&amp; (this.unfilteredData || (this.data &amp;&amp; this.data.length)))
		{
			if (!this.unfilteredData)
				this.<String>unfilteredData</String> = this.data;
	
			var udata = this.unfilteredData;
			this.<String>data</String> = <Array>[]</Array>;
	
			for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <udata.length>udata.length</udata.length></Boolean>; <Number>i</Number>++)
			{
				var newRow = <filterFunc>filterFunc(this, udata[<Number>i</Number>], <Number>i</Number>)</filterFunc>;
	
				if (newRow)
					this.data.push(newRow);
			}
	
			<Boolean>dataChanged</Boolean> = <Boolean>true</Boolean>;
		}
	}

	if (<Boolean>dataChanged</Boolean>)
		this.notifyObservers(<String>"onDataChanged"</String>);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>startLoadInterval</String> = <Function>function(interval)
{
	this.stopLoadInterval();
	if (<Boolean>interval &gt; <Number>0</Number></Boolean>)
	{
		var self = this;
		this.<String>loadInterval</String> = interval;
		this.<String>loadIntervalID</String> = <setInterval>setInterval(<Function>function() { <self.loadData>self.<self.loadData>loadData</self.loadData>()</self.loadData>; }</Function>, interval)</setInterval>;
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.prototype>prototype</Spry.Data.DataSet.prototype>.<String>stopLoadInterval</String> = <Function>function()
{
	if (this.loadIntervalID)
		<clearInterval>clearInterval(this.loadIntervalID)</clearInterval>;
	this.<String>loadInterval</String> = <Number>0</Number>;
	this.<String>loadIntervalID</String> = null;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<String>nextDataSetID</String> = <Number>0</Number>;

//////////////////////////////////////////////////////////////////////
//
// Spry.Data.XMLDataSet
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Data>Data</Spry.Data>.<String>XMLDataSet</String> = <Function>function(dataSetURL, dataSetPath, dataSetOptions)
{
	// Call the constructor for our DataSet base class so that
	// our base class properties get defined. We'll call setOptions
	// manually after we set up our XMLDataSet properties.

	<Spry.Data.DataSet.call>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.DataSet>DataSet</Spry.Data.DataSet>.<Spry.Data.DataSet.call>call</Spry.Data.DataSet.call>(this)</Spry.Data.DataSet.call>;
	
	// XMLDataSet Properties:

	this.<String>url</String> = dataSetURL;
	this.<String>xpath</String> = dataSetPath;
	this.<String>doc</String> = null;
	this.<String>dataSetsForDataRefStrings</String> = <Array>new Array</Array>;
	this.<String>hasDataRefStrings</String> = <Boolean>false</Boolean>;
	this.<String>useCache</String> = <Boolean>true</Boolean>;

	// Create a loadURL request object to store any load options
	// the caller specified. We'll fill in the URL at the last minute
	// before we make the actual load request because our URL needs
	// to be processed at the last possible minute in case it contains
	// data references.

	this.<String>requestInfo</String> = <Spry.Utils.loadURL.Request>new <Spry.Utils.loadURL.Request>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>.Request</Spry.Utils.loadURL.Request>()</Spry.Utils.loadURL.Request>;
	this.requestInfo.extractRequestOptions(dataSetOptions, <Boolean>true</Boolean>);

	// If the caller wants to use "POST" to fetch the data, but didn't
	// provide the content type, default to x-www-form-urlencoded.

	if (<Boolean>this.requestInfo.method == <String>"POST"</String></Boolean>)
	{
		if (!this.requestInfo.headers)
			this.requestInfo.<String>headers</String> = {};
		if (!this.requestInfo.headers[<String>'Content-Type'</String>])
			this.requestInfo.headers[<String>'Content-Type'</String>] = <String>"application/x-www-form-urlencoded; charset=UTF-8"</String>;
	}

	<Spry.Utils.setOptions>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>setOptions</void>(this, dataSetOptions, <Boolean>true</Boolean>)</Spry.Utils.setOptions>;
	
	this.recalculateDataSetDependencies();

	if (<Boolean>this.loadInterval &gt; <Number>0</Number></Boolean>)
		this.startLoadInterval(this.loadInterval);
}</Function>; // End of Spry.Data.XMLDataSet() constructor.

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<String>prototype</String> = <Spry.Data.DataSet>new <Spry.Data.DataSet>Spry.<Spry.Data>Data</Spry.Data>.DataSet</Spry.Data.DataSet>()</Spry.Data.DataSet>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>constructor</String> = <Spry.Data.XMLDataSet>Spry.<Spry.Data>Data</Spry.Data>.XMLDataSet</Spry.Data.XMLDataSet>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>recalculateDataSetDependencies</String> = <Function>function()
{
	this.<String>hasDataRefStrings</String> = <Boolean>false</Boolean>;

	if (!this.url)
		return;

	// Clear all old callbacks that may have been registered.

	var <Number>i = <Number>0</Number></Number>;
	for (<Number>i</Number> = <Number>0</Number>; <Boolean><Number>i</Number> &lt; this.dataSetsForDataRefStrings.length</Boolean>; <Number>i</Number>++)
	{
		var ds = this.dataSetsForDataRefStrings[<Number>i</Number>];
		if (ds)
			<ds.removeObserver>ds.<ds.removeObserver>removeObserver</ds.removeObserver>(this)</ds.removeObserver>;
	}

	// Now run through the strings that may contain data references and figure
	// out what data sets they require. Note that the data references in these
	// strings must be fully qualified with a data set name. (ex: {dsDataSetName::columnName})

	this.<String>dataSetsForDataRefStrings</String> = <Array>new Array()</Array>;

	var <Array>regionStrs = [ <Array>this.url, this.xpath, this.requestInfo.postData ]</Array></Array>;

	// If postData exists, and is a string, we want to check it for data refs.
	var postData = this.requestInfo.postData;
	if (postData &amp;&amp; (typeof <Boolean>postData) == <String>"string"</String></Boolean>)
		<Array.push><Array>regionStrs</Array>.<Array.push>push</Array.push>(postData)</Array.push>;

	var <Number>dsCount = <Number>0</Number></Number>;

	for (var <Number>n = <Number>0</Number></Number>; <Boolean><Number>n</Number> &lt; <Array.length><Array>regionStrs</Array>.length</Array.length></Boolean>; <Number>n</Number>++)
	{
		var tokens = <Spry.Data.Region.getTokensFromStr>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.getTokensFromStr>getTokensFromStr</Spry.Data.Region.getTokensFromStr>(<Array>regionStrs</Array>[<Number>n</Number>])</Spry.Data.Region.getTokensFromStr>;

		for (<Number>i</Number> = <Number>0</Number>; tokens &amp;&amp; <Boolean><Number>i</Number> &lt; <tokens.length>tokens.length</tokens.length></Boolean>; <Number>i</Number>++)
		{
			if (<Boolean>tokens[<Number>i</Number>].search(<RegExp>/{[^}:]+::[^}]+}/</RegExp>) != -<Number>1</Number></Boolean>)
			{
				var dsName = tokens[<Number>i</Number>].replace(<RegExp>/^\{|::.*\}/g</RegExp>, <String>""</String>);
				var ds = null;
				if (!this.dataSetsForDataRefStrings[dsName])
				{
					try { ds = <eval>eval(dsName)</eval>; } catch (e) { ds = null; }
	
					if (dsName &amp;&amp; ds)
					{
						// The dataSetsForDataRefStrings array serves as both an
						// array of data sets and a hash lookup by name.

						this.dataSetsForDataRefStrings[dsName] = ds;
						this.dataSetsForDataRefStrings[<Number>dsCount</Number>++] = ds;
						this.<String>hasDataRefStrings</String> = <Boolean>true</Boolean>;
					}
				}
			}
		}
	}

	// Set up observers on any data sets our URL depends on.

	for (<Number>i</Number> = <Number>0</Number>; <Boolean><Number>i</Number> &lt; this.dataSetsForDataRefStrings.length</Boolean>; <Number>i</Number>++)
	{
		var ds = this.dataSetsForDataRefStrings[<Number>i</Number>];
		<ds.addObserver>ds.<ds.addObserver>addObserver</ds.addObserver>(this)</ds.addObserver>;
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>attemptLoadData</String> = <Function>function()
{
	// We only want to trigger a load when all of our data sets have data!
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.dataSetsForDataRefStrings.length</Boolean>; <Number>i</Number>++)
	{
		var ds = this.dataSetsForDataRefStrings[<Number>i</Number>];
		if (<ds.getLoadDataRequestIsPending>ds.<ds.getLoadDataRequestIsPending>getLoadDataRequestIsPending</ds.getLoadDataRequestIsPending>()</ds.getLoadDataRequestIsPending> || !<ds.getDataWasLoaded>ds.<ds.getDataWasLoaded>getDataWasLoaded</ds.getDataWasLoaded>()</ds.getDataWasLoaded>)
			return;
	}

	this.loadData();
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>onCurrentRowChanged</String> = <Function>function(ds, data)
{
	this.attemptLoadData();
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>onPostSort</String> = <Function>function(ds, data)
{
	this.attemptLoadData();
}</Function>;
			
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>onDataChanged</String> = <Function>function(ds, data)
{
	this.attemptLoadData();
}</Function>;
			
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>loadData</String> = <Function>function()
{
	if (!this.url || !this.xpath)
		return;

	this.cancelLoadData();

	var url = this.url;
	var postData = this.requestInfo.postData;

	if (this.hasDataRefStrings)
	{
		var <Boolean>allDataSetsReady = <Boolean>true</Boolean></Boolean>;

		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.dataSetsForDataRefStrings.length</Boolean>; <Number>i</Number>++)
		{
			var ds = this.dataSetsForDataRefStrings[<Number>i</Number>];
			if (<ds.getLoadDataRequestIsPending>ds.<ds.getLoadDataRequestIsPending>getLoadDataRequestIsPending</ds.getLoadDataRequestIsPending>()</ds.getLoadDataRequestIsPending>)
				<Boolean>allDataSetsReady</Boolean> = <Boolean>false</Boolean>;
			else if (!<ds.getDataWasLoaded>ds.<ds.getDataWasLoaded>getDataWasLoaded</ds.getDataWasLoaded>()</ds.getDataWasLoaded>)
			{
				// Kick off the load of this data set!
				<ds.loadData>ds.<ds.loadData>loadData</ds.loadData>()</ds.loadData>;
				<Boolean>allDataSetsReady</Boolean> = <Boolean>false</Boolean>;
			}
		}

		// If our data sets aren't ready, just return. We'll
		// get called back to load our data when they are all
		// done.

		if (!<Boolean>allDataSetsReady</Boolean>)
			return;

		url = <Spry.Data.Region.processDataRefString>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.processDataRefString>processDataRefString</Spry.Data.Region.processDataRefString>(null, this.url, this.dataSetsForDataRefStrings)</Spry.Data.Region.processDataRefString>;
		if (!url)
			return;
			
		if (postData &amp;&amp; (typeof <Boolean>postData) == <String>"string"</String></Boolean>)
			postData = <Spry.Data.Region.processDataRefString>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.processDataRefString>processDataRefString</Spry.Data.Region.processDataRefString>(null, postData, this.dataSetsForDataRefStrings)</Spry.Data.Region.processDataRefString>;
	}

	this.notifyObservers(<String>"onPreLoad"</String>);

	this.<String>data</String> = null;
	this.<String>dataWasLoaded</String> = <Boolean>false</Boolean>;
	this.<String>unfilteredData</String> = null;
	this.<String>dataHash</String> = null;
	this.<String>curRowID</String> = <Number>0</Number>;

	// At this point the url should've been processed if it contained any
	// data references. Set the url of the requestInfo structure and pass it
	// to LoadManager.loadData().

	var req = this.requestInfo.clone();
	req.<String>url</String> = url;
	req.<String>postData</String> = postData;

	this.<String>pendingRequest</String> = <Object>new Object</Object>;
	this.pendingRequest.<String>data</String> = <Spry.Data.XMLDataSet.LoadManager.loadData>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.loadData>loadData</Spry.Data.XMLDataSet.LoadManager.loadData>(req, this, this.useCache)</Spry.Data.XMLDataSet.LoadManager.loadData>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>cancelLoadData</String> = <Function>function()
{
	if (this.pendingRequest)
	{
		<Spry.Data.XMLDataSet.LoadManager.cancelLoadData>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<void>cancelLoadData</void>(this.pendingRequest.data, this)</Spry.Data.XMLDataSet.LoadManager.cancelLoadData>;
		this.<String>pendingRequest</String> = null;
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>getURL</String> = <Function>function() { return this.url; }</Function>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>setURL</String> = <Function>function(url, requestOptions)
{
	if (<Boolean>this.url == url</Boolean>)
		return;
	this.<String>url</String> = url;

	if (requestOptions)
		this.requestInfo.extractRequestOptions(requestOptions);

	this.cancelLoadData();
	this.recalculateDataSetDependencies();
	this.<String>dataWasLoaded</String> = <Boolean>false</Boolean>;
}</Function>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>getDocument</String> = <Function>function() { return this.doc; }</Function>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>getXPath</String> = <Function>function() { return this.xpath; }</Function>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>setXPath</String> = <Function>function(path)
{
	if (<Boolean>this.xpath != path</Boolean>)
	{
		this.<String>xpath</String> = path;
		if (this.dataWasLoaded &amp;&amp; this.doc)
			this.setDataFromDoc(this.doc);
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>setDataFromDoc</String> = <Function>function(doc)
{
	this.<String>pendingRequest</String> = null;

	var rs = null;

	rs = <Spry.Utils.getRecordSetFromXMLDoc>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.getRecordSetFromXMLDoc>getRecordSetFromXMLDoc</Spry.Utils.getRecordSetFromXMLDoc>(doc, <Spry.Data.Region.processDataRefString>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.processDataRefString>processDataRefString</Spry.Data.Region.processDataRefString>(null, this.xpath, this.dataSetsForDataRefStrings)</Spry.Data.Region.processDataRefString>)</Spry.Utils.getRecordSetFromXMLDoc>;

	if (!rs)
	{
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Spry.Data.XMLDataSet.setDataFromDoc() failed to create dataSet '"</String> + this.name + <String>"'for '"</String> + this.xpath + <String>"' - "</String> + this.url + <String>"\n"</String>)</Spry.Debug.reportError>;
		return;
	}

	this.<String>doc</String> = <rs.xmlDoc>rs.xmlDoc</rs.xmlDoc>;
	this.<String>data</String> = <rs.data>rs.data</rs.data>;
	this.<String>dataHash</String> = <rs.dataHash>rs.dataHash</rs.dataHash>;
	this.<String>dataWasLoaded</String> = (<Boolean>this.doc != null)</Boolean>;

	// If there is a data filter installed, run it.

	if (this.filterDataFunc)
		this.filterData(this.filterDataFunc, <Boolean>true</Boolean>);

	// If the distinct flag was set, run through all the records in the recordset
	// and toss out any that are duplicates.

	if (this.distinctOnLoad)
		this.distinct();

	// If sortOnLoad was set, sort the data based on the columns
	// specified in sortOnLoad.

	if (this.keepSorted &amp;&amp; this.getSortColumn())
		this.sort(this.lastSortColumns, this.lastSortOrder)
	else if (this.sortOnLoad)
		this.sort(this.sortOnLoad, this.sortOrderOnLoad);

	// If there is a view filter installed, run it.

	if (this.filterFunc)
		this.filter(this.filterFunc, <Boolean>true</Boolean>);

	// The default "current" row is the first row of the data set.
	if (this.data &amp;&amp; <Boolean>this.data.length &gt; <Number>0</Number></Boolean>)
		this.<String>curRowID</String> = this.data[<Number>0</Number>][<String>'ds_RowID'</String>];
	else
		this.<String>curRowID</String> = <Number>0</Number>;

	this.notifyObservers(<String>"onPostLoad"</String>);
	this.notifyObservers(<String>"onDataChanged"</String>);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>onRequestResponse</String> = <Function>function(cachedRequest, req)
{
	this.setDataFromDoc(<cachedRequest.doc>cachedRequest.doc</cachedRequest.doc>);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.prototype>prototype</Spry.Data.XMLDataSet.prototype>.<String>onRequestError</String> = <Function>function(cachedRequest, req)
{
	this.notifyObservers(<String>"onLoadError"</String>, req);
	// Spry.Debug.reportError("Spry.Data.XMLDataSet.LoadManager.CachedRequest.loadDataCallback(" + req.xhRequest.status + ") failed to load: " + req.url + "\n");
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<String>LoadManager</String> = {};
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<String>cache</String> = <Array>[]</Array>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<String>CachedRequest</String> = <Function>function(reqInfo)
{
	<Spry.Utils.Notifier.call>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.Notifier>Notifier</Spry.Utils.Notifier>.<Spry.Utils.Notifier.call>call</Spry.Utils.Notifier.call>(this)</Spry.Utils.Notifier.call>;

	this.<String>reqInfo</String> = reqInfo;
	this.<String>doc</String> = null;
	this.<String>timer</String> = null;
	this.<String>state</String> = <Spry.Data.XMLDataSet.LoadManager.CachedRequest.NOT_LOADED>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.NOT_LOADED</Spry.Data.XMLDataSet.LoadManager.CachedRequest.NOT_LOADED>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<String>prototype</String> = <Spry.Utils.Notifier>new <Spry.Utils.Notifier>Spry.<Spry.Utils>Utils</Spry.Utils>.Notifier</Spry.Utils.Notifier>()</Spry.Utils.Notifier>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>prototype</Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>.<String>constructor</String> = <Spry.Data.XMLDataSet.LoadManager.CachedRequest>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<String>NOT_LOADED</String>      = <Number>1</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<String>LOAD_REQUESTED</String>  = <Number>2</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<String>LOAD_FAILED</String>     = <Number>3</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<String>LOAD_SUCCESSFUL</String> = <Number>4</Number>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>prototype</Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>.<String>loadDataCallback</String> = <Function>function(req)
{
	if (<Boolean><req.xhRequest.readyState>req.<req.xhRequest>xhRequest</req.xhRequest>.readyState</req.xhRequest.readyState> != <Number>4</Number></Boolean>)
		return;

	var <req.xhRequest.responseXML>xmlDoc = <req.xhRequest.responseXML>req.<req.xhRequest>xhRequest</req.xhRequest>.responseXML</req.xhRequest.responseXML></req.xhRequest.responseXML>;

	if (<Boolean><req.xhRequest.status>req.<req.xhRequest>xhRequest</req.xhRequest>.status</req.xhRequest.status> != <Number>200</Number></Boolean>)
	{
		if (<Boolean><req.xhRequest.status>req.<req.xhRequest>xhRequest</req.xhRequest>.status</req.xhRequest.status> == <Number>0</Number></Boolean>)
		{
			// The page that is attempting to load data was probably loaded with
			// a file:// url. Mozilla based browsers will actually provide the complete DOM
			// tree for the data, but IE provides an empty document node so try to parse
			// the xml text manually to create a dom tree we can use.

			if (<req.xhRequest.responseText>req.<req.xhRequest>xhRequest</req.xhRequest>.responseText</req.xhRequest.responseText> &amp;&amp; (!<req.xhRequest.responseXML>xmlDoc</req.xhRequest.responseXML> || !<req.xhRequest.responseXML.firstChild><req.xhRequest.responseXML>xmlDoc</req.xhRequest.responseXML>.firstChild</req.xhRequest.responseXML.firstChild>))
				xmlDoc = <Spry.Utils.stringToXMLDoc>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.stringToXMLDoc>stringToXMLDoc</Spry.Utils.stringToXMLDoc>(<req.xhRequest.responseText>req.<req.xhRequest>xhRequest</req.xhRequest>.responseText</req.xhRequest.responseText>)</Spry.Utils.stringToXMLDoc>;
		}
	}

	if (!xmlDoc  || !<xmlDoc.firstChild>xmlDoc.firstChild</xmlDoc.firstChild> || <Boolean><xmlDoc.firstChild.nodeName>xmlDoc.<xmlDoc.firstChild>firstChild</xmlDoc.firstChild>.nodeName</xmlDoc.firstChild.nodeName> == <String>"parsererror"</String></Boolean>)
	{
		this.<String>state</String> = <Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_FAILED>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.LOAD_FAILED</Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_FAILED>;
		this.notifyObservers(<String>"onRequestError"</String>, req);
		this.observers.<String>length</String> = <Number>0</Number>; // Clear the observers list.
		return;
	}

	this.<String>doc</String> = xmlDoc;
	this.<String>state</String> = <Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_SUCCESSFUL>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.LOAD_SUCCESSFUL</Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_SUCCESSFUL>;

	// Notify all of the cached request's observers!
	this.notifyObservers(<String>"onRequestResponse"</String>, req);

	// Clear the observers list.
	this.observers.<String>length</String> = <Number>0</Number>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>prototype</Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>.<String>loadData</String> = <Function>function()
{
	// IE will synchronously fire our loadDataCallback() during the call
	// to an async Spry.Utils.loadURL() if the data for the url is already
	// in the browser's local cache. This can wreak havoc with complicated master/detail
	// regions that use data sets that have master/detail relationships with other
	// data sets. Our data set logic already handles async data loading nicely so we
	// use a timer to fire off the async Spry.Utils.loadURL() call to insure that any
	// data loading happens asynchronously after this function is finished.

	var self = this;
	this.cancelLoadData();
	this.<String>doc</String> = null;
	this.<String>state</String> = <Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_REQUESTED>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.LOAD_REQUESTED</Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_REQUESTED>;

	var reqInfo = this.reqInfo.clone();
	reqInfo.<String>successCallback</String> = <Function>function(req) { <self.loadDataCallback>self.<self.loadDataCallback>loadDataCallback</self.loadDataCallback>(req)</self.loadDataCallback>; }</Function>;
	reqInfo.<String>errorCallback</String> = <void>reqInfo.successCallback</void>;

	this.<String>timer</String> = <setTimeout>setTimeout(<Function>function()
	{
		self.<String>timer</String> = null;
		<Spry.Utils.loadURL>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.loadURL>loadURL</Spry.Utils.loadURL>(<reqInfo.method>reqInfo.method</reqInfo.method>, <reqInfo.url>reqInfo.url</reqInfo.url>, <reqInfo.async>reqInfo.async</reqInfo.async>, <void>reqInfo.successCallback</void>, reqInfo)</Spry.Utils.loadURL>;
	}</Function>, <Number>0</Number>)</setTimeout>;  
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>prototype</Spry.Data.XMLDataSet.LoadManager.CachedRequest.prototype>.<String>cancelLoadData</String> = <Function>function()
{
	if (<Boolean>this.state == <Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_REQUESTED>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.LOAD_REQUESTED</Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_REQUESTED></Boolean>)
	{
		if (this.timer)
		{
			this.timer.clearTimeout();
			this.<String>timer</String> = null;
		}

		this.<String>doc</String> = null;
		this.<String>state</String> = <Spry.Data.XMLDataSet.LoadManager.CachedRequest.NOT_LOADED>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.NOT_LOADED</Spry.Data.XMLDataSet.LoadManager.CachedRequest.NOT_LOADED>;
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<String>getCacheKey</String> = <Function>function(reqInfo)
{
	return <reqInfo.method>reqInfo.method</reqInfo.method> + <String>"::"</String> + <reqInfo.url>reqInfo.url</reqInfo.url> + <String>"::"</String> + <reqInfo.postData>reqInfo.postData</reqInfo.postData> + <String>"::"</String> + <reqInfo.username>reqInfo.username</reqInfo.username>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<String>loadData</String> = <Function>function(reqInfo, ds, useCache)
{
	if (!reqInfo)
		return null;

	var cacheObj = null;
	var cacheKey = null;

	if (useCache)
	{
		cacheKey = <Spry.Data.XMLDataSet.LoadManager.getCacheKey>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.getCacheKey>getCacheKey</Spry.Data.XMLDataSet.LoadManager.getCacheKey>(reqInfo)</Spry.Data.XMLDataSet.LoadManager.getCacheKey>;
		cacheObj = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.cache>cache</Spry.Data.XMLDataSet.LoadManager.cache>[cacheKey];
	}

	if (cacheObj)
	{
		if (<Boolean><cacheObj.state>cacheObj.state</cacheObj.state> == <Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_REQUESTED>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.LOAD_REQUESTED</Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_REQUESTED></Boolean>)
		{
			if (ds)
				<cacheObj.addObserver>cacheObj.<cacheObj.addObserver>addObserver</cacheObj.addObserver>(ds)</cacheObj.addObserver>;
			return cacheObj;
		}
		else if (<Boolean><cacheObj.state>cacheObj.state</cacheObj.state> == <Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_SUCCESSFUL>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.CachedRequest>CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.LOAD_SUCCESSFUL</Spry.Data.XMLDataSet.LoadManager.CachedRequest.LOAD_SUCCESSFUL></Boolean>)
		{
			// Data is already cached so if we have a data set, trigger an async call
			// that tells it to load its data.
			if (ds)
				<setTimeout>setTimeout(<Function>function() { <ds.setDataFromDoc>ds.<ds.setDataFromDoc>setDataFromDoc</ds.setDataFromDoc>(<cacheObj.doc>cacheObj.doc</cacheObj.doc>)</ds.setDataFromDoc>; }</Function>, <Number>0</Number>)</setTimeout>;
			return cacheObj;
		}
	}

	// We're either loading this url for the first time, or an error occurred when
	// we last tried to load it, or the caller requested a forced load.

	if (!cacheObj)
	{
		<Spry.Data.XMLDataSet.LoadManager.CachedRequest>cacheObj</Spry.Data.XMLDataSet.LoadManager.CachedRequest> = <Spry.Data.XMLDataSet.LoadManager.CachedRequest>new <Spry.Data.XMLDataSet.LoadManager.CachedRequest>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.CachedRequest</Spry.Data.XMLDataSet.LoadManager.CachedRequest>(reqInfo)</Spry.Data.XMLDataSet.LoadManager.CachedRequest>;
		if (useCache)
		{
			Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.cache>cache</Spry.Data.XMLDataSet.LoadManager.cache>[cacheKey] = <Spry.Data.XMLDataSet.LoadManager.CachedRequest>cacheObj</Spry.Data.XMLDataSet.LoadManager.CachedRequest>;

			// Add an observer that will remove the cacheObj from the cache
			// if there is a load request failure.
			<Spry.Data.XMLDataSet.LoadManager.CachedRequest.addObserver><Spry.Data.XMLDataSet.LoadManager.CachedRequest>cacheObj</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<void>addObserver</void>({ onRequestError: <Function>function() { Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<Spry.Data.XMLDataSet.LoadManager.cache>cache</Spry.Data.XMLDataSet.LoadManager.cache>[cacheKey] = undefined; }</Function>})</Spry.Data.XMLDataSet.LoadManager.CachedRequest.addObserver>;
		}
	}

	if (ds)
		<Spry.Data.XMLDataSet.LoadManager.CachedRequest.addObserver><Spry.Data.XMLDataSet.LoadManager.CachedRequest>cacheObj</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<void>addObserver</void>(ds)</Spry.Data.XMLDataSet.LoadManager.CachedRequest.addObserver>;

	<Spry.Data.XMLDataSet.LoadManager.CachedRequest.loadData><Spry.Data.XMLDataSet.LoadManager.CachedRequest>cacheObj</Spry.Data.XMLDataSet.LoadManager.CachedRequest>.<void>loadData</void>()</Spry.Data.XMLDataSet.LoadManager.CachedRequest.loadData>;

	return <Spry.Data.XMLDataSet.LoadManager.CachedRequest>cacheObj</Spry.Data.XMLDataSet.LoadManager.CachedRequest>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.XMLDataSet>XMLDataSet</Spry.Data.XMLDataSet>.<Spry.Data.XMLDataSet.LoadManager>LoadManager</Spry.Data.XMLDataSet.LoadManager>.<String>cancelLoadData</String> = <Function>function(cacheObj, ds)
{
	if (cacheObj)
	{
		if (ds)
			<cacheObj.removeObserver>cacheObj.<cacheObj.removeObserver>removeObserver</cacheObj.removeObserver>(ds)</cacheObj.removeObserver>;
		else
			<cacheObj.cancelLoadData>cacheObj.<cacheObj.cancelLoadData>cancelLoadData</cacheObj.cancelLoadData>()</cacheObj.cancelLoadData>;
	}
}</Function>;

//////////////////////////////////////////////////////////////////////
//
// Spry.Data.Region
//
//////////////////////////////////////////////////////////////////////
 
Spry.<Spry.Data>Data</Spry.Data>.<String>Region</String> = <Function>function(regionNode, name, isDetailRegion, data, dataSets, regionStates, hasBehaviorAttributes)
{
	this.<String>regionNode</String> = regionNode;
	this.<String>name</String> = name;
	this.<String>isDetailRegion</String> = isDetailRegion;
	this.<String>data</String> = data;
	this.<String>dataSets</String> = dataSets;
	this.<String>hasBehaviorAttributes</String> = hasBehaviorAttributes;
	this.<String>tokens</String> = null;
	this.<String>currentState</String> = null;
	this.<String>states</String> = { ready: <Boolean>true</Boolean> };

	<Spry.Utils.setOptions>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>setOptions</void>(this.states, regionStates)</Spry.Utils.setOptions>;

	// Add the region as an observer to the dataSet!
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.dataSets.length</Boolean>; <Number>i</Number>++)
	{
		var ds = this.dataSets[<Number>i</Number>];

		try 
		{
			if (ds)
				<ds.addObserver>ds.<ds.addObserver>addObserver</ds.addObserver>(this)</ds.addObserver>;
		}
		catch(e) { <Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Failed to add '"</String> + this.name + <String>"' as a dataSet observer!\n"</String>)</Spry.Debug.reportError>; }
	}
}</Function>; // End of Spry.Data.Region() constructor.

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>hiddenRegionClassName</String> = <String>"SpryHiddenRegion"</String>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>evenRowClassName</String> = <String>"even"</String>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>oddRowClassName</String> = <String>"odd"</String>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>notifiers</String> = {};

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>addObserver</String> = <Function>function(regionID, observer)
{
	var n = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.notifiers>notifiers</Spry.Data.Region.notifiers>[regionID];
	if (!n)
	{
		<Spry.Utils.Notifier>n</Spry.Utils.Notifier> = <Spry.Utils.Notifier>new <Spry.Utils.Notifier>Spry.<Spry.Utils>Utils</Spry.Utils>.Notifier</Spry.Utils.Notifier>()</Spry.Utils.Notifier>;
		Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.notifiers>notifiers</Spry.Data.Region.notifiers>[regionID] = <Spry.Utils.Notifier>n</Spry.Utils.Notifier>;
	}
	<Spry.Utils.Notifier.addObserver><Spry.Utils.Notifier>n</Spry.Utils.Notifier>.<void>addObserver</void>(observer)</Spry.Utils.Notifier.addObserver>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>removeObserver</String> = <Function>function(regionID, observer)
{
	var n = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.notifiers>notifiers</Spry.Data.Region.notifiers>[regionID];
	if (n)
		<n.removeObserver>n.<n.removeObserver>removeObserver</n.removeObserver>(observer)</n.removeObserver>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>notifyObservers</String> = <Function>function(methodName, regionID)
{
	var n = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.notifiers>notifiers</Spry.Data.Region.notifiers>[regionID];
	if (n)
		<n.notifyObservers>n.<n.notifyObservers>notifyObservers</n.notifyObservers>(methodName, { regionID: regionID })</n.notifyObservers>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>RS_Error</String> = <Number>0x01</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>RS_LoadingData</String> = <Number>0x02</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>RS_PreUpdate</String> = <Number>0x04</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>RS_PostUpdate</String> = <Number>0x08</Number>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>getState</String> = <Function>function()
{
	return this.currentState;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>setState</String> = <Function>function(stateName, suppressNotfications)
{
	this.<String>currentState</String> = stateName;

	// If the region has content that is specific to this
	// state, regenerate the region so that its markup is updated.

	if (this.states[stateName])
	{
		if (!suppressNotfications)
			<Spry.Data.Region.notifyObservers>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<void>notifyObservers</void>(<String>"onPreUpdate"</String>, this.name)</Spry.Data.Region.notifyObservers>;
	
		// Make the region transform the xml data. The result is
		// a string that we need to parse and insert into the document.
		var str = this.transform();
	
		// Clear out any previous transformed content.
		// this.clearContent();
	
		if (<Spry.Data.Region.debug>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.debug</Spry.Data.Region.debug>)
			<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"&lt;hr /&gt;Generated region markup for '"</String> + this.name + <String>"':&lt;br /&gt;&lt;br /&gt;"</String> + <Spry.Utils.encodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.encodeEntities>encodeEntities</Spry.Utils.encodeEntities>(str)</Spry.Utils.encodeEntities>)</Spry.Debug.trace>;

		// Now insert the new transformed content into the document.
		this.regionNode.<String>innerHTML</String> = str;
	
		// Now run through the content looking for attributes
		// that tell us what behaviors to attach to each element.
		if (this.hasBehaviorAttributes)
			this.attachBehaviors();
	
		if (!suppressNotfications)
			<Spry.Data.Region.notifyObservers>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<void>notifyObservers</void>(<String>"onPostUpdate"</String>, this.name)</Spry.Data.Region.notifyObservers>;
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>getDataSets</String> = <Function>function()
{
	return this.dataSets;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>addDataSet</String> = <Function>function(aDataSet)
{
	if (!aDataSet)
		return;

	if (!this.dataSets)
		this.<String>dataSets</String> = <Array>new Array</Array>;

	// Check to see if the data set is already in our list.

	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.dataSets.length</Boolean>; <Number>i</Number>++)
	{
		if (<Boolean>this.dataSets[<Number>i</Number>] == aDataSet</Boolean>)
			return; // It's already in our list!
	}

	this.dataSets.push(aDataSet);
	<aDataSet.addObserver>aDataSet.<aDataSet.addObserver>addObserver</aDataSet.addObserver>(this)</aDataSet.addObserver>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>removeDataSet</String> = <Function>function(aDataSet)
{
	if (!aDataSet || this.dataSets)
		return;

	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.dataSets.length</Boolean>; <Number>i</Number>++)
	{
		if (<Boolean>this.dataSets[<Number>i</Number>] == aDataSet</Boolean>)
		{
			this.dataSets.splice(<Number>i</Number>, <Number>1</Number>);
			<aDataSet.removeObserver>aDataSet.<aDataSet.removeObserver>removeObserver</aDataSet.removeObserver>(this)</aDataSet.removeObserver>;
			return;
		}
	}
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>onPreLoad</String> = <Function>function(dataSet)
{
	if (<Boolean>this.currentState != <String>"loading"</String></Boolean>)
		this.setState(<String>"loading"</String>);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>onLoadError</String> = <Function>function(dataSet)
{
	if (<Boolean>this.currentState != <String>"error"</String></Boolean>)
		this.setState(<String>"error"</String>);
	<Spry.Data.Region.notifyObservers>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<void>notifyObservers</void>(<String>"onError"</String>, this.name)</Spry.Data.Region.notifyObservers>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>onCurrentRowChanged</String> = <Function>function(dataSet, data)
{
	if (this.isDetailRegion)
		this.updateContent();
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>onPostSort</String> = <Function>function(dataSet, data)
{
	this.updateContent();
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>onDataChanged</String> = <Function>function(dataSet, data)
{
	this.updateContent();
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>enableBehaviorAttributes</String> = <Boolean>true</Boolean>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>behaviorAttrs</String> = {};

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.behaviorAttrs>behaviorAttrs</Spry.Data.Region.behaviorAttrs>[<String>"spry:select"</String>] =
{
	attach: <Function>function(node, value)
	{
		var selectGroupName = null;
		try { selectGroupName = node.<node.attributes>attributes</node.attributes>.<node.attributes.getNamedItem><node.attributes.getNamedItem>getNamedItem</node.attributes.getNamedItem>(<String>"spry:selectgroup"</String></node.attributes.getNamedItem>).value; } catch (e) {}
		if (!selectGroupName)
			<String>selectGroupName</String> = <String>"default"</String>;

		<Spry.Utils.addEventListener>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>addEventListener</void>(node, <String>"click"</String>, <Function>function(<Event>event</Event>) { <Spry.Utils.SelectionManager.select>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<void>select</void>(selectGroupName, node, value)</Spry.Utils.SelectionManager.select>; }</Function>, <Boolean>false</Boolean>)</Spry.Utils.addEventListener>;
		
		if (<node.attributes.getNamedItem>node.<node.attributes>attributes</node.attributes>.<node.attributes.getNamedItem>getNamedItem</node.attributes.getNamedItem>(<String>"spry:selected"</String>)</node.attributes.getNamedItem>)
			<Spry.Utils.SelectionManager.select>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.SelectionManager>SelectionManager</Spry.Utils.SelectionManager>.<void>select</void>(<String>selectGroupName</String>, node, value)</Spry.Utils.SelectionManager.select>;
	}</Function>
};

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.behaviorAttrs>behaviorAttrs</Spry.Data.Region.behaviorAttrs>[<String>"spry:hover"</String>] =
{
	attach: <Function>function(node, value)
	{
		<Spry.Utils.addEventListener>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>addEventListener</void>(node, <String>"mouseover"</String>, <Function>function(<Event>event</Event>){ <Spry.Utils.addClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>addClassName</void>(node, value)</Spry.Utils.addClassName>; }</Function>, <Boolean>false</Boolean>)</Spry.Utils.addEventListener>;
		<Spry.Utils.addEventListener>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>addEventListener</void>(node, <String>"mouseout"</String>, <Function>function(<Event>event</Event>){ <Spry.Utils.removeClassName>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>removeClassName</void>(node, value)</Spry.Utils.removeClassName>; }</Function>, <Boolean>false</Boolean>)</Spry.Utils.addEventListener>;
	}</Function>
};

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>attachBehaviors</String> = <Function>function()
{
	<Spry.Utils.getNodesByFunc>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.getNodesByFunc>getNodesByFunc</Spry.Utils.getNodesByFunc>(this.regionNode, <Function>function(node)
	{
		if (!node)
			return <Boolean>false</Boolean>;
		try
		{
			var <node.attributes>attrs = <node.attributes>node.attributes</node.attributes></node.attributes>;
			for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <node.attributes.length><node.attributes>attrs</node.attributes>.length</node.attributes.length></Boolean>; <Number>i</Number>++)
			{
				var attr = <node.attributes>attrs</node.attributes>[<Number>i</Number>];
				var behavior = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.behaviorAttrs>behaviorAttrs</Spry.Data.Region.behaviorAttrs>[<attr.nodeName.toLowerCase>attr.<attr.nodeName>nodeName</attr.nodeName>.<attr.nodeName.toLowerCase>toLowerCase</attr.nodeName.toLowerCase>()</attr.nodeName.toLowerCase>];
				if (behavior)
					<behavior.attach>behavior.<behavior.attach>attach</behavior.attach>(node, <attr.value>attr.value</attr.value>)</behavior.attach>;
			}
		}
		catch(e)
		{
		}

		return <Boolean>false</Boolean>;
	}</Function>)</Spry.Utils.getNodesByFunc>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>updateContent</String> = <Function>function()
{
	var <Boolean>allDataSetsReady = <Boolean>true</Boolean></Boolean>;

	var dsArray = this.getDataSets();

	if (!dsArray || <Boolean><dsArray.length>dsArray.length</dsArray.length> &lt; <Number>1</Number></Boolean>)
	{
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"updateContent(): Region '"</String> + this.name + <String>"' has no data set!\n"</String>)</Spry.Debug.reportError>;
		return;
	}

	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <dsArray.length>dsArray.length</dsArray.length></Boolean>; <Number>i</Number>++)
	{
		var ds = dsArray[<Number>i</Number>];

		if (ds)
		{
			if (<ds.getLoadDataRequestIsPending>ds.<ds.getLoadDataRequestIsPending>getLoadDataRequestIsPending</ds.getLoadDataRequestIsPending>()</ds.getLoadDataRequestIsPending>)
				<Boolean>allDataSetsReady</Boolean> = <Boolean>false</Boolean>;
			else if (!<ds.getDataWasLoaded>ds.<ds.getDataWasLoaded>getDataWasLoaded</ds.getDataWasLoaded>()</ds.getDataWasLoaded>)
			{
				// Kick off the loading of the data if it hasn't happened yet.
				<ds.loadData>ds.<ds.loadData>loadData</ds.loadData>()</ds.loadData>;
				<Boolean>allDataSetsReady</Boolean> = <Boolean>false</Boolean>;
			}
		}
	}

	if (!<Boolean>allDataSetsReady</Boolean>)
	{
		<Spry.Data.Region.notifyObservers>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<void>notifyObservers</void>(<String>"onLoadingData"</String>, this.name)</Spry.Data.Region.notifyObservers>;

		// Just return, this method will get called again automatically
		// as each data set load completes!
		return;
	}

	this.setState(<String>"ready"</String>);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>clearContent</String> = <Function>function()
{
	<Spry.Utils.removeAllChildren>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>removeAllChildren</void>(this.regionNode)</Spry.Utils.removeAllChildren>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>processContentPI</String> = <Function>function(inStr)
{
	var <String>outStr = <String>""</String></String>;
	var <RegExp>regexp = <RegExp>/&lt;!--\s*&lt;\/?spry:content\s*[^&gt;]*&gt;\s*--&gt;/mg</RegExp></RegExp>;
	var <Number>searchStartIndex = <Number>0</Number></Number>;
	var <Number>processingContentTag = <Number>0</Number></Number>;

	while (<inStr.length>inStr.length</inStr.length>)
	{
		var results = <RegExp.exec><RegExp>regexp</RegExp>.<RegExp.exec>exec</RegExp.exec>(inStr)</RegExp.exec>;
		if (!results || !results[<Number>0</Number>])
		{
			outStr += <inStr.substr>inStr.<inStr.substr>substr</inStr.substr>(<Number>searchStartIndex</Number>, <inStr.length>inStr.length</inStr.length> - <Number>searchStartIndex</Number>)</inStr.substr>;
			break;
		}

		if (!<Number>processingContentTag</Number> &amp;&amp; <Boolean><results.index>results.index</results.index> != <Number>searchStartIndex</Number></Boolean>)
		{
			// We found a match but it's not at the start of the inStr.
			// Create a string token for everything that precedes the match.
			outStr += <inStr.substr>inStr.<inStr.substr>substr</inStr.substr>(<Number>searchStartIndex</Number>, <results.index>results.index</results.index> - <Number>searchStartIndex</Number>)</inStr.substr>;
		}

		if (<Boolean>results[<Number>0</Number>].search(<RegExp>/&lt;\//</RegExp>) != -<Number>1</Number></Boolean>)
		{
			--<Number>processingContentTag</Number>;
			if (<Number>processingContentTag</Number>)
				<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Nested spry:content regions are not allowed!\n"</String>)</Spry.Debug.reportError>;
		}
		else
		{
			++<Number>processingContentTag</Number>;
			var dataRefStr = results[<Number>0</Number>].replace(<RegExp>/.*\bdataref="/</RegExp>, <String>""</String>);
			outStr += <dataRefStr.replace>dataRefStr.<dataRefStr.replace>replace</dataRefStr.replace>(<RegExp>/".*$/</RegExp>, <String>""</String>)</dataRefStr.replace>;
		}
		
		<RegExp.lastIndex>searchStartIndex</RegExp.lastIndex> = <RegExp.lastIndex><RegExp>regexp</RegExp>.lastIndex</RegExp.lastIndex>;
	}

	return outStr;
}</Function>

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>tokenizeData</String> = <Function>function(dataStr)
{
	// If there is no data, there's nothing to do.
	if (!dataStr)
		return null;

	var <Spry.Data.Region.Token>rootToken = <Spry.Data.Region.Token>new <Spry.Data.Region.Token>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.Token</Spry.Data.Region.Token>(<Spry.Data.Region.Token.LIST_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.LIST_TOKEN</Spry.Data.Region.Token.LIST_TOKEN>, null, null, null)</Spry.Data.Region.Token></Spry.Data.Region.Token>;
	var <Array>tokenStack = <Array>new Array</Array></Array>;
	var parseStr = <Spry.Data.Region.processContentPI>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.processContentPI>processContentPI</Spry.Data.Region.processContentPI>(dataStr)</Spry.Data.Region.processContentPI>;

	<Array.push><Array>tokenStack</Array>.<Array.push>push</Array.push>(<Spry.Data.Region.Token>rootToken</Spry.Data.Region.Token>)</Array.push>;

	// Create a regular expression that will match one of the following:
	//
	//   &lt;spry:repeat select="regionName" test="true"&gt;
	//   &lt;/spry:repeat&gt;
	//   {valueReference}
	var <RegExp>regexp = <RegExp>/((&lt;!--\s*){0,1}&lt;\/{0,1}spry:[^&gt;]+&gt;(\s*--&gt;){0,1})|((\{|%7[bB])[^\}\s%]+(\}|%7[dD]))/mg</RegExp></RegExp>;
	var <Number>searchStartIndex = <Number>0</Number></Number>;

	while(<parseStr.length>parseStr.length</parseStr.length>)
	{
		var results = <RegExp.exec><RegExp>regexp</RegExp>.<RegExp.exec>exec</RegExp.exec>(parseStr)</RegExp.exec>;
		var token = null;
		
		if (!results || !results[<Number>0</Number>])
		{
			// If we get here, the rest of the parseStr should be
			// just a plain string. Create a token for it and then
			// break out of the list.
			var str = <parseStr.substr>parseStr.<parseStr.substr>substr</parseStr.substr>(<Number>searchStartIndex</Number>, <parseStr.length>parseStr.length</parseStr.length> - <Number>searchStartIndex</Number>)</parseStr.substr>;
			<Spry.Data.Region.Token>token</Spry.Data.Region.Token> = <Spry.Data.Region.Token>new <Spry.Data.Region.Token>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.Token</Spry.Data.Region.Token>(<Spry.Data.Region.Token.STRING_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.STRING_TOKEN</Spry.Data.Region.Token.STRING_TOKEN>, null, str, str)</Spry.Data.Region.Token>;
			<Array>tokenStack</Array>[<Array.length><Array>tokenStack</Array>.length</Array.length> - <Number>1</Number>].addChild(<Spry.Data.Region.Token>token</Spry.Data.Region.Token>);
			break;
		}

		if (<Boolean><results.index>results.index</results.index> != <Number>searchStartIndex</Number></Boolean>)
		{
			// We found a match but it's not at the start of the parseStr.
			// Create a string token for everything that precedes the match.
			var str = <parseStr.substr>parseStr.<parseStr.substr>substr</parseStr.substr>(<Number>searchStartIndex</Number>, <results.index>results.index</results.index> - <Number>searchStartIndex</Number>)</parseStr.substr>;
			<Spry.Data.Region.Token>token</Spry.Data.Region.Token> = <Spry.Data.Region.Token>new <Spry.Data.Region.Token>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.Token</Spry.Data.Region.Token>(<Spry.Data.Region.Token.STRING_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.STRING_TOKEN</Spry.Data.Region.Token.STRING_TOKEN>, null, str, str)</Spry.Data.Region.Token>;
			<Array>tokenStack</Array>[<Array.length><Array>tokenStack</Array>.length</Array.length> - <Number>1</Number>].addChild(<Spry.Data.Region.Token>token</Spry.Data.Region.Token>);
		}

		// We found a string that needs to be turned into a token. Create a token
		// for it and then update parseStr for the next iteration.
		if (<Boolean>results[<Number>0</Number>].search(<RegExp>/^({|%7[bB])/</RegExp>) != -<Number>1</Number></Boolean> /* results[0].charAt(0) == '{' */)
		{
			var valueName = results[<Number>0</Number>];
			var regionStr = results[<Number>0</Number>];
			
			// Strip off brace and url encode brace chars inside the valueName.

			valueName = <valueName.replace>valueName.<valueName.replace>replace</valueName.replace>(<RegExp>/^({|%7[bB])/</RegExp>, <String>""</String>)</valueName.replace>;
			valueName = <valueName.replace>valueName.<valueName.replace>replace</valueName.replace>(<RegExp>/(}|%7[dD])$/</RegExp>, <String>""</String>)</valueName.replace>;

			// Check to see if our value begins with the name of a data set.
			// For example: {dataSet:tokenValue}. If it is, we need to save
			// the data set name so we know which data set to use to get the
			// value for the token during the region transform.

			var dataSetName = null;
			var splitArray = <valueName.split>valueName.<valueName.split>split</valueName.split>(<RegExp>/::/</RegExp>)</valueName.split>;

			if (<Boolean><splitArray.length>splitArray.length</splitArray.length> &gt; <Number>1</Number></Boolean>)
			{
				dataSetName = splitArray[<Number>0</Number>];
				valueName = splitArray[<Number>1</Number>];
			}

			// Convert any url encoded braces to regular brace chars.

			regionStr = <regionStr.replace>regionStr.<regionStr.replace>replace</regionStr.replace>(<RegExp>/^%7[bB]/</RegExp>, <String>"{"</String>)</regionStr.replace>;
			regionStr = <regionStr.replace>regionStr.<regionStr.replace>replace</regionStr.replace>(<RegExp>/%7[dD]$/</RegExp>, <String>"}"</String>)</regionStr.replace>;

			// Now create a token for the placeholder.

			<Spry.Data.Region.Token>token</Spry.Data.Region.Token> = <Spry.Data.Region.Token>new <Spry.Data.Region.Token>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.Token</Spry.Data.Region.Token>(<Spry.Data.Region.Token.VALUE_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.VALUE_TOKEN</Spry.Data.Region.Token.VALUE_TOKEN>, dataSetName, valueName, <String>new String(regionStr)</String>)</Spry.Data.Region.Token>;
			<Array>tokenStack</Array>[<Array.length><Array>tokenStack</Array>.length</Array.length> - <Number>1</Number>].addChild(<Spry.Data.Region.Token>token</Spry.Data.Region.Token>);
		}
		else if (<Boolean>results[<Number>0</Number>].charAt(<Number>0</Number>) == <String>'&lt;'</String></Boolean>)
		{
			// Extract out the name of the processing instruction.
			var piName = results[<Number>0</Number>].replace(<RegExp>/^(&lt;!--\s*){0,1}&lt;\/?/</RegExp>, <String>""</String>);
			piName = <piName.replace>piName.<piName.replace>replace</piName.replace>(<RegExp>/&gt;(\s*--&gt;){0,1}|\s.*$/</RegExp>, <String>""</String>)</piName.replace>;
			
			if (<Boolean>results[<Number>0</Number>].search(<RegExp>/&lt;\//</RegExp>) != -<Number>1</Number></Boolean> /* results[0].charAt(1) == '/' */)
			{
				// We found a processing instruction close tag. Pop the top of the
				// token stack!
				//
				// XXX: We need to make sure that the close tag name matches the one
				//      on the top of the token stack!
				if (<Boolean><Array>tokenStack</Array>[<Array.length><Array>tokenStack</Array>.length</Array.length> - <Number>1</Number>].tokenType != <Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.PROCESSING_INSTRUCTION_TOKEN</Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN></Boolean>)
				{
					<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Invalid processing instruction close tag: "</String> + piName + <String>" -- "</String> + results[<Number>0</Number>] + <String>"\n"</String>)</Spry.Debug.reportError>;
					return null;
				}

				<Array.pop><Array>tokenStack</Array>.<Array.pop>pop</Array.pop>()</Array.pop>;
			}
			else
			{
				// Create the processing instruction token, add it as a child of the token
				// at the top of the token stack, and then push it on the stack so that it
				// becomes the parent of any tokens between it and its close tag.

				var piDesc = Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[piName];

				if (piDesc)
				{
					var dataSet = null;

					var <String>selectedDataSetName = <String>""</String></String>;
					if (<Boolean>results[<Number>0</Number>].search(<RegExp>/^.*\bselect=\"/</RegExp>) != -<Number>1</Number></Boolean>)
					{
						selectedDataSetName = results[<Number>0</Number>].replace(<RegExp>/^.*\bselect=\"/</RegExp>, <String>""</String>);
						selectedDataSetName = <selectedDataSetName.replace>selectedDataSetName.<selectedDataSetName.replace>replace</selectedDataSetName.replace>(<RegExp>/".*$/</RegExp>, <String>""</String>)</selectedDataSetName.replace>;
	
						if (selectedDataSetName)
						{
							try
							{
								dataSet = <eval>eval(selectedDataSetName)</eval>;
							}
							catch (e)
							{
								<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Caught exception in tokenizeData() while trying to retrieve data set ("</String> + selectedDataSetName + <String>"): "</String> + e + <String>"\n"</String>)</Spry.Debug.reportError>;
								dataSet = null;
								<String>selectedDataSetName</String> = <String>""</String>;
							}
						}
					}

					// Check if the repeat has a test attribute.
					var jsExpr = null;
					if (<Boolean>results[<Number>0</Number>].search(<RegExp>/^.*\btest=\"/</RegExp>) != -<Number>1</Number></Boolean>)
					{
						jsExpr = results[<Number>0</Number>].replace(<RegExp>/^.*\btest=\"/</RegExp>, <String>""</String>);
						jsExpr = <jsExpr.replace>jsExpr.<jsExpr.replace>replace</jsExpr.replace>(<RegExp>/".*$/</RegExp>, <String>""</String>)</jsExpr.replace>;
						jsExpr = <Spry.Utils.decodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.decodeEntities>decodeEntities</Spry.Utils.decodeEntities>(jsExpr)</Spry.Utils.decodeEntities>;
					}

					// Check if the instruction has a state name specified.
					var regionState = null;
					if (<Boolean>results[<Number>0</Number>].search(<RegExp>/^.*\bname=\"/</RegExp>) != -<Number>1</Number></Boolean>)
					{
						regionState = results[<Number>0</Number>].replace(<RegExp>/^.*\bname=\"/</RegExp>, <String>""</String>);
						regionState = <regionState.replace>regionState.<regionState.replace>replace</regionState.replace>(<RegExp>/".*$/</RegExp>, <String>""</String>)</regionState.replace>;
						regionState = <Spry.Utils.decodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.decodeEntities>decodeEntities</Spry.Utils.decodeEntities>(regionState)</Spry.Utils.decodeEntities>;
					}

					var <Spry.Data.Region.Token.PIData>piData = <Spry.Data.Region.Token.PIData>new <Spry.Data.Region.Token.PIData>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.PIData</Spry.Data.Region.Token.PIData>(piName, <String>selectedDataSetName</String>, jsExpr, regionState)</Spry.Data.Region.Token.PIData></Spry.Data.Region.Token.PIData>;

					<Spry.Data.Region.Token>token</Spry.Data.Region.Token> = <Spry.Data.Region.Token>new <Spry.Data.Region.Token>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.Token</Spry.Data.Region.Token>(<Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.PROCESSING_INSTRUCTION_TOKEN</Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN>, dataSet, <Spry.Data.Region.Token.PIData>piData</Spry.Data.Region.Token.PIData>, <String>new String(results[<Number>0</Number>])</String>)</Spry.Data.Region.Token>;

					<Array>tokenStack</Array>[<Array.length><Array>tokenStack</Array>.length</Array.length> - <Number>1</Number>].addChild(<Spry.Data.Region.Token>token</Spry.Data.Region.Token>);
					<Array.push><Array>tokenStack</Array>.<Array.push>push</Array.push>(<Spry.Data.Region.Token>token</Spry.Data.Region.Token>)</Array.push>;
				}
				else
				{
					<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Unsupported region processing instruction: "</String> + results[<Number>0</Number>] + <String>"\n"</String>)</Spry.Debug.reportError>;
					return null;
				}
			}
		}
		else
		{
			<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Invalid region token: "</String> + results[<Number>0</Number>] + <String>"\n"</String>)</Spry.Debug.reportError>;
			return null;
		}

		<RegExp.lastIndex>searchStartIndex</RegExp.lastIndex> = <RegExp.lastIndex><RegExp>regexp</RegExp>.lastIndex</RegExp.lastIndex>;
	}

	return <Spry.Data.Region.Token>rootToken</Spry.Data.Region.Token>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>processTokenChildren</String> = <Function>function(token, processContext)
{
	// The use of an array to gather the strings returned from processing
	// the child tokens is actually a performance enhancement for IE.
	// The original code:
	//
	//     for (var i = 0; i &lt; token.children.length; i++)
	//       outputStr += this.processTokens(token.children[i], processContext);
	//
	// seemed to cause an n-square problem in IE. Using an array with
	// a final join reduced one of our test cases (SelectExample.html) from over
	// a minute to about 15 seconds.
	
	var <Array>strArr = [ <Array><String>""</String> ]</Array></Array>;
	var <token.children.length>len = <token.children.length>token.<token.children>children</token.children>.length</token.children.length></token.children.length>;
	var <token.children>children = <token.children>token.children</token.children></token.children>;
	
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <token.children.length>len</token.children.length></Boolean>; <Number>i</Number>++)
		<Array.push><Array>strArr</Array>.<Array.push>push</Array.push>(this.processTokens(<token.children>children</token.children>[<Number>i</Number>], processContext))</Array.push>;

	return <Array.join><Array>strArr</Array>.<Array.join>join</Array.join>(<String>""</String>)</Array.join>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>processTokens</String> = <Function>function(token, processContext)
{
	if (!processContext)
	{
		<Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext> = <Spry.Data.Region.ProcessingContext>new <Spry.Data.Region.ProcessingContext>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.ProcessingContext</Spry.Data.Region.ProcessingContext>(this)</Spry.Data.Region.ProcessingContext>;
		if (!<Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>)
			return <String>""</String>;
	}

	var <String>outputStr = <String>""</String></String>;
	var <Number>i = <Number>0</Number></Number>;

	switch(<token.tokenType>token.tokenType</token.tokenType>)
	{
		case <Spry.Data.Region.Token.LIST_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.LIST_TOKEN</Spry.Data.Region.Token.LIST_TOKEN>:
			outputStr += this.processTokenChildren(token, <Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>);
			break;
		case <Spry.Data.Region.Token.STRING_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.STRING_TOKEN</Spry.Data.Region.Token.STRING_TOKEN>:
			outputStr += <token.data>token.data</token.data>;
			break;
		case <Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.PROCESSING_INSTRUCTION_TOKEN</Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN>:
			if (<Boolean><token.data.name>token.<token.data>data</token.data>.name</token.data.name> == <String>"spry:repeat"</String></Boolean>)
			{
				var dataSet = null;

				if (<token.dataSet>token.dataSet</token.dataSet>)
					<token.dataSet>dataSet</token.dataSet> = <token.dataSet>token.dataSet</token.dataSet>;
				else
					dataSet = this.dataSets[<Number>0</Number>];

				if (dataSet)
				{
					var dsContext = <Spry.Data.Region.ProcessingContext.getDataSetContext><Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>.<Spry.Data.Region.ProcessingContext.getDataSetContext>getDataSetContext</Spry.Data.Region.ProcessingContext.getDataSetContext>(dataSet)</Spry.Data.Region.ProcessingContext.getDataSetContext>;
					if (!dsContext)
					{
						<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"processTokens() failed to get a data set context!\n"</String>)</Spry.Debug.reportError>;
						break;
					}

					var numRows = <dsContext.getNumRows>dsContext.<dsContext.getNumRows>getNumRows</dsContext.getNumRows>()</dsContext.getNumRows>;
					var dataSetRows = <dataSet.getData>dataSet.<dataSet.getData>getData</dataSet.getData>()</dataSet.getData>;
					<dsContext.pushState>dsContext.<dsContext.pushState>pushState</dsContext.pushState>()</dsContext.pushState>;

					for (<Number>i</Number> = <Number>0</Number>; <Boolean><Number>i</Number> &lt; numRows</Boolean>; <Number>i</Number>++)
					{
						<dsContext.setRowIndex>dsContext.<dsContext.setRowIndex>setRowIndex</dsContext.setRowIndex>(<Number>i</Number>)</dsContext.setRowIndex>;
						var <Boolean>testVal = <Boolean>true</Boolean></Boolean>;
						if (<token.data.jsExpr>token.<token.data>data</token.data>.jsExpr</token.data.jsExpr>)
						{
							var jsExpr = <Spry.Data.Region.processDataRefString>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.processDataRefString>processDataRefString</Spry.Data.Region.processDataRefString>(<Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>, <token.data.jsExpr>token.<token.data>data</token.data>.jsExpr</token.data.jsExpr>, null, <Boolean>true</Boolean>)</Spry.Data.Region.processDataRefString>;
							try { testVal = <Spry.Utils.eval>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.eval>eval</Spry.Utils.eval>(jsExpr)</Spry.Utils.eval>; }
							catch(e)
							{
								<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"Caught exception in Spry.Data.Region.prototype.processTokens while evaluating: "</String> + jsExpr + <String>"\n    Exception:"</String> + e + <String>"\n"</String>)</Spry.Debug.trace>;
								<Boolean>testVal</Boolean> = <Boolean>true</Boolean>;
							}
						}

						if (<Boolean>testVal</Boolean>)
							outputStr += this.processTokenChildren(token, <Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>);
					}

					<dsContext.popState>dsContext.<dsContext.popState>popState</dsContext.popState>()</dsContext.popState>;
				}
			}
			else if (<Boolean><token.data.name>token.<token.data>data</token.data>.name</token.data.name> == <String>"spry:if"</String></Boolean>)
			{
				var <Boolean>testVal = <Boolean>true</Boolean></Boolean>;
				
				if (<token.data.jsExpr>token.<token.data>data</token.data>.jsExpr</token.data.jsExpr>)
				{
					var jsExpr = <Spry.Data.Region.processDataRefString>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.processDataRefString>processDataRefString</Spry.Data.Region.processDataRefString>(<Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>, <token.data.jsExpr>token.<token.data>data</token.data>.jsExpr</token.data.jsExpr>, null, <Boolean>true</Boolean>)</Spry.Data.Region.processDataRefString>;

					try { testVal = <Spry.Utils.eval>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.eval>eval</Spry.Utils.eval>(jsExpr)</Spry.Utils.eval>; }
					catch(e)
					{
						<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"Caught exception in Spry.Data.Region.prototype.processTokens while evaluating: "</String> + jsExpr + <String>"\n    Exception:"</String> + e + <String>"\n"</String>)</Spry.Debug.trace>;
						<Boolean>testVal</Boolean> = <Boolean>true</Boolean>;
					}
				}
	
				if (<Boolean>testVal</Boolean>)
					outputStr += this.processTokenChildren(token, <Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>);
			}
			else if (<Boolean><token.data.name>token.<token.data>data</token.data>.name</token.data.name> == <String>"spry:choose"</String></Boolean>)
			{
				var defaultChild = null;
				var childToProcess = null;
				var <Boolean>testVal = <Boolean>false</Boolean></Boolean>;
				var <Number>j = <Number>0</Number></Number>;

				// All of the children of the spry:choose token should be of the type spry:when or spry:default.
				// Run through all of the spry:when children and see if any of their test expressions return true.
				// If one does, then process its children tokens. If none of the test expressions return true,
				// process the spry:default token's children, if it exists.

				for (<Number>j</Number> = <Number>0</Number>; <Boolean><Number>j</Number> &lt; <token.children.length>token.<token.children>children</token.children>.length</token.children.length></Boolean>; <Number>j</Number>++)
				{
					var child = token.<token.children>children</token.children>[<Number>j</Number>];
					if (<Boolean><child.tokenType>child.tokenType</child.tokenType> == <Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.PROCESSING_INSTRUCTION_TOKEN</Spry.Data.Region.Token.PROCESSING_INSTRUCTION_TOKEN></Boolean>)
					{
						if (<Boolean><child.data.name>child.<child.data>data</child.data>.name</child.data.name> == <String>"spry:when"</String></Boolean>)
						{
							if (<child.data.jsExpr>child.<child.data>data</child.data>.jsExpr</child.data.jsExpr>)
							{
								var jsExpr = <Spry.Data.Region.processDataRefString>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.processDataRefString>processDataRefString</Spry.Data.Region.processDataRefString>(<Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>, <child.data.jsExpr>child.<child.data>data</child.data>.jsExpr</child.data.jsExpr>, null, <Boolean>true</Boolean>)</Spry.Data.Region.processDataRefString>;
								try { testVal = <Spry.Utils.eval>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.eval>eval</Spry.Utils.eval>(jsExpr)</Spry.Utils.eval>; }
								catch(e)
								{
									<Spry.Debug.trace>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>trace</void>(<String>"Caught exception in Spry.Data.Region.prototype.processTokens while evaluating: "</String> + jsExpr + <String>"\n    Exception:"</String> + e + <String>"\n"</String>)</Spry.Debug.trace>;
									<Boolean>testVal</Boolean> = <Boolean>false</Boolean>;
								}

								if (<Boolean>testVal</Boolean>)
								{
									childToProcess = child;
									break;
								}
							}
						}
						else if (<Boolean><child.data.name>child.<child.data>data</child.data>.name</child.data.name> == <String>"spry:default"</String></Boolean>)
							defaultChild = child;
					}
				}

				// If we didn't find a match, use the token for the default case.

				if (!childToProcess &amp;&amp; defaultChild)
					childToProcess = defaultChild;

				if (childToProcess)
					outputStr += this.processTokenChildren(childToProcess, <Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>);
			}
			else if (<Boolean><token.data.name>token.<token.data>data</token.data>.name</token.data.name> == <String>"spry:state"</String></Boolean>)
			{
				var <Boolean>testVal = <Boolean>true</Boolean></Boolean>;
				
				if (!<token.data.regionState>token.<token.data>data</token.data>.regionState</token.data.regionState> || <Boolean><token.data.regionState>token.<token.data>data</token.data>.regionState</token.data.regionState> == this.currentState</Boolean>)
					outputStr += this.processTokenChildren(token, <Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>);
			}
			else
			{
				<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"processTokens(): Unknown processing instruction: "</String> + <token.data.name>token.<token.data>data</token.data>.name</token.data.name> + <String>"\n"</String>)</Spry.Debug.reportError>;
				return <String>""</String>;
			}
			break;
		case <Spry.Data.Region.Token.VALUE_TOKEN>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.VALUE_TOKEN</Spry.Data.Region.Token.VALUE_TOKEN>:

			var <token.dataSet>dataSet = <token.dataSet>token.dataSet</token.dataSet></token.dataSet>;
			if (!<token.dataSet>dataSet</token.dataSet> &amp;&amp; this.dataSets &amp;&amp; <Boolean>this.dataSets.length &gt; <Number>0</Number></Boolean> &amp;&amp; this.dataSets[<Number>0</Number>])
			{
				// No dataSet was specified by the token, so use whatever the first
				// data set specified in the region.

				dataSet = this.dataSets[<Number>0</Number>];
			}
			if (!dataSet)
			{
				<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"processTokens(): Value reference has no data set specified: "</String> + <token.regionStr>token.regionStr</token.regionStr> + <String>"\n"</String>)</Spry.Debug.reportError>;
				return <String>""</String>;
			}

			var dsContext = <Spry.Data.Region.ProcessingContext.getDataSetContext><Spry.Data.Region.ProcessingContext>processContext</Spry.Data.Region.ProcessingContext>.<Spry.Data.Region.ProcessingContext.getDataSetContext>getDataSetContext</Spry.Data.Region.ProcessingContext.getDataSetContext>(dataSet)</Spry.Data.Region.ProcessingContext.getDataSetContext>;
			if (!dsContext)
			{
				<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"processTokens: Failed to get a data set context!\n"</String>)</Spry.Debug.reportError>;
				return <String>""</String>;
			}

			var ds = <dsContext.getDataSet>dsContext.<dsContext.getDataSet>getDataSet</dsContext.getDataSet>()</dsContext.getDataSet>;

			if (<Boolean><token.data>token.data</token.data> == <String>"ds_RowNumber"</String></Boolean>)
				outputStr += <dsContext.getRowIndex>dsContext.<dsContext.getRowIndex>getRowIndex</dsContext.getRowIndex>()</dsContext.getRowIndex>;
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_RowNumberPlus1"</String></Boolean>)
				outputStr += (<dsContext.getRowIndex>dsContext.<dsContext.getRowIndex>getRowIndex</dsContext.getRowIndex>()</dsContext.getRowIndex> + <Number>1</Number>);
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_RowCount"</String></Boolean>)
				outputStr += <dsContext.getNumRows>dsContext.<dsContext.getNumRows>getNumRows</dsContext.getNumRows>()</dsContext.getNumRows>;
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_UnfilteredRowCount"</String></Boolean>)
				outputStr += <dsContext.getNumRows>dsContext.<dsContext.getNumRows>getNumRows</dsContext.getNumRows>(<Boolean>true</Boolean>)</dsContext.getNumRows>;
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_CurrentRowNumber"</String></Boolean>)
				outputStr += <ds.getRowNumber>ds.<ds.getRowNumber>getRowNumber</ds.getRowNumber>(<ds.getCurrentRow>ds.<ds.getCurrentRow>getCurrentRow</ds.getCurrentRow>()</ds.getCurrentRow>)</ds.getRowNumber>;
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_CurrentRowID"</String></Boolean>)
				outputStr += <ds.curRowID>ds.curRowID</ds.curRowID>;
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_EvenOddRow"</String></Boolean>)
				outputStr += (<dsContext.getRowIndex>dsContext.<dsContext.getRowIndex>getRowIndex</dsContext.getRowIndex>()</dsContext.getRowIndex> % <Number>2</Number>) ? <Spry.Data.Region.evenRowClassName>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.evenRowClassName</Spry.Data.Region.evenRowClassName> : <Spry.Data.Region.oddRowClassName>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.oddRowClassName</Spry.Data.Region.oddRowClassName>;
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_SortOrder"</String></Boolean>)
				outputStr += (<ds.lastSortOrder>ds.lastSortOrder)</ds.lastSortOrder> ? <ds.lastSortOrder>ds.lastSortOrder</ds.lastSortOrder> : <String>""</String>;
			else if (<Boolean><token.data>token.data</token.data> == <String>"ds_SortColumn"</String></Boolean>)
				outputStr += <ds.getSortColumn>ds.<ds.getSortColumn>getSortColumn</ds.getSortColumn>()</ds.getSortColumn>;
			else
			{
				var curDataSetRow = <dsContext.getCurrentRow>dsContext.<dsContext.getCurrentRow>getCurrentRow</dsContext.getCurrentRow>()</dsContext.getCurrentRow>;
				if (curDataSetRow)
					outputStr += curDataSetRow[<token.data>token.data</token.data>];
			}
			break;
		default:
			<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"processTokens(): Invalid token type: "</String> + <token.regionStr>token.regionStr</token.regionStr> + <String>"\n"</String>)</Spry.Debug.reportError>;
			break;
	}

	return outputStr;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.prototype>prototype</Spry.Data.Region.prototype>.<String>transform</String> = <Function>function()
{
	if (this.data &amp;&amp; !this.tokens)
		this.<String>tokens</String> = this.tokenizeData(this.data);

	if (!this.tokens)
		return <String>""</String>;

	return this.processTokens(this.tokens, null);
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>PI</String> = {};
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>instructions</String> = {};

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>buildOpenTagForValueAttr</String> = <Function>function(ele, piName, attrName)
{
	if (!ele || !piName)
		return <String>""</String>;

	var <String>jsExpr = <String>""</String></String>;

	try
	{
		var testAttr = <ele.attributes.getNamedItem>ele.<ele.attributes>attributes</ele.attributes>.<ele.attributes.getNamedItem>getNamedItem</ele.attributes.getNamedItem>(piName)</ele.attributes.getNamedItem>;
		if (testAttr &amp;&amp; <testAttr.value>testAttr.value</testAttr.value>)
			jsExpr = <Spry.Utils.encodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.encodeEntities>encodeEntities</Spry.Utils.encodeEntities>(<testAttr.value>testAttr.value</testAttr.value>)</Spry.Utils.encodeEntities>;
	}
	catch (e) { <String>jsExpr</String> = <String>""</String>; }

	if (!<String>jsExpr</String>)
	{
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(piName + <String>" attribute requires a JavaScript expression that returns true or false!\n"</String>)</Spry.Debug.reportError>;
		return <String>""</String>;
	}

	return <String>"&lt;"</String> + Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[piName].tagName + <String>" "</String> + attrName +<String>"=\""</String> + <String>jsExpr</String> + <String>"\"&gt;"</String>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>buildOpenTagForTest</String> = <Function>function(ele, piName)
{
	return <Spry.Data.Region.PI.buildOpenTagForValueAttr>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.buildOpenTagForValueAttr>buildOpenTagForValueAttr</Spry.Data.Region.PI.buildOpenTagForValueAttr>(ele, piName, <String>"test"</String>)</Spry.Data.Region.PI.buildOpenTagForValueAttr>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>buildOpenTagForState</String> = <Function>function(ele, piName)
{
	return <Spry.Data.Region.PI.buildOpenTagForValueAttr>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.buildOpenTagForValueAttr>buildOpenTagForValueAttr</Spry.Data.Region.PI.buildOpenTagForValueAttr>(ele, piName, <String>"name"</String>)</Spry.Data.Region.PI.buildOpenTagForValueAttr>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>buildOpenTagForRepeat</String> = <Function>function(ele, piName)
{
	if (!ele || !piName)
		return <String>""</String>;

	var <String>selectAttrStr = <String>""</String></String>;

	try
	{
		var selectAttr = <ele.attributes.getNamedItem>ele.<ele.attributes>attributes</ele.attributes>.<ele.attributes.getNamedItem>getNamedItem</ele.attributes.getNamedItem>(piName)</ele.attributes.getNamedItem>;
		if (selectAttr &amp;&amp; <selectAttr.value>selectAttr.value</selectAttr.value>)
		{
			<selectAttr.value>selectAttrStr</selectAttr.value> = <selectAttr.value>selectAttr.value</selectAttr.value>;
			selectAttrStr = <selectAttrStr.replace>selectAttrStr.<selectAttrStr.replace>replace</selectAttrStr.replace>(<RegExp>/\s/g</RegExp>, <String>""</String>)</selectAttrStr.replace>;
		}
	}
	catch (e) { <String>selectAttrStr</String> = <String>""</String>; }

	if (!<String>selectAttrStr</String>)
	{
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(piName + <String>" attribute requires a data set name!\n"</String>)</Spry.Debug.reportError>;
		return <String>""</String>;
	}

	var <String>testAttrStr = <String>""</String></String>;

	try
	{
		var testAttr = <ele.attributes.getNamedItem>ele.<ele.attributes>attributes</ele.attributes>.<ele.attributes.getNamedItem>getNamedItem</ele.attributes.getNamedItem>(<String>"spry:test"</String>)</ele.attributes.getNamedItem>;
		if (testAttr)
		{
			if (<testAttr.value>testAttr.value</testAttr.value>)
				testAttrStr = <String>" test=\""</String> + <Spry.Utils.encodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.encodeEntities>encodeEntities</Spry.Utils.encodeEntities>(<testAttr.value>testAttr.value</testAttr.value>)</Spry.Utils.encodeEntities> + <String>"\""</String>;
			<ele.attributes.removeNamedItem>ele.<ele.attributes>attributes</ele.attributes>.<ele.attributes.removeNamedItem>removeNamedItem</ele.attributes.removeNamedItem>(<testAttr.nodeName>testAttr.nodeName</testAttr.nodeName>)</ele.attributes.removeNamedItem>;
		}
	}
	catch (e) { <String>testAttrStr</String> = <String>""</String>; }

	return <String>"&lt;"</String> + Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[piName].tagName + <String>" select=\""</String> + <String>selectAttrStr</String> + <String>"\""</String> + <String>testAttrStr</String> + <String>"&gt;"</String>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>buildOpenTagForContent</String> = <Function>function(ele, piName)
{
	if (!ele || !piName)
		return <String>""</String>;

	var <String>dataRefStr = <String>""</String></String>;

	try
	{
		var contentAttr = <ele.attributes.getNamedItem>ele.<ele.attributes>attributes</ele.attributes>.<ele.attributes.getNamedItem>getNamedItem</ele.attributes.getNamedItem>(piName)</ele.attributes.getNamedItem>;
		if (contentAttr &amp;&amp; <contentAttr.value>contentAttr.value</contentAttr.value>)
			dataRefStr = <Spry.Utils.encodeEntities>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.encodeEntities>encodeEntities</Spry.Utils.encodeEntities>(<contentAttr.value>contentAttr.value</contentAttr.value>)</Spry.Utils.encodeEntities>;
	}
	catch (e) { <String>dataRefStr</String> = <String>""</String>; }

	if (!<String>dataRefStr</String>)
	{
		<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(piName + <String>" attribute requires a data reference!\n"</String>)</Spry.Debug.reportError>;
		return <String>""</String>;
	}

	return <String>"&lt;"</String> + Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[piName].tagName + <String>" dataref=\""</String> + <String>dataRefStr</String> + <String>"\"&gt;"</String>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>buildOpenTag</String> = <Function>function(ele, piName)
{
	return <String>"&lt;"</String> + Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[piName].tagName + <String>"&gt;"</String>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>buildCloseTag</String> = <Function>function(ele, piName)
{
	return <String>"&lt;/"</String> + Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[piName].tagName + <String>"&gt;"</String>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:state"</String>] = { tagName: <String>"spry:state"</String>, childrenOnly: <Boolean>false</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTagForState>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTagForState</Spry.Data.Region.PI.buildOpenTagForState>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:if"</String>] = { tagName: <String>"spry:if"</String>, childrenOnly: <Boolean>false</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTagForTest>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTagForTest</Spry.Data.Region.PI.buildOpenTagForTest>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:repeat"</String>] = { tagName: <String>"spry:repeat"</String>, childrenOnly: <Boolean>false</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTagForRepeat>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTagForRepeat</Spry.Data.Region.PI.buildOpenTagForRepeat>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:repeatchildren"</String>] = { tagName: <String>"spry:repeat"</String>, childrenOnly: <Boolean>true</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTagForRepeat>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTagForRepeat</Spry.Data.Region.PI.buildOpenTagForRepeat>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:choose"</String>] = { tagName: <String>"spry:choose"</String>, childrenOnly: <Boolean>true</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTag</Spry.Data.Region.PI.buildOpenTag>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:when"</String>] = { tagName: <String>"spry:when"</String>, childrenOnly: <Boolean>false</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTagForTest>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTagForTest</Spry.Data.Region.PI.buildOpenTagForTest>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:default"</String>] = { tagName: <String>"spry:default"</String>, childrenOnly: <Boolean>false</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTag</Spry.Data.Region.PI.buildOpenTag>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[<String>"spry:content"</String>] = { tagName: <String>"spry:content"</String>, childrenOnly: <Boolean>true</Boolean>, getOpenTag: <Spry.Data.Region.PI.buildOpenTagForContent>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildOpenTagForContent</Spry.Data.Region.PI.buildOpenTagForContent>, getCloseTag: <Spry.Data.Region.PI.buildCloseTag>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.buildCloseTag</Spry.Data.Region.PI.buildCloseTag> };

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<String>orderedInstructions</String> = [ <Array><String>"spry:state"</String>, <String>"spry:if"</String>, <String>"spry:repeat"</String>, <String>"spry:repeatchildren"</String>, <String>"spry:choose"</String>, <String>"spry:when"</String>, <String>"spry:default"</String>, <String>"spry:content"</String> ]</Array>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>getTokensFromStr</String> = <Function>function(str)
{
	// XXX: This will need to be modified if we support
	// tokens that use javascript between the braces!
	if (!str)
		return null;
	return <str.match>str.<str.match>match</str.match>(<RegExp>/{[^}]+}/g</RegExp>)</str.match>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>processDataRefString</String> = <Function>function(processingContext, regionStr, dataSetsToUse, isJSExpr)
{
	if (!regionStr)
		return <String>""</String>;

	if (!processingContext &amp;&amp; !dataSetsToUse)
		return regionStr;

	var <String>resultStr = <String>""</String></String>;
	var <RegExp>re = <RegExp>new RegExp(<String>"\\{([^\\}:]+::)?[^\\}]+\\}"</String>, <String>"g"</String>)</RegExp></RegExp>;
	var <Number>startSearchIndex = <Number>0</Number></Number>;

	while (<Boolean><RegExp.lastIndex>startSearchIndex</RegExp.lastIndex> &lt; <regionStr.length>regionStr.length</regionStr.length></Boolean>)
	{
		var reArray = <RegExp.exec><RegExp>re</RegExp>.<RegExp.exec>exec</RegExp.exec>(regionStr)</RegExp.exec>;
		if (!reArray || !reArray[<Number>0</Number>])
		{
			resultStr += <regionStr.substr>regionStr.<regionStr.substr>substr</regionStr.substr>(<Number>startSearchIndex</Number>, <regionStr.length>regionStr.length</regionStr.length> - <Number>startSearchIndex</Number>)</regionStr.substr>;
			return resultStr;
		}

		if (<Boolean><reArray.index>reArray.index</reArray.index> != <Number>startSearchIndex</Number></Boolean>)
			resultStr += <regionStr.substr>regionStr.<regionStr.substr>substr</regionStr.substr>(<Number>startSearchIndex</Number>, <reArray.index>reArray.index</reArray.index> - <Number>startSearchIndex</Number>)</regionStr.substr>;

		var <String>dsName = <String>""</String></String>;
		if (<Boolean>reArray[<Number>0</Number>].search(<RegExp>/^\{[^}:]+::/</RegExp>) != -<Number>1</Number></Boolean>)
			dsName = reArray[<Number>0</Number>].replace(<RegExp>/^\{|::.*/g</RegExp>, <String>""</String>);

		var fieldName = reArray[<Number>0</Number>].replace(<RegExp>/^\{|.*::|\}/g</RegExp>, <String>""</String>);
		var row = null;

		if (processingContext)
		{
			var dsContext = <processingContext.getDataSetContext>processingContext.<processingContext.getDataSetContext>getDataSetContext</processingContext.getDataSetContext>(dsName)</processingContext.getDataSetContext>;

			if (<Boolean>fieldName == <String>"ds_RowNumber"</String></Boolean>)
			{
				resultStr += <dsContext.getRowIndex>dsContext.<dsContext.getRowIndex>getRowIndex</dsContext.getRowIndex>()</dsContext.getRowIndex>;
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_RowNumberPlus1"</String></Boolean>)
			{
				resultStr += (<dsContext.getRowIndex>dsContext.<dsContext.getRowIndex>getRowIndex</dsContext.getRowIndex>()</dsContext.getRowIndex> + <Number>1</Number>);
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_RowCount"</String></Boolean>)
			{
				resultStr += <dsContext.getNumRows>dsContext.<dsContext.getNumRows>getNumRows</dsContext.getNumRows>()</dsContext.getNumRows>;
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_UnfilteredRowCount"</String></Boolean>)
			{
				resultStr += <dsContext.getNumRows>dsContext.<dsContext.getNumRows>getNumRows</dsContext.getNumRows>(<Boolean>true</Boolean>)</dsContext.getNumRows>;
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_CurrentRowNumber"</String></Boolean>)
			{
				var ds = <dsContext.getDataSet>dsContext.<dsContext.getDataSet>getDataSet</dsContext.getDataSet>()</dsContext.getDataSet>;
				resultStr += <ds.getRowNumber>ds.<ds.getRowNumber>getRowNumber</ds.getRowNumber>(<ds.getCurrentRow>ds.<ds.getCurrentRow>getCurrentRow</ds.getCurrentRow>()</ds.getCurrentRow>)</ds.getRowNumber>;
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_CurrentRowID"</String></Boolean>)
			{
				var ds = <dsContext.getDataSet>dsContext.<dsContext.getDataSet>getDataSet</dsContext.getDataSet>()</dsContext.getDataSet>;
				resultStr += <String>""</String> + <ds.curRowID>ds.curRowID</ds.curRowID>;
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_EvenOddRow"</String></Boolean>)
			{
				resultStr += (<dsContext.getRowIndex>dsContext.<dsContext.getRowIndex>getRowIndex</dsContext.getRowIndex>()</dsContext.getRowIndex> % <Number>2</Number>) ? <Spry.Data.Region.evenRowClassName>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.evenRowClassName</Spry.Data.Region.evenRowClassName> : <Spry.Data.Region.oddRowClassName>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.oddRowClassName</Spry.Data.Region.oddRowClassName>;
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_SortOrder"</String></Boolean>)
			{
				var sortOrder = dsContext.<dsContext.getDataSet><dsContext.getDataSet>getDataSet</dsContext.getDataSet></dsContext.getDataSet>().lastSortOrder;
				if (sortOrder)
					resultStr += sortOrder;
				row = null;
			}
			else if (<Boolean>fieldName == <String>"ds_SortColumn"</String></Boolean>)
			{
				resultStr += dsContext.<dsContext.getDataSet><dsContext.getDataSet>getDataSet</dsContext.getDataSet></dsContext.getDataSet>().getSortColumn();
				row = null;
			}
			else
				row = <processingContext.getCurrentRowForDataSet>processingContext.<processingContext.getCurrentRowForDataSet>getCurrentRowForDataSet</processingContext.getCurrentRowForDataSet>(dsName)</processingContext.getCurrentRowForDataSet>;
		}
		else
		{
			var ds = dsName ? dataSetsToUse[dsName] : dataSetsToUse[<Number>0</Number>];
			if (ds)
				row = <ds.getCurrentRow>ds.<ds.getCurrentRow>getCurrentRow</ds.getCurrentRow>()</ds.getCurrentRow>;
		}

		if (row)
			resultStr += isJSExpr ? <Spry.Utils.escapeQuotesAndLineBreaks>Spry.<Spry.Utils>Utils</Spry.Utils>.<Spry.Utils.escapeQuotesAndLineBreaks>escapeQuotesAndLineBreaks</Spry.Utils.escapeQuotesAndLineBreaks>(<String>""</String> + row[fieldName])</Spry.Utils.escapeQuotesAndLineBreaks> : row[fieldName];

		if (<Boolean><Number>startSearchIndex</Number> == <RegExp.lastIndex><RegExp>re</RegExp>.lastIndex</RegExp.lastIndex></Boolean>)
		{
			// On IE if there was a match near the end of the string, it sometimes
			// leaves re.lastIndex pointing to the value it had before the last time
			// we called re.exec. We check for this case to prevent an infinite loop!
			// We need to write out any text in regionStr that comes after the last
			// match.

			var leftOverIndex = <reArray.index>reArray.index</reArray.index> + reArray[<Number>0</Number>].length;
			if (<Boolean>leftOverIndex &lt; <regionStr.length>regionStr.length</regionStr.length></Boolean>)
				resultStr += <regionStr.substr>regionStr.<regionStr.substr>substr</regionStr.substr>(leftOverIndex)</regionStr.substr>;

			break;
		}

		<RegExp.lastIndex>startSearchIndex</RegExp.lastIndex> = <RegExp.lastIndex><RegExp>re</RegExp>.lastIndex</RegExp.lastIndex>;
	}

	return resultStr;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>strToDataSetsArray</String> = <Function>function(str, returnRegionNames)
{
	var <Array>dataSetsArr = <Array>new Array</Array></Array>;
	var foundHash = {};

	if (!str)
		return <Array>dataSetsArr</Array>;

	str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/\s+/g</RegExp>, <String>" "</String>)</str.replace>;
	str = <str.replace>str.<str.replace>replace</str.replace>(<RegExp>/^\s|\s$/g</RegExp>, <String>""</String>)</str.replace>;
	var arr = <str.split>str.<str.split>split</str.split>(<RegExp>/ /</RegExp>)</str.split>;


	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <arr.length>arr.length</arr.length></Boolean>; <Number>i</Number>++)
	{
		if (arr[<Number>i</Number>] &amp;&amp; !Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.PI>PI</Spry.Data.Region.PI>.<Spry.Data.Region.PI.instructions>instructions</Spry.Data.Region.PI.instructions>[arr[<Number>i</Number>]])
		{
			try {
				var dataSet = <eval>eval(arr[<Number>i</Number>])</eval>;

				if (!foundHash[arr[<Number>i</Number>]])
				{
					if (returnRegionNames)
						<Array.push><Array>dataSetsArr</Array>.<Array.push>push</Array.push>(arr[<Number>i</Number>])</Array.push>;
					else
						<Array.push><Array>dataSetsArr</Array>.<Array.push>push</Array.push>(dataSet)</Array.push>;
					foundHash[arr[<Number>i</Number>]] = <Boolean>true</Boolean>;
				}
			}
			catch (e) { /* Spry.Debug.trace("Caught exception: " + e + "\n"); */ }
		}
	}

	return <Array>dataSetsArr</Array>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>DSContext</String> = <Function>function(dataSet)
{
	var m_self = this;
	var m_dataSet = dataSet;
	var <Array>m_curRowIndexArray = [ -<Array><Number>1</Number> ]</Array></Array>; // -1 means return whatever the current row is inside the data set.

	// Private Methods:

	<Function>function getInternalRowIndex() { return m_curRowIndexArray[<m_curRowIndexArray.length>m_curRowIndexArray.length</m_curRowIndexArray.length> - <Number>1</Number>]; }</Function>

	// Public Methods:
	this.<String>resetAll</String> = <Function>function() { <Array>m_curRowIndexArray</Array> = [ <Array><m_dataSet.getCurrentRow>m_dataSet.<m_dataSet.getCurrentRow>getCurrentRow</m_dataSet.getCurrentRow>()</m_dataSet.getCurrentRow> ]</Array> }</Function>;
	this.<String>getDataSet</String> = <Function>function() { return m_dataSet; }</Function>;
	this.<String>getNumRows</String> = <Function>function(unfiltered)
	{
		var rows = unfiltered ? <m_dataSet.getUnfilteredData>m_dataSet.<m_dataSet.getUnfilteredData>getUnfilteredData</m_dataSet.getUnfilteredData>()</m_dataSet.getUnfilteredData> : <m_dataSet.getData>m_dataSet.<m_dataSet.getData>getData</m_dataSet.getData>()</m_dataSet.getData>;
		return rows ? <rows.length>rows.length</rows.length> : <Number>0</Number>;
	}</Function>;
	this.<String>getCurrentRow</String> = <Function>function()
	{
		if (<Boolean><m_curRowIndexArray.length>m_curRowIndexArray.length</m_curRowIndexArray.length> &lt; <Number>2</Number></Boolean> || <Boolean><getInternalRowIndex>getInternalRowIndex()</getInternalRowIndex> &lt; <Number>0</Number></Boolean>)
			return <m_dataSet.getCurrentRow>m_dataSet.<m_dataSet.getCurrentRow>getCurrentRow</m_dataSet.getCurrentRow>()</m_dataSet.getCurrentRow>;
	
		var data = <m_dataSet.getData>m_dataSet.<m_dataSet.getData>getData</m_dataSet.getData>()</m_dataSet.getData>;
		var curRowIndex = <getInternalRowIndex>getInternalRowIndex()</getInternalRowIndex>;
	
		if (<Boolean>curRowIndex &lt; <Number>0</Number></Boolean> || <Boolean>curRowIndex &gt; <data.length>data.length</data.length></Boolean>)
		{
			<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Invalid index used in Spry.Data.Region.DSContext.getCurrentRow()!\n"</String>)</Spry.Debug.reportError>;
			return null;
		}
	
		return data[curRowIndex];
	}</Function>;
	this.<String>getRowIndex</String> = <Function>function()
	{
		var curRowIndex = <getInternalRowIndex>getInternalRowIndex()</getInternalRowIndex>;
		if (<Boolean>curRowIndex &gt;= <Number>0</Number></Boolean>)
			return curRowIndex;

		return <m_dataSet.getRowNumber>m_dataSet.<m_dataSet.getRowNumber>getRowNumber</m_dataSet.getRowNumber>(<m_dataSet.getCurrentRow>m_dataSet.<m_dataSet.getCurrentRow>getCurrentRow</m_dataSet.getCurrentRow>()</m_dataSet.getCurrentRow>)</m_dataSet.getRowNumber>;
	}</Function>;
	this.<String>setRowIndex</String> = <Function>function(rowIndex) { m_curRowIndexArray[<m_curRowIndexArray.length>m_curRowIndexArray.length</m_curRowIndexArray.length> - <Number>1</Number>] = rowIndex; }</Function>;
	this.<String>pushState</String> = <Function>function() { <m_curRowIndexArray.push>m_curRowIndexArray.<m_curRowIndexArray.push>push</m_curRowIndexArray.push>( <getInternalRowIndex>getInternalRowIndex()</getInternalRowIndex>)</m_curRowIndexArray.push>; }</Function>;
	this.<String>popState</String> = <Function>function()
	{
		if (<Boolean><m_curRowIndexArray.length>m_curRowIndexArray.length</m_curRowIndexArray.length> &lt; <Number>2</Number></Boolean>)
		{
			// Our array should always have at least one element in it!
			<Spry.Debug.reportError>Spry.<Spry.Debug>Debug</Spry.Debug>.<void>reportError</void>(<String>"Stack underflow in Spry.Data.Region.DSContext.popState()!\n"</String>)</Spry.Debug.reportError>;
			return;
		}
		<m_curRowIndexArray.pop>m_curRowIndexArray.<m_curRowIndexArray.pop>pop</m_curRowIndexArray.pop>()</m_curRowIndexArray.pop>;
	}</Function>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>ProcessingContext</String> = <Function>function(region)
{
	var m_self = this;
	var m_region = region;
	var <Array>m_dataSetContexts = <Array>[]</Array></Array>;
	
	if (region &amp;&amp; <region.dataSets>region.dataSets</region.dataSets>)
	{
		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <region.dataSets.length>region.<region.dataSets>dataSets</region.dataSets>.length</region.dataSets.length></Boolean>; <Number>i</Number>++)
			<Array.push><Array>m_dataSetContexts</Array>.<Array.push>push</Array.push>(<Spry.Data.Region.DSContext>new <Spry.Data.Region.DSContext>Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.DSContext</Spry.Data.Region.DSContext>(region.<region.dataSets>dataSets</region.dataSets>[<Number>i</Number>])</Spry.Data.Region.DSContext>)</Array.push>;
	}

	this.<String>getDataSetContext</String> = <Function>function(dataSet)
	{
		if (!dataSet)
		{
			// We were called without a specified data set or
			// data set name. Assume the caller wants the first
			// data set in the processing context.

			if (<Boolean><m_dataSetContexts.length>m_dataSetContexts.length</m_dataSetContexts.length> &gt; <Number>0</Number></Boolean>)
				return m_dataSetContexts[<Number>0</Number>];
			return null;
		}

		if (<Boolean>typeof dataSet == <String>'string'</String></Boolean>)
		{
			try { dataSet = <eval>eval(dataSet)</eval>; } catch (e) { dataSet = null; }
			if (!dataSet)
				return null;
		}
	
		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <m_dataSetContexts.length>m_dataSetContexts.length</m_dataSetContexts.length></Boolean>; <Number>i</Number>++)
		{
			var dsc = m_dataSetContexts[<Number>i</Number>];
			if (<Boolean><dsc.getDataSet>dsc.<dsc.getDataSet>getDataSet</dsc.getDataSet>()</dsc.getDataSet> == dataSet</Boolean>)
				return dsc;
		}
	
		return null;
	}</Function>;

	this.<String>getCurrentRowForDataSet</String> = <Function>function(dataSet)
	{
		var dsc = <m_self.getDataSetContext>m_self.<m_self.getDataSetContext>getDataSetContext</m_self.getDataSetContext>(dataSet)</m_self.getDataSetContext>;
		if (dsc)
			return <dsc.getCurrentRow>dsc.<dsc.getCurrentRow>getCurrentRow</dsc.getCurrentRow>()</dsc.getCurrentRow>;
		return null;
	}</Function>;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<String>Token</String> = <Function>function(tokenType, dataSet, data, regionStr)
{
	var self = this;
	this.<String>tokenType</String> = tokenType;
	this.<String>dataSet</String> = dataSet;
	this.<String>data</String> = data;
	this.<String>regionStr</String> = regionStr;
	this.<String>parent</String> = null;
	this.<String>children</String> = null;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.<Spry.Data.Region.Token.prototype>prototype</Spry.Data.Region.Token.prototype>.<String>addChild</String> = <Function>function(child)
{
	if (!child)
		return;
	
	if (!this.children)
		this.<String>children</String> = <Array>new Array</Array>;
	
	this.children.push(child);
	child.<String>parent</String> = this;
}</Function>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.<String>LIST_TOKEN</String>                   = <Number>0</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.<String>STRING_TOKEN</String>                 = <Number>1</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.<String>PROCESSING_INSTRUCTION_TOKEN</String> = <Number>2</Number>;
Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.<String>VALUE_TOKEN</String>                  = <Number>3</Number>;

Spry.<Spry.Data>Data</Spry.Data>.<Spry.Data.Region>Region</Spry.Data.Region>.<Spry.Data.Region.Token>Token</Spry.Data.Region.Token>.<String>PIData</String> = <Function>function(piName, data, jsExpr, regionState)
{
	var self = this;
	this.<String>name</String> = piName;
	this.<String>data</String> = data;
	this.<String>jsExpr</String> = jsExpr;
	this.<String>regionState</String> = regionState;
}</Function>;

<Spry.Utils.addLoadListener>Spry.<Spry.Utils>Utils</Spry.Utils>.<void>addLoadListener</void>(<Function>function() { <setTimeout>setTimeout(<Function>function() { <Spry.Data.initRegions>Spry.<Spry.Data>Data</Spry.Data>.<void>initRegions</void>()</Spry.Data.initRegions>; }</Function>, <Number>0</Number>)</setTimeout>; }</Function>)</Spry.Utils.addLoadListener>;
