/* Spry.Effect.js - Revision: Spry Preview Release 1.3 */

// Copyright (c) 2006. Adobe Systems Incorporated.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//   * Neither the name of Adobe Systems Incorporated nor the names of its
//     contributors may be used to endorse or promote products derived from this
//     software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.



var Spry;
 
if (!Spry) Spry = {};

Spry.<String>forwards</String> = <Number>1</Number>; // const
Spry.<String>backwards</String> = <Number>2</Number>; // const

Spry.<String>linearTransition</String> = <Number>1</Number>; // const
Spry.<String>sinusoidalTransition</String> = <Number>2</Number>; // const

if (!<Spry.Effect>Spry.Effect</Spry.Effect>) Spry.<String>Effect</String> = {};

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Registry
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Registry</String> = <Function>function()
{
	this.<String>elements</String> = <Array>new Array()</Array>;
}</Function>;
 
Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Registry>Registry</Spry.Effect.Registry>.<Spry.Effect.Registry.prototype>prototype</Spry.Effect.Registry.prototype>.<String>getRegisteredEffect</String> = <Function>function(<HTMLElement>element</HTMLElement>, effect) 
{
	var eleIdx = this.getIndexOfElement(<HTMLElement>element</HTMLElement>);

	if (<Boolean>eleIdx == -<Number>1</Number></Boolean>)
	{
		var <Spry.Effect.AnimatedElement>addedElement = <Spry.Effect.AnimatedElement>new <Spry.Effect.AnimatedElement>Spry.<Spry.Effect>Effect</Spry.Effect>.AnimatedElement</Spry.Effect.AnimatedElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.AnimatedElement></Spry.Effect.AnimatedElement>;
		this.elements[this.elements.length] = <Spry.Effect.AnimatedElement>addedElement</Spry.Effect.AnimatedElement>;
		eleIdx = this.elements.length - <Number>1</Number>;
	}

	var <Number>foundEffectArrayIdx = -<Number>1</Number></Number>;
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.elements[eleIdx].effectArray.length</Boolean>; <Number>i</Number>++) 
	{
		if (this.elements[eleIdx].effectArray[<Number>i</Number>])
		{
			if (this.effectsAreTheSame(this.elements[eleIdx].effectArray[<Number>i</Number>], effect))
			{
				<Number>foundEffectArrayIdx</Number> = <Number>i</Number>;
				this.elements[eleIdx].effectArray[<Number>i</Number>].reset(); // bb
				this.elements[eleIdx].<String>currentEffect</String> = <Number>i</Number>;
				if (this.elements[eleIdx].effectArray[<Number>i</Number>].options &amp;&amp; (<Boolean>this.elements[eleIdx].effectArray[<Number>i</Number>].options.toggle != null)</Boolean>) {
					if (<Boolean>this.elements[eleIdx].effectArray[<Number>i</Number>].options.toggle == <Boolean>true</Boolean></Boolean>)
						this.elements[eleIdx].effectArray[<Number>i</Number>].doToggle();
				} else { // same effect name (but no options or options.toggle field)
					this.elements[eleIdx].effectArray[<Number>i</Number>] = effect;
				}

				break;
			}
		}
	}

	if (<Boolean><Number>foundEffectArrayIdx</Number> == -<Number>1</Number></Boolean>) 
	{
		var currEffectIdx = this.elements[eleIdx].effectArray.length;
		this.elements[eleIdx].effectArray[currEffectIdx] = effect;
		this.elements[eleIdx].<String>currentEffect</String> = currEffectIdx;
	}

	var idx = this.elements[eleIdx].currentEffect;
	return this.elements[eleIdx].effectArray[idx];
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Registry>Registry</Spry.Effect.Registry>.<Spry.Effect.Registry.prototype>prototype</Spry.Effect.Registry.prototype>.<String>getIndexOfElement</String> = <Function>function(<HTMLElement>element</HTMLElement>)
{
	var <Number>registryIndex = -<Number>1</Number></Number>;
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.elements.length</Boolean>; <Number>i</Number>++)
	{
		if (this.elements[<Number>i</Number>]) {
			if (<Boolean>this.elements[<Number>i</Number>].element == <HTMLElement>element</HTMLElement></Boolean>)
				<Number>registryIndex</Number> = <Number>i</Number>;
		}
	}
	return <Number>registryIndex</Number>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Registry>Registry</Spry.Effect.Registry>.<Spry.Effect.Registry.prototype>prototype</Spry.Effect.Registry.prototype>.<String>effectsAreTheSame</String> = <Function>function(effectA, effectB)
{
	if (<Boolean><effectA.name>effectA.name</effectA.name> != <effectB.name>effectB.name</effectB.name></Boolean>) 
		return <Boolean>false</Boolean>;

	//if(effectA.queue != null) xxx

	if(<Boolean><effectA.effectsArray>effectA.effectsArray</effectA.effectsArray> != null</Boolean>) // cluster effect
	{
		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <effectA.effectsArray.length>effectA.<effectA.effectsArray>effectsArray</effectA.effectsArray>.length</effectA.effectsArray.length></Boolean>; <Number>i</Number>++)
		{
			if(!<Spry.Effect.Utils.optionsAreIdentical>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Boolean>optionsAreIdentical</Boolean>(effectA.<effectA.effectsArray>effectsArray</effectA.effectsArray>[<Number>i</Number>].effect.options, effectB.<effectB.effectsArray>effectsArray</effectB.effectsArray>[<Number>i</Number>].effect.options)</Spry.Effect.Utils.optionsAreIdentical>)
				return <Boolean>false</Boolean>;
		}
	}
	else // single effect
	{
		if(!<Spry.Effect.Utils.optionsAreIdentical>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Boolean>optionsAreIdentical</Boolean>(<effectA.options>effectA.options</effectA.options>, <effectB.options>effectB.options</effectB.options>)</Spry.Effect.Utils.optionsAreIdentical>)
			return <Boolean>false</Boolean>;
	}

	return <Boolean>true</Boolean>;
}</Function>


<Spry.Effect.Registry>SpryRegistry</Spry.Effect.Registry> = <Spry.Effect.Registry>new <Spry.Effect.Registry>Spry.<Spry.Effect>Effect</Spry.Effect>.Registry</Spry.Effect.Registry></Spry.Effect.Registry>;

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Utils
//
//////////////////////////////////////////////////////////////////////

if (!<Spry.Effect.Utils>Spry.<Spry.Effect>Effect</Spry.Effect>.Utils</Spry.Effect.Utils>) Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Utils</String> = {};

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>Position</String> = <Function>function()
{
	this.<String>x</String> = <Number>0</Number>; // left
	this.<String>y</String> = <Number>0</Number>; // top
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>Rectangle</String> = <Function>function()
{
	this.<String>width</String> = <Number>0</Number>;
	this.<String>height</String> = <Number>0</Number>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>PositionedRectangle</String> = <Function>function()
{
	this.<String>position</String> = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	this.<String>rectangle</String> = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>intToHex</String> = <Function>function(integerNum) 
{
	var result = <integerNum.toString>integerNum.<integerNum.toString>toString</integerNum.toString>(<Number>16</Number>)</integerNum.toString>;
	if (<Boolean><result.length>result.length</result.length> == <Number>1</Number></Boolean>) 
		result = <String>"0"</String> + result;
	return result;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>hexToInt</String> = <Function>function(hexStr) 
{
	return <parseInt>parseInt(hexStr, <Number>16</Number>)</parseInt>; 
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>rgb</String> = <Function>function(redInt, greenInt, blueInt) 
{
	
	var redHex = <Spry.Effect.Utils.intToHex>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.intToHex>intToHex</Spry.Effect.Utils.intToHex>(redInt)</Spry.Effect.Utils.intToHex>;
	var greenHex = <Spry.Effect.Utils.intToHex>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.intToHex>intToHex</Spry.Effect.Utils.intToHex>(greenInt)</Spry.Effect.Utils.intToHex>;
	var blueHex = <Spry.Effect.Utils.intToHex>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.intToHex>intToHex</Spry.Effect.Utils.intToHex>(blueInt)</Spry.Effect.Utils.intToHex>;
	compositeColorHex = <redHex.concat>redHex.<redHex.concat>concat</redHex.concat>(greenHex, blueHex)</redHex.concat>;
	compositeColorHex = <String>'#'</String> + compositeColorHex;
	return compositeColorHex;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>camelize</String> = <Function>function(stringToCamelize)
{
    var oStringList = <stringToCamelize.split>stringToCamelize.<stringToCamelize.split>split</stringToCamelize.split>(<String>'-'</String>)</stringToCamelize.split>;
    if (<Boolean><oStringList.length>oStringList.length</oStringList.length> == <Number>1</Number></Boolean>) 
		return oStringList[<Number>0</Number>];

    var camelizedString = <Boolean><stringToCamelize.indexOf>stringToCamelize.<stringToCamelize.indexOf>indexOf</stringToCamelize.indexOf>(<String>'-'</String>)</stringToCamelize.indexOf> == <Number>0</Number></Boolean>
      ? oStringList[<Number>0</Number>].charAt(<Number>0</Number>).toUpperCase() + oStringList[<Number>0</Number>].substring(<Number>1</Number>)
      : oStringList[<Number>0</Number>];

    for (var <Number>i = <Number>1</Number></Number>, len = <oStringList.length>oStringList.length</oStringList.length>; <Boolean><Number>i</Number> &lt; len</Boolean>; <Number>i</Number>++) {
      var s = oStringList[<Number>i</Number>];
      camelizedString += s.<s.charAt><s.charAt>charAt</s.charAt>(<Number>0</Number></s.charAt>).toUpperCase() + <s.substring>s.<s.substring>substring</s.substring>(<Number>1</Number>)</s.substring>;
    }

    return camelizedString;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>isPercentValue</String> = <Function>function(value) 
{
	var <Boolean>result = <Boolean>false</Boolean></Boolean>;
	try
	{
		if (<Boolean><value.lastIndexOf>value.<value.lastIndexOf>lastIndexOf</value.lastIndexOf>(<String>"%"</String>)</value.lastIndexOf> &gt; <Number>0</Number></Boolean>)
			<Boolean>result</Boolean> = <Boolean>true</Boolean>;
	}
	catch (e) {}
	return <Boolean>result</Boolean>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>getPercentValue</String> = <Function>function(value) 
{
	var <Number>result = <Number>0</Number></Number>;
	try
	{
		result = <value.substring>value.<value.substring>substring</value.substring>(<Number>0</Number>, <value.lastIndexOf>value.<value.lastIndexOf>lastIndexOf</value.lastIndexOf>(<String>"%"</String>)</value.lastIndexOf>)</value.substring>;
	}
	catch (e) {<alert>alert(<String>'ERR: Spry.Effect.Utils.getPercentValue: '</String> + e)</alert>;}
	return result;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>getPixelValue</String> = <Function>function(value) 
{
	var <Number>result = <Number>0</Number></Number>;
	try
	{
		result = <value.substring>value.<value.substring>substring</value.substring>(<Number>0</Number>, <value.lastIndexOf>value.<value.lastIndexOf>lastIndexOf</value.lastIndexOf>(<String>"px"</String>)</value.lastIndexOf>)</value.substring>;
	}
	catch (e) {}
	return result;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>getFirstChildElement</String> = <Function>function(node)
{
	if (node)
	{
		var <node.firstChild>childCurr = <node.firstChild>node.firstChild</node.firstChild></node.firstChild>;

		while (<node.firstChild.nextSibling>childCurr</node.firstChild.nextSibling>)
		{
			if (<Boolean><node.firstChild.nodeType><node.firstChild>childCurr</node.firstChild>.nodeType</node.firstChild.nodeType> == <Number>1</Number></Boolean>) // Node.ELEMENT_NODE
				return <node.firstChild>childCurr</node.firstChild>;

			<node.firstChild.nextSibling>childCurr</node.firstChild.nextSibling> = <node.firstChild.nextSibling.nextSibling><node.firstChild.nextSibling>childCurr</node.firstChild.nextSibling>.nextSibling</node.firstChild.nextSibling.nextSibling>;
		}
	}

	return null;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<String>optionsAreIdentical</String> = <Function>function(optionsA, optionsB)
{
	if(<Boolean>optionsA == null</Boolean> &amp;&amp; <Boolean>optionsB == null</Boolean>)
		return <Boolean>true</Boolean>;

	if(<Boolean>optionsA != null</Boolean> &amp;&amp; <Boolean>optionsB != null</Boolean>)
	{
		var <Number>objectCountA = <Number>0</Number></Number>;
		var <Number>objectCountB = <Number>0</Number></Number>;

		for (var propA in optionsA) <Number>objectCountA</Number>++;
		for (var propB in optionsB) <Number>objectCountB</Number>++;

		if(<Boolean><Number>objectCountA</Number> != <Number>objectCountB</Number></Boolean>)
			return <Boolean>false</Boolean>;

		for (var prop in optionsA)
			if((optionsB[prop] === undefined) || (<Boolean>optionsA[prop] != optionsB[prop])</Boolean>)
				return <Boolean>false</Boolean>;

		return <Boolean>true</Boolean>;
	}

	return <Boolean>false</Boolean>;
}</Function>


//////////////////////////////////////////////////////////////////////
//
// DHTML manipulation
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>getElement</String> = <Function>function(ele)
{
	var <HTMLElement>element = null</HTMLElement>;
	if (ele &amp;&amp; typeof <Boolean>ele == <String>"string"</String></Boolean>)
		<HTMLElement>element</HTMLElement> = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(ele)</HTMLDocument.getElementById>;
	else
		<HTMLElement>element</HTMLElement> = ele;
	if (<Boolean><HTMLElement>element</HTMLElement> == null</Boolean>) <alert>alert(<String>'ERROR in Spry.Effect.js: Element "'</String> + ele + <String>'" not found.'</String>)</alert>;
	return <HTMLElement>element</HTMLElement>;
	
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>getStyleProp</String> = <Function>function(<HTMLElement>element</HTMLElement>, prop)
{
	var value;

	try
	{
		value = <HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>[<Spry.Effect.Utils.camelize>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.camelize>camelize</Spry.Effect.Utils.camelize>(prop)</Spry.Effect.Utils.camelize>];
		if (!value)
		{
			if (<HTMLDocument.defaultView><HTMLDocument>document</HTMLDocument>.defaultView</HTMLDocument.defaultView> &amp;&amp; <HTMLDocument.defaultView.getComputedStyle><HTMLDocument>document</HTMLDocument>.<HTMLDocument.defaultView>defaultView</HTMLDocument.defaultView>.getComputedStyle</HTMLDocument.defaultView.getComputedStyle>) {
				var css = <HTMLDocument.defaultView.getComputedStyle><HTMLDocument>document</HTMLDocument>.<HTMLDocument.defaultView>defaultView</HTMLDocument.defaultView>.<HTMLDocument.defaultView.getComputedStyle>getComputedStyle</HTMLDocument.defaultView.getComputedStyle>(<HTMLElement>element</HTMLElement>, null)</HTMLDocument.defaultView.getComputedStyle>;
				value = css ? <css.getPropertyValue>css.<css.getPropertyValue>getPropertyValue</css.getPropertyValue>(prop)</css.getPropertyValue> : null;
			} else if (<HTMLElement.currentStyle><HTMLElement>element</HTMLElement>.currentStyle</HTMLElement.currentStyle>) {
				value = <HTMLElement>element</HTMLElement>.<HTMLElement.currentStyle>currentStyle</HTMLElement.currentStyle>[<Spry.Effect.Utils.camelize>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.camelize>camelize</Spry.Effect.Utils.camelize>(prop)</Spry.Effect.Utils.camelize>];
			}
		}
	}
	catch (e) {<alert>alert(<String>'ERR: Spry.Effect.getStyleProp: '</String> + e)</alert>;}

	return <Boolean>value == <String>'auto'</String></Boolean> ? null : value;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>setStyleProp</String> = <Function>function(<HTMLElement>element</HTMLElement>, prop, value)
{
	try
	{
		<HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>[<Spry.Effect.Utils.camelize>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.camelize>camelize</Spry.Effect.Utils.camelize>(prop)</Spry.Effect.Utils.camelize>] = value;
	}
	catch (e) {<alert>alert(<String>'ERR: Spry.Effect.setStyleProp: '</String> + e)</alert>;}

	return null;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>makePositioned</String> = <Function>function(<HTMLElement>element</HTMLElement>)
{
	var pos = <Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>'position'</String>)</Spry.Effect.getStyleProp>;
	if (!pos || <Boolean>pos == <String>'static'</String></Boolean>) {
		<HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>.<String>position</String> = <String>'relative'</String>;
		// Opera returns the offset relative to the positioning context, when an
		// element is position relative but top and left have not been defined
		/*
		if (window.opera) {
			element.style.top = 0;
			element.style.left = 0;
		}
		*/
	}
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>enforceVisible</String> = <Function>function(<HTMLElement>element</HTMLElement>)
{
	var propDisplay = <Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>'display'</String>)</Spry.Effect.getStyleProp>;
	if (propDisplay &amp;&amp; <Boolean><propDisplay.toLowerCase>propDisplay.<propDisplay.toLowerCase>toLowerCase</propDisplay.toLowerCase>()</propDisplay.toLowerCase> == <String>'none'</String></Boolean>)
		<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'display'</String>, <String>''</String>)</Spry.Effect.setStyleProp>;

	var propVisible = <Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>'visibility'</String>)</Spry.Effect.getStyleProp>;
	if (propVisible &amp;&amp; <Boolean><propVisible.toLowerCase>propVisible.<propVisible.toLowerCase>toLowerCase</propVisible.toLowerCase>()</propVisible.toLowerCase> == <String>'hidden'</String></Boolean>)
		<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'visibility'</String>, <String>'visible'</String>)</Spry.Effect.setStyleProp>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>makeClipping</String> = <Function>function(<HTMLElement>element</HTMLElement>) 
{
	var overflow = <Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>'overflow'</String>)</Spry.Effect.getStyleProp>;
	if (<Boolean>overflow != <String>'hidden'</String></Boolean>)
		<HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>.<String>overflow</String> = <String>'hidden'</String>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>cleanWhitespace</String> = <Function>function(<HTMLElement>element</HTMLElement>) 
{
    for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; <HTMLElement.childNodes.length><HTMLElement>element</HTMLElement>.<HTMLElement.childNodes>childNodes</HTMLElement.childNodes>.length</HTMLElement.childNodes.length></Boolean>; <Number>i</Number>++) {
      var node = <HTMLElement>element</HTMLElement>.<HTMLElement.childNodes>childNodes</HTMLElement.childNodes>[<Number>i</Number>];
      if (<Boolean><node.nodeType>node.nodeType</node.nodeType> == <Number>3</Number></Boolean> &amp;&amp; !<RegExp.test><RegExp>/\S/</RegExp>.<RegExp.test>test</RegExp.test>(<node.nodeValue>node.nodeValue</node.nodeValue>)</RegExp.test>)
	  {
		  try
		  {
		 	<HTMLElement.parentNode.removeChild><HTMLElement>element</HTMLElement>.<HTMLElement.parentNode>parentNode</HTMLElement.parentNode>.<HTMLElement.parentNode.removeChild>removeChild</HTMLElement.parentNode.removeChild>(<HTMLElement>element</HTMLElement>)</HTMLElement.parentNode.removeChild>;
		  }
		  catch (e) {<alert>alert(<String>'ERR: Spry.Effect.cleanWhitespace: '</String> + e)</alert>;}
	  }
    }
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>getDimensions</String> = <Function>function(<HTMLElement>element</HTMLElement>) 
{
	<Spry.Effect.Utils.Rectangle>dimensions</Spry.Effect.Utils.Rectangle> = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	if (<Boolean><Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>'display'</String>)</Spry.Effect.getStyleProp> != <String>'none'</String></Boolean>)
	{
		<Spry.Effect.Utils.Rectangle>dimensions</Spry.Effect.Utils.Rectangle>.<String>width</String> = <HTMLElement.offsetWidth><HTMLElement>element</HTMLElement>.offsetWidth</HTMLElement.offsetWidth>;
		<Spry.Effect.Utils.Rectangle>dimensions</Spry.Effect.Utils.Rectangle>.<String>height</String> = <HTMLElement.offsetHeight><HTMLElement>element</HTMLElement>.offsetHeight</HTMLElement.offsetHeight>;
	}
	return <Spry.Effect.Utils.Rectangle>dimensions</Spry.Effect.Utils.Rectangle>;

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
	/*
    var els = element.style;
    var originalVisibility = els.visibility;
    var originalPosition = els.position;
    els.visibility = 'hidden';
    els.position = 'absolute';
    els.display = '';
    var originalWidth = element.clientWidth;
    var originalHeight = element.clientHeight;
    els.display = 'none';
    els.position = originalPosition;
    els.visibility = originalVisibility;
    return {width: originalWidth, height: originalHeight};
	*/
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>getOffsetPosition</String> = <Function>function(<HTMLElement>element</HTMLElement>)
{
	var <Spry.Effect.Utils.Position>position = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	if (<Boolean><HTMLElement.offsetTop><HTMLElement>element</HTMLElement>.offsetTop</HTMLElement.offsetTop> != null</Boolean>)
	{
		<Spry.Effect.Utils.Position>position</Spry.Effect.Utils.Position>.<String>y</String> = <HTMLElement.offsetTop><HTMLElement>element</HTMLElement>.offsetTop</HTMLElement.offsetTop>;
	}
	if (<Boolean><HTMLElement.offsetLeft><HTMLElement>element</HTMLElement>.offsetLeft</HTMLElement.offsetLeft> != null</Boolean>)
	{
		<Spry.Effect.Utils.Position>position</Spry.Effect.Utils.Position>.<String>x</String> = <HTMLElement.offsetLeft><HTMLElement>element</HTMLElement>.offsetLeft</HTMLElement.offsetLeft>;
	}
	return <Spry.Effect.Utils.Position>position</Spry.Effect.Utils.Position>;
}</Function>


//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Animator
// (super type)
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Animator</String> = <Function>function(options)
{
	
	this.<String>timer</String> = null;
	this.<String>interval</String> = <Number>42</Number>; //33; // ca. 30 fps
	this.<String>direction</String> = <Spry.forwards>Spry.forwards</Spry.forwards>;
	this.<String>startMilliseconds</String> = <Number>0</Number>;
	this.<String>repeat</String> = <String>'none'</String>;
	this.<String>nextEffect</String> = null;
	this.<String>isFinished</String> = <Boolean>false</Boolean>;
	
	this.<String>options</String> = {
		duration: <Number>500</Number>,
		toggle: <Boolean>false</Boolean>,
		transition: <Spry.linearTransition>Spry.linearTransition</Spry.linearTransition>
	};
	
	this.setOptions(options);
	
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>setOptions</String> = <Function>function(options)
{
	if (!options)
		return;
	for (var prop in options)
		this.options[prop] = options[prop];
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>start</String> = <Function>function(queue)
{
	this.<String>isFinished</String> = <Boolean>false</Boolean>;
	this.<String>queue</String> = queue;
	var self = this;

	if (this.options.setup)
	{
		try
		{
			this.options.setup(this.element, this);
		}
		catch (e) {<alert>alert(<String>'ERR: Spry.Effect.Animator.prototype.start: '</String> + e)</alert>;}
	}
	
	var <Date>currDate = <Date>new Date()</Date></Date>;
	this.<String>startMilliseconds</String> = <Date.getTime><Date>currDate</Date>.<Date.getTime>getTime</Date.getTime>()</Date.getTime>;
	this.<String>timer</String> = <setInterval>setInterval(<Function>function() { <self.drawEffect>self.<self.drawEffect>drawEffect</self.drawEffect>()</self.drawEffect>; }</Function>, this.interval)</setInterval>;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>stop</String> = <Function>function()
{
	
	if (this.timer) {
		<clearInterval>clearInterval(this.timer)</clearInterval>;
		this.<String>timer</String> = null;
	}

	this.<String>startMilliseconds</String> = <Number>0</Number>;

	if (<Boolean>this.queue != null</Boolean>)
	{
		this.queue.startNextEffect();
	}
	else 
	{
		if (this.options.finish)
		{
			try
			{
				this.options.finish(this.element, this);
			}
			catch (e) {<alert>alert(<String>'ERR: Spry.Effect.Animator.prototype.stop: '</String> + e)</alert>;}
		}
		this.<String>isFinished</String> = <Boolean>true</Boolean>;
	}
	/*
	Spry.Debug.trace('after stop:' + this.name);
	Spry.Debug.trace('this.element.style.top: ' + this.element.style.top);
	Spry.Debug.trace('this.element.style.left: ' + this.element.style.left);
	Spry.Debug.trace('this.element.style.width: ' + this.element.style.width);
	Spry.Debug.trace('this.element.style.height: ' + this.element.style.height);
	*/
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>cancel</String> = <Function>function()
{
	if (this.timer) {
		<clearInterval>clearInterval(this.timer)</clearInterval>;
		this.<String>timer</String> = null;
	}
	this.<String>isFinished</String> = <Boolean>true</Boolean>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>drawEffect</String> = <Function>function()
{
	// default: linear transition
	var position = this.getElapsedMilliseconds() / this.options.duration;
	if (<Boolean>this.getElapsedMilliseconds() &gt; this.options.duration</Boolean>) {
		<Number>position</Number> = <Number>1.0</Number>;
	} else {
		if (<Boolean>this.options.transition == <Spry.sinusoidalTransition>Spry.sinusoidalTransition</Spry.sinusoidalTransition></Boolean>)
		{
			position = (-<Math.cos>Math.<Math.cos>cos</Math.cos>(position*<Math.PI>Math.PI</Math.PI>)</Math.cos>/<Number>2</Number>) + <Number>0.5</Number>;
		}
		else if (<Boolean>this.options.transition == <Spry.linearTransition>Spry.linearTransition</Spry.linearTransition></Boolean>)
		{
			// default: linear
		}
		else
		{
			<alert>alert(<String>'unknown transition'</String>)</alert>;
		}
		
	}
	//Spry.Debug.trace('animate: ' + position + ' : ' + this.name);
	this.animate(position);
	
	if (<Boolean>this.getElapsedMilliseconds() &gt; this.options.duration</Boolean>) {
		this.stop();
	}
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>getElapsedMilliseconds</String> = <Function>function()
{
	if (<Boolean>this.startMilliseconds &gt; <Number>0</Number></Boolean>) {
		var <Date>currDate = <Date>new Date()</Date></Date>;
		return (<Date.getTime><Date>currDate</Date>.<Date.getTime>getTime</Date.getTime>()</Date.getTime> - this.startMilliseconds);
	} else {
		return <Number>0</Number>;
	}
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>doToggle</String> = <Function>function()
{
	if (<Boolean>this.options.toggle == <Boolean>true</Boolean></Boolean>) {
		if (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards></Boolean>) {
			this.<String>direction</String> = <Spry.backwards>Spry.backwards</Spry.backwards>;
		} else if (<Boolean>this.direction == <Spry.backwards>Spry.backwards</Spry.backwards></Boolean>) {
			this.<String>direction</String> = <Spry.forwards>Spry.forwards</Spry.forwards>;
		}
	}
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.prototype>prototype</Spry.Effect.Animator.prototype>.<String>animate</String> = <Function>function(position) {}</Function>;

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Move
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Move</String> = <Function>function(<HTMLElement>element</HTMLElement>, fromPos, toPos, options)
{
	this.<String>name</String> = <String>'Move'</String>;
	
	<Spry.Effect.Animator.call>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.call>call</Spry.Effect.Animator.call>(this, options)</Spry.Effect.Animator.call>;

	this.<String>element</String> = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement>;

	this.<String>startX</String> = <fromPos.x>fromPos.x</fromPos.x>;
	this.<String>stopX</String> = <toPos.x>toPos.x</toPos.x>;
	this.<String>startY</String> = <fromPos.y>fromPos.y</fromPos.y>;
	this.<String>stopY</String> = <toPos.y>toPos.y</toPos.y>;
	
	this.<String>rangeMoveX</String> = this.startX - this.stopX;
	this.<String>rangeMoveY</String>= this.startY - this.stopY;
	
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Move>Move</Spry.Effect.Move>.<String>prototype</String> = <Spry.Effect.Animator>new <Spry.Effect.Animator>Spry.<Spry.Effect>Effect</Spry.Effect>.Animator</Spry.Effect.Animator>()</Spry.Effect.Animator>;
Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Move>Move</Spry.Effect.Move>.<Spry.Effect.Move.prototype>prototype</Spry.Effect.Move.prototype>.<String>constructor</String> = <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Move>Move</Spry.Effect.Move>.<Spry.Effect.Move.prototype>prototype</Spry.Effect.Move.prototype>.<String>animate</String> = <Function>function(position)
{
	var <Number>left = <Number>0</Number></Number>;
	var <Number>top = <Number>0</Number></Number>;
	
	if (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards></Boolean>) {
		left = this.startX - (this.rangeMoveX * position);
		top = this.startY - (this.rangeMoveY * position);
	} else if (<Boolean>this.direction == <Spry.backwards>Spry.backwards</Spry.backwards></Boolean>) {
		left = this.rangeMoveX * position + this.stopX;
		top = this.rangeMoveY * position + this.stopY;
	}

	//Spry.Debug.trace(top);
	
	this.element.style.<String>left</String> = left + <String>"px"</String>;
	this.element.style.<String>top</String> = top + <String>"px"</String>;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Move>Move</Spry.Effect.Move>.<Spry.Effect.Move.prototype>prototype</Spry.Effect.Move.prototype>.<String>reset</String> = <Function>function()
{
	if(!this.isFinished)
	{
		this.cancel();
		this.<String>startX</String> = this.startX;
		this.<String>startY</String> = this.startY;
	}
}</Function>

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.MoveSlide
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>MoveSlide</String> = <Function>function(<HTMLElement>element</HTMLElement>, fromPos, toPos, options)
{
	this.<String>name</String> = <String>'MoveSlide'</String>;

	<Spry.Effect.Animator.call>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.call>call</Spry.Effect.Animator.call>(this, options)</Spry.Effect.Animator.call>;

	this.<String>element</String> = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement>;
	this.<String>firstChildElement</String> = <Spry.Effect.Utils.getFirstChildElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getFirstChildElement>getFirstChildElement</Spry.Effect.Utils.getFirstChildElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.Utils.getFirstChildElement>;

	var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
	this.<String>startHeight</String> = <originalRect.height>originalRect.height</originalRect.height>;

	this.<String>startX</String> = <Number>Number(<fromPos.x>fromPos.x</fromPos.x>)</Number>;
	this.<String>stopX</String> = <Number>Number(<toPos.x>toPos.x</toPos.x>)</Number>;
	this.<String>startY</String> = <Number>Number(<fromPos.y>fromPos.y</fromPos.y>)</Number>;
	this.<String>stopY</String> = <Number>Number(<toPos.y>toPos.y</toPos.y>)</Number>;

	this.<String>rangeMoveX</String> = this.startX - this.stopX;
	this.<String>rangeMoveY</String> = this.startY - this.stopY;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.MoveSlide>MoveSlide</Spry.Effect.MoveSlide>.<String>prototype</String> = <Spry.Effect.Animator>new <Spry.Effect.Animator>Spry.<Spry.Effect>Effect</Spry.Effect>.Animator</Spry.Effect.Animator>()</Spry.Effect.Animator>;
Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.MoveSlide>MoveSlide</Spry.Effect.MoveSlide>.<Spry.Effect.MoveSlide.prototype>prototype</Spry.Effect.MoveSlide.prototype>.<String>constructor</String> = <Spry.Effect.MoveSlide>Spry.<Spry.Effect>Effect</Spry.Effect>.MoveSlide</Spry.Effect.MoveSlide>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.MoveSlide>MoveSlide</Spry.Effect.MoveSlide>.<Spry.Effect.MoveSlide.prototype>prototype</Spry.Effect.MoveSlide.prototype>.<String>animate</String> = <Function>function(position)
{
	var yStart      = (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards>)</Boolean> ? this.startY : this.stopY;
	var yStop       = (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards>)</Boolean> ? this.stopY : this.startY;
	var top         = (<Boolean>yStart &gt; yStop)</Boolean> ? position * (yStop - yStart) : (<Number>1</Number> - position) * (yStart - yStop);
	var eltHeight   = yStart + position * (yStop - yStart);

	if(<Boolean>eltHeight&lt;<Number>0</Number></Boolean>) <Number>eltHeight</Number> = <Number>0</Number>;

	this.firstChildElement.style.<String>top</String> = top + <String>'px'</String>;
	this.element.style.<String>height</String> = <Number>eltHeight</Number> + <String>'px'</String>;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.MoveSlide>MoveSlide</Spry.Effect.MoveSlide>.<Spry.Effect.MoveSlide.prototype>prototype</Spry.Effect.MoveSlide.prototype>.<String>reset</String> = <Function>function()
{
	if(!this.isFinished)
	{
		this.cancel();
		this.<String>startX</String> = this.startX;
		this.<String>startY</String> = this.startY;
	}
}</Function>

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Size
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Size</String> = <Function>function(<HTMLElement>element</HTMLElement>, fromRect, toRect, options)
{
	this.<String>name</String> = <String>'Size'</String>;
	
	<Spry.Effect.Animator.call>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.call>call</Spry.Effect.Animator.call>(this, options)</Spry.Effect.Animator.call>;

	this.<String>element</String> = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement>;

	var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
	this.<String>originalWidth</String> = <originalRect.width>originalRect.width</originalRect.width>;

	this.<String>startWidth</String> = <fromRect.width>fromRect.width</fromRect.width>;
	this.<String>startHeight</String> = <fromRect.height>fromRect.height</fromRect.height>;
	this.<String>stopWidth</String> = <toRect.width>toRect.width</toRect.width>;
	this.<String>stopHeight</String> = <toRect.height>toRect.height</toRect.height>;

	if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(this.startWidth)</Spry.Effect.Utils.isPercentValue>)
	{
		var startWidthPercent = <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(this.startWidth)</Spry.Effect.Utils.getPercentValue>;
		//var originalRect = Spry.Effect.getDimensions(element);
		this.<String>startWidth</String> = <originalRect.width>originalRect.width</originalRect.width> * (startWidthPercent / <Number>100</Number>);
	}

	if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(this.startHeight)</Spry.Effect.Utils.isPercentValue>)
	{
		var startHeightPercent = <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(this.startHeight)</Spry.Effect.Utils.getPercentValue>;
		//var originalRect = Spry.Effect.getDimensions(element);
		this.<String>startHeight</String> = <originalRect.height>originalRect.height</originalRect.height> * (startHeightPercent / <Number>100</Number>);
	}

	if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(this.stopWidth)</Spry.Effect.Utils.isPercentValue>)
	{
		var stopWidthPercent = <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(this.stopWidth)</Spry.Effect.Utils.getPercentValue>;
		var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
		this.<String>stopWidth</String> = <originalRect.width>originalRect.width</originalRect.width> * (stopWidthPercent / <Number>100</Number>);
	}

	if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(this.stopHeight)</Spry.Effect.Utils.isPercentValue>)
	{
		var stopHeightPercent = <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(this.stopHeight)</Spry.Effect.Utils.getPercentValue>;
		var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
		this.<String>stopHeight</String> = <originalRect.height>originalRect.height</originalRect.height> * (stopHeightPercent / <Number>100</Number>);
	}
		
	this.<String>widthRange</String> = this.startWidth - this.stopWidth;
	this.<String>heightRange</String> = this.startHeight - this.stopHeight;
	
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Size>Size</Spry.Effect.Size>.<String>prototype</String> = <Spry.Effect.Animator>new <Spry.Effect.Animator>Spry.<Spry.Effect>Effect</Spry.Effect>.Animator</Spry.Effect.Animator>()</Spry.Effect.Animator>;
Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Size>Size</Spry.Effect.Size>.<Spry.Effect.Size.prototype>prototype</Spry.Effect.Size.prototype>.<String>constructor</String> = <Spry.Effect.Size>Spry.<Spry.Effect>Effect</Spry.Effect>.Size</Spry.Effect.Size>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Size>Size</Spry.Effect.Size>.<Spry.Effect.Size.prototype>prototype</Spry.Effect.Size.prototype>.<String>animate</String> = <Function>function(position)
{
	var <Number>width = <Number>0</Number></Number>;
	var <Number>height = <Number>0</Number></Number>;
	var <Number>fontSize = <Number>0</Number></Number>;

	if (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards></Boolean>) {
		width = this.startWidth - (this.widthRange * position);
		height = this.startHeight - (this.heightRange * position);
		fontSize = (this.startWidth + position*(this.stopWidth - this.startWidth))/this.originalWidth;
	} else if (<Boolean>this.direction == <Spry.backwards>Spry.backwards</Spry.backwards></Boolean>) {
		width = this.widthRange * position + this.stopWidth;
		height = this.heightRange * position + this.stopHeight;
		fontSize = (this.stopWidth + position*(this.startWidth - this.stopWidth))/this.originalWidth;
	}
	if (<Boolean>this.options.scaleContent == <Boolean>true</Boolean></Boolean>)
		this.element.style.<String>fontSize</String> = fontSize + <String>'em'</String>;

	//Spry.Debug.trace(fontSize);

	this.element.style.<String>width</String> = width + <String>"px"</String>;
	this.element.style.<String>height</String> = height + <String>"px"</String>;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Size>Size</Spry.Effect.Size>.<Spry.Effect.Size.prototype>prototype</Spry.Effect.Size.prototype>.<String>reset</String> = <Function>function()
{
	if(!this.isFinished)
	{
		this.cancel();
		this.<String>startWidth</String> = this.startWidth;
		this.<String>startHeight</String> = this.startHeight;
	}
}</Function>

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Opacity
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Opacity</String> = <Function>function(<HTMLElement>element</HTMLElement>, startOpacity, stopOpacity, options)
{
	this.<String>name</String> = <String>'Opacity'</String>;
	
	<Spry.Effect.Animator.call>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.call>call</Spry.Effect.Animator.call>(this, options)</Spry.Effect.Animator.call>;

	this.<String>element</String> = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement>;

	this.<String>startOpacity</String> = startOpacity;
	this.<String>stopOpacity</String> = stopOpacity;
	this.<String>opacityRange</String> = this.startOpacity - this.stopOpacity;

}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Opacity>Opacity</Spry.Effect.Opacity>.<String>prototype</String> = <Spry.Effect.Animator>new <Spry.Effect.Animator>Spry.<Spry.Effect>Effect</Spry.Effect>.Animator</Spry.Effect.Animator>()</Spry.Effect.Animator>;
Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Opacity>Opacity</Spry.Effect.Opacity>.<Spry.Effect.Opacity.prototype>prototype</Spry.Effect.Opacity.prototype>.<String>constructor</String> = <Spry.Effect.Opacity>Spry.<Spry.Effect>Effect</Spry.Effect>.Opacity</Spry.Effect.Opacity>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Opacity>Opacity</Spry.Effect.Opacity>.<Spry.Effect.Opacity.prototype>prototype</Spry.Effect.Opacity.prototype>.<String>animate</String> = <Function>function(position)
{
	var <Number>opacity = <Number>0</Number></Number>;

	if (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards></Boolean>) {
		opacity = this.startOpacity - (this.opacityRange * position);
	} else if (<Boolean>this.direction == <Spry.backwards>Spry.backwards</Spry.backwards></Boolean>) {
		opacity = this.opacityRange * position + this.stopOpacity;
	}
	
	this.element.style.<String>opacity</String> = opacity;
	this.element.style.<String>filter</String> = <String>"alpha(opacity="</String> + <Math.floor>Math.<Math.floor>floor</Math.floor>(opacity * <Number>100</Number>)</Math.floor> + <String>")"</String>;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Opacity>Opacity</Spry.Effect.Opacity>.<Spry.Effect.Opacity.prototype>prototype</Spry.Effect.Opacity.prototype>.<String>reset</String> = <Function>function()
{
	if(!this.isFinished)
	{
		this.cancel();
		this.<String>startOpacity</String> = this.startOpacity;
	}
}</Function>


//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Color
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Color</String> = <Function>function(<HTMLElement>element</HTMLElement>, startColor, stopColor, options)
{
	this.<String>name</String> = <String>'Color'</String>;
	
	<Spry.Effect.Animator.call>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Animator>Animator</Spry.Effect.Animator>.<Spry.Effect.Animator.call>call</Spry.Effect.Animator.call>(this, options)</Spry.Effect.Animator.call>;

	this.<String>element</String> = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement>;
	
	this.<String>startColor</String> = startColor;
	this.<String>stopColor</String> = stopColor;
	this.<String>startRedColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<startColor.substr>startColor.<startColor.substr>substr</startColor.substr>(<Number>1</Number>,<Number>2</Number>)</startColor.substr>)</Spry.Effect.Utils.hexToInt>;
	this.<String>startGreenColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<startColor.substr>startColor.<startColor.substr>substr</startColor.substr>(<Number>3</Number>,<Number>2</Number>)</startColor.substr>)</Spry.Effect.Utils.hexToInt>;
	this.<String>startBlueColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<startColor.substr>startColor.<startColor.substr>substr</startColor.substr>(<Number>5</Number>,<Number>2</Number>)</startColor.substr>)</Spry.Effect.Utils.hexToInt>;
	this.<String>stopRedColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<stopColor.substr>stopColor.<stopColor.substr>substr</stopColor.substr>(<Number>1</Number>,<Number>2</Number>)</stopColor.substr>)</Spry.Effect.Utils.hexToInt>;
	this.<String>stopGreenColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<stopColor.substr>stopColor.<stopColor.substr>substr</stopColor.substr>(<Number>3</Number>,<Number>2</Number>)</stopColor.substr>)</Spry.Effect.Utils.hexToInt>;
	this.<String>stopBlueColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<stopColor.substr>stopColor.<stopColor.substr>substr</stopColor.substr>(<Number>5</Number>,<Number>2</Number>)</stopColor.substr>)</Spry.Effect.Utils.hexToInt>;
	this.<String>redColorRange</String> = this.startRedColor - this.stopRedColor;
	this.<String>greenColorRange</String> = this.startGreenColor - this.stopGreenColor;
	this.<String>blueColorRange</String> = this.startBlueColor - this.stopBlueColor;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Color>Color</Spry.Effect.Color>.<String>prototype</String> = <Spry.Effect.Animator>new <Spry.Effect.Animator>Spry.<Spry.Effect>Effect</Spry.Effect>.Animator</Spry.Effect.Animator>()</Spry.Effect.Animator>;
Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Color>Color</Spry.Effect.Color>.<Spry.Effect.Color.prototype>prototype</Spry.Effect.Color.prototype>.<String>constructor</String> = <Spry.Effect.Color>Spry.<Spry.Effect>Effect</Spry.Effect>.Color</Spry.Effect.Color>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Color>Color</Spry.Effect.Color>.<Spry.Effect.Color.prototype>prototype</Spry.Effect.Color.prototype>.<String>animate</String> = <Function>function(position)
{
	var <Number>redColor = <Number>0</Number></Number>;
	var <Number>greenColor = <Number>0</Number></Number>;
	var <Number>blueColor = <Number>0</Number></Number>;
	
	if (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards></Boolean>) {
		redColor = <parseInt>parseInt(this.startRedColor - (this.redColorRange * position))</parseInt>;
		greenColor = <parseInt>parseInt(this.startGreenColor - (this.greenColorRange * position))</parseInt>;
		blueColor = <parseInt>parseInt(this.startBlueColor - (this.blueColorRange * position))</parseInt>;
	} else if (<Boolean>this.direction == <Spry.backwards>Spry.backwards</Spry.backwards></Boolean>) {
		redColor = <parseInt>parseInt(this.redColorRange * position)</parseInt> + this.stopRedColor;
		greenColor = <parseInt>parseInt(this.greenColorRange * position)</parseInt> + this.stopGreenColor;
		blueColor = <parseInt>parseInt(this.blueColorRange * position)</parseInt> + this.stopBlueColor;
	}

	this.element.style.<String>backgroundColor</String> = <Spry.Effect.Utils.rgb>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.rgb>rgb</Spry.Effect.Utils.rgb>(redColor, greenColor, blueColor)</Spry.Effect.Utils.rgb>;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Color>Color</Spry.Effect.Color>.<Spry.Effect.Color.prototype>prototype</Spry.Effect.Color.prototype>.<String>reset</String> = <Function>function()
{
	if(!this.isFinished)
	{
		this.cancel();
		this.<String>startColor</String> = this.startColor;
		this.<String>startRedColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<startColor.substr>startColor.<startColor.substr>substr</startColor.substr>(<Number>1</Number>,<Number>2</Number>)</startColor.substr>)</Spry.Effect.Utils.hexToInt>;
		this.<String>startGreenColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<startColor.substr>startColor.<startColor.substr>substr</startColor.substr>(<Number>3</Number>,<Number>2</Number>)</startColor.substr>)</Spry.Effect.Utils.hexToInt>;
		this.<String>startBlueColor</String> = <Spry.Effect.Utils.hexToInt>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.hexToInt>hexToInt</Spry.Effect.Utils.hexToInt>(<startColor.substr>startColor.<startColor.substr>substr</startColor.substr>(<Number>5</Number>,<Number>2</Number>)</startColor.substr>)</Spry.Effect.Utils.hexToInt>;
	}
}</Function>

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.ClusteredEffect
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>ClusteredEffect</String> = <Function>function(effect, kind)
{
	this.<String>effect</String> = effect;
	this.<String>kind</String> = kind;
}</Function>

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.Cluster
//
//////////////////////////////////////////////////////////////////////

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Cluster</String> = <Function>function()
{
	this.<String>name</String> = <String>'Cluster'</String>;
	this.<String>effectsArray</String> = <Array>new Array()</Array>;
	this.<String>currIdx</String> = -<Number>1</Number>;
	this.<String>direction</String> = <Spry.forwards>Spry.forwards</Spry.forwards>;
	this.<String>options</String> = {toggle: <Boolean>false</Boolean>};
	this.<String>clusterIsFinished</String> = <Boolean>false</Boolean>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>addNextEffect</String> = <Function>function(effect)
{
	this.effectsArray[this.effectsArray.length] = <Spry.Effect.ClusteredEffect>new <Spry.Effect.ClusteredEffect>Spry.<Spry.Effect>Effect</Spry.Effect>.ClusteredEffect</Spry.Effect.ClusteredEffect>(effect, <String>"queue"</String>)</Spry.Effect.ClusteredEffect>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>addParallelEffect</String> = <Function>function(effect)
{
	this.effectsArray[this.effectsArray.length] = <Spry.Effect.ClusteredEffect>new <Spry.Effect.ClusteredEffect>Spry.<Spry.Effect>Effect</Spry.Effect>.ClusteredEffect</Spry.Effect.ClusteredEffect>(effect, <String>"parallel"</String>)</Spry.Effect.ClusteredEffect>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>getNextEffect</String> = <Function>function()
{
	if (<Boolean>(this.currIdx + <Number>1</Number>) &lt; (this.effectsArray.length)</Boolean>)
	{
		this.<String>currIdx</String> = this.currIdx + <Number>1</Number>;
		return this.effectsArray[this.currIdx].effect;
	}
	else
	{
		return null;
	}
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>resetIndex</String> = <Function>function()
{
	this.<String>currIdx</String> = -<Number>1</Number>;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>start</String> = <Function>function()
{
	// before queue starts possible setup callback action is executed
	if (this.setup) 
	{
		try
		{
			this.setup(this.effectsArray[<Number>0</Number>].effect.element, this.effectsArray);
		}
		catch (e) {<alert>alert(<String>'ERR: Spry.Effect.Cluster.prototype.start: '</String> + e)</alert>;}
	}
	this.<String>currIdx</String> = <Number>0</Number>;
	var <Boolean>quit = <Boolean>false</Boolean></Boolean>;
	while (<Boolean><Boolean>quit</Boolean> == <Boolean>false</Boolean></Boolean>)
	{
		this.effectsArray[this.currIdx].effect.start(this);
		if (<Boolean>(this.currIdx + <Number>1</Number>) &lt; (this.effectsArray.length)</Boolean>)
		{
			if (<Boolean>this.effectsArray[this.currIdx].kind == <String>"queue"</String></Boolean>)
			{
				<Boolean>quit</Boolean> = <Boolean>true</Boolean>;
			}
		}
		else
		{
			<Boolean>quit</Boolean> = <Boolean>true</Boolean>;
		}
		if (<Boolean><Boolean>quit</Boolean> == <Boolean>false</Boolean></Boolean>) 
		{
			this.currIdx++;
		}
	}
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>startNextEffect</String> = <Function>function()
{
	if (<Boolean>(this.currIdx + <Number>1</Number>) &lt; (this.effectsArray.length)</Boolean>)
	{
		this.currIdx++;
		this.effectsArray[this.currIdx].effect.start(this);
	} else {
		// time for finish callback
		if (this.finish) 
		{
			try
			{
				this.finish(this.effectsArray[<Number>0</Number>].effect.element, this.effectsArray);
			}
			catch (e) {<alert>alert(<String>'ERR: Spry.Effect.Cluster.prototype.startNextEffect: '</String> + e)</alert>;}
		}
		this.<String>clusterIsFinished</String> = <Boolean>true</Boolean>;
	}
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>setToggle</String> = <Function>function(doToggle)
{
	this.options.<String>toggle</String> = doToggle;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>doToggle</String> = <Function>function()
{
	if (<Boolean>this.options.toggle == <Boolean>true</Boolean></Boolean>) {
		if (<Boolean>this.direction == <Spry.forwards>Spry.forwards</Spry.forwards></Boolean>) {
			this.<String>direction</String> = <Spry.backwards>Spry.backwards</Spry.backwards>;
		} else if (<Boolean>this.direction == <Spry.backwards>Spry.backwards</Spry.backwards></Boolean>) {
			this.<String>direction</String> = <Spry.forwards>Spry.forwards</Spry.forwards>;
		}
	
		// toggle all effects of the cluster, too
		for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.effectsArray.length</Boolean>; <Number>i</Number>++) 
		{
			if (this.effectsArray[<Number>i</Number>].effect.options &amp;&amp; (<Boolean>this.effectsArray[<Number>i</Number>].effect.options.toggle != null)</Boolean>) {
				if (<Boolean>this.effectsArray[<Number>i</Number>].effect.options.toggle == <Boolean>true</Boolean></Boolean>)
				{
					this.effectsArray[<Number>i</Number>].effect.doToggle();
				}
			}
		}
	}
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>reset</String> = <Function>function()
{
	if (<Boolean>this.currIdx == -<Number>1</Number></Boolean>) return;
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.effectsArray.length</Boolean>; <Number>i</Number>++) 
	{	
		if (!this.effectsArray[<Number>i</Number>].effect.isFinished)
			this.effectsArray[<Number>i</Number>].effect.reset();
	}
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Cluster>Cluster</Spry.Effect.Cluster>.<Spry.Effect.Cluster.prototype>prototype</Spry.Effect.Cluster.prototype>.<String>cancel</String> = <Function>function()
{
	for (var <Number>i = <Number>0</Number></Number>; <Boolean><Number>i</Number> &lt; this.effectsArray.length</Boolean>; <Number>i</Number>++)
	{
		if (<Boolean>this.effectsArray[<Number>i</Number>].effect.timer != null</Boolean>) 
			this.effectsArray[<Number>i</Number>].effect.cancel();
	}
}</Function>

//////////////////////////////////////////////////////////////////////
//
// Spry.Effect.AnimatedElement
//
//////////////////////////////////////////////////////////////////////


Spry.<Spry.Effect>Effect</Spry.Effect>.<String>AnimatedElement</String> = <Function>function (<HTMLElement>element</HTMLElement>) 
{
	this.<String>element</String> = <HTMLElement>element</HTMLElement>;
	this.<String>currentEffect</String> = -<Number>1</Number>;
	this.<String>effectArray</String> = <Array>new Array()</Array>;
}</Function>


//////////////////////////////////////////////////////////////////////
//
// Combination effects
// Custom effects can be build by combining basic effect bahaviour
// like Move, Size, Color, Opacity
//
//////////////////////////////////////////////////////////////////////


Spry.<Spry.Effect>Effect</Spry.Effect>.<String>AppearFade</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	//this.opacity = Spry.Effect.getStyleProp(element, "opacity");
	/*
	if (!this.opacity) {
		this.opacity = 1.0; // Argh, just assume it is fully visible.
	} else {
		this.opacity = parseFloat(this.opacity);
	}
	*/

	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;

	var <Number>durationInMilliseconds = <Number>1000</Number></Number>;
	var <Number>fromOpacity = <Number>0.0</Number></Number>;
	var <Number>toOpacity = <Number>100.0</Number></Number>;
	var <Boolean>doToggle = <Boolean>false</Boolean></Boolean>;
	var <Spry.sinusoidalTransition>kindOfTransition = <Spry.sinusoidalTransition>Spry.sinusoidalTransition</Spry.sinusoidalTransition></Spry.sinusoidalTransition>;
	var setupCallback = null;
	var finishCallback = null;

	

	if (options)
	{
		if (<Boolean><Number>options.duration</Number> != null</Boolean>) <Number>durationInMilliseconds</Number> = <Number>options.duration</Number>;
		if (<Boolean><options.from>options.from</options.from> != null</Boolean>) <options.from>fromOpacity</options.from> = <options.from>options.from</options.from>;
		if (<Boolean><options.to>options.to</options.to> != null</Boolean>) <options.to>toOpacity</options.to> = <options.to>options.to</options.to>;
		if (<Boolean><Boolean>options.toggle</Boolean> != null</Boolean>) <Boolean>doToggle</Boolean> = <Boolean>options.toggle</Boolean>;
		if (<Boolean><options.transition>options.transition</options.transition> != null</Boolean>) <options.transition>kindOfTransition</options.transition> = <options.transition>options.transition</options.transition>;
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}
	options = {duration: <Number>durationInMilliseconds</Number>, toggle: <Boolean>doToggle</Boolean>, transition: <options.transition>kindOfTransition</options.transition>, setup: <options.setup>setupCallback</options.setup>, finish: <options.finish>finishCallback</options.finish>, from: <options.from>fromOpacity</options.from>, to: <options.to>toOpacity</options.to>};

	fromOpacity = fromOpacity/ <Number>100.0</Number>;
	toOpacity = toOpacity / <Number>100.0</Number>;

	var <Spry.Effect.Opacity>appearFadeEffect = <Spry.Effect.Opacity>new <Spry.Effect.Opacity>Spry.<Spry.Effect>Effect</Spry.Effect>.Opacity</Spry.Effect.Opacity>(<HTMLElement>element</HTMLElement>, fromOpacity, toOpacity, options)</Spry.Effect.Opacity></Spry.Effect.Opacity>;

	<Spry.Effect.Opacity>appearFadeEffect</Spry.Effect.Opacity>.<String>name</String> = <String>'AppearFade'</String>;
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Opacity>appearFadeEffect</Spry.Effect.Opacity>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;


Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Blind</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;

	<HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>.<String>overflow</String> = <String>'hidden'</String>;

	var <Number>durationInMilliseconds = <Number>1000</Number></Number>;
	var <Number>fromHeight = <Number>100</Number></Number>;
	var <Number>toHeight = <Number>0</Number></Number>;
	var <Boolean>doToggle = <Boolean>false</Boolean></Boolean>;
	var <Spry.sinusoidalTransition>kindOfTransition = <Spry.sinusoidalTransition>Spry.sinusoidalTransition</Spry.sinusoidalTransition></Spry.sinusoidalTransition>;
	var <Boolean>doScaleContent = <Boolean>false</Boolean></Boolean>;
	var setupCallback = null;
	var finishCallback = null;

	var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
	
	var <originalRect.width>startWidthPx = <originalRect.width>originalRect.width</originalRect.width></originalRect.width>;
	var <originalRect.height>startHeightPx = <originalRect.height>originalRect.height</originalRect.height></originalRect.height>;

	var <options.from>optionFrom = <options.from>options.from</options.from></options.from>;
	var <options.to>optionTo   = <options.to>options.to</options.to></options.to>;

	

	if (options)
	{
		if (<Boolean><Number>options.duration</Number> != null</Boolean>) <Number>durationInMilliseconds</Number> = <Number>options.duration</Number>;
		if (<Boolean><options.from>options.from</options.from> != null</Boolean>)
		{
			if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.isPercentValue>)
			{
				fromHeight = <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPercentValue>;
			}
			else
			{
				fromHeight = (<Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPixelValue> / <originalRect.height>startHeightPx</originalRect.height>) * <Number>100</Number>;
			}
		}
		if (<Boolean><options.to>options.to</options.to> != null</Boolean>)
		{
			if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.isPercentValue>)
			{
				toHeight = <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPercentValue>;
			}
			else
			{
				toHeight = (<Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPixelValue> / <originalRect.height>startHeightPx</originalRect.height>) * <Number>100</Number>;
			}
		}
		if (<Boolean><Boolean>options.toggle</Boolean> != null</Boolean>) <Boolean>doToggle</Boolean> = <Boolean>options.toggle</Boolean>;
		if (<Boolean><options.transition>options.transition</options.transition> != null</Boolean>) <options.transition>kindOfTransition</options.transition> = <options.transition>options.transition</options.transition>;
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}
	
	var <originalRect.width>stopWidthPx = <originalRect.width>startWidthPx</originalRect.width></originalRect.width>;
	var <originalRect.height>stopHeightPx = <originalRect.height>startHeightPx</originalRect.height></originalRect.height>;
	
	var <Spry.Effect.Utils.Rectangle>fromRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <originalRect.width>startWidthPx</originalRect.width>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <originalRect.height>startHeightPx</originalRect.height> * (fromHeight / <Number>100</Number>);
	
	var <Spry.Effect.Utils.Rectangle>toRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <originalRect.width>stopWidthPx</originalRect.width>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <originalRect.height>stopHeightPx</originalRect.height> * (toHeight / <Number>100</Number>);

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, transition:<options.transition>kindOfTransition</options.transition>, scaleContent:<Boolean>doScaleContent</Boolean>, setup: <options.setup>setupCallback</options.setup>, finish: <options.finish>finishCallback</options.finish>, from: <options.from>optionFrom</options.from>, to: <options.to>optionTo</options.to>};

	var <Spry.Effect.Size>blindEffect = <Spry.Effect.Size>new <Spry.Effect.Size>Spry.<Spry.Effect>Effect</Spry.Effect>.Size</Spry.Effect.Size>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>, <Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>, options)</Spry.Effect.Size></Spry.Effect.Size>;
	<Spry.Effect.Size>blindEffect</Spry.Effect.Size>.<String>name</String> = <String>'Blind'</String>;
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Size>blindEffect</Spry.Effect.Size>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;


<Function>function <void>setupHighlight</void>(<HTMLElement>element</HTMLElement>, effect) 
{
	<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'background-image'</String>, <String>'none'</String>)</Spry.Effect.setStyleProp>;
}</Function>;

<Function>function <void>finishHighlight</void>(<HTMLElement>element</HTMLElement>, effect) 
{
	<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'background-image'</String>, <effect.options.restoreBackgroundImage>effect.<effect.options>options</effect.options>.restoreBackgroundImage</effect.options.restoreBackgroundImage>)</Spry.Effect.setStyleProp>;

	if (<Boolean><effect.direction>effect.direction</effect.direction> == <Spry.forwards>Spry.forwards</Spry.forwards></Boolean>)
		<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'background-color'</String>, <effect.options.restoreColor>effect.<effect.options>options</effect.options>.restoreColor</effect.options.restoreColor>)</Spry.Effect.setStyleProp>;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Highlight</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{	
	var <Number>durationInMilliseconds = <Number>1000</Number></Number>;
	var <String>toColor = <String>"#ffffff"</String></String>;
	var <Boolean>doToggle = <Boolean>false</Boolean></Boolean>;
	var <Spry.sinusoidalTransition>kindOfTransition = <Spry.sinusoidalTransition>Spry.sinusoidalTransition</Spry.sinusoidalTransition></Spry.sinusoidalTransition>;
	var <void>setupCallback = <void>setupHighlight</void></void>;
	var <void>finishCallback = <void>finishHighlight</void></void>;
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;
	var fromColor = <Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>"background-color"</String>)</Spry.Effect.getStyleProp>;
	var restoreColor = fromColor;
	if (<Boolean>fromColor == <String>"transparent"</String></Boolean>) <String>fromColor</String> = <String>"#ffff99"</String>;

	var <options.from>optionFrom = <options.from>options.from</options.from></options.from>;
	var <options.to>optionTo   = <options.to>options.to</options.to></options.to>;


	

	if (options)
	{
		if (<Boolean><Number>options.duration</Number> != null</Boolean>) <Number>durationInMilliseconds</Number> = <Number>options.duration</Number>;
		if (<Boolean><options.from>options.from</options.from> != null</Boolean>) <options.from>fromColor</options.from> = <options.from>options.from</options.from>;
		if (<Boolean><options.to>options.to</options.to> != null</Boolean>) <options.to>toColor</options.to> = <options.to>options.to</options.to>;
		if (<options.restoreColor>options.restoreColor</options.restoreColor>) <options.restoreColor>restoreColor</options.restoreColor> = <options.restoreColor>options.restoreColor</options.restoreColor>;
		if (<Boolean><Boolean>options.toggle</Boolean> != null</Boolean>) <Boolean>doToggle</Boolean> = <Boolean>options.toggle</Boolean>;
		if (<Boolean><options.transition>options.transition</options.transition> != null</Boolean>) <options.transition>kindOfTransition</options.transition> = <options.transition>options.transition</options.transition>;
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}

	var restoreBackgroundImage = <Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>'background-image'</String>)</Spry.Effect.getStyleProp>;
	
	options = {duration: <Number>durationInMilliseconds</Number>, toggle: <Boolean>doToggle</Boolean>, transition: <options.transition>kindOfTransition</options.transition>, setup: <options.setup>setupCallback</options.setup>, finish: <options.finish>finishCallback</options.finish>, <options.restoreColor>restoreColor</options.restoreColor>: <options.restoreColor>restoreColor</options.restoreColor>, restoreBackgroundImage: restoreBackgroundImage, from: <options.from>optionFrom</options.from>, to: <options.to>optionTo</options.to>};

	var <Spry.Effect.Color>highlightEffect = <Spry.Effect.Color>new <Spry.Effect.Color>Spry.<Spry.Effect>Effect</Spry.Effect>.Color</Spry.Effect.Color>(<HTMLElement>element</HTMLElement>, <options.from>fromColor</options.from>, <options.to>toColor</options.to>, options)</Spry.Effect.Color></Spry.Effect.Color>;
	<Spry.Effect.Color>highlightEffect</Spry.Effect.Color>.<String>name</String> = <String>'Highlight'</String>;
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Color>highlightEffect</Spry.Effect.Color>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;	
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Slide</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;

	var <Number>durationInMilliseconds = <Number>2000</Number></Number>;
	var <Boolean>doToggle = <Boolean>false</Boolean></Boolean>;
	var <Spry.sinusoidalTransition>kindOfTransition = <Spry.sinusoidalTransition>Spry.sinusoidalTransition</Spry.sinusoidalTransition></Spry.sinusoidalTransition>;
	var setupCallback = null;
	var finishCallback = null;
	var firstChildElt = <Spry.Effect.Utils.getFirstChildElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getFirstChildElement>getFirstChildElement</Spry.Effect.Utils.getFirstChildElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.Utils.getFirstChildElement>;

	
	<Spry.Effect.makeClipping>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makeClipping</void>(<HTMLElement>element</HTMLElement>)</Spry.Effect.makeClipping>;

	// for IE 6 on win: check if position is static or fixed -&gt; not supported and would cause trouble
	if(<RegExp.test><RegExp>/MSIE 6.0/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test> &amp;&amp; <RegExp.test><RegExp>/Windows NT 5.1/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>)
	{
		var pos = <Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>'position'</String>)</Spry.Effect.getStyleProp>;
		if(pos &amp;&amp; (<Boolean>pos == <String>'static'</String></Boolean> || <Boolean>pos == <String>'fixed'</String></Boolean>))
		{
			<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'position'</String>, <String>'relative'</String>)</Spry.Effect.setStyleProp>;
			<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'top'</String>, <String>''</String>)</Spry.Effect.setStyleProp>;
			<Spry.Effect.setStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.setStyleProp>setStyleProp</Spry.Effect.setStyleProp>(<HTMLElement>element</HTMLElement>, <String>'left'</String>, <String>''</String>)</Spry.Effect.setStyleProp>;
		}
	}

	if(firstChildElt)
	{
		<Spry.Effect.makePositioned>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makePositioned</void>(firstChildElt)</Spry.Effect.makePositioned>;
		<Spry.Effect.makeClipping>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makeClipping</void>(firstChildElt)</Spry.Effect.makeClipping>;
	}

	var elementRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
	var <Spry.Effect.Utils.Position>startOffsetPosition = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position>()</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(firstChildElt, <String>"left"</String>)</Spry.Effect.getStyleProp>)</parseInt>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(firstChildElt, <String>"top"</String>)</Spry.Effect.getStyleProp>)</parseInt>;
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <Number>0</Number>;
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <Number>0</Number>;

	var <elementRect.height>verticalMovePx = <elementRect.height>elementRect.height</elementRect.height></elementRect.height>;

	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> - <elementRect.height>verticalMovePx</elementRect.height>;

	var <options.from>optionFrom = <options.from>options.from</options.from></options.from>;
	var <options.to>optionTo   = <options.to>options.to</options.to></options.to>;

	if (options)
	{
		if (<Boolean><Number>options.duration</Number> != null</Boolean>) <Number>durationInMilliseconds</Number> = <Number>options.duration</Number>;

		if (<Boolean><options.from>options.from</options.from> != null</Boolean>)
		{
			if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.isPercentValue>)
				<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <elementRect.height>verticalMovePx</elementRect.height> * <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPercentValue> / <Number>100</Number>;
			else
				<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPixelValue>;
		}

		if (<Boolean><options.to>options.to</options.to> != null</Boolean>)
		{
			if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.isPercentValue>)
				<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <elementRect.height>verticalMovePx</elementRect.height> * <Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPercentValue> / <Number>100</Number>;
			else
				<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPixelValue>;
		}

		if (<Boolean><Boolean>options.toggle</Boolean> != null</Boolean>) <Boolean>doToggle</Boolean> = <Boolean>options.toggle</Boolean>;
		if (<Boolean><options.transition>options.transition</options.transition> != null</Boolean>) <options.transition>kindOfTransition</options.transition> = <options.transition>options.transition</options.transition>;
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, transition:<options.transition>kindOfTransition</options.transition>, setup: <options.setup>setupCallback</options.setup>, finish: <options.finish>finishCallback</options.finish>, from: <options.from>optionFrom</options.from>, to: <options.to>optionTo</options.to>};

	var <Spry.Effect.MoveSlide>slideEffect = <Spry.Effect.MoveSlide>new <Spry.Effect.MoveSlide>Spry.<Spry.Effect>Effect</Spry.Effect>.MoveSlide</Spry.Effect.MoveSlide>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.MoveSlide></Spry.Effect.MoveSlide>;
	<Spry.Effect.MoveSlide>slideEffect</Spry.Effect.MoveSlide>.<String>name</String> = <String>'Slide'</String>;
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.MoveSlide>slideEffect</Spry.Effect.MoveSlide>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;


Spry.<Spry.Effect>Effect</Spry.Effect>.<String>GrowShrink</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;
	
	<Spry.Effect.makePositioned>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makePositioned</void>(<HTMLElement>element</HTMLElement>)</Spry.Effect.makePositioned>; // for move
	<Spry.Effect.makeClipping>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makeClipping</void>(<HTMLElement>element</HTMLElement>)</Spry.Effect.makeClipping>;

	var <Spry.Effect.Utils.Position>startOffsetPosition = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position>()</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>"left"</String>)</Spry.Effect.getStyleProp>)</parseInt>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>"top"</String>)</Spry.Effect.getStyleProp>)</parseInt>;	
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <Number>0</Number>;
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <Number>0</Number>;
	
	var <Spry.Effect.Cluster>effectCluster = <Spry.Effect.Cluster>new <Spry.Effect.Cluster>Spry.<Spry.Effect>Effect</Spry.Effect>.Cluster</Spry.Effect.Cluster></Spry.Effect.Cluster></Spry.Effect.Cluster>;

	var dimRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
	var <dimRect.width>originalWidth = <dimRect.width>dimRect.width</dimRect.width></dimRect.width>;
	var <dimRect.height>originalHeight = <dimRect.height>dimRect.height</dimRect.height></dimRect.height>;

	var <Number>durationInMilliseconds = <Number>500</Number></Number>;
	var <Boolean>doToggle = <Boolean>false</Boolean></Boolean>;
	var <Spry.sinusoidalTransition>kindOfTransition = <Spry.sinusoidalTransition>Spry.sinusoidalTransition</Spry.sinusoidalTransition></Spry.sinusoidalTransition>;

	var <Spry.Effect.Utils.Rectangle>fromRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <Number>0</Number>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <Number>0</Number>;
	
	var <Spry.Effect.Utils.Rectangle>toRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <dimRect.width>originalWidth</dimRect.width>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <dimRect.height>originalHeight</dimRect.height>;

	var setupCallback = null;
	var finishCallback = null;

	var <Boolean>doScaleContent = <Boolean>true</Boolean></Boolean>;
	var <options.from>optionFrom = <options.from>options.from</options.from></options.from>;
	var <options.to>optionTo   = <options.to>options.to</options.to></options.to>;

	

	if (options)
	{
		if (<Boolean><Number>options.duration</Number> != null</Boolean>) <Number>durationInMilliseconds</Number> = <Number>options.duration</Number>;
		if (<Boolean><options.from>options.from</options.from> != null</Boolean>) 
		{
		if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.isPercentValue>)
			{
				<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <dimRect.width>originalWidth</dimRect.width> * (<Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPercentValue> / <Number>100</Number>);
				<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <dimRect.height>originalHeight</dimRect.height> * (<Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPercentValue> / <Number>100</Number>);
			}
			else
			{
				<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPixelValue>;
				<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.from>options.from</options.from>)</Spry.Effect.Utils.getPixelValue>;
			}
		}
		if (<Boolean><options.to>options.to</options.to> != null</Boolean>) 
		{
			if (<Spry.Effect.Utils.isPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.isPercentValue>isPercentValue</Spry.Effect.Utils.isPercentValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.isPercentValue>)
			{
				<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <dimRect.width>originalWidth</dimRect.width> * (<Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPercentValue> / <Number>100</Number>);
				<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <dimRect.height>originalHeight</dimRect.height> * (<Spry.Effect.Utils.getPercentValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPercentValue>getPercentValue</Spry.Effect.Utils.getPercentValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPercentValue> / <Number>100</Number>);
			}
			else
			{
				<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPixelValue>;
				<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <Spry.Effect.Utils.getPixelValue>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.<Spry.Effect.Utils.getPixelValue>getPixelValue</Spry.Effect.Utils.getPixelValue>(<options.to>options.to</options.to>)</Spry.Effect.Utils.getPixelValue>;
			}
		}
		if (<Boolean><Boolean>options.toggle</Boolean> != null</Boolean>) <Boolean>doToggle</Boolean> = <Boolean>options.toggle</Boolean>;
		if (<Boolean><options.transition>options.transition</options.transition> != null</Boolean>) <options.transition>kindOfTransition</options.transition> = <options.transition>options.transition</options.transition>;
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, transition:<options.transition>kindOfTransition</options.transition>, scaleContent:<Boolean>doScaleContent</Boolean>, from: <options.from>optionFrom</options.from>, to: <options.to>optionTo</options.to>};
	var <Spry.Effect.Size>sizeEffect = <Spry.Effect.Size>new <Spry.Effect.Size>Spry.<Spry.Effect>Effect</Spry.Effect>.Size</Spry.Effect.Size>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>, <Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>, options)</Spry.Effect.Size></Spry.Effect.Size>;
	<Spry.Effect.Cluster.addParallelEffect><Spry.Effect.Cluster>effectCluster</Spry.Effect.Cluster>.<void>addParallelEffect</void>(<Spry.Effect.Size>sizeEffect</Spry.Effect.Size>)</Spry.Effect.Cluster.addParallelEffect>;

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, transition:<options.transition>kindOfTransition</options.transition>, from: <options.from>optionFrom</options.from>, to: <options.to>optionTo</options.to>};
	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + (<dimRect.width>originalWidth</dimRect.width> - <Number><Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.width</Number>) / <Number>2.0</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + (<dimRect.height>originalHeight</dimRect.height> -<Number><Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.height</Number>) / <Number>2.0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + (<dimRect.width>originalWidth</dimRect.width> - <Number><Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.width</Number>) / <Number>2.0</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + (<dimRect.height>originalHeight</dimRect.height> -<Number><Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.height</Number>) / <Number>2.0</Number>;

	var initialProps2 = {top: <Number><Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.y</Number>, left: <Number><Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.x</Number>};

	var <Spry.Effect.Move>moveEffect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options, initialProps2)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addParallelEffect><Spry.Effect.Cluster>effectCluster</Spry.Effect.Cluster>.<void>addParallelEffect</void>(<Spry.Effect.Move>moveEffect</Spry.Effect.Move>)</Spry.Effect.Cluster.addParallelEffect>;

	<Spry.Effect.Cluster>effectCluster</Spry.Effect.Cluster>.<String>setup</String> = <options.setup>setupCallback</options.setup>;
	<Spry.Effect.Cluster>effectCluster</Spry.Effect.Cluster>.<String>finish</String> = <options.finish>finishCallback</options.finish>;
	
	<Spry.Effect.Cluster.setToggle><Spry.Effect.Cluster>effectCluster</Spry.Effect.Cluster>.<void>setToggle</void>(<Boolean>doToggle</Boolean>)</Spry.Effect.Cluster.setToggle>;
	<Spry.Effect.Cluster>effectCluster</Spry.Effect.Cluster>.<String>name</String> = <String>'GrowShrink'</String>;

	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Cluster>effectCluster</Spry.Effect.Cluster>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;


Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Shake</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;

	<Spry.Effect.makePositioned>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makePositioned</void>(<HTMLElement>element</HTMLElement>)</Spry.Effect.makePositioned>;
	

	var setupCallback = null;
	var finishCallback = null;

	if (options)
	{
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}

	var <Spry.Effect.Utils.Position>startOffsetPosition = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position>()</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>"left"</String>)</Spry.Effect.getStyleProp>)</parseInt>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>"top"</String>)</Spry.Effect.getStyleProp>)</parseInt>;	
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <Number>0</Number>;
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <Number>0</Number>;	

	var <Spry.Effect.Cluster>shakeEffectCluster = <Spry.Effect.Cluster>new <Spry.Effect.Cluster>Spry.<Spry.Effect>Effect</Spry.Effect>.Cluster</Spry.Effect.Cluster>()</Spry.Effect.Cluster></Spry.Effect.Cluster>;

	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>0</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>20</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	options = {duration:<Number>50</Number>, toggle:<Boolean>false</Boolean>};
	var <Spry.Effect.Move>effect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Move>effect</Spry.Effect.Move>)</Spry.Effect.Cluster.addNextEffect>;
	
	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>20</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + -<Number>20</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	options = {duration:<Number>100</Number>, toggle:<Boolean>false</Boolean>};
	var <Spry.Effect.Move>effect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Move>effect</Spry.Effect.Move>)</Spry.Effect.Cluster.addNextEffect>;

	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + -<Number>20</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>20</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	options = {duration:<Number>100</Number>, toggle:<Boolean>false</Boolean>};
	var <Spry.Effect.Move>effect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Move>effect</Spry.Effect.Move>)</Spry.Effect.Cluster.addNextEffect>;

	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>20</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + -<Number>20</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	options = {duration:<Number>100</Number>, toggle:<Boolean>false</Boolean>};
	var <Spry.Effect.Move>effect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Move>effect</Spry.Effect.Move>)</Spry.Effect.Cluster.addNextEffect>;

	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + -<Number>20</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>20</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	options = {duration:<Number>100</Number>, toggle:<Boolean>false</Boolean>};
	var <Spry.Effect.Move>effect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Move>effect</Spry.Effect.Move>)</Spry.Effect.Cluster.addNextEffect>;

	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>20</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>0</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	options = {duration:<Number>50</Number>, toggle:<Boolean>false</Boolean>};
	var <Spry.Effect.Move>effect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Move>effect</Spry.Effect.Move>)</Spry.Effect.Cluster.addNextEffect>;

	<Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<String>setup</String> = <options.setup>setupCallback</options.setup>;
	<Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<String>finish</String> = <options.finish>finishCallback</options.finish>;
	<Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>.<String>name</String> = <String>'Shake'</String>;
	
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Cluster>shakeEffectCluster</Spry.Effect.Cluster>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Squish</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;
	
	var <Number>durationInMilliseconds = <Number>500</Number></Number>;
	var <Boolean>doToggle = <Boolean>true</Boolean></Boolean>;

	var setupCallback = null;
	var finishCallback = null;

	

	if (options)
	{
		if (<Boolean><Number>options.duration</Number> != null</Boolean>) <Number>durationInMilliseconds</Number> = <Number>options.duration</Number>;
		if (<Boolean><Boolean>options.toggle</Boolean> != null</Boolean>) <Boolean>doToggle</Boolean> = <Boolean>options.toggle</Boolean>;
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}

	<Spry.Effect.makePositioned>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makePositioned</void>(<HTMLElement>element</HTMLElement>)</Spry.Effect.makePositioned>; // for move
	
	var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;

	var <originalRect.width>startWidth = <originalRect.width>originalRect.width</originalRect.width></originalRect.width>;
	var <originalRect.height>startHeight = <originalRect.height>originalRect.height</originalRect.height></originalRect.height>;
		
	var <Number>stopWidth = <Number>0</Number></Number>;
	var <Number>stopHeight = <Number>0</Number></Number>;
	
	var <Spry.Effect.Utils.Rectangle>fromRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <originalRect.width>startWidth</originalRect.width>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <originalRect.height>startHeight</originalRect.height>;
	
	var <Spry.Effect.Utils.Rectangle>toRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <Number>stopWidth</Number>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <Number>stopHeight</Number>;
	
	var <Boolean>doScaleContent = <Boolean>true</Boolean></Boolean>;

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, scaleContent:<Boolean>doScaleContent</Boolean>, setup: <options.setup>setupCallback</options.setup>, finish: <options.finish>finishCallback</options.finish>};

	var <Spry.Effect.Size>squishEffect = <Spry.Effect.Size>new <Spry.Effect.Size>Spry.<Spry.Effect>Effect</Spry.Effect>.Size</Spry.Effect.Size>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>, <Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>, options)</Spry.Effect.Size></Spry.Effect.Size>;
	<Spry.Effect.Size>squishEffect</Spry.Effect.Size>.<String>name</String> = <String>'Squish'</String>;

	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Size>squishEffect</Spry.Effect.Size>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Pulsate</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;
	
	var <Number>durationInMilliseconds = <Number>400</Number></Number>;
	var <Number>fromOpacity = <Number>100.0</Number></Number>;
	var <Number>toOpacity = <Number>0.0</Number></Number>;
	var <Boolean>doToggle = <Boolean>false</Boolean></Boolean>;
	var <Spry.linearTransition>kindOfTransition = <Spry.linearTransition>Spry.linearTransition</Spry.linearTransition></Spry.linearTransition>;
	var setupCallback = null;
	var finishCallback = null;

	if (options)
	{
		if (<Boolean><Number>options.duration</Number> != null</Boolean>) <Number>durationInMilliseconds</Number> = <Number>options.duration</Number>;
		if (<Boolean><options.from>options.from</options.from> != null</Boolean>) <options.from>fromOpacity</options.from> = <options.from>options.from</options.from>;
		if (<Boolean><options.to>options.to</options.to> != null</Boolean>) <options.to>toOpacity</options.to> = <options.to>options.to</options.to>;
		if (<Boolean><Boolean>options.toggle</Boolean> != null</Boolean>) <Boolean>doToggle</Boolean> = <Boolean>options.toggle</Boolean>;
		if (<Boolean><options.transition>options.transition</options.transition> != null</Boolean>) <options.transition>kindOfTransition</options.transition> = <options.transition>options.transition</options.transition>;
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}
	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, transition:<options.transition>kindOfTransition</options.transition>, setup: <options.setup>setupCallback</options.setup>, finish: <options.finish>finishCallback</options.finish>};
	fromOpacity = fromOpacity / <Number>100.0</Number>;
	toOpacity = toOpacity / <Number>100.0</Number>;
	
	var <Spry.Effect.Cluster>pulsateEffectCluster = <Spry.Effect.Cluster>new <Spry.Effect.Cluster>Spry.<Spry.Effect>Effect</Spry.Effect>.Cluster</Spry.Effect.Cluster>()</Spry.Effect.Cluster></Spry.Effect.Cluster>;
	
	var <Spry.Effect.Opacity>fadeEffect = <Spry.Effect.Opacity>new <Spry.Effect.Opacity>Spry.<Spry.Effect>Effect</Spry.Effect>.Opacity</Spry.Effect.Opacity>(<HTMLElement>element</HTMLElement>, fromOpacity, toOpacity, options)</Spry.Effect.Opacity></Spry.Effect.Opacity>;
	var <Spry.Effect.Opacity>appearEffect = <Spry.Effect.Opacity>new <Spry.Effect.Opacity>Spry.<Spry.Effect>Effect</Spry.Effect>.Opacity</Spry.Effect.Opacity>(<HTMLElement>element</HTMLElement>, toOpacity, fromOpacity, options)</Spry.Effect.Opacity></Spry.Effect.Opacity>;
	
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Opacity>fadeEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addNextEffect>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Opacity>appearEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addNextEffect>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Opacity>fadeEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addNextEffect>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Opacity>appearEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addNextEffect>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Opacity>fadeEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addNextEffect>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Opacity>appearEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addNextEffect>;
	
	<Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>.<String>name</String> = <String>'Pulsate'</String>;

	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Cluster>pulsateEffectCluster</Spry.Effect.Cluster>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Puff</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;
	
	<Spry.Effect.makePositioned>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makePositioned</void>(<HTMLElement>element</HTMLElement>)</Spry.Effect.makePositioned>; // for move

	var setupCallback = null;
	var finishCallback = null;

	if (options)
	{
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}

	var <Spry.Effect.Cluster>puffEffectCluster = <Spry.Effect.Cluster>new <Spry.Effect.Cluster>Spry.<Spry.Effect>Effect</Spry.Effect>.Cluster</Spry.Effect.Cluster></Spry.Effect.Cluster></Spry.Effect.Cluster>;
	var <Number>durationInMilliseconds = <Number>500</Number></Number>;

	var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;
	
	var <originalRect.width>startWidth = <originalRect.width>originalRect.width</originalRect.width></originalRect.width>;
	var <originalRect.height>startHeight = <originalRect.height>originalRect.height</originalRect.height></originalRect.height>;
		
	var stopWidth = <originalRect.width>startWidth</originalRect.width> * <Number>2</Number>;
	var stopHeight = <originalRect.height>startHeight</originalRect.height> * <Number>2</Number>;
	
	var <Spry.Effect.Utils.Rectangle>fromRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <originalRect.width>startWidth</originalRect.width>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <originalRect.height>startHeight</originalRect.height>;
	
	var <Spry.Effect.Utils.Rectangle>toRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = stopWidth;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = stopHeight;
	
	var <Boolean>doScaleContent = <Boolean>false</Boolean></Boolean>;
	
	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>false</Boolean>, scaleContent:<Boolean>doScaleContent</Boolean>};
	var <Spry.Effect.Size>sizeEffect = <Spry.Effect.Size>new <Spry.Effect.Size>Spry.<Spry.Effect>Effect</Spry.Effect>.Size</Spry.Effect.Size>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>, <Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>, options)</Spry.Effect.Size></Spry.Effect.Size>;
	<Spry.Effect.Cluster.addParallelEffect><Spry.Effect.Cluster>puffEffectCluster</Spry.Effect.Cluster>.<void>addParallelEffect</void>(<Spry.Effect.Size>sizeEffect</Spry.Effect.Size>)</Spry.Effect.Cluster.addParallelEffect>;

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>false</Boolean>};
	var <Number>fromOpacity = <Number>1.0</Number></Number>;
	var <Number>toOpacity = <Number>0.0</Number></Number>;
	var <Spry.Effect.Opacity>opacityEffect = <Spry.Effect.Opacity>new <Spry.Effect.Opacity>Spry.<Spry.Effect>Effect</Spry.Effect>.Opacity</Spry.Effect.Opacity>(<HTMLElement>element</HTMLElement>, <Number>fromOpacity</Number>, <Number>toOpacity</Number>, options)</Spry.Effect.Opacity></Spry.Effect.Opacity>;
	<Spry.Effect.Cluster.addParallelEffect><Spry.Effect.Cluster>puffEffectCluster</Spry.Effect.Cluster>.<void>addParallelEffect</void>(<Spry.Effect.Opacity>opacityEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addParallelEffect>;

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>false</Boolean>};
	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number>0</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number>0</Number>;
	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <originalRect.width>startWidth</originalRect.width> / <Number>2.0</Number> * -<Number>1.0</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <originalRect.height>startHeight</originalRect.height> / <Number>2.0</Number> * -<Number>1.0</Number>;
	var <Spry.Effect.Move>moveEffect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, <Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addParallelEffect><Spry.Effect.Cluster>puffEffectCluster</Spry.Effect.Cluster>.<void>addParallelEffect</void>(<Spry.Effect.Move>moveEffect</Spry.Effect.Move>)</Spry.Effect.Cluster.addParallelEffect>;

	<Spry.Effect.Cluster>puffEffectCluster</Spry.Effect.Cluster>.<String>setup</String> = <options.setup>setupCallback</options.setup>;
	<Spry.Effect.Cluster>puffEffectCluster</Spry.Effect.Cluster>.<String>finish</String> = <options.finish>finishCallback</options.finish>;
	<Spry.Effect.Cluster>puffEffectCluster</Spry.Effect.Cluster>.<String>name</String> = <String>'Puff'</String>;
	
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Cluster>puffEffectCluster</Spry.Effect.Cluster>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>DropOut</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;
	
	var <Spry.Effect.Cluster>dropoutEffectCluster = <Spry.Effect.Cluster>new <Spry.Effect.Cluster>Spry.<Spry.Effect>Effect</Spry.Effect>.Cluster</Spry.Effect.Cluster></Spry.Effect.Cluster></Spry.Effect.Cluster>;
	
	var <Number>durationInMilliseconds = <Number>500</Number></Number>;

	<Spry.Effect.makePositioned>Spry.<Spry.Effect>Effect</Spry.Effect>.<void>makePositioned</void>(<HTMLElement>element</HTMLElement>)</Spry.Effect.makePositioned>;

	var setupCallback = null;
	var finishCallback = null;

	if (options)
	{
		if (<Boolean><options.setup>options.setup</options.setup> != null</Boolean>) <options.setup>setupCallback</options.setup> = <options.setup>options.setup</options.setup>;
		if (<Boolean><options.finish>options.finish</options.finish> != null</Boolean>) <options.finish>finishCallback</options.finish> = <options.finish>options.finish</options.finish>;
	}

	var <Spry.Effect.Utils.Position>startOffsetPosition = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position>()</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>"left"</String>)</Spry.Effect.getStyleProp>)</parseInt>;
	<Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <parseInt>parseInt(<Spry.Effect.getStyleProp>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getStyleProp>getStyleProp</Spry.Effect.getStyleProp>(<HTMLElement>element</HTMLElement>, <String>"top"</String>)</Spry.Effect.getStyleProp>)</parseInt>;	
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>x</String> = <Number>0</Number>;
	if (!<Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number>) <Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.<String>y</String> = <Number>0</Number>;	
	
	var <Spry.Effect.Utils.Position>fromPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>0</Number>;
	<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>0</Number>;

	var <Spry.Effect.Utils.Position>toPos = <Spry.Effect.Utils.Position>new <Spry.Effect.Utils.Position>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Position</Spry.Effect.Utils.Position></Spry.Effect.Utils.Position></Spry.Effect.Utils.Position>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>x</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.x</Number> + <Number>0</Number>;
	<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>.<String>y</String> = <Number><Spry.Effect.Utils.Position>startOffsetPosition</Spry.Effect.Utils.Position>.y</Number> + <Number>160</Number>;

	options = {from:<Spry.Effect.Utils.Position>fromPos</Spry.Effect.Utils.Position>, to:<Spry.Effect.Utils.Position>toPos</Spry.Effect.Utils.Position>, duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>true</Boolean>};
	var <Spry.Effect.Move>moveEffect = <Spry.Effect.Move>new <Spry.Effect.Move>Spry.<Spry.Effect>Effect</Spry.Effect>.Move</Spry.Effect.Move>(<HTMLElement>element</HTMLElement>, <options.from>options.from</options.from>, <options.to>options.to</options.to>, options)</Spry.Effect.Move></Spry.Effect.Move>;
	<Spry.Effect.Cluster.addParallelEffect><Spry.Effect.Cluster>dropoutEffectCluster</Spry.Effect.Cluster>.<void>addParallelEffect</void>(<Spry.Effect.Move>moveEffect</Spry.Effect.Move>)</Spry.Effect.Cluster.addParallelEffect>;

	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>true</Boolean>};
	var <Number>fromOpacity = <Number>1.0</Number></Number>;
	var <Number>toOpacity = <Number>0.0</Number></Number>;
	var <Spry.Effect.Opacity>opacityEffect = <Spry.Effect.Opacity>new <Spry.Effect.Opacity>Spry.<Spry.Effect>Effect</Spry.Effect>.Opacity</Spry.Effect.Opacity>(<HTMLElement>element</HTMLElement>, <Number>fromOpacity</Number>, <Number>toOpacity</Number>, options)</Spry.Effect.Opacity></Spry.Effect.Opacity>;
	<Spry.Effect.Cluster.addParallelEffect><Spry.Effect.Cluster>dropoutEffectCluster</Spry.Effect.Cluster>.<void>addParallelEffect</void>(<Spry.Effect.Opacity>opacityEffect</Spry.Effect.Opacity>)</Spry.Effect.Cluster.addParallelEffect>;

	<Spry.Effect.Cluster>dropoutEffectCluster</Spry.Effect.Cluster>.<String>setup</String> = <options.setup>setupCallback</options.setup>;
	<Spry.Effect.Cluster>dropoutEffectCluster</Spry.Effect.Cluster>.<String>finish</String> = <options.finish>finishCallback</options.finish>;
	<Spry.Effect.Cluster>dropoutEffectCluster</Spry.Effect.Cluster>.<String>name</String> = <String>'DropOut'</String>;
	
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Cluster>dropoutEffectCluster</Spry.Effect.Cluster>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;

Spry.<Spry.Effect>Effect</Spry.Effect>.<String>Fold</String> = <Function>function (<HTMLElement>element</HTMLElement>, options) 
{
	var <HTMLElement>element = <Spry.Effect.getElement>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getElement>getElement</Spry.Effect.getElement>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getElement></HTMLElement>;
	
	var <Number>durationInMilliseconds = <Number>1000</Number></Number>;
	var <Boolean>doToggle = <Boolean>false</Boolean></Boolean>;
	var <Boolean>doScaleContent = <Boolean>true</Boolean></Boolean>;
	
	var <Spry.Effect.Cluster>foldEffectCluster = <Spry.Effect.Cluster>new <Spry.Effect.Cluster>Spry.<Spry.Effect>Effect</Spry.Effect>.Cluster</Spry.Effect.Cluster>()</Spry.Effect.Cluster></Spry.Effect.Cluster>;

	var originalRect = <Spry.Effect.getDimensions>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.getDimensions>getDimensions</Spry.Effect.getDimensions>(<HTMLElement>element</HTMLElement>)</Spry.Effect.getDimensions>;

	var <originalRect.width>startWidth = <originalRect.width>originalRect.width</originalRect.width></originalRect.width>;
	var <originalRect.height>startHeight = <originalRect.height>originalRect.height</originalRect.height></originalRect.height>;
		
	var <originalRect.width>stopWidth = <originalRect.width>startWidth</originalRect.width></originalRect.width>;
	var stopHeight = <originalRect.height>startHeight</originalRect.height> / <Number>5</Number>;
	
	var <Spry.Effect.Utils.Rectangle>fromRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <originalRect.width>startWidth</originalRect.width>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <originalRect.height>startHeight</originalRect.height>;
	
	var <Spry.Effect.Utils.Rectangle>toRect = <Spry.Effect.Utils.Rectangle>new <Spry.Effect.Utils.Rectangle>Spry.<Spry.Effect>Effect</Spry.Effect>.<Spry.Effect.Utils>Utils</Spry.Effect.Utils>.Rectangle</Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle></Spry.Effect.Utils.Rectangle>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <originalRect.width>stopWidth</originalRect.width>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = stopHeight;
	
	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, scaleContent:<Boolean>doScaleContent</Boolean>};
	var <Spry.Effect.Size>sizeEffect = <Spry.Effect.Size>new <Spry.Effect.Size>Spry.<Spry.Effect>Effect</Spry.Effect>.Size</Spry.Effect.Size>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>, <Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>, options)</Spry.Effect.Size></Spry.Effect.Size>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>foldEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Size>sizeEffect</Spry.Effect.Size>)</Spry.Effect.Cluster.addNextEffect>;
	
	<Number>durationInMilliseconds</Number> = <Number>500</Number>;
	options = {duration:<Number>durationInMilliseconds</Number>, toggle:<Boolean>doToggle</Boolean>, scaleContent:<Boolean>doScaleContent</Boolean>};
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <String>"100%"</String>;
	<Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <String>"20%"</String>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>width</String> = <String>"10%"</String>;
	<Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>.<String>height</String> = <String>"20%"</String>;
	var <Spry.Effect.Size>sizeEffect = <Spry.Effect.Size>new <Spry.Effect.Size>Spry.<Spry.Effect>Effect</Spry.Effect>.Size</Spry.Effect.Size>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Utils.Rectangle>fromRect</Spry.Effect.Utils.Rectangle>, <Spry.Effect.Utils.Rectangle>toRect</Spry.Effect.Utils.Rectangle>, options)</Spry.Effect.Size></Spry.Effect.Size>;
	<Spry.Effect.Cluster.addNextEffect><Spry.Effect.Cluster>foldEffectCluster</Spry.Effect.Cluster>.<void>addNextEffect</void>(<Spry.Effect.Size>sizeEffect</Spry.Effect.Size>)</Spry.Effect.Cluster.addNextEffect>;
	<Spry.Effect.Cluster>foldEffectCluster</Spry.Effect.Cluster>.<String>name</String> = <String>'Fold'</String>;
	
	var registeredEffect = <SpryRegistry.getRegisteredEffect>SpryRegistry.<SpryRegistry.getRegisteredEffect>getRegisteredEffect</SpryRegistry.getRegisteredEffect>(<HTMLElement>element</HTMLElement>, <Spry.Effect.Cluster>foldEffectCluster</Spry.Effect.Cluster>)</SpryRegistry.getRegisteredEffect>;
	<registeredEffect.start>registeredEffect.<registeredEffect.start>start</registeredEffect.start>()</registeredEffect.start>;
	return registeredEffect;
}</Function>;
