/*  Prototype JavaScript framework, version 1.5.0
 *  (c) 2005-2007 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://prototype.conio.net/
 *
/*--------------------------------------------------------------------------*/

var |>CLASS:Prototype<| = {
  Version: '1.5.0',
  BrowserFeatures: {
    XPath: !!|>GLOBAL:document<|.evaluate
  },

  ScriptFragment: '(?:<script.*?>)((\n|\r|.)*?)(?:<\/script>)',
  |>METHOD:emptyFunction<|: function() {},
  |>METHOD:K<|: function(x) { return x }
}

var |>CLASS:Class<| = {
  |>METHOD:create<|: function() {
    return function() {
      this.initialize.apply(this, arguments);
    }
  }
}

var |>CLASS:Abstract<| = new |>CLASS:Object<|();

|>CLASS:Object<|.extend = function(destination, source) {
  for (var property in source) {
    destination[property] = source[property];
  }
  return destination;
}

|>CLASS:Object<|.extend(|>CLASS:Object<|, {
  |>METHOD:inspect<|: function(object) {
    try {
      if (object === undefined) return 'undefined';
      if (object === null) return 'null';
      return object.inspect ? object.inspect() : object.toString();
    } catch (e) {
      if (e instanceof |>CLASS:RangeError<|) return '...';
      throw e;
    }
  },

  |>METHOD:keys<|: function(object) {
    var keys = [];
    for (var property in object)
      keys.push(property);
    return keys;
  },

  |>METHOD:values<|: function(object) {
    var values = [];
    for (var property in object)
      values.push(object[property]);
    return values;
  },

  |>METHOD:clone<|: function(object) {
    return |>CLASS:Object<|.extend({}, object);
  }
});

|>CLASS:Function<|.prototype.bind = function() {
  var __method = this, args = $A(arguments), object = args.shift();
  return function() {
    return __method.apply(object, args.concat($A(arguments)));
  }
}

|>CLASS:Function<|.prototype.bindAsEventListener = function(object) {
  var __method = this, args = $A(arguments), object = args.shift();
  return function(event) {
    return __method.apply(object, [( event || |>GLOBAL:window<|.event)].concat(args).concat($A(arguments)));
  }
}

|>CLASS:Object<|.extend(|>CLASS:Number<|.prototype, {
  |>METHOD:toColorPart<|: function() {
    var digits = this.toString(16);
    if (this < 16) return '0' + digits;
    return digits;
  },

  |>METHOD:succ<|: function() {
    return this + 1;
  },

  |>METHOD:times<|: function(iterator) {
    $R(0, this, true).each(iterator);
    return this;
  }
});

var |>CLASS:Try<| = {
  |>METHOD:these<|: function() {
    var returnValue;

    for (var i = 0, length = arguments.length; i < length; i++) {
      var lambda = arguments[i];
      try {
        returnValue = lambda();
        break;
      } catch (|>UNUSED:e<|) {}
    }

    return returnValue;
  }
}

/*--------------------------------------------------------------------------*/

var |>CLASS:PeriodicalExecuter<| = |>CLASS:Class<|.create();
|>CLASS:PeriodicalExecuter<|.prototype = {
  |>METHOD:initialize<|: function(callback, frequency) {
    this.callback = callback;
    this.frequency = frequency;
    this.currentlyExecuting = false;

    this.registerCallback();
  },

  |>METHOD:registerCallback<|: function() {
    this.timer = setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  |>METHOD:stop<|: function() {
    if (!this.timer) return;
    clearInterval(this.timer);
    this.timer = null;
  },

  |>METHOD:onTimerEvent<|: function() {
    if (!this.currentlyExecuting) {
      try {
        this.currentlyExecuting = true;
        this.callback(this);
      } finally {
        this.currentlyExecuting = false;
      }
    }
  }
}
|>CLASS:String<|.interpret = function(value){
  return value == null ? '' : String(value);
}

|>CLASS:Object<|.extend(|>CLASS:String<|.prototype, {
  |>METHOD:gsub<|: function(pattern, replacement) {
    var result = '', source = this, match;
    replacement = arguments.callee.prepareReplacement(replacement);

    while (source.length > 0) {
      if (match = source.match(pattern)) {
        result += source.slice(0, match.index);
        result += |>CLASS:String<|.interpret(replacement(match));
        source  = source.slice(match.index + match[0].length);
      } else {
        result += source, source = '';
      }
    }
    return result;
  },

  |>METHOD:sub<|: function(pattern, replacement, count) {
    replacement = this.gsub.prepareReplacement(replacement);
    count = count === undefined ? 1 : count;

    return this.gsub(pattern, function(match) {
      if (--count < 0) return match[0];
      return replacement(match);
    });
  },

  |>METHOD:scan<|: function(pattern, iterator) {
    this.gsub(pattern, iterator);
    return this;
  },

  |>METHOD:truncate<|: function(length, truncation) {
    length = length || 30;
    truncation = truncation === undefined ? '...' : truncation;
    return this.length > length ?
      this.slice(0, length - truncation.length) + truncation : this;
  },

  |>METHOD:strip<|: function() {
    return this.replace(|>REGEXP:/^\s+/<|, '').replace(|>REGEXP:/\s+$/<|, '');
  },

  |>METHOD:stripTags<|: function() {
    return this.replace(|>REGEXP:/<\/?[^>]+>/gi<|, '');
  },

  |>METHOD:stripScripts<|: function() {
    return this.replace(new |>CLASS:RegExp<|(|>CLASS:Prototype<|.ScriptFragment, 'img'), '');
  },

  |>METHOD:extractScripts<|: function() {
    var matchAll = new |>CLASS:RegExp<|(|>CLASS:Prototype<|.ScriptFragment, 'img');
    var matchOne = new |>CLASS:RegExp<|(|>CLASS:Prototype<|.ScriptFragment, 'im');
    return (this.match(matchAll) || []).map(function(scriptTag) {
      return (scriptTag.match(matchOne) || ['', ''])[1];
    });
  },

  |>METHOD:evalScripts<|: function() {
    return this.extractScripts().map(function(script) { return eval(script) });
  },

  |>METHOD:escapeHTML<|: function() {
    var div = |>GLOBAL:document<|.createElement('div');
    var text = |>GLOBAL:document<|.createTextNode(this);
    div.appendChild(text);
    return div.innerHTML;
  },

  |>METHOD:unescapeHTML<|: function() {
    var div = |>GLOBAL:document<|.createElement('div');
    div.innerHTML = this.stripTags();
    return div.childNodes[0] ? (div.childNodes.length > 1 ?
      $A(div.childNodes).inject('',function(memo,node){ return memo+node.nodeValue }) :
      div.childNodes[0].nodeValue) : '';
  },

  |>METHOD:toQueryParams<|: function(separator) {
    var match = this.strip().match(|>REGEXP:/([^?#]*)(#.*)?$/<|);
    if (!match) return {};

    return match[1].split(separator || '&').inject({}, function(hash, pair) {
      if ((pair = pair.split('='))[0]) {
        var name = decodeURIComponent(pair[0]);
        var value = pair[1] ? decodeURIComponent(pair[1]) : undefined;

        if (hash[name] !== undefined) {
          if (hash[name].constructor != |>CLASS:Array<|)
            hash[name] = [hash[name]];
          if (value) hash[name].push(value);
        }
        else hash[name] = value;
      }
      return hash;
    });
  },

  |>METHOD:toArray<|: function() {
    return this.split('');
  },

  |>METHOD:succ<|: function() {
    return this.slice(0, this.length - 1) +
      |>CLASS:String<|.fromCharCode(this.charCodeAt(this.length - 1) + 1);
  },

  |>METHOD:camelize<|: function() {
    var parts = this.split('-'), len = parts.length;
    if (len == 1) return parts[0];

    var camelized = this.charAt(0) == '-'
      ? parts[0].charAt(0).toUpperCase() + parts[0].substring(1)
      : parts[0];

    for (var i = 1; i < len; i++)
      camelized += parts[i].charAt(0).toUpperCase() + parts[i].substring(1);

    return camelized;
  },

  |>METHOD:capitalize<|: function(){
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase();
  },

  |>METHOD:underscore<|: function() {
    return this.gsub(|>REGEXP:/::/<|, '/').gsub(|>REGEXP:/([A-Z]+)([A-Z][a-z])/<|,'#{1}_#{2}').gsub(|>REGEXP:/([a-z\d])([A-Z])/<|,'#{1}_#{2}').gsub(|>REGEXP:/-/<|,'_').toLowerCase();
  },

  |>METHOD:dasherize<|: function() {
    return this.gsub(|>REGEXP:/_/<|,'-');
  },

  |>METHOD:inspect<|: function(useDoubleQuotes) {
    var escapedString = this.replace(|>REGEXP:/\\/g<|, '\\\\');
    if (useDoubleQuotes)
      return '"' + escapedString.replace(|>REGEXP:/"/g<|, '\\"') + '"';
    else
      return "'" + escapedString.replace(|>REGEXP:/'/g<|, '\\\'') + "'";
  }
});

|>CLASS:String<|.prototype.gsub.prepareReplacement = function(replacement) {
  if (typeof replacement == 'function') return replacement;
  var template = new |>CLASS:Template<|(replacement);
  return function(match) { return template.evaluate(match) };
}

|>CLASS:String<|.prototype.parseQuery = |>CLASS:String<|.prototype.toQueryParams;

var |>CLASS:Template<| = |>CLASS:Class<|.create();
|>CLASS:Template<|.Pattern = |>REGEXP:/(^|.|\r|\n)(#\{(.*?)\})/<|;
|>CLASS:Template<|.prototype = {
  |>METHOD:initialize<|: function(template, pattern) {
    this.template = template.toString();
    this.pattern  = pattern || |>CLASS:Template<|.Pattern;
  },

  |>METHOD:evaluate<|: function(object) {
    return this.template.gsub(this.pattern, function(match) {
      var before = match[1];
      if (before == '\\') return match[2];
      return before + |>CLASS:String<|.interpret(object[match[3]]);
    });
  }
}

var |>GLOBAL:$break<|    = new |>CLASS:Object<|();
var |>GLOBAL:$continue<| = new |>CLASS:Object<|();

var |>CLASS:Enumerable<| = {
  |>METHOD:each<|: function(iterator) {
    var index = 0;
    try {
      this._each(function(value) {
        try {
          iterator(value, index++);
        } catch (e) {
          if (e != |>GLOBAL:$continue<|) throw e;
        }
      });
    } catch (e) {
      if (e != |>GLOBAL:$break<|) throw e;
    }
    return this;
  },

  |>METHOD:eachSlice<|: function(number, iterator) {
    var index = -number, slices = [], array = this.toArray();
    while ((index += number) < array.length)
      slices.push(array.slice(index, index+number));
    return slices.map(iterator);
  },

  |>METHOD:all<|: function(iterator) {
    var result = true;
    this.each(function(value, index) {
      result = result && !!(iterator || |>CLASS:Prototype<|.K)(value, index);
      if (!result) throw |>GLOBAL:$break<|;
    });
    return result;
  },

  |>METHOD:any<|: function(iterator) {
    var result = false;
    this.each(function(value, index) {
      if (result = !!(iterator || |>CLASS:Prototype<|.K)(value, index))
        throw |>GLOBAL:$break<|;
    });
    return result;
  },

  |>METHOD:collect<|: function(iterator) {
    var results = [];
    this.each(function(value, index) {
      results.push((iterator || |>CLASS:Prototype<|.K)(value, index));
    });
    return results;
  },

  |>METHOD:detect<|: function(iterator) {
    var result;
    this.each(function(value, index) {
      if (iterator(value, index)) {
        result = value;
        throw |>GLOBAL:$break<|;
      }
    });
    return result;
  },

  |>METHOD:findAll<|: function(iterator) {
    var results = [];
    this.each(function(value, index) {
      if (iterator(value, index))
        results.push(value);
    });
    return results;
  },

  |>METHOD:grep<|: function(pattern, iterator) {
    var results = [];
    this.each(function(value, index) {
      var stringValue = value.toString();
      if (stringValue.match(pattern))
        results.push((iterator || |>CLASS:Prototype<|.K)(value, index));
    })
    return results;
  },

  |>METHOD:include<|: function(object) {
    var found = false;
    this.each(function(value) {
      if (value == object) {
        found = true;
        throw |>GLOBAL:$break<|;
      }
    });
    return found;
  },

  |>METHOD:inGroupsOf<|: function(number, fillWith) {
    fillWith = fillWith === undefined ? null : fillWith;
    return this.eachSlice(number, function(slice) {
      while(slice.length < number) slice.push(fillWith);
      return slice;
    });
  },

  |>METHOD:inject<|: function(memo, iterator) {
    this.each(function(value, index) {
      memo = iterator(memo, value, index);
    });
    return memo;
  },

  |>METHOD:invoke<|: function(method) {
    var args = $A(arguments).slice(1);
    return this.map(function(value) {
      return value[method].apply(value, args);
    });
  },

  |>METHOD:max<|: function(iterator) {
    var result;
    this.each(function(value, index) {
      value = (iterator || |>CLASS:Prototype<|.K)(value, index);
      if (result == undefined || value >= result)
        result = value;
    });
    return result;
  },

  |>METHOD:min<|: function(iterator) {
    var result;
    this.each(function(value, index) {
      value = (iterator || |>CLASS:Prototype<|.K)(value, index);
      if (result == undefined || value < result)
        result = value;
    });
    return result;
  },

  |>METHOD:partition<|: function(iterator) {
    var trues = [], falses = [];
    this.each(function(value, index) {
      ((iterator || |>CLASS:Prototype<|.K)(value, index) ?
        trues : falses).push(value);
    });
    return [trues, falses];
  },

  |>METHOD:pluck<|: function(property) {
    var results = [];
    this.each(function(value, |>UNUSED:index<|) {
      results.push(value[property]);
    });
    return results;
  },

  |>METHOD:reject<|: function(iterator) {
    var results = [];
    this.each(function(value, index) {
      if (!iterator(value, index))
        results.push(value);
    });
    return results;
  },

  |>METHOD:sortBy<|: function(iterator) {
    return this.map(function(value, index) {
      return {value: value, criteria: iterator(value, index)};
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      return a < b ? -1 : a > b ? 1 : 0;
    }).pluck('value');
  },

  |>METHOD:toArray<|: function() {
    return this.map();
  },

  |>METHOD:zip<|: function() {
    var iterator = |>CLASS:Prototype<|.K, args = |>GLOBAL:$A<|(arguments);
    if (typeof args.last() == 'function')
      iterator = args.pop();

    var collections = [this].concat(args).map(|>GLOBAL:$A<|);
    return this.map(function(|>UNUSED:value<|, index) {
      return iterator(collections.pluck(index));
    });
  },

  |>METHOD:size<|: function() {
    return this.toArray().length;
  },

  |>METHOD:inspect<|: function() {
    return '#<Enumerable:' + this.toArray().inspect() + '>';
  }
}

|>CLASS:Object<|.extend(|>CLASS:Enumerable<|, {
  map:     |>CLASS:Enumerable<|.collect,
  find:    |>CLASS:Enumerable<|.detect,
  select:  |>CLASS:Enumerable<|.findAll,
  member:  |>CLASS:Enumerable<|.include,
  entries: |>CLASS:Enumerable<|.toArray
});
var |>GLOBAL:$A<| = |>CLASS:Array<|.from = function(iterable) {
  if (!iterable) return [];
  if (iterable.toArray) {
    return iterable.toArray();
  } else {
    var results = [];
    for (var i = 0, length = iterable.length; i < length; i++)
      results.push(iterable[i]);
    return results;
  }
}

|>CLASS:Object<|.extend(|>CLASS:Array<|.prototype, |>CLASS:Enumerable<|);

if (!|>CLASS:Array<|.prototype._reverse)
  |>CLASS:Array<|.prototype._reverse = |>CLASS:Array<|.prototype.reverse;

|>CLASS:Object<|.extend(|>CLASS:Array<|.prototype, {
  |>METHOD:_each<|: function(iterator) {
    for (var i = 0, length = this.length; i < length; i++)
      iterator(this[i]);
  },

  |>METHOD:clear<|: function() {
    this.length = 0;
    return this;
  },

  |>METHOD:first<|: function() {
    return this[0];
  },

  |>METHOD:last<|: function() {
    return this[this.length - 1];
  },

  |>METHOD:compact<|: function() {
    return this.select(function(value) {
      return value != null;
    });
  },

  |>METHOD:flatten<|: function() {
    return this.inject([], function(array, value) {
      return array.concat(value && value.constructor == |>CLASS:Array<| ?
        value.flatten() : [value]);
    });
  },

  |>METHOD:without<|: function() {
    var values = $A(arguments);
    return this.select(function(value) {
      return !values.include(value);
    });
  },

  |>METHOD:indexOf<|: function(object) {
    for (var i = 0, length = this.length; i < length; i++)
      if (this[i] == object) return i;
    return -1;
  },

  |>METHOD:reverse<|: function(inline) {
    return (inline !== false ? this : this.toArray())._reverse();
  },

  |>METHOD:reduce<|: function() {
    return this.length > 1 ? this : this[0];
  },

  |>METHOD:uniq<|: function() {
    return this.inject([], function(array, value) {
      return array.include(value) ? array : array.concat([value]);
    });
  },

  |>METHOD:clone<|: function() {
    return [].concat(this);
  },

  |>METHOD:size<|: function() {
    return this.length;
  },

  |>METHOD:inspect<|: function() {
    return '[' + this.map(|>CLASS:Object<|.inspect).join(', ') + ']';
  }
});

|>CLASS:Array<|.prototype.toArray = |>CLASS:Array<|.prototype.clone;

function |>METHOD:$w<|(string){
  string = string.strip();
  return string ? string.split(|>REGEXP:/\s+/<|) : [];
}

if(|>GLOBAL:window<|.opera){
  |>CLASS:Array<|.prototype.concat = function(){
    var array = [];
    for(var i = 0, length = this.length; i < length; i++) array.push(this[i]);
    for(var i = 0, length = arguments.length; i < length; i++) {
      if(arguments[i].constructor == |>CLASS:Array<|) {
        for(var j = 0, arrayLength = arguments[i].length; j < arrayLength; j++)
          array.push(arguments[i][j]);
      } else {
        array.push(arguments[i]);
      }
    }
    return array;
  }
}
var |>CLASS:Hash<| = function(obj) {
  |>CLASS:Object<|.extend(this, obj || {});
};

|>CLASS:Object<|.extend(|>CLASS:Hash<|, {
  |>METHOD:toQueryString<|: function(obj) {
    var parts = [];

	  this.prototype._each.call(obj, function(pair) {
      if (!pair.key) return;

      if (pair.value && pair.value.constructor == |>CLASS:Array<|) {
        var values = pair.value.compact();
        if (values.length < 2) pair.value = values.reduce();
        else {
        	|>GLOBAL:key<| = |>GLOBAL:encodeURIComponent<|(pair.key);
          values.each(function(value) {
            value = value != undefined ? encodeURIComponent(value) : '';
            parts.push(|>GLOBAL:key<| + '=' + encodeURIComponent(value));
          });
          return;
        }
      }
      if (pair.value == undefined) pair[1] = '';
      parts.push(pair.map(|>GLOBAL:encodeURIComponent<|).join('='));
	  });

    return parts.join('&');
  }
});

|>CLASS:Object<|.extend(|>CLASS:Hash<|.prototype, |>CLASS:Enumerable<|);
|>CLASS:Object<|.extend(|>CLASS:Hash<|.prototype, {
  |>METHOD:_each<|: function(iterator) {
    for (var key in this) {
      var value = this[key];
      if (value && value == |>CLASS:Hash<|.prototype[key]) continue;

      var pair = [key, value];
      pair.key = key;
      pair.value = value;
      iterator(pair);
    }
  },

  |>METHOD:keys<|: function() {
    return this.pluck('key');
  },

  |>METHOD:values<|: function() {
    return this.pluck('value');
  },

  |>METHOD:merge<|: function(hash) {
    return $H(hash).inject(this, function(mergedHash, pair) {
      mergedHash[pair.key] = pair.value;
      return mergedHash;
    });
  },

  |>METHOD:remove<|: function() {
    var result;
    for(var i = 0, length = arguments.length; i < length; i++) {
      var value = this[arguments[i]];
      if (value !== undefined){
        if (result === undefined) result = value;
        else {
          if (result.constructor != |>CLASS:Array<|) result = [result];
          result.push(value)
        }
      }
      delete this[arguments[i]];
    }
    return result;
  },

  |>METHOD:toQueryString<|: function() {
    return |>CLASS:Hash<|.toQueryString(this);
  },

  |>METHOD:inspect<|: function() {
    return '#<Hash:{' + this.map(function(pair) {
      return pair.map(|>CLASS:Object<|.inspect).join(': ');
    }).join(', ') + '}>';
  }
});

function |>METHOD:$H<|(object) {
  if (object && object.constructor == |>CLASS:Hash<|) return object;
  return new |>CLASS:Hash<|(object);
};
|>CLASS:ObjectRange<| = |>CLASS:Class<|.create();
|>CLASS:Object<|.extend(|>CLASS:ObjectRange<|.prototype, |>CLASS:Enumerable<|);
|>CLASS:Object<|.extend(|>CLASS:ObjectRange<|.prototype, {
  |>METHOD:initialize<|: function(start, end, exclusive) {
    this.start = start;
    this.end = end;
    this.exclusive = exclusive;
  },

  |>METHOD:_each<|: function(iterator) {
    var value = this.start;
    while (this.include(value)) {
      iterator(value);
      value = value.succ();
    }
  },

  |>METHOD:include<|: function(value) {
    if (value < this.start)
      return false;
    if (this.exclusive)
      return value < this.end;
    return value <= this.end;
  }
});

var |>GLOBAL:$R<| = function(start, end, exclusive) {
  return new |>CLASS:ObjectRange<|(start, end, exclusive);
}

var |>CLASS:Ajax<| = {
  |>METHOD:getTransport<|: function() {
    return |>CLASS:Try<|.these(
      function() {return new |>CLASS:XMLHttpRequest<|()},
      function() {return new |>CLASS:ActiveXObject<|('Msxml2.XMLHTTP')},
      function() {return new |>CLASS:ActiveXObject<|('Microsoft.XMLHTTP')}
    ) || false;
  },

  activeRequestCount: 0
}

|>CLASS:Ajax<|.Responders = {
  responders: [],

  |>METHOD:_each<|: function(iterator) {
    this.responders._each(iterator);
  },

  |>METHOD:register<|: function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  },

  |>METHOD:unregister<|: function(responder) {
    this.responders = this.responders.without(responder);
  },

  |>METHOD:dispatch<|: function(callback, request, transport, json) {
    this.each(function(responder) {
      if (typeof responder[callback] == 'function') {
        try {
          responder[callback].apply(responder, [request, transport, json]);
        } catch (|>UNUSED:e<|) {}
      }
    });
  }
};

|>CLASS:Object<|.extend(|>CLASS:Ajax<|.Responders, |>CLASS:Enumerable<|);

|>CLASS:Ajax<|.Responders.register({
  |>METHOD:onCreate<|: function() {
    |>CLASS:Ajax<|.activeRequestCount++;
  },
  |>METHOD:onComplete<|: function() {
    |>CLASS:Ajax<|.activeRequestCount--;
  }
});

|>CLASS:Ajax<|.Base = function() {};
|>CLASS:Ajax<|.Base.prototype = {
  |>METHOD:setOptions<|: function(options) {
    this.options = {
      method:       'post',
      asynchronous: true,
      contentType:  'application/x-www-form-urlencoded',
      encoding:     'UTF-8',
      parameters:   ''
    }
    |>CLASS:Object<|.extend(this.options, options || {});

    this.options.method = this.options.method.toLowerCase();
    if (typeof this.options.parameters == 'string')
      this.options.parameters = this.options.parameters.toQueryParams();
  }
}

|>CLASS:Ajax<|.Request = |>CLASS:Class<|.create();
|>CLASS:Ajax<|.Request.Events =
  ['Uninitialized', 'Loading', 'Loaded', 'Interactive', 'Complete'];

|>CLASS:Ajax<|.Request.prototype = |>CLASS:Object<|.extend(new |>CLASS:Ajax<|.Base(), {
  _complete: false,

  |>METHOD:initialize<|: function(url, options) {
    this.transport = |>CLASS:Ajax<|.getTransport();
    this.setOptions(options);
    this.request(url);
  },

  |>METHOD:request<|: function(url) {
    this.url = url;
    this.method = this.options.method;
    var params = this.options.parameters;

    if (!['get', 'post'].include(this.method)) {
      // simulate other verbs over post
      params['_method'] = this.method;
      this.method = 'post';
    }

    params = |>CLASS:Hash<|.toQueryString(params);
    if (params && |>REGEXP:/Konqueror|Safari|KHTML/<|.test(|>GLOBAL:navigator<|.userAgent)) params += '&_='

    // when GET, append parameters to URL
    if (this.method == 'get' && params)
      this.url += (this.url.indexOf('?') > -1 ? '&' : '?') + params;

    try {
      |>CLASS:Ajax<|.Responders.dispatch('onCreate', this, this.transport);

      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);

      if (this.options.asynchronous)
        setTimeout(function() { this.respondToReadyState(1) }.bind(this), 10);

      this.transport.onreadystatechange = this.onStateChange.bind(this);
      this.setRequestHeaders();

      var body = this.method == 'post' ? (this.options.postBody || params) : null;

      this.transport.send(body);

      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous && this.transport.overrideMimeType)
        this.onStateChange();

    }
    catch (e) {
      this.dispatchException(e);
    }
  },

  |>METHOD:onStateChange<|: function() {
    var readyState = this.transport.readyState;
    if (readyState > 1 && !((readyState == 4) && this._complete))
      this.respondToReadyState(this.transport.readyState);
  },

  |>METHOD:setRequestHeaders<|: function() {
    var headers = {
      'X-Requested-With': 'XMLHttpRequest',
      'X-Prototype-Version': |>CLASS:Prototype<|.Version,
      'Accept': 'text/javascript, text/html, application/xml, text/xml, */*'
    };

    if (this.method == 'post') {
      headers['Content-type'] = this.options.contentType +
        (this.options.encoding ? '; charset=' + this.options.encoding : '');

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &&
          (|>GLOBAL:navigator<|.userAgent.match(|>REGEXP:/Gecko\/(\d{4})/<|) || [0,2005])[1] < 2005)
            headers['Connection'] = 'close';
    }

    // user-defined headers
    if (typeof this.options.requestHeaders == 'object') {
      var extras = this.options.requestHeaders;

      if (typeof extras.push == 'function')
        for (var i = 0, length = extras.length; i < length; i += 2)
          headers[extras[i]] = extras[i+1];
      else
        $H(extras).each(function(pair) { headers[pair.key] = pair.value });
    }

    for (var name in headers)
      this.transport.setRequestHeader(name, headers[name]);
  },

  |>METHOD:success<|: function() {
    return !this.transport.status
        || (this.transport.status >= 200 && this.transport.status < 300);
  },

  |>METHOD:respondToReadyState<|: function(readyState) {
    var state = |>CLASS:Ajax<|.Request.Events[readyState];
    var transport = this.transport, json = this.evalJSON();

    if (state == 'Complete') {
      try {
        this._complete = true;
        (this.options['on' + this.transport.status]
         || this.options['on' + (this.success() ? 'Success' : 'Failure')]
         || |>CLASS:Prototype<|.emptyFunction)(transport, json);
      } catch (e) {
        this.dispatchException(e);
      }

      if ((this.getHeader('Content-type') || 'text/javascript').strip().
        match(|>REGEXP:/^(text|application)\/(x-)?(java|ecma)script(;.*)?$/i<|))
          this.evalResponse();
    }

    try {
      (this.options['on' + state] || |>CLASS:Prototype<|.emptyFunction)(transport, json);
      |>CLASS:Ajax<|.Responders.dispatch('on' + state, this, transport, json);
    } catch (e) {
      this.dispatchException(e);
    }

    if (state == 'Complete') {
      // avoid memory leak in MSIE: clean up
      this.transport.onreadystatechange = |>CLASS:Prototype<|.emptyFunction;
    }
  },

  |>METHOD:getHeader<|: function(name) {
    try {
      return this.transport.getResponseHeader(name);
    } catch (|>UNUSED:e<|) { return null }
  },

  |>METHOD:evalJSON<|: function() {
    try {
      var json = this.getHeader('X-JSON');
      return json ? eval('(' + json + ')') : null;
    } catch (|>UNUSED:e<|) { return null }
  },

  |>METHOD:evalResponse<|: function() {
    try {
      return eval(this.transport.responseText);
    } catch (e) {
      this.dispatchException(e);
    }
  },

  |>METHOD:dispatchException<|: function(exception) {
    (this.options.onException || |>CLASS:Prototype<|.emptyFunction)(this, exception);
    |>CLASS:Ajax<|.Responders.dispatch('onException', this, exception);
  }
});

|>CLASS:Ajax<|.Updater = |>CLASS:Class<|.create();

|>CLASS:Object<|.extend(|>CLASS:Object<|.extend(|>CLASS:Ajax<|.Updater.prototype, |>CLASS:Ajax<|.Request.prototype), {
  |>METHOD:initialize<|: function(container, url, options) {
    this.container = {
      success: (container.success || container),
      failure: (container.failure || (container.success ? null : container))
    }

    this.transport = |>CLASS:Ajax<|.getTransport();
    this.setOptions(options);

    var onComplete = this.options.onComplete || |>CLASS:Prototype<|.emptyFunction;
    this.options.onComplete = (function(transport, param) {
      this.updateContent();
      onComplete(transport, param);
    }).bind(this);

    this.request(url);
  },

  |>METHOD:updateContent<|: function() {
    var receiver = this.container[this.success() ? 'success' : 'failure'];
    var response = this.transport.responseText;

    if (!this.options.evalScripts) response = response.stripScripts();

    if (receiver = $(receiver)) {
      if (this.options.insertion)
        new this.options.insertion(receiver, response);
      else
        receiver.update(response);
    }

    if (this.success()) {
      if (this.onComplete)
        setTimeout(this.onComplete.bind(this), 10);
    }
  }
});

|>CLASS:Ajax<|.PeriodicalUpdater = |>CLASS:Class<|.create();
|>CLASS:Ajax<|.PeriodicalUpdater.prototype = |>CLASS:Object<|.extend(new |>CLASS:Ajax<|.Base(), {
  |>METHOD:initialize<|: function(container, url, options) {
    this.setOptions(options);
    this.onComplete = this.options.onComplete;

    this.frequency = (this.options.frequency || 2);
    this.decay = (this.options.decay || 1);

    this.updater = {};
    this.container = container;
    this.url = url;

    this.start();
  },

  |>METHOD:start<|: function() {
    this.options.onComplete = this.updateComplete.bind(this);
    this.onTimerEvent();
  },

  |>METHOD:stop<|: function() {
    this.updater.options.onComplete = undefined;
    clearTimeout(this.timer);
    (this.onComplete || |>CLASS:Prototype<|.emptyFunction).apply(this, arguments);
  },

  |>METHOD:updateComplete<|: function(request) {
    if (this.options.decay) {
      this.decay = (request.responseText == this.lastText ?
        this.decay * this.options.decay : 1);

      this.lastText = request.responseText;
    }
    this.timer = setTimeout(this.onTimerEvent.bind(this),
      this.decay * this.frequency * 1000);
  },

  |>METHOD:onTimerEvent<|: function() {
    this.updater = new |>CLASS:Ajax<|.Updater(this.container, this.url, this.options);
  }
});
function |>METHOD:$<|(element) {
  if (arguments.length > 1) {
    for (var i = 0, elements = [], length = arguments.length; i < length; i++)
      elements.push($(arguments[i]));
    return elements;
  }
  if (typeof element == 'string')
    element = |>GLOBAL:document<|.getElementById(element);
  return |>CLASS:Element<|.extend(element);
}

if (|>CLASS:Prototype<|.BrowserFeatures.XPath) {
  |>GLOBAL:document<|._getElementsByXPath = function(expression, parentElement) {
    var results = [];
    var query = |>GLOBAL:document<|.evaluate(expression, $(parentElement) || |>GLOBAL:document<|,
      null, |>CLASS:XPathResult<|.ORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = 0, length = query.snapshotLength; i < length; i++)
      results.push(query.snapshotItem(i));
    return results;
  };
}

|>GLOBAL:document<|.getElementsByClassName = function(className, parentElement) {
  if (|>CLASS:Prototype<|.BrowserFeatures.XPath) {
    var q = ".//*[contains(concat(' ', @class, ' '), ' " + className + " ')]";
    return |>GLOBAL:document<|._getElementsByXPath(q, parentElement);
  } else {
    var children = ($(parentElement) || |>GLOBAL:document<|.body).getElementsByTagName('*');
    var elements = [], child;
    for (var i = 0, length = children.length; i < length; i++) {
      child = children[i];
      if (|>CLASS:Element<|.hasClassName(child, className))
        elements.push(|>CLASS:Element<|.extend(child));
    }
    return elements;
  }
};

/*--------------------------------------------------------------------------*/

if (!|>GLOBAL:window<|.Element)
  var |>CLASS:Element<| = new |>CLASS:Object<|();

|>CLASS:Element<|.extend = function(element) {
  if (!element || |>GLOBAL:_nativeExtensions<| || element.nodeType == 3) return element;

  if (!element._extended && element.tagName && element != |>GLOBAL:window<|) {
    var methods = |>CLASS:Object<|.clone(|>CLASS:Element<|.Methods), cache = |>CLASS:Element<|.extend.cache;

    if (element.tagName == 'FORM')
      |>CLASS:Object<|.extend(methods, |>CLASS:Form<|.Methods);
    if (['INPUT', 'TEXTAREA', 'SELECT'].include(element.tagName))
      |>CLASS:Object<|.extend(methods, |>CLASS:Form<|.Element.Methods);

    |>CLASS:Object<|.extend(methods, |>CLASS:Element<|.Methods.Simulated);

    for (var property in methods) {
      var value = methods[property];
      if (typeof value == 'function' && !(property in element))
        element[property] = cache.findOrStore(value);
    }
  }

  element._extended = true;
  return element;
};

|>CLASS:Element<|.extend.cache = {
  |>METHOD:findOrStore<|: function(value) {
    return this[value] = this[value] || function() {
      return value.apply(null, [this].concat($A(arguments)));
    }
  }
};

|>CLASS:Element<|.Methods = {
  |>METHOD:visible<|: function(element) {
    return $(element).style.display != 'none';
  },

  |>METHOD:toggle<|: function(element) {
    element = $(element);
    |>CLASS:Element<|[|>CLASS:Element<|.visible(element) ? 'hide' : 'show'](element);
    return element;
  },

  |>METHOD:hide<|: function(element) {
    $(element).style.display = 'none';
    return element;
  },

  |>METHOD:show<|: function(element) {
    $(element).style.display = '';
    return element;
  },

  |>METHOD:remove<|: function(element) {
    element = $(element);
    element.parentNode.removeChild(element);
    return element;
  },

  |>METHOD:update<|: function(element, html) {
    html = typeof html == 'undefined' ? '' : html.toString();
    $(element).innerHTML = html.stripScripts();
    setTimeout(function() {html.evalScripts()}, 10);
    return element;
  },

  |>METHOD:replace<|: function(element, html) {
    element = $(element);
    html = typeof html == 'undefined' ? '' : html.toString();
    if (element.outerHTML) {
      element.outerHTML = html.stripScripts();
    } else {
      var range = element.ownerDocument.createRange();
      range.selectNodeContents(element);
      element.parentNode.replaceChild(
        range.createContextualFragment(html.stripScripts()), element);
    }
    setTimeout(function() {html.evalScripts()}, 10);
    return element;
  },

  |>METHOD:inspect<|: function(element) {
    element = $(element);
    var result = '<' + element.tagName.toLowerCase();
    $H({'id': 'id', 'className': 'class'}).each(function(pair) {
      var property = pair.first(), attribute = pair.last();
      var value = (element[property] || '').toString();
      if (value) result += ' ' + attribute + '=' + value.inspect(true);
    });
    return result + '>';
  },

  |>METHOD:recursivelyCollect<|: function(element, property) {
    element = $(element);
    var elements = [];
    while (element = element[property])
      if (element.nodeType == 1)
        elements.push(|>CLASS:Element<|.extend(element));
    return elements;
  },

  |>METHOD:ancestors<|: function(element) {
    return $(element).recursivelyCollect('parentNode');
  },

  |>METHOD:descendants<|: function(element) {
    return $A($(element).getElementsByTagName('*'));
  },

  |>METHOD:immediateDescendants<|: function(element) {
    if (!(element = $(element).firstChild)) return [];
    while (element && element.nodeType != 1) element = element.nextSibling;
    if (element) return [element].concat($(element).nextSiblings());
    return [];
  },

  |>METHOD:previousSiblings<|: function(element) {
    return $(element).recursivelyCollect('previousSibling');
  },

  |>METHOD:nextSiblings<|: function(element) {
    return $(element).recursivelyCollect('nextSibling');
  },

  |>METHOD:siblings<|: function(element) {
    element = $(element);
    return element.previousSiblings().reverse().concat(element.nextSiblings());
  },

  |>METHOD:match<|: function(element, selector) {
    if (typeof selector == 'string')
      selector = new |>CLASS:Selector<|(selector);
    return selector.match($(element));
  },

  |>METHOD:up<|: function(element, expression, index) {
    return |>CLASS:Selector<|.findElement($(element).ancestors(), expression, index);
  },

  |>METHOD:down<|: function(element, expression, index) {
    return |>CLASS:Selector<|.findElement($(element).descendants(), expression, index);
  },

  |>METHOD:previous<|: function(element, expression, index) {
    return |>CLASS:Selector<|.findElement($(element).previousSiblings(), expression, index);
  },

  |>METHOD:next<|: function(element, expression, index) {
    return |>CLASS:Selector<|.findElement($(element).nextSiblings(), expression, index);
  },

  |>METHOD:getElementsBySelector<|: function() {
    var args = $A(arguments), element = $(args.shift());
    return |>CLASS:Selector<|.findChildElements(element, args);
  },

  |>METHOD:getElementsByClassName<|: function(element, className) {
    return |>GLOBAL:document<|.getElementsByClassName(className, element);
  },

  |>METHOD:readAttribute<|: function(element, name) {
    element = $(element);
    if (|>GLOBAL:document<|.all && !|>GLOBAL:window<|.opera) {
      var t = |>CLASS:Element<|._attributeTranslations;
      if (t.values[name]) return t.values[name](element, name);
      if (t.names[name])  name = t.names[name];
      var attribute = element.attributes[name];
      if(attribute) return attribute.nodeValue;
    }
    return element.getAttribute(name);
  },

  |>METHOD:getHeight<|: function(element) {
    return $(element).getDimensions().height;
  },

  |>METHOD:getWidth<|: function(element) {
    return $(element).getDimensions().width;
  },

  |>METHOD:classNames<|: function(element) {
    return new |>CLASS:Element<|.ClassNames(element);
  },

  |>METHOD:hasClassName<|: function(element, className) {
    if (!(element = $(element))) return;
    var elementClassName = element.className;
    if (elementClassName.length == 0) return false;
    if (elementClassName == className ||
        elementClassName.match(new |>CLASS:RegExp<|("(^|\\s)" + className + "(\\s|$)")))
      return true;
    return false;
  },

  |>METHOD:addClassName<|: function(element, className) {
    if (!(element = $(element))) return;
    |>CLASS:Element<|.classNames(element).add(className);
    return element;
  },

  |>METHOD:removeClassName<|: function(element, className) {
    if (!(element = $(element))) return;
    |>CLASS:Element<|.classNames(element).remove(className);
    return element;
  },

  |>METHOD:toggleClassName<|: function(element, className) {
    if (!(element = $(element))) return;
    |>CLASS:Element<|.classNames(element)[element.hasClassName(className) ? 'remove' : 'add'](className);
    return element;
  },

  |>METHOD:observe<|: function() {
    |>CLASS:Event<|.observe.apply(|>CLASS:Event<|, arguments);
    return $A(arguments).first();
  },

  |>METHOD:stopObserving<|: function() {
    |>CLASS:Event<|.stopObserving.apply(|>CLASS:Event<|, arguments);
    return $A(arguments).first();
  },

  // removes whitespace-only text node children
  |>METHOD:cleanWhitespace<|: function(element) {
    element = $(element);
    var node = element.firstChild;
    while (node) {
      var nextNode = node.nextSibling;
      if (node.nodeType == 3 && !|>REGEXP:/\S/<|.test(node.nodeValue))
        element.removeChild(node);
      node = nextNode;
    }
    return element;
  },

  |>METHOD:empty<|: function(element) {
    return $(element).innerHTML.match(|>REGEXP:/^\s*$/<|);
  },

  |>METHOD:descendantOf<|: function(element, ancestor) {
    element = $(element), ancestor = $(ancestor);
    while (element = element.parentNode)
      if (element == ancestor) return true;
    return false;
  },

  |>METHOD:scrollTo<|: function(element) {
    element = $(element);
    var pos = |>CLASS:Position<|.cumulativeOffset(element);
    |>GLOBAL:window<|.scrollTo(pos[0], pos[1]);
    return element;
  },

  |>METHOD:getStyle<|: function(element, style) {
    element = $(element);
    if (['float','cssFloat'].include(style))
      style = (typeof element.style.styleFloat != 'undefined' ? 'styleFloat' : 'cssFloat');
    style = style.camelize();
    var value = element.style[style];
    if (!value) {
      if (|>GLOBAL:document<|.defaultView && |>GLOBAL:document<|.defaultView.getComputedStyle) {
        var css = |>GLOBAL:document<|.defaultView.getComputedStyle(element, null);
        value = css ? css[style] : null;
      } else if (element.currentStyle) {
        value = element.currentStyle[style];
      }
    }

    if((value == 'auto') && ['width','height'].include(style) && (element.getStyle('display') != 'none'))
      value = element['offset'+style.capitalize()] + 'px';

    if (|>GLOBAL:window<|.opera && ['left', 'top', 'right', 'bottom'].include(style))
      if (|>CLASS:Element<|.getStyle(element, 'position') == 'static') value = 'auto';
    if(style == 'opacity') {
      if(value) return parseFloat(value);
      if(value = (element.getStyle('filter') || '').match(|>REGEXP:/alpha\(opacity=(.*)\)/<|))
        if(value[1]) return parseFloat(value[1]) / 100;
      return 1.0;
    }
    return value == 'auto' ? null : value;
  },

  |>METHOD:setStyle<|: function(element, style) {
    element = $(element);
    for (var name in style) {
      var value = style[name];
      if(name == 'opacity') {
        if (value == 1) {
          value = (|>REGEXP:/Gecko/<|.test(|>GLOBAL:navigator<|.userAgent) &&
            !|>REGEXP:/Konqueror|Safari|KHTML/<|.test(|>GLOBAL:navigator<|.userAgent)) ? 0.999999 : 1.0;
          if(|>REGEXP:/MSIE/<|.test(|>GLOBAL:navigator<|.userAgent) && !|>GLOBAL:window<|.opera)
            element.style.filter = element.getStyle('filter').replace(|>REGEXP:/alpha\([^\)]*\)/gi<|,'');
        } else if(value == '') {
          if(|>REGEXP:/MSIE/<|.test(|>GLOBAL:navigator<|.userAgent) && !|>GLOBAL:window<|.opera)
            element.style.filter = element.getStyle('filter').replace(|>REGEXP:/alpha\([^\)]*\)/gi<|,'');
        } else {
          if(value < 0.00001) value = 0;
          if(|>REGEXP:/MSIE/<|.test(|>GLOBAL:navigator<|.userAgent) && !|>GLOBAL:window<|.opera)
            element.style.filter = element.getStyle('filter').replace(|>REGEXP:/alpha\([^\)]*\)/gi<|,'') +
              'alpha(opacity='+value*100+')';
        }
      } else if(['float','cssFloat'].include(name)) name = (typeof element.style.styleFloat != 'undefined') ? 'styleFloat' : 'cssFloat';
      element.style[name.camelize()] = value;
    }
    return element;
  },

  |>METHOD:getDimensions<|: function(element) {
    element = $(element);
    var display = $(element).getStyle('display');
    if (display != 'none' && display != null) // Safari bug
      return {width: element.offsetWidth, height: element.offsetHeight};

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    var els = element.style;
    var originalVisibility = els.visibility;
    var originalPosition = els.position;
    var originalDisplay = els.display;
    els.visibility = 'hidden';
    els.position = 'absolute';
    els.display = 'block';
    var originalWidth = element.clientWidth;
    var originalHeight = element.clientHeight;
    els.display = originalDisplay;
    els.position = originalPosition;
    els.visibility = originalVisibility;
    return {width: originalWidth, height: originalHeight};
  },

  |>METHOD:makePositioned<|: function(element) {
    element = $(element);
    var pos = |>CLASS:Element<|.getStyle(element, 'position');
    if (pos == 'static' || !pos) {
      element._madePositioned = true;
      element.style.position = 'relative';
      // Opera returns the offset relative to the positioning context, when an
      // element is position relative but top and left have not been defined
      if (|>GLOBAL:window<|.opera) {
        element.style.top = 0;
        element.style.left = 0;
      }
    }
    return element;
  },

  |>METHOD:undoPositioned<|: function(element) {
    element = $(element);
    if (element._madePositioned) {
      element._madePositioned = undefined;
      element.style.position =
        element.style.top =
        element.style.left =
        element.style.bottom =
        element.style.right = '';
    }
    return element;
  },

  |>METHOD:makeClipping<|: function(element) {
    element = $(element);
    if (element._overflow) return element;
    element._overflow = element.style.overflow || 'auto';
    if ((|>CLASS:Element<|.getStyle(element, 'overflow') || 'visible') != 'hidden')
      element.style.overflow = 'hidden';
    return element;
  },

  |>METHOD:undoClipping<|: function(element) {
    element = $(element);
    if (!element._overflow) return element;
    element.style.overflow = element._overflow == 'auto' ? '' : element._overflow;
    element._overflow = null;
    return element;
  }
};

|>CLASS:Object<|.extend(|>CLASS:Element<|.Methods, {childOf: |>CLASS:Element<|.Methods.descendantOf});

|>CLASS:Element<|._attributeTranslations = {};

|>CLASS:Element<|._attributeTranslations.names = {
  colspan:   "colSpan",
  rowspan:   "rowSpan",
  valign:    "vAlign",
  datetime:  "dateTime",
  accesskey: "accessKey",
  tabindex:  "tabIndex",
  enctype:   "encType",
  maxlength: "maxLength",
  readonly:  "readOnly",
  longdesc:  "longDesc"
};

|>CLASS:Element<|._attributeTranslations.values = {
  |>METHOD:_getAttr<|: function(element, attribute) {
    return element.getAttribute(attribute, 2);
  },

  |>METHOD:_flag<|: function(element, attribute) {
    return $(element).hasAttribute(attribute) ? attribute : null;
  },

  |>METHOD:style<|: function(element) {
    return element.style.cssText.toLowerCase();
  },

  |>METHOD:title<|: function(element) {
    var node = element.getAttributeNode('title');
    return node.specified ? node.nodeValue : null;
  }
};

|>CLASS:Object<|.extend(|>CLASS:Element<|._attributeTranslations.values, {
  href: |>CLASS:Element<|._attributeTranslations.values._getAttr,
  src:  |>CLASS:Element<|._attributeTranslations.values._getAttr,
  disabled: |>CLASS:Element<|._attributeTranslations.values._flag,
  checked:  |>CLASS:Element<|._attributeTranslations.values._flag,
  readonly: |>CLASS:Element<|._attributeTranslations.values._flag,
  multiple: |>CLASS:Element<|._attributeTranslations.values._flag
});

|>CLASS:Element<|.Methods.Simulated = {
  |>METHOD:hasAttribute<|: function(element, attribute) {
    var t = |>CLASS:Element<|._attributeTranslations;
    attribute = t.names[attribute] || attribute;
    return $(element).getAttributeNode(attribute).specified;
  }
};

// IE is missing .innerHTML support for TABLE-related elements
if (|>GLOBAL:document<|.all && !|>GLOBAL:window<|.opera){
  |>CLASS:Element<|.Methods.update = function(element, html) {
    element = $(element);
    html = typeof html == 'undefined' ? '' : html.toString();
    var tagName = element.tagName.toUpperCase();
    if (['THEAD','TBODY','TR','TD'].include(tagName)) {
      var div = |>GLOBAL:document<|.createElement('div');
      switch (tagName) {
        case 'THEAD':
        case 'TBODY':
          div.innerHTML = '<table><tbody>' +  html.stripScripts() + '</tbody></table>';
          |>GLOBAL:depth<| = 2;
          break;
        case 'TR':
          div.innerHTML = '<table><tbody><tr>' +  html.stripScripts() + '</tr></tbody></table>';
          |>GLOBAL:depth<| = 3;
          break;
        case 'TD':
          div.innerHTML = '<table><tbody><tr><td>' +  html.stripScripts() + '</td></tr></tbody></table>';
          |>GLOBAL:depth<| = 4;
      }
      $A(element.childNodes).each(function(node){
        element.removeChild(node)
      });
      |>GLOBAL:depth<|.times(function(){ div = div.firstChild });

      $A(div.childNodes).each(
        function(node){ element.appendChild(node) });
    } else {
      element.innerHTML = html.stripScripts();
    }
    setTimeout(function() {html.evalScripts()}, 10);
    return element;
  }
};

|>CLASS:Object<|.extend(|>CLASS:Element<|, |>CLASS:Element<|.Methods);

var |>GLOBAL:_nativeExtensions<| = false;

if(|>REGEXP:/Konqueror|Safari|KHTML/<|.test(|>GLOBAL:navigator<|.userAgent))
  ['', 'Form', 'Input', 'TextArea', 'Select'].each(function(tag) {
    var className = 'HTML' + tag + 'Element';
    if(|>GLOBAL:window<|[className]) return;
    var klass = |>GLOBAL:window<|[className] = {};
    klass.prototype = |>GLOBAL:document<|.createElement(tag ? tag.toLowerCase() : 'div').__proto__;
  });

|>CLASS:Element<|.addMethods = function(methods) {
  |>CLASS:Object<|.extend(|>CLASS:Element<|.Methods, methods || {});

  function |>METHOD:copy<|(methods, destination, onlyIfAbsent) {
    onlyIfAbsent = onlyIfAbsent || false;
    var cache = |>CLASS:Element<|.extend.cache;
    for (var property in methods) {
      var value = methods[property];
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = cache.findOrStore(value);
    }
  }

  if (typeof HTMLElement != 'undefined') {
    copy(|>CLASS:Element<|.Methods, |>CLASS:HTMLElement<|.prototype);
    copy(|>CLASS:Element<|.Methods.Simulated, |>CLASS:HTMLElement<|.prototype, true);
    copy(|>CLASS:Form<|.Methods, |>CLASS:HTMLFormElement<|.prototype);
    [|>CLASS:HTMLInputElement<|, |>CLASS:HTMLTextAreaElement<|, |>CLASS:HTMLSelectElement<|].each(function(klass) {
      copy(|>CLASS:Form<|.Element.Methods, klass.prototype);
    });
    |>GLOBAL:_nativeExtensions<| = true;
  }
}

var |>CLASS:Toggle<| = new |>CLASS:Object<|();
|>CLASS:Toggle<|.display = |>CLASS:Element<|.toggle;

/*--------------------------------------------------------------------------*/

|>CLASS:Abstract<|.Insertion = function(adjacency) {
  this.adjacency = adjacency;
}

|>CLASS:Abstract<|.Insertion.prototype = {
  |>METHOD:initialize<|: function(element, content) {
    this.element = $(element);
    this.content = content.stripScripts();

    if (this.adjacency && this.element.insertAdjacentHTML) {
      try {
        this.element.insertAdjacentHTML(this.adjacency, this.content);
      } catch (e) {
        var tagName = this.element.tagName.toUpperCase();
        if (['TBODY', 'TR'].include(tagName)) {
          this.insertContent(this.contentFromAnonymousTable());
        } else {
          throw e;
        }
      }
    } else {
      this.range = this.element.ownerDocument.createRange();
      if (this.initializeRange) this.initializeRange();
      this.insertContent([this.range.createContextualFragment(this.content)]);
    }

    setTimeout(function() {content.evalScripts()}, 10);
  },

  |>METHOD:contentFromAnonymousTable<|: function() {
    var div = |>GLOBAL:document<|.createElement('div');
    div.innerHTML = '<table><tbody>' + this.content + '</tbody></table>';
    return $A(div.childNodes[0].childNodes[0].childNodes);
  }
}

var |>CLASS:Insertion<| = new |>CLASS:Object<|();

|>CLASS:Insertion<|.Before = |>CLASS:Class<|.create();
|>CLASS:Insertion<|.Before.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.Insertion('beforeBegin'), {
  |>METHOD:initializeRange<|: function() {
    this.range.setStartBefore(this.element);
  },

  |>METHOD:insertContent<|: function(fragments) {
    fragments.each((function(fragment) {
      this.element.parentNode.insertBefore(fragment, this.element);
    }).bind(this));
  }
});

|>CLASS:Insertion<|.Top = |>CLASS:Class<|.create();
|>CLASS:Insertion<|.Top.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.Insertion('afterBegin'), {
  |>METHOD:initializeRange<|: function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(true);
  },

  |>METHOD:insertContent<|: function(fragments) {
    fragments.reverse(false).each((function(fragment) {
      this.element.insertBefore(fragment, this.element.firstChild);
    }).bind(this));
  }
});

|>CLASS:Insertion<|.Bottom = |>CLASS:Class<|.create();
|>CLASS:Insertion<|.Bottom.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.Insertion('beforeEnd'), {
  |>METHOD:initializeRange<|: function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(this.element);
  },

  |>METHOD:insertContent<|: function(fragments) {
    fragments.each((function(fragment) {
      this.element.appendChild(fragment);
    }).bind(this));
  }
});

|>CLASS:Insertion<|.After = |>CLASS:Class<|.create();
|>CLASS:Insertion<|.After.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.Insertion('afterEnd'), {
  |>METHOD:initializeRange<|: function() {
    this.range.setStartAfter(this.element);
  },

  |>METHOD:insertContent<|: function(fragments) {
    fragments.each((function(fragment) {
      this.element.parentNode.insertBefore(fragment,
        this.element.nextSibling);
    }).bind(this));
  }
});

/*--------------------------------------------------------------------------*/

|>CLASS:Element<|.ClassNames = |>CLASS:Class<|.create();
|>CLASS:Element<|.ClassNames.prototype = {
  |>METHOD:initialize<|: function(element) {
    this.element = $(element);
  },

  |>METHOD:_each<|: function(iterator) {
    this.element.className.split(|>REGEXP:/\s+/<|).select(function(name) {
      return name.length > 0;
    })._each(iterator);
  },

  |>METHOD:set<|: function(className) {
    this.element.className = className;
  },

  |>METHOD:add<|: function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set($A(this).concat(classNameToAdd).join(' '));
  },

  |>METHOD:remove<|: function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set($A(this).without(classNameToRemove).join(' '));
  },

  |>METHOD:toString<|: function() {
    return $A(this).join(' ');
  }
};

|>CLASS:Object<|.extend(|>CLASS:Element<|.ClassNames.prototype, |>CLASS:Enumerable<|);
var |>CLASS:Selector<| = |>CLASS:Class<|.create();
|>CLASS:Selector<|.prototype = {
  |>METHOD:initialize<|: function(expression) {
    this.params = {classNames: []};
    this.expression = expression.toString().strip();
    this.parseExpression();
    this.compileMatcher();
  },

  |>METHOD:parseExpression<|: function() {
    function |>METHOD:abort<|(message) { throw 'Parse error in selector: ' + message; }

    if (this.expression == '')  abort('empty expression');

    var params = this.params, expr = this.expression, match, modifier, clause, rest;
    while (match = expr.match(|>REGEXP:/^(.*)\[([a-z0-9_:-]+?)(?:([~\|!]?=)(?:"([^"]*)"|([^\]\s]*)))?\]$/i<|)) {
      params.attributes = params.attributes || [];
      params.attributes.push({name: match[2], operator: match[3], value: match[4] || match[5] || ''});
      expr = match[1];
    }

    if (expr == '*') return this.params.wildcard = true;

    while (match = expr.match(|>REGEXP:/^([^a-z0-9_-])?([a-z0-9_-]+)(.*)/i<|)) {
      modifier = match[1], clause = match[2], rest = match[3];
      switch (modifier) {
        case '#':       params.id = clause; break;
        case '.':       params.classNames.push(clause); break;
        case '':
        case undefined: params.tagName = clause.toUpperCase(); break;
        default:        abort(expr.inspect());
      }
      expr = rest;
    }

    if (expr.length > 0) abort(expr.inspect());
  },

  |>METHOD:buildMatchExpression<|: function() {
    var params = this.params, conditions = [], clause;

    if (params.wildcard)
      conditions.push('true');
    if (clause = params.id)
      conditions.push('element.readAttribute("id") == ' + clause.inspect());
    if (clause = params.tagName)
      conditions.push('element.tagName.toUpperCase() == ' + clause.inspect());
    if ((clause = params.classNames).length > 0)
      for (var i = 0, length = clause.length; i < length; i++)
        conditions.push('element.hasClassName(' + clause[i].inspect() + ')');
    if (clause = params.attributes) {
      clause.each(function(attribute) {
        var value = 'element.readAttribute(' + attribute.name.inspect() + ')';
        var splitValueBy = function(delimiter) {
          return value + ' && ' + value + '.split(' + delimiter.inspect() + ')';
        }

        switch (attribute.operator) {
          case '=':       conditions.push(value + ' == ' + attribute.value.inspect()); break;
          case '~=':      conditions.push(splitValueBy(' ') + '.include(' + attribute.value.inspect() + ')'); break;
          case '|=':      conditions.push(
                            splitValueBy('-') + '.first().toUpperCase() == ' + attribute.value.toUpperCase().inspect()
                          ); break;
          case '!=':      conditions.push(value + ' != ' + attribute.value.inspect()); break;
          case '':
          case undefined: conditions.push('element.hasAttribute(' + attribute.name.inspect() + ')'); break;
          default:        throw 'Unknown operator ' + attribute.operator + ' in selector';
        }
      });
    }

    return conditions.join(' && ');
  },

  |>METHOD:compileMatcher<|: function() {
    this.match = new |>CLASS:Function<|('element', 'if (!element.tagName) return false; \
      element = $(element); \
      return ' + this.buildMatchExpression());
  },

  |>METHOD:findElements<|: function(scope) {
    var element;

    if (element = $(this.params.id))
      if (this.match(element))
        if (!scope || |>CLASS:Element<|.childOf(element, scope))
          return [element];

    scope = (scope || |>GLOBAL:document<|).getElementsByTagName(this.params.tagName || '*');

    var results = [];
    for (var i = 0, length = scope.length; i < length; i++)
      if (this.match(element = scope[i]))
        results.push(|>CLASS:Element<|.extend(element));

    return results;
  },

  |>METHOD:toString<|: function() {
    return this.expression;
  }
}

|>CLASS:Object<|.extend(|>CLASS:Selector<|, {
  |>METHOD:matchElements<|: function(elements, expression) {
    var selector = new |>CLASS:Selector<|(expression);
    return elements.select(selector.match.bind(selector)).map(|>CLASS:Element<|.extend);
  },

  |>METHOD:findElement<|: function(elements, expression, index) {
    if (typeof expression == 'number') index = expression, expression = false;
    return |>CLASS:Selector<|.matchElements(elements, expression || '*')[index || 0];
  },

  |>METHOD:findChildElements<|: function(element, expressions) {
    return expressions.map(function(expression) {
      return expression.match(|>REGEXP:/[^\s"]+(?:"[^"]*"[^\s"]+)*/g<|).inject([null], function(results, expr) {
        var selector = new |>CLASS:Selector<|(expr);
        return results.inject([], function(elements, result) {
          return elements.concat(selector.findElements(result || element));
        });
      });
    }).flatten();
  }
});

function |>METHOD:$$<|() {
  return |>CLASS:Selector<|.findChildElements(|>GLOBAL:document<|, $A(arguments));
}
var |>CLASS:Form<| = {
  |>METHOD:reset<|: function(form) {
    $(form).reset();
    return form;
  },

  |>METHOD:serializeElements<|: function(elements, getHash) {
    var data = elements.inject({}, function(result, element) {
      if (!element.disabled && element.name) {
        var key = element.name, value = $(element).getValue();
        if (value != undefined) {
          if (result[key]) {
            if (result[key].constructor != |>CLASS:Array<|) result[key] = [result[key]];
            result[key].push(value);
          }
          else result[key] = value;
        }
      }
      return result;
    });

    return getHash ? data : |>CLASS:Hash<|.toQueryString(data);
  }
};

|>CLASS:Form<|.Methods = {
  |>METHOD:serialize<|: function(form, getHash) {
    return |>CLASS:Form<|.serializeElements(|>CLASS:Form<|.getElements(form), getHash);
  },

  |>METHOD:getElements<|: function(form) {
    return $A($(form).getElementsByTagName('*')).inject([],
      function(elements, child) {
        if (|>CLASS:Form<|.Element.Serializers[child.tagName.toLowerCase()])
          elements.push(|>CLASS:Element<|.extend(child));
        return elements;
      }
    );
  },

  |>METHOD:getInputs<|: function(form, typeName, name) {
    form = $(form);
    var inputs = form.getElementsByTagName('input');

    if (!typeName && !name) return $A(inputs).map(|>CLASS:Element<|.extend);

    for (var i = 0, matchingInputs = [], length = inputs.length; i < length; i++) {
      var input = inputs[i];
      if ((typeName && input.type != typeName) || (name && input.name != name))
        continue;
      matchingInputs.push(|>CLASS:Element<|.extend(input));
    }

    return matchingInputs;
  },

  |>METHOD:disable<|: function(form) {
    form = $(form);
    form.getElements().each(function(element) {
      element.blur();
      element.disabled = 'true';
    });
    return form;
  },

  |>METHOD:enable<|: function(form) {
    form = $(form);
    form.getElements().each(function(element) {
      element.disabled = '';
    });
    return form;
  },

  |>METHOD:findFirstElement<|: function(form) {
    return $(form).getElements().find(function(element) {
      return element.type != 'hidden' && !element.disabled &&
        ['input', 'select', 'textarea'].include(element.tagName.toLowerCase());
    });
  },

  |>METHOD:focusFirstElement<|: function(form) {
    form = $(form);
    form.findFirstElement().activate();
    return form;
  }
}

|>CLASS:Object<|.extend(|>CLASS:Form<|, |>CLASS:Form<|.Methods);

/*--------------------------------------------------------------------------*/

|>CLASS:Form<|.Element = {
  |>METHOD:focus<|: function(element) {
    $(element).focus();
    return element;
  },

  |>METHOD:select<|: function(element) {
    $(element).select();
    return element;
  }
}

|>CLASS:Form<|.Element.Methods = {
  |>METHOD:serialize<|: function(element) {
    element = $(element);
    if (!element.disabled && element.name) {
      var value = element.getValue();
      if (value != undefined) {
        var pair = {};
        pair[element.name] = value;
        return |>CLASS:Hash<|.toQueryString(pair);
      }
    }
    return '';
  },

  |>METHOD:getValue<|: function(element) {
    element = $(element);
    var method = element.tagName.toLowerCase();
    return |>CLASS:Form<|.Element.Serializers[method](element);
  },

  |>METHOD:clear<|: function(element) {
    $(element).value = '';
    return element;
  },

  |>METHOD:present<|: function(element) {
    return $(element).value != '';
  },

  |>METHOD:activate<|: function(element) {
    element = $(element);
    element.focus();
    if (element.select && ( element.tagName.toLowerCase() != 'input' ||
      !['button', 'reset', 'submit'].include(element.type) ) )
      element.select();
    return element;
  },

  |>METHOD:disable<|: function(element) {
    element = $(element);
    element.disabled = true;
    return element;
  },

  |>METHOD:enable<|: function(element) {
    element = $(element);
    element.blur();
    element.disabled = false;
    return element;
  }
}

|>CLASS:Object<|.extend(|>CLASS:Form<|.Element, |>CLASS:Form<|.Element.Methods);
var |>CLASS:Field<| = |>CLASS:Form<|.Element;
var |>GLOBAL:$F<| = |>CLASS:Form<|.Element.getValue;

/*--------------------------------------------------------------------------*/

|>CLASS:Form<|.Element.Serializers = {
  |>METHOD:input<|: function(element) {
    switch (element.type.toLowerCase()) {
      case 'checkbox':
      case 'radio':
        return |>CLASS:Form<|.Element.Serializers.inputSelector(element);
      default:
        return |>CLASS:Form<|.Element.Serializers.textarea(element);
    }
  },

  |>METHOD:inputSelector<|: function(element) {
    return element.checked ? element.value : null;
  },

  |>METHOD:textarea<|: function(element) {
    return element.value;
  },

  |>METHOD:select<|: function(element) {
    return this[element.type == 'select-one' ?
      'selectOne' : 'selectMany'](element);
  },

  |>METHOD:selectOne<|: function(element) {
    var index = element.selectedIndex;
    return index >= 0 ? this.optionValue(element.options[index]) : null;
  },

  |>METHOD:selectMany<|: function(element) {
    var values, length = element.length;
    if (!length) return null;

    for (var i = 0, values = []; i < length; i++) {
      var opt = element.options[i];
      if (opt.selected) values.push(this.optionValue(opt));
    }
    return values;
  },

  |>METHOD:optionValue<|: function(opt) {
    // extend element because hasAttribute may not be native
    return |>CLASS:Element<|.extend(opt).hasAttribute('value') ? opt.value : opt.text;
  }
}

/*--------------------------------------------------------------------------*/

|>CLASS:Abstract<|.TimedObserver = function() {}
|>CLASS:Abstract<|.TimedObserver.prototype = {
  |>METHOD:initialize<|: function(element, frequency, callback) {
    this.frequency = frequency;
    this.element   = $(element);
    this.callback  = callback;

    this.lastValue = this.getValue();
    this.registerCallback();
  },

  |>METHOD:registerCallback<|: function() {
    setInterval(this.onTimerEvent.bind(this), this.frequency * 1000);
  },

  |>METHOD:onTimerEvent<|: function() {
    var value = this.getValue();
    var changed = ('string' == typeof this.lastValue && 'string' == typeof value
      ? this.lastValue != value : String(this.lastValue) != String(value));
    if (changed) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  }
}

|>CLASS:Form<|.Element.Observer = |>CLASS:Class<|.create();
|>CLASS:Form<|.Element.Observer.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.TimedObserver(), {
  |>METHOD:getValue<|: function() {
    return |>CLASS:Form<|.Element.getValue(this.element);
  }
});

|>CLASS:Form<|.Observer = |>CLASS:Class<|.create();
|>CLASS:Form<|.Observer.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.TimedObserver(), {
  |>METHOD:getValue<|: function() {
    return |>CLASS:Form<|.serialize(this.element);
  }
});

/*--------------------------------------------------------------------------*/

|>CLASS:Abstract<|.EventObserver = function() {}
|>CLASS:Abstract<|.EventObserver.prototype = {
  |>METHOD:initialize<|: function(element, callback) {
    this.element  = $(element);
    this.callback = callback;

    this.lastValue = this.getValue();
    if (this.element.tagName.toLowerCase() == 'form')
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  },

  |>METHOD:onElementEvent<|: function() {
    var value = this.getValue();
    if (this.lastValue != value) {
      this.callback(this.element, value);
      this.lastValue = value;
    }
  },

  |>METHOD:registerFormCallbacks<|: function() {
    |>CLASS:Form<|.getElements(this.element).each(this.registerCallback.bind(this));
  },

  |>METHOD:registerCallback<|: function(element) {
    if (element.type) {
      switch (element.type.toLowerCase()) {
        case 'checkbox':
        case 'radio':
          |>CLASS:Event<|.observe(element, 'click', this.onElementEvent.bind(this));
          break;
        default:
          |>CLASS:Event<|.observe(element, 'change', this.onElementEvent.bind(this));
          break;
      }
    }
  }
}

|>CLASS:Form<|.Element.EventObserver = |>CLASS:Class<|.create();
|>CLASS:Form<|.Element.EventObserver.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.EventObserver(), {
  |>METHOD:getValue<|: function() {
    return |>CLASS:Form<|.Element.getValue(this.element);
  }
});

|>CLASS:Form<|.EventObserver = |>CLASS:Class<|.create();
|>CLASS:Form<|.EventObserver.prototype = |>CLASS:Object<|.extend(new |>CLASS:Abstract<|.EventObserver(), {
  |>METHOD:getValue<|: function() {
    return |>CLASS:Form<|.serialize(this.element);
  }
});
if (!|>GLOBAL:window<|.Event) {
  var |>CLASS:Event<| = new |>CLASS:Object<|();
}

|>CLASS:Object<|.extend(|>CLASS:Event<|, {
  KEY_BACKSPACE: 8,
  KEY_TAB:       9,
  KEY_RETURN:   13,
  KEY_ESC:      27,
  KEY_LEFT:     37,
  KEY_UP:       38,
  KEY_RIGHT:    39,
  KEY_DOWN:     40,
  KEY_DELETE:   46,
  KEY_HOME:     36,
  KEY_END:      35,
  KEY_PAGEUP:   33,
  KEY_PAGEDOWN: 34,

  |>METHOD:element<|: function(event) {
    return event.target || event.srcElement;
  },

  |>METHOD:isLeftClick<|: function(event) {
    return (((event.which) && (event.which == 1)) ||
            ((event.button) && (event.button == 1)));
  },

  |>METHOD:pointerX<|: function(event) {
    return event.pageX || (event.clientX +
      (|>GLOBAL:document<|.documentElement.scrollLeft || |>GLOBAL:document<|.body.scrollLeft));
  },

  |>METHOD:pointerY<|: function(event) {
    return event.pageY || (event.clientY +
      (|>GLOBAL:document<|.documentElement.scrollTop || |>GLOBAL:document<|.body.scrollTop));
  },

  |>METHOD:stop<|: function(event) {
    if (event.preventDefault) {
      event.preventDefault();
      event.stopPropagation();
    } else {
      event.returnValue = false;
      event.cancelBubble = true;
    }
  },

  // find the first node with the given tagName, starting from the
  // node the event was triggered on; traverses the DOM upwards
  |>METHOD:findElement<|: function(event, tagName) {
    var element = |>CLASS:Event<|.element(event);
    while (element.parentNode && (!element.tagName ||
        (element.tagName.toUpperCase() != tagName.toUpperCase())))
      element = element.parentNode;
    return element;
  },

  observers: false,

  |>METHOD:_observeAndCache<|: function(element, name, observer, useCapture) {
    if (!this.observers) this.observers = [];
    if (element.addEventListener) {
      this.observers.push([element, name, observer, useCapture]);
      element.addEventListener(name, observer, useCapture);
    } else if (element.attachEvent) {
      this.observers.push([element, name, observer, useCapture]);
      element.attachEvent('on' + name, observer);
    }
  },

  |>METHOD:unloadCache<|: function() {
    if (!|>CLASS:Event<|.observers) return;
    for (var i = 0, length = |>CLASS:Event<|.observers.length; i < length; i++) {
      |>CLASS:Event<|.stopObserving.apply(this, |>CLASS:Event<|.observers[i]);
      |>CLASS:Event<|.observers[i][0] = null;
    }
    |>CLASS:Event<|.observers = false;
  },

  |>METHOD:observe<|: function(element, name, observer, useCapture) {
    element = $(element);
    useCapture = useCapture || false;

    if (name == 'keypress' &&
        (|>GLOBAL:navigator<|.appVersion.match(|>REGEXP:/Konqueror|Safari|KHTML/<|)
        || element.attachEvent))
      name = 'keydown';

    |>CLASS:Event<|._observeAndCache(element, name, observer, useCapture);
  },

  |>METHOD:stopObserving<|: function(element, name, observer, useCapture) {
    element = $(element);
    useCapture = useCapture || false;

    if (name == 'keypress' &&
        (|>GLOBAL:navigator<|.appVersion.match(|>REGEXP:/Konqueror|Safari|KHTML/<|)
        || element.detachEvent))
      name = 'keydown';

    if (element.removeEventListener) {
      element.removeEventListener(name, observer, useCapture);
    } else if (element.detachEvent) {
      try {
        element.detachEvent('on' + name, observer);
      } catch (|>UNUSED:e<|) {}
    }
  }
});

/* prevent memory leaks in IE */
if (|>GLOBAL:navigator<|.appVersion.match(|>REGEXP:/\bMSIE\b/<|))
  |>CLASS:Event<|.observe(|>GLOBAL:window<|, 'unload', |>CLASS:Event<|.unloadCache, false);
var |>CLASS:Position<| = {
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: false,

  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  |>METHOD:prepare<|: function() {
    this.deltaX =  |>GLOBAL:window<|.pageXOffset
                || |>GLOBAL:document<|.documentElement.scrollLeft
                || |>GLOBAL:document<|.body.scrollLeft
                || 0;
    this.deltaY =  |>GLOBAL:window<|.pageYOffset
                || |>GLOBAL:document<|.documentElement.scrollTop
                || |>GLOBAL:document<|.body.scrollTop
                || 0;
  },

  |>METHOD:realOffset<|: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.scrollTop  || 0;
      valueL += element.scrollLeft || 0;
      element = element.parentNode;
    } while (element);
    return [valueL, valueT];
  },

  |>METHOD:cumulativeOffset<|: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
    } while (element);
    return [valueL, valueT];
  },

  |>METHOD:positionedOffset<|: function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      element = element.offsetParent;
      if (element) {
        if(element.tagName=='BODY') break;
        var p = |>CLASS:Element<|.getStyle(element, 'position');
        if (p == 'relative' || p == 'absolute') break;
      }
    } while (element);
    return [valueL, valueT];
  },

  |>METHOD:offsetParent<|: function(element) {
    if (element.offsetParent) return element.offsetParent;
    if (element == |>GLOBAL:document<|.body) return element;

    while ((element = element.parentNode) && element != |>GLOBAL:document<|.body)
      if (|>CLASS:Element<|.getStyle(element, 'position') != 'static')
        return element;

    return |>GLOBAL:document<|.body;
  },

  // caches x/y coordinate pair to use with overlap
  |>METHOD:within<|: function(element, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(element, x, y);
    this.xcomp = x;
    this.ycomp = y;
    this.offset = this.cumulativeOffset(element);

    return (y >= this.offset[1] &&
            y <  this.offset[1] + element.offsetHeight &&
            x >= this.offset[0] &&
            x <  this.offset[0] + element.offsetWidth);
  },

  |>METHOD:withinIncludingScrolloffsets<|: function(element, x, y) {
    var offsetcache = this.realOffset(element);

    this.xcomp = x + offsetcache[0] - this.deltaX;
    this.ycomp = y + offsetcache[1] - this.deltaY;
    this.offset = this.cumulativeOffset(element);

    return (this.ycomp >= this.offset[1] &&
            this.ycomp <  this.offset[1] + element.offsetHeight &&
            this.xcomp >= this.offset[0] &&
            this.xcomp <  this.offset[0] + element.offsetWidth);
  },

  // within must be called directly before
  |>METHOD:overlap<|: function(mode, element) {
    if (!mode) return 0;
    if (mode == 'vertical')
      return ((this.offset[1] + element.offsetHeight) - this.ycomp) /
        element.offsetHeight;
    if (mode == 'horizontal')
      return ((this.offset[0] + element.offsetWidth) - this.xcomp) /
        element.offsetWidth;
  },

  |>METHOD:page<|: function(forElement) {
    var valueT = 0, valueL = 0;

    var element = forElement;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;

      // Safari fix
      if (element.offsetParent==|>GLOBAL:document<|.body)
        if (|>CLASS:Element<|.getStyle(element,'position')=='absolute') break;

    } while (element = element.offsetParent);

    element = forElement;
    do {
      if (!|>GLOBAL:window<|.opera || element.tagName=='BODY') {
        valueT -= element.scrollTop  || 0;
        valueL -= element.scrollLeft || 0;
      }
    } while (element = element.parentNode);

    return [valueL, valueT];
  },

  |>METHOD:clone<|: function(source, target) {
    var options = |>CLASS:Object<|.extend({
      setLeft:    true,
      setTop:     true,
      setWidth:   true,
      setHeight:  true,
      offsetTop:  0,
      offsetLeft: 0
    }, arguments[2] || {})

    // find page position of source
    source = $(source);
    var p = |>CLASS:Position<|.page(source);

    // find coordinate system to use
    target = $(target);
    var delta = [0, 0];
    var parent = null;
    // delta [0,0] will do fine with position: fixed elements,
    // position:absolute needs offsetParent deltas
    if (|>CLASS:Element<|.getStyle(target,'position') == 'absolute') {
      parent = |>CLASS:Position<|.offsetParent(target);
      delta = |>CLASS:Position<|.page(parent);
    }

    // correct by body offsets (fixes Safari)
    if (parent == |>GLOBAL:document<|.body) {
      delta[0] -= |>GLOBAL:document<|.body.offsetLeft;
      delta[1] -= |>GLOBAL:document<|.body.offsetTop;
    }

    // set position
    if(options.setLeft)   target.style.left  = (p[0] - delta[0] + options.offsetLeft) + 'px';
    if(options.setTop)    target.style.top   = (p[1] - delta[1] + options.offsetTop) + 'px';
    if(options.setWidth)  target.style.width = source.offsetWidth + 'px';
    if(options.setHeight) target.style.height = source.offsetHeight + 'px';
  },

  |>METHOD:absolutize<|: function(element) {
    element = $(element);
    if (element.style.position == 'absolute') return;
    |>CLASS:Position<|.prepare();

    var offsets = |>CLASS:Position<|.positionedOffset(element);
    var top     = offsets[1];
    var left    = offsets[0];
    var width   = element.clientWidth;
    var height  = element.clientHeight;

    element._originalLeft   = left - parseFloat(element.style.left  || 0);
    element._originalTop    = top  - parseFloat(element.style.top || 0);
    element._originalWidth  = element.style.width;
    element._originalHeight = element.style.height;

    element.style.position = 'absolute';
    element.style.top    = top + 'px';
    element.style.left   = left + 'px';
    element.style.width  = width + 'px';
    element.style.height = height + 'px';
  },

  |>METHOD:relativize<|: function(element) {
    element = $(element);
    if (element.style.position == 'relative') return;
    |>CLASS:Position<|.prepare();

    element.style.position = 'relative';
    var top  = parseFloat(element.style.top  || 0) - (element._originalTop || 0);
    var left = parseFloat(element.style.left || 0) - (element._originalLeft || 0);

    element.style.top    = top + 'px';
    element.style.left   = left + 'px';
    element.style.height = element._originalHeight;
    element.style.width  = element._originalWidth;
  }
}

// Safari returns margins on body which is incorrect if the child is absolutely
// positioned.  For performance reasons, redefine Position.cumulativeOffset for
// KHTML/WebKit only.
if (|>REGEXP:/Konqueror|Safari|KHTML/<|.test(|>GLOBAL:navigator<|.userAgent)) {
  |>CLASS:Position<|.cumulativeOffset = function(element) {
    var valueT = 0, valueL = 0;
    do {
      valueT += element.offsetTop  || 0;
      valueL += element.offsetLeft || 0;
      if (element.offsetParent == |>GLOBAL:document<|.body)
        if (|>CLASS:Element<|.getStyle(element, 'position') == 'absolute') break;

      element = element.offsetParent;
    } while (element);

    return [valueL, valueT];
  }
}

|>CLASS:Element<|.addMethods();
