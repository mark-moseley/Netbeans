// See http://developer.yahoo.com/yui/license.html
/*
Software License Agreement (BSD License)
Copyright (c) 2008, Yahoo! Inc.
All rights reserved.

Redistribution and use of this software in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of
      conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list 
      of conditions and the following disclaimer in the documentation and/or other materials
      provided with the distribution.
    * Neither the name of Yahoo! Inc. nor the names of its contributors may be used to
      endorse or promote products derived from this software without specific prior written
      permission of Yahoo! Inc.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/* Doc definitions for YUI support in NetBeans, 
 * automatically generated from the YUI sources
 * usingthe generators in misc/javascript.generatestubs/yui-sdoc
 * Version: 1.0
 */

/**
 *
 * Base animation class that provides the interface for building animated effects.
 * <p>Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);</p>
 * @id YAHOO.util.Anim
 * @class Anim
 * @namespace YAHOO.util
 * @requires YAHOO.util.AnimMgr
 * @requires YAHOO.util.Easing
 * @requires YAHOO.util.Dom
 * @requires YAHOO.util.Event
 * @requires YAHOO.util.CustomEvent
 * @constructor
 * @param {String | HTMLElement} el Reference to the element that will be animated
 * @param {Object} attributes The attribute(s) to be animated.
 * Each attribute is an object with at minimum a "to" or "by" member defined.
 * Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
 * All attribute names use camelCase.
 * @param {Number} duration (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based
 * @param {Function} method (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)
 */

/**
 * Provides a readable name for the Anim instance.
 * @id YAHOO.util.Anim.toString
 * @method toString
 * @return {String}
 */

/**
 * Returns the value computed by the animation's "method".
 * @id YAHOO.util.Anim.doMethod
 * @method doMethod
 * @param {String} attr The name of the attribute.
 * @param {Number} start The value this attribute should start from for this animation.
 * @param {Number} end  The value this attribute should end at for this animation.
 * @return {Number} The Value to be applied to the attribute.
 */

/**
 * Applies a value to an attribute.
 * @id YAHOO.util.Anim.setAttribute
 * @method setAttribute
 * @param {String} attr The name of the attribute.
 * @param {Number} val The value to be applied to the attribute.
 * @param {String} unit The unit ('px', '%', etc.) of the value.
 */

/**
 * Returns current value of the attribute.
 * @id YAHOO.util.Anim.getAttribute
 * @method getAttribute
 * @param {String} attr The name of the attribute.
 * @return {Number} val The current value of the attribute.
 */

/**
 * Returns the unit to use when none is supplied.
 * @id YAHOO.util.Anim.getDefaultUnit
 * @method getDefaultUnit
 * @param {attr} attr The name of the attribute.
 * @return {String} The default unit to be used.
 */

/**
 * Sets the actual values to be used during the animation.  Should only be needed for subclass use.
 * @id YAHOO.util.Anim.setRuntimeAttribute
 * @method setRuntimeAttribute
 * @param {Object} attr The attribute object
 * @private
 */

/**
 * Constructor for Anim instance.
 * @id YAHOO.util.Anim.init
 * @method init
 * @param {String | HTMLElement} el Reference to the element that will be animated
 * @param {Object} attributes The attribute(s) to be animated.
 * Each attribute is an object with at minimum a "to" or "by" member defined.
 * Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
 * All attribute names use camelCase.
 * @param {Number} duration (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based
 * @param {Function} method (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)
 */

/**
 * Whether or not the animation is running.
 * @id YAHOO.util.Anim.isAnimated
 * @property isAnimated
 * @private
 * @type Boolean
 */

/**
 * A Date object that is created when the animation begins.
 * @id YAHOO.util.Anim.startTime
 * @property startTime
 * @private
 * @type Date
 */

/**
 * The number of frames this animation was able to execute.
 * @id YAHOO.util.Anim.actualFrames
 * @property actualFrames
 * @private
 * @type Int
 */

/**
 * The element to be animated.
 * @id YAHOO.util.Anim.el
 * @property el
 * @private
 * @type HTMLElement
 */

/**
 * The collection of attributes to be animated.
 * Each attribute must have at least a "to" or "by" defined in order to animate.
 * If "to" is supplied, the animation will end with the attribute at that value.
 * If "by" is supplied, the animation will end at that value plus its starting value.
 * If both are supplied, "to" is used, and "by" is ignored.
 * Optional additional member include "from" (the value the attribute should start animating from, defaults to current value), and "unit" (the units to apply to the values).
 * @id YAHOO.util.Anim.attributes
 * @property attributes
 * @type Object
 */

/**
 * The length of the animation.  Defaults to "1" (second).
 * @id YAHOO.util.Anim.duration
 * @property duration
 * @type Number
 */

/**
 * The method that will provide values to the attribute(s) during the animation.
 * Defaults to "YAHOO.util.Easing.easeNone".
 * @id YAHOO.util.Anim.method
 * @property method
 * @type Function
 */

/**
 * Whether or not the duration should be treated as seconds.
 * Defaults to true.
 * @id YAHOO.util.Anim.useSeconds
 * @property useSeconds
 * @type Boolean
 */

/**
 * The location of the current animation on the timeline.
 * In time-based animations, this is used by AnimMgr to ensure the animation finishes on time.
 * @id YAHOO.util.Anim.currentFrame
 * @property currentFrame
 * @type Int
 */

/**
 * The total number of frames to be executed.
 * In time-based animations, this is used by AnimMgr to ensure the animation finishes on time.
 * @id YAHOO.util.Anim.totalFrames
 * @property totalFrames
 * @type Int
 */

/**
 * Changes the animated element
 * @id YAHOO.util.Anim.setEl
 * @method setEl
 */

/**
 * Returns a reference to the animated element.
 * @id YAHOO.util.Anim.getEl
 * @method getEl
 * @return {HTMLElement}
 */

/**
 * Checks whether the element is currently animated.
 * @id YAHOO.util.Anim.isAnimated
 * @method isAnimated
 * @return {Boolean} current value of isAnimated.
 */

/**
 * Returns the animation start time.
 * @id YAHOO.util.Anim.getStartTime
 * @method getStartTime
 * @return {Date} current value of startTime.
 */

/**
 * Starts the animation by registering it with the animation manager.
 * @id YAHOO.util.Anim.animate
 * @method animate
 */

/**
 * Stops the animation.  Normally called by AnimMgr when animation completes.
 * @id YAHOO.util.Anim.stop
 * @method stop
 * @param {Boolean} finish (optional) If true, animation will jump to final frame.
 */

/**
 * Custom event that fires when animation begins
 * Listen via subscribe method (e.g. myAnim.onStart.subscribe(someFunction)
 * @id YAHOO.util.Anim.onStart
 * @event onStart
 */

/**
 * Custom event that fires between each frame
 * Listen via subscribe method (e.g. myAnim.onTween.subscribe(someFunction)
 * @id YAHOO.util.Anim.onTween
 * @event onTween
 */

/**
 * Custom event that fires when animation ends
 * Listen via subscribe method (e.g. myAnim.onComplete.subscribe(someFunction)
 * @id YAHOO.util.Anim.onComplete
 * @event onComplete
 */

/**
 * Handles animation queueing and threading.
 * Used by Anim and subclasses.
 * @id YAHOO.util.AnimMgr
 * @class AnimMgr
 * @namespace YAHOO.util
 */

/**
 * Reference to the animation Interval.
 * @id YAHOO.util.AnimMgr.thread
 * @property thread
 * @private
 * @type Int
 */

/**
 * The current queue of registered animation objects.
 * @id YAHOO.util.AnimMgr.queue
 * @property queue
 * @private
 * @type Array
 */

/**
 * The number of active animations.
 * @id YAHOO.util.AnimMgr.tweenCount
 * @property tweenCount
 * @private
 * @type Int
 */

/**
 * Base frame rate (frames per second).
 * Arbitrarily high for better x-browser calibration (slower browsers drop more frames).
 * @id YAHOO.util.AnimMgr.fps
 * @property fps
 * @type Int
 *
 */

/**
 * Interval delay in milliseconds, defaults to fastest possible.
 * @id YAHOO.util.AnimMgr.delay
 * @property delay
 * @type Int
 *
 */

/**
 * Adds an animation instance to the animation queue.
 * All animation instances must be registered in order to animate.
 * @id YAHOO.util.AnimMgr.registerElement
 * @method registerElement
 * @param {object} tween The Anim instance to be be registered
 */

/**
 * removes an animation instance from the animation queue.
 * All animation instances must be registered in order to animate.
 * @id YAHOO.util.AnimMgr.unRegister
 * @method unRegister
 * @param {object} tween The Anim instance to be be registered
 * @param {Int} index The index of the Anim instance
 * @private
 */

/**
 * Starts the animation thread.
 * Only one thread can run at a time.
 * @id YAHOO.util.AnimMgr.start
 * @method start
 */

/**
 * Stops the animation thread or a specific animation instance.
 * @id YAHOO.util.AnimMgr.stop
 * @method stop
 * @param {object} tween A specific Anim instance to stop (optional)
 * If no instance given, Manager stops thread and all animations.
 */

/**
 * Called per Interval to handle each animation frame.
 * @id YAHOO.util.AnimMgr.run
 * @method run
 */

/**
 * On the fly frame correction to keep animation on time.
 * @id YAHOO.util.AnimMgr.correctFrame
 * @method correctFrame
 * @private
 * @param {Object} tween The Anim instance being corrected.
 */

/**
 * Used to calculate Bezier splines for any number of control points.
 * @id YAHOO.util.Bezier
 * @class Bezier
 * @namespace YAHOO.util
 *
 */

/**
 * Get the current position of the animated element based on t.
 * Each point is an array of "x" and "y" values (0 = x, 1 = y)
 * At least 2 points are required (start and end).
 * First point is start. Last point is end.
 * Additional control points are optional.
 * @id YAHOO.util.Bezier.getPosition
 * @method getPosition
 * @param {Array} points An array containing Bezier points
 * @param {Number} t A number between 0 and 1 which is the basis for determining current position
 * @return {Array} An array containing int x and y member data
 */

/**
 * Anim subclass for color transitions.
 * <p>Usage: <code>var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.Easing.easeOut);</code> Color values can be specified with either 112233, #112233,
 * [255,255,255], or rgb(255,255,255)</p>
 * @id YAHOO.util.ColorAnim
 * @class ColorAnim
 * @namespace YAHOO.util
 * @requires YAHOO.util.Anim
 * @requires YAHOO.util.AnimMgr
 * @requires YAHOO.util.Easing
 * @requires YAHOO.util.Bezier
 * @requires YAHOO.util.Dom
 * @requires YAHOO.util.Event
 * @constructor
 * @extends YAHOO.util.Anim
 * @param {HTMLElement | String} el Reference to the element that will be animated
 * @param {Object} attributes The attribute(s) to be animated.
 * Each attribute is an object with at minimum a "to" or "by" member defined.
 * Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
 * All attribute names use camelCase.
 * @param {Number} duration (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based
 * @param {Function} method (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)
 */

/**
 * Attempts to parse the given string and return a 3-tuple.
 * @id YAHOO.util.ColorAnim.parseColor
 * @method parseColor
 * @param {String} s The string to parse.
 * @return {Array} The 3-tuple of rgb values.
 */

/**
 * Singleton that determines how an animation proceeds from start to end.
 * @id YAHOO.util.Easing
 * @class Easing
 * @namespace YAHOO.util
 */

/**
 * Uniform speed between points.
 * @id YAHOO.util.Easing.easeNone
 * @method easeNone
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Begins slowly and accelerates towards end. (quadratic)
 * @id YAHOO.util.Easing.easeIn
 * @method easeIn
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Begins quickly and decelerates towards end.  (quadratic)
 * @id YAHOO.util.Easing.easeOut
 * @method easeOut
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Begins slowly and decelerates towards end. (quadratic)
 * @id YAHOO.util.Easing.easeBoth
 * @method easeBoth
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Begins slowly and accelerates towards end. (quartic)
 * @id YAHOO.util.Easing.easeInStrong
 * @method easeInStrong
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Begins quickly and decelerates towards end.  (quartic)
 * @id YAHOO.util.Easing.easeOutStrong
 * @method easeOutStrong
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Begins slowly and decelerates towards end. (quartic)
 * @id YAHOO.util.Easing.easeBothStrong
 * @method easeBothStrong
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Snap in elastic effect.
 * @id YAHOO.util.Easing.elasticIn
 * @method elasticIn
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @param {Number} a Amplitude (optional)
 * @param {Number} p Period (optional)
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Snap out elastic effect.
 * @id YAHOO.util.Easing.elasticOut
 * @method elasticOut
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @param {Number} a Amplitude (optional)
 * @param {Number} p Period (optional)
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Snap both elastic effect.
 * @id YAHOO.util.Easing.elasticBoth
 * @method elasticBoth
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @param {Number} a Amplitude (optional)
 * @param {Number} p Period (optional)
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Backtracks slightly, then reverses direction and moves to end.
 * @id YAHOO.util.Easing.backIn
 * @method backIn
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @param {Number} s Overshoot (optional)
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Overshoots end, then reverses and comes back to end.
 * @id YAHOO.util.Easing.backOut
 * @method backOut
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @param {Number} s Overshoot (optional)
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Backtracks slightly, then reverses direction, overshoots end,
 * then reverses and comes back to end.
 * @id YAHOO.util.Easing.backBoth
 * @method backBoth
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @param {Number} s Overshoot (optional)
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Bounce off of start.
 * @id YAHOO.util.Easing.bounceIn
 * @method bounceIn
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Bounces off end.
 * @id YAHOO.util.Easing.bounceOut
 * @method bounceOut
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Bounces off start and end.
 * @id YAHOO.util.Easing.bounceBoth
 * @method bounceBoth
 * @param {Number} t Time value used to compute current value
 * @param {Number} b Starting value
 * @param {Number} c Delta between start and end values
 * @param {Number} d Total length of animation
 * @return {Number} The computed value for the current animation frame
 */

/**
 * Anim subclass for moving elements along a path defined by the "points"
 * member of "attributes".  All "points" are arrays with x, y coordinates.
 * <p>Usage: <code>var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>
 * @id YAHOO.util.Motion
 * @class Motion
 * @namespace YAHOO.util
 * @requires YAHOO.util.Anim
 * @requires YAHOO.util.AnimMgr
 * @requires YAHOO.util.Easing
 * @requires YAHOO.util.Bezier
 * @requires YAHOO.util.Dom
 * @requires YAHOO.util.Event
 * @requires YAHOO.util.CustomEvent
 * @constructor
 * @extends YAHOO.util.ColorAnim
 * @param {String | HTMLElement} el Reference to the element that will be animated
 * @param {Object} attributes The attribute(s) to be animated.
 * Each attribute is an object with at minimum a "to" or "by" member defined.
 * Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
 * All attribute names use camelCase.
 * @param {Number} duration (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based
 * @param {Function} method (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)
 */

/**
 * Anim subclass for scrolling elements to a position defined by the "scroll"
 * member of "attributes".  All "scroll" members are arrays with x, y scroll positions.
 * <p>Usage: <code>var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);</code></p>
 * @id YAHOO.util.Scroll
 * @class Scroll
 * @namespace YAHOO.util
 * @requires YAHOO.util.Anim
 * @requires YAHOO.util.AnimMgr
 * @requires YAHOO.util.Easing
 * @requires YAHOO.util.Bezier
 * @requires YAHOO.util.Dom
 * @requires YAHOO.util.Event
 * @requires YAHOO.util.CustomEvent
 * @extends YAHOO.util.ColorAnim
 * @constructor
 * @param {String|HTMLElement} el Reference to the element that will be animated
 * @param {Object} attributes The attribute(s) to be animated.
 * Each attribute is an object with at minimum a "to" or "by" member defined.
 * Additional optional members are "from" (defaults to current value), "units" (defaults to "px").
 * All attribute names use camelCase.
 * @param {Number} duration (optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based
 * @param {Function} method (optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)
 */

/**
 * The AutoComplete class provides the customizable functionality of a plug-and-play DHTML
 * auto completion widget.  Some key features:
 * <ul>
 * <li>Navigate with up/down arrow keys and/or mouse to pick a selection</li>
 * <li>The drop down container can "roll down" or "fly out" via configurable
 * animation</li>
 * <li>UI look-and-feel customizable through CSS, including container
 * attributes, borders, position, fonts, etc</li>
 * </ul>
 *
 * @id YAHOO.widget.AutoComplete
 * @class AutoComplete
 * @constructor
 * @param elInput {HTMLElement} DOM element reference of an input field.
 * @param elInput {String} String ID of an input field.
 * @param elContainer {HTMLElement} DOM element reference of an existing DIV.
 * @param elContainer {String} String ID of an existing DIV.
 * @param oDataSource {YAHOO.widget.DataSource} DataSource instance.
 * @param oConfigs {Object} (optional) Object literal of configuration params.
 */

/**
 * The DataSource object that encapsulates the data used for auto completion.
 * This object should be an inherited object from YAHOO.widget.DataSource.
 *
 * @id YAHOO.widget.AutoComplete.dataSource
 * @property dataSource
 * @type YAHOO.widget.DataSource
 */

/**
 * Number of characters that must be entered before querying for results. A negative value
 * effectively turns off the widget. A value of 0 allows queries of null or empty string
 * values.
 *
 * @id YAHOO.widget.AutoComplete.minQueryLength
 * @property minQueryLength
 * @type Number
 * @default 1
 */

/**
 * Maximum number of results to display in results container.
 *
 * @id YAHOO.widget.AutoComplete.maxResultsDisplayed
 * @property maxResultsDisplayed
 * @type Number
 * @default 10
 */

/**
 * Number of seconds to delay before submitting a query request.  If a query
 * request is received before a previous one has completed its delay, the
 * previous request is cancelled and the new request is set to the delay.
 * Implementers should take care when setting this value very low (i.e., less
 * than 0.2) with low latency DataSources and the typeAhead feature enabled, as
 * fast typers may see unexpected behavior.
 *
 * @id YAHOO.widget.AutoComplete.queryDelay
 * @property queryDelay
 * @type Number
 * @default 0.2
 */

/**
 * Class name of a highlighted item within results container.
 *
 * @id YAHOO.widget.AutoComplete.highlightClassName
 * @property highlightClassName
 * @type String
 * @default "yui-ac-highlight"
 */

/**
 * Class name of a pre-highlighted item within results container.
 *
 * @id YAHOO.widget.AutoComplete.prehighlightClassName
 * @property prehighlightClassName
 * @type String
 */

/**
 * Query delimiter. A single character separator for multiple delimited
 * selections. Multiple delimiter characteres may be defined as an array of
 * strings. A null value or empty string indicates that query results cannot
 * be delimited. This feature is not recommended if you need forceSelection to
 * be true.
 *
 * @id YAHOO.widget.AutoComplete.delimChar
 * @property delimChar
 * @type String | String[]
 */

/**
 * Whether or not the first item in results container should be automatically highlighted
 * on expand.
 *
 * @id YAHOO.widget.AutoComplete.autoHighlight
 * @property autoHighlight
 * @type Boolean
 * @default true
 */

/**
 * Whether or not the input field should be automatically updated
 * with the first query result as the user types, auto-selecting the substring
 * that the user has not typed.
 *
 * @id YAHOO.widget.AutoComplete.typeAhead
 * @property typeAhead
 * @type Boolean
 * @default false
 */

/**
 * Whether or not to animate the expansion/collapse of the results container in the
 * horizontal direction.
 *
 * @id YAHOO.widget.AutoComplete.animHoriz
 * @property animHoriz
 * @type Boolean
 * @default false
 */

/**
 * Whether or not to animate the expansion/collapse of the results container in the
 * vertical direction.
 *
 * @id YAHOO.widget.AutoComplete.animVert
 * @property animVert
 * @type Boolean
 * @default true
 */

/**
 * Speed of container expand/collapse animation, in seconds..
 *
 * @id YAHOO.widget.AutoComplete.animSpeed
 * @property animSpeed
 * @type Number
 * @default 0.3
 */

/**
 * Whether or not to force the user's selection to match one of the query
 * results. Enabling this feature essentially transforms the input field into a
 * &lt;select&gt; field. This feature is not recommended with delimiter character(s)
 * defined.
 *
 * @id YAHOO.widget.AutoComplete.forceSelection
 * @property forceSelection
 * @type Boolean
 * @default false
 */

/**
 * Whether or not to allow browsers to cache user-typed input in the input
 * field. Disabling this feature will prevent the widget from setting the
 * autocomplete="off" on the input field. When autocomplete="off"
 * and users click the back button after form submission, user-typed input can
 * be prefilled by the browser from its cache. This caching of user input may
 * not be desired for sensitive data, such as credit card numbers, in which
 * case, implementers should consider setting allowBrowserAutocomplete to false.
 *
 * @id YAHOO.widget.AutoComplete.allowBrowserAutocomplete
 * @property allowBrowserAutocomplete
 * @type Boolean
 * @default true
 */

/**
 * Whether or not the results container should always be displayed.
 * Enabling this feature displays the container when the widget is instantiated
 * and prevents the toggling of the container to a collapsed state.
 *
 * @id YAHOO.widget.AutoComplete.alwaysShowContainer
 * @property alwaysShowContainer
 * @type Boolean
 * @default false
 */

/**
 * Whether or not to use an iFrame to layer over Windows form elements in
 * IE. Set to true only when the results container will be on top of a
 * &lt;select&gt; field in IE and thus exposed to the IE z-index bug (i.e.,
 * 5.5 < IE < 7).
 *
 * @id YAHOO.widget.AutoComplete.useIFrame
 * @property useIFrame
 * @type Boolean
 * @default false
 */

/**
 * Whether or not the results container should have a shadow.
 *
 * @id YAHOO.widget.AutoComplete.useShadow
 * @property useShadow
 * @type Boolean
 * @default false
 */

/**
 * Public accessor to the unique name of the AutoComplete instance.
 *
 * @id YAHOO.widget.AutoComplete.toString
 * @method toString
 * @return {String} Unique name of the AutoComplete instance.
 */

/**
 * Returns true if container is in an expanded state, false otherwise.
 *
 * @id YAHOO.widget.AutoComplete.isContainerOpen
 * @method isContainerOpen
 * @return {Boolean} Returns true if container is in an expanded state, false otherwise.
 */

/**
 * Public accessor to the internal array of DOM &lt;li&gt; elements that
 * display query results within the results container.
 *
 * @id YAHOO.widget.AutoComplete.getListItems
 * @method getListItems
 * @return {HTMLElement[]} Array of &lt;li&gt; elements within the results container.
 */

/**
 * Public accessor to the data held in an &lt;li&gt; element of the
 * results container.
 *
 * @id YAHOO.widget.AutoComplete.getListItemData
 * @method getListItemData
 * @return {Object | Object[]} Object or array of result data or null
 */

/**
 * Sets HTML markup for the results container header. This markup will be
 * inserted within a &lt;div&gt; tag with a class of "yui-ac-hd".
 *
 * @id YAHOO.widget.AutoComplete.setHeader
 * @method setHeader
 * @param sHeader {String} HTML markup for results container header.
 */

/**
 * Sets HTML markup for the results container footer. This markup will be
 * inserted within a &lt;div&gt; tag with a class of "yui-ac-ft".
 *
 * @id YAHOO.widget.AutoComplete.setFooter
 * @method setFooter
 * @param sFooter {String} HTML markup for results container footer.
 */

/**
 * Sets HTML markup for the results container body. This markup will be
 * inserted within a &lt;div&gt; tag with a class of "yui-ac-bd".
 *
 * @id YAHOO.widget.AutoComplete.setBody
 * @method setBody
 * @param sBody {String} HTML markup for results container body.
 */

/**
 * Overridable method that converts a result item object into HTML markup
 * for display. Return data values are accessible via the oResultItem object,
 * and the key return value will always be oResultItem[0]. Markup will be
 * displayed within &lt;li&gt; element tags in the container.
 *
 * @id YAHOO.widget.AutoComplete.formatResult
 * @method formatResult
 * @param oResultItem {Object} Result item representing one query result. Data is held in an array.
 * @param sQuery {String} The current query string.
 * @return {String} HTML markup of formatted result data.
 */

/**
 * Overridable method called before container expands allows implementers to access data
 * and DOM elements.
 *
 * @id YAHOO.widget.AutoComplete.doBeforeExpandContainer
 * @method doBeforeExpandContainer
 * @param elTextbox {HTMLElement} The text input box.
 * @param elContainer {HTMLElement} The container element.
 * @param sQuery {String} The query string.
 * @param aResults {Object[]}  An array of query results.
 * @return {Boolean} Return true to continue expanding container, false to cancel the expand.
 */

/**
 * Makes query request to the DataSource.
 *
 * @id YAHOO.widget.AutoComplete.sendQuery
 * @method sendQuery
 * @param sQuery {String} Query string.
 */

/**
 * Overridable method gives implementers access to the query before it gets sent.
 *
 * @id YAHOO.widget.AutoComplete.doBeforeSendQuery
 * @method doBeforeSendQuery
 * @param sQuery {String} Query string.
 * @return {String} Query string.
 */

/**
 * Nulls out the entire AutoComplete instance and related objects, removes attached
 * event listeners, and clears out DOM elements inside the container. After
 * calling this method, the instance reference should be expliclitly nulled by
 * implementer, as in myDataTable = null. Use with caution!
 *
 * @id YAHOO.widget.AutoComplete.destroy
 * @method destroy
 */

/**
 * Fired when the input field receives focus.
 *
 * @id YAHOO.widget.AutoComplete.textboxFocusEvent
 * @event textboxFocusEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 */

/**
 * Fired when the input field receives key input.
 *
 * @id YAHOO.widget.AutoComplete.textboxKeyEvent
 * @event textboxKeyEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param nKeycode {Number} The keycode number.
 */

/**
 * Fired when the AutoComplete instance makes a query to the DataSource.
 *
 * @id YAHOO.widget.AutoComplete.dataRequestEvent
 * @event dataRequestEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param sQuery {String} The query string.
 */

/**
 * Fired when the AutoComplete instance receives query results from the data
 * source.
 *
 * @id YAHOO.widget.AutoComplete.dataReturnEvent
 * @event dataReturnEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param sQuery {String} The query string.
 * @param aResults {Object[]} Results array.
 */

/**
 * Fired when the AutoComplete instance does not receive query results from the
 * DataSource due to an error.
 *
 * @id YAHOO.widget.AutoComplete.dataErrorEvent
 * @event dataErrorEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param sQuery {String} The query string.
 */

/**
 * Fired when the results container is expanded.
 *
 * @id YAHOO.widget.AutoComplete.containerExpandEvent
 * @event containerExpandEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 */

/**
 * Fired when the input field has been prefilled by the type-ahead
 * feature.
 *
 * @id YAHOO.widget.AutoComplete.typeAheadEvent
 * @event typeAheadEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param sQuery {String} The query string.
 * @param sPrefill {String} The prefill string.
 */

/**
 * Fired when result item has been moused over.
 *
 * @id YAHOO.widget.AutoComplete.itemMouseOverEvent
 * @event itemMouseOverEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param elItem {HTMLElement} The &lt;li&gt element item moused to.
 */

/**
 * Fired when result item has been moused out.
 *
 * @id YAHOO.widget.AutoComplete.itemMouseOutEvent
 * @event itemMouseOutEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param elItem {HTMLElement} The &lt;li&gt; element item moused from.
 */

/**
 * Fired when result item has been arrowed to.
 *
 * @id YAHOO.widget.AutoComplete.itemArrowToEvent
 * @event itemArrowToEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param elItem {HTMLElement} The &lt;li&gt; element item arrowed to.
 */

/**
 * Fired when result item has been arrowed away from.
 *
 * @id YAHOO.widget.AutoComplete.itemArrowFromEvent
 * @event itemArrowFromEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param elItem {HTMLElement} The &lt;li&gt; element item arrowed from.
 */

/**
 * Fired when an item is selected via mouse click, ENTER key, or TAB key.
 *
 * @id YAHOO.widget.AutoComplete.itemSelectEvent
 * @event itemSelectEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @param elItem {HTMLElement} The selected &lt;li&gt; element item.
 * @param oData {Object} The data returned for the item, either as an object,
 * or mapped from the schema into an array.
 */

/**
 * Fired when a user selection does not match any of the displayed result items.
 *
 * @id YAHOO.widget.AutoComplete.unmatchedItemSelectEvent
 * @event unmatchedItemSelectEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 */

/**
 * Fired if forceSelection is enabled and the user's input has been cleared
 * because it did not match one of the returned query results.
 *
 * @id YAHOO.widget.AutoComplete.selectionEnforceEvent
 * @event selectionEnforceEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 */

/**
 * Fired when the results container is collapsed.
 *
 * @id YAHOO.widget.AutoComplete.containerCollapseEvent
 * @event containerCollapseEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 */

/**
 * Fired when the input field loses focus.
 *
 * @id YAHOO.widget.AutoComplete.textboxBlurEvent
 * @event textboxBlurEvent
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 */

/**
 * Internal class variable to index multiple AutoComplete instances.
 *
 * @id YAHOO.widget.AutoComplete._nIndex
 * @property _nIndex
 * @type Number
 * @default 0
 * @private
 */

/**
 * Name of AutoComplete instance.
 *
 * @id YAHOO.widget.AutoComplete._sName
 * @property _sName
 * @type String
 * @private
 */

/**
 * Text input field DOM element.
 *
 * @id YAHOO.widget.AutoComplete._elTextbox
 * @property _elTextbox
 * @type HTMLElement
 * @private
 */

/**
 * Container DOM element.
 *
 * @id YAHOO.widget.AutoComplete._elContainer
 * @property _elContainer
 * @type HTMLElement
 * @private
 */

/**
 * Reference to content element within container element.
 *
 * @id YAHOO.widget.AutoComplete._elContent
 * @property _elContent
 * @type HTMLElement
 * @private
 */

/**
 * Reference to header element within content element.
 *
 * @id YAHOO.widget.AutoComplete._elHeader
 * @property _elHeader
 * @type HTMLElement
 * @private
 */

/**
 * Reference to body element within content element.
 *
 * @id YAHOO.widget.AutoComplete._elBody
 * @property _elBody
 * @type HTMLElement
 * @private
 */

/**
 * Reference to footer element within content element.
 *
 * @id YAHOO.widget.AutoComplete._elFooter
 * @property _elFooter
 * @type HTMLElement
 * @private
 */

/**
 * Reference to shadow element within container element.
 *
 * @id YAHOO.widget.AutoComplete._elShadow
 * @property _elShadow
 * @type HTMLElement
 * @private
 */

/**
 * Reference to iframe element within container element.
 *
 * @id YAHOO.widget.AutoComplete._elIFrame
 * @property _elIFrame
 * @type HTMLElement
 * @private
 */

/**
 * Whether or not the input field is currently in focus. If query results come back
 * but the user has already moved on, do not proceed with auto complete behavior.
 *
 * @id YAHOO.widget.AutoComplete._bFocused
 * @property _bFocused
 * @type Boolean
 * @private
 */

/**
 * Animation instance for container expand/collapse.
 *
 * @id YAHOO.widget.AutoComplete._oAnim
 * @property _oAnim
 * @type Boolean
 * @private
 */

/**
 * Whether or not the results container is currently open.
 *
 * @id YAHOO.widget.AutoComplete._bContainerOpen
 * @property _bContainerOpen
 * @type Boolean
 * @private
 */

/**
 * Whether or not the mouse is currently over the results
 * container. This is necessary in order to prevent clicks on container items
 * from being text input field blur events.
 *
 * @id YAHOO.widget.AutoComplete._bOverContainer
 * @property _bOverContainer
 * @type Boolean
 * @private
 */

/**
 * Array of &lt;li&gt; elements references that contain query results within the
 * results container.
 *
 * @id YAHOO.widget.AutoComplete._aListItems
 * @property _aListItems
 * @type HTMLElement[]
 * @private
 */

/**
 * Number of &lt;li&gt; elements currently displayed in results container.
 *
 * @id YAHOO.widget.AutoComplete._nDisplayedItems
 * @property _nDisplayedItems
 * @type Number
 * @private
 */

/**
 * Internal count of &lt;li&gt; elements displayed and hidden in results container.
 *
 * @id YAHOO.widget.AutoComplete._maxResultsDisplayed
 * @property _maxResultsDisplayed
 * @type Number
 * @private
 */

/**
 * Current query string
 *
 * @id YAHOO.widget.AutoComplete._sCurQuery
 * @property _sCurQuery
 * @type String
 * @private
 */

/**
 * Past queries this session (for saving delimited queries).
 *
 * @id YAHOO.widget.AutoComplete._sSavedQuery
 * @property _sSavedQuery
 * @type String
 * @private
 */

/**
 * Pointer to the currently highlighted &lt;li&gt; element in the container.
 *
 * @id YAHOO.widget.AutoComplete._oCurItem
 * @property _oCurItem
 * @type HTMLElement
 * @private
 */

/**
 * Whether or not an item has been selected since the container was populated
 * with results. Reset to false by _populateList, and set to true when item is
 * selected.
 *
 * @id YAHOO.widget.AutoComplete._bItemSelected
 * @property _bItemSelected
 * @type Boolean
 * @private
 */

/**
 * Key code of the last key pressed in textbox.
 *
 * @id YAHOO.widget.AutoComplete._nKeyCode
 * @property _nKeyCode
 * @type Number
 * @private
 */

/**
 * Delay timeout ID.
 *
 * @id YAHOO.widget.AutoComplete._nDelayID
 * @property _nDelayID
 * @type Number
 * @private
 */

/**
 * Src to iFrame used when useIFrame = true. Supports implementations over SSL
 * as well.
 *
 * @id YAHOO.widget.AutoComplete._iFrameSrc
 * @property _iFrameSrc
 * @type String
 * @private
 */

/**
 * For users typing via certain IMEs, queries must be triggered by intervals,
 * since key events yet supported across all browsers for all IMEs.
 *
 * @id YAHOO.widget.AutoComplete._queryInterval
 * @property _queryInterval
 * @type Object
 * @private
 */

/**
 * Internal tracker to last known textbox value, used to determine whether or not
 * to trigger a query via interval for certain IME users.
 *
 * @id YAHOO.widget.AutoComplete._sLastTextboxValue
 * @event _sLastTextboxValue
 * @type String
 * @private
 */

/**
 * Updates and validates latest public config properties.
 *
 * @id YAHOO.widget.AutoComplete.__initProps
 * @method __initProps
 * @private
 */

/**
 * Initializes the results container helpers if they are enabled and do
 * not exist
 *
 * @id YAHOO.widget.AutoComplete._initContainerHelpers
 * @method _initContainerHelpers
 * @private
 */

/**
 * Initializes the results container once at object creation
 *
 * @id YAHOO.widget.AutoComplete._initContainer
 * @method _initContainer
 * @private
 */

/**
 * Clears out contents of container body and creates up to
 * YAHOO.widget.AutoComplete#maxResultsDisplayed &lt;li&gt; elements in an
 * &lt;ul&gt; element.
 *
 * @id YAHOO.widget.AutoComplete._initList
 * @method _initList
 * @private
 */

/**
 * Initializes each &lt;li&gt; element in the container list.
 *
 * @id YAHOO.widget.AutoComplete._initListItem
 * @method _initListItem
 * @param oItem {HTMLElement} The &lt;li&gt; DOM element.
 * @param nItemIndex {Number} The index of the element.
 * @private
 */

/**
 * Enables interval detection for  Korean IME support.
 *
 * @id YAHOO.widget.AutoComplete._onIMEDetected
 * @method _onIMEDetected
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Enables query triggers based on text input detection by intervals (rather
 * than by key events).
 *
 * @id YAHOO.widget.AutoComplete._enableIntervalDetection
 * @method _enableIntervalDetection
 * @private
 */

/**
 * Cancels text input detection by intervals.
 *
 * @id YAHOO.widget.AutoComplete._cancelIntervalDetection
 * @method _cancelIntervalDetection
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Whether or not key is functional or should be ignored. Note that the right
 * arrow key is NOT an ignored key since it triggers queries for certain intl
 * charsets.
 *
 * @id YAHOO.widget.AutoComplete._isIgnoreKey
 * @method _isIgnoreKey
 * @param nKeycode {Number} Code of key pressed.
 * @return {Boolean} True if key should be ignored, false otherwise.
 * @private
 */

/**
 * Makes query request to the DataSource.
 *
 * @id YAHOO.widget.AutoComplete._sendQuery
 * @method _sendQuery
 * @param sQuery {String} Query string.
 * @private
 */

/**
 * Populates the array of &lt;li&gt; elements in the container with query
 * results. This method is passed to YAHOO.widget.DataSource#getResults as a
 * callback function so results from the DataSource instance are returned to the
 * AutoComplete instance.
 *
 * @id YAHOO.widget.AutoComplete._populateList
 * @method _populateList
 * @param sQuery {String} The query string.
 * @param aResults {Object[]} An array of query result objects from the DataSource.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * When forceSelection is true and the user attempts
 * leave the text input box without selecting an item from the query results,
 * the user selection is cleared.
 *
 * @id YAHOO.widget.AutoComplete._clearSelection
 * @method _clearSelection
 * @private
 */

/**
 * Whether or not user-typed value in the text input box matches any of the
 * query results.
 *
 * @id YAHOO.widget.AutoComplete._textMatchesOption
 * @method _textMatchesOption
 * @return {HTMLElement} Matching list item element if user-input text matches
 * a result, null otherwise.
 * @private
 */

/**
 * Updates in the text input box with the first query result as the user types,
 * selecting the substring that the user has not typed.
 *
 * @id YAHOO.widget.AutoComplete._typeAhead
 * @method _typeAhead
 * @param oItem {HTMLElement} The &lt;li&gt; element item whose data populates the input field.
 * @param sQuery {String} Query string.
 * @private
 */

/**
 * Selects text in the input field.
 *
 * @id YAHOO.widget.AutoComplete._selectText
 * @method _selectText
 * @param elTextbox {HTMLElement} Text input box element in which to select text.
 * @param nStart {Number} Starting index of text string to select.
 * @param nEnd {Number} Ending index of text selection.
 * @private
 */

/**
 * Syncs results container with its helpers.
 *
 * @id YAHOO.widget.AutoComplete._toggleContainerHelpers
 * @method _toggleContainerHelpers
 * @param bShow {Boolean} True if container is expanded, false if collapsed
 * @private
 */

/**
 * Animates expansion or collapse of the container.
 *
 * @id YAHOO.widget.AutoComplete._toggleContainer
 * @method _toggleContainer
 * @param bShow {Boolean} True if container should be expanded, false if container should be collapsed
 * @private
 */

/**
 * Toggles the highlight on or off for an item in the container, and also cleans
 * up highlighting of any previous item.
 *
 * @id YAHOO.widget.AutoComplete._toggleHighlight
 * @method _toggleHighlight
 * @param oNewItem {HTMLElement} The &lt;li&gt; element item to receive highlight behavior.
 * @param sType {String} Type "mouseover" will toggle highlight on, and "mouseout" will toggle highlight off.
 * @private
 */

/**
 * Toggles the pre-highlight on or off for an item in the container.
 *
 * @id YAHOO.widget.AutoComplete._togglePrehighlight
 * @method _togglePrehighlight
 * @param oNewItem {HTMLElement} The &lt;li&gt; element item to receive highlight behavior.
 * @param sType {String} Type "mouseover" will toggle highlight on, and "mouseout" will toggle highlight off.
 * @private
 */

/**
 * Updates the text input box value with selected query result. If a delimiter
 * has been defined, then the value gets appended with the delimiter.
 *
 * @id YAHOO.widget.AutoComplete._updateValue
 * @method _updateValue
 * @param oItem {HTMLElement} The &lt;li&gt; element item with which to update the value.
 * @private
 */

/**
 * Selects a result item from the container
 *
 * @id YAHOO.widget.AutoComplete._selectItem
 * @method _selectItem
 * @param oItem {HTMLElement} The selected &lt;li&gt; element item.
 * @private
 */

/**
 * If an item is highlighted in the container, the right arrow key jumps to the
 * end of the textbox and selects the highlighted item, otherwise the container
 * is closed.
 *
 * @id YAHOO.widget.AutoComplete._jumpSelection
 * @method _jumpSelection
 * @private
 */

/**
 * Triggered by up and down arrow keys, changes the current highlighted
 * &lt;li&gt; element item. Scrolls container if necessary.
 *
 * @id YAHOO.widget.AutoComplete._moveSelection
 * @method _moveSelection
 * @param nKeyCode {Number} Code of key pressed.
 * @private
 */

/**
 * Handles &lt;li&gt; element mouseover events in the container.
 *
 * @id YAHOO.widget.AutoComplete._onItemMouseover
 * @method _onItemMouseover
 * @param v {HTMLEvent} The mouseover event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles &lt;li&gt; element mouseout events in the container.
 *
 * @id YAHOO.widget.AutoComplete._onItemMouseout
 * @method _onItemMouseout
 * @param v {HTMLEvent} The mouseout event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles &lt;li&gt; element click events in the container.
 *
 * @id YAHOO.widget.AutoComplete._onItemMouseclick
 * @method _onItemMouseclick
 * @param v {HTMLEvent} The click event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles container mouseover events.
 *
 * @id YAHOO.widget.AutoComplete._onContainerMouseover
 * @method _onContainerMouseover
 * @param v {HTMLEvent} The mouseover event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles container mouseout events.
 *
 * @id YAHOO.widget.AutoComplete._onContainerMouseout
 * @method _onContainerMouseout
 * @param v {HTMLEvent} The mouseout event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles container scroll events.
 *
 * @id YAHOO.widget.AutoComplete._onContainerScroll
 * @method _onContainerScroll
 * @param v {HTMLEvent} The scroll event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles container resize events.
 *
 * @id YAHOO.widget.AutoComplete._onContainerResize
 * @method _onContainerResize
 * @param v {HTMLEvent} The resize event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles textbox keydown events of functional keys, mainly for UI behavior.
 *
 * @id YAHOO.widget.AutoComplete._onTextboxKeyDown
 * @method _onTextboxKeyDown
 * @param v {HTMLEvent} The keydown event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles textbox keypress events.
 * @id YAHOO.widget.AutoComplete._onTextboxKeyPress
 * @method _onTextboxKeyPress
 * @param v {HTMLEvent} The keypress event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles textbox keyup events that trigger queries.
 *
 * @id YAHOO.widget.AutoComplete._onTextboxKeyUp
 * @method _onTextboxKeyUp
 * @param v {HTMLEvent} The keyup event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles text input box receiving focus.
 *
 * @id YAHOO.widget.AutoComplete._onTextboxFocus
 * @method _onTextboxFocus
 * @param v {HTMLEvent} The focus event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles text input box losing focus.
 *
 * @id YAHOO.widget.AutoComplete._onTextboxBlur
 * @method _onTextboxBlur
 * @param v {HTMLEvent} The focus event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * Handles window unload event.
 *
 * @id YAHOO.widget.AutoComplete._onWindowUnload
 * @method _onWindowUnload
 * @param v {HTMLEvent} The unload event.
 * @param oSelf {YAHOO.widget.AutoComplete} The AutoComplete instance.
 * @private
 */

/**
 * The DataSource classes manages sending a request and returning response from a live
 * database. Supported data include local JavaScript arrays and objects and databases
 * accessible via XHR connections. Supported response formats include JavaScript arrays,
 * JSON, XML, and flat-file textual data.
 *
 * @id YAHOO.widget.DataSource
 * @class DataSource
 * @constructor
 */

/**
 * Error message for null data responses.
 *
 * @id YAHOO.widget.DataSource.ERROR_DATANULL
 * @property ERROR_DATANULL
 * @type String
 * @static
 * @final
 */

/**
 * Error message for data responses with parsing errors.
 *
 * @id YAHOO.widget.DataSource.ERROR_DATAPARSE
 * @property ERROR_DATAPARSE
 * @type String
 * @static
 * @final
 */

/**
 * Max size of the local cache.  Set to 0 to turn off caching.  Caching is
 * useful to reduce the number of server connections.  Recommended only for data
 * sources that return comprehensive results for queries or when stale data is
 * not an issue.
 *
 * @id YAHOO.widget.DataSource.maxCacheEntries
 * @property maxCacheEntries
 * @type Number
 * @default 15
 */

/**
 * Use this to fine-tune the matching algorithm used against JS Array types of
 * DataSource and DataSource caches. If queryMatchContains is true, then the JS
 * Array or cache returns results that "contain" the query string. By default,
 * queryMatchContains is set to false, so that only results that "start with"
 * the query string are returned.
 *
 * @id YAHOO.widget.DataSource.queryMatchContains
 * @property queryMatchContains
 * @type Boolean
 * @default false
 */

/**
 * Enables query subset matching. If caching is on and queryMatchSubset is
 * true, substrings of queries will return matching cached results. For
 * instance, if the first query is for "abc" susequent queries that start with
 * "abc", like "abcd", will be queried against the cache, and not the live data
 * source. Recommended only for DataSources that return comprehensive results
 * for queries with very few characters.
 *
 * @id YAHOO.widget.DataSource.queryMatchSubset
 * @property queryMatchSubset
 * @type Boolean
 * @default false
 *
 */

/**
 * Enables case-sensitivity in the matching algorithm used against JS Array
 * types of DataSources and DataSource caches. If queryMatchCase is true, only
 * case-sensitive matches will return.
 *
 * @id YAHOO.widget.DataSource.queryMatchCase
 * @property queryMatchCase
 * @type Boolean
 * @default false
 */

/**
 * Public accessor to the unique name of the DataSource instance.
 *
 * @id YAHOO.widget.DataSource.toString
 * @method toString
 * @return {String} Unique name of the DataSource instance
 */

/**
 * Retrieves query results, first checking the local cache, then making the
 * query request to the live data source as defined by the function doQuery.
 *
 * @id YAHOO.widget.DataSource.getResults
 * @method getResults
 * @param oCallbackFn {HTMLFunction} Callback function defined by oParent object to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 */

/**
 * Abstract method implemented by subclasses to make a query to the live data
 * source. Must call the callback function with the response returned from the
 * query. Populates cache (if enabled).
 *
 * @id YAHOO.widget.DataSource.doQuery
 * @method doQuery
 * @param oCallbackFn {HTMLFunction} Callback function implemented by oParent to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 */

/**
 * Flushes cache.
 *
 * @id YAHOO.widget.DataSource.flushCache
 * @method flushCache
 */

/**
 * Fired when a query is made to the live data source.
 *
 * @id YAHOO.widget.DataSource.queryEvent
 * @event queryEvent
 * @param oSelf {Object} The DataSource instance.
 * @param oParent {Object} The requesting object.
 * @param sQuery {String} The query string.
 */

/**
 * Fired when a query is made to the local cache.
 *
 * @id YAHOO.widget.DataSource.cacheQueryEvent
 * @event cacheQueryEvent
 * @param oSelf {Object} The DataSource instance.
 * @param oParent {Object} The requesting object.
 * @param sQuery {String} The query string.
 */

/**
 * Fired when data is retrieved from the live data source.
 *
 * @id YAHOO.widget.DataSource.getResultsEvent
 * @event getResultsEvent
 * @param oSelf {Object} The DataSource instance.
 * @param oParent {Object} The requesting object.
 * @param sQuery {String} The query string.
 * @param aResults {Object[]} Array of result objects.
 */

/**
 * Fired when data is retrieved from the local cache.
 *
 * @id YAHOO.widget.DataSource.getCachedResultsEvent
 * @event getCachedResultsEvent
 * @param oSelf {Object} The DataSource instance.
 * @param oParent {Object} The requesting object.
 * @param sQuery {String} The query string.
 * @param aResults {Object[]} Array of result objects.
 */

/**
 * Fired when an error is encountered with the live data source.
 *
 * @id YAHOO.widget.DataSource.dataErrorEvent
 * @event dataErrorEvent
 * @param oSelf {Object} The DataSource instance.
 * @param oParent {Object} The requesting object.
 * @param sQuery {String} The query string.
 * @param sMsg {String} Error message string
 */

/**
 * Fired when the local cache is flushed.
 *
 * @id YAHOO.widget.DataSource.cacheFlushEvent
 * @event cacheFlushEvent
 * @param oSelf {Object} The DataSource instance
 */

/**
 * Internal class variable to index multiple DataSource instances.
 *
 * @id YAHOO.widget.DataSource._nIndex
 * @property _nIndex
 * @type Number
 * @private
 * @static
 */

/**
 * Name of DataSource instance.
 *
 * @id YAHOO.widget.DataSource._sName
 * @property _sName
 * @type String
 * @private
 */

/**
 * Local cache of data result objects indexed chronologically.
 *
 * @id YAHOO.widget.DataSource._aCache
 * @property _aCache
 * @type Object[]
 * @private
 */

/**
 * Initializes DataSource instance.
 *
 * @id YAHOO.widget.DataSource._init
 * @method _init
 * @private
 */

/**
 * Adds a result object to the local cache, evicting the oldest element if the
 * cache is full. Newer items will have higher indexes, the oldest item will have
 * index of 0.
 *
 * @id YAHOO.widget.DataSource._addCacheElem
 * @method _addCacheElem
 * @param oResult {Object} Data result object, including array of results.
 * @private
 */

/**
 * Queries the local cache for results. If query has been cached, the callback
 * function is called with the results, and the cached is refreshed so that it
 * is now the newest element.
 *
 * @id YAHOO.widget.DataSource._doQueryCache
 * @method _doQueryCache
 * @param oCallbackFn {HTMLFunction} Callback function defined by oParent object to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 * @return aResults {Object[]} Array of results from local cache if found, otherwise null.
 * @private
 */

/**
 * Implementation of YAHOO.widget.DataSource using XML HTTP requests that return
 * query results.
 *
 * @id YAHOO.widget.DS_XHR
 * @class DS_XHR
 * @extends YAHOO.widget.DataSource
 * @requires connection
 * @constructor
 * @param sScriptURI {String} Absolute or relative URI to script that returns query
 * results as JSON, XML, or delimited flat-file data.
 * @param aSchema {String[]} Data schema definition of results.
 * @param oConfigs {Object} (optional) Object literal of config params.
 */

/**
 * JSON data type.
 *
 * @id YAHOO.widget.DS_XHR.TYPE_JSON
 * @property TYPE_JSON
 * @type Number
 * @static
 * @final
 */

/**
 * XML data type.
 *
 * @id YAHOO.widget.DS_XHR.TYPE_XML
 * @property TYPE_XML
 * @type Number
 * @static
 * @final
 */

/**
 * Flat-file data type.
 *
 * @id YAHOO.widget.DS_XHR.TYPE_FLAT
 * @property TYPE_FLAT
 * @type Number
 * @static
 * @final
 */

/**
 * Error message for XHR failure.
 *
 * @id YAHOO.widget.DS_XHR.ERROR_DATAXHR
 * @property ERROR_DATAXHR
 * @type String
 * @static
 * @final
 */

/**
 * Alias to YUI Connection Manager, to allow implementers to customize the utility.
 *
 * @id YAHOO.widget.DS_XHR.connMgr
 * @property connMgr
 * @type Object
 * @default YAHOO.util.Connect
 */

/**
 * Number of milliseconds the XHR connection will wait for a server response. A
 * a value of zero indicates the XHR connection will wait forever. Any value
 * greater than zero will use the Connection utility's Auto-Abort feature.
 *
 * @id YAHOO.widget.DS_XHR.connTimeout
 * @property connTimeout
 * @type Number
 * @default 0
 */

/**
 * Absolute or relative URI to script that returns query results. For instance,
 * queries will be sent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput
 *
 * @id YAHOO.widget.DS_XHR.scriptURI
 * @property scriptURI
 * @type String
 */

/**
 * Query string parameter name sent to scriptURI. For instance, queries will be
 * sent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput
 *
 * @id YAHOO.widget.DS_XHR.scriptQueryParam
 * @property scriptQueryParam
 * @type String
 * @default "query"
 */

/**
 * String of key/value pairs to append to requests made to scriptURI. Define
 * this string when you want to send additional query parameters to your script.
 * When defined, queries will be sent to
 * &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=userinput&#38;&#60;scriptQueryAppend&#62;
 *
 * @id YAHOO.widget.DS_XHR.scriptQueryAppend
 * @property scriptQueryAppend
 * @type String
 * @default ""
 */

/**
 * XHR response data type. Other types that may be defined are YAHOO.widget.DS_XHR.TYPE_XML
 * and YAHOO.widget.DS_XHR.TYPE_FLAT.
 *
 * @id YAHOO.widget.DS_XHR.responseType
 * @property responseType
 * @type String
 * @default YAHOO.widget.DS_XHR.TYPE_JSON
 */

/**
 * String after which to strip results. If the results from the XHR are sent
 * back as HTML, the gzip HTML comment appears at the end of the data and should
 * be ignored.
 *
 * @id YAHOO.widget.DS_XHR.responseStripAfter
 * @property responseStripAfter
 * @type String
 * @default "\n&#60;!-"
 */

/**
 * Queries the live data source defined by scriptURI for results. Results are
 * passed back to a callback function.
 *
 * @id YAHOO.widget.DS_XHR.doQuery
 * @method doQuery
 * @param oCallbackFn {HTMLFunction} Callback function defined by oParent object to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 */

/**
 * Parses raw response data into an array of result objects. The result data key
 * is always stashed in the [0] element of each result object.
 *
 * @id YAHOO.widget.DS_XHR.parseResponse
 * @method parseResponse
 * @param sQuery {String} Query string.
 * @param oResponse {Object} The raw response data to parse.
 * @param oParent {Object} The object instance that has requested data.
 * @returns {Object[]} Array of result objects.
 */

/**
 * XHR connection object.
 *
 * @id YAHOO.widget.DS_XHR._oConn
 * @property _oConn
 * @type Object
 * @private
 */

/**
 * Implementation of YAHOO.widget.DataSource using the Get Utility to generate
 * dynamic SCRIPT nodes for data retrieval.
 *
 * @id YAHOO.widget.DS_ScriptNode
 * @class DS_ScriptNode
 * @constructor
 * @extends YAHOO.widget.DataSource
 * @param sUri {String} URI to the script location that will return data.
 * @param aSchema {String[]} Data schema definition of results.
 * @param oConfigs {Object} (optional) Object literal of config params.
 */

/**
 * Alias to YUI Get Utility. Allows implementers to specify their own
 * subclasses of the YUI Get Utility.
 *
 * @id YAHOO.widget.DS_ScriptNode.getUtility
 * @property getUtility
 * @type Object
 * @default YAHOO.util.Get
 */

/**
 * URI to the script that returns data.
 *
 * @id YAHOO.widget.DS_ScriptNode.scriptURI
 * @property scriptURI
 * @type String
 */

/**
 * Query string parameter name sent to scriptURI. For instance, requests will be
 * sent to &#60;scriptURI&#62;?&#60;scriptQueryParam&#62;=queryString
 *
 * @id YAHOO.widget.DS_ScriptNode.scriptQueryParam
 * @property scriptQueryParam
 * @type String
 * @default "query"
 */

/**
 * Defines request/response management in the following manner:
 * <dl>
 *     <!--<dt>queueRequests</dt>
 *     <dd>If a request is already in progress, wait until response is returned before sending the next request.</dd>
 *     <dt>cancelStaleRequests</dt>
 *     <dd>If a request is already in progress, cancel it before sending the next request.</dd>-->
 *     <dt>ignoreStaleResponses</dt>
 *     <dd>Send all requests, but handle only the response for the most recently sent request.</dd>
 *     <dt>allowAll</dt>
 *     <dd>Send all requests and handle all responses.</dd>
 * </dl>
 *
 * @id YAHOO.widget.DS_ScriptNode.asyncMode
 * @property asyncMode
 * @type String
 * @default "allowAll"
 */

/**
 * Callback string parameter name sent to scriptURI. For instance, requests will be
 * sent to &#60;scriptURI&#62;?&#60;scriptCallbackParam&#62;=callbackFunction
 *
 * @id YAHOO.widget.DS_ScriptNode.scriptCallbackParam
 * @property scriptCallbackParam
 * @type String
 * @default "callback"
 */

/**
 * Global array of callback functions, one for each request sent.
 *
 * @id YAHOO.widget.DS_ScriptNode.callbacks
 * @property callbacks
 * @type Function[]
 * @static
 */

/**
 * Unique ID to track requests.
 *
 * @id YAHOO.widget.DS_ScriptNode._nId
 * @property _nId
 * @type Number
 * @private
 * @static
 */

/**
 * Counter for pending requests. When this is 0, it is safe to purge callbacks
 * array.
 *
 * @id YAHOO.widget.DS_ScriptNode._nPending
 * @property _nPending
 * @type Number
 * @private
 * @static
 */

/**
 * Queries the live data source. Results are passed back to a callback function.
 *
 * @id YAHOO.widget.DS_ScriptNode.doQuery
 * @method doQuery
 * @param oCallbackFn {HTMLFunction} Callback function defined by oParent object to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 */

/**
 * Parses JSON response data into an array of result objects and passes it to
 * the callback function.
 *
 * @id YAHOO.widget.DS_ScriptNode.handleResponse
 * @method handleResponse
 * @param oResponse {Object} The raw response data to parse.
 * @param oCallbackFn {HTMLFunction} Callback function defined by oParent object to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 */

/**
 * Any success/failure response should decrement counter.
 *
 * @id YAHOO.widget.DS_ScriptNode._bumpPendingDown
 * @method _bumpPendingDown
 * @private
 */

/**
 * Implementation of YAHOO.widget.DataSource using a native Javascript function as
 * its live data source.
 *
 * @id YAHOO.widget.DS_JSFunction
 * @class DS_JSFunction
 * @constructor
 * @extends YAHOO.widget.DataSource
 * @param oFunction {HTMLFunction} In-memory Javascript function that returns query results as an array of objects.
 * @param oConfigs {Object} (optional) Object literal of config params.
 */

/**
 * In-memory Javascript function that returns query results.
 *
 * @id YAHOO.widget.DS_JSFunction.dataFunction
 * @property dataFunction
 * @type HTMLFunction
 */

/**
 * Queries the live data source defined by function for results. Results are
 * passed back to a callback function.
 *
 * @id YAHOO.widget.DS_JSFunction.doQuery
 * @method doQuery
 * @param oCallbackFn {HTMLFunction} Callback function defined by oParent object to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 */

/**
 * Implementation of YAHOO.widget.DataSource using a native Javascript array as
 * its live data source.
 *
 * @id YAHOO.widget.DS_JSArray
 * @class DS_JSArray
 * @constructor
 * @extends YAHOO.widget.DataSource
 * @param aData {String[]} In-memory Javascript array of simple string data.
 * @param oConfigs {Object} (optional) Object literal of config params.
 */

/**
 * In-memory Javascript array of strings.
 *
 * @id YAHOO.widget.DS_JSArray.data
 * @property data
 * @type Array
 */

/**
 * Queries the live data source defined by data for results. Results are passed
 * back to a callback function.
 *
 * @id YAHOO.widget.DS_JSArray.doQuery
 * @method doQuery
 * @param oCallbackFn {HTMLFunction} Callback function defined by oParent object to which to return results.
 * @param sQuery {String} Query string.
 * @param oParent {Object} The object instance that has requested data.
 */

/**
 * The Button class creates a rich, graphical button.
 * @id YAHOO.widget.Button
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,
 * <code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to
 * be used to create the button.
 * @param {HTMLInputElement|
 * HTMLButtonElement|HTMLElement} p_oElement Object reference for the
 * <code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,
 * <code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to be
 * used to create the button.
 * @param {Object} p_oElement Object literal specifying a set of
 * configuration attributes used to create the button.
 * @param {Object} p_oAttributes Optional. Object literal specifying a set
 * of configuration attributes used to create the button.
 * @namespace YAHOO.widget
 * @class Button
 * @constructor
 * @extends YAHOO.util.Element
 */

/**
 * @id YAHOO.widget.Button.createInputElement
 * @method createInputElement
 * @description Creates an <code>&#60;input&#62;</code> element of the
 * specified type.
 * @private
 * @param {String} p_sType String specifying the type of
 * <code>&#60;input&#62;</code> element to create.
 * @param {String} p_sName String specifying the name of
 * <code>&#60;input&#62;</code> element to create.
 * @param {String} p_sValue String specifying the value of
 * <code>&#60;input&#62;</code> element to create.
 * @param {String} p_bChecked Boolean specifying if the
 * <code>&#60;input&#62;</code> element is to be checked.
 * @return {HTMLInputElement}
 */

/**
 * @id YAHOO.widget.Button.setAttributesFromSrcElement
 * @method setAttributesFromSrcElement
 * @description Gets the values for all the attributes of the source element
 * (either <code>&#60;input&#62;</code> or <code>&#60;a&#62;</code>) that
 * map to Button configuration attributes and sets them into a collection
 * that is passed to the Button constructor.
 * @private
 * @param {HTMLInputElement|HTMLAnchorElement} p_oElement Object reference to the HTML
 * element (either <code>&#60;input&#62;</code> or <code>&#60;span&#62;
 * </code>) used to create the button.
 * @param {Object} p_oAttributes Object reference for the collection of
 * configuration attributes used to create the button.
 */

/**
 * @id YAHOO.widget.Button.setAttributeFromDOMAttribute
 * @method setAttributeFromDOMAttribute
 * @description Gets the value of the specified DOM attribute and sets it
 * into the collection of configuration attributes used to configure
 * the button.
 * @private
 * @param {String} p_sAttribute String representing the name of the
 * attribute to retrieve from the DOM element.
 */

/**
 * @id YAHOO.widget.Button.setFormElementProperties
 * @method setFormElementProperties
 * @description Gets the value of the attributes from the form element
 * and sets them into the collection of configuration attributes used to
 * configure the button.
 * @private
 */

/**
 * @id YAHOO.widget.Button.initConfig
 * @method initConfig
 * @description Initializes the set of configuration attributes that are
 * used to instantiate the button.
 * @private
 * @param {Object} Object representing the button's set of
 * configuration attributes.
 */

/**
 * @id YAHOO.widget.Button._button
 * @property _button
 * @description Object reference to the button's internal
 * <code>&#60;a&#62;</code> or <code>&#60;button&#62;</code> element.
 * @default null
 * @protected
 * @type HTMLAnchorElement|HTMLButtonElement
 */

/**
 * @id YAHOO.widget.Button._menu
 * @property _menu
 * @description Object reference to the button's menu.
 * @default null
 * @protected
 * @type {YAHOO.widget.Overlay|
 * YAHOO.widget.Menu}
 */

/**
 * @id YAHOO.widget.Button._hiddenFields
 * @property _hiddenFields
 * @description Object reference to the <code>&#60;input&#62;</code>
 * element, or array of HTML form elements used to represent the button
 *  when its parent form is submitted.
 * @default null
 * @protected
 * @type HTMLInputElement|Array
 */

/**
 * @id YAHOO.widget.Button._onclickAttributeValue
 * @property _onclickAttributeValue
 * @description Object reference to the button's current value for the
 * "onclick" configuration attribute.
 * @default null
 * @protected
 * @type Object
 */

/**
 * @id YAHOO.widget.Button._activationKeyPressed
 * @property _activationKeyPressed
 * @description Boolean indicating if the key(s) that toggle the button's
 * "active" state have been pressed.
 * @default false
 * @protected
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Button._activationButtonPressed
 * @property _activationButtonPressed
 * @description Boolean indicating if the mouse button that toggles
 * the button's "active" state has been pressed.
 * @default false
 * @protected
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Button._hasKeyEventHandlers
 * @property _hasKeyEventHandlers
 * @description Boolean indicating if the button's "blur", "keydown" and
 * "keyup" event handlers are assigned
 * @default false
 * @protected
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Button._hasMouseEventHandlers
 * @property _hasMouseEventHandlers
 * @description Boolean indicating if the button's "mouseout,"
 * "mousedown," and "mouseup" event handlers are assigned
 * @default false
 * @protected
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Button.NODE_NAME
 * @property NODE_NAME
 * @description The name of the node to be used for the button's
 * root element.
 * @default "SPAN"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.CHECK_ACTIVATION_KEYS
 * @property CHECK_ACTIVATION_KEYS
 * @description Array of numbers representing keys that (when pressed)
 * toggle the button's "checked" attribute.
 * @default [32]
 * @final
 * @type Array
 */

/**
 * @id YAHOO.widget.Button.ACTIVATION_KEYS
 * @property ACTIVATION_KEYS
 * @description Array of numbers representing keys that (when presed)
 * toggle the button's "active" state.
 * @default [13, 32]
 * @final
 * @type Array
 */

/**
 * @id YAHOO.widget.Button.OPTION_AREA_WIDTH
 * @property OPTION_AREA_WIDTH
 * @description Width (in pixels) of the area of a split button that
 * when pressed will display a menu.
 * @default 20
 * @final
 * @type Number
 */

/**
 * @id YAHOO.widget.Button.CSS_CLASS_NAME
 * @property CSS_CLASS_NAME
 * @description String representing the CSS class(es) to be applied to
 * the button's root element.
 * @default "yui-button"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.RADIO_DEFAULT_TITLE
 * @property RADIO_DEFAULT_TITLE
 * @description String representing the default title applied to buttons
 * of type "radio."
 * @default "Unchecked.  Click to check."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.RADIO_CHECKED_TITLE
 * @property RADIO_CHECKED_TITLE
 * @description String representing the title applied to buttons of
 * type "radio" when checked.
 * @default "Checked.  Click another button to uncheck"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.CHECKBOX_DEFAULT_TITLE
 * @property CHECKBOX_DEFAULT_TITLE
 * @description String representing the default title applied to
 * buttons of type "checkbox."
 * @default "Unchecked.  Click to check."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.CHECKBOX_CHECKED_TITLE
 * @property CHECKBOX_CHECKED_TITLE
 * @description String representing the title applied to buttons of type
 * "checkbox" when checked.
 * @default "Checked.  Click to uncheck."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.MENUBUTTON_DEFAULT_TITLE
 * @property MENUBUTTON_DEFAULT_TITLE
 * @description String representing the default title applied to
 * buttons of type "menu."
 * @default "Menu collapsed.  Click to expand."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.MENUBUTTON_MENU_VISIBLE_TITLE
 * @property MENUBUTTON_MENU_VISIBLE_TITLE
 * @description String representing the title applied to buttons of type
 * "menu" when the button's menu is visible.
 * @default "Menu expanded.  Click or press Esc to collapse."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.SPLITBUTTON_DEFAULT_TITLE
 * @property SPLITBUTTON_DEFAULT_TITLE
 * @description  String representing the default title applied to
 * buttons of type "split."
 * @default "Menu collapsed.  Click inside option region or press
 * Ctrl + Shift + M to show the menu."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.SPLITBUTTON_OPTION_VISIBLE_TITLE
 * @property SPLITBUTTON_OPTION_VISIBLE_TITLE
 * @description String representing the title applied to buttons of type
 * "split" when the button's menu is visible.
 * @default "Menu expanded.  Press Esc or Ctrl + Shift + M to hide
 * the menu."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button.SUBMIT_TITLE
 * @property SUBMIT_TITLE
 * @description String representing the title applied to buttons of
 * type "submit."
 * @default "Click to submit form."
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Button._setType
 * @method _setType
 * @description Sets the value of the button's "type" attribute.
 * @protected
 * @param {String} p_sType String indicating the value for the button's
 * "type" attribute.
 */

/**
 * @id YAHOO.widget.Button._setLabel
 * @method _setLabel
 * @description Sets the value of the button's "label" attribute.
 * @protected
 * @param {String} p_sLabel String indicating the value for the button's
 * "label" attribute.
 */

/**
 * @id YAHOO.widget.Button._setTabIndex
 * @method _setTabIndex
 * @description Sets the value of the button's "tabindex" attribute.
 * @protected
 * @param {Number} p_nTabIndex Number indicating the value for the
 * button's "tabindex" attribute.
 */

/**
 * @id YAHOO.widget.Button._setTitle
 * @method _setTitle
 * @description Sets the value of the button's "title" attribute.
 * @protected
 * @param {String} p_nTabIndex Number indicating the value for
 * the button's "title" attribute.
 */

/**
 * @id YAHOO.widget.Button._setDisabled
 * @method _setDisabled
 * @description Sets the value of the button's "disabled" attribute.
 * @protected
 * @param {Boolean} p_bDisabled Boolean indicating the value for
 * the button's "disabled" attribute.
 */

/**
 * @id YAHOO.widget.Button._setHref
 * @method _setHref
 * @description Sets the value of the button's "href" attribute.
 * @protected
 * @param {String} p_sHref String indicating the value for the button's
 * "href" attribute.
 */

/**
 * @id YAHOO.widget.Button._setTarget
 * @method _setTarget
 * @description Sets the value of the button's "target" attribute.
 * @protected
 * @param {String} p_sTarget String indicating the value for the button's
 * "target" attribute.
 */

/**
 * @id YAHOO.widget.Button._setChecked
 * @method _setChecked
 * @description Sets the value of the button's "target" attribute.
 * @protected
 * @param {Boolean} p_bChecked Boolean indicating the value for
 * the button's "checked" attribute.
 */

/**
 * @id YAHOO.widget.Button._setMenu
 * @method _setMenu
 * @description Sets the value of the button's "menu" attribute.
 * @protected
 * @param {Object} p_oMenu Object indicating the value for the button's
 * "menu" attribute.
 */

/**
 * @id YAHOO.widget.Button._setOnClick
 * @method _setOnClick
 * @description Sets the value of the button's "onclick" attribute.
 * @protected
 * @param {Object} p_oObject Object indicating the value for the button's
 * "onclick" attribute.
 */

/**
 * @id YAHOO.widget.Button._setSelectedMenuItem
 * @method _setSelectedMenuItem
 * @description Sets the value of the button's
 * "selectedMenuItem" attribute.
 * @protected
 * @param {Number} p_nIndex Number representing the index of the item
 * in the button's menu that is currently selected.
 */

/**
 * @id YAHOO.widget.Button._isActivationKey
 * @method _isActivationKey
 * @description Determines if the specified keycode is one that toggles
 * the button's "active" state.
 * @protected
 * @param {Number} p_nKeyCode Number representing the keycode to
 * be evaluated.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Button._isSplitButtonOptionKey
 * @method _isSplitButtonOptionKey
 * @description Determines if the specified keycode is one that toggles
 * the display of the split button's menu.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Button._addListenersToForm
 * @method _addListenersToForm
 * @description Adds event handlers to the button's form.
 * @protected
 */

/**
 * @id YAHOO.widget.Button._showMenu
 * @method _showMenu
 * @description Shows the button's menu.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event) that triggered
 * the display of the menu.
 */

/**
 * @id YAHOO.widget.Button._hideMenu
 * @method _hideMenu
 * @description Hides the button's menu.
 * @protected
 */

/**
 * @id YAHOO.widget.Button._onMouseOver
 * @method _onMouseOver
 * @description "mouseover" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onMouseOut
 * @method _onMouseOut
 * @description "mouseout" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onDocumentMouseUp
 * @method _onDocumentMouseUp
 * @description "mouseup" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onMouseDown
 * @method _onMouseDown
 * @description "mousedown" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onMouseUp
 * @method _onMouseUp
 * @description "mouseup" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onFocus
 * @method _onFocus
 * @description "focus" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onBlur
 * @method _onBlur
 * @description "blur" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onDocumentKeyUp
 * @method _onDocumentKeyUp
 * @description "keyup" event handler for the document.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onKeyDown
 * @method _onKeyDown
 * @description "keydown" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onKeyUp
 * @method _onKeyUp
 * @description "keyup" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onClick
 * @method _onClick
 * @description "click" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onAppendTo
 * @method _onAppendTo
 * @description "appendTo" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onFormReset
 * @method _onFormReset
 * @description "reset" event handler for the button's form.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event
 * object passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onDocumentMouseDown
 * @method _onDocumentMouseDown
 * @description "mousedown" event handler for the document.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onOption
 * @method _onOption
 * @description "option" event handler for the button.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button._onOverlayBeforeShow
 * @method _onOverlayBeforeShow
 * @description "beforeshow" event handler for the
 * YAHOO.widget.Overlay instance
 * serving as the button's menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 */

/**
 * @id YAHOO.widget.Button._onMenuShow
 * @method _onMenuShow
 * @description "show" event handler for the button's menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 */

/**
 * @id YAHOO.widget.Button._onMenuHide
 * @method _onMenuHide
 * @description "hide" event handler for the button's menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 */

/**
 * @id YAHOO.widget.Button._onMenuKeyDown
 * @method _onMenuKeyDown
 * @description "keydown" event handler for the button's menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.Button._onMenuRender
 * @method _onMenuRender
 * @description "render" event handler for the button's menu.
 * @private
 * @param {String} p_sType String representing the name of the
 * event thatwas fired.
 */

/**
 * @id YAHOO.widget.Button._onMenuItemSelected
 * @method _onMenuItemSelected
 * @description "selectedchange" event handler for each item in the
 * button's menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 * @param {MenuItem} p_oItem Object representing the menu item that
 * subscribed to the event.
 */

/**
 * @id YAHOO.widget.Button._onMenuItemAdded
 * @method _onMenuItemAdded
 * @description "itemadded" event handler for the button's menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 * @param {
 * YAHOO.widget.MenuItem} p_oItem Object representing the menu
 * item that subscribed to the event.
 */

/**
 * @id YAHOO.widget.Button._onMenuClick
 * @method _onMenuClick
 * @description "click" event handler for the button's menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.Button.createButtonElement
 * @method createButtonElement
 * @description Creates the button's HTML elements.
 * @param {String} p_sType String indicating the type of element
 * to create.
 * @return {HTMLElement}
 */

/**
 * @id YAHOO.widget.Button.addStateCSSClasses
 * @method addStateCSSClasses
 * @description Appends state-specific CSS classes to the button's root
 * DOM element.
 */

/**
 * @id YAHOO.widget.Button.removeStateCSSClasses
 * @method removeStateCSSClasses
 * @description Removes state-specific CSS classes to the button's root
 * DOM element.
 */

/**
 * @id YAHOO.widget.Button.createHiddenFields
 * @method createHiddenFields
 * @description Creates the button's hidden form field and appends it
 * to its parent form.
 * @return {HTMLInputElement|Array}
 */

/**
 * @id YAHOO.widget.Button.removeHiddenFields
 * @method removeHiddenFields
 * @description Removes the button's hidden form field(s) from its
 * parent form.
 */

/**
 * @id YAHOO.widget.Button.submitForm
 * @method submitForm
 * @description Submits the form to which the button belongs.  Returns
 * true if the form was submitted successfully, false if the submission
 * was cancelled.
 * @protected
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Button.init
 * @method init
 * @description The Button class's initialization method.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,
 * <code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to
 * be used to create the button.
 * @param {HTMLInputElement|HTMLButtonElement|
 * HTMLElement} p_oElement Object reference for the
 * <code>&#60;input&#62;</code>, <code>&#60;button&#62;</code>,
 * <code>&#60;a&#62;</code>, or <code>&#60;span&#62;</code> element to be
 * used to create the button.
 * @param {Object} p_oElement Object literal specifying a set of
 * configuration attributes used to create the button.
 * @param {Object} p_oAttributes Optional. Object literal specifying a
 * set of configuration attributes used to create the button.
 */

/**
 * @id YAHOO.widget.Button.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to
 * create the button.
 * @param {Object} p_oAttributes Object literal specifying a set of
 * configuration attributes used to create the button.
 */

/**
 * @id YAHOO.widget.Button.type
 * @attribute type
 * @description String specifying the button's type.  Possible
 * values are: "push," "link," "submit," "reset," "checkbox,"
 * "radio," "menu," and "split."
 * @default "push"
 * @type String
 */

/**
 * @id YAHOO.widget.Button.label
 * @attribute label
 * @description String specifying the button's text label
 * or innerHTML.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.Button.value
 * @attribute value
 * @description Object specifying the value for the button.
 * @default null
 * @type Object
 */

/**
 * @id YAHOO.widget.Button.name
 * @attribute name
 * @description String specifying the name for the button.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.Button.tabindex
 * @attribute tabindex
 * @description Number specifying the tabindex for the button.
 * @default null
 * @type Number
 */

/**
 * @id YAHOO.widget.Button.title
 * @attribute title
 * @description String specifying the title for the button.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.Button.disabled
 * @attribute disabled
 * @description Boolean indicating if the button should be disabled.
 * (Disabled buttons are dimmed and will not respond to user input
 * or fire events.  Does not apply to button's of type "link.")
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Button.href
 * @attribute href
 * @description String specifying the href for the button.  Applies
 * only to buttons of type "link."
 * @type String
 */

/**
 * @id YAHOO.widget.Button.target
 * @attribute target
 * @description String specifying the target for the button.
 * Applies only to buttons of type "link."
 * @type String
 */

/**
 * @id YAHOO.widget.Button.checked
 * @attribute checked
 * @description Boolean indicating if the button is checked.
 * Applies only to buttons of type "radio" and "checkbox."
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Button.container
 * @attribute container
 * @description HTML element reference or string specifying the id
 * attribute of the HTML element that the button's markup should be
 * rendered into.
 * @type HTMLElement|String
 * @default null
 */

/**
 * @id YAHOO.widget.Button.srcelement
 * @attribute srcelement
 * @description Object reference to the HTML element (either
 * <code>&#60;input&#62;</code> or <code>&#60;span&#62;</code>)
 * used to create the button.
 * @type HTMLElement|String
 * @default null
 */

/**
 * @id YAHOO.widget.Button.menu
 * @attribute menu
 * @description Object specifying the menu for the button.
 * The value can be one of the following:
 * <ul>
 * <li>Object specifying a
 * YAHOO.widget.Menu instance.</li>
 * <li>Object specifying a
 * YAHOO.widget.Overlay instance.</li>
 * <li>String specifying the id attribute of the <code>&#60;div&#62;
 * </code> element used to create the menu.  By default the menu
 * will be created as an instance of
 * YAHOO.widget.Overlay.
 * If the
 * default CSS class name for YAHOO.widget.Menu is applied to
 * the <code>&#60;div&#62;</code> element, it will be created as an
 * instance of YAHOO.widget.Menu
 * .</li><li>String specifying the id attribute of the
 * <code>&#60;select&#62;</code> element used to create the menu.
 * </li><li>Object specifying the <code>&#60;div&#62;</code> element
 * used to create the menu.</li>
 * <li>Object specifying the <code>&#60;select&#62;</code> element
 * used to create the menu.</li>
 * <li>Array of object literals, each representing a set of
 * YAHOO.widget.MenuItem
 * configuration attributes.</li>
 * <li>Array of strings representing the text labels for each menu
 * item in the menu.</li>
 * </ul>
 * @type YAHOO.widget.Menu|YAHOO.widget.Overlay|HTMLElement|String|Array
 * @default null
 */

/**
 * @id YAHOO.widget.Button.lazyloadmenu
 * @attribute lazyloadmenu
 * @description Boolean indicating the value to set for the
 * "lazyload"
 * configuration property of the button's menu.  Setting
 * "lazyloadmenu" to <code>true </code> will defer rendering of
 * the button's menu until the first time it is made visible.
 * If "lazyloadmenu" is set to <code>false</code>, the button's
 * menu will be rendered immediately if the button is in the
 * document, or in response to the button's "appendTo" event if
 * the button is not yet in the document.  In either case, the
 * menu is rendered into the button's parent HTML element.
 * <em>This attribute does not apply if a
 * YAHOO.widget.Menu or
 * YAHOO.widget.Overlay
 * instance is passed as the value of the button's "menu"
 * configuration attribute.
 * YAHOO.widget.Menu or
 * YAHOO.widget.Overlay instances should be rendered before
 * being set as the value for the "menu" configuration
 * attribute.</em>
 * @default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Button.menuclassname
 * @attribute menuclassname
 * @description String representing the CSS class name to be
 * applied to the root element of the button's menu.
 * @type String
 * @default "yui-button-menu"
 */

/**
 * @id YAHOO.widget.Button.selectedMenuItem
 * @attribute selectedMenuItem
 * @description Object representing the item in the button's menu
 * that is currently selected.
 * @type Number
 * @default null
 */

/**
 * @id YAHOO.widget.Button.onclick
 * @attribute onclick
 * @description Object literal representing the code to be executed
 * when the button is clicked.  Format:<br> <code> {<br>
 * <strong>fn:</strong> Function,   &#47;&#47; The handler to call
 * when the event fires.<br> <strong>obj:</strong> Object,
 * &#47;&#47; An object to pass back to the handler.<br>
 * <strong>scope:</strong> Object &#47;&#47;  The object to use
 * for the scope of the handler.<br> } </code>
 * @type Object
 * @default null
 */

/**
 * @id YAHOO.widget.Button.focusmenu
 * @attribute focusmenu
 * @description Boolean indicating whether or not the button's menu
 * should be focused when it is made visible.
 * @type Boolean
 * @default true
 */

/**
 * @id YAHOO.widget.Button.focus
 * @method focus
 * @description Causes the button to receive the focus and fires the
 * button's "focus" event.
 */

/**
 * @id YAHOO.widget.Button.blur
 * @method blur
 * @description Causes the button to lose focus and fires the button's
 * "blur" event.
 */

/**
 * @id YAHOO.widget.Button.hasFocus
 * @method hasFocus
 * @description Returns a boolean indicating whether or not the button
 * has focus.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Button.isActive
 * @method isActive
 * @description Returns a boolean indicating whether or not the button
 * is active.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Button.getMenu
 * @method getMenu
 * @description Returns a reference to the button's menu.
 * @return {
 * YAHOO.widget.Overlay|YAHOO.widget.Menu}
 */

/**
 * @id YAHOO.widget.Button.getForm
 * @method getForm
 * @description Returns a reference to the button's parent form.
 * @return {HTMLFormElement}
 */

/**
 * @id YAHOO.widget.Button.getHiddenFields
 * @method getHiddenFields
 * @description Returns an <code>&#60;input&#62;</code> element or
 * array of form elements used to represent the button when its parent
 * form is submitted.
 * @return {HTMLInputElement|Array}
 */

/**
 * @id YAHOO.widget.Button.destroy
 * @method destroy
 * @description Removes the button's element from its parent element and
 * removes all event handlers.
 */

/**
 * @id YAHOO.widget.Button.toString
 * @method toString
 * @description Returns a string representing the button.
 * @return {String}
 */

/**
 * @id YAHOO.widget.Button.YAHOO.widget.Button.onFormKeyPress
 * @method YAHOO.widget.Button.onFormKeyPress
 * @description "keypress" event handler for the button's form.
 * @param {Event} p_oEvent Object representing the DOM event object passed
 * back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.Button.YAHOO.widget.Button.addHiddenFieldsToForm
 * @method YAHOO.widget.Button.addHiddenFieldsToForm
 * @description Searches the specified form and adds hidden fields for
 * instances of YAHOO.widget.Button that are of type "radio," "checkbox,"
 * "menu," and "split."
 * @param {HTMLFormElement} p_oForm Object reference
 * for the form to search.
 */

/**
 * @id YAHOO.widget.Button.YAHOO.widget.Button.getButton
 * @method YAHOO.widget.Button.getButton
 * @description Returns a button with the specified id.
 * @param {String} p_sId String specifying the id of the root node of the
 * HTML element representing the button to be retrieved.
 * @return {YAHOO.widget.Button}
 */

/**
 * @id YAHOO.widget.Button.focus
 * @event focus
 * @description Fires when the menu item receives focus.  Passes back a
 * single object representing the original DOM event object passed back by
 * the event utility (YAHOO.util.Event) when the event was fired.  See
 * Element.addListener
 * for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Button.blur
 * @event blur
 * @description Fires when the menu item loses the input focus.  Passes back
 * a single object representing the original DOM event object passed back by
 * the event utility (YAHOO.util.Event) when the event was fired.  See
 * Element.addListener for
 * more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Button.option
 * @event option
 * @description Fires when the user invokes the button's option.  Passes
 * back a single object representing the original DOM event (either
 * "mousedown" or "keydown") that caused the "option" event to fire.  See
 * Element.addListener
 * for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * The ButtonGroup class creates a set of buttons that are mutually
 * exclusive; checking one button in the set will uncheck all others in the
 * button group.
 * @id YAHOO.widget.ButtonGroup
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the button group.
 * @param {HTMLDivElement} p_oElement Object
 * specifying the <code>&#60;div&#62;</code> element of the button group.
 * @param {Object} p_oElement Object literal specifying a set of
 * configuration attributes used to create the button group.
 * @param {Object} p_oAttributes Optional. Object literal specifying a set
 * of configuration attributes used to create the button group.
 * @namespace YAHOO.widget
 * @class ButtonGroup
 * @constructor
 * @extends YAHOO.util.Element
 */

/**
 * @id YAHOO.widget.ButtonGroup._buttons
 * @property _buttons
 * @description Array of buttons in the button group.
 * @default null
 * @protected
 * @type Array
 */

/**
 * @id YAHOO.widget.ButtonGroup.NODE_NAME
 * @property NODE_NAME
 * @description The name of the tag to be used for the button
 * group's element.
 * @default "DIV"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.ButtonGroup.CSS_CLASS_NAME
 * @property CSS_CLASS_NAME
 * @description String representing the CSS class(es) to be applied
 * to the button group's element.
 * @default "yui-buttongroup"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.ButtonGroup._createGroupElement
 * @method _createGroupElement
 * @description Creates the button group's element.
 * @protected
 * @return {HTMLDivElement}
 */

/**
 * @id YAHOO.widget.ButtonGroup._setDisabled
 * @method _setDisabled
 * @description Sets the value of the button groups's
 * "disabled" attribute.
 * @protected
 * @param {Boolean} p_bDisabled Boolean indicating the value for
 * the button group's "disabled" attribute.
 */

/**
 * @id YAHOO.widget.ButtonGroup._onKeyDown
 * @method _onKeyDown
 * @description "keydown" event handler for the button group.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.ButtonGroup._onAppendTo
 * @method _onAppendTo
 * @description "appendTo" event handler for the button group.
 * @protected
 * @param {Event} p_oEvent Object representing the event that was fired.
 */

/**
 * @id YAHOO.widget.ButtonGroup._onButtonCheckedChange
 * @method _onButtonCheckedChange
 * @description "checkedChange" event handler for each button in the
 * button group.
 * @protected
 * @param {Event} p_oEvent Object representing the event that was fired.
 * @param {YAHOO.widget.Button}
 * p_oButton Object representing the button that fired the event.
 */

/**
 * @id YAHOO.widget.ButtonGroup.init
 * @method init
 * @description The ButtonGroup class's initialization method.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the button group.
 * @param {HTMLDivElement} p_oElement Object
 * specifying the <code>&#60;div&#62;</code> element of the button group.
 * @param {Object} p_oElement Object literal specifying a set of
 * configuration attributes used to create the button group.
 * @param {Object} p_oAttributes Optional. Object literal specifying a
 * set of configuration attributes used to create the button group.
 */

/**
 * @id YAHOO.widget.ButtonGroup.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to
 * create the button group.
 * @param {Object} p_oAttributes Object literal specifying a set of
 * configuration attributes used to create the button group.
 */

/**
 * @id YAHOO.widget.ButtonGroup.name
 * @attribute name
 * @description String specifying the name for the button group.
 * This name will be applied to each button in the button group.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.ButtonGroup.disabled
 * @attribute disabled
 * @description Boolean indicating if the button group should be
 * disabled.  Disabling the button group will disable each button
 * in the button group.  Disabled buttons are dimmed and will not
 * respond to user input or fire events.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.ButtonGroup.value
 * @attribute value
 * @description Object specifying the value for the button group.
 * @default null
 * @type Object
 */

/**
 * @id YAHOO.widget.ButtonGroup.container
 * @attribute container
 * @description HTML element reference or string specifying the id
 * attribute of the HTML element that the button group's markup
 * should be rendered into.
 * @type HTMLElement|String
 * @default null
 */

/**
 * @id YAHOO.widget.ButtonGroup.checkedButton
 * @attribute checkedButton
 * @description Reference for the button in the button group that
 * is checked.
 * @type {YAHOO.widget.Button}
 * @default null
 */

/**
 * @id YAHOO.widget.ButtonGroup.addButton
 * @method addButton
 * @description Adds the button to the button group.
 * @param {YAHOO.widget.Button}
 * p_oButton Object reference for the
 * YAHOO.widget.Button instance to be added to the button group.
 * @param {String} p_oButton String specifying the id attribute of the
 * <code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> element
 * to be used to create the button to be added to the button group.
 * @param {HTMLInputElement|HTMLElement} p_oButton Object reference for the
 * <code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> element
 * to be used to create the button to be added to the button group.
 * @param {Object} p_oButton Object literal specifying a set of
 * YAHOO.widget.Button
 * configuration attributes used to configure the button to be added to
 * the button group.
 * @return {YAHOO.widget.Button}
 */

/**
 * @id YAHOO.widget.ButtonGroup.addButtons
 * @method addButtons
 * @description Adds the array of buttons to the button group.
 * @param {Array} p_aButtons Array of
 * YAHOO.widget.Button instances to be added
 * to the button group.
 * @param {Array} p_aButtons Array of strings specifying the id
 * attribute of the <code>&#60;input&#62;</code> or <code>&#60;span&#62;
 * </code> elements to be used to create the buttons to be added to the
 * button group.
 * @param {Array} p_aButtons Array of object references for the
 * <code>&#60;input&#62;</code> or <code>&#60;span&#62;</code> elements
 * to be used to create the buttons to be added to the button group.
 * @param {Array} p_aButtons Array of object literals, each containing
 * a set of YAHOO.widget.Button
 * configuration attributes used to configure each button to be added
 * to the button group.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.ButtonGroup.removeButton
 * @method removeButton
 * @description Removes the button at the specified index from the
 * button group.
 * @param {Number} p_nIndex Number specifying the index of the button
 * to be removed from the button group.
 */

/**
 * @id YAHOO.widget.ButtonGroup.getButton
 * @method getButton
 * @description Returns the button at the specified index.
 * @param {Number} p_nIndex The index of the button to retrieve from the
 * button group.
 * @return {YAHOO.widget.Button}
 */

/**
 * @id YAHOO.widget.ButtonGroup.getButtons
 * @method getButtons
 * @description Returns an array of the buttons in the button group.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.ButtonGroup.getCount
 * @method getCount
 * @description Returns the number of buttons in the button group.
 * @return {Number}
 */

/**
 * @id YAHOO.widget.ButtonGroup.focus
 * @method focus
 * @description Sets focus to the button at the specified index.
 * @param {Number} p_nIndex Number indicating the index of the button
 * to focus.
 */

/**
 * @id YAHOO.widget.ButtonGroup.check
 * @method check
 * @description Checks the button at the specified index.
 * @param {Number} p_nIndex Number indicating the index of the button
 * to check.
 */

/**
 * @id YAHOO.widget.ButtonGroup.destroy
 * @method destroy
 * @description Removes the button group's element from its parent
 * element and removes all event handlers.
 */

/**
 * @id YAHOO.widget.ButtonGroup.toString
 * @method toString
 * @description Returns a string representing the button group.
 * @return {String}
 */

/**
 * Config is a utility used within an Object to allow the implementer to
 * maintain a list of local configuration properties and listen for changes
 * to those properties dynamically using CustomEvent. The initial values are
 * also maintained so that the configuration can be reset at any given point
 * to its initial state.
 * @id YAHOO.util.Config
 * @namespace YAHOO.util
 * @class Config
 * @constructor
 * @param {Object} owner The owner Object to which this Config Object belongs
 */

/**
 * Constant representing the CustomEvent type for the config changed event.
 * @id YAHOO.util.Config.YAHOO.util.Config.CONFIG_CHANGED_EVENT
 * @property YAHOO.util.Config.CONFIG_CHANGED_EVENT
 * @private
 * @static
 * @final
 */

/**
 * Constant representing the boolean type string
 * @id YAHOO.util.Config.YAHOO.util.Config.BOOLEAN_TYPE
 * @property YAHOO.util.Config.BOOLEAN_TYPE
 * @private
 * @static
 * @final
 */

/**
 * Object reference to the owner of this Config Object
 * @id YAHOO.util.Config.owner
 * @property owner
 * @type Object
 */

/**
 * Boolean flag that specifies whether a queue is currently
 * being executed
 * @id YAHOO.util.Config.queueInProgress
 * @property queueInProgress
 * @type Boolean
 */

/**
 * Maintains the local collection of configuration property objects and
 * their specified values
 * @id YAHOO.util.Config.config
 * @property config
 * @private
 * @type Object
 */

/**
 * Maintains the local collection of configuration property objects as
 * they were initially applied.
 * This object is used when resetting a property.
 * @id YAHOO.util.Config.initialConfig
 * @property initialConfig
 * @private
 * @type Object
 */

/**
 * Maintains the local, normalized CustomEvent queue
 * @id YAHOO.util.Config.eventQueue
 * @property eventQueue
 * @private
 * @type Object
 */

/**
 * Custom Event, notifying subscribers when Config properties are set
 * (setProperty is called without the silent flag
 * @id YAHOO.util.Config.configChangedEvent
 * @event configChangedEvent
 */

/**
 * Initializes the configuration Object and all of its local members.
 * @id YAHOO.util.Config.init
 * @method init
 * @param {Object} owner The owner Object to which this Config
 * Object belongs
 */

/**
 * Validates that the value passed in is a Boolean.
 * @id YAHOO.util.Config.checkBoolean
 * @method checkBoolean
 * @param {Object} val The value to validate
 * @return {Boolean} true, if the value is valid
 */

/**
 * Validates that the value passed in is a number.
 * @id YAHOO.util.Config.checkNumber
 * @method checkNumber
 * @param {Object} val The value to validate
 * @return {Boolean} true, if the value is valid
 */

/**
 * Fires a configuration property event using the specified value.
 * @id YAHOO.util.Config.fireEvent
 * @method fireEvent
 * @private
 * @param {String} key The configuration property's name
 * @param {value} Object The value of the correct type for the property
 */

/**
 * Adds a property to the Config Object's private config hash.
 * @id YAHOO.util.Config.addProperty
 * @method addProperty
 * @param {String} key The configuration property's name
 * @param {Object} propertyObject The Object containing all of this
 * property's arguments
 */

/**
 * Returns a key-value configuration map of the values currently set in
 * the Config Object.
 * @id YAHOO.util.Config.getConfig
 * @method getConfig
 * @return {Object} The current config, represented in a key-value map
 */

/**
 * Returns the value of specified property.
 * @id YAHOO.util.Config.getProperty
 * @method getProperty
 * @param {String} key The name of the property
 * @return {Object}  The value of the specified property
 */

/**
 * Resets the specified property's value to its initial value.
 * @id YAHOO.util.Config.resetProperty
 * @method resetProperty
 * @param {String} key The name of the property
 * @return {Boolean} True is the property was reset, false if not
 */

/**
 * Sets the value of a property. If the silent property is passed as
 * true, the property's event will not be fired.
 * @id YAHOO.util.Config.setProperty
 * @method setProperty
 * @param {String} key The name of the property
 * @param {String} value The value to set the property to
 * @param {Boolean} silent Whether the value should be set silently,
 * without firing the property event.
 * @return {Boolean} True, if the set was successful, false if it failed.
 */

/**
 * Sets the value of a property and queues its event to execute. If the
 * event is already scheduled to execute, it is
 * moved from its current position to the end of the queue.
 * @id YAHOO.util.Config.queueProperty
 * @method queueProperty
 * @param {String} key The name of the property
 * @param {String} value The value to set the property to
 * @return {Boolean}  true, if the set was successful, false if
 * it failed.
 */

/**
 * Fires the event for a property using the property's current value.
 * @id YAHOO.util.Config.refireEvent
 * @method refireEvent
 * @param {String} key The name of the property
 */

/**
 * Applies a key-value Object literal to the configuration, replacing
 * any existing values, and queueing the property events.
 * Although the values will be set, fireQueue() must be called for their
 * associated events to execute.
 * @id YAHOO.util.Config.applyConfig
 * @method applyConfig
 * @param {Object} userConfig The configuration Object literal
 * @param {Boolean} init  When set to true, the initialConfig will
 * be set to the userConfig passed in, so that calling a reset will
 * reset the properties to the passed values.
 */

/**
 * Refires the events for all configuration properties using their
 * current values.
 * @id YAHOO.util.Config.refresh
 * @method refresh
 */

/**
 * Fires the normalized list of queued property change events
 * @id YAHOO.util.Config.fireQueue
 * @method fireQueue
 */

/**
 * Subscribes an external handler to the change event for any
 * given property.
 * @id YAHOO.util.Config.subscribeToConfigEvent
 * @method subscribeToConfigEvent
 * @param {String} key The property name
 * @param {Function} handler The handler function to use subscribe to
 * the property's event
 * @param {Object} obj The Object to use for scoping the event handler
 * (see CustomEvent documentation)
 * @param {Boolean} override Optional. If true, will override "this"
 * within the handler to map to the scope Object passed into the method.
 * @return {Boolean} True, if the subscription was successful,
 * otherwise false.
 */

/**
 * Unsubscribes an external handler from the change event for any
 * given property.
 * @id YAHOO.util.Config.unsubscribeFromConfigEvent
 * @method unsubscribeFromConfigEvent
 * @param {String} key The property name
 * @param {Function} handler The handler function to use subscribe to
 * the property's event
 * @param {Object} obj The Object to use for scoping the event
 * handler (see CustomEvent documentation)
 * @return {Boolean} True, if the unsubscription was successful,
 * otherwise false.
 */

/**
 * Returns a string representation of the Config object
 * @id YAHOO.util.Config.toString
 * @method toString
 * @return {String} The Config object in string format.
 */

/**
 * Returns a string representation of the Config object's current
 * CustomEvent queue
 * @id YAHOO.util.Config.outputEventQueue
 * @method outputEventQueue
 * @return {String} The string list of CustomEvents currently queued
 * for execution
 */

/**
 * Sets all properties to null, unsubscribes all listeners from each
 * property's change event and all listeners from the configChangedEvent.
 * @id YAHOO.util.Config.destroy
 * @method destroy
 */

/**
 * Checks to determine if a particular function/Object pair are already
 * subscribed to the specified CustomEvent
 * @id YAHOO.util.Config.YAHOO.util.Config.alreadySubscribed
 * @method YAHOO.util.Config.alreadySubscribed
 * @static
 * @param {YAHOO.util.CustomEvent} evt The CustomEvent for which to check
 * the subscriptions
 * @param {Function} fn The function to look for in the subscribers list
 * @param {Object} obj The execution scope Object for the subscription
 * @return {Boolean} true, if the function/Object pair is already subscribed
 * to the CustomEvent passed in
 */

/**
 * YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility
 * used for adding, subtracting, and comparing dates.
 * @id YAHOO.widget.DateMath
 * @namespace YAHOO.widget
 * @class DateMath
 */

/**
 * Constant field representing Day
 * @id YAHOO.widget.DateMath.DAY
 * @property DAY
 * @static
 * @final
 * @type String
 */

/**
 * Constant field representing Week
 * @id YAHOO.widget.DateMath.WEEK
 * @property WEEK
 * @static
 * @final
 * @type String
 */

/**
 * Constant field representing Year
 * @id YAHOO.widget.DateMath.YEAR
 * @property YEAR
 * @static
 * @final
 * @type String
 */

/**
 * Constant field representing Month
 * @id YAHOO.widget.DateMath.MONTH
 * @property MONTH
 * @static
 * @final
 * @type String
 */

/**
 * Constant field representing one day, in milliseconds
 * @id YAHOO.widget.DateMath.ONE_DAY_MS
 * @property ONE_DAY_MS
 * @static
 * @final
 * @type Number
 */

/**
 * Adds the specified amount of time to the this instance.
 * @id YAHOO.widget.DateMath.add
 * @method add
 * @param {Date} date	The JavaScript Date object to perform addition on
 * @param {String} field	The field constant to be used for performing addition.
 * @param {Number} amount	The number of units (measured in the field constant) to add to the date.
 * @return {Date} The resulting Date object
 */

/**
 * Private helper method to account for bug in Safari 2 (webkit < 420)
 * when Date.setDate(n) is called with n less than -128 or greater than 127.
 * <p>
 * Fix approach and original findings are available here:
 * http://brianary.blogspot.com/2006/03/safari-date-bug.html
 * </p>
 * @id YAHOO.widget.DateMath._addDays
 * @method _addDays
 * @param {Date} d JavaScript date object
 * @param {Number} nDays The number of days to add to the date object (can be negative)
 * @private
 */

/**
 * Subtracts the specified amount of time from the this instance.
 * @id YAHOO.widget.DateMath.subtract
 * @method subtract
 * @param {Date} date	The JavaScript Date object to perform subtraction on
 * @param {Number} field	The this field constant to be used for performing subtraction.
 * @param {Number} amount	The number of units (measured in the field constant) to subtract from the date.
 * @return {Date} The resulting Date object
 */

/**
 * Determines whether a given date is before another date on the calendar.
 * @id YAHOO.widget.DateMath.before
 * @method before
 * @param {Date} date		The Date object to compare with the compare argument
 * @param {Date} compareTo	The Date object to use for the comparison
 * @return {Boolean} true if the date occurs before the compared date; false if not.
 */

/**
 * Determines whether a given date is after another date on the calendar.
 * @id YAHOO.widget.DateMath.after
 * @method after
 * @param {Date} date		The Date object to compare with the compare argument
 * @param {Date} compareTo	The Date object to use for the comparison
 * @return {Boolean} true if the date occurs after the compared date; false if not.
 */

/**
 * Determines whether a given date is between two other dates on the calendar.
 * @id YAHOO.widget.DateMath.between
 * @method between
 * @param {Date} date		The date to check for
 * @param {Date} dateBegin	The start of the range
 * @param {Date} dateEnd		The end of the range
 * @return {Boolean} true if the date occurs between the compared dates; false if not.
 */

/**
 * Retrieves a JavaScript Date object representing January 1 of any given year.
 * @id YAHOO.widget.DateMath.getJan1
 * @method getJan1
 * @param {Number} calendarYear		The calendar year for which to retrieve January 1
 * @return {Date}	January 1 of the calendar year specified.
 */

/**
 * Calculates the number of days the specified date is from January 1 of the specified calendar year.
 * Passing January 1 to this function would return an offset value of zero.
 * @id YAHOO.widget.DateMath.getDayOffset
 * @method getDayOffset
 * @param {Date}	date	The JavaScript date for which to find the offset
 * @param {Number} calendarYear	The calendar year to use for determining the offset
 * @return {Number}	The number of days since January 1 of the given year
 */

/**
 * Calculates the week number for the given date. This function assumes that week 1 is the
 * week in which January 1 appears, regardless of whether the week consists of a full 7 days.
 * The calendar year can be specified to help find what a the week number would be for a given
 * date if the date overlaps years. For instance, a week may be considered week 1 of 2005, or
 * week 53 of 2004. Specifying the optional calendarYear allows one to make this distinction
 * easily.
 * @id YAHOO.widget.DateMath.getWeekNumber
 * @method getWeekNumber
 * @param {Date}	date	The JavaScript date for which to find the week number
 * @param {Number} calendarYear	OPTIONAL - The calendar year to use for determining the week number. Default is
 *											the calendar year of parameter "date".
 * @return {Number}	The week number of the given date.
 */

/**
 * Determines if a given week overlaps two different years.
 * @id YAHOO.widget.DateMath.isYearOverlapWeek
 * @method isYearOverlapWeek
 * @param {Date}	weekBeginDate	The JavaScript Date representing the first day of the week.
 * @return {Boolean}	true if the date overlaps two different years.
 */

/**
 * Determines if a given week overlaps two different months.
 * @id YAHOO.widget.DateMath.isMonthOverlapWeek
 * @method isMonthOverlapWeek
 * @param {Date}	weekBeginDate	The JavaScript Date representing the first day of the week.
 * @return {Boolean}	true if the date overlaps two different months.
 */

/**
 * Gets the first day of a month containing a given date.
 * @id YAHOO.widget.DateMath.findMonthStart
 * @method findMonthStart
 * @param {Date}	date	The JavaScript Date used to calculate the month start
 * @return {Date}		The JavaScript Date representing the first day of the month
 */

/**
 * Gets the last day of a month containing a given date.
 * @id YAHOO.widget.DateMath.findMonthEnd
 * @method findMonthEnd
 * @param {Date}	date	The JavaScript Date used to calculate the month end
 * @return {Date}		The JavaScript Date representing the last day of the month
 */

/**
 * Clears the time fields from a given date, effectively setting the time to 12 noon.
 * @id YAHOO.widget.DateMath.clearTime
 * @method clearTime
 * @param {Date}	date	The JavaScript Date for which the time fields will be cleared
 * @return {Date}		The JavaScript Date cleared of all time fields
 */

/**
 * Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object
 * are set to 0. The method allows Date instances to be created with the a year less than 100. "new Date(year, month, date)" implementations
 * set the year to 19xx if a year (xx) which is less than 100 is provided.
 * <p>
 * <em>NOTE:</em>Validation on argument values is not performed. It is the caller's responsibility to ensure
 * arguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.
 * </p>
 * @id YAHOO.widget.DateMath.getDate
 * @method getDate
 * @param {Number} y Year.
 * @param {Number} m Month index from 0 (Jan) to 11 (Dec).
 * @param {Number} d (optional) Date from 1 to 31. If not provided, defaults to 1.
 * @return {Date} The JavaScript date object with year, month, date set as provided.
 */

/**
 * Calendar is the base class for the Calendar widget. In its most basic
 * implementation, it has the ability to render a calendar widget on the page
 * that can be manipulated to select a single date, move back and forth between
 * months and years.
 * <p>To construct the placeholder for the calendar widget, the code is as
 * follows:
 *	<xmp>
 *		<div id="calContainer"></div>
 *	</xmp>
 * </p>
 * <p>
 * <strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>
 * The Calendar can be constructed by simply providing a container ID string,
 * or a reference to a container DIV HTMLElement (the element needs to exist
 * in the document).
 *
 * E.g.:
 *	<xmp>
 *		var c = new YAHOO.widget.Calendar("calContainer", configOptions);
 *	</xmp>
 * or:
 *   <xmp>
 *       var containerDiv = YAHOO.util.Dom.get("calContainer");
 *		var c = new YAHOO.widget.Calendar(containerDiv, configOptions);
 *	</xmp>
 * </p>
 * <p>
 * If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
 * For example if an ID is not provided, and the container's ID is "calContainer", the Calendar's ID will be set to "calContainer_t".
 * </p>
 *
 * @id YAHOO.widget.Calendar
 * @namespace YAHOO.widget
 * @class Calendar
 * @constructor
 * @param {String} id optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional.
 * @param {String | HTMLElement} container The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document.
 * @param {Object} config optional The configuration object containing the initial configuration values for the Calendar.
 */

/**
 * The path to be used for images loaded for the Calendar
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.IMG_ROOT
 * @property YAHOO.widget.Calendar.IMG_ROOT
 * @static
 * @deprecated	You can now customize images by overriding the calclose, calnavleft and calnavright default CSS classes for the close icon, left arrow and right arrow respectively
 * @type String
 */

/**
 * Type constant used for renderers to represent an individual date (M/D/Y)
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.DATE
 * @property YAHOO.widget.Calendar.DATE
 * @static
 * @final
 * @type String
 */

/**
 * Type constant used for renderers to represent an individual date across any year (M/D)
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.MONTH_DAY
 * @property YAHOO.widget.Calendar.MONTH_DAY
 * @static
 * @final
 * @type String
 */

/**
 * Type constant used for renderers to represent a weekday
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.WEEKDAY
 * @property YAHOO.widget.Calendar.WEEKDAY
 * @static
 * @final
 * @type String
 */

/**
 * Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.RANGE
 * @property YAHOO.widget.Calendar.RANGE
 * @static
 * @final
 * @type String
 */

/**
 * Type constant used for renderers to represent a month across any year
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.MONTH
 * @property YAHOO.widget.Calendar.MONTH
 * @static
 * @final
 * @type String
 */

/**
 * Constant that represents the total number of date cells that are displayed in a given month
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.DISPLAY_DAYS
 * @property YAHOO.widget.Calendar.DISPLAY_DAYS
 * @static
 * @final
 * @type Number
 */

/**
 * Constant used for halting the execution of the remainder of the render stack
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.STOP_RENDER
 * @property YAHOO.widget.Calendar.STOP_RENDER
 * @static
 * @final
 * @type String
 */

/**
 * Constant used to represent short date field string formats (e.g. Tu or Feb)
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.SHORT
 * @property YAHOO.widget.Calendar.SHORT
 * @static
 * @final
 * @type String
 */

/**
 * Constant used to represent long date field string formats (e.g. Monday or February)
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.LONG
 * @property YAHOO.widget.Calendar.LONG
 * @static
 * @final
 * @type String
 */

/**
 * Constant used to represent medium date field string formats (e.g. Mon)
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.MEDIUM
 * @property YAHOO.widget.Calendar.MEDIUM
 * @static
 * @final
 * @type String
 */

/**
 * Constant used to represent single character date field string formats (e.g. M, T, W)
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar.ONE_CHAR
 * @property YAHOO.widget.Calendar.ONE_CHAR
 * @static
 * @final
 * @type String
 */

/**
 * The set of default Config property keys and values for the Calendar
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar._DEFAULT_CONFIG
 * @property YAHOO.widget.Calendar._DEFAULT_CONFIG
 * @final
 * @static
 * @private
 * @type Object
 */

/**
 * The set of Custom Event types supported by the Calendar
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar._EVENT_TYPES
 * @property YAHOO.widget.Calendar._EVENT_TYPES
 * @final
 * @static
 * @private
 * @type Object
 */

/**
 * The set of default style constants for the Calendar
 * @id YAHOO.widget.Calendar.YAHOO.widget.Calendar._STYLES
 * @property YAHOO.widget.Calendar._STYLES
 * @final
 * @static
 * @private
 * @type Object
 */

/**
 * The configuration object used to set up the calendars various locale and style options.
 * @id YAHOO.widget.Calendar.Config
 * @property Config
 * @private
 * @deprecated Configuration properties should be set by calling Calendar.cfg.setProperty.
 * @type Object
 */

/**
 * The parent CalendarGroup, only to be set explicitly by the parent group
 * @id YAHOO.widget.Calendar.parent
 * @property parent
 * @type CalendarGroup
 */

/**
 * The index of this item in the parent group
 * @id YAHOO.widget.Calendar.index
 * @property index
 * @type Number
 */

/**
 * The collection of calendar table cells
 * @id YAHOO.widget.Calendar.cells
 * @property cells
 * @type HTMLTableCellElement[]
 */

/**
 * The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D].
 * @id YAHOO.widget.Calendar.cellDates
 * @property cellDates
 * @type Array[](Number[])
 */

/**
 * The id that uniquely identifies this Calendar.
 * @id YAHOO.widget.Calendar.id
 * @property id
 * @type String
 */

/**
 * The unique id associated with the Calendar's container
 * @id YAHOO.widget.Calendar.containerId
 * @property containerId
 * @type String
 */

/**
 * The DOM element reference that points to this calendar's container element. The calendar will be inserted into this element when the shell is rendered.
 * @id YAHOO.widget.Calendar.oDomContainer
 * @property oDomContainer
 * @type HTMLElement
 */

/**
 * A Date object representing today's date.
 * @id YAHOO.widget.Calendar.today
 * @property today
 * @type Date
 */

/**
 * The list of render functions, along with required parameters, used to render cells.
 * @id YAHOO.widget.Calendar.renderStack
 * @property renderStack
 * @type Array[]
 */

/**
 * A copy of the initial render functions created before rendering.
 * @id YAHOO.widget.Calendar._renderStack
 * @property _renderStack
 * @private
 * @type Array
 */

/**
 * A reference to the CalendarNavigator instance created for this Calendar.
 * Will be null if the "navigator" configuration property has not been set
 * @id YAHOO.widget.Calendar.oNavigator
 * @property oNavigator
 * @type CalendarNavigator
 */

/**
 * The private list of initially selected dates.
 * @id YAHOO.widget.Calendar._selectedDates
 * @property _selectedDates
 * @private
 * @type Array
 */

/**
 * A map of DOM event handlers to attach to cells associated with specific CSS class names
 * @id YAHOO.widget.Calendar.domEventMap
 * @property domEventMap
 * @type Object
 */

/**
 * Protected helper used to parse Calendar constructor/init arguments.
 *
 * As of 2.4.0, Calendar supports a simpler constructor
 * signature. This method reconciles arguments
 * received in the pre 2.4.0 and 2.4.0 formats.
 *
 * @id YAHOO.widget.Calendar._parseArgs
 * @protected
 * @method _parseArgs
 * @param {Array} Function "arguments" array
 * @return {Object} Object with id, container, config properties containing
 * the reconciled argument values.
 **/

/**
 * Initializes the Calendar widget.
 * @id YAHOO.widget.Calendar.init
 * @method init
 *
 * @param {String} id optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional.
 * @param {String | HTMLElement} container The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document.
 * @param {Object} config optional The configuration object containing the initial configuration values for the Calendar.
 */

/**
 * The Config object used to hold the configuration variables for the Calendar
 * @id YAHOO.widget.Calendar.cfg
 * @property cfg
 * @type YAHOO.util.Config
 */

/**
 * The local object which contains the Calendar's options
 * @id YAHOO.widget.Calendar.Options
 * @property Options
 * @type Object
 */

/**
 * The local object which contains the Calendar's locale settings
 * @id YAHOO.widget.Calendar.Locale
 * @property Locale
 * @type Object
 */

/**
 * Default Config listener for the iframe property. If the iframe config property is set to true,
 * renders the built-in IFRAME shim if the container is relatively or absolutely positioned.
 *
 * @id YAHOO.widget.Calendar.configIframe
 * @method configIframe
 */

/**
 * Default handler for the "title" property
 * @id YAHOO.widget.Calendar.configTitle
 * @method configTitle
 */

/**
 * Default handler for the "close" property
 * @id YAHOO.widget.Calendar.configClose
 * @method configClose
 */

/**
 * Initializes Calendar's built-in CustomEvents
 * @id YAHOO.widget.Calendar.initEvents
 * @method initEvents
 */

/**
 * Fired before a selection is made
 * @id YAHOO.widget.Calendar.beforeSelectEvent
 * @event beforeSelectEvent
 */

/**
 * Fired when a selection is made
 * @id YAHOO.widget.Calendar.selectEvent
 * @event selectEvent
 * @param {Array}	Array of Date field arrays in the format [YYYY, MM, DD].
 */

/**
 * Fired before a selection is made
 * @id YAHOO.widget.Calendar.beforeDeselectEvent
 * @event beforeDeselectEvent
 */

/**
 * Fired when a selection is made
 * @id YAHOO.widget.Calendar.deselectEvent
 * @event deselectEvent
 * @param {Array}	Array of Date field arrays in the format [YYYY, MM, DD].
 */

/**
 * Fired when the Calendar page is changed
 * @id YAHOO.widget.Calendar.changePageEvent
 * @event changePageEvent
 */

/**
 * Fired before the Calendar is rendered
 * @id YAHOO.widget.Calendar.beforeRenderEvent
 * @event beforeRenderEvent
 */

/**
 * Fired when the Calendar is rendered
 * @id YAHOO.widget.Calendar.renderEvent
 * @event renderEvent
 */

/**
 * Fired when the Calendar is reset
 * @id YAHOO.widget.Calendar.resetEvent
 * @event resetEvent
 */

/**
 * Fired when the Calendar is cleared
 * @id YAHOO.widget.Calendar.clearEvent
 * @event clearEvent
 */

/**
 * Fired just before the Calendar is to be shown
 * @id YAHOO.widget.Calendar.beforeShowEvent
 * @event beforeShowEvent
 */

/**
 * Fired after the Calendar is shown
 * @id YAHOO.widget.Calendar.showEvent
 * @event showEvent
 */

/**
 * Fired just before the Calendar is to be hidden
 * @id YAHOO.widget.Calendar.beforeHideEvent
 * @event beforeHideEvent
 */

/**
 * Fired after the Calendar is hidden
 * @id YAHOO.widget.Calendar.hideEvent
 * @event hideEvent
 */

/**
 * Fired just before the CalendarNavigator is to be shown
 * @id YAHOO.widget.Calendar.beforeShowNavEvent
 * @event beforeShowNavEvent
 */

/**
 * Fired after the CalendarNavigator is shown
 * @id YAHOO.widget.Calendar.showNavEvent
 * @event showNavEvent
 */

/**
 * Fired just before the CalendarNavigator is to be hidden
 * @id YAHOO.widget.Calendar.beforeHideNavEvent
 * @event beforeHideNavEvent
 */

/**
 * Fired after the CalendarNavigator is hidden
 * @id YAHOO.widget.Calendar.hideNavEvent
 * @event hideNavEvent
 */

/**
 * Fired just before the CalendarNavigator is to be rendered
 * @id YAHOO.widget.Calendar.beforeRenderNavEvent
 * @event beforeRenderNavEvent
 */

/**
 * Fired after the CalendarNavigator is rendered
 * @id YAHOO.widget.Calendar.renderNavEvent
 * @event renderNavEvent
 */

/**
 * The default event function that is attached to a date link within a calendar cell
 * when the calendar is rendered.
 * @id YAHOO.widget.Calendar.doSelectCell
 * @method doSelectCell
 * @param {DOMEvent} e	The event
 * @param {Calendar} cal	A reference to the calendar passed by the Event utility
 */

/**
 * The event that is executed when the user hovers over a cell
 * @id YAHOO.widget.Calendar.doCellMouseOver
 * @method doCellMouseOver
 * @param {DOMEvent} e	The event
 * @param {Calendar} cal	A reference to the calendar passed by the Event utility
 */

/**
 * The event that is executed when the user moves the mouse out of a cell
 * @id YAHOO.widget.Calendar.doCellMouseOut
 * @method doCellMouseOut
 * @param {DOMEvent} e	The event
 * @param {Calendar} cal	A reference to the calendar passed by the Event utility
 */

/**
 * The month/year representing the current visible Calendar date (mm/yyyy)
 * @id YAHOO.widget.Calendar.pagedate
 * @config pagedate
 * @type String
 * @default today's date
 */

/**
 * The date or range of dates representing the current Calendar selection
 * @id YAHOO.widget.Calendar.selected
 * @config selected
 * @type String
 * @default []
 */

/**
 * The title to display above the Calendar's month header
 * @id YAHOO.widget.Calendar.title
 * @config title
 * @type String
 * @default ""
 */

/**
 * Whether or not a close button should be displayed for this Calendar
 * @id YAHOO.widget.Calendar.close
 * @config close
 * @type Boolean
 * @default false
 */

/**
 * Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.
 * This property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be
 * enabled if required.
 *
 * @id YAHOO.widget.Calendar.iframe
 * @config iframe
 * @type Boolean
 * @default true for IE6 and below, false for all other browsers
 */

/**
 * The minimum selectable date in the current Calendar (mm/dd/yyyy)
 * @id YAHOO.widget.Calendar.mindate
 * @config mindate
 * @type String
 * @default null
 */

/**
 * The maximum selectable date in the current Calendar (mm/dd/yyyy)
 * @id YAHOO.widget.Calendar.maxdate
 * @config maxdate
 * @type String
 * @default null
 */

/**
 * True if the Calendar should allow multiple selections. False by default.
 * @id YAHOO.widget.Calendar.MULTI_SELECT
 * @config MULTI_SELECT
 * @type Boolean
 * @default false
 */

/**
 * The weekday the week begins on. Default is 0 (Sunday).
 * @id YAHOO.widget.Calendar.START_WEEKDAY
 * @config START_WEEKDAY
 * @type number
 * @default 0
 */

/**
 * True if the Calendar should show weekday labels. True by default.
 * @id YAHOO.widget.Calendar.SHOW_WEEKDAYS
 * @config SHOW_WEEKDAYS
 * @type Boolean
 * @default true
 */

/**
 * True if the Calendar should show week row headers. False by default.
 * @id YAHOO.widget.Calendar.SHOW_WEEK_HEADER
 * @config SHOW_WEEK_HEADER
 * @type Boolean
 * @default false
 */

/**
 * True if the Calendar should show week row footers. False by default.
 * @id YAHOO.widget.Calendar.SHOW_WEEK_FOOTER
 * @config SHOW_WEEK_FOOTER
 * @type Boolean
 * @default false
 */

/**
 * True if the Calendar should suppress weeks that are not a part of the current month. False by default.
 * @id YAHOO.widget.Calendar.HIDE_BLANK_WEEKS
 * @config HIDE_BLANK_WEEKS
 * @type Boolean
 * @default false
 */

/**
 * The image that should be used for the left navigation arrow.
 * @id YAHOO.widget.Calendar.NAV_ARROW_LEFT
 * @config NAV_ARROW_LEFT
 * @type String
 * @deprecated	You can customize the image by overriding the default CSS class for the left arrow - "calnavleft"
 * @default null
 */

/**
 * The image that should be used for the right navigation arrow.
 * @id YAHOO.widget.Calendar.NAV_ARROW_RIGHT
 * @config NAV_ARROW_RIGHT
 * @type String
 * @deprecated	You can customize the image by overriding the default CSS class for the right arrow - "calnavright"
 * @default null
 */

/**
 * The short month labels for the current locale.
 * @id YAHOO.widget.Calendar.MONTHS_SHORT
 * @config MONTHS_SHORT
 * @type String[]
 * @default ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
 */

/**
 * The long month labels for the current locale.
 * @id YAHOO.widget.Calendar.MONTHS_LONG
 * @config MONTHS_LONG
 * @type String[]
 * @default ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
 */

/**
 * The 1-character weekday labels for the current locale.
 * @id YAHOO.widget.Calendar.WEEKDAYS_1CHAR
 * @config WEEKDAYS_1CHAR
 * @type String[]
 * @default ["S", "M", "T", "W", "T", "F", "S"]
 */

/**
 * The short weekday labels for the current locale.
 * @id YAHOO.widget.Calendar.WEEKDAYS_SHORT
 * @config WEEKDAYS_SHORT
 * @type String[]
 * @default ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
 */

/**
 * The medium weekday labels for the current locale.
 * @id YAHOO.widget.Calendar.WEEKDAYS_MEDIUM
 * @config WEEKDAYS_MEDIUM
 * @type String[]
 * @default ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
 */

/**
 * The long weekday labels for the current locale.
 * @id YAHOO.widget.Calendar.WEEKDAYS_LONG
 * @config WEEKDAYS_LONG
 * @type String[]
 * @default ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
 */

/**
 * Refreshes the locale values used to build the Calendar.
 * @id YAHOO.widget.Calendar.refreshLocale
 * @method refreshLocale
 * @private
 */

/**
 * The setting that determines which length of month labels should be used. Possible values are "short" and "long".
 * @id YAHOO.widget.Calendar.LOCALE_MONTHS
 * @config LOCALE_MONTHS
 * @type String
 * @default "long"
 */

/**
 * The setting that determines which length of weekday labels should be used. Possible values are "1char", "short", "medium", and "long".
 * @id YAHOO.widget.Calendar.LOCALE_WEEKDAYS
 * @config LOCALE_WEEKDAYS
 * @type String
 * @default "short"
 */

/**
 * The value used to delimit individual dates in a date string passed to various Calendar functions.
 * @id YAHOO.widget.Calendar.DATE_DELIMITER
 * @config DATE_DELIMITER
 * @type String
 * @default ","
 */

/**
 * The value used to delimit date fields in a date string passed to various Calendar functions.
 * @id YAHOO.widget.Calendar.DATE_FIELD_DELIMITER
 * @config DATE_FIELD_DELIMITER
 * @type String
 * @default "/"
 */

/**
 * The value used to delimit date ranges in a date string passed to various Calendar functions.
 * @id YAHOO.widget.Calendar.DATE_RANGE_DELIMITER
 * @config DATE_RANGE_DELIMITER
 * @type String
 * @default "-"
 */

/**
 * The position of the month in a month/year date string
 * @id YAHOO.widget.Calendar.MY_MONTH_POSITION
 * @config MY_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the year in a month/year date string
 * @id YAHOO.widget.Calendar.MY_YEAR_POSITION
 * @config MY_YEAR_POSITION
 * @type Number
 * @default 2
 */

/**
 * The position of the month in a month/day date string
 * @id YAHOO.widget.Calendar.MD_MONTH_POSITION
 * @config MD_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the day in a month/year date string
 * @id YAHOO.widget.Calendar.MD_DAY_POSITION
 * @config MD_DAY_POSITION
 * @type Number
 * @default 2
 */

/**
 * The position of the month in a month/day/year date string
 * @id YAHOO.widget.Calendar.MDY_MONTH_POSITION
 * @config MDY_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the day in a month/day/year date string
 * @id YAHOO.widget.Calendar.MDY_DAY_POSITION
 * @config MDY_DAY_POSITION
 * @type Number
 * @default 2
 */

/**
 * The position of the year in a month/day/year date string
 * @id YAHOO.widget.Calendar.MDY_YEAR_POSITION
 * @config MDY_YEAR_POSITION
 * @type Number
 * @default 3
 */

/**
 * The position of the month in the month year label string used as the Calendar header
 * @id YAHOO.widget.Calendar.MY_LABEL_MONTH_POSITION
 * @config MY_LABEL_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the year in the month year label string used as the Calendar header
 * @id YAHOO.widget.Calendar.MY_LABEL_YEAR_POSITION
 * @config MY_LABEL_YEAR_POSITION
 * @type Number
 * @default 2
 */

/**
 * The suffix used after the month when rendering the Calendar header
 * @id YAHOO.widget.Calendar.MY_LABEL_MONTH_SUFFIX
 * @config MY_LABEL_MONTH_SUFFIX
 * @type String
 * @default " "
 */

/**
 * The suffix used after the year when rendering the Calendar header
 * @id YAHOO.widget.Calendar.MY_LABEL_YEAR_SUFFIX
 * @config MY_LABEL_YEAR_SUFFIX
 * @type String
 * @default ""
 */

/**
 * Configuration for the Month/Year CalendarNavigator UI which allows the user to jump directly to a
 * specific Month/Year without having to scroll sequentially through months.
 * <p>
 * Setting this property to null (default value) or false, will disable the CalendarNavigator UI.
 * </p>
 * <p>
 * Setting this property to true will enable the CalendarNavigatior UI with the default CalendarNavigator configuration values.
 * </p>
 * <p>
 * This property can also be set to an object literal containing configuration properties for the CalendarNavigator UI.
 * The configuration object expects the the following case-sensitive properties, with the "strings" property being a nested object.
 * Any properties which are not provided will use the default values (defined in the CalendarNavigator class).
 * </p>
 * <dl>
 * <dt>strings</dt>
 * <dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI
 *     <dl>
 *         <dt>month</dt><dd><em>String</em> : The string to use for the month label. Defaults to "Month".</dd>
 *         <dt>year</dt><dd><em>String</em> : The string to use for the year label. Defaults to "Year".</dd>
 *         <dt>submit</dt><dd><em>String</em> : The string to use for the submit button label. Defaults to "Okay".</dd>
 *         <dt>cancel</dt><dd><em>String</em> : The string to use for the cancel button label. Defaults to "Cancel".</dd>
 *         <dt>invalidYear</dt><dd><em>String</em> : The string to use for invalid year values. Defaults to "Year needs to be a number".</dd>
 *     </dl>
 * </dd>
 * <dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>
 * <dt>initialFocus</dt><dd><em>String</em> : Either "year" or "month" specifying which input control should get initial focus. Defaults to "year"</dd>
 * </dl>
 * <p>E.g.</p>
 * <pre>
 * var navConfig = {
 *	  strings: {
 *		  month:"Calendar Month",
 *		  year:"Calendar Year",
 *		  submit: "Submit",
 *		  cancel: "Cancel",
 *		  invalidYear: "Please enter a valid year"
 *	  },
 *	  monthFormat: YAHOO.widget.Calendar.SHORT,
 *	  initialFocus: "month"
 * }
 * </pre>
 * @id YAHOO.widget.Calendar.navigator
 * @config navigator
 * @type {Object|Boolean}
 * @default null
 */

/**
 * The default handler for the "pagedate" property
 * @id YAHOO.widget.Calendar.configPageDate
 * @method configPageDate
 */

/**
 * The default handler for the "mindate" property
 * @id YAHOO.widget.Calendar.configMinDate
 * @method configMinDate
 */

/**
 * The default handler for the "maxdate" property
 * @id YAHOO.widget.Calendar.configMaxDate
 * @method configMaxDate
 */

/**
 * The default handler for the "selected" property
 * @id YAHOO.widget.Calendar.configSelected
 * @method configSelected
 */

/**
 * The default handler for all configuration options properties
 * @id YAHOO.widget.Calendar.configOptions
 * @method configOptions
 */

/**
 * The default handler for all configuration locale properties
 * @id YAHOO.widget.Calendar.configLocale
 * @method configLocale
 */

/**
 * The default handler for all configuration locale field length properties
 * @id YAHOO.widget.Calendar.configLocaleValues
 * @method configLocaleValues
 */

/**
 * The default handler for the "navigator" property
 * @id YAHOO.widget.Calendar.configNavigator
 * @method configNavigator
 */

/**
 * Defines the style constants for the Calendar
 * @id YAHOO.widget.Calendar.initStyles
 * @method initStyles
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_ROW_HEADER
 * @property Style.CSS_ROW_HEADER
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_ROW_FOOTER
 * @property Style.CSS_ROW_FOOTER
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL
 * @property Style.CSS_CELL
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_SELECTOR
 * @property Style.CSS_CELL_SELECTOR
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_SELECTED
 * @property Style.CSS_CELL_SELECTED
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_SELECTABLE
 * @property Style.CSS_CELL_SELECTABLE
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_RESTRICTED
 * @property Style.CSS_CELL_RESTRICTED
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_TODAY
 * @property Style.CSS_CELL_TODAY
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_OOM
 * @property Style.CSS_CELL_OOM
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_OOB
 * @property Style.CSS_CELL_OOB
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_HEADER
 * @property Style.CSS_HEADER
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_HEADER_TEXT
 * @property Style.CSS_HEADER_TEXT
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_BODY
 * @property Style.CSS_BODY
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_WEEKDAY_CELL
 * @property Style.CSS_WEEKDAY_CELL
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_WEEKDAY_ROW
 * @property Style.CSS_WEEKDAY_ROW
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_FOOTER
 * @property Style.CSS_FOOTER
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CALENDAR
 * @property Style.CSS_CALENDAR
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_SINGLE
 * @property Style.CSS_SINGLE
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CONTAINER
 * @property Style.CSS_CONTAINER
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_NAV_LEFT
 * @property Style.CSS_NAV_LEFT
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_NAV_RIGHT
 * @property Style.CSS_NAV_RIGHT
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_NAV
 * @property Style.CSS_NAV
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CLOSE
 * @property Style.CSS_CLOSE
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_TOP
 * @property Style.CSS_CELL_TOP
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_LEFT
 * @property Style.CSS_CELL_LEFT
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_RIGHT
 * @property Style.CSS_CELL_RIGHT
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_BOTTOM
 * @property Style.CSS_CELL_BOTTOM
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_HOVER
 * @property Style.CSS_CELL_HOVER
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_HIGHLIGHT1
 * @property Style.CSS_CELL_HIGHLIGHT1
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_HIGHLIGHT2
 * @property Style.CSS_CELL_HIGHLIGHT2
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_HIGHLIGHT3
 * @property Style.CSS_CELL_HIGHLIGHT3
 */

/**
 * @id YAHOO.widget.Calendar.Style.CSS_CELL_HIGHLIGHT4
 * @property Style.CSS_CELL_HIGHLIGHT4
 */

/**
 * Builds the date label that will be displayed in the calendar header or
 * footer, depending on configuration.
 * @id YAHOO.widget.Calendar.buildMonthLabel
 * @method buildMonthLabel
 * @return	{String}	The formatted calendar month label
 */

/**
 * Builds the date digit that will be displayed in calendar cells
 * @id YAHOO.widget.Calendar.buildDayLabel
 * @method buildDayLabel
 * @param {Date}	workingDate	The current working date
 * @return	{String}	The formatted day label
 */

/**
 * Creates the title bar element and adds it to Calendar container DIV
 *
 * @id YAHOO.widget.Calendar.createTitleBar
 * @method createTitleBar
 * @param {String} strTitle The title to display in the title bar
 * @return The title bar element
 */

/**
 * Removes the title bar element from the DOM
 *
 * @id YAHOO.widget.Calendar.removeTitleBar
 * @method removeTitleBar
 */

/**
 * Creates the close button HTML element and adds it to Calendar container DIV
 *
 * @id YAHOO.widget.Calendar.createCloseButton
 * @method createCloseButton
 * @return The close HTML element created
 */

/**
 * Removes the close button HTML element from the DOM
 *
 * @id YAHOO.widget.Calendar.removeCloseButton
 * @method removeCloseButton
 */

/**
 * Renders the calendar header.
 * @id YAHOO.widget.Calendar.renderHeader
 * @method renderHeader
 * @param {Array}	html	The current working HTML array
 * @return {Array} The current working HTML array
 */

/**
 * Renders the Calendar's weekday headers.
 * @id YAHOO.widget.Calendar.buildWeekdays
 * @method buildWeekdays
 * @param {Array}	html	The current working HTML array
 * @return {Array} The current working HTML array
 */

/**
 * Renders the calendar body.
 * @id YAHOO.widget.Calendar.renderBody
 * @method renderBody
 * @param {Date}	workingDate	The current working Date being used for the render process
 * @param {Array}	html	The current working HTML array
 * @return {Array} The current working HTML array
 */

/**
 * Renders the calendar footer. In the default implementation, there is
 * no footer.
 * @id YAHOO.widget.Calendar.renderFooter
 * @method renderFooter
 * @param {Array}	html	The current working HTML array
 * @return {Array} The current working HTML array
 */

/**
 * Renders the calendar after it has been configured. The render() method has a specific call chain that will execute
 * when the method is called: renderHeader, renderBody, renderFooter.
 * Refer to the documentation for those methods for information on
 * individual render tasks.
 * @id YAHOO.widget.Calendar.render
 * @method render
 */

/**
 * Applies the Calendar's DOM listeners to applicable elements.
 * @id YAHOO.widget.Calendar.applyListeners
 * @method applyListeners
 */

/**
 * Retrieves the Date object for the specified Calendar cell
 * @id YAHOO.widget.Calendar.getDateByCellId
 * @method getDateByCellId
 * @param {String}	id	The id of the cell
 * @return {Date} The Date object for the specified Calendar cell
 */

/**
 * Retrieves the Date object for the specified Calendar cell
 * @id YAHOO.widget.Calendar.getDateFieldsByCellId
 * @method getDateFieldsByCellId
 * @param {String}	id	The id of the cell
 * @return {Array}	The array of Date fields for the specified Calendar cell
 */

/**
 * Find the Calendar's cell index for a given date.
 * If the date is not found, the method returns -1.
 * <p>
 * The returned index can be used to lookup the cell HTMLElement
 * using the Calendar's cells array or passed to selectCell to select
 * cells by index.
 * </p>
 *
 * See cells, selectCell.
 *
 * @id YAHOO.widget.Calendar.getCellIndex
 * @method getCellIndex
 * @param {Date} date JavaScript Date object, for which to find a cell index.
 * @return {Number} The index of the date in Calendars cellDates/cells arrays, or -1 if the date
 * is not on the curently rendered Calendar page.
 */

/**
 * Renders a cell that falls before the minimum date or after the maximum date.
 * widget class.
 * @id YAHOO.widget.Calendar.renderOutOfBoundsDate
 * @method renderOutOfBoundsDate
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
 *			should not be terminated
 */

/**
 * Renders the row header for a week.
 * @id YAHOO.widget.Calendar.renderRowHeader
 * @method renderRowHeader
 * @param {Number}	weekNum	The week number of the current row
 * @param {Array}	cell	The current working HTML array
 */

/**
 * Renders the row footer for a week.
 * @id YAHOO.widget.Calendar.renderRowFooter
 * @method renderRowFooter
 * @param {Number}	weekNum	The week number of the current row
 * @param {Array}	cell	The current working HTML array
 */

/**
 * Renders a single standard calendar cell in the calendar widget table.
 * All logic for determining how a standard default cell will be rendered is
 * encapsulated in this method, and must be accounted for when extending the
 * widget class.
 * @id YAHOO.widget.Calendar.renderCellDefault
 * @method renderCellDefault
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 */

/**
 * Styles a selectable cell.
 * @id YAHOO.widget.Calendar.styleCellDefault
 * @method styleCellDefault
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 */

/**
 * Renders a single standard calendar cell using the CSS hightlight1 style
 * @id YAHOO.widget.Calendar.renderCellStyleHighlight1
 * @method renderCellStyleHighlight1
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 */

/**
 * Renders a single standard calendar cell using the CSS hightlight2 style
 * @id YAHOO.widget.Calendar.renderCellStyleHighlight2
 * @method renderCellStyleHighlight2
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 */

/**
 * Renders a single standard calendar cell using the CSS hightlight3 style
 * @id YAHOO.widget.Calendar.renderCellStyleHighlight3
 * @method renderCellStyleHighlight3
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 */

/**
 * Renders a single standard calendar cell using the CSS hightlight4 style
 * @id YAHOO.widget.Calendar.renderCellStyleHighlight4
 * @method renderCellStyleHighlight4
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 */

/**
 * Applies the default style used for rendering today's date to the current calendar cell
 * @id YAHOO.widget.Calendar.renderCellStyleToday
 * @method renderCellStyleToday
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 */

/**
 * Applies the default style used for rendering selected dates to the current calendar cell
 * @id YAHOO.widget.Calendar.renderCellStyleSelected
 * @method renderCellStyleSelected
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
 *			should not be terminated
 */

/**
 * Applies the default style used for rendering dates that are not a part of the current
 * month (preceding or trailing the cells for the current month)
 * @id YAHOO.widget.Calendar.renderCellNotThisMonth
 * @method renderCellNotThisMonth
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
 *			should not be terminated
 */

/**
 * Renders the current calendar cell as a non-selectable "black-out" date using the default
 * restricted style.
 * @id YAHOO.widget.Calendar.renderBodyCellRestricted
 * @method renderBodyCellRestricted
 * @param {Date}					workingDate		The current working Date object being used to generate the calendar
 * @param {HTMLTableCellElement}	cell			The current working cell in the calendar
 * @return {String} YAHOO.widget.Calendar.STOP_RENDER if rendering should stop with this style, null or nothing if rendering
 *			should not be terminated
 */

/**
 * Adds the designated number of months to the current calendar month, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.Calendar.addMonths
 * @method addMonths
 * @param {Number}	count	The number of months to add to the current calendar
 */

/**
 * Subtracts the designated number of months from the current calendar month, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.Calendar.subtractMonths
 * @method subtractMonths
 * @param {Number}	count	The number of months to subtract from the current calendar
 */

/**
 * Adds the designated number of years to the current calendar, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.Calendar.addYears
 * @method addYears
 * @param {Number}	count	The number of years to add to the current calendar
 */

/**
 * Subtcats the designated number of years from the current calendar, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.Calendar.subtractYears
 * @method subtractYears
 * @param {Number}	count	The number of years to subtract from the current calendar
 */

/**
 * Navigates to the next month page in the calendar widget.
 * @id YAHOO.widget.Calendar.nextMonth
 * @method nextMonth
 */

/**
 * Navigates to the previous month page in the calendar widget.
 * @id YAHOO.widget.Calendar.previousMonth
 * @method previousMonth
 */

/**
 * Navigates to the next year in the currently selected month in the calendar widget.
 * @id YAHOO.widget.Calendar.nextYear
 * @method nextYear
 */

/**
 * Navigates to the previous year in the currently selected month in the calendar widget.
 * @id YAHOO.widget.Calendar.previousYear
 * @method previousYear
 */

/**
 * Resets the calendar widget to the originally selected month and year, and
 * sets the calendar to the initial selection(s).
 * @id YAHOO.widget.Calendar.reset
 * @method reset
 */

/**
 * Clears the selected dates in the current calendar widget and sets the calendar
 * to the current month and year.
 * @id YAHOO.widget.Calendar.clear
 * @method clear
 */

/**
 * Selects a date or a collection of dates on the current calendar. This method, by default,
 * does not call the render method explicitly. Once selection has completed, render must be
 * called for the changes to be reflected visually.
 *
 * Any dates which are OOB (out of bounds, not selectable) will not be selected and the array of
 * selected dates passed to the selectEvent will not contain OOB dates.
 *
 * If all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.
 *
 * @id YAHOO.widget.Calendar.select
 * @method select
 * @param	{String/Date/Date[]}	date	The date string of dates to select in the current calendar. Valid formats are
 *								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).
 *								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).
 *								This method can also take a JavaScript Date object or an array of Date objects.
 * @return	{Date[]}			Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Selects a date on the current calendar by referencing the index of the cell that should be selected.
 * This method is used to easily select a single cell (usually with a mouse click) without having to do
 * a full render. The selected style is applied to the cell directly.
 *
 * If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month
 * or out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.
 *
 * @id YAHOO.widget.Calendar.selectCell
 * @method selectCell
 * @param	{Number}	cellIndex	The index of the cell to select in the current calendar.
 * @return	{Date[]}	Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Deselects a date or a collection of dates on the current calendar. This method, by default,
 * does not call the render method explicitly. Once deselection has completed, render must be
 * called for the changes to be reflected visually.
 *
 * The method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable)
 * and the array of deselected dates passed to the deselectEvent will not contain any OOB dates.
 *
 * If all dates are OOB, beforeDeselect and deselect events will not be fired.
 *
 * @id YAHOO.widget.Calendar.deselect
 * @method deselect
 * @param	{String/Date/Date[]}	date	The date string of dates to deselect in the current calendar. Valid formats are
 *								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).
 *								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).
 *								This method can also take a JavaScript Date object or an array of Date objects.
 * @return	{Date[]}			Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Deselects a date on the current calendar by referencing the index of the cell that should be deselected.
 * This method is used to easily deselect a single cell (usually with a mouse click) without having to do
 * a full render. The selected style is removed from the cell directly.
 *
 * If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month
 * or out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and
 * deselect events will not be fired.
 *
 * @id YAHOO.widget.Calendar.deselectCell
 * @method deselectCell
 * @param	{Number}	cellIndex	The index of the cell to deselect in the current calendar.
 * @return	{Date[]}	Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Deselects all dates on the current calendar.
 * @id YAHOO.widget.Calendar.deselectAll
 * @method deselectAll
 * @return {Date[]}		Array of JavaScript Date objects representing all individual dates that are currently selected.
 *						Assuming that this function executes properly, the return value should be an empty array.
 *						However, the empty array is returned for the sake of being able to check the selection status
 *						of the calendar.
 */

/**
 * Converts a date (either a JavaScript Date object, or a date string) to the internal data structure
 * used to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]].
 * @id YAHOO.widget.Calendar._toFieldArray
 * @method _toFieldArray
 * @private
 * @param	{String/Date/Date[]}	date	The date string of dates to deselect in the current calendar. Valid formats are
 *								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).
 *								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).
 *								This method can also take a JavaScript Date object or an array of Date objects.
 * @return {Array[](Number[])}	Array of date field arrays
 */

/**
 * Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array
 * is the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.
 *
 * @id YAHOO.widget.Calendar.toDate
 * @method toDate
 * @param	{Number[]}	dateFieldArray	The date field array to convert to a JavaScript Date.
 * @return	{Date}	JavaScript Date object representing the date field array.
 */

/**
 * Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.
 * @id YAHOO.widget.Calendar._toDate
 * @method _toDate
 * @private
 * @deprecated Made public, toDate
 * @param	{Number[]}		dateFieldArray	The date field array to convert to a JavaScript Date.
 * @return	{Date}	JavaScript Date object representing the date field array
 */

/**
 * Converts a date field array [yyyy,mm,dd] to a JavaScript Date object.
 * @id YAHOO.widget.Calendar._fieldArraysAreEqual
 * @method _fieldArraysAreEqual
 * @private
 * @param	{Number[]}	array1	The first date field array to compare
 * @param	{Number[]}	array2	The first date field array to compare
 * @return	{Boolean}	The boolean that represents the equality of the two arrays
 */

/**
 * Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates.
 * @id YAHOO.widget.Calendar._indexOfSelectedFieldArray
 * @method	_indexOfSelectedFieldArray
 * @private
 * @param	{Number[]}		find	The date field array to search for
 * @return	{Number}			The index of the date field array within the collection of selected dates.
 *								-1 will be returned if the date is not found.
 */

/**
 * Determines whether a given date is OOM (out of month).
 * @id YAHOO.widget.Calendar.isDateOOM
 * @method	isDateOOM
 * @param	{Date}	date	The JavaScript Date object for which to check the OOM status
 * @return	{Boolean}	true if the date is OOM
 */

/**
 * Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate).
 *
 * @id YAHOO.widget.Calendar.isDateOOB
 * @method	isDateOOB
 * @param	{Date}	date	The JavaScript Date object for which to check the OOB status
 * @return	{Boolean}	true if the date is OOB
 */

/**
 * Parses a pagedate configuration property value. The value can either be specified as a string of form "mm/yyyy" or a Date object
 * and is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today's date are used to create the Date object
 * @id YAHOO.widget.Calendar._parsePageDate
 * @method	_parsePageDate
 * @private
 * @param {Date|String}	date	Pagedate value which needs to be parsed
 * @return {Date}	The Date object representing the pagedate
 */

/**
 * Event executed before a date is selected in the calendar widget.
 * @id YAHOO.widget.Calendar.onBeforeSelect
 * @deprecated Event handlers for this event should be susbcribed to beforeSelectEvent.
 * @event onBeforeSelect
 */

/**
 * Event executed when a date is selected in the calendar widget.
 * @id YAHOO.widget.Calendar.onSelect
 * @param	{Array}	selected	An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]
 * @deprecated Event handlers for this event should be susbcribed to selectEvent.
 * @event onSelect
 */

/**
 * Event executed before a date is deselected in the calendar widget.
 * @id YAHOO.widget.Calendar.onBeforeDeselect
 * @deprecated Event handlers for this event should be susbcribed to beforeDeselectEvent.
 * @event onBeforeDeselect
 */

/**
 * Event executed when a date is deselected in the calendar widget.
 * @id YAHOO.widget.Calendar.onDeselect
 * @param	{Array}	selected	An array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]
 * @deprecated Event handlers for this event should be susbcribed to deselectEvent.
 * @event onDeselect
 */

/**
 * Event executed when the user navigates to a different calendar page.
 * @id YAHOO.widget.Calendar.onChangePage
 * @deprecated Event handlers for this event should be susbcribed to changePageEvent.
 * @event onChangePage
 */

/**
 * Event executed when the calendar widget is rendered.
 * @id YAHOO.widget.Calendar.onRender
 * @deprecated Event handlers for this event should be susbcribed to renderEvent.
 * @event onRender
 */

/**
 * Event executed when the calendar widget is reset to its original state.
 * @id YAHOO.widget.Calendar.onReset
 * @deprecated Event handlers for this event should be susbcribed to resetEvemt.
 * @event onReset
 */

/**
 * Event executed when the calendar widget is completely cleared to the current month with no selections.
 * @id YAHOO.widget.Calendar.onClear
 * @deprecated Event handlers for this event should be susbcribed to clearEvent.
 * @event onClear
 */

/**
 * Validates the calendar widget. This method has no default implementation
 * and must be extended by subclassing the widget.
 * @id YAHOO.widget.Calendar.validate
 * @return	Should return true if the widget validates, and false if
 * it doesn't.
 * @type Boolean
 */

/**
 * Resets the render stack of the current calendar to its original pre-render value.
 * @id YAHOO.widget.Calendar.resetRenderers
 * @method resetRenderers
 */

/**
 * Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and
 * addWeekdayRenderer methods. Calendar's render method needs to be called after removing renderers
 * to re-render the Calendar without custom renderers applied.
 * @id YAHOO.widget.Calendar.removeRenderers
 * @method removeRenderers
 */

/**
 * Clears the inner HTML, CSS class and style information from the specified cell.
 * @id YAHOO.widget.Calendar.clearElement
 * @method clearElement
 * @param	{HTMLTableCellElement} cell The cell to clear
 */

/**
 * Adds a renderer to the render stack. The function reference passed to this method will be executed
 * when a date cell matches the conditions specified in the date string for this renderer.
 * @id YAHOO.widget.Calendar.addRenderer
 * @method addRenderer
 * @param	{String}	sDates		A date string to associate with the specified renderer. Valid formats
 *									include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)
 * @param	{Function}	fnRender	The function executed to render cells that match the render rules for this renderer.
 */

/**
 * The private method used for adding cell renderers to the local render stack.
 * This method is called by other methods that set the renderer type prior to the method call.
 * @id YAHOO.widget.Calendar._addRenderer
 * @method _addRenderer
 * @private
 * @param	{String}	type		The type string that indicates the type of date renderer being added.
 *									Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,
 *									YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH
 * @param	{Array}		aDates		An array of dates used to construct the renderer. The format varies based
 *									on the renderer type
 * @param	{Function}	fnRender	The function executed to render cells that match the render rules for this renderer.
 */

/**
 * Adds a month to the render stack. The function reference passed to this method will be executed
 * when a date cell matches the month passed to this method.
 * @id YAHOO.widget.Calendar.addMonthRenderer
 * @method addMonthRenderer
 * @param	{Number}	month		The month (1-12) to associate with this renderer
 * @param	{Function}	fnRender	The function executed to render cells that match the render rules for this renderer.
 */

/**
 * Adds a weekday to the render stack. The function reference passed to this method will be executed
 * when a date cell matches the weekday passed to this method.
 * @id YAHOO.widget.Calendar.addWeekdayRenderer
 * @method addWeekdayRenderer
 * @param	{Number}	weekday		The weekday (0-6) to associate with this renderer
 * @param	{Function}	fnRender	The function executed to render cells that match the render rules for this renderer.
 */

/**
 * Removes all styles from all body cells in the current calendar table.
 * @id YAHOO.widget.Calendar.clearAllBodyCellStyles
 * @method clearAllBodyCellStyles
 * @param	{style}	style The CSS class name to remove from all calendar body cells
 */

/**
 * Sets the calendar's month explicitly
 * @id YAHOO.widget.Calendar.setMonth
 * @method setMonth
 * @param {Number}	month		The numeric month, from 0 (January) to 11 (December)
 */

/**
 * Sets the calendar's year explicitly.
 * @id YAHOO.widget.Calendar.setYear
 * @method setYear
 * @param {Number}	year		The numeric 4-digit year
 */

/**
 * Gets the list of currently selected dates from the calendar.
 * @id YAHOO.widget.Calendar.getSelectedDates
 * @method getSelectedDates
 * @return {Date[]} An array of currently selected JavaScript Date objects.
 */

/**
 * Hides the Calendar's outer container from view.
 * @id YAHOO.widget.Calendar.hide
 * @method hide
 */

/**
 * Shows the Calendar's outer container.
 * @id YAHOO.widget.Calendar.show
 * @method show
 */

/**
 * Returns a string representing the current browser.
 * @id YAHOO.widget.Calendar.browser
 * @deprecated As of 2.3.0, environment information is available in YAHOO.env.ua
 * @see YAHOO.env.ua
 * @property browser
 * @type String
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.Calendar.toString
 * @method toString
 * @return {String}	A string representation of the Calendar object.
 */

/**
 * @id YAHOO.widget.Calendar_Core
 * @namespace YAHOO.widget
 * @class Calendar_Core
 * @extends YAHOO.widget.Calendar
 * @deprecated The old Calendar_Core class is no longer necessary.
 */

/**
 * YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates
 * the ability to have multi-page calendar views that share a single dataset and are
 * dependent on each other.
 *
 * The calendar group instance will refer to each of its elements using a 0-based index.
 * For example, to construct the placeholder for a calendar group widget with id "cal1" and
 * containerId of "cal1Container", the markup would be as follows:
 *	<xmp>
 *		<div id="cal1Container_0"></div>
 *		<div id="cal1Container_1"></div>
 *	</xmp>
 * The tables for the calendars ("cal1_0" and "cal1_1") will be inserted into those containers.
 *
 * <p>
 * <strong>NOTE: As of 2.4.0, the constructor's ID argument is optional.</strong>
 * The CalendarGroup can be constructed by simply providing a container ID string,
 * or a reference to a container DIV HTMLElement (the element needs to exist
 * in the document).
 *
 * E.g.:
 *	<xmp>
 *		var c = new YAHOO.widget.CalendarGroup("calContainer", configOptions);
 *	</xmp>
 * or:
 *   <xmp>
 *       var containerDiv = YAHOO.util.Dom.get("calContainer");
 *		var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);
 *	</xmp>
 * </p>
 * <p>
 * If not provided, the ID will be generated from the container DIV ID by adding an "_t" suffix.
 * For example if an ID is not provided, and the container's ID is "calContainer", the CalendarGroup's ID will be set to "calContainer_t".
 * </p>
 *
 * @id YAHOO.widget.CalendarGroup
 * @namespace YAHOO.widget
 * @class CalendarGroup
 * @constructor
 * @param {String} id optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional.
 * @param {String | HTMLElement} container The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document.
 * @param {Object} config optional The configuration object containing the initial configuration values for the CalendarGroup.
 */

/**
 * Initializes the calendar group. All subclasses must call this method in order for the
 * group to be initialized properly.
 * @id YAHOO.widget.CalendarGroup.init
 * @method init
 * @param {String} id optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional.
 * @param {String | HTMLElement} container The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document.
 * @param {Object} config optional The configuration object containing the initial configuration values for the CalendarGroup.
 */

/**
 * The unique id associated with the CalendarGroup
 * @id YAHOO.widget.CalendarGroup.id
 * @property id
 * @type String
 */

/**
 * The unique id associated with the CalendarGroup container
 * @id YAHOO.widget.CalendarGroup.containerId
 * @property containerId
 * @type String
 */

/**
 * The collection of Calendar pages contained within the CalendarGroup
 * @id YAHOO.widget.CalendarGroup.pages
 * @property pages
 * @type YAHOO.widget.Calendar[]
 */

/**
 * The Config object used to hold the configuration variables for the CalendarGroup
 * @id YAHOO.widget.CalendarGroup.cfg
 * @property cfg
 * @type YAHOO.util.Config
 */

/**
 * The local object which contains the CalendarGroup's options
 * @id YAHOO.widget.CalendarGroup.Options
 * @property Options
 * @type Object
 */

/**
 * The local object which contains the CalendarGroup's locale settings
 * @id YAHOO.widget.CalendarGroup.Locale
 * @property Locale
 * @type Object
 */

/**
 * The number of pages to include in the CalendarGroup. This value can only be set once, in the CalendarGroup's constructor arguments.
 * @id YAHOO.widget.CalendarGroup.pages
 * @config pages
 * @type Number
 * @default 2
 */

/**
 * The month/year representing the current visible Calendar date (mm/yyyy)
 * @id YAHOO.widget.CalendarGroup.pagedate
 * @config pagedate
 * @type String
 * @default today's date
 */

/**
 * The date or range of dates representing the current Calendar selection
 * @id YAHOO.widget.CalendarGroup.selected
 * @config selected
 * @type String
 * @default []
 */

/**
 * The title to display above the CalendarGroup's month header
 * @id YAHOO.widget.CalendarGroup.title
 * @config title
 * @type String
 * @default ""
 */

/**
 * Whether or not a close button should be displayed for this CalendarGroup
 * @id YAHOO.widget.CalendarGroup.close
 * @config close
 * @type Boolean
 * @default false
 */

/**
 * Whether or not an iframe shim should be placed under the Calendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.
 * This property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be
 * enabled if required.
 *
 * @id YAHOO.widget.CalendarGroup.iframe
 * @config iframe
 * @type Boolean
 * @default true for IE6 and below, false for all other browsers
 */

/**
 * The minimum selectable date in the current Calendar (mm/dd/yyyy)
 * @id YAHOO.widget.CalendarGroup.mindate
 * @config mindate
 * @type String
 * @default null
 */

/**
 * The maximum selectable date in the current Calendar (mm/dd/yyyy)
 * @id YAHOO.widget.CalendarGroup.maxdate
 * @config maxdate
 * @type String
 * @default null
 */

/**
 * True if the Calendar should allow multiple selections. False by default.
 * @id YAHOO.widget.CalendarGroup.MULTI_SELECT
 * @config MULTI_SELECT
 * @type Boolean
 * @default false
 */

/**
 * The weekday the week begins on. Default is 0 (Sunday).
 * @id YAHOO.widget.CalendarGroup.START_WEEKDAY
 * @config START_WEEKDAY
 * @type number
 * @default 0
 */

/**
 * True if the Calendar should show weekday labels. True by default.
 * @id YAHOO.widget.CalendarGroup.SHOW_WEEKDAYS
 * @config SHOW_WEEKDAYS
 * @type Boolean
 * @default true
 */

/**
 * True if the Calendar should show week row headers. False by default.
 * @id YAHOO.widget.CalendarGroup.SHOW_WEEK_HEADER
 * @config SHOW_WEEK_HEADER
 * @type Boolean
 * @default false
 */

/**
 * True if the Calendar should show week row footers. False by default.
 * @id YAHOO.widget.CalendarGroup.SHOW_WEEK_FOOTER
 * @config SHOW_WEEK_FOOTER
 * @type Boolean
 * @default false
 */

/**
 * True if the Calendar should suppress weeks that are not a part of the current month. False by default.
 * @id YAHOO.widget.CalendarGroup.HIDE_BLANK_WEEKS
 * @config HIDE_BLANK_WEEKS
 * @type Boolean
 * @default false
 */

/**
 * The image that should be used for the left navigation arrow.
 * @id YAHOO.widget.CalendarGroup.NAV_ARROW_LEFT
 * @config NAV_ARROW_LEFT
 * @type String
 * @deprecated	You can customize the image by overriding the default CSS class for the left arrow - "calnavleft"
 * @default null
 */

/**
 * The image that should be used for the right navigation arrow.
 * @id YAHOO.widget.CalendarGroup.NAV_ARROW_RIGHT
 * @config NAV_ARROW_RIGHT
 * @type String
 * @deprecated	You can customize the image by overriding the default CSS class for the right arrow - "calnavright"
 * @default null
 */

/**
 * The short month labels for the current locale.
 * @id YAHOO.widget.CalendarGroup.MONTHS_SHORT
 * @config MONTHS_SHORT
 * @type String[]
 * @default ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
 */

/**
 * The long month labels for the current locale.
 * @id YAHOO.widget.CalendarGroup.MONTHS_LONG
 * @config MONTHS_LONG
 * @type String[]
 * @default ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
 */

/**
 * The 1-character weekday labels for the current locale.
 * @id YAHOO.widget.CalendarGroup.WEEKDAYS_1CHAR
 * @config WEEKDAYS_1CHAR
 * @type String[]
 * @default ["S", "M", "T", "W", "T", "F", "S"]
 */

/**
 * The short weekday labels for the current locale.
 * @id YAHOO.widget.CalendarGroup.WEEKDAYS_SHORT
 * @config WEEKDAYS_SHORT
 * @type String[]
 * @default ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
 */

/**
 * The medium weekday labels for the current locale.
 * @id YAHOO.widget.CalendarGroup.WEEKDAYS_MEDIUM
 * @config WEEKDAYS_MEDIUM
 * @type String[]
 * @default ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
 */

/**
 * The long weekday labels for the current locale.
 * @id YAHOO.widget.CalendarGroup.WEEKDAYS_LONG
 * @config WEEKDAYS_LONG
 * @type String[]
 * @default ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
 */

/**
 * The setting that determines which length of month labels should be used. Possible values are "short" and "long".
 * @id YAHOO.widget.CalendarGroup.LOCALE_MONTHS
 * @config LOCALE_MONTHS
 * @type String
 * @default "long"
 */

/**
 * The setting that determines which length of weekday labels should be used. Possible values are "1char", "short", "medium", and "long".
 * @id YAHOO.widget.CalendarGroup.LOCALE_WEEKDAYS
 * @config LOCALE_WEEKDAYS
 * @type String
 * @default "short"
 */

/**
 * The value used to delimit individual dates in a date string passed to various Calendar functions.
 * @id YAHOO.widget.CalendarGroup.DATE_DELIMITER
 * @config DATE_DELIMITER
 * @type String
 * @default ","
 */

/**
 * The value used to delimit date fields in a date string passed to various Calendar functions.
 * @id YAHOO.widget.CalendarGroup.DATE_FIELD_DELIMITER
 * @config DATE_FIELD_DELIMITER
 * @type String
 * @default "/"
 */

/**
 * The value used to delimit date ranges in a date string passed to various Calendar functions.
 * @id YAHOO.widget.CalendarGroup.DATE_RANGE_DELIMITER
 * @config DATE_RANGE_DELIMITER
 * @type String
 * @default "-"
 */

/**
 * The position of the month in a month/year date string
 * @id YAHOO.widget.CalendarGroup.MY_MONTH_POSITION
 * @config MY_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the year in a month/year date string
 * @id YAHOO.widget.CalendarGroup.MY_YEAR_POSITION
 * @config MY_YEAR_POSITION
 * @type Number
 * @default 2
 */

/**
 * The position of the month in a month/day date string
 * @id YAHOO.widget.CalendarGroup.MD_MONTH_POSITION
 * @config MD_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the day in a month/year date string
 * @id YAHOO.widget.CalendarGroup.MD_DAY_POSITION
 * @config MD_DAY_POSITION
 * @type Number
 * @default 2
 */

/**
 * The position of the month in a month/day/year date string
 * @id YAHOO.widget.CalendarGroup.MDY_MONTH_POSITION
 * @config MDY_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the day in a month/day/year date string
 * @id YAHOO.widget.CalendarGroup.MDY_DAY_POSITION
 * @config MDY_DAY_POSITION
 * @type Number
 * @default 2
 */

/**
 * The position of the year in a month/day/year date string
 * @id YAHOO.widget.CalendarGroup.MDY_YEAR_POSITION
 * @config MDY_YEAR_POSITION
 * @type Number
 * @default 3
 */

/**
 * The position of the month in the month year label string used as the Calendar header
 * @id YAHOO.widget.CalendarGroup.MY_LABEL_MONTH_POSITION
 * @config MY_LABEL_MONTH_POSITION
 * @type Number
 * @default 1
 */

/**
 * The position of the year in the month year label string used as the Calendar header
 * @id YAHOO.widget.CalendarGroup.MY_LABEL_YEAR_POSITION
 * @config MY_LABEL_YEAR_POSITION
 * @type Number
 * @default 2
 */

/**
 * The suffix used after the month when rendering the Calendar header
 * @id YAHOO.widget.CalendarGroup.MY_LABEL_MONTH_SUFFIX
 * @config MY_LABEL_MONTH_SUFFIX
 * @type String
 * @default " "
 */

/**
 * The suffix used after the year when rendering the Calendar header
 * @id YAHOO.widget.CalendarGroup.MY_LABEL_YEAR_SUFFIX
 * @config MY_LABEL_YEAR_SUFFIX
 * @type String
 * @default ""
 */

/**
 * Configuration for the Month Year Navigation UI. By default it is disabled
 * @id YAHOO.widget.CalendarGroup.NAV
 * @config NAV
 * @type Object
 * @default null
 */

/**
 * Initializes CalendarGroup's built-in CustomEvents
 * @id YAHOO.widget.CalendarGroup.initEvents
 * @method initEvents
 */

/**
 * Proxy subscriber to subscribe to the CalendarGroup's child Calendars' CustomEvents
 * @id YAHOO.widget.CalendarGroup.sub
 * @method sub
 * @private
 * @param {Function} fn	The function to subscribe to this CustomEvent
 * @param {Object}	obj	The CustomEvent's scope object
 * @param {Boolean}	bOverride	Whether or not to apply scope correction
 */

/**
 * Proxy unsubscriber to unsubscribe from the CalendarGroup's child Calendars' CustomEvents
 * @id YAHOO.widget.CalendarGroup.unsub
 * @method unsub
 * @private
 * @param {Function} fn	The function to subscribe to this CustomEvent
 * @param {Object}	obj	The CustomEvent's scope object
 */

/**
 * Fired before a selection is made
 * @id YAHOO.widget.CalendarGroup.beforeSelectEvent
 * @event beforeSelectEvent
 */

/**
 * Fired when a selection is made
 * @id YAHOO.widget.CalendarGroup.selectEvent
 * @event selectEvent
 * @param {Array}	Array of Date field arrays in the format [YYYY, MM, DD].
 */

/**
 * Fired before a selection is made
 * @id YAHOO.widget.CalendarGroup.beforeDeselectEvent
 * @event beforeDeselectEvent
 */

/**
 * Fired when a selection is made
 * @id YAHOO.widget.CalendarGroup.deselectEvent
 * @event deselectEvent
 * @param {Array}	Array of Date field arrays in the format [YYYY, MM, DD].
 */

/**
 * Fired when the Calendar page is changed
 * @id YAHOO.widget.CalendarGroup.changePageEvent
 * @event changePageEvent
 */

/**
 * Fired before the Calendar is rendered
 * @id YAHOO.widget.CalendarGroup.beforeRenderEvent
 * @event beforeRenderEvent
 */

/**
 * Fired when the Calendar is rendered
 * @id YAHOO.widget.CalendarGroup.renderEvent
 * @event renderEvent
 */

/**
 * Fired when the Calendar is reset
 * @id YAHOO.widget.CalendarGroup.resetEvent
 * @event resetEvent
 */

/**
 * Fired when the Calendar is cleared
 * @id YAHOO.widget.CalendarGroup.clearEvent
 * @event clearEvent
 */

/**
 * Fired just before the CalendarGroup is to be shown
 * @id YAHOO.widget.CalendarGroup.beforeShowEvent
 * @event beforeShowEvent
 */

/**
 * Fired after the CalendarGroup is shown
 * @id YAHOO.widget.CalendarGroup.showEvent
 * @event showEvent
 */

/**
 * Fired just before the CalendarGroup is to be hidden
 * @id YAHOO.widget.CalendarGroup.beforeHideEvent
 * @event beforeHideEvent
 */

/**
 * Fired after the CalendarGroup is hidden
 * @id YAHOO.widget.CalendarGroup.hideEvent
 * @event hideEvent
 */

/**
 * Fired just before the CalendarNavigator is to be shown
 * @id YAHOO.widget.CalendarGroup.beforeShowNavEvent
 * @event beforeShowNavEvent
 */

/**
 * Fired after the CalendarNavigator is shown
 * @id YAHOO.widget.CalendarGroup.showNavEvent
 * @event showNavEvent
 */

/**
 * Fired just before the CalendarNavigator is to be hidden
 * @id YAHOO.widget.CalendarGroup.beforeHideNavEvent
 * @event beforeHideNavEvent
 */

/**
 * Fired after the CalendarNavigator is hidden
 * @id YAHOO.widget.CalendarGroup.hideNavEvent
 * @event hideNavEvent
 */

/**
 * Fired just before the CalendarNavigator is to be rendered
 * @id YAHOO.widget.CalendarGroup.beforeRenderNavEvent
 * @event beforeRenderNavEvent
 */

/**
 * Fired after the CalendarNavigator is rendered
 * @id YAHOO.widget.CalendarGroup.renderNavEvent
 * @event renderNavEvent
 */

/**
 * The default Config handler for the "pages" property
 * @id YAHOO.widget.CalendarGroup.configPages
 * @method configPages
 * @param {String} type	The CustomEvent type (usually the property name)
 * @param {Object[]}	args	The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj	The scope object. For configuration handlers, this will usually equal the owner.
 */

/**
 * The default Config handler for the "pagedate" property
 * @id YAHOO.widget.CalendarGroup.configPageDate
 * @method configPageDate
 * @param {String} type	The CustomEvent type (usually the property name)
 * @param {Object[]}	args	The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj	The scope object. For configuration handlers, this will usually equal the owner.
 */

/**
 * The default Config handler for the CalendarGroup "selected" property
 * @id YAHOO.widget.CalendarGroup.configSelected
 * @method configSelected
 * @param {String} type	The CustomEvent type (usually the property name)
 * @param {Object[]}	args	The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj	The scope object. For configuration handlers, this will usually equal the owner.
 */

/**
 * Delegates a configuration property to the CustomEvents associated with the CalendarGroup's children
 * @id YAHOO.widget.CalendarGroup.delegateConfig
 * @method delegateConfig
 * @param {String} type	The CustomEvent type (usually the property name)
 * @param {Object[]}	args	The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj	The scope object. For configuration handlers, this will usually equal the owner.
 */

/**
 * Adds a function to all child Calendars within this CalendarGroup.
 * @id YAHOO.widget.CalendarGroup.setChildFunction
 * @method setChildFunction
 * @param {String}		fnName		The name of the function
 * @param {Function}		fn			The function to apply to each Calendar page object
 */

/**
 * Calls a function within all child Calendars within this CalendarGroup.
 * @id YAHOO.widget.CalendarGroup.callChildFunction
 * @method callChildFunction
 * @param {String}		fnName		The name of the function
 * @param {Array}		args		The arguments to pass to the function
 */

/**
 * Constructs a child calendar. This method can be overridden if a subclassed version of the default
 * calendar is to be used.
 * @id YAHOO.widget.CalendarGroup.constructChild
 * @method constructChild
 * @param {String}	id			The id of the table element that will represent the calendar widget
 * @param {String}	containerId	The id of the container div element that will wrap the calendar table
 * @param {Object}	config		The configuration object containing the Calendar's arguments
 * @return {YAHOO.widget.Calendar}	The YAHOO.widget.Calendar instance that is constructed
 */

/**
 * Sets the calendar group's month explicitly. This month will be set into the first
 * page of the multi-page calendar, and all other months will be iterated appropriately.
 * @id YAHOO.widget.CalendarGroup.setMonth
 * @method setMonth
 * @param {Number}	month		The numeric month, from 0 (January) to 11 (December)
 */

/**
 * Sets the calendar group's year explicitly. This year will be set into the first
 * page of the multi-page calendar, and all other months will be iterated appropriately.
 * @id YAHOO.widget.CalendarGroup.setYear
 * @method setYear
 * @param {Number}	year		The numeric 4-digit year
 */

/**
 * Calls the render function of all child calendars within the group.
 * @id YAHOO.widget.CalendarGroup.render
 * @method render
 */

/**
 * Selects a date or a collection of dates on the current calendar. This method, by default,
 * does not call the render method explicitly. Once selection has completed, render must be
 * called for the changes to be reflected visually.
 * @id YAHOO.widget.CalendarGroup.select
 * @method select
 * @param	{String/Date/Date[]}	date	The date string of dates to select in the current calendar. Valid formats are
 *								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).
 *								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).
 *								This method can also take a JavaScript Date object or an array of Date objects.
 * @return	{Date[]}			Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.
 * The value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected.
 * <ul>
 *    <li>If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.</li>
 *    <li>If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.</li>
 * </ul>
 * @id YAHOO.widget.CalendarGroup.selectCell
 * @method selectCell
 * @param	{Number}	cellIndex	The index of the cell to be selected.
 * @return	{Date[]}	Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Deselects a date or a collection of dates on the current calendar. This method, by default,
 * does not call the render method explicitly. Once deselection has completed, render must be
 * called for the changes to be reflected visually.
 * @id YAHOO.widget.CalendarGroup.deselect
 * @method deselect
 * @param	{String/Date/Date[]}	date	The date string of dates to deselect in the current calendar. Valid formats are
 *								individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).
 *								Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).
 *								This method can also take a JavaScript Date object or an array of Date objects.
 * @return	{Date[]}			Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Deselects all dates on the current calendar.
 * @id YAHOO.widget.CalendarGroup.deselectAll
 * @method deselectAll
 * @return {Date[]}		Array of JavaScript Date objects representing all individual dates that are currently selected.
 *						Assuming that this function executes properly, the return value should be an empty array.
 *						However, the empty array is returned for the sake of being able to check the selection status
 *						of the calendar.
 */

/**
 * Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.
 * deselectCell will deselect the cell at the specified index on each displayed Calendar page.
 *
 * @id YAHOO.widget.CalendarGroup.deselectCell
 * @method deselectCell
 * @param	{Number}	cellIndex	The index of the cell to deselect.
 * @return	{Date[]}	Array of JavaScript Date objects representing all individual dates that are currently selected.
 */

/**
 * Resets the calendar widget to the originally selected month and year, and
 * sets the calendar to the initial selection(s).
 * @id YAHOO.widget.CalendarGroup.reset
 * @method reset
 */

/**
 * Clears the selected dates in the current calendar widget and sets the calendar
 * to the current month and year.
 * @id YAHOO.widget.CalendarGroup.clear
 * @method clear
 */

/**
 * Navigates to the next month page in the calendar widget.
 * @id YAHOO.widget.CalendarGroup.nextMonth
 * @method nextMonth
 */

/**
 * Navigates to the previous month page in the calendar widget.
 * @id YAHOO.widget.CalendarGroup.previousMonth
 * @method previousMonth
 */

/**
 * Navigates to the next year in the currently selected month in the calendar widget.
 * @id YAHOO.widget.CalendarGroup.nextYear
 * @method nextYear
 */

/**
 * Navigates to the previous year in the currently selected month in the calendar widget.
 * @id YAHOO.widget.CalendarGroup.previousYear
 * @method previousYear
 */

/**
 * Gets the list of currently selected dates from the calendar.
 * @id YAHOO.widget.CalendarGroup.getSelectedDates
 * @return			An array of currently selected JavaScript Date objects.
 * @type Date[]
 * @method getSelectedDates
 */

/**
 * Adds a renderer to the render stack. The function reference passed to this method will be executed
 * when a date cell matches the conditions specified in the date string for this renderer.
 * @id YAHOO.widget.CalendarGroup.addRenderer
 * @method addRenderer
 * @param	{String}	sDates		A date string to associate with the specified renderer. Valid formats
 *									include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)
 * @param	{Function}	fnRender	The function executed to render cells that match the render rules for this renderer.
 */

/**
 * Adds a month to the render stack. The function reference passed to this method will be executed
 * when a date cell matches the month passed to this method.
 * @id YAHOO.widget.CalendarGroup.addMonthRenderer
 * @method addMonthRenderer
 * @param	{Number}	month		The month (1-12) to associate with this renderer
 * @param	{Function}	fnRender	The function executed to render cells that match the render rules for this renderer.
 */

/**
 * Adds a weekday to the render stack. The function reference passed to this method will be executed
 * when a date cell matches the weekday passed to this method.
 * @id YAHOO.widget.CalendarGroup.addWeekdayRenderer
 * @method addWeekdayRenderer
 * @param	{Number}	weekday		The weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc.
 * @param	{Function}	fnRender	The function executed to render cells that match the render rules for this renderer.
 */

/**
 * Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and
 * addWeekRenderer methods. CalendarGroup's render method needs to be called to after removing renderers
 * to see the changes applied.
 *
 * @id YAHOO.widget.CalendarGroup.removeRenderers
 * @method removeRenderers
 */

/**
 * Renders the header for the CalendarGroup.
 * @id YAHOO.widget.CalendarGroup.renderHeader
 * @method renderHeader
 */

/**
 * Renders a footer for the 2-up calendar container. By default, this method is
 * unimplemented.
 * @id YAHOO.widget.CalendarGroup.renderFooter
 * @method renderFooter
 */

/**
 * Adds the designated number of months to the current calendar month, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.CalendarGroup.addMonths
 * @method addMonths
 * @param {Number}	count	The number of months to add to the current calendar
 */

/**
 * Subtracts the designated number of months from the current calendar month, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.CalendarGroup.subtractMonths
 * @method subtractMonths
 * @param {Number}	count	The number of months to subtract from the current calendar
 */

/**
 * Adds the designated number of years to the current calendar, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.CalendarGroup.addYears
 * @method addYears
 * @param {Number}	count	The number of years to add to the current calendar
 */

/**
 * Subtcats the designated number of years from the current calendar, and sets the current
 * calendar page date to the new month.
 * @id YAHOO.widget.CalendarGroup.subtractYears
 * @method subtractYears
 * @param {Number}	count	The number of years to subtract from the current calendar
 */

/**
 * Returns the Calendar page instance which has a pagedate (month/year) matching the given date.
 * Returns null if no match is found.
 *
 * @id YAHOO.widget.CalendarGroup.getCalendarPage
 * @method getCalendarPage
 * @param {Date} date The JavaScript Date object for which a Calendar page is to be found.
 * @return {Calendar} The Calendar page instance representing the month to which the date
 * belongs.
 */

/**
 * Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.
 * The Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained
 * @id YAHOO.widget.CalendarGroup._setMonthOnDate
 * @method	_setMonthOnDate
 * @private
 * @param	{Date}	date	The Date object on which to set the month index
 * @param	{Number}	iMonth	The month index to set
 */

/**
 * Fixes the width of the CalendarGroup container element, to account for miswrapped floats
 * @id YAHOO.widget.CalendarGroup._fixWidth
 * @method _fixWidth
 * @private
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.CalendarGroup.toString
 * @method toString
 * @return {String}	A string representation of the CalendarGroup object.
 */

/**
 * CSS class representing the container for the calendar
 * @id YAHOO.widget.CalendarGroup.YAHOO.widget.CalendarGroup.CSS_CONTAINER
 * @property YAHOO.widget.CalendarGroup.CSS_CONTAINER
 * @static
 * @final
 * @type String
 */

/**
 * CSS class representing the container for the calendar
 * @id YAHOO.widget.CalendarGroup.YAHOO.widget.CalendarGroup.CSS_MULTI_UP
 * @property YAHOO.widget.CalendarGroup.CSS_MULTI_UP
 * @static
 * @final
 * @type String
 */

/**
 * CSS class representing the title for the 2-up calendar
 * @id YAHOO.widget.CalendarGroup.YAHOO.widget.CalendarGroup.CSS_2UPTITLE
 * @property YAHOO.widget.CalendarGroup.CSS_2UPTITLE
 * @static
 * @final
 * @type String
 */

/**
 * CSS class representing the close icon for the 2-up calendar
 * @id YAHOO.widget.CalendarGroup.YAHOO.widget.CalendarGroup.CSS_2UPCLOSE
 * @property YAHOO.widget.CalendarGroup.CSS_2UPCLOSE
 * @static
 * @final
 * @deprecated	Along with Calendar.IMG_ROOT and NAV_ARROW_LEFT, NAV_ARROW_RIGHT configuration properties.
 *					Calendar's Style.CSS_CLOSE property now represents the CSS class used to render the close icon
 * @type String
 */

/**
 * The set of default Config property keys and values for the CalendarGroup
 * @id YAHOO.widget.CalendarGroup.YAHOO.widget.CalendarGroup._DEFAULT_CONFIG
 * @property YAHOO.widget.CalendarGroup._DEFAULT_CONFIG
 * @final
 * @static
 * @private
 * @type Object
 */

/**
 * @id YAHOO.widget.Calendar2up
 * @class YAHOO.widget.Calendar2up
 * @extends YAHOO.widget.CalendarGroup
 * @deprecated The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.
 */

/**
 * @id YAHOO.widget.Calendar2up
 * @deprecated The old Calendar2up class is no longer necessary, since CalendarGroup renders in a 2up view by default.
 */

/**
 * The CalendarNavigator is used along with a Calendar/CalendarGroup to
 * provide a Month/Year popup navigation control, allowing the user to navigate
 * to a specific month/year in the Calendar/CalendarGroup without having to
 * scroll through months sequentially
 *
 * @id YAHOO.widget.CalendarNavigator
 * @namespace YAHOO.widget
 * @class CalendarNavigator
 * @constructor
 * @param {Calendar|CalendarGroup} cal The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached.
 */

/**
 * YAHOO.widget.CalendarNavigator.CLASSES contains constants
 * for the class values applied to the CalendarNaviatgator's
 * DOM elements
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES
 * @property YAHOO.widget.CalendarNavigator.CLASSES
 * @type Object
 * @static
 */

/**
 * Class applied to the Calendar Navigator's bounding box
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.NAV
 * @property YAHOO.widget.CalendarNavigator.CLASSES.NAV
 * @type String
 * @static
 */

/**
 * Class applied to the Calendar/CalendarGroup's bounding box to indicate
 * the Navigator is currently visible
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE
 * @property YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE
 * @type String
 * @static
 */

/**
 * Class applied to the Navigator mask's bounding box
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.MASK
 * @property YAHOO.widget.CalendarNavigator.CLASSES.MASK
 * @type String
 * @static
 */

/**
 * Class applied to the year label/control bounding box
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.YEAR
 * @property YAHOO.widget.CalendarNavigator.CLASSES.YEAR
 * @type String
 * @static
 */

/**
 * Class applied to the month label/control bounding box
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.MONTH
 * @property YAHOO.widget.CalendarNavigator.CLASSES.MONTH
 * @type String
 * @static
 */

/**
 * Class applied to the submit/cancel button's bounding box
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS
 * @property YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS
 * @type String
 * @static
 */

/**
 * Class applied to buttons wrapping element
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.BUTTON
 * @property YAHOO.widget.CalendarNavigator.CLASSES.BUTTON
 * @type String
 * @static
 */

/**
 * Class applied to the validation error area's bounding box
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.ERROR
 * @property YAHOO.widget.CalendarNavigator.CLASSES.ERROR
 * @type String
 * @static
 */

/**
 * Class applied to the year input control
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL
 * @property YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL
 * @type String
 * @static
 */

/**
 * Class applied to the month input control
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL
 * @property YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL
 * @type String
 * @static
 */

/**
 * Class applied to controls with invalid data (e.g. a year input field with invalid an year)
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.INVALID
 * @property YAHOO.widget.CalendarNavigator.CLASSES.INVALID
 * @type String
 * @static
 */

/**
 * Class applied to default controls
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT
 * @property YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT
 * @type String
 * @static
 */

/**
 * Object literal containing the default configuration values for the CalendarNavigator
 * The configuration object is expected to follow the format below, with the properties being
 * case sensitive.
 * <dl>
 * <dt>strings</dt>
 * <dd><em>Object</em> :  An object with the properties shown below, defining the string labels to use in the Navigator's UI
 *     <dl>
 *         <dt>month</dt><dd><em>String</em> : The string to use for the month label. Defaults to "Month".</dd>
 *         <dt>year</dt><dd><em>String</em> : The string to use for the year label. Defaults to "Year".</dd>
 *         <dt>submit</dt><dd><em>String</em> : The string to use for the submit button label. Defaults to "Okay".</dd>
 *         <dt>cancel</dt><dd><em>String</em> : The string to use for the cancel button label. Defaults to "Cancel".</dd>
 *         <dt>invalidYear</dt><dd><em>String</em> : The string to use for invalid year values. Defaults to "Year needs to be a number".</dd>
 *     </dl>
 * </dd>
 * <dt>monthFormat</dt><dd><em>String</em> : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG</dd>
 * <dt>initialFocus</dt><dd><em>String</em> : Either "year" or "month" specifying which input control should get initial focus. Defaults to "year"</dd>
 * </dl>
 * @id YAHOO.widget.CalendarNavigator._DEFAULT_CFG
 * @property _DEFAULT_CFG
 * @protected
 * @type Object
 * @static
 */

/**
 * The suffix added to the Calendar/CalendarGroup's ID, to generate
 * a unique ID for the Navigator and it's bounding box.
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.ID_SUFFIX
 * @property YAHOO.widget.CalendarNavigator.ID_SUFFIX
 * @static
 * @type String
 * @final
 */

/**
 * The suffix added to the Navigator's ID, to generate
 * a unique ID for the month control.
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.MONTH_SUFFIX
 * @property YAHOO.widget.CalendarNavigator.MONTH_SUFFIX
 * @static
 * @type String
 * @final
 */

/**
 * The suffix added to the Navigator's ID, to generate
 * a unique ID for the year control.
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.YEAR_SUFFIX
 * @property YAHOO.widget.CalendarNavigator.YEAR_SUFFIX
 * @static
 * @type String
 * @final
 */

/**
 * The suffix added to the Navigator's ID, to generate
 * a unique ID for the error bounding box.
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.ERROR_SUFFIX
 * @property YAHOO.widget.CalendarNavigator.ERROR_SUFFIX
 * @static
 * @type String
 * @final
 */

/**
 * The suffix added to the Navigator's ID, to generate
 * a unique ID for the "Cancel" button.
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX
 * @property YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX
 * @static
 * @type String
 * @final
 */

/**
 * The suffix added to the Navigator's ID, to generate
 * a unique ID for the "Submit" button.
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX
 * @property YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX
 * @static
 * @type String
 * @final
 */

/**
 * The number of digits to which the year input control is to be limited.
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS
 * @property YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS
 * @static
 * @type Number
 */

/**
 * The amount by which to increment the current year value,
 * when the arrow up/down key is pressed on the year control
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.YR_MINOR_INC
 * @property YAHOO.widget.CalendarNavigator.YR_MINOR_INC
 * @static
 * @type Number
 */

/**
 * The amount by which to increment the current year value,
 * when the page up/down key is pressed on the year control
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.YR_MAJOR_INC
 * @property YAHOO.widget.CalendarNavigator.YR_MAJOR_INC
 * @static
 * @type Number
 */

/**
 * Artificial delay (in ms) between the time the Navigator is hidden
 * and the Calendar/CalendarGroup state is updated. Allows the user
 * the see the Calendar/CalendarGroup page changing. If set to 0
 * the Calendar/CalendarGroup page will be updated instantly
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.UPDATE_DELAY
 * @property YAHOO.widget.CalendarNavigator.UPDATE_DELAY
 * @static
 * @type Number
 */

/**
 * Regular expression used to validate the year input
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.YR_PATTERN
 * @property YAHOO.widget.CalendarNavigator.YR_PATTERN
 * @static
 * @type RegExp
 */

/**
 * Regular expression used to trim strings
 * @id YAHOO.widget.CalendarNavigator.YAHOO.widget.CalendarNavigator.TRIM
 * @property YAHOO.widget.CalendarNavigator.TRIM
 * @static
 * @type RegExp
 */

/**
 * The unique ID for this CalendarNavigator instance
 * @id YAHOO.widget.CalendarNavigator.id
 * @property id
 * @type String
 */

/**
 * The Calendar/CalendarGroup instance to which the navigator belongs
 * @id YAHOO.widget.CalendarNavigator.cal
 * @property cal
 * @type {Calendar|CalendarGroup}
 */

/**
 * Reference to the HTMLElement used to render the navigator's bounding box
 * @id YAHOO.widget.CalendarNavigator.navEl
 * @property navEl
 * @type HTMLElement
 */

/**
 * Reference to the HTMLElement used to render the navigator's mask
 * @id YAHOO.widget.CalendarNavigator.maskEl
 * @property maskEl
 * @type HTMLElement
 */

/**
 * Reference to the HTMLElement used to input the year
 * @id YAHOO.widget.CalendarNavigator.yearEl
 * @property yearEl
 * @type HTMLElement
 */

/**
 * Reference to the HTMLElement used to input the month
 * @id YAHOO.widget.CalendarNavigator.monthEl
 * @property monthEl
 * @type HTMLElement
 */

/**
 * Reference to the HTMLElement used to display validation errors
 * @id YAHOO.widget.CalendarNavigator.errorEl
 * @property errorEl
 * @type HTMLElement
 */

/**
 * Reference to the HTMLElement used to update the Calendar/Calendar group
 * with the month/year values
 * @id YAHOO.widget.CalendarNavigator.submitEl
 * @property submitEl
 * @type HTMLElement
 */

/**
 * Reference to the HTMLElement used to hide the navigator without updating the
 * Calendar/Calendar group
 * @id YAHOO.widget.CalendarNavigator.cancelEl
 * @property cancelEl
 * @type HTMLElement
 */

/**
 * Reference to the first focusable control in the navigator (by default monthEl)
 * @id YAHOO.widget.CalendarNavigator.firstCtrl
 * @property firstCtrl
 * @type HTMLElement
 */

/**
 * Reference to the last focusable control in the navigator (by default cancelEl)
 * @id YAHOO.widget.CalendarNavigator.lastCtrl
 * @property lastCtrl
 * @type HTMLElement
 */

/**
 * The document containing the Calendar/Calendar group instance
 * @id YAHOO.widget.CalendarNavigator._doc
 * @protected
 * @property _doc
 * @type HTMLDocument
 */

/**
 * Internal state property for the current year displayed in the navigator
 * @id YAHOO.widget.CalendarNavigator._year
 * @protected
 * @property _year
 * @type Number
 */

/**
 * Internal state property for the current month index displayed in the navigator
 * @id YAHOO.widget.CalendarNavigator._month
 * @protected
 * @property _month
 * @type Number
 */

/**
 * Private internal state property which indicates whether or not the
 * Navigator has been rendered.
 * @id YAHOO.widget.CalendarNavigator.__rendered
 * @private
 * @property __rendered
 * @type Boolean
 */

/**
 * Init lifecycle method called as part of construction
 *
 * @id YAHOO.widget.CalendarNavigator.init
 * @method init
 * @param {Calendar} cal The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached
 */

/**
 * Private flag, to identify IE6/IE7 Quirks
 * @id YAHOO.widget.CalendarNavigator.__isIEQuirks
 * @private
 * @property __isIEQuirks
 */

/**
 * Displays the navigator and mask, updating the input controls to reflect the
 * currently set month and year. The show method will invoke the render method
 * if the navigator has not been renderered already, allowing for lazy rendering
 * of the control.
 *
 * The show method will fire the Calendar/CalendarGroup's beforeShowNav and showNav events
 *
 * @id YAHOO.widget.CalendarNavigator.show
 * @method show
 */

/**
 * Hides the navigator and mask
 *
 * The show method will fire the Calendar/CalendarGroup's beforeHideNav event and hideNav events
 * @id YAHOO.widget.CalendarNavigator.hide
 * @method hide
 */

/**
 * Displays the navigator's mask element
 *
 * @id YAHOO.widget.CalendarNavigator.showMask
 * @method showMask
 */

/**
 * Hides the navigator's mask element
 *
 * @id YAHOO.widget.CalendarNavigator.hideMask
 * @method hideMask
 */

/**
 * Returns the current month set on the navigator
 *
 * Note: This may not be the month set in the UI, if
 * the UI contains an invalid value.
 *
 * @id YAHOO.widget.CalendarNavigator.getMonth
 * @method getMonth
 * @return {Number} The Navigator's current month index
 */

/**
 * Returns the current year set on the navigator
 *
 * Note: This may not be the year set in the UI, if
 * the UI contains an invalid value.
 *
 * @id YAHOO.widget.CalendarNavigator.getYear
 * @method getYear
 * @return {Number} The Navigator's current year value
 */

/**
 * Sets the current month on the Navigator, and updates the UI
 *
 * @id YAHOO.widget.CalendarNavigator.setMonth
 * @method setMonth
 * @param {Number} nMonth The month index, from 0 (Jan) through 11 (Dec).
 */

/**
 * Sets the current year on the Navigator, and updates the UI. If the
 * provided year is invalid, it will not be set.
 *
 * @id YAHOO.widget.CalendarNavigator.setYear
 * @method setYear
 * @param {Number} nYear The full year value to set the Navigator to.
 */

/**
 * Renders the HTML for the navigator, adding it to the
 * document and attaches event listeners if it has not
 * already been rendered.
 *
 * @id YAHOO.widget.CalendarNavigator.render
 * @method render
 */

/**
 * Creates the navigator's containing HTMLElement, it's contents, and appends
 * the containg element to the Calendar/CalendarGroup's container.
 *
 * @id YAHOO.widget.CalendarNavigator.createNav
 * @method createNav
 */

/**
 * Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups
 * container.
 *
 * @id YAHOO.widget.CalendarNavigator.createMask
 * @method createMask
 */

/**
 * Used to set the width/height of the mask in pixels to match the Calendar Container.
 * Currently only used for IE6 and IE7 quirks mode. The other A-Grade browser are handled using CSS (width/height 100%).
 * <p>
 * The method is also registered as an HTMLElement resize listener on the Calendars container element.
 * </p>
 * @id YAHOO.widget.CalendarNavigator._syncMask
 * @protected
 * @method _syncMask
 */

/**
 * Renders the contents of the navigator
 *
 * @id YAHOO.widget.CalendarNavigator.renderNavContents
 * @method renderNavContents
 *
 * @param {Array} html The HTML buffer to append the HTML to.
 * @return {Array} A reference to the buffer passed in.
 */

/**
 * Renders the month label and control for the navigator
 *
 * @id YAHOO.widget.CalendarNavigator.renderNavContents
 * @method renderNavContents
 * @param {Array} html The HTML buffer to append the HTML to.
 * @return {Array} A reference to the buffer passed in.
 */

/**
 * Renders the year label and control for the navigator
 *
 * @id YAHOO.widget.CalendarNavigator.renderYear
 * @method renderYear
 * @param {Array} html The HTML buffer to append the HTML to.
 * @return {Array} A reference to the buffer passed in.
 */

/**
 * Renders the submit/cancel buttons for the navigator
 *
 * @id YAHOO.widget.CalendarNavigator.renderButton
 * @method renderButton
 * @return {String} The HTML created for the Button UI
 */

/**
 * Attaches DOM event listeners to the rendered elements
 * <p>
 * The method will call applyKeyListeners, to setup keyboard specific
 * listeners
 * </p>
 * @id YAHOO.widget.CalendarNavigator.applyListeners
 * @method applyListeners
 */

/**
 * Removes/purges DOM event listeners from the rendered elements
 *
 * @id YAHOO.widget.CalendarNavigator.purgeListeners
 * @method purgeListeners
 */

/**
 * Attaches DOM listeners for keyboard support.
 * Tab/Shift-Tab looping, Enter Key Submit on Year element,
 * Up/Down/PgUp/PgDown year increment on Year element
 * <p>
 * NOTE: MacOSX Safari 2.x doesn't let you tab to buttons and
 * MacOSX Gecko does not let you tab to buttons or select controls,
 * so for these browsers, Tab/Shift-Tab looping is limited to the
 * elements which can be reached using the tab key.
 * </p>
 * @id YAHOO.widget.CalendarNavigator.applyKeyListeners
 * @method applyKeyListeners
 */

/**
 * Removes/purges DOM listeners for keyboard support
 *
 * @id YAHOO.widget.CalendarNavigator.purgeKeyListeners
 * @method purgeKeyListeners
 */

/**
 * Updates the Calendar/CalendarGroup's pagedate with the currently set month and year if valid.
 * <p>
 * If the currently set month/year is invalid, a validation error will be displayed and the
 * Calendar/CalendarGroup's pagedate will not be updated.
 * </p>
 * @id YAHOO.widget.CalendarNavigator.submit
 * @method submit
 */

/**
 * Hides the navigator and mask, without updating the Calendar/CalendarGroup's state
 *
 * @id YAHOO.widget.CalendarNavigator.cancel
 * @method cancel
 */

/**
 * Validates the current state of the UI controls
 *
 * @id YAHOO.widget.CalendarNavigator.validate
 * @method validate
 * @return {Boolean} true, if the current UI state contains valid values, false if not
 */

/**
 * Displays an error message in the Navigator's error panel
 * @id YAHOO.widget.CalendarNavigator.setError
 * @method setError
 * @param {String} msg The error message to display
 */

/**
 * Clears the navigator's error message and hides the error panel
 * @id YAHOO.widget.CalendarNavigator.clearError
 * @method clearError
 */

/**
 * Displays the validation error UI for the year control
 * @id YAHOO.widget.CalendarNavigator.setYearError
 * @method setYearError
 */

/**
 * Removes the validation error UI for the year control
 * @id YAHOO.widget.CalendarNavigator.clearYearError
 * @method clearYearError
 */

/**
 * Clears all validation and error messages in the UI
 * @id YAHOO.widget.CalendarNavigator.clearErrors
 * @method clearErrors
 */

/**
 * Sets the initial focus, based on the configured value
 * @id YAHOO.widget.CalendarNavigator.setInitialFocus
 * @method setInitialFocus
 */

/**
 * Removes all renderered HTML elements for the Navigator from
 * the DOM, purges event listeners and clears (nulls) any property
 * references to HTML references
 * @id YAHOO.widget.CalendarNavigator.erase
 * @method erase
 */

/**
 * Destroys the Navigator object and any HTML references
 * @id YAHOO.widget.CalendarNavigator.destroy
 * @method destroy
 */

/**
 * Protected implementation to handle how UI elements are
 * hidden/shown.
 *
 * @id YAHOO.widget.CalendarNavigator._show
 * @method _show
 * @protected
 */

/**
 * Returns the month value (index), from the month UI element
 * @id YAHOO.widget.CalendarNavigator._getMonthFromUI
 * @protected
 * @method _getMonthFromUI
 * @return {Number} The month index, or 0 if a UI element for the month
 * is not found
 */

/**
 * Returns the year value, from the Navitator's year UI element
 * @id YAHOO.widget.CalendarNavigator._getYearFromUI
 * @protected
 * @method _getYearFromUI
 * @return {Number} The year value set in the UI, if valid. null is returned if
 * the UI does not contain a valid year value.
 */

/**
 * Updates the Navigator's year UI, based on the year value set on the Navigator object
 * @id YAHOO.widget.CalendarNavigator._updateYearUI
 * @protected
 * @method _updateYearUI
 */

/**
 * Updates the Navigator's month UI, based on the month value set on the Navigator object
 * @id YAHOO.widget.CalendarNavigator._updateMonthUI
 * @protected
 * @method _updateMonthUI
 */

/**
 * Sets up references to the first and last focusable element in the Navigator's UI
 * in terms of tab order (Naviagator's firstEl and lastEl properties). The references
 * are used to control modality by looping around from the first to the last control
 * and visa versa for tab/shift-tab navigation.
 * <p>
 * See applyKeyListeners
 * </p>
 * @id YAHOO.widget.CalendarNavigator._setFirstLastElements
 * @protected
 * @method _setFirstLastElements
 */

/**
 * Default Keyboard event handler to capture Enter
 * on the Navigator's year control (yearEl)
 *
 * @id YAHOO.widget.CalendarNavigator._handleEnterKey
 * @method _handleEnterKey
 * @protected
 * @param {Event} e The DOM event being handled
 */

/**
 * Default Keyboard event handler to capture up/down/pgup/pgdown
 * on the Navigator's year control (yearEl).
 *
 * @id YAHOO.widget.CalendarNavigator._handleDirectionKeys
 * @method _handleDirectionKeys
 * @protected
 * @param {Event} e The DOM event being handled
 */

/**
 * Default Keyboard event handler to capture Tab
 * on the last control (lastCtrl) in the Navigator.
 *
 * @id YAHOO.widget.CalendarNavigator._handleTabKey
 * @method _handleTabKey
 * @protected
 * @param {Event} e The DOM event being handled
 */

/**
 * Default Keyboard event handler to capture Shift-Tab
 * on the first control (firstCtrl) in the Navigator.
 *
 * @id YAHOO.widget.CalendarNavigator._handleShiftTabKey
 * @method _handleShiftTabKey
 * @protected
 * @param {Event} e The DOM event being handled
 */

/**
 * Retrieve Navigator configuration values from
 * the parent Calendar/CalendarGroup's config value.
 * <p>
 * If it has not been set in the user provided configuration, the method will
 * return the default value of the configuration property, as set in _DEFAULT_CFG
 * </p>
 * @id YAHOO.widget.CalendarNavigator.__getCfg
 * @private
 * @method __getCfg
 * @param {String} Case sensitive property name.
 * @param {Boolean} true, if the property is a string property, false if not.
 * @return The value of the configuration property
 */

/**
 * Private flag, to identify MacOS
 * @id YAHOO.widget.CalendarNavigator.__isMac
 * @private
 * @property __isMac
 */

/**
 * Wraps Flash embedding functionality and allows communication with SWF through
 * attributes.
 *
 * @id YAHOO.widget.FlashAdapter
 * @namespace YAHOO.widget
 * @class FlashAdapter
 * @uses YAHOO.util.AttributeProvider
 */

/**
 * Fires when the SWF is initialized and communication is possible.
 * @id YAHOO.widget.FlashAdapter.contentReady
 * @event contentReady
 */

/**
 * The URL of the SWF file.
 * @id YAHOO.widget.FlashAdapter._swfURL
 * @property _swfURL
 * @type String
 * @private
 */

/**
 * A reference to the embedded SWF file.
 * @id YAHOO.widget.FlashAdapter._swf
 * @property _swf
 * @private
 */

/**
 * The id of this instance.
 * @id YAHOO.widget.FlashAdapter._id
 * @property _id
 * @type String
 * @private
 */

/**
 * The initializing attributes are stored here until the SWF is ready.
 * @id YAHOO.widget.FlashAdapter._attributes
 * @property _attributes
 * @type Object
 * @private
 */

/**
 * Public accessor to the unique name of the FlashAdapter instance.
 *
 * @id YAHOO.widget.FlashAdapter.toString
 * @method toString
 * @return {String} Unique name of the FlashAdapter instance.
 */

/**
 * Embeds the SWF in the page and associates it with this instance.
 *
 * @id YAHOO.widget.FlashAdapter._embedSWF
 * @method _embedSWF
 * @private
 */

/**
 * Handles or re-dispatches events received from the SWF.
 *
 * @id YAHOO.widget.FlashAdapter._eventHandler
 * @method _eventHandler
 * @private
 */

/**
 * Called when the SWF has been initialized.
 *
 * @id YAHOO.widget.FlashAdapter._loadHandler
 * @method _loadHandler
 * @private
 */

/**
 * Initializes the attributes.
 *
 * @id YAHOO.widget.FlashAdapter._initAttributes
 * @method _initAttributes
 * @private
 */

/**
 * @id YAHOO.widget.FlashAdapter.swfURL
 * @attribute swfURL
 * @description Absolute or relative URL to the SWF displayed by the FlashAdapter.
 * @type String
 */

/**
 * Getter for swfURL attribute.
 *
 * @id YAHOO.widget.FlashAdapter._getSWFURL
 * @method _getSWFURL
 * @private
 */

/**
 * Receives event messages from SWF and passes them to the correct instance
 * of FlashAdapter.
 *
 * @id YAHOO.widget.FlashAdapter.YAHOO.widget.FlashAdapter.eventHandler
 * @method YAHOO.widget.FlashAdapter.eventHandler
 * @static
 * @private
 */

/**
 * Chart class for the YUI Charts widget.
 *
 * @id YAHOO.widget.Chart
 * @namespace YAHOO.widget
 * @class Chart
 * @uses YAHOO.util.FlashAdapter
 * @constructor
 * @param type {String} The char type. May be "line", "column", "bar", or "pie"
 * @param containerId {HTMLElement} Container element for the Flash Player instance.
 * @param dataSource {YAHOO.util.DataSource} DataSource instance.
 * @param attributes {object} (optional) Object literal of configuration values.
 */

/**
 * Fires when the user moves the mouse over the bounds of an item renderer in the chart.
 *
 * @id YAHOO.widget.Chart.itemMouseOverEvent
 * @event itemMouseOverEvent
 * @param event.type {String} The event type
 * @param event.item {Object} The data displayed by the renderer
 * @param event.index {Number} The position within the series that the item appears.
 * @param event.seriesIndex {Number} The position within the series definition that the series appears.
 * @param event.x {Number} The horizontal position of the mouse, relative to the SWF.
 * @param event.y {Number} The vertical position of the mouse, relative to the SWF.
 */

/**
 * Fires when the user moves the mouse out of the bounds of an item renderer in the chart.
 *
 * @id YAHOO.widget.Chart.itemMouseOutEvent
 * @event itemMouseOutEvent
 * @param event.type {String} The event type
 * @param event.item {Object} The data displayed by the renderer
 * @param event.index {Number} The position within the series that the item appears.
 * @param event.seriesIndex {Number} The position within the series definition that the series appears.
 * @param event.x {Number} The horizontal position of the mouse, relative to the SWF.
 * @param event.y {Number} The vertical position of the mouse, relative to the SWF.
 */

/**
 * Fires when the user clicks an item renderer in the chart with the mouse.
 *
 * @id YAHOO.widget.Chart.itemClickEvent
 * @event itemClickEvent
 * @param event.type {String} The event type
 * @param event.item {Object} The data displayed by the renderer
 * @param event.index {Number} The position within the series that the item appears.
 * @param event.seriesIndex {Number} The position within the series definition that the series appears.
 * @param event.x {Number} The horizontal position of the mouse, relative to the SWF.
 * @param event.y {Number} The vertical position of the mouse, relative to the SWF.
 */

/**
 * Fires when the user double-clicks an item renderer in the chart with the mouse.
 *
 * @id YAHOO.widget.Chart.itemDoubleClickEvent
 * @event itemDoubleClickEvent
 * @param event.type {String} The event type
 * @param event.item {Object} The data displayed by the renderer
 * @param event.index {Number} The position within the series that the item appears.
 * @param event.seriesIndex {Number} The position within the series definition that the series appears.
 * @param event.x {Number} The horizontal position of the mouse, relative to the SWF.
 * @param event.y {Number} The vertical position of the mouse, relative to the SWF.
 */

/**
 * Fires when the user presses the mouse down on an item to initiate a drag action.
 *
 * @id YAHOO.widget.Chart.itemDragStartEvent
 * @event itemDragStartEvent
 * @param event.type {String} The event type
 * @param event.item {Object} The data displayed by the renderer
 * @param event.index {Number} The position within the series that the item appears.
 * @param event.seriesIndex {Number} The position within the series definition that the series appears.
 * @param event.x {Number} The horizontal position of the mouse, relative to the SWF.
 * @param event.y {Number} The vertical position of the mouse, relative to the SWF.
 */

/**
 * Fires when the user moves the mouse during a drag action.
 *
 * @id YAHOO.widget.Chart.itemDragEvent
 * @event itemDragEvent
 * @param event.type {String} The event type
 * @param event.item {Object} The data displayed by the renderer
 * @param event.index {Number} The position within the series that the item appears.
 * @param event.seriesIndex {Number} The position within the series definition that the series appears.
 * @param event.x {Number} The horizontal position of the mouse, relative to the SWF.
 * @param event.y {Number} The vertical position of the mouse, relative to the SWF.
 */

/**
 * Fires when the user releases the mouse during a drag action.
 *
 * @id YAHOO.widget.Chart.itemDragEndEvent
 * @event itemDragEndEvent
 * @param event.type {String} The event type
 * @param event.item {Object} The data displayed by the renderer
 * @param event.index {Number} The position within the series that the item appears.
 * @param event.seriesIndex {Number} The position within the series definition that the series appears.
 * @param event.x {Number} The horizontal position of the mouse, relative to the SWF.
 * @param event.y {Number} The vertical position of the mouse, relative to the SWF.
 */

/**
 * The type of this chart instance.
 * @id YAHOO.widget.Chart._type
 * @property _type
 * @type String
 * @private
 */

/**
 * The id returned from the DataSource's setInterval function.
 * @id YAHOO.widget.Chart._pollingID
 * @property _pollingID
 * @type Number
 * @private
 */

/**
 * The time, in ms, between requests for data.
 * @id YAHOO.widget.Chart._pollingInterval
 * @property _pollingInterval
 * @type Number
 * @private
 */

/**
 * Indicates whether all attributes have been set and
 * the dataSource may be passed to the SWF.
 * @id YAHOO.widget.Chart._initialized
 * @property _initialized
 * @type Boolean
 * @private
 */

/**
 * Public accessor to the unique name of the Chart instance.
 *
 * @id YAHOO.widget.Chart.toString
 * @method toString
 * @return {String} Unique name of the Chart instance.
 */

/**
 * Sets a single style value on the Chart instance.
 *
 * @id YAHOO.widget.Chart.setStyle
 * @method setStyle
 * @param name {String} Name of the Chart style value to change.
 * @param value {Object} New value to pass to the Chart style.
 */

/**
 * Resets all styles on the Chart instance.
 *
 * @id YAHOO.widget.Chart.setStyles
 * @method setStyles
 * @param styles {Object} Initializer for all Chart styles.
 */

/**
 * Sets the styles on all series in the Chart.
 *
 * @id YAHOO.widget.Chart.setSeriesStyles
 * @method setSeriesStyles
 * @param styles {Array} Initializer for all Chart series styles.
 */

/**
 * Initializes the attributes.
 *
 * @id YAHOO.widget.Chart._initAttributes
 * @method _initAttributes
 * @private
 */

/**
 * @id YAHOO.widget.Chart.request
 * @attribute request
 * @description Request to be sent to the Chart's DataSource.
 * @type String
 */

/**
 * @id YAHOO.widget.Chart.dataSource
 * @attribute dataSource
 * @description The DataSource instance to display in the Chart.
 * @type DataSource
 */

/**
 * @id YAHOO.widget.Chart.series
 * @attribute series
 * @description Defines the series to be displayed by the Chart.
 * @type Array
 */

/**
 * @id YAHOO.widget.Chart.categoryNames
 * @attribute categoryNames
 * @description Defines the names of the categories to be displayed in the Chart..
 * @type Array
 */

/**
 * @id YAHOO.widget.Chart.dataTipFunction
 * @attribute dataTipFunction
 * @description The string representation of a globally-accessible function
 * that may be called by the SWF to generate the datatip text for a Chart's item.
 * @type String
 */

/**
 * @id YAHOO.widget.Chart.polling
 * @attribute polling
 * @description A numeric value indicating the number of milliseconds between
 * polling requests to the DataSource.
 * @type Number
 */

/**
 * Called when the SWF is ready for communication. Sets the type, initializes
 * the styles, and sets the DataSource.
 *
 * @id YAHOO.widget.Chart._loadHandler
 * @method _loadHandler
 * @private
 */

/**
 * Sends the request to the DataSource.
 *
 * @id YAHOO.widget.Chart._refreshData
 * @method _refreshData
 * @private
 */

/**
 * Called when the DataSource receives new data. The series definitions are used
 * to build a data provider for the SWF chart.
 *
 * @id YAHOO.widget.Chart._loadDataHandler
 * @method _loadDataHandler
 * @private
 */

/**
 * Storage for the request attribute.
 *
 * @id YAHOO.widget.Chart._request
 * @property _request
 * @private
 */

/**
 * Getter for the request attribute.
 *
 * @id YAHOO.widget.Chart._getRequest
 * @method _getRequest
 * @private
 */

/**
 * Setter for the request attribute.
 *
 * @id YAHOO.widget.Chart._setRequest
 * @method _setRequest
 * @private
 */

/**
 * Storage for the dataSource attribute.
 *
 * @id YAHOO.widget.Chart._dataSource
 * @property _dataSource
 * @private
 */

/**
 * Getter for the dataSource attribute.
 *
 * @id YAHOO.widget.Chart._getDataSource
 * @method _getDataSource
 * @private
 */

/**
 * Setter for the dataSource attribute.
 *
 * @id YAHOO.widget.Chart._setDataSource
 * @method _setDataSource
 * @private
 */

/**
 * Storage for the series attribute.
 *
 * @id YAHOO.widget.Chart._seriesDefs
 * @property _seriesDefs
 * @private
 */

/**
 * Getter for the series attribute.
 *
 * @id YAHOO.widget.Chart._getSeriesDefs
 * @method _getSeriesDefs
 * @private
 */

/**
 * Setter for the series attribute.
 *
 * @id YAHOO.widget.Chart._setSeriesDefs
 * @method _setSeriesDefs
 * @private
 */

/**
 * Getter for the categoryNames attribute.
 *
 * @id YAHOO.widget.Chart._getCategoryNames
 * @method _getCategoryNames
 * @private
 */

/**
 * Setter for the categoryNames attribute.
 *
 * @id YAHOO.widget.Chart._setCategoryNames
 * @method _setCategoryNames
 * @private
 */

/**
 * Storage for the dataTipFunction attribute.
 *
 * @id YAHOO.widget.Chart._dataTipFunction
 * @property _dataTipFunction
 * @private
 */

/**
 * Getter for the dataTipFunction attribute.
 *
 * @id YAHOO.widget.Chart._getDataTipFunction
 * @method _getDataTipFunction
 * @private
 */

/**
 * Setter for the dataTipFunction attribute.
 *
 * @id YAHOO.widget.Chart._setDataTipFunction
 * @method _setDataTipFunction
 * @private
 */

/**
 * Getter for the polling attribute.
 *
 * @id YAHOO.widget.Chart._getPolling
 * @method _getPolling
 * @private
 */

/**
 * Setter for the polling attribute.
 *
 * @id YAHOO.widget.Chart._setPolling
 * @method _setPolling
 * @private
 */

/**
 * Storage for the dataTipFunction attribute.
 *
 * @id YAHOO.widget.Chart.Chart.SWFURL
 * @property Chart.SWFURL
 * @private
 * @static
 * @final
 * @default "assets/charts.swf"
 */

/**
 * PieChart class for the YUI Charts widget.
 *
 * @id YAHOO.widget.PieChart
 * @namespace YAHOO.widget
 * @class PieChart
 * @uses YAHOO.widget.CartesianChart
 * @constructor
 * @param containerId {HTMLElement} Container element for the Flash Player instance.
 * @param dataSource {YAHOO.util.DataSource} DataSource instance.
 * @param attributes {object} (optional) Object literal of configuration values.
 */

/**
 * Initializes the attributes.
 *
 * @id YAHOO.widget.PieChart._initAttributes
 * @method _initAttributes
 * @private
 */

/**
 * @id YAHOO.widget.PieChart.dataField
 * @attribute dataField
 * @description The field in each item that corresponds to the data value.
 * @type String
 */

/**
 * @id YAHOO.widget.PieChart.categoryField
 * @attribute categoryField
 * @description The field in each item that corresponds to the category value.
 * @type String
 */

/**
 * Getter for the dataField attribute.
 *
 * @id YAHOO.widget.PieChart._getDataField
 * @method _getDataField
 * @private
 */

/**
 * Setter for the dataField attribute.
 *
 * @id YAHOO.widget.PieChart._setDataField
 * @method _setDataField
 * @private
 */

/**
 * Getter for the categoryField attribute.
 *
 * @id YAHOO.widget.PieChart._getCategoryField
 * @method _getCategoryField
 * @private
 */

/**
 * Setter for the categoryField attribute.
 *
 * @id YAHOO.widget.PieChart._setCategoryField
 * @method _setCategoryField
 * @private
 */

/**
 * CartesianChart class for the YUI Charts widget.
 *
 * @id YAHOO.widget.CartesianChart
 * @namespace YAHOO.widget
 * @class CartesianChart
 * @uses YAHOO.widget.Charts
 * @constructor
 * @param type {String} The char type. May be "line", "column", or "bar"
 * @param containerId {HTMLElement} Container element for the Flash Player instance.
 * @param dataSource {YAHOO.util.DataSource} DataSource instance.
 * @param attributes {object} (optional) Object literal of configuration values.
 */

/**
 * Initializes the attributes.
 *
 * @id YAHOO.widget.CartesianChart._initAttributes
 * @method _initAttributes
 * @private
 */

/**
 * @id YAHOO.widget.CartesianChart.xField
 * @attribute xField
 * @description The field in each item that corresponds to a value on the x axis.
 * @type String
 */

/**
 * @id YAHOO.widget.CartesianChart.yField
 * @attribute yField
 * @description The field in each item that corresponds to a value on the x axis.
 * @type String
 */

/**
 * @id YAHOO.widget.CartesianChart.xAxis
 * @attribute xAxis
 * @description A custom configuration for the horizontal x axis.
 * @type Axis
 */

/**
 * @id YAHOO.widget.CartesianChart.yAxis
 * @attribute yAxis
 * @description A custom configuration for the vertical y axis.
 * @type Axis
 */

/**
 * Getter for the xField attribute.
 *
 * @id YAHOO.widget.CartesianChart._getXField
 * @method _getXField
 * @private
 */

/**
 * Setter for the xField attribute.
 *
 * @id YAHOO.widget.CartesianChart._setXField
 * @method _setXField
 * @private
 */

/**
 * Getter for the yField attribute.
 *
 * @id YAHOO.widget.CartesianChart._getYField
 * @method _getYField
 * @private
 */

/**
 * Setter for the yField attribute.
 *
 * @id YAHOO.widget.CartesianChart._setYField
 * @method _setYField
 * @private
 */

/**
 * Setter for the xAxis attribute.
 *
 * @id YAHOO.widget.CartesianChart._setXAxis
 * @method _setXAxis
 * @private
 */

/**
 * Getter for the yAxis attribute.
 *
 * @id YAHOO.widget.CartesianChart._setYAxis
 * @method _setYAxis
 * @private
 */

/**
 * LineChart class for the YUI Charts widget.
 *
 * @id YAHOO.widget.LineChart
 * @namespace YAHOO.widget
 * @class LineChart
 * @uses YAHOO.widget.CartesianChart
 * @constructor
 * @param containerId {HTMLElement} Container element for the Flash Player instance.
 * @param dataSource {YAHOO.util.DataSource} DataSource instance.
 * @param attributes {object} (optional) Object literal of configuration values.
 */

/**
 * ColumnChart class for the YUI Charts widget.
 *
 * @id YAHOO.widget.ColumnChart
 * @namespace YAHOO.widget
 * @class ColumnChart
 * @uses YAHOO.widget.CartesianChart
 * @constructor
 * @param containerId {HTMLElement} Container element for the Flash Player instance.
 * @param dataSource {YAHOO.util.DataSource} DataSource instance.
 * @param attributes {object} (optional) Object literal of configuration values.
 */

/**
 * BarChart class for the YUI Charts widget.
 *
 * @id YAHOO.widget.BarChart
 * @namespace YAHOO.widget
 * @class BarChart
 * @uses YAHOO.widget.CartesianChart
 * @constructor
 * @param containerId {HTMLElement} Container element for the Flash Player instance.
 * @param dataSource {YAHOO.util.DataSource} DataSource instance.
 * @param attributes {object} (optional) Object literal of configuration values.
 */

/**
 * Defines a CartesianChart's vertical or horizontal axis.
 *
 * @id YAHOO.widget.Axis
 * @namespace YAHOO.widget
 * @class Axis
 * @constructor
 */

/**
 * The type of axis.
 *
 * @id YAHOO.widget.Axis.type
 * @property type
 * @type String
 */

/**
 * The direction in which the axis is drawn. May be "horizontal" or "vertical".
 *
 * @id YAHOO.widget.Axis.orientation
 * @property orientation
 * @type String
 */

/**
 * If true, the items on the axis will be drawn in opposite direction.
 *
 * @id YAHOO.widget.Axis.reverse
 * @property reverse
 * @type Boolean
 */

/**
 * A string reference to the globally-accessible function that may be called to
 * determine each of the label values for this axis.
 *
 * @id YAHOO.widget.Axis.labelFunction
 * @property labelFunction
 * @type String
 */

/**
 * If true, labels that overlap previously drawn labels on the axis will be hidden.
 *
 * @id YAHOO.widget.Axis.hideOverlappingLabels
 * @property hideOverlappingLabels
 * @type Boolean
 */

/**
 * A type of axis whose units are measured in numeric values.
 *
 * @id YAHOO.widget.NumericAxis
 * @namespace YAHOO.widget
 * @class NumericAxis
 * @constructor
 */

/**
 * The minimum value drawn by the axis. If not set explicitly, the axis minimum
 * will be calculated automatically.
 *
 * @id YAHOO.widget.NumericAxis.minimum
 * @property minimum
 * @type Number
 */

/**
 * The maximum value drawn by the axis. If not set explicitly, the axis maximum
 * will be calculated automatically.
 *
 * @id YAHOO.widget.NumericAxis.maximum
 * @property maximum
 * @type Number
 */

/**
 * The spacing between major intervals on this axis.
 *
 * @id YAHOO.widget.NumericAxis.majorUnit
 * @property majorUnit
 * @type Number
 */

/**
 * The spacing between minor intervals on this axis.
 *
 * @id YAHOO.widget.NumericAxis.minorUnit
 * @property minorUnit
 * @type Number
 */

/**
 * If true, the labels, ticks, gridlines, and other objects will snap to
 * the nearest major or minor unit. If false, their position will be based
 * on the minimum value.
 *
 * @id YAHOO.widget.NumericAxis.snapToUnits
 * @property snapToUnits
 * @type Boolean
 */

/**
 * If true, and the bounds are calculated automatically, either the minimum or
 * maximum will be set to zero.
 *
 * @id YAHOO.widget.NumericAxis.alwaysShowZero
 * @property alwaysShowZero
 * @type Boolean
 */

/**
 * The scaling algorithm to use on this axis. May be "linear" or "logarithmic".
 *
 * @id YAHOO.widget.NumericAxis.scale
 * @property scale
 * @type String
 */

/**
 * A type of axis whose units are measured in time-based values.
 *
 * @id YAHOO.widget.TimeAxis
 * @namespace YAHOO.widget
 * @class TimeAxis
 * @constructor
 */

/**
 * The minimum value drawn by the axis. If not set explicitly, the axis minimum
 * will be calculated automatically.
 *
 * @id YAHOO.widget.TimeAxis.minimum
 * @property minimum
 * @type Date
 */

/**
 * The maximum value drawn by the axis. If not set explicitly, the axis maximum
 * will be calculated automatically.
 *
 * @id YAHOO.widget.TimeAxis.maximum
 * @property maximum
 * @type Number
 */

/**
 * The spacing between major intervals on this axis.
 *
 * @id YAHOO.widget.TimeAxis.majorUnit
 * @property majorUnit
 * @type Number
 */

/**
 * The time unit used by the majorUnit.
 *
 * @id YAHOO.widget.TimeAxis.majorTimeUnit
 * @property majorTimeUnit
 * @type String
 */

/**
 * The spacing between minor intervals on this axis.
 *
 * @id YAHOO.widget.TimeAxis.majorUnit
 * @property majorUnit
 * @type Number
 */

/**
 * The time unit used by the minorUnit.
 *
 * @id YAHOO.widget.TimeAxis.majorTimeUnit
 * @property majorTimeUnit
 * @type String
 */

/**
 * If true, the labels, ticks, gridlines, and other objects will snap to
 * the nearest major or minor unit. If false, their position will be based
 * on the minimum value.
 *
 * @id YAHOO.widget.TimeAxis.snapToUnits
 * @property snapToUnits
 * @type Boolean
 */

/**
 * A type of axis that displays items in categories.
 *
 * @id YAHOO.widget.CategoryAxis
 * @namespace YAHOO.widget
 * @class CategoryAxis
 * @constructor
 */

/**
 * A list of category names to display along this axis.
 *
 * @id YAHOO.widget.CategoryAxis.categoryNames
 * @property categoryNames
 * @type Array
 */

/**
 * Series class for the YUI Charts widget.
 *
 * @id YAHOO.widget.Series
 * @namespace YAHOO.widget
 * @class Series
 * @constructor
 */

/**
 * The type of series.
 *
 * @id YAHOO.widget.Series.type
 * @property type
 * @type String
 */

/**
 * The human-readable name of the series.
 *
 * @id YAHOO.widget.Series.displayName
 * @property displayName
 * @type String
 */

/**
 * CartesianSeries class for the YUI Charts widget.
 *
 * @id YAHOO.widget.CartesianSeries
 * @namespace YAHOO.widget
 * @class CartesianSeries
 * @constructor
 */

/**
 * The field used to access the x-axis value from the items from the data source.
 *
 * @id YAHOO.widget.CartesianSeries.xField
 * @property xField
 * @type String
 */

/**
 * The field used to access the y-axis value from the items from the data source.
 *
 * @id YAHOO.widget.CartesianSeries.yField
 * @property yField
 * @type String
 */

/**
 * ColumnSeries class for the YUI Charts widget.
 *
 * @id YAHOO.widget.ColumnSeries
 * @namespace YAHOO.widget
 * @class ColumnSeries
 * @constructor
 */

/**
 * LineSeries class for the YUI Charts widget.
 *
 * @id YAHOO.widget.LineSeries
 * @namespace YAHOO.widget
 * @class LineSeries
 * @constructor
 */

/**
 * BarSeries class for the YUI Charts widget.
 *
 * @id YAHOO.widget.BarSeries
 * @namespace YAHOO.widget
 * @class BarSeries
 * @constructor
 */

/**
 * PieSeries class for the YUI Charts widget.
 *
 * @id YAHOO.widget.PieSeries
 * @namespace YAHOO.widget
 * @class PieSeries
 * @constructor
 */

/**
 * Provides color conversion and validation utils
 * @id YAHOO.util.Color
 * @class YAHOO.util.Color
 * @namespace YAHOO.util
 */

/**
 * Converts 0-1 to 0-255
 * @id YAHOO.util.Color.real2dec
 * @method real2dec
 * @param n {float} the number to convert
 * @return {int} a number 0-255
 */

/**
 * Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]
 * @id YAHOO.util.Color.hsv2rgb
 * @method hsv2rgb
 * @param h {int|[int, float, float]} the hue, or an
 *        array containing all three parameters
 * @param s {float} the saturation
 * @param v {float} the value/brightness
 * @return {Number[]} the red, green, blue values in
 *          decimal.
 */

/**
 * Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]
 * @id YAHOO.util.Color.rgb2hsv
 * @method rgb2hsv
 * @param r {int|Number[]} the red value, or an
 *        array containing all three parameters
 * @param g {int} the green value
 * @param b {int} the blue value
 * @return {[int, float, float]} the value converted to hsv
 */

/**
 * Converts decimal rgb values into a hex string
 * 255,255,255 -> FFFFFF
 * @id YAHOO.util.Color.rgb2hex
 * @method rgb2hex
 * @param r {int|Number[]} the red value, or an
 *        array containing all three parameters
 * @param g {int} the green value
 * @param b {int} the blue value
 * @return {string} the hex string
 */

/**
 * Converts an int 0...255 to hex pair 00...FF
 * @id YAHOO.util.Color.dec2hex
 * @method dec2hex
 * @param n {int} the number to convert
 * @return {string} the hex equivalent
 */

/**
 * Converts a hex pair 00...FF to an int 0...255
 * @id YAHOO.util.Color.hex2dec
 * @method hex2dec
 * @param str {string} the hex pair to convert
 * @return {int} the decimal
 */

/**
 * Converts a hex string to rgb
 * @id YAHOO.util.Color.hex2rgb
 * @method hex2rgb
 * @param str {string} the hex string
 * @return {Number[]} an array containing the rgb values
 */

/**
 * Returns the closest websafe color to the supplied rgb value.
 * @id YAHOO.util.Color.websafe
 * @method websafe
 * @param r {int|Number[]} the red value, or an
 *        array containing all three parameters
 * @param g {int} the green value
 * @param b {int} the blue value
 * @return {Number[]} an array containing the closes
 *                           websafe rgb colors.
 */

/**
 * Creates the host element if it doesn't exist
 * @id YAHOO.util.Color._createHostElement
 * @method _createHostElement
 * @private
 */

/**
 * A widget to select colors
 * @id YAHOO.widget.ColorPicker
 * @namespace YAHOO.widget
 * @class YAHOO.widget.ColorPicker
 * @extends YAHOO.util.Element
 * @constructor
 * @param {HTMLElement | String | Object} el(optional) The html
 * element that represents the colorpicker, or the attribute object to use.
 * An element will be created if none provided.
 * @param {Object} attr (optional) A key map of the colorpicker's
 * initial attributes.  Ignored if first arg is attributes object.
 */

/**
 * The element ids used by this control
 * @id YAHOO.widget.ColorPicker.ID
 * @property ID
 * @final
 */

/**
 * The id for the "red" form field
 * @id YAHOO.widget.ColorPicker.ID.R
 * @property ID.R
 * @type String
 * @final
 * @default yui-picker-r
 */

/**
 * The id for the "red" hex pair output
 * @id YAHOO.widget.ColorPicker.ID.R_HEX
 * @property ID.R_HEX
 * @type String
 * @final
 * @default yui-picker-rhex
 */

/**
 * The id for the "green" form field
 * @id YAHOO.widget.ColorPicker.ID.G
 * @property ID.G
 * @type String
 * @final
 * @default yui-picker-g
 */

/**
 * The id for the "green" hex pair output
 * @id YAHOO.widget.ColorPicker.ID.G_HEX
 * @property ID.G_HEX
 * @type String
 * @final
 * @default yui-picker-ghex
 */

/**
 * The id for the "blue" form field
 * @id YAHOO.widget.ColorPicker.ID.B
 * @property ID.B
 * @type String
 * @final
 * @default yui-picker-b
 */

/**
 * The id for the "blue" hex pair output
 * @id YAHOO.widget.ColorPicker.ID.B_HEX
 * @property ID.B_HEX
 * @type String
 * @final
 * @default yui-picker-bhex
 */

/**
 * The id for the "hue" form field
 * @id YAHOO.widget.ColorPicker.ID.H
 * @property ID.H
 * @type String
 * @final
 * @default yui-picker-h
 */

/**
 * The id for the "saturation" form field
 * @id YAHOO.widget.ColorPicker.ID.S
 * @property ID.S
 * @type String
 * @final
 * @default yui-picker-s
 */

/**
 * The id for the "value" form field
 * @id YAHOO.widget.ColorPicker.ID.V
 * @property ID.V
 * @type String
 * @final
 * @default yui-picker-v
 */

/**
 * The id for the picker region slider
 * @id YAHOO.widget.ColorPicker.ID.PICKER_BG
 * @property ID.PICKER_BG
 * @type String
 * @final
 * @default yui-picker-bg
 */

/**
 * The id for the picker region thumb
 * @id YAHOO.widget.ColorPicker.ID.PICKER_THUMB
 * @property ID.PICKER_THUMB
 * @type String
 * @final
 * @default yui-picker-thumb
 */

/**
 * The id for the hue slider
 * @id YAHOO.widget.ColorPicker.ID.HUE_BG
 * @property ID.HUE_BG
 * @type String
 * @final
 * @default yui-picker-hue-bg
 */

/**
 * The id for the hue thumb
 * @id YAHOO.widget.ColorPicker.ID.HUE_THUMB
 * @property ID.HUE_THUMB
 * @type String
 * @final
 * @default yui-picker-hue-thumb
 */

/**
 * The id for the hex value form field
 * @id YAHOO.widget.ColorPicker.ID.HEX
 * @property ID.HEX
 * @type String
 * @final
 * @default yui-picker-hex
 */

/**
 * The id for the color swatch
 * @id YAHOO.widget.ColorPicker.ID.SWATCH
 * @property ID.SWATCH
 * @type String
 * @final
 * @default yui-picker-swatch
 */

/**
 * The id for the websafe color swatch
 * @id YAHOO.widget.ColorPicker.ID.WEBSAFE_SWATCH
 * @property ID.WEBSAFE_SWATCH
 * @type String
 * @final
 * @default yui-picker-websafe-swatch
 */

/**
 * The id for the control details
 * @id YAHOO.widget.ColorPicker.ID.CONTROLS
 * @property ID.CONTROLS
 * @final
 * @default yui-picker-controls
 */

/**
 * The id for the rgb controls
 * @id YAHOO.widget.ColorPicker.ID.RGB_CONTROLS
 * @property ID.RGB_CONTROLS
 * @final
 * @default yui-picker-rgb-controls
 */

/**
 * The id for the hsv controls
 * @id YAHOO.widget.ColorPicker.ID.HSV_CONTROLS
 * @property ID.HSV_CONTROLS
 * @final
 * @default yui-picker-hsv-controls
 */

/**
 * The id for the hsv controls
 * @id YAHOO.widget.ColorPicker.ID.HEX_CONTROLS
 * @property ID.HEX_CONTROLS
 * @final
 * @default yui-picker-hex-controls
 */

/**
 * The id for the hex summary
 * @id YAHOO.widget.ColorPicker.ID.HEX_SUMMARY
 * @property ID.HEX_SUMMARY
 * @final
 * @default yui-picker-hex-summary
 */

/**
 * The id for the controls section header
 * @id YAHOO.widget.ColorPicker.ID.CONTROLS_LABEL
 * @property ID.CONTROLS_LABEL
 * @final
 * @default yui-picker-controls-label
 */

/**
 * Constants for any script-generated messages.  The values here
 * are the default messages.  They can be updated by providing
 * the complete list to the constructor for the "txt" attribute.
 * @id YAHOO.widget.ColorPicker.TXT
 * @property TXT
 * @final
 */

/**
 * Constants for the default image locations for img tags that are
 * generated by the control.  They can be modified by passing the
 * complete list to the contructor for the "images" attribute
 * @id YAHOO.widget.ColorPicker.IMAGE
 * @property IMAGE
 * @final
 */

/**
 * Constants for the control's default default values
 * @id YAHOO.widget.ColorPicker.DEFAULT
 * @property DEFAULT
 * @final
 */

/**
 * Constants for the control's configuration attributes
 * @id YAHOO.widget.ColorPicker.OPT
 * @property OPT
 * @final
 */

/**
 * Moves the hue slider into the position dictated by the current state
 * of the control
 * @id YAHOO.widget.ColorPicker._updateHueSlider
 * @method _updateHueSlider
 * @private
 */

/**
 * Moves the picker slider into the position dictated by the current state
 * of the control
 * @id YAHOO.widget.ColorPicker._updatePickerSlider
 * @method _updatePickerSlider
 * @private
 */

/**
 * Moves the sliders into the position dictated by the current state
 * of the control
 * @id YAHOO.widget.ColorPicker._updateSliders
 * @method _updateSliders
 * @private
 */

/**
 * Sets the control to the specified rgb value and
 * moves the sliders to the proper positions
 * @id YAHOO.widget.ColorPicker.setValue
 * @method setValue
 * @param rgb {Number[]} the rgb value
 * @param silent {boolean} whether or not to fire the change event
 */

/**
 * The hue slider
 * @id YAHOO.widget.ColorPicker.hueSlider
 * @property hueSlider
 * @type YAHOO.widget.Slider
 */

/**
 * The picker region
 * @id YAHOO.widget.ColorPicker.pickerSlider
 * @property pickerSlider
 * @type YAHOO.widget.Slider
 */

/**
 * Translates the slider value into hue, int[0,359]
 * @id YAHOO.widget.ColorPicker._getH
 * @method _getH
 * @private
 * @return {int} the hue from 0 to 359
 */

/**
 * Translates the slider value into saturation, int[0,1], left to right
 * @id YAHOO.widget.ColorPicker._getS
 * @method _getS
 * @private
 * @return {int} the saturation from 0 to 1
 */

/**
 * Translates the slider value into value/brightness, int[0,1], top
 * to bottom
 * @id YAHOO.widget.ColorPicker._getV
 * @method _getV
 * @private
 * @return {int} the value from 0 to 1
 */

/**
 * Updates the background of the swatch with the current rbg value.
 * Also updates the websafe swatch to the closest websafe color
 * @id YAHOO.widget.ColorPicker._updateSwatch
 * @method _updateSwatch
 * @private
 */

/**
 * Reads the sliders and converts the values to RGB, updating the
 * internal state for all the individual form fields
 * @id YAHOO.widget.ColorPicker._getValuesFromSliders
 * @method _getValuesFromSliders
 * @private
 */

/**
 * Updates the form field controls with the state data contained
 * in the control.
 * @id YAHOO.widget.ColorPicker._updateFormFields
 * @method _updateFormFields
 * @private
 */

/**
 * Event handler for the hue slider.
 * @id YAHOO.widget.ColorPicker._onHueSliderChange
 * @method _onHueSliderChange
 * @param newOffset {int} pixels from the start position
 * @private
 */

/**
 * Event handler for the picker slider, which controls the
 * saturation and value/brightness.
 * @id YAHOO.widget.ColorPicker._onPickerSliderChange
 * @method _onPickerSliderChange
 * @param newOffset {{x: int, y: int}} x/y pixels from the start position
 * @private
 */

/**
 * Key map to well-known commands for txt field input
 * @id YAHOO.widget.ColorPicker._getCommand
 * @method _getCommand
 * @param e {Event} the keypress or keydown event
 * @return {int} a command code
 * <ul>
 * <li>0 = not a number, letter in range, or special key</li>
 * <li>1 = number</li>
 * <li>2 = a-fA-F</li>
 * <li>3 = increment (up arrow)</li>
 * <li>4 = decrement (down arrow)</li>
 * <li>5 = special key (tab, delete, return, escape, left, right)</li>
 * <li>6 = return</li>
 * </ul>
 * @private
 */

/**
 * Use the value of the text field to update the control
 * @id YAHOO.widget.ColorPicker._hexFieldKeypress
 * @method _hexFieldKeypress
 * @param e {Event} an event
 * @param el {HTMLElement} the field
 * @param prop {string} the key to the linked property
 * @private
 */

/**
 * Handle keypress on one of the rgb or hsv fields.
 * @id YAHOO.widget.ColorPicker._rgbFieldKeypress
 * @method _rgbFieldKeypress
 * @param e {Event} the keypress event
 * @param el {HTMLElement} the field
 * @param prop {string} the key to the linked property
 * @private
 */

/**
 * Handle keydown on the hex field
 * @id YAHOO.widget.ColorPicker._hexFieldKeypress
 * @method _hexFieldKeypress
 * @param e {Event} the keypress event
 * @param el {HTMLElement} the field
 * @param prop {string} the key to the linked property
 * @private
 */

/**
 * Allows numbers and special chars, and by default allows a-f.
 * Used for the hex field keypress handler.
 * @id YAHOO.widget.ColorPicker._hexOnly
 * @method _hexOnly
 * @param e {Event} the event
 * @param numbersOnly omits a-f if set to true
 * @private
 * @return {boolean} false if we are canceling the event
 */

/**
 * Allows numbers and special chars only.  Used for the
 * rgb and hsv fields keypress handler.
 * @id YAHOO.widget.ColorPicker._numbersOnly
 * @method _numbersOnly
 * @param e {Event} the event
 * @private
 * @return {boolean} false if we are canceling the event
 */

/**
 * Returns the element reference that is saved.  The id can be either
 * the element id, or the key for this id in the "id" config attribute.
 * For instance, the host element id can be obtained by passing its
 * id (default: "yui_picker") or by its key "YUI_PICKER".
 * @id YAHOO.widget.ColorPicker.getElement
 * @param id {string} the element id, or key
 * @return {HTMLElement} a reference to the element
 * @method getElement
 */

/**
 * Updates the rgb attribute with the current state of the r,g,b
 * fields.  This is invoked from change listeners on these
 * attributes to facilitate updating these values from the
 * individual form fields
 * @id YAHOO.widget.ColorPicker._updateRGB
 * @method _updateRGB
 * @private
 */

/**
 * Sets the initial state of the sliders
 * @id YAHOO.widget.ColorPicker.initPicker
 * @method initPicker
 */

/**
 * Sets up the config attributes and the change listeners for this
 * properties
 * @id YAHOO.widget.ColorPicker.initAttributes
 * @method initAttributes
 * @param attr An object containing default attribute values
 */

/**
 * The size of the picker. Trying to change this is not recommended.
 * @id YAHOO.widget.ColorPicker.pickersize
 * @attribute pickersize
 * @default 180
 * @type int
 */

/**
 * The current hue value 0-360
 * @id YAHOO.widget.ColorPicker.hue
 * @attribute hue
 * @type int
 */

/**
 * The current saturation value 0-100
 * @id YAHOO.widget.ColorPicker.saturation
 * @attribute saturation
 * @type int
 */

/**
 * The current value/brightness value 0-100
 * @id YAHOO.widget.ColorPicker.value
 * @attribute value
 * @type int
 */

/**
 * The current red value 0-255
 * @id YAHOO.widget.ColorPicker.red
 * @attribute red
 * @type int
 */

/**
 * The current green value 0-255
 * @id YAHOO.widget.ColorPicker.green
 * @attribute green
 * @type int
 */

/**
 * The current blue value 0-255
 * @id YAHOO.widget.ColorPicker.blue
 * @attribute blue
 * @type int
 */

/**
 * The current hex value #000000-#FFFFFF, without the #
 * @id YAHOO.widget.ColorPicker.hex
 * @attribute hex
 * @type string
 */

/**
 * The current rgb value.  Updates the state of all of the
 * other value fields.  Read-only: use setValue to set the
 * controls rgb value.
 * @id YAHOO.widget.ColorPicker.hex
 * @attribute hex
 * @type Number[]
 * @readonly
 */

/**
 * If the color picker will live inside of a container object,
 * set, provide a reference to it so the control can use the
 * container's events.
 * @id YAHOO.widget.ColorPicker.container
 * @attribute container
 * @type YAHOO.widget.Panel
 */

/**
 * The closest current websafe value
 * @id YAHOO.widget.ColorPicker.websafe
 * @attribute websafe
 * @type int
 */

/**
 * A list of element ids and/or element references used by the
 * control.  The default is the this.ID list, and can be customized
 * by passing a list in the contructor
 * @id YAHOO.widget.ColorPicker.ids
 * @attribute ids
 * @type {referenceid: realid}
 * @writeonce
 */

/**
 * A list of txt strings for internationalization.  Default
 * is this.TXT
 * @id YAHOO.widget.ColorPicker.txt
 * @attribute txt
 * @type {key: txt}
 * @writeonce
 */

/**
 * The img src default list
 * is this.IMAGES
 * @id YAHOO.widget.ColorPicker.images
 * @attribute images
 * @type {key: image}
 * @writeonce
 */

/**
 * The element refs used by this control.  Set at initialization
 * @id YAHOO.widget.ColorPicker.elements
 * @attribute elements
 * @type {id: HTMLElement}
 * @readonly
 */

/**
 * Hide/show the entire set of controls
 * @id YAHOO.widget.ColorPicker.showcontrols
 * @attribute showcontrols
 * @type boolean
 * @default true
 */

/**
 * Hide/show the rgb controls
 * @id YAHOO.widget.ColorPicker.showrgbcontrols
 * @attribute showrgbcontrols
 * @type boolean
 * @default true
 */

/**
 * Hide/show the hsv controls
 * @id YAHOO.widget.ColorPicker.showhsvcontrols
 * @attribute showhsvcontrols
 * @type boolean
 * @default false
 */

/**
 * Hide/show the hex controls
 * @id YAHOO.widget.ColorPicker.showhexcontrols
 * @attribute showhexcontrols
 * @type boolean
 * @default true
 */

/**
 * Hide/show the websafe swatch
 * @id YAHOO.widget.ColorPicker.showwebsafe
 * @attribute showwebsafe
 * @type boolean
 * @default true
 */

/**
 * Hide/show the hex summary
 * @id YAHOO.widget.ColorPicker.showhexsummary
 * @attribute showhexsummary
 * @type boolean
 * @default true
 */

/**
 * The Connection Manager singleton provides methods for creating and managing
 * asynchronous transactions.
 *
 * @id YAHOO.util.Connect
 * @class Connect
 */

/**
 * @id YAHOO.util.Connect._msxml_progid
 * @description Array of MSFT ActiveX ids for XMLHttpRequest.
 * @property _msxml_progid
 * @private
 * @static
 * @type array
 */

/**
 * @id YAHOO.util.Connect._http_header
 * @description Object literal of HTTP header(s)
 * @property _http_header
 * @private
 * @static
 * @type object
 */

/**
 * @id YAHOO.util.Connect._has_http_headers
 * @description Determines if HTTP headers are set.
 * @property _has_http_headers
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._use_default_post_header
 * @description Determines if a default header of
 * Content-Type of 'application/x-www-form-urlencoded'
 * will be added to any client HTTP headers sent for POST
 * transactions.
 * @property _use_default_post_header
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._default_post_header
 * @description The default header used for POST transactions.
 * @property _default_post_header
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._default_form_header
 * @description The default header used for transactions involving the
 * use of HTML forms.
 * @property _default_form_header
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._use_default_xhr_header
 * @description Determines if a default header of
 * 'X-Requested-With: XMLHttpRequest'
 * will be added to each transaction.
 * @property _use_default_xhr_header
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._default_xhr_header
 * @description The default header value for the label
 * "X-Requested-With".  This is sent with each
 * transaction, by default, to identify the
 * request as being made by YUI Connection Manager.
 * @property _default_xhr_header
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._has_default_header
 * @description Determines if custom, default headers
 * are set for each transaction.
 * @property _has_default_header
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._has_default_header
 * @description Determines if custom, default headers
 * are set for each transaction.
 * @property _has_default_header
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._isFormSubmit
 * @description Property modified by setForm() to determine if the data
 * should be submitted as an HTML form.
 * @property _isFormSubmit
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._isFileUpload
 * @description Property modified by setForm() to determine if a file(s)
 * upload is expected.
 * @property _isFileUpload
 * @private
 * @static
 * @type boolean
 */

/**
 * @id YAHOO.util.Connect._formNode
 * @description Property modified by setForm() to set a reference to the HTML
 * form node if the desired action is file upload.
 * @property _formNode
 * @private
 * @static
 * @type object
 */

/**
 * @id YAHOO.util.Connect._sFormData
 * @description Property modified by setForm() to set the HTML form data
 * for each transaction.
 * @property _sFormData
 * @private
 * @static
 * @type string
 */

/**
 * @id YAHOO.util.Connect._poll
 * @description Collection of polling references to the polling mechanism in handleReadyState.
 * @property _poll
 * @private
 * @static
 * @type object
 */

/**
 * @id YAHOO.util.Connect._timeOut
 * @description Queue of timeout values for each transaction callback with a defined timeout value.
 * @property _timeOut
 * @private
 * @static
 * @type object
 */

/**
 * @id YAHOO.util.Connect._polling_interval
 * @description The polling frequency, in milliseconds, for HandleReadyState.
 * when attempting to determine a transaction's XHR readyState.
 * The default is 50 milliseconds.
 * @property _polling_interval
 * @private
 * @static
 * @type int
 */

/**
 * @id YAHOO.util.Connect._transaction_id
 * @description A transaction counter that increments the transaction id for each transaction.
 * @property _transaction_id
 * @private
 * @static
 * @type int
 */

/**
 * @id YAHOO.util.Connect._submitElementValue
 * @description Tracks the name-value pair of the "clicked" submit button if multiple submit
 * buttons are present in an HTML form; and, if YAHOO.util.Event is available.
 * @property _submitElementValue
 * @private
 * @static
 * @type string
 */

/**
 * @id YAHOO.util.Connect._hasSubmitListener
 * @description Determines whether YAHOO.util.Event is available and returns true or false.
 * If true, an event listener is bound at the document level to trap click events that
 * resolve to a target type of "Submit".  This listener will enable setForm() to determine
 * the clicked "Submit" value in a multi-Submit button, HTML form.
 * @property _hasSubmitListener
 * @private
 * @static
 */

/**
 * @id YAHOO.util.Connect.startEvent
 * @description Custom event that fires at the start of a transaction
 * @property startEvent
 * @private
 * @static
 * @type CustomEvent
 */

/**
 * @id YAHOO.util.Connect.completeEvent
 * @description Custom event that fires when a transaction response has completed.
 * @property completeEvent
 * @private
 * @static
 * @type CustomEvent
 */

/**
 * @id YAHOO.util.Connect.successEvent
 * @description Custom event that fires when handleTransactionResponse() determines a
 * response in the HTTP 2xx range.
 * @property successEvent
 * @private
 * @static
 * @type CustomEvent
 */

/**
 * @id YAHOO.util.Connect.failureEvent
 * @description Custom event that fires when handleTransactionResponse() determines a
 * response in the HTTP 4xx/5xx range.
 * @property failureEvent
 * @private
 * @static
 * @type CustomEvent
 */

/**
 * @id YAHOO.util.Connect.failureEvent
 * @description Custom event that fires when handleTransactionResponse() determines a
 * response in the HTTP 4xx/5xx range.
 * @property failureEvent
 * @private
 * @static
 * @type CustomEvent
 */

/**
 * @id YAHOO.util.Connect.abortEvent
 * @description Custom event that fires when a transaction is successfully aborted.
 * @property abortEvent
 * @private
 * @static
 * @type CustomEvent
 */

/**
 * @id YAHOO.util.Connect._customEvents
 * @description A reference table that maps callback custom events members to its specific
 * event name.
 * @property _customEvents
 * @private
 * @static
 * @type object
 */

/**
 * @id YAHOO.util.Connect.setProgId
 * @description Member to add an ActiveX id to the existing xml_progid array.
 * In the event(unlikely) a new ActiveX id is introduced, it can be added
 * without internal code modifications.
 * @method setProgId
 * @public
 * @static
 * @param {string} id The ActiveX id to be added to initialize the XHR object.
 * @return void
 */

/**
 * @id YAHOO.util.Connect.setDefaultPostHeader
 * @description Member to override the default POST header.
 * @method setDefaultPostHeader
 * @public
 * @static
 * @param {boolean} b Set and use default header - true or false .
 * @return void
 */

/**
 * @id YAHOO.util.Connect.setDefaultXhrHeader
 * @description Member to override the default transaction header..
 * @method setDefaultXhrHeader
 * @public
 * @static
 * @param {boolean} b Set and use default header - true or false .
 * @return void
 */

/**
 * @id YAHOO.util.Connect.setPollingInterval
 * @description Member to modify the default polling interval.
 * @method setPollingInterval
 * @public
 * @static
 * @param {int} i The polling interval in milliseconds.
 * @return void
 */

/**
 * @id YAHOO.util.Connect.createXhrObject
 * @description Instantiates a XMLHttpRequest object and returns an object with two properties:
 * the XMLHttpRequest instance and the transaction id.
 * @method createXhrObject
 * @private
 * @static
 * @param {int} transactionId Property containing the transaction id for this transaction.
 * @return object
 */

/**
 * @id YAHOO.util.Connect.getConnectionObject
 * @description This method is called by asyncRequest to create a
 * valid connection object for the transaction.  It also passes a
 * transaction id and increments the transaction id counter.
 * @method getConnectionObject
 * @private
 * @static
 * @return {object}
 */

/**
 * @id YAHOO.util.Connect.asyncRequest
 * @description Method for initiating an asynchronous request via the XHR object.
 * @method asyncRequest
 * @public
 * @static
 * @param {string} method HTTP transaction method
 * @param {string} uri Fully qualified path of resource
 * @param {callback} callback User-defined callback function or object
 * @param {string} postData POST body
 * @return {object} Returns the connection object
 */

/**
 * @id YAHOO.util.Connect.initCustomEvents
 * @description This method creates and subscribes custom events,
 * specific to each transaction
 * @method initCustomEvents
 * @private
 * @static
 * @param {object} o The connection object
 * @param {callback} callback The user-defined callback object
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.handleReadyState
 * @description This method serves as a timer that polls the XHR object's readyState
 * property during a transaction, instead of binding a callback to the
 * onreadystatechange event.  Upon readyState 4, handleTransactionResponse
 * will process the response, and the timer will be cleared.
 * @method handleReadyState
 * @private
 * @static
 * @param {object} o The connection object
 * @param {callback} callback The user-defined callback object
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.handleTransactionResponse
 * @description This method attempts to interpret the server response and
 * determine whether the transaction was successful, or if an error or
 * exception was encountered.
 * @method handleTransactionResponse
 * @private
 * @static
 * @param {object} o The connection object
 * @param {object} callback The user-defined callback object
 * @param {boolean} isAbort Determines if the transaction was terminated via abort().
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.createResponseObject
 * @description This method evaluates the server response, creates and returns the results via
 * its properties.  Success and failure cases will differ in the response
 * object's property values.
 * @method createResponseObject
 * @private
 * @static
 * @param {object} o The connection object
 * @param {callbackArg} callbackArg The user-defined argument or arguments to be passed to the callback
 * @return {object}
 */

/**
 * @id YAHOO.util.Connect.createExceptionObject
 * @description If a transaction cannot be completed due to dropped or closed connections,
 * there may be not be enough information to build a full response object.
 * The failure callback will be fired and this specific condition can be identified
 * by a status property value of 0.
 *
 * If an abort was successful, the status property will report a value of -1.
 *
 * @method createExceptionObject
 * @private
 * @static
 * @param {int} tId The Transaction Id
 * @param {callbackArg} callbackArg The user-defined argument or arguments to be passed to the callback
 * @param {boolean} isAbort Determines if the exception case is caused by a transaction abort
 * @return {object}
 */

/**
 * @id YAHOO.util.Connect.initHeader
 * @description Method that initializes the custom HTTP headers for the each transaction.
 * @method initHeader
 * @public
 * @static
 * @param {string} label The HTTP header label
 * @param {string} value The HTTP header value
 * @param {string} isDefault Determines if the specific header is a default header
 * automatically sent with each transaction.
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.setHeader
 * @description Accessor that sets the HTTP headers for each transaction.
 * @method setHeader
 * @private
 * @static
 * @param {object} o The connection object for the transaction.
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.resetDefaultHeaders
 * @description Resets the default HTTP headers object
 * @method resetDefaultHeaders
 * @public
 * @static
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.setForm
 * @description This method assembles the form label and value pairs and
 * constructs an encoded string.
 * asyncRequest() will automatically initialize the transaction with a
 * a HTTP header Content-Type of application/x-www-form-urlencoded.
 * @method setForm
 * @public
 * @static
 * @param {string || object} form id or name attribute, or form object.
 * @param {boolean} optional enable file upload.
 * @param {boolean} optional enable file upload over SSL in IE only.
 * @return {string} string of the HTML form field name and value pairs..
 */

/**
 * @id YAHOO.util.Connect.resetFormState
 * @description Resets HTML form properties when an HTML form or HTML form
 * with file upload transaction is sent.
 * @method resetFormState
 * @private
 * @static
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.createFrame
 * @description Creates an iframe to be used for form file uploads.  It is remove from the
 * document upon completion of the upload transaction.
 * @method createFrame
 * @private
 * @static
 * @param {string} optional qualified path of iframe resource for SSL in IE.
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.appendPostData
 * @description Parses the POST data and creates hidden form elements
 * for each key-value, and appends them to the HTML form object.
 * @method appendPostData
 * @private
 * @static
 * @param {string} postData The HTTP POST data
 * @return {array} formElements Collection of hidden fields.
 */

/**
 * @id YAHOO.util.Connect.uploadFile
 * @description Uploads HTML form, inclusive of files/attachments, using the
 * iframe created in createFrame to facilitate the transaction.
 * @method uploadFile
 * @private
 * @static
 * @param {int} id The transaction id.
 * @param {object} callback User-defined callback object.
 * @param {string} uri Fully qualified path of resource.
 * @param {string} postData POST data to be submitted in addition to HTML form.
 * @return {void}
 */

/**
 * @id YAHOO.util.Connect.abort
 * @description Method to terminate a transaction, if it has not reached readyState 4.
 * @method abort
 * @public
 * @static
 * @param {object} o The connection object returned by asyncRequest.
 * @param {object} callback  User-defined callback object.
 * @param {string} isTimeout boolean to indicate if abort resulted from a callback timeout.
 * @return {boolean}
 */

/**
 * @id YAHOO.util.Connect.isCallInProgress
 * @description Determines if the transaction is still being processed.
 * @method isCallInProgress
 * @public
 * @static
 * @param {object} o The connection object returned by asyncRequest
 * @return {boolean}
 */

/**
 * @id YAHOO.util.Connect.releaseObject
 * @description Dereference the XHR instance and the connection object after the transaction is completed.
 * @method releaseObject
 * @private
 * @static
 * @param {object} o The connection object
 * @return {void}
 */

/**
 * Config is a utility used within an Object to allow the implementer to
 * maintain a list of local configuration properties and listen for changes
 * to those properties dynamically using CustomEvent. The initial values are
 * also maintained so that the configuration can be reset at any given point
 * to its initial state.
 * @id YAHOO.util.Config
 * @namespace YAHOO.util
 * @class Config
 * @constructor
 * @param {Object} owner The owner Object to which this Config Object belongs
 */

/**
 * Constant representing the CustomEvent type for the config changed event.
 * @id YAHOO.util.Config.YAHOO.util.Config.CONFIG_CHANGED_EVENT
 * @property YAHOO.util.Config.CONFIG_CHANGED_EVENT
 * @private
 * @static
 * @final
 */

/**
 * Constant representing the boolean type string
 * @id YAHOO.util.Config.YAHOO.util.Config.BOOLEAN_TYPE
 * @property YAHOO.util.Config.BOOLEAN_TYPE
 * @private
 * @static
 * @final
 */

/**
 * Object reference to the owner of this Config Object
 * @id YAHOO.util.Config.owner
 * @property owner
 * @type Object
 */

/**
 * Boolean flag that specifies whether a queue is currently
 * being executed
 * @id YAHOO.util.Config.queueInProgress
 * @property queueInProgress
 * @type Boolean
 */

/**
 * Maintains the local collection of configuration property objects and
 * their specified values
 * @id YAHOO.util.Config.config
 * @property config
 * @private
 * @type Object
 */

/**
 * Maintains the local collection of configuration property objects as
 * they were initially applied.
 * This object is used when resetting a property.
 * @id YAHOO.util.Config.initialConfig
 * @property initialConfig
 * @private
 * @type Object
 */

/**
 * Maintains the local, normalized CustomEvent queue
 * @id YAHOO.util.Config.eventQueue
 * @property eventQueue
 * @private
 * @type Object
 */

/**
 * Custom Event, notifying subscribers when Config properties are set
 * (setProperty is called without the silent flag
 * @id YAHOO.util.Config.configChangedEvent
 * @event configChangedEvent
 */

/**
 * Initializes the configuration Object and all of its local members.
 * @id YAHOO.util.Config.init
 * @method init
 * @param {Object} owner The owner Object to which this Config
 * Object belongs
 */

/**
 * Validates that the value passed in is a Boolean.
 * @id YAHOO.util.Config.checkBoolean
 * @method checkBoolean
 * @param {Object} val The value to validate
 * @return {Boolean} true, if the value is valid
 */

/**
 * Validates that the value passed in is a number.
 * @id YAHOO.util.Config.checkNumber
 * @method checkNumber
 * @param {Object} val The value to validate
 * @return {Boolean} true, if the value is valid
 */

/**
 * Fires a configuration property event using the specified value.
 * @id YAHOO.util.Config.fireEvent
 * @method fireEvent
 * @private
 * @param {String} key The configuration property's name
 * @param {value} Object The value of the correct type for the property
 */

/**
 * Adds a property to the Config Object's private config hash.
 * @id YAHOO.util.Config.addProperty
 * @method addProperty
 * @param {String} key The configuration property's name
 * @param {Object} propertyObject The Object containing all of this
 * property's arguments
 */

/**
 * Returns a key-value configuration map of the values currently set in
 * the Config Object.
 * @id YAHOO.util.Config.getConfig
 * @method getConfig
 * @return {Object} The current config, represented in a key-value map
 */

/**
 * Returns the value of specified property.
 * @id YAHOO.util.Config.getProperty
 * @method getProperty
 * @param {String} key The name of the property
 * @return {Object}  The value of the specified property
 */

/**
 * Resets the specified property's value to its initial value.
 * @id YAHOO.util.Config.resetProperty
 * @method resetProperty
 * @param {String} key The name of the property
 * @return {Boolean} True is the property was reset, false if not
 */

/**
 * Sets the value of a property. If the silent property is passed as
 * true, the property's event will not be fired.
 * @id YAHOO.util.Config.setProperty
 * @method setProperty
 * @param {String} key The name of the property
 * @param {String} value The value to set the property to
 * @param {Boolean} silent Whether the value should be set silently,
 * without firing the property event.
 * @return {Boolean} True, if the set was successful, false if it failed.
 */

/**
 * Sets the value of a property and queues its event to execute. If the
 * event is already scheduled to execute, it is
 * moved from its current position to the end of the queue.
 * @id YAHOO.util.Config.queueProperty
 * @method queueProperty
 * @param {String} key The name of the property
 * @param {String} value The value to set the property to
 * @return {Boolean}  true, if the set was successful, false if
 * it failed.
 */

/**
 * Fires the event for a property using the property's current value.
 * @id YAHOO.util.Config.refireEvent
 * @method refireEvent
 * @param {String} key The name of the property
 */

/**
 * Applies a key-value Object literal to the configuration, replacing
 * any existing values, and queueing the property events.
 * Although the values will be set, fireQueue() must be called for their
 * associated events to execute.
 * @id YAHOO.util.Config.applyConfig
 * @method applyConfig
 * @param {Object} userConfig The configuration Object literal
 * @param {Boolean} init  When set to true, the initialConfig will
 * be set to the userConfig passed in, so that calling a reset will
 * reset the properties to the passed values.
 */

/**
 * Refires the events for all configuration properties using their
 * current values.
 * @id YAHOO.util.Config.refresh
 * @method refresh
 */

/**
 * Fires the normalized list of queued property change events
 * @id YAHOO.util.Config.fireQueue
 * @method fireQueue
 */

/**
 * Subscribes an external handler to the change event for any
 * given property.
 * @id YAHOO.util.Config.subscribeToConfigEvent
 * @method subscribeToConfigEvent
 * @param {String} key The property name
 * @param {Function} handler The handler function to use subscribe to
 * the property's event
 * @param {Object} obj The Object to use for scoping the event handler
 * (see CustomEvent documentation)
 * @param {Boolean} override Optional. If true, will override "this"
 * within the handler to map to the scope Object passed into the method.
 * @return {Boolean} True, if the subscription was successful,
 * otherwise false.
 */

/**
 * Unsubscribes an external handler from the change event for any
 * given property.
 * @id YAHOO.util.Config.unsubscribeFromConfigEvent
 * @method unsubscribeFromConfigEvent
 * @param {String} key The property name
 * @param {Function} handler The handler function to use subscribe to
 * the property's event
 * @param {Object} obj The Object to use for scoping the event
 * handler (see CustomEvent documentation)
 * @return {Boolean} True, if the unsubscription was successful,
 * otherwise false.
 */

/**
 * Returns a string representation of the Config object
 * @id YAHOO.util.Config.toString
 * @method toString
 * @return {String} The Config object in string format.
 */

/**
 * Returns a string representation of the Config object's current
 * CustomEvent queue
 * @id YAHOO.util.Config.outputEventQueue
 * @method outputEventQueue
 * @return {String} The string list of CustomEvents currently queued
 * for execution
 */

/**
 * Sets all properties to null, unsubscribes all listeners from each
 * property's change event and all listeners from the configChangedEvent.
 * @id YAHOO.util.Config.destroy
 * @method destroy
 */

/**
 * Checks to determine if a particular function/Object pair are already
 * subscribed to the specified CustomEvent
 * @id YAHOO.util.Config.YAHOO.util.Config.alreadySubscribed
 * @method YAHOO.util.Config.alreadySubscribed
 * @static
 * @param {YAHOO.util.CustomEvent} evt The CustomEvent for which to check
 * the subscriptions
 * @param {Function} fn The function to look for in the subscribers list
 * @param {Object} obj The execution scope Object for the subscription
 * @return {Boolean} true, if the function/Object pair is already subscribed
 * to the CustomEvent passed in
 */

/**
 * Module is a JavaScript representation of the Standard Module Format.
 * Standard Module Format is a simple standard for markup containers where
 * child nodes representing the header, body, and footer of the content are
 * denoted using the CSS classes "hd", "bd", and "ft" respectively.
 * Module is the base class for all other classes in the YUI
 * Container package.
 * @id YAHOO.widget.Module
 * @namespace YAHOO.widget
 * @class Module
 * @constructor
 * @param {String} el The element ID representing the Module <em>OR</em>
 * @param {HTMLElement} el The element representing the Module
 * @param {Object} userConfig The configuration Object literal containing
 * the configuration that should be set for this module. See configuration
 * documentation for more details.
 */

/**
 * Constant representing the name of the Module's events
 * @id YAHOO.widget.Module.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Module's configuration properties
 * @id YAHOO.widget.Module.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the prefix path to use for non-secure images
 * @id YAHOO.widget.Module.YAHOO.widget.Module.IMG_ROOT
 * @property YAHOO.widget.Module.IMG_ROOT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the prefix path to use for securely served images
 * @id YAHOO.widget.Module.YAHOO.widget.Module.IMG_ROOT_SSL
 * @property YAHOO.widget.Module.IMG_ROOT_SSL
 * @static
 * @final
 * @type String
 */

/**
 * Constant for the default CSS class name that represents a Module
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_MODULE
 * @property YAHOO.widget.Module.CSS_MODULE
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the module header
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_HEADER
 * @property YAHOO.widget.Module.CSS_HEADER
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the module body
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_BODY
 * @property YAHOO.widget.Module.CSS_BODY
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the module footer
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_FOOTER
 * @property YAHOO.widget.Module.CSS_FOOTER
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the url for the "src" attribute of the iframe
 * used to monitor changes to the browser's base font size
 * @id YAHOO.widget.Module.YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL
 * @property YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL
 * @static
 * @final
 * @type String
 */

/**
 * Singleton CustomEvent fired when the font size is changed in the browser.
 * Opera's "zoom" functionality currently does not support text
 * size detection.
 * @id YAHOO.widget.Module.YAHOO.widget.Module.textResizeEvent
 * @event YAHOO.widget.Module.textResizeEvent
 */

/**
 * The class's constructor function
 * @id YAHOO.widget.Module.contructor
 * @property contructor
 * @type Function
 */

/**
 * The main module element that contains the header, body, and footer
 * @id YAHOO.widget.Module.element
 * @property element
 * @type HTMLElement
 */

/**
 * The header element, denoted with CSS class "hd"
 * @id YAHOO.widget.Module.header
 * @property header
 * @type HTMLElement
 */

/**
 * The body element, denoted with CSS class "bd"
 * @id YAHOO.widget.Module.body
 * @property body
 * @type HTMLElement
 */

/**
 * The footer element, denoted with CSS class "ft"
 * @id YAHOO.widget.Module.footer
 * @property footer
 * @type HTMLElement
 */

/**
 * The id of the element
 * @id YAHOO.widget.Module.id
 * @property id
 * @type String
 */

/**
 * A string representing the root path for all images created by
 * a Module instance.
 * @id YAHOO.widget.Module.imageRoot
 * @deprecated It is recommend that any images for a Module be applied
 * via CSS using the "background-image" property.
 * @property imageRoot
 * @type String
 */

/**
 * Initializes the custom events for Module which are fired
 * automatically at appropriate times by the Module class.
 * @id YAHOO.widget.Module.initEvents
 * @method initEvents
 */

/**
 * CustomEvent fired prior to class initalization.
 * @id YAHOO.widget.Module.beforeInitEvent
 * @event beforeInitEvent
 * @param {class} classRef class reference of the initializing
 * class, such as this.beforeInitEvent.fire(Module)
 */

/**
 * CustomEvent fired after class initalization.
 * @id YAHOO.widget.Module.initEvent
 * @event initEvent
 * @param {class} classRef class reference of the initializing
 * class, such as this.beforeInitEvent.fire(Module)
 */

/**
 * CustomEvent fired when the Module is appended to the DOM
 * @id YAHOO.widget.Module.appendEvent
 * @event appendEvent
 */

/**
 * CustomEvent fired before the Module is rendered
 * @id YAHOO.widget.Module.beforeRenderEvent
 * @event beforeRenderEvent
 */

/**
 * CustomEvent fired after the Module is rendered
 * @id YAHOO.widget.Module.renderEvent
 * @event renderEvent
 */

/**
 * CustomEvent fired when the header content of the Module
 * is modified
 * @id YAHOO.widget.Module.changeHeaderEvent
 * @event changeHeaderEvent
 * @param {String/HTMLElement} content String/element representing
 * the new header content
 */

/**
 * CustomEvent fired when the body content of the Module is modified
 * @id YAHOO.widget.Module.changeBodyEvent
 * @event changeBodyEvent
 * @param {String/HTMLElement} content String/element representing
 * the new body content
 */

/**
 * CustomEvent fired when the footer content of the Module
 * is modified
 * @id YAHOO.widget.Module.changeFooterEvent
 * @event changeFooterEvent
 * @param {String/HTMLElement} content String/element representing
 * the new footer content
 */

/**
 * CustomEvent fired when the content of the Module is modified
 * @id YAHOO.widget.Module.changeContentEvent
 * @event changeContentEvent
 */

/**
 * CustomEvent fired when the Module is destroyed
 * @id YAHOO.widget.Module.destroyEvent
 * @event destroyEvent
 */

/**
 * CustomEvent fired before the Module is shown
 * @id YAHOO.widget.Module.beforeShowEvent
 * @event beforeShowEvent
 */

/**
 * CustomEvent fired after the Module is shown
 * @id YAHOO.widget.Module.showEvent
 * @event showEvent
 */

/**
 * CustomEvent fired before the Module is hidden
 * @id YAHOO.widget.Module.beforeHideEvent
 * @event beforeHideEvent
 */

/**
 * CustomEvent fired after the Module is hidden
 * @id YAHOO.widget.Module.hideEvent
 * @event hideEvent
 */

/**
 * String representing the current user-agent platform
 * @id YAHOO.widget.Module.platform
 * @property platform
 * @type String
 */

/**
 * String representing the user-agent of the browser
 * @id YAHOO.widget.Module.browser
 * @deprecated Use YAHOO.env.ua
 * @property browser
 * @type String
 */

/**
 * Boolean representing whether or not the current browsing context is
 * secure (https)
 * @id YAHOO.widget.Module.isSecure
 * @property isSecure
 * @type Boolean
 */

/**
 * Initializes the custom events for Module which are fired
 * automatically at appropriate times by the Module class.
 * @id YAHOO.widget.Module.initEvents
 * @event initEvents
 */

/**
 * Specifies whether the Module is visible on the page.
 * @id YAHOO.widget.Module.visible
 * @config visible
 * @type Boolean
 * @default true
 */

/**
 * Object or array of objects representing the ContainerEffect
 * classes that are active for animating the container.
 * @id YAHOO.widget.Module.effect
 * @config effect
 * @type Object
 * @default null
 */

/**
 * Specifies whether to create a special proxy iframe to monitor
 * for user font resizing in the document
 * @id YAHOO.widget.Module.monitorresize
 * @config monitorresize
 * @type Boolean
 * @default true
 */

/**
 * Specifies if the module should be rendered as the first child
 * of document.body or appended as the last child when render is called
 * with document.body as the "appendToNode".
 * <p>
 * Appending to the body while the DOM is still being constructed can
 * lead to Operation Aborted errors in IE hence this flag is set to
 * false by default.
 * </p>
 *
 * @id YAHOO.widget.Module.appendtodocumentbody
 * @config appendtodocumentbody
 * @type Boolean
 * @default false
 */

/**
 * The Module class's initialization method, which is executed for
 * Module and all of its subclasses. This method is automatically
 * called by the constructor, and  sets up all DOM references for
 * pre-existing markup, and creates required markup if it is not
 * already present.
 * @id YAHOO.widget.Module.init
 * @method init
 * @param {String} el The element ID representing the Module <em>OR</em>
 * @param {HTMLElement} el The element representing the Module
 * @param {Object} userConfig The configuration Object literal
 * containing the configuration that should be set for this module.
 * See configuration documentation for more details.
 */

/**
 * The Module's Config object used for monitoring
 * configuration properties.
 * @id YAHOO.widget.Module.cfg
 * @property cfg
 * @type YAHOO.util.Config
 */

/**
 * Initialize an empty IFRAME that is placed out of the visible area
 * that can be used to detect text resize.
 * @id YAHOO.widget.Module.initResizeMonitor
 * @method initResizeMonitor
 */

/**
 * Create and initialize the text resize monitoring iframe.
 *
 * @id YAHOO.widget.Module._initResizeMonitor
 * @protected
 * @method _initResizeMonitor
 */

/**
 * Text resize monitor helper method.
 * Determines if the browser supports resize events on iframe content windows.
 *
 * @id YAHOO.widget.Module._supportsCWResize
 * @private
 * @method _supportsCWResize
 */

/**
 * Event handler fired when the resize monitor element is resized.
 * @id YAHOO.widget.Module.onDomResize
 * @method onDomResize
 * @param {DOMEvent} e The DOM resize event
 * @param {Object} obj The scope object passed to the handler
 */

/**
 * Sets the Module's header content to the string specified, or appends
 * the passed element to the header. If no header is present, one will
 * be automatically created. An empty string can be passed to the method
 * to clear the contents of the header.
 *
 * @id YAHOO.widget.Module.setHeader
 * @method setHeader
 * @param {String} headerContent The string used to set the header.
 * As a convenience, non HTMLElement objects can also be passed into
 * the method, and will be treated as strings, with the header innerHTML
 * set to their default toString implementations.
 * <em>OR</em>
 * @param {HTMLElement} headerContent The HTMLElement to append to
 * the header
 */

/**
 * Appends the passed element to the header. If no header is present,
 * one will be automatically created.
 * @id YAHOO.widget.Module.appendToHeader
 * @method appendToHeader
 * @param {HTMLElement} element The element to append to the header
 */

/**
 * Sets the Module's body content to the HTML specified, or appends the
 * passed element to the body. If no body is present, one will be
 * automatically created. An empty string can be passed to the method
 * to clear the contents of the body.
 * @id YAHOO.widget.Module.setBody
 * @method setBody
 * @param {String} bodyContent The HTML used to set the body.
 * As a convenience, non HTMLElement objects can also be passed into
 * the method, and will be treated as strings, with the body innerHTML
 * set to their default toString implementations.
 * <em>OR</em>
 * @param {HTMLElement} bodyContent The HTMLElement to append to the body
 */

/**
 * Appends the passed element to the body. If no body is present, one
 * will be automatically created.
 * @id YAHOO.widget.Module.appendToBody
 * @method appendToBody
 * @param {HTMLElement} element The element to append to the body
 */

/**
 * Sets the Module's footer content to the HTML specified, or appends
 * the passed element to the footer. If no footer is present, one will
 * be automatically created. An empty string can be passed to the method
 * to clear the contents of the footer.
 * @id YAHOO.widget.Module.setFooter
 * @method setFooter
 * @param {String} footerContent The HTML used to set the footer
 * As a convenience, non HTMLElement objects can also be passed into
 * the method, and will be treated as strings, with the footer innerHTML
 * set to their default toString implementations.
 * <em>OR</em>
 * @param {HTMLElement} footerContent The HTMLElement to append to
 * the footer
 */

/**
 * Appends the passed element to the footer. If no footer is present,
 * one will be automatically created.
 * @id YAHOO.widget.Module.appendToFooter
 * @method appendToFooter
 * @param {HTMLElement} element The element to append to the footer
 */

/**
 * Renders the Module by inserting the elements that are not already
 * in the main Module into their correct places. Optionally appends
 * the Module to the specified node prior to the render's execution.
 * <p>
 * For Modules without existing markup, the appendToNode argument
 * is REQUIRED. If this argument is ommitted and the current element is
 * not present in the document, the function will return false,
 * indicating that the render was a failure.
 * </p>
 * <p>
 * NOTE: As of 2.3.1, if the appendToNode is the document's body element
 * then the module is rendered as the first child of the body element,
 * and not appended to it, to avoid Operation Aborted errors in IE when
 * rendering the module before window's load event is fired. You can
 * use the appendtodocumentbody configuration property to change this
 * to append to document.body if required.
 * </p>
 * @id YAHOO.widget.Module.render
 * @method render
 * @param {String} appendToNode The element id to which the Module
 * should be appended to prior to rendering <em>OR</em>
 * @param {HTMLElement} appendToNode The element to which the Module
 * should be appended to prior to rendering
 * @param {HTMLElement} moduleElement OPTIONAL. The element that
 * represents the actual Standard Module container.
 * @return {Boolean} Success or failure of the render
 */

/**
 * Removes the Module element from the DOM and sets all child elements
 * to null.
 * @id YAHOO.widget.Module.destroy
 * @method destroy
 */

/**
 * Shows the Module element by setting the visible configuration
 * property to true. Also fires two events: beforeShowEvent prior to
 * the visibility change, and showEvent after.
 * @id YAHOO.widget.Module.show
 * @method show
 */

/**
 * Hides the Module element by setting the visible configuration
 * property to false. Also fires two events: beforeHideEvent prior to
 * the visibility change, and hideEvent after.
 * @id YAHOO.widget.Module.hide
 * @method hide
 */

/**
 * Default event handler for changing the visibility property of a
 * Module. By default, this is achieved by switching the "display" style
 * between "block" and "none".
 * This method is responsible for firing showEvent and hideEvent.
 * @id YAHOO.widget.Module.configVisible
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 * @method configVisible
 */

/**
 * Default event handler for the "monitorresize" configuration property
 * @id YAHOO.widget.Module.configMonitorResize
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 * @method configMonitorResize
 */

/**
 * This method is a protected helper, used when constructing the DOM structure for the module
 * to account for situations which may cause Operation Aborted errors in IE. It should not
 * be used for general DOM construction.
 * <p>
 * If the parentNode is not document.body, the element is appended as the last element.
 * </p>
 * <p>
 * If the parentNode is document.body the element is added as the first child to help
 * prevent Operation Aborted errors in IE.
 * </p>
 *
 * @id YAHOO.widget.Module._addToParent
 * @param {parentNode} The HTML element to which the element will be added
 * @param {element} The HTML element to be added to parentNode's children
 * @method _addToParent
 * @protected
 */

/**
 * Returns a String representation of the Object.
 * @id YAHOO.widget.Module.toString
 * @method toString
 * @return {String} The string representation of the Module
 */

/**
 * Overlay is a Module that is absolutely positioned above the page flow. It
 * has convenience methods for positioning and sizing, as well as options for
 * controlling zIndex and constraining the Overlay's position to the current
 * visible viewport. Overlay also contains a dynamicly generated IFRAME which
 * is placed beneath it for Internet Explorer 6 and 5.x so that it will be
 * properly rendered above SELECT elements.
 * @id YAHOO.widget.Overlay
 * @namespace YAHOO.widget
 * @class Overlay
 * @extends YAHOO.widget.Module
 * @param {String} el The element ID representing the Overlay <em>OR</em>
 * @param {HTMLElement} el The element representing the Overlay
 * @param {Object} userConfig The configuration object literal containing
 * the configuration that should be set for this Overlay. See configuration
 * documentation for more details.
 * @constructor
 */

/**
 * Constant representing the name of the Overlay's events
 * @id YAHOO.widget.Overlay.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Overlay's configuration properties
 * @id YAHOO.widget.Overlay.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * The URL that will be placed in the iframe
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.IFRAME_SRC
 * @property YAHOO.widget.Overlay.IFRAME_SRC
 * @static
 * @final
 * @type String
 */

/**
 * Number representing how much the iframe shim should be offset from each
 * side of an Overlay instance, in pixels.
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.IFRAME_SRC
 * @property YAHOO.widget.Overlay.IFRAME_SRC
 * @default 3
 * @static
 * @final
 * @type Number
 */

/**
 * Number representing the minimum distance an Overlay instance should be
 * positioned relative to the boundaries of the browser's viewport, in pixels.
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.VIEWPORT_OFFSET
 * @property YAHOO.widget.Overlay.VIEWPORT_OFFSET
 * @default 10
 * @static
 * @final
 * @type Number
 */

/**
 * Constant representing the top left corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.TOP_LEFT
 * @property YAHOO.widget.Overlay.TOP_LEFT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the top right corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.TOP_RIGHT
 * @property YAHOO.widget.Overlay.TOP_RIGHT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the top bottom left corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.BOTTOM_LEFT
 * @property YAHOO.widget.Overlay.BOTTOM_LEFT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the bottom right corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.BOTTOM_RIGHT
 * @property YAHOO.widget.Overlay.BOTTOM_RIGHT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the default CSS class used for an Overlay
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.CSS_OVERLAY
 * @property YAHOO.widget.Overlay.CSS_OVERLAY
 * @static
 * @final
 * @type String
 */

/**
 * A singleton CustomEvent used for reacting to the DOM event for
 * window scroll
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowScrollEvent
 * @event YAHOO.widget.Overlay.windowScrollEvent
 */

/**
 * A singleton CustomEvent used for reacting to the DOM event for
 * window resize
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowResizeEvent
 * @event YAHOO.widget.Overlay.windowResizeEvent
 */

/**
 * The DOM event handler used to fire the CustomEvent for window scroll
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowScrollHandler
 * @method YAHOO.widget.Overlay.windowScrollHandler
 * @static
 * @param {DOMEvent} e The DOM scroll event
 */

/**
 * The DOM event handler used to fire the CustomEvent for window resize
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowResizeHandler
 * @method YAHOO.widget.Overlay.windowResizeHandler
 * @static
 * @param {DOMEvent} e The DOM resize event
 */

/**
 * A boolean that indicated whether the window resize and scroll events have
 * already been subscribed to.
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay._initialized
 * @property YAHOO.widget.Overlay._initialized
 * @private
 * @type Boolean
 */

/**
 * The Overlay initialization method, which is executed for Overlay and
 * all of its subclasses. This method is automatically called by the
 * constructor, and  sets up all DOM references for pre-existing markup,
 * and creates required markup if it is not already present.
 * @id YAHOO.widget.Overlay.init
 * @method init
 * @param {String} el The element ID representing the Overlay <em>OR</em>
 * @param {HTMLElement} el The element representing the Overlay
 * @param {Object} userConfig The configuration object literal
 * containing the configuration that should be set for this Overlay.
 * See configuration documentation for more details.
 */

/**
 * Initializes the custom events for Overlay which are fired
 * automatically at appropriate times by the Overlay class.
 * @id YAHOO.widget.Overlay.initEvents
 * @method initEvents
 */

/**
 * CustomEvent fired before the Overlay is moved.
 * @id YAHOO.widget.Overlay.beforeMoveEvent
 * @event beforeMoveEvent
 * @param {Number} x x coordinate
 * @param {Number} y y coordinate
 */

/**
 * CustomEvent fired after the Overlay is moved.
 * @id YAHOO.widget.Overlay.moveEvent
 * @event moveEvent
 * @param {Number} x x coordinate
 * @param {Number} y y coordinate
 */

/**
 * Initializes the class's configurable properties which can be changed
 * using the Overlay's Config object (cfg).
 * @id YAHOO.widget.Overlay.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * The absolute x-coordinate position of the Overlay
 * @id YAHOO.widget.Overlay.x
 * @config x
 * @type Number
 * @default null
 */

/**
 * The absolute y-coordinate position of the Overlay
 * @id YAHOO.widget.Overlay.y
 * @config y
 * @type Number
 * @default null
 */

/**
 * An array with the absolute x and y positions of the Overlay
 * @id YAHOO.widget.Overlay.xy
 * @config xy
 * @type Number[]
 * @default null
 */

/**
 * The array of context arguments for context-sensitive positioning.
 * The format is: [id or element, element corner, context corner].
 * For example, setting this property to ["img1", "tl", "bl"] would
 * align the Overlay's top left corner to the context element's
 * bottom left corner.
 * @id YAHOO.widget.Overlay.context
 * @config context
 * @type Array
 * @default null
 */

/**
 * True if the Overlay should be anchored to the center of
 * the viewport.
 * @id YAHOO.widget.Overlay.fixedcenter
 * @config fixedcenter
 * @type Boolean
 * @default false
 */

/**
 * CSS width of the Overlay.
 * @id YAHOO.widget.Overlay.width
 * @config width
 * @type String
 * @default null
 */

/**
 * CSS height of the Overlay.
 * @id YAHOO.widget.Overlay.height
 * @config height
 * @type String
 * @default null
 */

/**
 * CSS z-index of the Overlay.
 * @id YAHOO.widget.Overlay.zIndex
 * @config zIndex
 * @type Number
 * @default null
 */

/**
 * True if the Overlay should be prevented from being positioned
 * out of the viewport.
 * @id YAHOO.widget.Overlay.constraintoviewport
 * @config constraintoviewport
 * @type Boolean
 * @default false
 */

/**
 * @id YAHOO.widget.Overlay.iframe
 * @config iframe
 * @description Boolean indicating whether or not the Overlay should
 * have an IFRAME shim; used to prevent SELECT elements from
 * poking through an Overlay instance in IE6.  When set to "true",
 * the iframe shim is created when the Overlay instance is intially
 * made visible.
 * @type Boolean
 * @default true for IE6 and below, false for all other browsers.
 */

/**
 * Moves the Overlay to the specified position. This function is
 * identical to calling this.cfg.setProperty("xy", [x,y]);
 * @id YAHOO.widget.Overlay.moveTo
 * @method moveTo
 * @param {Number} x The Overlay's new x position
 * @param {Number} y The Overlay's new y position
 */

/**
 * Adds a CSS class ("hide-scrollbars") and removes a CSS class
 * ("show-scrollbars") to the Overlay to fix a bug in Gecko on Mac OS X
 * (https://bugzilla.mozilla.org/show_bug.cgi?id=187435)
 * @id YAHOO.widget.Overlay.hideMacGeckoScrollbars
 * @method hideMacGeckoScrollbars
 */

/**
 * Adds a CSS class ("show-scrollbars") and removes a CSS class
 * ("hide-scrollbars") to the Overlay to fix a bug in Gecko on Mac OS X
 * (https://bugzilla.mozilla.org/show_bug.cgi?id=187435)
 * @id YAHOO.widget.Overlay.showMacGeckoScrollbars
 * @method showMacGeckoScrollbars
 */

/**
 * The default event handler fired when the "visible" property is
 * changed.  This method is responsible for firing showEvent
 * and hideEvent.
 * @id YAHOO.widget.Overlay.configVisible
 * @method configVisible
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Center event handler used for centering on scroll/resize, but only if
 * the Overlay is visible
 * @id YAHOO.widget.Overlay.doCenterOnDOMEvent
 * @method doCenterOnDOMEvent
 */

/**
 * The default event handler fired when the "fixedcenter" property
 * is changed.
 * @id YAHOO.widget.Overlay.configFixedCenter
 * @method configFixedCenter
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "height" property is changed.
 * @id YAHOO.widget.Overlay.configHeight
 * @method configHeight
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "width" property is changed.
 * @id YAHOO.widget.Overlay.configWidth
 * @method configWidth
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "zIndex" property is changed.
 * @id YAHOO.widget.Overlay.configzIndex
 * @method configzIndex
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "xy" property is changed.
 * @id YAHOO.widget.Overlay.configXY
 * @method configXY
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "x" property is changed.
 * @id YAHOO.widget.Overlay.configX
 * @method configX
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "y" property is changed.
 * @id YAHOO.widget.Overlay.configY
 * @method configY
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Shows the iframe shim, if it has been enabled.
 * @id YAHOO.widget.Overlay.showIframe
 * @method showIframe
 */

/**
 * Hides the iframe shim, if it has been enabled.
 * @id YAHOO.widget.Overlay.hideIframe
 * @method hideIframe
 */

/**
 * Syncronizes the size and position of iframe shim to that of its
 * corresponding Overlay instance.
 * @id YAHOO.widget.Overlay.syncIframe
 * @method syncIframe
 */

/**
 * Sets the zindex of the iframe shim, if it exists, based on the zindex of
 * the Overlay element. The zindex of the iframe is set to be one less
 * than the Overlay element's zindex.
 *
 * <p>NOTE: This method will not bump up the zindex of the Overlay element
 * to ensure that the iframe shim has a non-negative zindex.
 * If you require the iframe zindex to be 0 or higher, the zindex of
 * the Overlay element should be set to a value greater than 0, before
 * this method is called.
 * </p>
 * @id YAHOO.widget.Overlay.stackIframe
 * @method stackIframe
 */

/**
 * The default event handler fired when the "iframe" property is changed.
 * @id YAHOO.widget.Overlay.configIframe
 * @method configIframe
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Set's the container's XY value from DOM if not already set.
 *
 * Differs from syncPosition, in that the XY value is only sync'd with DOM if
 * not already set. The method also refire's the XY config property event, so any
 * beforeMove, Move event listeners are invoked.
 *
 * @id YAHOO.widget.Overlay._primeXYFromDOM
 * @method _primeXYFromDOM
 * @protected
 */

/**
 * The default event handler fired when the "constraintoviewport"
 * property is changed.
 * @id YAHOO.widget.Overlay.configConstrainToViewport
 * @method configConstrainToViewport
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for
 * the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "context" property
 * is changed.
 * @id YAHOO.widget.Overlay.configContext
 * @method configContext
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Aligns the Overlay to its context element using the specified corner
 * points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT,
 * and BOTTOM_RIGHT.
 * @id YAHOO.widget.Overlay.align
 * @method align
 * @param {String} elementAlign  The String representing the corner of
 * the Overlay that should be aligned to the context element
 * @param {String} contextAlign  The corner of the context element
 * that the elementAlign corner should stick to.
 */

/**
 * The default event handler executed when the moveEvent is fired, if the
 * "constraintoviewport" is set to true.
 * @id YAHOO.widget.Overlay.enforceConstraints
 * @method enforceConstraints
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Given x, y coordinate values, returns the calculated coordinates required to
 * position the Overlay if it is to be constrained to the viewport, based on the
 * current element size, viewport dimensions and scroll values.
 *
 * @id YAHOO.widget.Overlay.getConstrainedXY
 * @param {Number} x The X coordinate value to be constrained
 * @param {Number} y The Y coordinate value to be constrained
 * @return {Array} The constrained x and y coordinates at index 0 and 1 respectively;
 * @method getConstrainedXY
 */

/**
 * Centers the container in the viewport.
 * @id YAHOO.widget.Overlay.center
 * @method center
 */

/**
 * Synchronizes the Panel's "xy", "x", and "y" properties with the
 * Panel's position in the DOM. This is primarily used to update
 * position information during drag & drop.
 * @id YAHOO.widget.Overlay.syncPosition
 * @method syncPosition
 */

/**
 * Event handler fired when the resize monitor element is resized.
 * @id YAHOO.widget.Overlay.onDomResize
 * @method onDomResize
 * @param {DOMEvent} e The resize DOM event
 * @param {Object} obj The scope object
 */

/**
 * Places the Overlay on top of all other instances of
 * YAHOO.widget.Overlay.
 * @id YAHOO.widget.Overlay.bringToTop
 * @method bringToTop
 */

/**
 * Removes the Overlay element from the DOM and sets all child
 * elements to null.
 * @id YAHOO.widget.Overlay.destroy
 * @method destroy
 */

/**
 * Returns a String representation of the object.
 * @id YAHOO.widget.Overlay.toString
 * @method toString
 * @return {String} The string representation of the Overlay.
 */

/**
 * OverlayManager is used for maintaining the focus status of
 * multiple Overlays.
 * @id YAHOO.widget.OverlayManager
 * @namespace YAHOO.widget
 * @namespace YAHOO.widget
 * @class OverlayManager
 * @constructor
 * @param {Array} overlays Optional. A collection of Overlays to register
 * with the manager.
 * @param {Object} userConfig  The object literal representing the user
 * configuration of the OverlayManager
 */

/**
 * The CSS class representing a focused Overlay
 * @id YAHOO.widget.OverlayManager.OverlayManager.CSS_FOCUSED
 * @property OverlayManager.CSS_FOCUSED
 * @static
 * @final
 * @type String
 */

/**
 * The class's constructor function
 * @id YAHOO.widget.OverlayManager.contructor
 * @property contructor
 * @type Function
 */

/**
 * The array of Overlays that are currently registered
 * @id YAHOO.widget.OverlayManager.overlays
 * @property overlays
 * @type YAHOO.widget.Overlay[]
 */

/**
 * Initializes the default configuration of the OverlayManager
 * @id YAHOO.widget.OverlayManager.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * The collection of registered Overlays in use by
 * the OverlayManager
 * @id YAHOO.widget.OverlayManager.overlays
 * @config overlays
 * @type YAHOO.widget.Overlay[]
 * @default null
 */

/**
 * The default DOM event that should be used to focus an Overlay
 * @id YAHOO.widget.OverlayManager.focusevent
 * @config focusevent
 * @type String
 * @default "mousedown"
 */

/**
 * Initializes the OverlayManager
 * @id YAHOO.widget.OverlayManager.init
 * @method init
 * @param {Overlay[]} overlays Optional. A collection of Overlays to
 * register with the manager.
 * @param {Object} userConfig  The object literal representing the user
 * configuration of the OverlayManager
 */

/**
 * The OverlayManager's Config object used for monitoring
 * configuration properties.
 * @id YAHOO.widget.OverlayManager.cfg
 * @property cfg
 * @type Config
 */

/**
 * The currently activated Overlay
 * @id YAHOO.widget.OverlayManager.activeOverlay
 * @property activeOverlay
 * @private
 * @type YAHOO.widget.Overlay
 */

/**
 * Returns the currently focused Overlay
 * @id YAHOO.widget.OverlayManager.getActive
 * @method getActive
 * @return {Overlay} The currently focused Overlay
 */

/**
 * Focuses the specified Overlay
 * @id YAHOO.widget.OverlayManager.focus
 * @method focus
 * @param {Overlay} overlay The Overlay to focus
 * @param {String} overlay The id of the Overlay to focus
 */

/**
 * Removes the specified Overlay from the manager
 * @id YAHOO.widget.OverlayManager.remove
 * @method remove
 * @param {Overlay} overlay The Overlay to remove
 * @param {String} overlay The id of the Overlay to remove
 */

/**
 * Removes focus from all registered Overlays in the manager
 * @id YAHOO.widget.OverlayManager.blurAll
 * @method blurAll
 */

/**
 * @id YAHOO.widget.OverlayManager._onOverlayElementFocus
 * @method _onOverlayElementFocus
 * @description Event handler for the DOM event that is used to focus
 * the Overlay instance as specified by the "focusevent"
 * configuration property.
 * @private
 * @param {Event} p_oEvent Object representing the DOM event
 * object passed back by the event utility (Event).
 */

/**
 * @id YAHOO.widget.OverlayManager._onOverlayDestroy
 * @method _onOverlayDestroy
 * @description "destroy" event handler for the Overlay.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 * @param {Overlay} p_oOverlay Object representing the menu that
 * fired the event.
 */

/**
 * Registers an Overlay or an array of Overlays with the manager. Upon
 * registration, the Overlay receives functions for focus and blur,
 * along with CustomEvents for each.
 * @id YAHOO.widget.OverlayManager.register
 * @method register
 * @param {Overlay} overlay  An Overlay to register with the manager.
 * @param {Overlay[]} overlay  An array of Overlays to register with
 * the manager.
 * @return {Boolean} True if any Overlays are registered.
 */

/**
 * Places the specified Overlay instance on top of all other
 * Overlay instances.
 * @id YAHOO.widget.OverlayManager.bringToTop
 * @method bringToTop
 * @param {YAHOO.widget.Overlay} p_oOverlay Object representing an
 * Overlay instance.
 * @param {String} p_oOverlay String representing the id of an
 * Overlay instance.
 */

/**
 * Attempts to locate an Overlay by instance or ID.
 * @id YAHOO.widget.OverlayManager.find
 * @method find
 * @param {Overlay} overlay  An Overlay to locate within the manager
 * @param {String} overlay  An Overlay id to locate within the manager
 * @return {Overlay} The requested Overlay, if found, or null if it
 * cannot be located.
 */

/**
 * Used for sorting the manager's Overlays by z-index.
 * @id YAHOO.widget.OverlayManager.compareZIndexDesc
 * @method compareZIndexDesc
 * @private
 * @return {Number} 0, 1, or -1, depending on where the Overlay should
 * fall in the stacking order.
 */

/**
 * Shows all Overlays in the manager.
 * @id YAHOO.widget.OverlayManager.showAll
 * @method showAll
 */

/**
 * Hides all Overlays in the manager.
 * @id YAHOO.widget.OverlayManager.hideAll
 * @method hideAll
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.OverlayManager.toString
 * @method toString
 * @return {String} The string representation of the OverlayManager
 */

/**
 * Tooltip is an implementation of Overlay that behaves like an OS tooltip,
 * displaying when the user mouses over a particular element, and
 * disappearing on mouse out.
 * @id YAHOO.widget.Tooltip
 * @namespace YAHOO.widget
 * @class Tooltip
 * @extends YAHOO.widget.Overlay
 * @constructor
 * @param {String} el The element ID representing the Tooltip <em>OR</em>
 * @param {HTMLElement} el The element representing the Tooltip
 * @param {Object} userConfig The configuration object literal containing
 * the configuration that should be set for this Overlay. See configuration
 * documentation for more details.
 */

/**
 * Constant representing the Tooltip's configuration properties
 * @id YAHOO.widget.Tooltip.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the name of the Tooltip's events
 * @id YAHOO.widget.Tooltip.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Tooltip CSS class
 * @id YAHOO.widget.Tooltip.YAHOO.widget.Tooltip.CSS_TOOLTIP
 * @property YAHOO.widget.Tooltip.CSS_TOOLTIP
 * @static
 * @final
 * @type String
 */

/**
 * The Tooltip initialization method. This method is automatically
 * called by the constructor. A Tooltip is automatically rendered by
 * the init method, and it also is set to be invisible by default,
 * and constrained to viewport by default as well.
 * @id YAHOO.widget.Tooltip.init
 * @method init
 * @param {String} el The element ID representing the Tooltip <em>OR</em>
 * @param {HTMLElement} el The element representing the Tooltip
 * @param {Object} userConfig The configuration object literal
 * containing the configuration that should be set for this Tooltip.
 * See configuration documentation for more details.
 */

/**
 * Initializes the custom events for Tooltip
 * @id YAHOO.widget.Tooltip.initEvents
 * @method initEvents
 */

/**
 * CustomEvent fired when user mouses over a context element. Returning false from
 * a subscriber to this event will prevent the tooltip from being displayed for
 * the current context element.
 *
 * @id YAHOO.widget.Tooltip.contextMouseOverEvent
 * @event contextMouseOverEvent
 * @param {HTMLElement} context The context element which the user just moused over
 * @param {DOMEvent} e The DOM event object, associated with the mouse over
 */

/**
 * CustomEvent fired when the user mouses out of a context element.
 *
 * @id YAHOO.widget.Tooltip.contextMouseOutEvent
 * @event contextMouseOutEvent
 * @param {HTMLElement} context The context element which the user just moused out of
 * @param {DOMEvent} e The DOM event object, associated with the mouse out
 */

/**
 * CustomEvent fired just before the tooltip is displayed for the current context.
 * <p>
 *  You can subscribe to this event if you need to set up the text for the
 *  tooltip based on the context element for which it is about to be displayed.
 * </p>
 * <p>This event differs from the beforeShow event in following respects:</p>
 * <ol>
 *   <li>
 *    When moving from one context element to another, if the tooltip is not
 *    hidden (the <code>hidedelay</code> is not reached), the beforeShow and Show events will not
 *    be fired when the tooltip is displayed for the new context since it is already visible.
 *    However the contextTrigger event is always fired before displaying the tooltip for
 *    a new context.
 *   </li>
 *   <li>
 *    The trigger event provides access to the context element, allowing you to
 *    set the text of the tooltip based on context element for which the tooltip is
 *    triggered.
 *   </li>
 * </ol>
 * <p>
 *  It is not possible to prevent the tooltip from being displayed
 *  using this event. You can use the contextMouseOverEvent if you need to prevent
 *  the tooltip from being displayed.
 * </p>
 * @id YAHOO.widget.Tooltip.contextTriggerEvent
 * @event contextTriggerEvent
 * @param {HTMLElement} context The context element for which the tooltip is triggered
 */

/**
 * Initializes the class's configurable properties which can be
 * changed using the Overlay's Config object (cfg).
 * @id YAHOO.widget.Tooltip.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * Specifies whether the Tooltip should be kept from overlapping
 * its context element.
 * @id YAHOO.widget.Tooltip.preventoverlap
 * @config preventoverlap
 * @type Boolean
 * @default true
 */

/**
 * The number of milliseconds to wait before showing a Tooltip
 * on mouseover.
 * @id YAHOO.widget.Tooltip.showdelay
 * @config showdelay
 * @type Number
 * @default 200
 */

/**
 * The number of milliseconds to wait before automatically
 * dismissing a Tooltip after the mouse has been resting on the
 * context element.
 * @id YAHOO.widget.Tooltip.autodismissdelay
 * @config autodismissdelay
 * @type Number
 * @default 5000
 */

/**
 * The number of milliseconds to wait before hiding a Tooltip
 * on mouseover.
 * @id YAHOO.widget.Tooltip.hidedelay
 * @config hidedelay
 * @type Number
 * @default 250
 */

/**
 * Specifies the Tooltip's text.
 * @id YAHOO.widget.Tooltip.text
 * @config text
 * @type String
 * @default null
 */

/**
 * Specifies the container element that the Tooltip's markup
 * should be rendered into.
 * @id YAHOO.widget.Tooltip.container
 * @config container
 * @type HTMLElement/String
 * @default document.body
 */

/**
 * Specifies whether or not the tooltip is disabled. Disabled tooltips
 * will not be displayed. If the tooltip is driven by the title attribute
 * of the context element, the title attribute will still be removed for
 * disabled tooltips, to prevent default tooltip behavior.
 *
 * @id YAHOO.widget.Tooltip.disabled
 * @config disabled
 * @type Boolean
 * @default false
 */

/**
 * Specifies the element or elements that the Tooltip should be
 * anchored to on mouseover.
 * @id YAHOO.widget.Tooltip.context
 * @config context
 * @type HTMLElement[]/String[]
 * @default null
 */

/**
 * String representing the width of the Tooltip.  <em>Please note:
 * </em> As of version 2.3 if either no value or a value of "auto"
 * is specified, and the Toolip's "container" configuration property
 * is set to something other than <code>document.body</code> or
 * its "context" element resides outside the immediately visible
 * portion of the document, the width of the Tooltip will be
 * calculated based on the offsetWidth of its root HTML and set just
 * before it is made visible.  The original value will be
 * restored when the Tooltip is hidden. This ensures the Tooltip is
 * rendered at a usable width.  For more information see
 * SourceForge bug #1685496 and SourceForge
 * bug #1735423.
 * @id YAHOO.widget.Tooltip.width
 * @config width
 * @type String
 * @default null
 */

/**
 * The default event handler fired when the "text" property is changed.
 * @id YAHOO.widget.Tooltip.configText
 * @method configText
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "container" property
 * is changed.
 * @id YAHOO.widget.Tooltip.configContainer
 * @method configContainer
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For
 * configuration handlers, args[0] will equal the newly applied value
 * for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * @id YAHOO.widget.Tooltip._removeEventListeners
 * @method _removeEventListeners
 * @description Removes all of the DOM event handlers from the HTML
 *  element(s) that trigger the display of the tooltip.
 * @protected
 */

/**
 * The default event handler fired when the "context" property
 * is changed.
 * @id YAHOO.widget.Tooltip.configContext
 * @method configContext
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the user moves the mouse while
 * over the context element.
 * @id YAHOO.widget.Tooltip.onContextMouseMove
 * @method onContextMouseMove
 * @param {DOMEvent} e The current DOM event
 * @param {Object} obj The object argument
 */

/**
 * The default event handler fired when the user mouses over the
 * context element.
 * @id YAHOO.widget.Tooltip.onContextMouseOver
 * @method onContextMouseOver
 * @param {DOMEvent} e The current DOM event
 * @param {Object} obj The object argument
 */

/**
 * The unique process ID associated with the thread responsible
 * for showing the Tooltip.
 * @id YAHOO.widget.Tooltip.obj.showProcId
 * @type int
 * @method obj.showProcId
 */

/**
 * The default event handler fired when the user mouses out of
 * the context element.
 * @id YAHOO.widget.Tooltip.onContextMouseOut
 * @method onContextMouseOut
 * @param {DOMEvent} e The current DOM event
 * @param {Object} obj The object argument
 */

/**
 * Processes the showing of the Tooltip by setting the timeout delay
 * and offset of the Tooltip.
 * @id YAHOO.widget.Tooltip.doShow
 * @method doShow
 * @param {DOMEvent} e The current DOM event
 * @return {Number} The process ID of the timeout function associated
 * with doShow
 */

/**
 * Sets the timeout for the auto-dismiss delay, which by default is 5
 * seconds, meaning that a tooltip will automatically dismiss itself
 * after 5 seconds of being displayed.
 * @id YAHOO.widget.Tooltip.doHide
 * @method doHide
 */

/**
 * Fired when the Tooltip is moved, this event handler is used to
 * prevent the Tooltip from overlapping with its context element.
 * @id YAHOO.widget.Tooltip.preventOverlay
 * @method preventOverlay
 * @param {Number} pageX The x coordinate position of the mouse pointer
 * @param {Number} pageY The y coordinate position of the mouse pointer
 */

/**
 * @id YAHOO.widget.Tooltip.onRender
 * @method onRender
 * @description "render" event handler for the Tooltip.
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * Removes the Tooltip element from the DOM and sets all child
 * elements to null.
 * @id YAHOO.widget.Tooltip.destroy
 * @method destroy
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.Tooltip.toString
 * @method toString
 * @return {String} The string representation of the Tooltip
 */

/**
 * Panel is an implementation of Overlay that behaves like an OS window,
 * with a draggable header and an optional close icon at the top right.
 * @id YAHOO.widget.Panel
 * @namespace YAHOO.widget
 * @class Panel
 * @extends YAHOO.widget.Overlay
 * @constructor
 * @param {String} el The element ID representing the Panel <em>OR</em>
 * @param {HTMLElement} el The element representing the Panel
 * @param {Object} userConfig The configuration object literal containing
 * the configuration that should be set for this Panel. See configuration
 * documentation for more details.
 */

/**
 * Constant representing the name of the Panel's events
 * @id YAHOO.widget.Panel.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Panel's configuration properties
 * @id YAHOO.widget.Panel.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the default CSS class used for a Panel
 * @id YAHOO.widget.Panel.YAHOO.widget.Panel.CSS_PANEL
 * @property YAHOO.widget.Panel.CSS_PANEL
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the default CSS class used for a Panel's
 * wrapping container
 * @id YAHOO.widget.Panel.YAHOO.widget.Panel.CSS_PANEL_CONTAINER
 * @property YAHOO.widget.Panel.CSS_PANEL_CONTAINER
 * @static
 * @final
 * @type String
 */

/**
 * The Overlay initialization method, which is executed for Overlay and
 * all of its subclasses. This method is automatically called by the
 * constructor, and  sets up all DOM references for pre-existing markup,
 * and creates required markup if it is not already present.
 * @id YAHOO.widget.Panel.init
 * @method init
 * @param {String} el The element ID representing the Overlay <em>OR</em>
 * @param {HTMLElement} el The element representing the Overlay
 * @param {Object} userConfig The configuration object literal
 * containing the configuration that should be set for this Overlay.
 * See configuration documentation for more details.
 */

/**
 * Initializes the custom events for Module which are fired
 * automatically at appropriate times by the Module class.
 * @id YAHOO.widget.Panel.initEvents
 * @event initEvents
 */

/**
 * CustomEvent fired after the modality mask is shown
 * @id YAHOO.widget.Panel.showMaskEvent
 * @event showMaskEvent
 */

/**
 * CustomEvent fired after the modality mask is hidden
 * @id YAHOO.widget.Panel.hideMaskEvent
 * @event hideMaskEvent
 */

/**
 * CustomEvent when the Panel is dragged
 * @id YAHOO.widget.Panel.dragEvent
 * @event dragEvent
 */

/**
 * Initializes the class's configurable properties which can be changed
 * using the Panel's Config object (cfg).
 * @id YAHOO.widget.Panel.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * True if the Panel should display a "close" button
 * @id YAHOO.widget.Panel.close
 * @config close
 * @type Boolean
 * @default true
 */

/**
 * Boolean specifying if the Panel should be draggable.  The default
 * value is "true" if the Drag and Drop utility is included,
 * otherwise it is "false." <strong>PLEASE NOTE:</strong> There is a
 * known issue in IE 6 (Strict Mode and Quirks Mode) and IE 7
 * (Quirks Mode) where Panels that either don't have a value set for
 * their "width" configuration property, or their "width"
 * configuration property is set to "auto" will only be draggable by
 * placing the mouse on the text of the Panel's header element.
 * To fix this bug, draggable Panels missing a value for their
 * "width" configuration property, or whose "width" configuration
 * property is set to "auto" will have it set to the value of
 * their root HTML element's offsetWidth before they are made
 * visible.  The calculated width is then removed when the Panel is
 * hidden. <em>This fix is only applied to draggable Panels in IE 6
 * (Strict Mode and Quirks Mode) and IE 7 (Quirks Mode)</em>. For
 * more information on this issue see:
 * SourceForge bugs #1726972 and #1589210.
 * @id YAHOO.widget.Panel.draggable
 * @config draggable
 * @type Boolean
 * @default true
 */

/**
 * Boolean specifying if the draggable Panel should be drag only, not interacting with drop
 * targets on the page.
 * <p>
 * When set to true, draggable Panels will not check to see if they are over drop targets,
 * or fire the DragDrop events required to support drop target interaction (onDragEnter,
 * onDragOver, onDragOut, onDragDrop etc.).
 * If the Panel is not designed to be dropped on any target elements on the page, then this
 * flag can be set to true to improve performance.
 * </p>
 * <p>
 * When set to false, all drop target related events will be fired.
 * </p>
 * <p>
 * The property is set to false by default to maintain backwards compatibility but should be
 * set to true if drop target interaction is not required for the Panel, to improve performance.</p>
 *
 * @id YAHOO.widget.Panel.dragOnly
 * @config dragOnly
 * @type Boolean
 * @default false
 */

/**
 * Sets the type of underlay to display for the Panel. Valid values
 * are "shadow," "matte," and "none".  <strong>PLEASE NOTE:</strong>
 * The creation of the underlay element is deferred until the Panel
 * is initially made visible.  For Gecko-based browsers on Mac
 * OS X the underlay elment is always created as it is used as a
 * shim to prevent Aqua scrollbars below a Panel instance from poking
 * through it (See SourceForge bug #836476).
 * @id YAHOO.widget.Panel.underlay
 * @config underlay
 * @type String
 * @default shadow
 */

/**
 * True if the Panel should be displayed in a modal fashion,
 * automatically creating a transparent mask over the document that
 * will not be removed until the Panel is dismissed.
 * @id YAHOO.widget.Panel.modal
 * @config modal
 * @type Boolean
 * @default false
 */

/**
 * A KeyListener (or array of KeyListeners) that will be enabled
 * when the Panel is shown, and disabled when the Panel is hidden.
 * @id YAHOO.widget.Panel.keylisteners
 * @config keylisteners
 * @type YAHOO.util.KeyListener[]
 * @default null
 */

/**
 * The default event handler fired when the "close" property is changed.
 * The method controls the appending or hiding of the close icon at the
 * top right of the Panel.
 * @id YAHOO.widget.Panel.configClose
 * @method configClose
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "draggable" property
 * is changed.
 * @id YAHOO.widget.Panel.configDraggable
 * @method configDraggable
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "underlay" property
 * is changed.
 * @id YAHOO.widget.Panel.configUnderlay
 * @method configUnderlay
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "modal" property is
 * changed. This handler subscribes or unsubscribes to the show and hide
 * events to handle the display or hide of the modality mask.
 * @id YAHOO.widget.Panel.configModal
 * @method configModal
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Removes the modality mask.
 * @id YAHOO.widget.Panel.removeMask
 * @method removeMask
 */

/**
 * The default event handler fired when the "keylisteners" property
 * is changed.
 * @id YAHOO.widget.Panel.configKeyListeners
 * @method configKeyListeners
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "height" property is changed.
 * @id YAHOO.widget.Panel.configHeight
 * @method configHeight
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "width" property is changed.
 * @id YAHOO.widget.Panel.configWidth
 * @method configWidth
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "zIndex" property is changed.
 * @id YAHOO.widget.Panel.configzIndex
 * @method configzIndex
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Builds the wrapping container around the Panel that is used for
 * positioning the shadow and matte underlays. The container element is
 * assigned to a  local instance variable called container, and the
 * element is reinserted inside of it.
 * @id YAHOO.widget.Panel.buildWrapper
 * @method buildWrapper
 */

/**
 * Adjusts the size of the shadow based on the size of the element.
 * @id YAHOO.widget.Panel.sizeUnderlay
 * @method sizeUnderlay
 */

/**
 * Registers the Panel's header for drag & drop capability.
 * @id YAHOO.widget.Panel.registerDragDrop
 * @method registerDragDrop
 */

/**
 * Builds the mask that is laid over the document when the Panel is
 * configured to be modal.
 * @id YAHOO.widget.Panel.buildMask
 * @method buildMask
 */

/**
 * Hides the modality mask.
 * @id YAHOO.widget.Panel.hideMask
 * @method hideMask
 */

/**
 * Shows the modality mask.
 * @id YAHOO.widget.Panel.showMask
 * @method showMask
 */

/**
 * Sets the size of the modality mask to cover the entire scrollable
 * area of the document
 * @id YAHOO.widget.Panel.sizeMask
 * @method sizeMask
 */

/**
 * Sets the zindex of the mask, if it exists, based on the zindex of
 * the Panel element. The zindex of the mask is set to be one less
 * than the Panel element's zindex.
 *
 * <p>NOTE: This method will not bump up the zindex of the Panel
 * to ensure that the mask has a non-negative zindex. If you require the
 * mask zindex to be 0 or higher, the zindex of the Panel
 * should be set to a value higher than 0, before this method is called.
 * </p>
 * @id YAHOO.widget.Panel.stackMask
 * @method stackMask
 */

/**
 * Renders the Panel by inserting the elements that are not already in
 * the main Panel into their correct places. Optionally appends the
 * Panel to the specified node prior to the render's execution. NOTE:
 * For Panels without existing markup, the appendToNode argument is
 * REQUIRED. If this argument is ommitted and the current element is
 * not present in the document, the function will return false,
 * indicating that the render was a failure.
 * @id YAHOO.widget.Panel.render
 * @method render
 * @param {String} appendToNode The element id to which the Module
 * should be appended to prior to rendering <em>OR</em>
 * @param {HTMLElement} appendToNode The element to which the Module
 * should be appended to prior to rendering
 * @return {boolean} Success or failure of the render
 */

/**
 * Removes the Panel element from the DOM and sets all child elements
 * to null.
 * @id YAHOO.widget.Panel.destroy
 * @method destroy
 */

/**
 * Returns a String representation of the object.
 * @id YAHOO.widget.Panel.toString
 * @method toString
 * @return {String} The string representation of the Panel.
 */

/**
 * <p>
 * Dialog is an implementation of Panel that can be used to submit form
 * data.
 * </p>
 * <p>
 * Built-in functionality for buttons with event handlers is included.
 * If the optional YUI Button dependancy is included on the page, the buttons
 * created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons
 * will be created.
 * </p>
 * <p>
 * Forms can be processed in 3 ways -- via an asynchronous Connection utility call,
 * a simple form POST or GET, or manually. The YUI Connection utility should be
 * included if you're using the default "async" postmethod, but is not required if
 * you're using any of the other postmethod values.
 * </p>
 * @id YAHOO.widget.Dialog
 * @namespace YAHOO.widget
 * @class Dialog
 * @extends YAHOO.widget.Panel
 * @constructor
 * @param {String} el The element ID representing the Dialog <em>OR</em>
 * @param {HTMLElement} el The element representing the Dialog
 * @param {Object} userConfig The configuration object literal containing
 * the configuration that should be set for this Dialog. See configuration
 * documentation for more details.
 */

/**
 * Constant representing the name of the Dialog's events
 * @id YAHOO.widget.Dialog.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Dialog's configuration properties
 * @id YAHOO.widget.Dialog.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the default CSS class used for a Dialog
 * @id YAHOO.widget.Dialog.YAHOO.widget.Dialog.CSS_DIALOG
 * @property YAHOO.widget.Dialog.CSS_DIALOG
 * @static
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Dialog.form
 * @property form
 * @description Object reference to the Dialog's
 * <code>&#60;form&#62;</code> element.
 * @default null
 * @type HTMLFormElement
 */

/**
 * Initializes the class's configurable properties which can be changed
 * using the Dialog's Config object (cfg).
 * @id YAHOO.widget.Dialog.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * The internally maintained callback object for use with the
 * Connection utility. The format of the callback object is
 * similar to Connection Manager's callback object and is
 * simply passed through to Connection Manager when the async
 * request is made.
 * @id YAHOO.widget.Dialog.callback
 * @property callback
 * @type Object
 */

/**
 * The function to execute upon success of the
 * Connection submission (when the form does not
 * contain a file input element).
 *
 * @id YAHOO.widget.Dialog.callback.success
 * @property callback.success
 * @type Function
 */

/**
 * The function to execute upon failure of the
 * Connection submission
 * @id YAHOO.widget.Dialog.callback.failure
 * @property callback.failure
 * @type Function
 */

/**
 *<p>
 * The function to execute upon success of the
 * Connection submission, when the form contains
 * a file input element.
 * </p>
 * <p>
 * <em>NOTE:</em> Connection manager will not
 * invoke the success or failure handlers for the file
 * upload use case. This will be the only callback
 * handler invoked.
 * </p>
 * <p>
 * For more information, see the
 * Connection Manager documenation on file uploads.
 * </p>
 * @id YAHOO.widget.Dialog.callback.upload
 * @property callback.upload
 * @type Function
 */

/**
 * The arbitraty argument or arguments to pass to the Connection
 * callback functions
 * @id YAHOO.widget.Dialog.callback.argument
 * @property callback.argument
 * @type Object
 */

/**
 * The method to use for posting the Dialog's form. Possible values
 * are "async", "form", and "manual".
 * @id YAHOO.widget.Dialog.postmethod
 * @config postmethod
 * @type String
 * @default async
 */

/**
 * This property is used to configure whether or not the
 * dialog should be automatically hidden after submit.
 *
 * @id YAHOO.widget.Dialog.hideaftersubmit
 * @config hideaftersubmit
 * @type Boolean
 * @default true
 */

/**
 * Array of object literals, each containing a set of properties
 * defining a button to be appended into the Dialog's footer.
 *
 * Each button object in the buttons array can have three properties:
 * <dt>text:</dt>
 * <dd>The text that will display on the face of the button. The text can
 * include HTML, as long as it is compliant with HTML Button specifications.
 * </dd>
 * <dt>handler:</dt>
 * <dd>Can be either:
 *     <ol>
 *         <li>A reference to a function that should fire when the
 * button is clicked.  (In this case scope of this function is
 * always its Dialog instance.)</li>
 *         <li>An object literal representing the code to be
 * executed when the button is clicked.  Format:<br> <code> {<br>
 * <strong>fn:</strong> Function,   &#47;&#47; The handler to call
 * when  the event fires.<br> <strong>obj:</strong> Object,
 * &#47;&#47; An  object to pass back to the handler.<br> <strong>
 * scope:</strong>  Object &#47;&#47; The object to use for the
 * scope of the handler. <br> } </code> <br></li>
 *     </ol>
 * </dd>
 * <dt>isDefault:</dt>
 * <dd>An optional boolean value that specifies that a button
 * should be highlighted and focused by default.</dd>
 *
 * <em>NOTE:</em>If the YUI Button Widget is included on the page,
 * the buttons created will be instances of YAHOO.widget.Button.
 * Otherwise, HTML Buttons (<code>&#60;BUTTON&#62;</code>) will be
 * created.
 *
 * @id YAHOO.widget.Dialog.buttons
 * @config buttons
 * @type {Array|String}
 * @default "none"
 */

/**
 * Initializes the custom events for Dialog which are fired
 * automatically at appropriate times by the Dialog class.
 * @id YAHOO.widget.Dialog.initEvents
 * @method initEvents
 */

/**
 * CustomEvent fired prior to submission
 * @id YAHOO.widget.Dialog.beforeSubmitEvent
 * @event beforeSubmitEvent
 */

/**
 * CustomEvent fired after submission
 * @id YAHOO.widget.Dialog.submitEvent
 * @event submitEvent
 */

/**
 * CustomEvent fired prior to manual submission
 * @id YAHOO.widget.Dialog.manualSubmitEvent
 * @event manualSubmitEvent
 */

/**
 * CustomEvent fired prior to asynchronous submission
 * @id YAHOO.widget.Dialog.asyncSubmitEvent
 * @event asyncSubmitEvent
 */

/**
 * CustomEvent fired prior to form-based submission
 * @id YAHOO.widget.Dialog.formSubmitEvent
 * @event formSubmitEvent
 */

/**
 * CustomEvent fired after cancel
 * @id YAHOO.widget.Dialog.cancelEvent
 * @event cancelEvent
 */

/**
 * The Dialog initialization method, which is executed for Dialog and
 * all of its subclasses. This method is automatically called by the
 * constructor, and  sets up all DOM references for pre-existing markup,
 * and creates required markup if it is not already present.
 * @id YAHOO.widget.Dialog.init
 * @method init
 * @param {String} el The element ID representing the Dialog <em>OR</em>
 * @param {HTMLElement} el The element representing the Dialog
 * @param {Object} userConfig The configuration object literal
 * containing the configuration that should be set for this Dialog.
 * See configuration documentation for more details.
 */

/**
 * Submits the Dialog's form depending on the value of the
 * "postmethod" configuration property.  <strong>Please note:
 * </strong> As of version 2.3 this method will automatically handle
 * asyncronous file uploads should the Dialog instance's form contain
 * <code>&#60;input type="file"&#62;</code> elements.  If a Dialog
 * instance will be handling asyncronous file uploads, its
 * <code>callback</code> property will need to be setup with a
 * <code>upload</code> handler rather than the standard
 * <code>success</code> and, or <code>failure</code> handlers.  For more
 * information, see the Connection Manager documenation on file uploads.
 * @id YAHOO.widget.Dialog.doSubmit
 * @method doSubmit
 */

/**
 * Prepares the Dialog's internal FORM object, creating one if one is
 * not currently present.
 * @id YAHOO.widget.Dialog.registerForm
 * @method registerForm
 */

/**
 * The default event handler fired when the "close" property is
 * changed. The method controls the appending or hiding of the close
 * icon at the top right of the Dialog.
 * @id YAHOO.widget.Dialog.configClose
 * @method configClose
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For
 * configuration handlers, args[0] will equal the newly applied value
 * for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler for the "buttons" configuration property
 * @id YAHOO.widget.Dialog.configButtons
 * @method configButtons
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * @id YAHOO.widget.Dialog.getButtons
 * @method getButtons
 * @description Returns an array containing each of the Dialog's
 * buttons, by default an array of HTML <code>&#60;BUTTON&#62;</code>
 * elements.  If the Dialog's buttons were created using the
 * YAHOO.widget.Button class (via the inclusion of the optional Button
 * dependancy on the page), an array of YAHOO.widget.Button instances
 * is returned.
 * @return {Array}
 */

/**
 * Sets focus to the first element in the Dialog's form or the first
 * button defined via the "buttons" configuration property. Called
 * when the Dialog is made visible.
 * @id YAHOO.widget.Dialog.focusFirst
 * @method focusFirst
 */

/**
 * Sets focus to the last element in the Dialog's form or the last
 * button defined via the "buttons" configuration property.
 * @id YAHOO.widget.Dialog.focusLast
 * @method focusLast
 */

/**
 * Sets the focus to the button that is designated as the default via
 * the "buttons" configuration property. By default, this method is
 * called when the Dialog is made visible.
 * @id YAHOO.widget.Dialog.focusDefaultButton
 * @method focusDefaultButton
 */

/**
 * Blurs all the buttons defined via the "buttons"
 * configuration property.
 * @id YAHOO.widget.Dialog.blurButtons
 * @method blurButtons
 */

/**
 * Sets the focus to the first button created via the "buttons"
 * configuration property.
 * @id YAHOO.widget.Dialog.focusFirstButton
 * @method focusFirstButton
 */

/**
 * Sets the focus to the last button created via the "buttons"
 * configuration property.
 * @id YAHOO.widget.Dialog.focusLastButton
 * @method focusLastButton
 */

/**
 * The default event handler for the "postmethod" configuration property
 * @id YAHOO.widget.Dialog.configPostMethod
 * @method configPostMethod
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For
 * configuration handlers, args[0] will equal the newly applied value
 * for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Built-in function hook for writing a validation function that will
 * be checked for a "true" value prior to a submit. This function, as
 * implemented by default, always returns true, so it should be
 * overridden if validation is necessary.
 * @id YAHOO.widget.Dialog.validate
 * @method validate
 */

/**
 * Executes a submit of the Dialog if validation
 * is successful. By default the Dialog is hidden
 * after submission, but you can set the "hideaftersubmit"
 * configuration property to false, to prevent the Dialog
 * from being hidden.
 *
 * @id YAHOO.widget.Dialog.submit
 * @method submit
 */

/**
 * Executes the cancel of the Dialog followed by a hide.
 * @id YAHOO.widget.Dialog.cancel
 * @method cancel
 */

/**
 * Returns a JSON-compatible data structure representing the data
 * currently contained in the form.
 * @id YAHOO.widget.Dialog.getData
 * @method getData
 * @return {Object} A JSON object reprsenting the data of the
 * current form.
 */

/**
 * Removes the Panel element from the DOM and sets all child elements
 * to null.
 * @id YAHOO.widget.Dialog.destroy
 * @method destroy
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.Dialog.toString
 * @method toString
 * @return {String} The string representation of the Dialog
 */

/**
 * SimpleDialog is a simple implementation of Dialog that can be used to
 * submit a single value. Forms can be processed in 3 ways -- via an
 * asynchronous Connection utility call, a simple form POST or GET,
 * or manually.
 * @id YAHOO.widget.SimpleDialog
 * @namespace YAHOO.widget
 * @class SimpleDialog
 * @extends YAHOO.widget.Dialog
 * @constructor
 * @param {String} el The element ID representing the SimpleDialog
 * <em>OR</em>
 * @param {HTMLElement} el The element representing the SimpleDialog
 * @param {Object} userConfig The configuration object literal containing
 * the configuration that should be set for this SimpleDialog. See
 * configuration documentation for more details.
 */

/**
 * Constant representing the SimpleDialog's configuration properties
 * @id YAHOO.widget.SimpleDialog.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * Constant for the standard network icon for a blocking action
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.ICON_BLOCK
 * @property YAHOO.widget.SimpleDialog.ICON_BLOCK
 * @static
 * @final
 * @type String
 */

/**
 * Constant for the standard network icon for alarm
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.ICON_ALARM
 * @property YAHOO.widget.SimpleDialog.ICON_ALARM
 * @static
 * @final
 * @type String
 */

/**
 * Constant for the standard network icon for help
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.ICON_HELP
 * @property YAHOO.widget.SimpleDialog.ICON_HELP
 * @static
 * @final
 * @type String
 */

/**
 * Constant for the standard network icon for info
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.ICON_INFO
 * @property YAHOO.widget.SimpleDialog.ICON_INFO
 * @static
 * @final
 * @type String
 */

/**
 * Constant for the standard network icon for warn
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.ICON_WARN
 * @property YAHOO.widget.SimpleDialog.ICON_WARN
 * @static
 * @final
 * @type String
 */

/**
 * Constant for the standard network icon for a tip
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.ICON_TIP
 * @property YAHOO.widget.SimpleDialog.ICON_TIP
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the name of the CSS class applied to the element
 * created by the "icon" configuration property.
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.ICON_CSS_CLASSNAME
 * @property YAHOO.widget.SimpleDialog.ICON_CSS_CLASSNAME
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the default CSS class used for a SimpleDialog
 * @id YAHOO.widget.SimpleDialog.YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG
 * @property YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG
 * @static
 * @final
 * @type String
 */

/**
 * Initializes the class's configurable properties which can be changed
 * using the SimpleDialog's Config object (cfg).
 * @id YAHOO.widget.SimpleDialog.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * Sets the informational icon for the SimpleDialog
 * @id YAHOO.widget.SimpleDialog.icon
 * @config icon
 * @type String
 * @default "none"
 */

/**
 * Sets the text for the SimpleDialog
 * @id YAHOO.widget.SimpleDialog.text
 * @config text
 * @type String
 * @default ""
 */

/**
 * The SimpleDialog initialization method, which is executed for
 * SimpleDialog and all of its subclasses. This method is automatically
 * called by the constructor, and  sets up all DOM references for
 * pre-existing markup, and creates required markup if it is not
 * already present.
 * @id YAHOO.widget.SimpleDialog.init
 * @method init
 * @param {String} el The element ID representing the SimpleDialog
 * <em>OR</em>
 * @param {HTMLElement} el The element representing the SimpleDialog
 * @param {Object} userConfig The configuration object literal
 * containing the configuration that should be set for this
 * SimpleDialog. See configuration documentation for more details.
 */

/**
 * Prepares the SimpleDialog's internal FORM object, creating one if one
 * is not currently present, and adding the value hidden field.
 * @id YAHOO.widget.SimpleDialog.registerForm
 * @method registerForm
 */

/**
 * Fired when the "icon" property is set.
 * @id YAHOO.widget.SimpleDialog.configIcon
 * @method configIcon
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Fired when the "text" property is set.
 * @id YAHOO.widget.SimpleDialog.configText
 * @method configText
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.SimpleDialog.toString
 * @method toString
 * @return {String} The string representation of the SimpleDialog
 */

/**
 * ContainerEffect encapsulates animation transitions that are executed when
 * an Overlay is shown or hidden.
 * @id YAHOO.widget.ContainerEffect
 * @namespace YAHOO.widget
 * @class ContainerEffect
 * @constructor
 * @param {YAHOO.widget.Overlay} overlay The Overlay that the animation
 * should be associated with
 * @param {Object} attrIn The object literal representing the animation
 * arguments to be used for the animate-in transition. The arguments for
 * this literal are: attributes(object, see YAHOO.util.Anim for description),
 * duration(Number), and method(i.e. Easing.easeIn).
 * @param {Object} attrOut The object literal representing the animation
 * arguments to be used for the animate-out transition. The arguments for
 * this literal are: attributes(object, see YAHOO.util.Anim for description),
 * duration(Number), and method(i.e. Easing.easeIn).
 * @param {HTMLElement} targetElement Optional. The target element that
 * should be animated during the transition. Defaults to overlay.element.
 * @param {class} Optional. The animation class to instantiate. Defaults to
 * YAHOO.util.Anim. Other options include YAHOO.util.Motion.
 */

/**
 * The overlay to animate
 * @id YAHOO.widget.ContainerEffect.overlay
 * @property overlay
 * @type YAHOO.widget.Overlay
 */

/**
 * The animation attributes to use when transitioning into view
 * @id YAHOO.widget.ContainerEffect.attrIn
 * @property attrIn
 * @type Object
 */

/**
 * The animation attributes to use when transitioning out of view
 * @id YAHOO.widget.ContainerEffect.attrOut
 * @property attrOut
 * @type Object
 */

/**
 * The target element to be animated
 * @id YAHOO.widget.ContainerEffect.targetElement
 * @property targetElement
 * @type HTMLElement
 */

/**
 * The animation class to use for animating the overlay
 * @id YAHOO.widget.ContainerEffect.animClass
 * @property animClass
 * @type class
 */

/**
 * A pre-configured ContainerEffect instance that can be used for fading
 * an overlay in and out.
 * @id YAHOO.widget.ContainerEffect.FADE
 * @method FADE
 * @static
 * @param {YAHOO.widget.Overlay} overlay The Overlay object to animate
 * @param {Number} dur The duration of the animation
 * @return {YAHOO.widget.ContainerEffect} The configured ContainerEffect object
 */

/**
 * A pre-configured ContainerEffect instance that can be used for sliding an
 * overlay in and out.
 * @id YAHOO.widget.ContainerEffect.SLIDE
 * @method SLIDE
 * @static
 * @param {YAHOO.widget.Overlay} overlay The Overlay object to animate
 * @param {Number} dur The duration of the animation
 * @return {YAHOO.widget.ContainerEffect} The configured ContainerEffect object
 */

/**
 * Initializes the animation classes and events.
 * @id YAHOO.widget.ContainerEffect.init
 * @method init
 */

/**
 * Triggers the in-animation.
 * @id YAHOO.widget.ContainerEffect.animateIn
 * @method animateIn
 */

/**
 * Triggers the out-animation.
 * @id YAHOO.widget.ContainerEffect.animateOut
 * @method animateOut
 */

/**
 * The default onStart handler for the in-animation.
 * @id YAHOO.widget.ContainerEffect.handleStartAnimateIn
 * @method handleStartAnimateIn
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onTween handler for the in-animation.
 * @id YAHOO.widget.ContainerEffect.handleTweenAnimateIn
 * @method handleTweenAnimateIn
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onComplete handler for the in-animation.
 * @id YAHOO.widget.ContainerEffect.handleCompleteAnimateIn
 * @method handleCompleteAnimateIn
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onStart handler for the out-animation.
 * @id YAHOO.widget.ContainerEffect.handleStartAnimateOut
 * @method handleStartAnimateOut
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onTween handler for the out-animation.
 * @id YAHOO.widget.ContainerEffect.handleTweenAnimateOut
 * @method handleTweenAnimateOut
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onComplete handler for the out-animation.
 * @id YAHOO.widget.ContainerEffect.handleCompleteAnimateOut
 * @method handleCompleteAnimateOut
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.ContainerEffect.toString
 * @method toString
 * @return {String} The string representation of the ContainerEffect
 */

/**
 * Config is a utility used within an Object to allow the implementer to
 * maintain a list of local configuration properties and listen for changes
 * to those properties dynamically using CustomEvent. The initial values are
 * also maintained so that the configuration can be reset at any given point
 * to its initial state.
 * @id YAHOO.util.Config
 * @namespace YAHOO.util
 * @class Config
 * @constructor
 * @param {Object} owner The owner Object to which this Config Object belongs
 */

/**
 * Constant representing the CustomEvent type for the config changed event.
 * @id YAHOO.util.Config.YAHOO.util.Config.CONFIG_CHANGED_EVENT
 * @property YAHOO.util.Config.CONFIG_CHANGED_EVENT
 * @private
 * @static
 * @final
 */

/**
 * Constant representing the boolean type string
 * @id YAHOO.util.Config.YAHOO.util.Config.BOOLEAN_TYPE
 * @property YAHOO.util.Config.BOOLEAN_TYPE
 * @private
 * @static
 * @final
 */

/**
 * Object reference to the owner of this Config Object
 * @id YAHOO.util.Config.owner
 * @property owner
 * @type Object
 */

/**
 * Boolean flag that specifies whether a queue is currently
 * being executed
 * @id YAHOO.util.Config.queueInProgress
 * @property queueInProgress
 * @type Boolean
 */

/**
 * Maintains the local collection of configuration property objects and
 * their specified values
 * @id YAHOO.util.Config.config
 * @property config
 * @private
 * @type Object
 */

/**
 * Maintains the local collection of configuration property objects as
 * they were initially applied.
 * This object is used when resetting a property.
 * @id YAHOO.util.Config.initialConfig
 * @property initialConfig
 * @private
 * @type Object
 */

/**
 * Maintains the local, normalized CustomEvent queue
 * @id YAHOO.util.Config.eventQueue
 * @property eventQueue
 * @private
 * @type Object
 */

/**
 * Custom Event, notifying subscribers when Config properties are set
 * (setProperty is called without the silent flag
 * @id YAHOO.util.Config.configChangedEvent
 * @event configChangedEvent
 */

/**
 * Initializes the configuration Object and all of its local members.
 * @id YAHOO.util.Config.init
 * @method init
 * @param {Object} owner The owner Object to which this Config
 * Object belongs
 */

/**
 * Validates that the value passed in is a Boolean.
 * @id YAHOO.util.Config.checkBoolean
 * @method checkBoolean
 * @param {Object} val The value to validate
 * @return {Boolean} true, if the value is valid
 */

/**
 * Validates that the value passed in is a number.
 * @id YAHOO.util.Config.checkNumber
 * @method checkNumber
 * @param {Object} val The value to validate
 * @return {Boolean} true, if the value is valid
 */

/**
 * Fires a configuration property event using the specified value.
 * @id YAHOO.util.Config.fireEvent
 * @method fireEvent
 * @private
 * @param {String} key The configuration property's name
 * @param {value} Object The value of the correct type for the property
 */

/**
 * Adds a property to the Config Object's private config hash.
 * @id YAHOO.util.Config.addProperty
 * @method addProperty
 * @param {String} key The configuration property's name
 * @param {Object} propertyObject The Object containing all of this
 * property's arguments
 */

/**
 * Returns a key-value configuration map of the values currently set in
 * the Config Object.
 * @id YAHOO.util.Config.getConfig
 * @method getConfig
 * @return {Object} The current config, represented in a key-value map
 */

/**
 * Returns the value of specified property.
 * @id YAHOO.util.Config.getProperty
 * @method getProperty
 * @param {String} key The name of the property
 * @return {Object}  The value of the specified property
 */

/**
 * Resets the specified property's value to its initial value.
 * @id YAHOO.util.Config.resetProperty
 * @method resetProperty
 * @param {String} key The name of the property
 * @return {Boolean} True is the property was reset, false if not
 */

/**
 * Sets the value of a property. If the silent property is passed as
 * true, the property's event will not be fired.
 * @id YAHOO.util.Config.setProperty
 * @method setProperty
 * @param {String} key The name of the property
 * @param {String} value The value to set the property to
 * @param {Boolean} silent Whether the value should be set silently,
 * without firing the property event.
 * @return {Boolean} True, if the set was successful, false if it failed.
 */

/**
 * Sets the value of a property and queues its event to execute. If the
 * event is already scheduled to execute, it is
 * moved from its current position to the end of the queue.
 * @id YAHOO.util.Config.queueProperty
 * @method queueProperty
 * @param {String} key The name of the property
 * @param {String} value The value to set the property to
 * @return {Boolean}  true, if the set was successful, false if
 * it failed.
 */

/**
 * Fires the event for a property using the property's current value.
 * @id YAHOO.util.Config.refireEvent
 * @method refireEvent
 * @param {String} key The name of the property
 */

/**
 * Applies a key-value Object literal to the configuration, replacing
 * any existing values, and queueing the property events.
 * Although the values will be set, fireQueue() must be called for their
 * associated events to execute.
 * @id YAHOO.util.Config.applyConfig
 * @method applyConfig
 * @param {Object} userConfig The configuration Object literal
 * @param {Boolean} init  When set to true, the initialConfig will
 * be set to the userConfig passed in, so that calling a reset will
 * reset the properties to the passed values.
 */

/**
 * Refires the events for all configuration properties using their
 * current values.
 * @id YAHOO.util.Config.refresh
 * @method refresh
 */

/**
 * Fires the normalized list of queued property change events
 * @id YAHOO.util.Config.fireQueue
 * @method fireQueue
 */

/**
 * Subscribes an external handler to the change event for any
 * given property.
 * @id YAHOO.util.Config.subscribeToConfigEvent
 * @method subscribeToConfigEvent
 * @param {String} key The property name
 * @param {Function} handler The handler function to use subscribe to
 * the property's event
 * @param {Object} obj The Object to use for scoping the event handler
 * (see CustomEvent documentation)
 * @param {Boolean} override Optional. If true, will override "this"
 * within the handler to map to the scope Object passed into the method.
 * @return {Boolean} True, if the subscription was successful,
 * otherwise false.
 */

/**
 * Unsubscribes an external handler from the change event for any
 * given property.
 * @id YAHOO.util.Config.unsubscribeFromConfigEvent
 * @method unsubscribeFromConfigEvent
 * @param {String} key The property name
 * @param {Function} handler The handler function to use subscribe to
 * the property's event
 * @param {Object} obj The Object to use for scoping the event
 * handler (see CustomEvent documentation)
 * @return {Boolean} True, if the unsubscription was successful,
 * otherwise false.
 */

/**
 * Returns a string representation of the Config object
 * @id YAHOO.util.Config.toString
 * @method toString
 * @return {String} The Config object in string format.
 */

/**
 * Returns a string representation of the Config object's current
 * CustomEvent queue
 * @id YAHOO.util.Config.outputEventQueue
 * @method outputEventQueue
 * @return {String} The string list of CustomEvents currently queued
 * for execution
 */

/**
 * Sets all properties to null, unsubscribes all listeners from each
 * property's change event and all listeners from the configChangedEvent.
 * @id YAHOO.util.Config.destroy
 * @method destroy
 */

/**
 * Checks to determine if a particular function/Object pair are already
 * subscribed to the specified CustomEvent
 * @id YAHOO.util.Config.YAHOO.util.Config.alreadySubscribed
 * @method YAHOO.util.Config.alreadySubscribed
 * @static
 * @param {YAHOO.util.CustomEvent} evt The CustomEvent for which to check
 * the subscriptions
 * @param {Function} fn The function to look for in the subscribers list
 * @param {Object} obj The execution scope Object for the subscription
 * @return {Boolean} true, if the function/Object pair is already subscribed
 * to the CustomEvent passed in
 */

/**
 * Module is a JavaScript representation of the Standard Module Format.
 * Standard Module Format is a simple standard for markup containers where
 * child nodes representing the header, body, and footer of the content are
 * denoted using the CSS classes "hd", "bd", and "ft" respectively.
 * Module is the base class for all other classes in the YUI
 * Container package.
 * @id YAHOO.widget.Module
 * @namespace YAHOO.widget
 * @class Module
 * @constructor
 * @param {String} el The element ID representing the Module <em>OR</em>
 * @param {HTMLElement} el The element representing the Module
 * @param {Object} userConfig The configuration Object literal containing
 * the configuration that should be set for this module. See configuration
 * documentation for more details.
 */

/**
 * Constant representing the name of the Module's events
 * @id YAHOO.widget.Module.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Module's configuration properties
 * @id YAHOO.widget.Module.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the prefix path to use for non-secure images
 * @id YAHOO.widget.Module.YAHOO.widget.Module.IMG_ROOT
 * @property YAHOO.widget.Module.IMG_ROOT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the prefix path to use for securely served images
 * @id YAHOO.widget.Module.YAHOO.widget.Module.IMG_ROOT_SSL
 * @property YAHOO.widget.Module.IMG_ROOT_SSL
 * @static
 * @final
 * @type String
 */

/**
 * Constant for the default CSS class name that represents a Module
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_MODULE
 * @property YAHOO.widget.Module.CSS_MODULE
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the module header
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_HEADER
 * @property YAHOO.widget.Module.CSS_HEADER
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the module body
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_BODY
 * @property YAHOO.widget.Module.CSS_BODY
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the module footer
 * @id YAHOO.widget.Module.YAHOO.widget.Module.CSS_FOOTER
 * @property YAHOO.widget.Module.CSS_FOOTER
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the url for the "src" attribute of the iframe
 * used to monitor changes to the browser's base font size
 * @id YAHOO.widget.Module.YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL
 * @property YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL
 * @static
 * @final
 * @type String
 */

/**
 * Singleton CustomEvent fired when the font size is changed in the browser.
 * Opera's "zoom" functionality currently does not support text
 * size detection.
 * @id YAHOO.widget.Module.YAHOO.widget.Module.textResizeEvent
 * @event YAHOO.widget.Module.textResizeEvent
 */

/**
 * The class's constructor function
 * @id YAHOO.widget.Module.contructor
 * @property contructor
 * @type Function
 */

/**
 * The main module element that contains the header, body, and footer
 * @id YAHOO.widget.Module.element
 * @property element
 * @type HTMLElement
 */

/**
 * The header element, denoted with CSS class "hd"
 * @id YAHOO.widget.Module.header
 * @property header
 * @type HTMLElement
 */

/**
 * The body element, denoted with CSS class "bd"
 * @id YAHOO.widget.Module.body
 * @property body
 * @type HTMLElement
 */

/**
 * The footer element, denoted with CSS class "ft"
 * @id YAHOO.widget.Module.footer
 * @property footer
 * @type HTMLElement
 */

/**
 * The id of the element
 * @id YAHOO.widget.Module.id
 * @property id
 * @type String
 */

/**
 * A string representing the root path for all images created by
 * a Module instance.
 * @id YAHOO.widget.Module.imageRoot
 * @deprecated It is recommend that any images for a Module be applied
 * via CSS using the "background-image" property.
 * @property imageRoot
 * @type String
 */

/**
 * Initializes the custom events for Module which are fired
 * automatically at appropriate times by the Module class.
 * @id YAHOO.widget.Module.initEvents
 * @method initEvents
 */

/**
 * CustomEvent fired prior to class initalization.
 * @id YAHOO.widget.Module.beforeInitEvent
 * @event beforeInitEvent
 * @param {class} classRef class reference of the initializing
 * class, such as this.beforeInitEvent.fire(Module)
 */

/**
 * CustomEvent fired after class initalization.
 * @id YAHOO.widget.Module.initEvent
 * @event initEvent
 * @param {class} classRef class reference of the initializing
 * class, such as this.beforeInitEvent.fire(Module)
 */

/**
 * CustomEvent fired when the Module is appended to the DOM
 * @id YAHOO.widget.Module.appendEvent
 * @event appendEvent
 */

/**
 * CustomEvent fired before the Module is rendered
 * @id YAHOO.widget.Module.beforeRenderEvent
 * @event beforeRenderEvent
 */

/**
 * CustomEvent fired after the Module is rendered
 * @id YAHOO.widget.Module.renderEvent
 * @event renderEvent
 */

/**
 * CustomEvent fired when the header content of the Module
 * is modified
 * @id YAHOO.widget.Module.changeHeaderEvent
 * @event changeHeaderEvent
 * @param {String/HTMLElement} content String/element representing
 * the new header content
 */

/**
 * CustomEvent fired when the body content of the Module is modified
 * @id YAHOO.widget.Module.changeBodyEvent
 * @event changeBodyEvent
 * @param {String/HTMLElement} content String/element representing
 * the new body content
 */

/**
 * CustomEvent fired when the footer content of the Module
 * is modified
 * @id YAHOO.widget.Module.changeFooterEvent
 * @event changeFooterEvent
 * @param {String/HTMLElement} content String/element representing
 * the new footer content
 */

/**
 * CustomEvent fired when the content of the Module is modified
 * @id YAHOO.widget.Module.changeContentEvent
 * @event changeContentEvent
 */

/**
 * CustomEvent fired when the Module is destroyed
 * @id YAHOO.widget.Module.destroyEvent
 * @event destroyEvent
 */

/**
 * CustomEvent fired before the Module is shown
 * @id YAHOO.widget.Module.beforeShowEvent
 * @event beforeShowEvent
 */

/**
 * CustomEvent fired after the Module is shown
 * @id YAHOO.widget.Module.showEvent
 * @event showEvent
 */

/**
 * CustomEvent fired before the Module is hidden
 * @id YAHOO.widget.Module.beforeHideEvent
 * @event beforeHideEvent
 */

/**
 * CustomEvent fired after the Module is hidden
 * @id YAHOO.widget.Module.hideEvent
 * @event hideEvent
 */

/**
 * String representing the current user-agent platform
 * @id YAHOO.widget.Module.platform
 * @property platform
 * @type String
 */

/**
 * String representing the user-agent of the browser
 * @id YAHOO.widget.Module.browser
 * @deprecated Use YAHOO.env.ua
 * @property browser
 * @type String
 */

/**
 * Boolean representing whether or not the current browsing context is
 * secure (https)
 * @id YAHOO.widget.Module.isSecure
 * @property isSecure
 * @type Boolean
 */

/**
 * Initializes the custom events for Module which are fired
 * automatically at appropriate times by the Module class.
 * @id YAHOO.widget.Module.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * Specifies whether the Module is visible on the page.
 * @id YAHOO.widget.Module.visible
 * @config visible
 * @type Boolean
 * @default true
 */

/**
 * Object or array of objects representing the ContainerEffect
 * classes that are active for animating the container.
 * @id YAHOO.widget.Module.effect
 * @config effect
 * @type Object
 * @default null
 */

/**
 * Specifies whether to create a special proxy iframe to monitor
 * for user font resizing in the document
 * @id YAHOO.widget.Module.monitorresize
 * @config monitorresize
 * @type Boolean
 * @default true
 */

/**
 * Specifies if the module should be rendered as the first child
 * of document.body or appended as the last child when render is called
 * with document.body as the "appendToNode".
 * <p>
 * Appending to the body while the DOM is still being constructed can
 * lead to Operation Aborted errors in IE hence this flag is set to
 * false by default.
 * </p>
 *
 * @id YAHOO.widget.Module.appendtodocumentbody
 * @config appendtodocumentbody
 * @type Boolean
 * @default false
 */

/**
 * The Module class's initialization method, which is executed for
 * Module and all of its subclasses. This method is automatically
 * called by the constructor, and  sets up all DOM references for
 * pre-existing markup, and creates required markup if it is not
 * already present.
 * @id YAHOO.widget.Module.init
 * @method init
 * @param {String} el The element ID representing the Module <em>OR</em>
 * @param {HTMLElement} el The element representing the Module
 * @param {Object} userConfig The configuration Object literal
 * containing the configuration that should be set for this module.
 * See configuration documentation for more details.
 */

/**
 * The Module's Config object used for monitoring
 * configuration properties.
 * @id YAHOO.widget.Module.cfg
 * @property cfg
 * @type YAHOO.util.Config
 */

/**
 * Initialize an empty IFRAME that is placed out of the visible area
 * that can be used to detect text resize.
 * @id YAHOO.widget.Module.initResizeMonitor
 * @method initResizeMonitor
 */

/**
 * Create and initialize the text resize monitoring iframe.
 *
 * @id YAHOO.widget.Module._initResizeMonitor
 * @protected
 * @method _initResizeMonitor
 */

/**
 * Text resize monitor helper method.
 * Determines if the browser supports resize events on iframe content windows.
 *
 * @id YAHOO.widget.Module._supportsCWResize
 * @private
 * @method _supportsCWResize
 */

/**
 * Event handler fired when the resize monitor element is resized.
 * @id YAHOO.widget.Module.onDomResize
 * @method onDomResize
 * @param {DOMEvent} e The DOM resize event
 * @param {Object} obj The scope object passed to the handler
 */

/**
 * Sets the Module's header content to the string specified, or appends
 * the passed element to the header. If no header is present, one will
 * be automatically created. An empty string can be passed to the method
 * to clear the contents of the header.
 *
 * @id YAHOO.widget.Module.setHeader
 * @method setHeader
 * @param {String} headerContent The string used to set the header.
 * As a convenience, non HTMLElement objects can also be passed into
 * the method, and will be treated as strings, with the header innerHTML
 * set to their default toString implementations.
 * <em>OR</em>
 * @param {HTMLElement} headerContent The HTMLElement to append to
 * the header
 */

/**
 * Appends the passed element to the header. If no header is present,
 * one will be automatically created.
 * @id YAHOO.widget.Module.appendToHeader
 * @method appendToHeader
 * @param {HTMLElement} element The element to append to the header
 */

/**
 * Sets the Module's body content to the HTML specified, or appends the
 * passed element to the body. If no body is present, one will be
 * automatically created. An empty string can be passed to the method
 * to clear the contents of the body.
 * @id YAHOO.widget.Module.setBody
 * @method setBody
 * @param {String} bodyContent The HTML used to set the body.
 * As a convenience, non HTMLElement objects can also be passed into
 * the method, and will be treated as strings, with the body innerHTML
 * set to their default toString implementations.
 * <em>OR</em>
 * @param {HTMLElement} bodyContent The HTMLElement to append to the body
 */

/**
 * Appends the passed element to the body. If no body is present, one
 * will be automatically created.
 * @id YAHOO.widget.Module.appendToBody
 * @method appendToBody
 * @param {HTMLElement} element The element to append to the body
 */

/**
 * Sets the Module's footer content to the HTML specified, or appends
 * the passed element to the footer. If no footer is present, one will
 * be automatically created. An empty string can be passed to the method
 * to clear the contents of the footer.
 * @id YAHOO.widget.Module.setFooter
 * @method setFooter
 * @param {String} footerContent The HTML used to set the footer
 * As a convenience, non HTMLElement objects can also be passed into
 * the method, and will be treated as strings, with the footer innerHTML
 * set to their default toString implementations.
 * <em>OR</em>
 * @param {HTMLElement} footerContent The HTMLElement to append to
 * the footer
 */

/**
 * Appends the passed element to the footer. If no footer is present,
 * one will be automatically created.
 * @id YAHOO.widget.Module.appendToFooter
 * @method appendToFooter
 * @param {HTMLElement} element The element to append to the footer
 */

/**
 * Renders the Module by inserting the elements that are not already
 * in the main Module into their correct places. Optionally appends
 * the Module to the specified node prior to the render's execution.
 * <p>
 * For Modules without existing markup, the appendToNode argument
 * is REQUIRED. If this argument is ommitted and the current element is
 * not present in the document, the function will return false,
 * indicating that the render was a failure.
 * </p>
 * <p>
 * NOTE: As of 2.3.1, if the appendToNode is the document's body element
 * then the module is rendered as the first child of the body element,
 * and not appended to it, to avoid Operation Aborted errors in IE when
 * rendering the module before window's load event is fired. You can
 * use the appendtodocumentbody configuration property to change this
 * to append to document.body if required.
 * </p>
 * @id YAHOO.widget.Module.render
 * @method render
 * @param {String} appendToNode The element id to which the Module
 * should be appended to prior to rendering <em>OR</em>
 * @param {HTMLElement} appendToNode The element to which the Module
 * should be appended to prior to rendering
 * @param {HTMLElement} moduleElement OPTIONAL. The element that
 * represents the actual Standard Module container.
 * @return {Boolean} Success or failure of the render
 */

/**
 * Removes the Module element from the DOM and sets all child elements
 * to null.
 * @id YAHOO.widget.Module.destroy
 * @method destroy
 */

/**
 * Shows the Module element by setting the visible configuration
 * property to true. Also fires two events: beforeShowEvent prior to
 * the visibility change, and showEvent after.
 * @id YAHOO.widget.Module.show
 * @method show
 */

/**
 * Hides the Module element by setting the visible configuration
 * property to false. Also fires two events: beforeHideEvent prior to
 * the visibility change, and hideEvent after.
 * @id YAHOO.widget.Module.hide
 * @method hide
 */

/**
 * Default event handler for changing the visibility property of a
 * Module. By default, this is achieved by switching the "display" style
 * between "block" and "none".
 * This method is responsible for firing showEvent and hideEvent.
 * @id YAHOO.widget.Module.configVisible
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 * @method configVisible
 */

/**
 * Default event handler for the "monitorresize" configuration property
 * @id YAHOO.widget.Module.configMonitorResize
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 * @method configMonitorResize
 */

/**
 * This method is a protected helper, used when constructing the DOM structure for the module
 * to account for situations which may cause Operation Aborted errors in IE. It should not
 * be used for general DOM construction.
 * <p>
 * If the parentNode is not document.body, the element is appended as the last element.
 * </p>
 * <p>
 * If the parentNode is document.body the element is added as the first child to help
 * prevent Operation Aborted errors in IE.
 * </p>
 *
 * @id YAHOO.widget.Module._addToParent
 * @param {parentNode} The HTML element to which the element will be added
 * @param {element} The HTML element to be added to parentNode's children
 * @method _addToParent
 * @protected
 */

/**
 * Returns a String representation of the Object.
 * @id YAHOO.widget.Module.toString
 * @method toString
 * @return {String} The string representation of the Module
 */

/**
 * Overlay is a Module that is absolutely positioned above the page flow. It
 * has convenience methods for positioning and sizing, as well as options for
 * controlling zIndex and constraining the Overlay's position to the current
 * visible viewport. Overlay also contains a dynamicly generated IFRAME which
 * is placed beneath it for Internet Explorer 6 and 5.x so that it will be
 * properly rendered above SELECT elements.
 * @id YAHOO.widget.Overlay
 * @namespace YAHOO.widget
 * @class Overlay
 * @extends YAHOO.widget.Module
 * @param {String} el The element ID representing the Overlay <em>OR</em>
 * @param {HTMLElement} el The element representing the Overlay
 * @param {Object} userConfig The configuration object literal containing
 * the configuration that should be set for this Overlay. See configuration
 * documentation for more details.
 * @constructor
 */

/**
 * Constant representing the name of the Overlay's events
 * @id YAHOO.widget.Overlay.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Overlay's configuration properties
 * @id YAHOO.widget.Overlay.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * The URL that will be placed in the iframe
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.IFRAME_SRC
 * @property YAHOO.widget.Overlay.IFRAME_SRC
 * @static
 * @final
 * @type String
 */

/**
 * Number representing how much the iframe shim should be offset from each
 * side of an Overlay instance, in pixels.
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.IFRAME_SRC
 * @property YAHOO.widget.Overlay.IFRAME_SRC
 * @default 3
 * @static
 * @final
 * @type Number
 */

/**
 * Number representing the minimum distance an Overlay instance should be
 * positioned relative to the boundaries of the browser's viewport, in pixels.
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.VIEWPORT_OFFSET
 * @property YAHOO.widget.Overlay.VIEWPORT_OFFSET
 * @default 10
 * @static
 * @final
 * @type Number
 */

/**
 * Constant representing the top left corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.TOP_LEFT
 * @property YAHOO.widget.Overlay.TOP_LEFT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the top right corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.TOP_RIGHT
 * @property YAHOO.widget.Overlay.TOP_RIGHT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the top bottom left corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.BOTTOM_LEFT
 * @property YAHOO.widget.Overlay.BOTTOM_LEFT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the bottom right corner of an element, used for
 * configuring the context element alignment
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.BOTTOM_RIGHT
 * @property YAHOO.widget.Overlay.BOTTOM_RIGHT
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the default CSS class used for an Overlay
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.CSS_OVERLAY
 * @property YAHOO.widget.Overlay.CSS_OVERLAY
 * @static
 * @final
 * @type String
 */

/**
 * A singleton CustomEvent used for reacting to the DOM event for
 * window scroll
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowScrollEvent
 * @event YAHOO.widget.Overlay.windowScrollEvent
 */

/**
 * A singleton CustomEvent used for reacting to the DOM event for
 * window resize
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowResizeEvent
 * @event YAHOO.widget.Overlay.windowResizeEvent
 */

/**
 * The DOM event handler used to fire the CustomEvent for window scroll
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowScrollHandler
 * @method YAHOO.widget.Overlay.windowScrollHandler
 * @static
 * @param {DOMEvent} e The DOM scroll event
 */

/**
 * The DOM event handler used to fire the CustomEvent for window resize
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay.windowResizeHandler
 * @method YAHOO.widget.Overlay.windowResizeHandler
 * @static
 * @param {DOMEvent} e The DOM resize event
 */

/**
 * A boolean that indicated whether the window resize and scroll events have
 * already been subscribed to.
 * @id YAHOO.widget.Overlay.YAHOO.widget.Overlay._initialized
 * @property YAHOO.widget.Overlay._initialized
 * @private
 * @type Boolean
 */

/**
 * The Overlay initialization method, which is executed for Overlay and
 * all of its subclasses. This method is automatically called by the
 * constructor, and  sets up all DOM references for pre-existing markup,
 * and creates required markup if it is not already present.
 * @id YAHOO.widget.Overlay.init
 * @method init
 * @param {String} el The element ID representing the Overlay <em>OR</em>
 * @param {HTMLElement} el The element representing the Overlay
 * @param {Object} userConfig The configuration object literal
 * containing the configuration that should be set for this Overlay.
 * See configuration documentation for more details.
 */

/**
 * Initializes the custom events for Overlay which are fired
 * automatically at appropriate times by the Overlay class.
 * @id YAHOO.widget.Overlay.initEvents
 * @method initEvents
 */

/**
 * CustomEvent fired before the Overlay is moved.
 * @id YAHOO.widget.Overlay.beforeMoveEvent
 * @event beforeMoveEvent
 * @param {Number} x x coordinate
 * @param {Number} y y coordinate
 */

/**
 * CustomEvent fired after the Overlay is moved.
 * @id YAHOO.widget.Overlay.moveEvent
 * @event moveEvent
 * @param {Number} x x coordinate
 * @param {Number} y y coordinate
 */

/**
 * Initializes the class's configurable properties which can be changed
 * using the Overlay's Config object (cfg).
 * @id YAHOO.widget.Overlay.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * The absolute x-coordinate position of the Overlay
 * @id YAHOO.widget.Overlay.x
 * @config x
 * @type Number
 * @default null
 */

/**
 * The absolute y-coordinate position of the Overlay
 * @id YAHOO.widget.Overlay.y
 * @config y
 * @type Number
 * @default null
 */

/**
 * An array with the absolute x and y positions of the Overlay
 * @id YAHOO.widget.Overlay.xy
 * @config xy
 * @type Number[]
 * @default null
 */

/**
 * The array of context arguments for context-sensitive positioning.
 * The format is: [id or element, element corner, context corner].
 * For example, setting this property to ["img1", "tl", "bl"] would
 * align the Overlay's top left corner to the context element's
 * bottom left corner.
 * @id YAHOO.widget.Overlay.context
 * @config context
 * @type Array
 * @default null
 */

/**
 * True if the Overlay should be anchored to the center of
 * the viewport.
 * @id YAHOO.widget.Overlay.fixedcenter
 * @config fixedcenter
 * @type Boolean
 * @default false
 */

/**
 * CSS width of the Overlay.
 * @id YAHOO.widget.Overlay.width
 * @config width
 * @type String
 * @default null
 */

/**
 * CSS height of the Overlay.
 * @id YAHOO.widget.Overlay.height
 * @config height
 * @type String
 * @default null
 */

/**
 * CSS z-index of the Overlay.
 * @id YAHOO.widget.Overlay.zIndex
 * @config zIndex
 * @type Number
 * @default null
 */

/**
 * True if the Overlay should be prevented from being positioned
 * out of the viewport.
 * @id YAHOO.widget.Overlay.constraintoviewport
 * @config constraintoviewport
 * @type Boolean
 * @default false
 */

/**
 * @id YAHOO.widget.Overlay.iframe
 * @config iframe
 * @description Boolean indicating whether or not the Overlay should
 * have an IFRAME shim; used to prevent SELECT elements from
 * poking through an Overlay instance in IE6.  When set to "true",
 * the iframe shim is created when the Overlay instance is intially
 * made visible.
 * @type Boolean
 * @default true for IE6 and below, false for all other browsers.
 */

/**
 * Moves the Overlay to the specified position. This function is
 * identical to calling this.cfg.setProperty("xy", [x,y]);
 * @id YAHOO.widget.Overlay.moveTo
 * @method moveTo
 * @param {Number} x The Overlay's new x position
 * @param {Number} y The Overlay's new y position
 */

/**
 * Adds a CSS class ("hide-scrollbars") and removes a CSS class
 * ("show-scrollbars") to the Overlay to fix a bug in Gecko on Mac OS X
 * (https://bugzilla.mozilla.org/show_bug.cgi?id=187435)
 * @id YAHOO.widget.Overlay.hideMacGeckoScrollbars
 * @method hideMacGeckoScrollbars
 */

/**
 * Adds a CSS class ("show-scrollbars") and removes a CSS class
 * ("hide-scrollbars") to the Overlay to fix a bug in Gecko on Mac OS X
 * (https://bugzilla.mozilla.org/show_bug.cgi?id=187435)
 * @id YAHOO.widget.Overlay.showMacGeckoScrollbars
 * @method showMacGeckoScrollbars
 */

/**
 * The default event handler fired when the "visible" property is
 * changed.  This method is responsible for firing showEvent
 * and hideEvent.
 * @id YAHOO.widget.Overlay.configVisible
 * @method configVisible
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Center event handler used for centering on scroll/resize, but only if
 * the Overlay is visible
 * @id YAHOO.widget.Overlay.doCenterOnDOMEvent
 * @method doCenterOnDOMEvent
 */

/**
 * The default event handler fired when the "fixedcenter" property
 * is changed.
 * @id YAHOO.widget.Overlay.configFixedCenter
 * @method configFixedCenter
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "height" property is changed.
 * @id YAHOO.widget.Overlay.configHeight
 * @method configHeight
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "width" property is changed.
 * @id YAHOO.widget.Overlay.configWidth
 * @method configWidth
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "zIndex" property is changed.
 * @id YAHOO.widget.Overlay.configzIndex
 * @method configzIndex
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "xy" property is changed.
 * @id YAHOO.widget.Overlay.configXY
 * @method configXY
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "x" property is changed.
 * @id YAHOO.widget.Overlay.configX
 * @method configX
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "y" property is changed.
 * @id YAHOO.widget.Overlay.configY
 * @method configY
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Shows the iframe shim, if it has been enabled.
 * @id YAHOO.widget.Overlay.showIframe
 * @method showIframe
 */

/**
 * Hides the iframe shim, if it has been enabled.
 * @id YAHOO.widget.Overlay.hideIframe
 * @method hideIframe
 */

/**
 * Syncronizes the size and position of iframe shim to that of its
 * corresponding Overlay instance.
 * @id YAHOO.widget.Overlay.syncIframe
 * @method syncIframe
 */

/**
 * Sets the zindex of the iframe shim, if it exists, based on the zindex of
 * the Overlay element. The zindex of the iframe is set to be one less
 * than the Overlay element's zindex.
 *
 * <p>NOTE: This method will not bump up the zindex of the Overlay element
 * to ensure that the iframe shim has a non-negative zindex.
 * If you require the iframe zindex to be 0 or higher, the zindex of
 * the Overlay element should be set to a value greater than 0, before
 * this method is called.
 * </p>
 * @id YAHOO.widget.Overlay.stackIframe
 * @method stackIframe
 */

/**
 * The default event handler fired when the "iframe" property is changed.
 * @id YAHOO.widget.Overlay.configIframe
 * @method configIframe
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Set's the container's XY value from DOM if not already set.
 *
 * Differs from syncPosition, in that the XY value is only sync'd with DOM if
 * not already set. The method also refire's the XY config property event, so any
 * beforeMove, Move event listeners are invoked.
 *
 * @id YAHOO.widget.Overlay._primeXYFromDOM
 * @method _primeXYFromDOM
 * @protected
 */

/**
 * The default event handler fired when the "constraintoviewport"
 * property is changed.
 * @id YAHOO.widget.Overlay.configConstrainToViewport
 * @method configConstrainToViewport
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for
 * the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * The default event handler fired when the "context" property
 * is changed.
 * @id YAHOO.widget.Overlay.configContext
 * @method configContext
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Aligns the Overlay to its context element using the specified corner
 * points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT,
 * and BOTTOM_RIGHT.
 * @id YAHOO.widget.Overlay.align
 * @method align
 * @param {String} elementAlign  The String representing the corner of
 * the Overlay that should be aligned to the context element
 * @param {String} contextAlign  The corner of the context element
 * that the elementAlign corner should stick to.
 */

/**
 * The default event handler executed when the moveEvent is fired, if the
 * "constraintoviewport" is set to true.
 * @id YAHOO.widget.Overlay.enforceConstraints
 * @method enforceConstraints
 * @param {String} type The CustomEvent type (usually the property name)
 * @param {Object[]} args The CustomEvent arguments. For configuration
 * handlers, args[0] will equal the newly applied value for the property.
 * @param {Object} obj The scope object. For configuration handlers,
 * this will usually equal the owner.
 */

/**
 * Given x, y coordinate values, returns the calculated coordinates required to
 * position the Overlay if it is to be constrained to the viewport, based on the
 * current element size, viewport dimensions and scroll values.
 *
 * @id YAHOO.widget.Overlay.getConstrainedXY
 * @param {Number} x The X coordinate value to be constrained
 * @param {Number} y The Y coordinate value to be constrained
 * @return {Array} The constrained x and y coordinates at index 0 and 1 respectively;
 * @method getConstrainedXY
 */

/**
 * Centers the container in the viewport.
 * @id YAHOO.widget.Overlay.center
 * @method center
 */

/**
 * Synchronizes the Panel's "xy", "x", and "y" properties with the
 * Panel's position in the DOM. This is primarily used to update
 * position information during drag & drop.
 * @id YAHOO.widget.Overlay.syncPosition
 * @method syncPosition
 */

/**
 * Event handler fired when the resize monitor element is resized.
 * @id YAHOO.widget.Overlay.onDomResize
 * @method onDomResize
 * @param {DOMEvent} e The resize DOM event
 * @param {Object} obj The scope object
 */

/**
 * Places the Overlay on top of all other instances of
 * YAHOO.widget.Overlay.
 * @id YAHOO.widget.Overlay.bringToTop
 * @method bringToTop
 */

/**
 * Removes the Overlay element from the DOM and sets all child
 * elements to null.
 * @id YAHOO.widget.Overlay.destroy
 * @method destroy
 */

/**
 * Returns a String representation of the object.
 * @id YAHOO.widget.Overlay.toString
 * @method toString
 * @return {String} The string representation of the Overlay.
 */

/**
 * OverlayManager is used for maintaining the focus status of
 * multiple Overlays.
 * @id YAHOO.widget.OverlayManager
 * @namespace YAHOO.widget
 * @namespace YAHOO.widget
 * @class OverlayManager
 * @constructor
 * @param {Array} overlays Optional. A collection of Overlays to register
 * with the manager.
 * @param {Object} userConfig  The object literal representing the user
 * configuration of the OverlayManager
 */

/**
 * The CSS class representing a focused Overlay
 * @id YAHOO.widget.OverlayManager.OverlayManager.CSS_FOCUSED
 * @property OverlayManager.CSS_FOCUSED
 * @static
 * @final
 * @type String
 */

/**
 * The class's constructor function
 * @id YAHOO.widget.OverlayManager.contructor
 * @property contructor
 * @type Function
 */

/**
 * The array of Overlays that are currently registered
 * @id YAHOO.widget.OverlayManager.overlays
 * @property overlays
 * @type YAHOO.widget.Overlay[]
 */

/**
 * Initializes the default configuration of the OverlayManager
 * @id YAHOO.widget.OverlayManager.initDefaultConfig
 * @method initDefaultConfig
 */

/**
 * The collection of registered Overlays in use by
 * the OverlayManager
 * @id YAHOO.widget.OverlayManager.overlays
 * @config overlays
 * @type YAHOO.widget.Overlay[]
 * @default null
 */

/**
 * The default DOM event that should be used to focus an Overlay
 * @id YAHOO.widget.OverlayManager.focusevent
 * @config focusevent
 * @type String
 * @default "mousedown"
 */

/**
 * Initializes the OverlayManager
 * @id YAHOO.widget.OverlayManager.init
 * @method init
 * @param {Overlay[]} overlays Optional. A collection of Overlays to
 * register with the manager.
 * @param {Object} userConfig  The object literal representing the user
 * configuration of the OverlayManager
 */

/**
 * The OverlayManager's Config object used for monitoring
 * configuration properties.
 * @id YAHOO.widget.OverlayManager.cfg
 * @property cfg
 * @type Config
 */

/**
 * The currently activated Overlay
 * @id YAHOO.widget.OverlayManager.activeOverlay
 * @property activeOverlay
 * @private
 * @type YAHOO.widget.Overlay
 */

/**
 * Returns the currently focused Overlay
 * @id YAHOO.widget.OverlayManager.getActive
 * @method getActive
 * @return {Overlay} The currently focused Overlay
 */

/**
 * Focuses the specified Overlay
 * @id YAHOO.widget.OverlayManager.focus
 * @method focus
 * @param {Overlay} overlay The Overlay to focus
 * @param {String} overlay The id of the Overlay to focus
 */

/**
 * Removes the specified Overlay from the manager
 * @id YAHOO.widget.OverlayManager.remove
 * @method remove
 * @param {Overlay} overlay The Overlay to remove
 * @param {String} overlay The id of the Overlay to remove
 */

/**
 * Removes focus from all registered Overlays in the manager
 * @id YAHOO.widget.OverlayManager.blurAll
 * @method blurAll
 */

/**
 * @id YAHOO.widget.OverlayManager._onOverlayElementFocus
 * @method _onOverlayElementFocus
 * @description Event handler for the DOM event that is used to focus
 * the Overlay instance as specified by the "focusevent"
 * configuration property.
 * @private
 * @param {Event} p_oEvent Object representing the DOM event
 * object passed back by the event utility (Event).
 */

/**
 * @id YAHOO.widget.OverlayManager._onOverlayDestroy
 * @method _onOverlayDestroy
 * @description "destroy" event handler for the Overlay.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 * @param {Overlay} p_oOverlay Object representing the menu that
 * fired the event.
 */

/**
 * Registers an Overlay or an array of Overlays with the manager. Upon
 * registration, the Overlay receives functions for focus and blur,
 * along with CustomEvents for each.
 * @id YAHOO.widget.OverlayManager.register
 * @method register
 * @param {Overlay} overlay  An Overlay to register with the manager.
 * @param {Overlay[]} overlay  An array of Overlays to register with
 * the manager.
 * @return {Boolean} True if any Overlays are registered.
 */

/**
 * Places the specified Overlay instance on top of all other
 * Overlay instances.
 * @id YAHOO.widget.OverlayManager.bringToTop
 * @method bringToTop
 * @param {YAHOO.widget.Overlay} p_oOverlay Object representing an
 * Overlay instance.
 * @param {String} p_oOverlay String representing the id of an
 * Overlay instance.
 */

/**
 * Attempts to locate an Overlay by instance or ID.
 * @id YAHOO.widget.OverlayManager.find
 * @method find
 * @param {Overlay} overlay  An Overlay to locate within the manager
 * @param {String} overlay  An Overlay id to locate within the manager
 * @return {Overlay} The requested Overlay, if found, or null if it
 * cannot be located.
 */

/**
 * Used for sorting the manager's Overlays by z-index.
 * @id YAHOO.widget.OverlayManager.compareZIndexDesc
 * @method compareZIndexDesc
 * @private
 * @return {Number} 0, 1, or -1, depending on where the Overlay should
 * fall in the stacking order.
 */

/**
 * Shows all Overlays in the manager.
 * @id YAHOO.widget.OverlayManager.showAll
 * @method showAll
 */

/**
 * Hides all Overlays in the manager.
 * @id YAHOO.widget.OverlayManager.hideAll
 * @method hideAll
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.OverlayManager.toString
 * @method toString
 * @return {String} The string representation of the OverlayManager
 */

/**
 * ContainerEffect encapsulates animation transitions that are executed when
 * an Overlay is shown or hidden.
 * @id YAHOO.widget.ContainerEffect
 * @namespace YAHOO.widget
 * @class ContainerEffect
 * @constructor
 * @param {YAHOO.widget.Overlay} overlay The Overlay that the animation
 * should be associated with
 * @param {Object} attrIn The object literal representing the animation
 * arguments to be used for the animate-in transition. The arguments for
 * this literal are: attributes(object, see YAHOO.util.Anim for description),
 * duration(Number), and method(i.e. Easing.easeIn).
 * @param {Object} attrOut The object literal representing the animation
 * arguments to be used for the animate-out transition. The arguments for
 * this literal are: attributes(object, see YAHOO.util.Anim for description),
 * duration(Number), and method(i.e. Easing.easeIn).
 * @param {HTMLElement} targetElement Optional. The target element that
 * should be animated during the transition. Defaults to overlay.element.
 * @param {class} Optional. The animation class to instantiate. Defaults to
 * YAHOO.util.Anim. Other options include YAHOO.util.Motion.
 */

/**
 * The overlay to animate
 * @id YAHOO.widget.ContainerEffect.overlay
 * @property overlay
 * @type YAHOO.widget.Overlay
 */

/**
 * The animation attributes to use when transitioning into view
 * @id YAHOO.widget.ContainerEffect.attrIn
 * @property attrIn
 * @type Object
 */

/**
 * The animation attributes to use when transitioning out of view
 * @id YAHOO.widget.ContainerEffect.attrOut
 * @property attrOut
 * @type Object
 */

/**
 * The target element to be animated
 * @id YAHOO.widget.ContainerEffect.targetElement
 * @property targetElement
 * @type HTMLElement
 */

/**
 * The animation class to use for animating the overlay
 * @id YAHOO.widget.ContainerEffect.animClass
 * @property animClass
 * @type class
 */

/**
 * A pre-configured ContainerEffect instance that can be used for fading
 * an overlay in and out.
 * @id YAHOO.widget.ContainerEffect.FADE
 * @method FADE
 * @static
 * @param {YAHOO.widget.Overlay} overlay The Overlay object to animate
 * @param {Number} dur The duration of the animation
 * @return {YAHOO.widget.ContainerEffect} The configured ContainerEffect object
 */

/**
 * A pre-configured ContainerEffect instance that can be used for sliding an
 * overlay in and out.
 * @id YAHOO.widget.ContainerEffect.SLIDE
 * @method SLIDE
 * @static
 * @param {YAHOO.widget.Overlay} overlay The Overlay object to animate
 * @param {Number} dur The duration of the animation
 * @return {YAHOO.widget.ContainerEffect} The configured ContainerEffect object
 */

/**
 * Initializes the animation classes and events.
 * @id YAHOO.widget.ContainerEffect.init
 * @method init
 */

/**
 * Triggers the in-animation.
 * @id YAHOO.widget.ContainerEffect.animateIn
 * @method animateIn
 */

/**
 * Triggers the out-animation.
 * @id YAHOO.widget.ContainerEffect.animateOut
 * @method animateOut
 */

/**
 * The default onStart handler for the in-animation.
 * @id YAHOO.widget.ContainerEffect.handleStartAnimateIn
 * @method handleStartAnimateIn
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onTween handler for the in-animation.
 * @id YAHOO.widget.ContainerEffect.handleTweenAnimateIn
 * @method handleTweenAnimateIn
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onComplete handler for the in-animation.
 * @id YAHOO.widget.ContainerEffect.handleCompleteAnimateIn
 * @method handleCompleteAnimateIn
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onStart handler for the out-animation.
 * @id YAHOO.widget.ContainerEffect.handleStartAnimateOut
 * @method handleStartAnimateOut
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onTween handler for the out-animation.
 * @id YAHOO.widget.ContainerEffect.handleTweenAnimateOut
 * @method handleTweenAnimateOut
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * The default onComplete handler for the out-animation.
 * @id YAHOO.widget.ContainerEffect.handleCompleteAnimateOut
 * @method handleCompleteAnimateOut
 * @param {String} type The CustomEvent type
 * @param {Object[]} args The CustomEvent arguments
 * @param {Object} obj The scope object
 */

/**
 * Returns a string representation of the object.
 * @id YAHOO.widget.ContainerEffect.toString
 * @method toString
 * @return {String} The string representation of the ContainerEffect
 */

/**
 * Cookie utility.
 * @id YAHOO.util.Cookie
 * @class Cookie
 * @static
 */

/**
 * Creates a cookie string that can be assigned into document.cookie.
 * @id YAHOO.util.Cookie._createCookieString
 * @param {String} name The name of the cookie.
 * @param {String} value The value of the cookie.
 * @param {encodeValue} encodeValue True to encode the value, false to leave as-is.
 * @param {Object} options (Optional) Options for the cookie.
 * @return {String} The formatted cookie string.
 * @method _createCookieString
 * @private
 * @static
 */

/**
 * Formats a cookie value for an object containing multiple values.
 * @id YAHOO.util.Cookie._createCookieHash
 * @param {Object} hash An object of key-value pairs to create a string for.
 * @return {String} A string suitable for use as a cookie value.
 * @method _createCookieHash
 * @private
 * @static
 */

/**
 * Parses a cookie hash string into an object.
 * @id YAHOO.util.Cookie._parseCookieHash
 * @param {String} text The cookie hash string to parse. The string should already be URL-decoded.
 * @return {Object} An object containing entries for each cookie value.
 * @method _parseCookieHash
 * @private
 * @static
 */

/**
 * Parses a cookie string into an object representing all accessible cookies.
 * @id YAHOO.util.Cookie._parseCookieString
 * @param {String} text The cookie string to parse.
 * @return {Object} An object containing entries for each accessible cookie.
 * @method _parseCookieString
 * @private
 * @static
 */

/**
 * Returns the cookie value for the given name.
 * @id YAHOO.util.Cookie.get
 * @param {String} name The name of the cookie to retrieve.
 * @param {Function} converter (Optional) A function to run on the value before returning
 *      it. The function is not used if the cookie doesn't exist.
 * @return {Variant} If no converter is specified, returns a string or null if
 *      the cookie doesn't exist. If the converter is specified, returns the value
 *      returned from the converter or null if the cookie doesn't exist.
 * @method get
 * @static
 */

/**
 * Returns the value of a subcookie.
 * @id YAHOO.util.Cookie.getSub
 * @param {String} name The name of the cookie to retrieve.
 * @param {String} subName The name of the subcookie to retrieve.
 * @param {Function} converter (Optional) A function to run on the value before returning
 *      it. The function is not used if the cookie doesn't exist.
 * @return {Variant} If the cookie doesn't exist, null is returned. If the subcookie
 *      doesn't exist, null if also returned. If no converter is specified and the
 *      subcookie exists, a string is returned. If a converter is specified and the
 *      subcookie exists, the value returned from the converter is returned.
 * @method getSub
 * @static
 */

/**
 * Returns an object containing name-value pairs stored in the cookie with the given name.
 * @id YAHOO.util.Cookie.getHash
 * @param {String} name The name of the cookie to retrieve.
 * @return {Object} An object of name-value pairs if the cookie with the given name
 *      exists, null if it does not.
 * @method getHash
 * @static
 */

/**
 * Removes a cookie from the machine by setting its expiration date to
 * sometime in the past.
 * @id YAHOO.util.Cookie.remove
 * @param {String} name The name of the cookie to remove.
 * @param {Object} options (Optional) An object containing one or more
 *      cookie options: path (a string), domain (a string),
 *      and secure (true/false). The expires option will be overwritten
 *      by the method.
 * @return {String} The created cookie string.
 * @method remove
 * @static
 */

/**
 * Sets a cookie with a given name and value.
 * @id YAHOO.util.Cookie.set
 * @param {String} name The name of the cookie to set.
 * @param {Variant} value The value to set for the cookie.
 * @param {Object} options (Optional) An object containing one or more
 *      cookie options: path (a string), domain (a string), expires (a Date object),
 *      and secure (true/false).
 * @return {String} The created cookie string.
 * @method set
 * @static
 */

/**
 * Sets a sub cookie with a given name to a particular value.
 * @id YAHOO.util.Cookie.setSub
 * @param {String} name The name of the cookie to set.
 * @param {String} subName The name of the subcookie to set.
 * @param {Variant} value The value to set.
 * @param {Object} options (Optional) An object containing one or more
 *      cookie options: path (a string), domain (a string), expires (a Date object),
 *      and secure (true/false).
 * @return {String} The created cookie string.
 * @method setSub
 * @static
 */

/**
 * Sets a cookie with a given name to contain a hash of name-value pairs.
 * @id YAHOO.util.Cookie.setSubs
 * @param {String} name The name of the cookie to set.
 * @param {Object} value An object containing name-value pairs.
 * @param {Object} options (Optional) An object containing one or more
 *      cookie options: path (a string), domain (a string), expires (a Date object),
 *      and secure (true/false).
 * @return {String} The created cookie string.
 * @method setSubs
 * @static
 */

/**
 * The DataSource class defines and manages a live set of data for widgets to
 * interact with. Examples of live databases include in-memory
 * local data such as a JavaScript array, a JavaScript function, or JSON, or
 * remote data such as data retrieved through an XHR connection.
 *
 * @id YAHOO.util.DataSource
 * @class DataSource
 * @uses YAHOO.util.EventProvider
 * @constructor
 * @param oLiveData {Object} Pointer to live database.
 * @param oConfigs {Object} (optional) Object literal of configuration values.
 */

/**
 * Fired when a request is made to the local cache.
 *
 * @id YAHOO.util.DataSource.cacheRequestEvent
 * @event cacheRequestEvent
 * @param oArgs.request {Object} The request object.
 * @param oArgs.callback {Function} The callback function.
 * @param oArgs.caller {Object} (deprecated) Use callback.scope.
 */

/**
 * Fired when data is retrieved from the local cache.
 *
 * @id YAHOO.util.DataSource.cacheResponseEvent
 * @event cacheResponseEvent
 * @param oArgs.request {Object} The request object.
 * @param oArgs.response {Object} The response object.
 * @param oArgs.callback {Function} The callback function.
 * @param oArgs.caller {Object} (deprecated) Use callback.scope.
 * @param oArgs.tId {Number} Transaction ID.
 */

/**
 * Fired when a request is sent to the live data source.
 *
 * @id YAHOO.util.DataSource.requestEvent
 * @event requestEvent
 * @param oArgs.request {Object} The request object.
 * @param oArgs.callback {Function} The callback function.
 * @param oArgs.caller {Object} (deprecated) Use callback.scope.
 */

/**
 * Fired when live data source sends response.
 *
 * @id YAHOO.util.DataSource.responseEvent
 * @event responseEvent
 * @param oArgs.request {Object} The request object.
 * @param oArgs.response {Object} The raw response object.
 * @param oArgs.callback {Function} The callback function.
 * @param oArgs.caller {Object} (deprecated) Use callback.scope.
 */

/**
 * Fired when response is parsed.
 *
 * @id YAHOO.util.DataSource.responseParseEvent
 * @event responseParseEvent
 * @param oArgs.request {Object} The request object.
 * @param oArgs.response {Object} The parsed response object.
 * @param oArgs.callback {Function} The callback function.
 * @param oArgs.caller {Object} (deprecated) Use callback.scope.
 */

/**
 * Fired when response is cached.
 *
 * @id YAHOO.util.DataSource.responseCacheEvent
 * @event responseCacheEvent
 * @param oArgs.request {Object} The request object.
 * @param oArgs.response {Object} The parsed response object.
 * @param oArgs.callback {Function} The callback function.
 * @param oArgs.caller {Object} (deprecated) Use callback.scope.
 */

/**
 * Fired when an error is encountered with the live data source.
 *
 * @id YAHOO.util.DataSource.dataErrorEvent
 * @event dataErrorEvent
 * @param oArgs.request {Object} The request object.
 * @param oArgs.callback {Function} The callback function.
 * @param oArgs.caller {Object} (deprecated) Use callback.scope.
 * @param oArgs.message {String} The error message.
 */

/**
 * Fired when the local cache is flushed.
 *
 * @id YAHOO.util.DataSource.cacheFlushEvent
 * @event cacheFlushEvent
 */

/**
 * Type is unknown.
 *
 * @id YAHOO.util.DataSource.TYPE_UNKNOWN
 * @property TYPE_UNKNOWN
 * @type Number
 * @final
 * @default -1
 */

/**
 * Type is a JavaScript Array.
 *
 * @id YAHOO.util.DataSource.TYPE_JSARRAY
 * @property TYPE_JSARRAY
 * @type Number
 * @final
 * @default 0
 */

/**
 * Type is a JavaScript Function.
 *
 * @id YAHOO.util.DataSource.TYPE_JSFUNCTION
 * @property TYPE_JSFUNCTION
 * @type Number
 * @final
 * @default 1
 */

/**
 * Type is hosted on a server via an XHR connection.
 *
 * @id YAHOO.util.DataSource.TYPE_XHR
 * @property TYPE_XHR
 * @type Number
 * @final
 * @default 2
 */

/**
 * Type is JSON.
 *
 * @id YAHOO.util.DataSource.TYPE_JSON
 * @property TYPE_JSON
 * @type Number
 * @final
 * @default 3
 */

/**
 * Type is XML.
 *
 * @id YAHOO.util.DataSource.TYPE_XML
 * @property TYPE_XML
 * @type Number
 * @final
 * @default 4
 */

/**
 * Type is plain text.
 *
 * @id YAHOO.util.DataSource.TYPE_TEXT
 * @property TYPE_TEXT
 * @type Number
 * @final
 * @default 5
 */

/**
 * Type is an HTML TABLE element.
 *
 * @id YAHOO.util.DataSource.TYPE_HTMLTABLE
 * @property TYPE_HTMLTABLE
 * @type Number
 * @final
 * @default 6
 */

/**
 * Error message for invalid dataresponses.
 *
 * @id YAHOO.util.DataSource.ERROR_DATAINVALID
 * @property ERROR_DATAINVALID
 * @type String
 * @final
 * @default "Invalid data"
 */

/**
 * Error message for null data responses.
 *
 * @id YAHOO.util.DataSource.ERROR_DATANULL
 * @property ERROR_DATANULL
 * @type String
 * @final
 * @default "Null data"
 */

/**
 * Internal class variable to index multiple DataSource instances.
 *
 * @id YAHOO.util.DataSource.DataSource._nIndex
 * @property DataSource._nIndex
 * @type Number
 * @private
 * @static
 */

/**
 * Internal class variable to assign unique transaction IDs.
 *
 * @id YAHOO.util.DataSource.DataSource._nTransactionId
 * @property DataSource._nTransactionId
 * @type Number
 * @private
 * @static
 */

/**
 * Name of DataSource instance.
 *
 * @id YAHOO.util.DataSource._sName
 * @property _sName
 * @type String
 * @private
 */

/**
 * Local cache of data result object literals indexed chronologically.
 *
 * @id YAHOO.util.DataSource._aCache
 * @property _aCache
 * @type Object[]
 * @private
 */

/**
 * Local queue of request connections, enabled if queue needs to be managed.
 *
 * @id YAHOO.util.DataSource._oQueue
 * @property _oQueue
 * @type Object
 * @private
 */

/**
 * Array of polling interval IDs that have been enabled, needed to clear all intervals.
 *
 * @id YAHOO.util.DataSource._aIntervals
 * @property _aIntervals
 * @type Array
 * @private
 */

/**
 * Max size of the local cache.  Set to 0 to turn off caching.  Caching is
 * useful to reduce the number of server connections.  Recommended only for data
 * sources that return comprehensive results for queries or when stale data is
 * not an issue.
 *
 * @id YAHOO.util.DataSource.maxCacheEntries
 * @property maxCacheEntries
 * @type Number
 * @default 0
 */

/**
 * Pointer to live database.
 *
 * @id YAHOO.util.DataSource.liveData
 * @property liveData
 * @type Object
 */

/**
 * Where the live data is held.
 *
 * @id YAHOO.util.DataSource.dataType
 * @property dataType
 * @type Number
 * @default YAHOO.util.DataSource.TYPE_UNKNOWN
 *
 */

/**
 * Format of response.
 *
 * @id YAHOO.util.DataSource.responseType
 * @property responseType
 * @type Number
 * @default YAHOO.util.DataSource.TYPE_UNKNOWN
 */

/**
 * Response schema object literal takes a combination of the following properties:
 *
 * <dl>
 * <dt>resultsList</dt> <dd>Pointer to array of tabular data</dd>
 * <dt>totalRecords</dt> <dd>Pointer to number of records (JSON over XHR only)</dd>
 * <dt>resultNode</dt> <dd>Pointer to node name of row data (XML data only)</dd>
 * <dt>recordDelim</dt> <dd>Record delimiter (text data only)</dd>
 * <dt>fieldDelim</dt> <dd>Field delimiter (text data only)</dd>
 * <dt>fields</dt> <dd>Array of field names (aka keys), or array of object literals
 * such as: {key:"fieldname",parser:YAHOO.util.DataSource.parseDate}</dd>
 * </dl>
 *
 * @id YAHOO.util.DataSource.responseSchema
 * @property responseSchema
 * @type Object
 */

/**
 * Alias to YUI Connection Manager, to allow implementers to customize the utility.
 *
 * @id YAHOO.util.DataSource.connMgr
 * @property connMgr
 * @type Object
 * @default YAHOO.util.Connect
 */

/**
 * If data is accessed over XHR via Connection Manager, this setting defines
 * request/response management in the following manner:
 * <dl>
 *     <dt>queueRequests</dt>
 *     <dd>If a request is already in progress, wait until response is returned
 *     before sending the next request.</dd>
 *
 *     <dt>cancelStaleRequests</dt>
 *     <dd>If a request is already in progress, cancel it before sending the next
 *     request.</dd>
 *
 *     <dt>ignoreStaleResponses</dt>
 *     <dd>Send all requests, but handle only the response for the most recently
 *     sent request.</dd>
 *
 *     <dt>allowAll</dt>
 *     <dd>Send all requests and handle all responses.</dd>
 *
 * </dl>
 *
 * @id YAHOO.util.DataSource.connXhrMode
 * @property connXhrMode
 * @type String
 * @default "allowAll"
 */

/**
 * If data is accessed over XHR via Connection Manager, true if data should be
 * sent via POST, otherwise data will be sent via GET.
 *
 * @id YAHOO.util.DataSource.connMethodPost
 * @property connMethodPost
 * @type Boolean
 * @default false
 */

/**
 * If data is accessed over XHR via Connection Manager, the connection timeout
 * defines how many  milliseconds the XHR connection will wait for a server
 * response. Any non-zero value will enable the Connection utility's
 * Auto-Abort feature.
 *
 * @id YAHOO.util.DataSource.connTimeout
 * @property connTimeout
 * @type Number
 * @default 0
 */

/**
 * Converts data to type String.
 *
 * @id YAHOO.util.DataSource.DataSource.parseString
 * @method DataSource.parseString
 * @param oData {String | Number | Boolean | Date | Array | Object} Data to parse.
 * The special values null and undefined will return null.
 * @return {Number} A string, or null.
 * @static
 */

/**
 * Converts data to type Number.
 *
 * @id YAHOO.util.DataSource.DataSource.parseNumber
 * @method DataSource.parseNumber
 * @param oData {String | Number | Boolean | Null} Data to convert. Beware, null
 * returns as 0.
 * @return {Number} A number, or null if NaN.
 * @static
 */

/**
 * Converts data to type Date.
 *
 * @id YAHOO.util.DataSource.DataSource.parseDate
 * @method DataSource.parseDate
 * @param oData {Date | String | Number} Data to convert.
 * @return {Date} A Date instance.
 * @static
 */

/**
 * Public accessor to the unique name of the DataSource instance.
 *
 * @id YAHOO.util.DataSource.toString
 * @method toString
 * @return {String} Unique name of the DataSource instance.
 */

/**
 * Overridable method passes request to cache and returns cached response if any,
 * refreshing the hit in the cache as the newest item. Returns null if there is
 * no cache hit.
 *
 * @id YAHOO.util.DataSource.getCachedResponse
 * @method getCachedResponse
 * @param oRequest {Object} Request object.
 * @param oCallback {Function} Handler function to receive the response.
 * @param oCaller {Object} The Calling object that is making the request.
 * @return {Object} Cached response object or null.
 */

/**
 * Default overridable method matches given request to given cached request.
 * Returns true if is a hit, returns false otherwise.  Implementers should
 * override this method to customize the cache-matching algorithm.
 *
 * @id YAHOO.util.DataSource.isCacheHit
 * @method isCacheHit
 * @param oRequest {Object} Request object.
 * @param oCachedRequest {Object} Cached request object.
 * @return {Boolean} True if given request matches cached request, false otherwise.
 */

/**
 * Adds a new item to the cache. If cache is full, evicts the stalest item
 * before adding the new item.
 *
 * @id YAHOO.util.DataSource.addToCache
 * @method addToCache
 * @param oRequest {Object} Request object.
 * @param oResponse {Object} Response object to cache.
 */

/**
 * Flushes cache.
 *
 * @id YAHOO.util.DataSource.flushCache
 * @method flushCache
 */

/**
 * Sets up a polling mechanism to send requests at set intervals and forward
 * responses to given callback.
 *
 * @id YAHOO.util.DataSource.setInterval
 * @method setInterval
 * @param nMsec {Number} Length of interval in milliseconds.
 * @param oRequest {Object} Request object.
 * @param oCallback {Function} Handler function to receive the response.
 * @param oCaller {Object} (deprecated) Use oCallback.scope.
 * @return {Number} Interval ID.
 */

/**
 * Disables polling mechanism associated with the given interval ID.
 *
 * @id YAHOO.util.DataSource.clearInterval
 * @method clearInterval
 * @param nId {Number} Interval ID.
 */

/**
 * Disables all known polling intervals.
 *
 * @id YAHOO.util.DataSource.clearAllIntervals
 * @method clearAllIntervals
 */

/**
 * Executes a configured callback.  For object literal callbacks, the third
 * param determines whether to execute the success handler or failure handler.
 * @id YAHOO.util.DataSource.issueCallback
 * @method issueCallback
 * @param callback {Function|Object} the callback to execute
 * @param params {Array} params to be passed to the callback method
 * @param error {Boolean} whether an error occurred
 * @param scope {Object} the scope from which to execute the callback
 * (deprecated - use an object literal callback)
 */

/**
 * First looks for cached response, then sends request to live data.
 *
 * @id YAHOO.util.DataSource.sendRequest
 * @method sendRequest
 * @param oRequest {Object} Request object.
 * @param oCallback {Object} An object literal with the following properties:
 *     <dl>
 *     <dt><code>success</code></dt>
 *     <dd>The function to call when the data is ready.</dd>
 *     <dt><code>failure</code></dt>
 *     <dd>The function to call upon a response failure condition.</dd>
 *     <dt><code>scope</code></dt>
 *     <dd>The object to serve as the scope for the success and failure handlers.</dd>
 *     <dt><code>argument</code></dt>
 *     <dd>Arbitrary data that will be passed back to the success and failure handlers.</dd>
 *     </dl>
 * @param oCaller {Object} (deprecated) Use oCallback.scope.
 * @return {Number} Transaction ID, or null if response found in cache.
 */

/**
 * Overridable method provides default functionality to make a connection to
 * live data in order to send request. The response coming back is then
 * forwarded to the handleResponse function. This method should be customized
 * to achieve more complex implementations.
 *
 * @id YAHOO.util.DataSource.makeConnection
 * @method makeConnection
 * @param oRequest {Object} Request object.
 * @param oCallback {Object} Callback object literal.
 * @param oCaller {Object} (deprecated) Use oCallback.scope.
 * @return {Number} Transaction ID.
 */

/**
 * Define Connection Manager success handler
 *
 * @id YAHOO.util.DataSource._xhrSuccess
 * @method _xhrSuccess
 * @param oResponse {Object} HTTPXMLRequest object
 * @private
 */

/**
 * Define Connection Manager failure handler
 *
 * @id YAHOO.util.DataSource._xhrFailure
 * @method _xhrFailure
 * @param oResponse {Object} HTTPXMLRequest object
 * @private
 */

/**
 * Define Connection Manager callback object
 *
 * @id YAHOO.util.DataSource._xhrCallback
 * @property _xhrCallback
 * @param oResponse {Object} HTTPXMLRequest object
 * @private
 */

/**
 * Receives raw data response and type converts to XML, JSON, etc as necessary.
 * Forwards oFullResponse to appropriate parsing function to get turned into
 * oParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to
 * the cache when appropriate before calling issueCallback().
 *
 * The oParsedResponse object literal has the following properties:
 * <dl>
 *     <dd><dt>tId {Number}</dt> Unique transaction ID</dd>
 *     <dd><dt>results {Array}</dt> Array of parsed data results</dd>
 *     <dd><dt>error {Boolean}</dt> True if there was an error</dd>
 *     <dd><dt>totalRecords {Number}</dt> Total number of records (if available)</dd>
 * </dl>
 *
 * @id YAHOO.util.DataSource.handleResponse
 * @method handleResponse
 * @param oRequest {Object} Request object
 * @param oRawResponse {Object} The raw response from the live database.
 * @param oCallback {Object} Callback object literal.
 * @param oCaller {Object} (deprecated) Use oCallback.scope.
 * @param tId {Number} Transaction ID.
 */

/**
 * Overridable method gives implementers access to the original full response
 * before the data gets parsed. Implementers should take care not to return an
 * unparsable or otherwise invalid response.
 *
 * @id YAHOO.util.DataSource.doBeforeParseData
 * @method doBeforeParseData
 * @param oRequest {Object} Request object.
 * @param oFullResponse {Object} The full response from the live database.
 * @return {Object} Full response for parsing.
 */

/**
 * Overridable method gives implementers access to the original full response and
 * the parsed response (parsed against the given schema) before the data
 * is added to the cache (if applicable) and then sent back to callback function.
 * This is your chance to access the raw response and/or populate the parsed
 * response with any custom data.
 *
 * @id YAHOO.util.DataSource.doBeforeCallback
 * @method doBeforeCallback
 * @param oRequest {Object} Request object.
 * @param oFullResponse {Object} The full response from the live database.
 * @param oParsedResponse {Object} The parsed response to return to calling object.
 * @return {Object} Parsed response object.
 */

/**
 * Overridable method parses Array data into a response object.
 *
 * @id YAHOO.util.DataSource.parseArrayData
 * @method parseArrayData
 * @param oRequest {Object} Request object.
 * @param oFullResponse {Object} The full Array from the live database.
 * @return {Object} Parsed response object with the following properties:<br>
 *     - results (Array) Array of parsed data results<br>
 *     - error (Boolean) True if there was an error<br>
 *     - totalRecords (Number) Total number of records (if available)
 */

/**
 * Overridable method parses plain text data into a response object.
 *
 * @id YAHOO.util.DataSource.parseTextData
 * @method parseTextData
 * @param oRequest {Object} Request object.
 * @param oFullResponse {Object} The full text response from the live database.
 * @return {Object} Parsed response object with the following properties:<br>
 *     - results (Array) Array of parsed data results<br>
 *     - error (Boolean) True if there was an error<br>
 *     - totalRecords (Number) Total number of records (if available)
 */

/**
 * Overridable method parses XML data into a response object.
 *
 * @id YAHOO.util.DataSource.parseXMLData
 * @method parseXMLData
 * @param oRequest {Object} Request object.
 * @param oFullResponse {Object} The full XML response from the live database.
 * @return {Object} Parsed response object with the following properties<br>
 *     - results (Array) Array of parsed data results<br>
 *     - error (Boolean) True if there was an error<br>
 *     - totalRecords (Number) Total number of records (if available)
 */

/**
 * Executes a function created on the fly to parse the response JSON according to
 * the defined schema.
 * @id YAHOO.util.DataSource.executeJSONParser
 * @method executeJSONParser
 * @param oFullResponse {Object} The raw JSON-typed data from the server.
 * @return {Object}
 * @private
 */

/**
 * Overridable method parses JSON data into a response object.
 *
 * @id YAHOO.util.DataSource.parseJSONData
 * @method parseJSONData
 * @param oRequest {Object} Request object.
 * @param oFullResponse {Object} The full JSON from the live database.
 * @return {Object} Parsed response object with the following properties<br>
 *     - results (Array) Array of parsed data results<br>
 *     - error (Boolean) True if there was an error<br>
 *     - totalRecords (Number) Total number of records (if available)
 */

/**
 * Overridable method parses an HTML TABLE element reference into a response object.
 *
 * @id YAHOO.util.DataSource.parseHTMLTableData
 * @method parseHTMLTableData
 * @param oRequest {Object} Request object.
 * @param oFullResponse {Object} The full HTML element reference from the live database.
 * @return {Object} Parsed response object with the following properties<br>
 *     - results (Array) Array of parsed data results<br>
 *     - error (Boolean) True if there was an error<br>
 *     - totalRecords (Number) Total number of records (if available)
 */

/**
 * The static Number class provides helper functions to deal with data of type
 * Number.
 *
 * @id YAHOO.util.Number
 * @namespace YAHOO.util
 * @requires datasource
 * @class Number
 * @static
 */

/**
 * Takes a native JavaScript Number and formats to string for display to user.
 *
 * @id YAHOO.util.Number.format
 * @method format
 * @param nData {Number} Number.
 * @param oConfig {Object} (Optional) Optional configuration values:
 *  <dl>
 *   <dt>prefix {String}</dd>
 *   <dd>String prepended before each number, like a currency designator "$"</dd>
 *   <dt>decimalPlaces {Number}</dd>
 *   <dd>Number of decimal places to round.</dd>
 *   <dt>decimalSeparator {String}</dd>
 *   <dd>Decimal separator</dd>
 *   <dt>thousandsSeparator {String}</dd>
 *   <dd>Thousands separator</dd>
 *   <dt>suffix {String}</dd>
 *   <dd>String appended after each number, like " items" (note the space)</dd>
 *  </dl>
 * @return {String} Formatted number for display.
 */

/**
 * The static Date class provides helper functions to deal with data of type
 * Number.
 *
 * @id YAHOO.util.Date
 * @namespace YAHOO.util
 * @requires datasource
 * @class Date
 * @static
 */

/**
 * Takes a native JavaScript Date and formats to string for display to user.
 *
 * @id YAHOO.util.Date.format
 * @method format
 * @param oDate {Date} Date.
 * @param oConfig {Object} (Optional) Optional configuration values:
 *  <dl>
 *   <dt>format {String}</dd>
 *   <dd>Currently only the following formats are supported:
 *   "MM/DD/YYYY", "YYYY/MM/DD", or "DD/MM/YYYY"</dd>
 *  </dl>
 * @return {String} Formatted date for display.
 */

/**
 * Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:
 * <ul>
 *    <li><code>method</code> - {Function} REQUIRED the callback function.</li>
 *    <li><code>scope</code> - {Object} the scope from which to execute the callback.  Default is the global window scope.</li>
 *    <li><code>argument</code> - {Array} parameters to be passed to method as individual arguments.</li>
 *    <li><code>timeout</code> - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.</li>
 *    <li><code>until</code> - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.</li>
 *    <li><code>iterations</code> - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with <code>until</code>.</li>
 * </ul>
 *
 * @id YAHOO.util.Chain
 * @namespace YAHOO.util
 * @class Chain
 * @constructor
 * @param callback* {Function|Object} Any number of callbacks to initialize the queue
 */

/**
 * The callback queue
 * @id YAHOO.util.Chain.q
 * @property q
 * @type {Array}
 * @private
 */

/**
 * Timeout id used to pause or stop execution and indicate the execution state of the Chain.  0 indicates paused or stopped, -1 indicates blocking execution, and any positive number indicates non-blocking execution.
 * @id YAHOO.util.Chain.id
 * @property id
 * @type {number}
 * @private
 */

/**
 * Begin executing the chain, or resume execution from the last paused position.
 * @id YAHOO.util.Chain.run
 * @method run
 * @return {Chain} the Chain instance
 */

/**
 * Add a callback to the end of the queue
 * @id YAHOO.util.Chain.add
 * @method add
 * @param c {Function|Object} the callback function ref or object literal
 * @return {Chain} the Chain instance
 */

/**
 * Pause the execution of the Chain after the current execution of the
 * current callback completes.  If called interstitially, clears the
 * timeout for the pending callback. Paused Chains can be restarted with
 * chain.run()
 * @id YAHOO.util.Chain.pause
 * @method pause
 * @return {Chain} the Chain instance
 */

/**
 * Stop and clear the Chain's queue after the current execution of the
 * current callback completes.
 * @id YAHOO.util.Chain.stop
 * @method stop
 * @return {Chain} the Chain instance
 */

/**
 * The ColumnSet class defines and manages a DataTable's Columns,
 * including nested hierarchies and access to individual Column instances.
 *
 * @id YAHOO.widget.ColumnSet
 * @namespace YAHOO.widget
 * @class ColumnSet
 * @uses YAHOO.util.EventProvider
 * @constructor
 * @param aDefinitions {Object[]} Array of object literals that define cells in
 * the THEAD.
 */

/**
 * Internal class variable to index multiple ColumnSet instances.
 *
 * @id YAHOO.widget.ColumnSet.ColumnSet._nCount
 * @property ColumnSet._nCount
 * @type Number
 * @private
 * @static
 */

/**
 * Unique instance name.
 *
 * @id YAHOO.widget.ColumnSet._sId
 * @property _sId
 * @type String
 * @private
 */

/**
 * Array of object literal Column definitions passed to the constructor.
 *
 * @id YAHOO.widget.ColumnSet._aDefinitions
 * @property _aDefinitions
 * @type Object[]
 * @private
 */

/**
 * Top-down tree representation of Column hierarchy.
 *
 * @id YAHOO.widget.ColumnSet.tree
 * @property tree
 * @type YAHOO.widget.Column[]
 */

/**
 * Flattened representation of all Columns.
 *
 * @id YAHOO.widget.ColumnSet.flat
 * @property flat
 * @type YAHOO.widget.Column[]
 * @default []
 */

/**
 * Array of Columns that map one-to-one to a table column.
 *
 * @id YAHOO.widget.ColumnSet.keys
 * @property keys
 * @type YAHOO.widget.Column[]
 * @default []
 */

/**
 * ID index of nested parent hierarchies for HEADERS accessibility attribute.
 *
 * @id YAHOO.widget.ColumnSet.headers
 * @property headers
 * @type String[]
 * @default []
 */

/**
 * Initializes ColumnSet instance with data from Column definitions.
 *
 * @id YAHOO.widget.ColumnSet._init
 * @method _init
 * @param aDefinitions {Object[]} Array of object literals that define cells in
 * the THEAD .
 * @private
 */

/**
 * Returns unique name of the ColumnSet instance.
 *
 * @id YAHOO.widget.ColumnSet.getId
 * @method getId
 * @return {String} Unique name of the ColumnSet instance.
 */

/**
 * ColumnSet instance name, for logging.
 *
 * @id YAHOO.widget.ColumnSet.toString
 * @method toString
 * @return {String} Unique name of the ColumnSet instance.
 */

/**
 * Public accessor to the definitions array.
 *
 * @id YAHOO.widget.ColumnSet.getDefinitions
 * @method getDefinitions
 * @return {Object[]} Array of object literal Column definitions.
 */

/**
 * Returns Column instance with given ID.
 *
 * @id YAHOO.widget.ColumnSet.getColumnById
 * @method getColumnById
 * @param column {String} Column ID.
 * @return {YAHOO.widget.Column} Column instance.
 */

/**
 * Returns Column instance with given key or ColumnSet key index.
 *
 * @id YAHOO.widget.ColumnSet.getColumn
 * @method getColumn
 * @param column {String | Number} Column key or ColumnSet key index.
 * @return {YAHOO.widget.Column} Column instance.
 */

/**
 * Public accessor returns array of given Column's desendants (if any), including itself.
 *
 * @id YAHOO.widget.ColumnSet.getDescendants
 * @method getDescendants
 * @param {YAHOO.widget.Column} Column instance.
 * @return {Array} Array including the Column itself and all descendants (if any).
 */

/**
 * The Column class defines and manages attributes of DataTable Columns
 *
 * @id YAHOO.widget.Column
 * @namespace YAHOO.widget
 * @class Column
 * @constructor
 * @param oConfigs {Object} Object literal of definitions.
 */

/**
 * Internal class variable to index multiple Column instances.
 *
 * @id YAHOO.widget.Column.Column._nCount
 * @property Column._nCount
 * @type Number
 * @private
 * @static
 */

/**
 * Unique String identifier assigned at instantiation.
 *
 * @id YAHOO.widget.Column._sId
 * @property _sId
 * @type String
 * @private
 */

/**
 * Object literal definition
 *
 * @id YAHOO.widget.Column._oDefinition
 * @property _oDefinition
 * @type Object
 * @private
 */

/**
 * Reference to Column's current position index within its ColumnSet's keys
 * array, if applicable. This property only applies to non-nested and bottom-
 * level child Columns.
 *
 * @id YAHOO.widget.Column._nKeyIndex
 * @property _nKeyIndex
 * @type Number
 * @private
 */

/**
 * Reference to Column's current position index within its ColumnSet's tree
 * array, if applicable. This property only applies to non-nested and top-
 * level parent Columns.
 *
 * @id YAHOO.widget.Column._nTreeIndex
 * @property _nTreeIndex
 * @type Number
 * @private
 */

/**
 * Number of table cells the Column spans.
 *
 * @id YAHOO.widget.Column._nColspan
 * @property _nColspan
 * @type Number
 * @private
 */

/**
 * Number of table rows the Column spans.
 *
 * @id YAHOO.widget.Column._nRowspan
 * @property _nRowspan
 * @type Number
 * @private
 */

/**
 * Column's parent Column instance, or null.
 *
 * @id YAHOO.widget.Column._oParent
 * @property _oParent
 * @type YAHOO.widget.Column
 * @private
 */

/**
 * The DOM reference to the associated TH element.
 *
 * @id YAHOO.widget.Column._elTh
 * @property _elTh
 * @type HTMLElement
 * @private
 */

/**
 * The DOM reference to the associated resizerelement (if any).
 *
 * @id YAHOO.widget.Column._elResizer
 * @property _elResizer
 * @type HTMLElement
 * @private
 */

/**
 * For unreg() purposes, a reference to the Column's DragDrop instance.
 *
 * @id YAHOO.widget.Column._dd
 * @property _dd
 * @type YAHOO.util.DragDrop
 * @private
 */

/**
 * For unreg() purposes, a reference to the Column resizer's DragDrop instance.
 *
 * @id YAHOO.widget.Column._ddResizer
 * @property _ddResizer
 * @type YAHOO.util.DragDrop
 * @private
 */

/**
 * Associated database field, or null.
 *
 * @id YAHOO.widget.Column.key
 * @property key
 * @type String
 */

/**
 * Text or HTML for display as Column's label in the TH element.
 *
 * @id YAHOO.widget.Column.label
 * @property label
 * @type String
 */

/**
 * Column head cell ABBR for accessibility.
 *
 * @id YAHOO.widget.Column.abbr
 * @property abbr
 * @type String
 */

/**
 * Array of object literals that define children (nested headers) of a Column.
 *
 * @id YAHOO.widget.Column.children
 * @property children
 * @type Object[]
 */

/**
 * Column width (in pixels).
 *
 * @id YAHOO.widget.Column.width
 * @property width
 * @type Number
 */

/**
 * Minimum Column width (in pixels).
 *
 * @id YAHOO.widget.Column.minWidth
 * @property minWidth
 * @type Number
 * @default 10
 */

/**
 * True if Column is in hidden state.
 *
 * @id YAHOO.widget.Column.hidden
 * @property hidden
 * @type Boolean
 * @default false
 */

/**
 * True if Column is in selected state.
 *
 * @id YAHOO.widget.Column.selected
 * @property selected
 * @type Boolean
 * @default false
 */

/**
 * Custom CSS class or array of classes to be applied to every cell in the Column.
 *
 * @id YAHOO.widget.Column.className
 * @property className
 * @type String || String[]
 */

/**
 * Defines a format function.
 *
 * @id YAHOO.widget.Column.formatter
 * @property formatter
 * @type String || HTMLFunction
 */

/**
 * Defines an editor function, otherwise Column is not editable.
 *
 * @id YAHOO.widget.Column.editor
 * @property editor
 * @type String || HTMLFunction
 */

/**
 * Defines editor options for Column in an object literal of param:value pairs.
 *
 * @id YAHOO.widget.Column.editorOptions
 * @property editorOptions
 * @type Object
 */

/**
 * True if Column is resizeable, false otherwise. The Drag & Drop Utility is
 * required to enable this feature. Only bottom-level and non-nested Columns are
 * resizeble.
 *
 * @id YAHOO.widget.Column.resizeable
 * @property resizeable
 * @type Boolean
 * @default false
 */

/**
 * True if Column is sortable, false otherwise.
 *
 * @id YAHOO.widget.Column.sortable
 * @property sortable
 * @type Boolean
 * @default false
 */

/**
 * @id YAHOO.widget.Column.sortOptions.defaultOrder
 * @property sortOptions.defaultOrder
 * @deprecated Use sortOptions.defaultDir.
 */

/**
 * Default sort direction for Column: YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC.
 *
 * @id YAHOO.widget.Column.sortOptions.defaultDir
 * @property sortOptions.defaultDir
 * @type String
 * @default null
 */

/**
 * Custom sort handler.
 *
 * @id YAHOO.widget.Column.sortOptions.sortFunction
 * @property sortOptions.sortFunction
 * @type Function
 * @default null
 */

/**
 * Returns unique ID string.
 *
 * @id YAHOO.widget.Column.getId
 * @method getId
 * @return {String} Unique ID string.
 */

/**
 * Column instance name, for logging.
 *
 * @id YAHOO.widget.Column.toString
 * @method toString
 * @return {String} Column's unique name.
 */

/**
 * Returns object literal definition.
 *
 * @id YAHOO.widget.Column.getDefinition
 * @method getDefinition
 * @return {Object} Object literal definition.
 */

/**
 * Returns unique Column key.
 *
 * @id YAHOO.widget.Column.getKey
 * @method getKey
 * @return {String} Column key.
 */

/**
 * Public accessor returns Column's current position index within its
 * ColumnSet's keys array, if applicable. Only non-nested and bottom-level
 * child Columns will return a value.
 *
 * @id YAHOO.widget.Column.getKeyIndex
 * @method getKeyIndex
 * @return {Number} Position index, or null.
 */

/**
 * Public accessor returns Column's current position index within its
 * ColumnSet's tree array, if applicable. Only non-nested and top-level parent
 * Columns will return a value;
 *
 * @id YAHOO.widget.Column.getTreeIndex
 * @method getTreeIndex
 * @return {Number} Position index, or null.
 */

/**
 * Public accessor returns Column's parent instance if any, or null otherwise.
 *
 * @id YAHOO.widget.Column.getParent
 * @method getParent
 * @return {YAHOO.widget.Column} Column's parent instance.
 */

/**
 * Public accessor returns Column's calculated COLSPAN value.
 *
 * @id YAHOO.widget.Column.getColspan
 * @method getColspan
 * @return {Number} Column's COLSPAN value.
 */

/**
 * Public accessor returns Column's calculated ROWSPAN value.
 *
 * @id YAHOO.widget.Column.getRowspan
 * @method getRowspan
 * @return {Number} Column's ROWSPAN value.
 */

/**
 * Returns DOM reference to the key TH element.
 *
 * @id YAHOO.widget.Column.getThEl
 * @method getThEl
 * @return {HTMLElement} TH element.
 */

/**
 * Returns DOM reference to the resizer element, or null.
 *
 * @id YAHOO.widget.Column.getResizerEl
 * @method getResizerEl
 * @return {HTMLElement} DIV element.
 */

/**
 * @id YAHOO.widget.Column.getColEl
 * @method getColEl
 * @deprecated Use getThEl
 */

/**
 * Sort static utility to support Column sorting.
 *
 * @id YAHOO.util.Sort
 * @namespace YAHOO.util
 * @class Sort
 * @static
 */

/**
 * Comparator function for simple case-insensitive string sorting.
 *
 * @id YAHOO.util.Sort.compare
 * @method compare
 * @param a {Object} First sort argument.
 * @param b {Object} Second sort argument.
 * @param desc {Boolean} True if sort direction is descending, false if
 * sort direction is ascending.
 */

/**
 * ColumnDD subclasses DragDrop to support rearrangeable Columns.
 *
 * @id YAHOO.util.ColumnDD
 * @namespace YAHOO.util
 * @class ColumnDD
 * @extends YAHOO.util.DDProxy
 * @constructor
 * @param oDataTable {YAHOO.widget.DataTable} DataTable instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param elTh {HTMLElement} TH element reference.
 * @param elTarget {HTMLElement} Drag target element.
 */

/**
 * ColumnResizer subclasses DragDrop to support resizeable Columns.
 *
 * @id YAHOO.util.ColumnResizer
 * @namespace YAHOO.util
 * @class ColumnResizer
 * @extends YAHOO.util.DDProxy
 * @constructor
 * @param oDataTable {YAHOO.widget.DataTable} DataTable instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param elTh {HTMLElement} TH element reference.
 * @param sHandleElId {String} DOM ID of the handle element that causes the resize.
 * @param elProxy {HTMLElement} Resizer proxy element.
 */

/**
 * Resets resizer element.
 *
 * @id YAHOO.util.ColumnResizer.resetResizerEl
 * @method resetResizerEl
 */

/**
 * Handles mouseup events on the Column resizer.
 *
 * @id YAHOO.util.ColumnResizer.onMouseUp
 * @method onMouseUp
 * @param e {string} The mouseup event
 */

/**
 * Handles mousedown events on the Column resizer.
 *
 * @id YAHOO.util.ColumnResizer.onMouseDown
 * @method onMouseDown
 * @param e {string} The mousedown event
 */

/**
 * Custom clickValidator to ensure Column is not in hidden state.
 *
 * @id YAHOO.util.ColumnResizer.clickValidator
 * @method clickValidator
 * @param {Event} e
 * @private
 */

/**
 * Handles drag events on the Column resizer.
 *
 * @id YAHOO.util.ColumnResizer.onDrag
 * @method onDrag
 * @param e {string} The drag event
 */

/**
 * A RecordSet defines and manages a set of Records.
 *
 * @id YAHOO.widget.RecordSet
 * @namespace YAHOO.widget
 * @class RecordSet
 * @param data {Object || Object[]} An object literal or an array of data.
 * @constructor
 */

/**
 * Fired when a new Record is added to the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.recordAddEvent
 * @event recordAddEvent
 * @param oArgs.record {YAHOO.widget.Record} The Record instance.
 * @param oArgs.data {Object} Data added.
 */

/**
 * Fired when multiple Records are added to the RecordSet at once.
 *
 * @id YAHOO.widget.RecordSet.recordsAddEvent
 * @event recordsAddEvent
 * @param oArgs.records {YAHOO.widget.Record[]} An array of Record instances.
 * @param oArgs.data {Object[]} Data added.
 */

/**
 * Fired when a Record is set in the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.recordSetEvent
 * @event recordSetEvent
 * @param oArgs.record {YAHOO.widget.Record} The Record instance.
 * @param oArgs.data {Object} Data added.
 */

/**
 * Fired when multiple Records are set in the RecordSet at once.
 *
 * @id YAHOO.widget.RecordSet.recordsSetEvent
 * @event recordsSetEvent
 * @param oArgs.records {YAHOO.widget.Record[]} An array of Record instances.
 * @param oArgs.data {Object[]} Data added.
 */

/**
 * Fired when a Record is updated with new data.
 *
 * @id YAHOO.widget.RecordSet.recordUpdateEvent
 * @event recordUpdateEvent
 * @param oArgs.record {YAHOO.widget.Record} The Record instance.
 * @param oArgs.newData {Object} New data.
 * @param oArgs.oldData {Object} Old data.
 */

/**
 * Fired when a Record is deleted from the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.recordDeleteEvent
 * @event recordDeleteEvent
 * @param oArgs.data {Object} A copy of the data held by the Record,
 * or an array of data object literals if multiple Records were deleted at once.
 * @param oArgs.index {Object} Index of the deleted Record.
 */

/**
 * Fired when multiple Records are deleted from the RecordSet at once.
 *
 * @id YAHOO.widget.RecordSet.recordsDeleteEvent
 * @event recordsDeleteEvent
 * @param oArgs.data {Object[]} An array of data object literals copied
 * from the Records.
 * @param oArgs.index {Object} Index of the first deleted Record.
 */

/**
 * Fired when all Records are deleted from the RecordSet at once.
 *
 * @id YAHOO.widget.RecordSet.resetEvent
 * @event resetEvent
 */

/**
 * @id YAHOO.widget.RecordSet.keyUpdateEvent
 * @event keyUpdateEvent
 * @deprecated Use recordValueUpdateEvent
 */

/**
 * Fired when a Record value is updated with new data.
 *
 * @id YAHOO.widget.RecordSet.recordValueUpdateEvent
 * @event recordValueUpdateEvent
 * @param oArgs.record {YAHOO.widget.Record} The Record instance.
 * @param oArgs.key {String} The updated key.
 * @param oArgs.newData {Object} New data.
 * @param oArgs.oldData {Object} Old data.
 *
 */

/**
 * Internal class variable to name multiple Recordset instances.
 *
 * @id YAHOO.widget.RecordSet.RecordSet._nCount
 * @property RecordSet._nCount
 * @type Number
 * @private
 * @static
 */

/**
 * Unique String identifier assigned at instantiation.
 *
 * @id YAHOO.widget.RecordSet._sId
 * @property _sId
 * @type String
 * @private
 */

/**
 * Internal counter of how many Records are in the RecordSet.
 *
 * @id YAHOO.widget.RecordSet._length
 * @property _length
 * @type Number
 * @private
 * @deprecated No longer used
 */

/**
 * Adds one Record to the RecordSet at the given index. If index is null,
 * then adds the Record to the end of the RecordSet.
 *
 * @id YAHOO.widget.RecordSet._addRecord
 * @method _addRecord
 * @param oData {Object} An object literal of data.
 * @param index {Number} (optional) Position index.
 * @return {YAHOO.widget.Record} A Record instance.
 * @private
 */

/**
 * Sets/replaces one Record to the RecordSet at the given index.  Existing
 * Records with higher indexes are not shifted.  If no index specified, the
 * Record is added to the end of the RecordSet.
 *
 * @id YAHOO.widget.RecordSet._setRecord
 * @method _setRecord
 * @param oData {Object} An object literal of data.
 * @param index {Number} (optional) Position index.
 * @return {YAHOO.widget.Record} A Record instance.
 * @private
 */

/**
 * Deletes Records from the RecordSet at the given index. If range is null,
 * then only one Record is deleted.
 *
 * @id YAHOO.widget.RecordSet._deleteRecord
 * @method _deleteRecord
 * @param index {Number} Position index.
 * @param range {Number} (optional) How many Records to delete
 * @private
 */

/**
 * Returns unique name of the RecordSet instance.
 *
 * @id YAHOO.widget.RecordSet.getId
 * @method getId
 * @return {String} Unique name of the RecordSet instance.
 */

/**
 * Public accessor to the unique name of the RecordSet instance.
 *
 * @id YAHOO.widget.RecordSet.toString
 * @method toString
 * @return {String} Unique name of the RecordSet instance.
 */

/**
 * Returns the number of Records held in the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.getLength
 * @method getLength
 * @return {Number} Number of records in the RecordSet.
 */

/**
 * Returns Record by ID or RecordSet position index.
 *
 * @id YAHOO.widget.RecordSet.getRecord
 * @method getRecord
 * @param record {YAHOO.widget.Record | Number | String} Record instance,
 * RecordSet position index, or Record ID.
 * @return {YAHOO.widget.Record} Record object.
 */

/**
 * Returns an array of Records from the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.getRecords
 * @method getRecords
 * @param index {Number} (optional) Recordset position index of which Record to
 * start at.
 * @param range {Number} (optional) Number of Records to get.
 * @return {YAHOO.widget.Record[]} Array of Records starting at given index and
 * length equal to given range. If index is not given, all Records are returned.
 */

/**
 * Returns a boolean indicating whether Records exist in the RecordSet at the
 * specified index range.  Returns true if and only if a Record exists at each
 * index in the range.
 * @id YAHOO.widget.RecordSet.hasRecords
 * @method hasRecords
 * @param index
 * @param range
 * @return {Boolean} true if all indices are populated in the RecordSet
 */

/**
 * Returns current position index for the given Record.
 *
 * @id YAHOO.widget.RecordSet.getRecordIndex
 * @method getRecordIndex
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @return {Number} Record's RecordSet position index.
 */

/**
 * Adds one Record to the RecordSet at the given index. If index is null,
 * then adds the Record to the end of the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.addRecord
 * @method addRecord
 * @param oData {Object} An object literal of data.
 * @param index {Number} (optional) Position index.
 * @return {YAHOO.widget.Record} A Record instance.
 */

/**
 * Adds multiple Records at once to the RecordSet at the given index with the
 * given object literal data. If index is null, then the new Records are
 * added to the end of the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.addRecords
 * @method addRecords
 * @param aData {Object[]} An object literal data or an array of data object literals.
 * @param index {Number} (optional) Position index.
 * @return {YAHOO.widget.Record[]} An array of Record instances.
 */

/**
 * Sets or replaces one Record to the RecordSet at the given index. Unlike
 * addRecord, an existing Record at that index is not shifted to preserve it.
 * If no index is specified, it adds the Record to the end of the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.setRecord
 * @method setRecord
 * @param oData {Object} An object literal of data.
 * @param index {Number} (optional) Position index.
 * @return {YAHOO.widget.Record} A Record instance.
 */

/**
 * Sets or replaces multiple Records at once to the RecordSet with the given
 * data, starting at the given index. If index is not specified, then the new
 * Records are added to the end of the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.setRecords
 * @method setRecords
 * @param aData {Object[]} An array of object literal data.
 * @param index {Number} (optional) Position index.
 * @return {YAHOO.widget.Record[]} An array of Record instances.
 */

/**
 * Updates given Record with given data.
 *
 * @id YAHOO.widget.RecordSet.updateRecord
 * @method updateRecord
 * @param record {YAHOO.widget.Record | Number | String} A Record instance,
 * a RecordSet position index, or a Record ID.
 * @param oData {Object} Object literal of new data.
 * @return {YAHOO.widget.Record} Updated Record, or null.
 */

/**
 * @id YAHOO.widget.RecordSet.updateKey
 * @method updateKey
 * @deprecated Use updateRecordValue
 */

/**
 * Sets given Record at given key to given data.
 *
 * @id YAHOO.widget.RecordSet.updateRecordValue
 * @method updateRecordValue
 * @param record {YAHOO.widget.Record | Number | String} A Record instance,
 * a RecordSet position index, or a Record ID.
 * @param sKey {String} Key name.
 * @param oData {Object} New data.
 */

/**
 * Replaces all Records in RecordSet with new object literal data.
 *
 * @id YAHOO.widget.RecordSet.replaceRecords
 * @method replaceRecords
 * @param data {Object || Object[]} An object literal of data or an array of
 * data object literals.
 * @return {YAHOO.widget.Record || YAHOO.widget.Record[]} A Record instance or
 * an array of Records.
 */

/**
 * Sorts all Records by given function. Records keep their unique IDs but will
 * have new RecordSet position indexes.
 *
 * @id YAHOO.widget.RecordSet.sortRecords
 * @method sortRecords
 * @param fnSort {Function} Reference to a sort function.
 * @param desc {Boolean} True if sort direction is descending, false if sort
 * direction is ascending.
 * @return {YAHOO.widget.Record[]} Sorted array of Records.
 */

/**
 * Reverses all Records, so ["one", "two", "three"] becomes ["three", "two", "one"].
 *
 * @id YAHOO.widget.RecordSet.reverseRecords
 * @method reverseRecords
 * @return {YAHOO.widget.Record[]} Reverse-sorted array of Records.
 */

/**
 * Removes the Record at the given position index from the RecordSet. If a range
 * is also provided, removes that many Records, starting from the index. Length
 * of RecordSet is correspondingly shortened.
 *
 * @id YAHOO.widget.RecordSet.deleteRecord
 * @method deleteRecord
 * @param index {Number} Record's RecordSet position index.
 * @param range {Number} (optional) How many Records to delete.
 * @return {Object} A copy of the data held by the deleted Record.
 */

/**
 * Removes the Record at the given position index from the RecordSet. If a range
 * is also provided, removes that many Records, starting from the index. Length
 * of RecordSet is correspondingly shortened.
 *
 * @id YAHOO.widget.RecordSet.deleteRecords
 * @method deleteRecords
 * @param index {Number} Record's RecordSet position index.
 * @param range {Number} (optional) How many Records to delete.
 */

/**
 * Deletes all Records from the RecordSet.
 *
 * @id YAHOO.widget.RecordSet.reset
 * @method reset
 */

/**
 * The Record class defines a DataTable record.
 *
 * @id YAHOO.widget.Record
 * @namespace YAHOO.widget
 * @class Record
 * @constructor
 * @param oConfigs {Object} (optional) Object literal of key/value pairs.
 */

/**
 * Internal class variable to give unique IDs to Record instances.
 *
 * @id YAHOO.widget.Record.Record._nCount
 * @property Record._nCount
 * @type Number
 * @private
 */

/**
 * Immutable unique ID assigned at instantiation. Remains constant while a
 * Record's position index can change from sorting.
 *
 * @id YAHOO.widget.Record._sId
 * @property _sId
 * @type String
 * @private
 */

/**
 * Holds data for the Record in an object literal.
 *
 * @id YAHOO.widget.Record._oData
 * @property _oData
 * @type Object
 * @private
 */

/**
 * Returns unique ID assigned at instantiation.
 *
 * @id YAHOO.widget.Record.getId
 * @method getId
 * @return String
 */

/**
 * Returns data for the Record for a key if given, or the entire object
 * literal otherwise.
 *
 * @id YAHOO.widget.Record.getData
 * @method getData
 * @param sKey {String} (Optional) The key to retrieve a single data value.
 * @return Object
 */

/**
 * Sets given data at the given key. Use the RecordSet method setValue to trigger
 * events.
 *
 * @id YAHOO.widget.Record.setData
 * @method setData
 * @param sKey {String} The key of the new value.
 * @param oData {MIXED} The new value.
 */

/**
 * The Paginator widget provides a set of controls to navigate through paged
 * data.
 *
 * @id YAHOO.widget.Paginator
 * @namespace YAHOO.widget
 * @class Paginator
 * @uses YAHOO.util.EventProvider
 * @uses YAHOO.util.AttributeProvider
 *
 * @constructor
 * @param config {Object} Object literal to set instance and ui component
 * configuration.
 */

/**
 * Incrementing index used to give instances unique ids.
 * @id YAHOO.widget.Paginator.id
 * @static
 * @property id
 * @type number
 * @private
 */

/**
 * Base of id strings used for ui components.
 * @id YAHOO.widget.Paginator.ID_BASE
 * @static
 * @property ID_BASE
 * @type string
 * @private
 */

/**
 * Used to identify unset, optional configurations, or used explicitly in
 * the case of totalRecords to indicate unlimited pagination.
 * @id YAHOO.widget.Paginator.VALUE_UNLIMITED
 * @static
 * @property VALUE_UNLIMITED
 * @type number
 * @final
 */

/**
 * Default template used by Paginator instances.  Update this if you want
 * all new Paginators to use a different default template.
 * @id YAHOO.widget.Paginator.TEMPLATE_DEFAULT
 * @static
 * @property TEMPLATE_DEFAULT
 * @type string
 */

/**
 * Common alternate pagination format, including page links, links for
 * previous, next, first and last pages as well as a rows-per-page
 * dropdown.  Offered as a convenience.
 * @id YAHOO.widget.Paginator.TEMPLATE_ROWS_PER_PAGE
 * @static
 * @property TEMPLATE_ROWS_PER_PAGE
 * @type string
 */

/**
 * Array of nodes in which to render pagination controls.  This is set via
 * the &quot;containers&quot; attribute.
 * @id YAHOO.widget.Paginator._containers
 * @property _containers
 * @type Array(HTMLElement)
 * @private
 */

/**
 * Initialize the Paginator's attributes (see YAHOO.util.Element class
 * AttributeProvider).
 * @id YAHOO.widget.Paginator.initConfig
 * @method initConfig
 * @private
 */

/**
 * REQUIRED. Number of records constituting a &quot;page&quot;
 * @id YAHOO.widget.Paginator.rowsPerPage
 * @attribute rowsPerPage
 * @type integer
 */

/**
 * REQUIRED. Node references or ids of nodes in which to render the
 * pagination controls.
 * @id YAHOO.widget.Paginator.containers
 * @attribute containers
 * @type {string|HTMLElement|Array(string|HTMLElement)}
 */

/**
 * Total number of records to paginate through
 * @id YAHOO.widget.Paginator.totalRecords
 * @attribute totalRecords
 * @type integer
 * @default Paginator.VALUE_UNLIMITED
 */

/**
 * Zero based index of the record considered first on the current page.
 * For page based interactions, don't modify this attribute directly;
 * use setPage(n).
 * @id YAHOO.widget.Paginator.recordOffset
 * @attribute recordOffset
 * @type integer
 * @default 0
 */

/**
 * Page to display on initial paint
 * @id YAHOO.widget.Paginator.initialPage
 * @attribute initialPage
 * @type integer
 * @default 1
 */

/**
 * Template used to render controls.  The string will be used as
 * innerHTML on all specified container nodes.  Bracketed keys
 * (e.g. {pageLinks}) in the string will be replaced with an instance
 * of the so named ui component.
 * @id YAHOO.widget.Paginator.template
 * @see Paginator.TEMPLATE_DEFAULT
 * @see Paginator.TEMPLATE_ROWS_PER_PAGE
 * @attribute template
 * @type string
 */

/**
 * Class assigned to the element(s) containing pagination controls.
 * @id YAHOO.widget.Paginator.containerClass
 * @attribute containerClass
 * @type string
 * @default 'yui-pg-container'
 */

/**
 * Display pagination controls even when there is only one page.  Set
 * to false to forgo rendering and/or hide the containers when there
 * is only one page of data.  Note if you are using the rowsPerPage
 * dropdown ui component, visibility will be maintained as long as the
 * number of records exceeds the smallest page size.
 * @id YAHOO.widget.Paginator.alwaysVisible
 * @attribute alwaysVisible
 * @type boolean
 * @default true
 */

/**
 * Update the UI immediately upon interaction.  If false, changeRequest
 * subscribers or other external code will need to explicitly set the
 * new values in the paginator to trigger repaint.
 * @id YAHOO.widget.Paginator.updateOnChange
 * @attribute updateOnChange
 * @type boolean
 * @default false
 */

/**
 * Unique id assigned to this instance
 * @id YAHOO.widget.Paginator.id
 * @attribute id
 * @type integer
 * @final
 */

/**
 * Indicator of whether the DOM nodes have been initially created
 * @id YAHOO.widget.Paginator.rendered
 * @attribute rendered
 * @type boolean
 * @final
 */

/**
 * Initialize registered ui components onto this instance.
 * @id YAHOO.widget.Paginator.initUIComponents
 * @method initUIComponents
 * @private
 */

/**
 * Initialize this instance's CustomEvents.
 * @id YAHOO.widget.Paginator.initEvents
 * @method initEvents
 * @private
 */

/**
 * Render the pagination controls per the format attribute into the
 * specified container nodes.
 * @id YAHOO.widget.Paginator.render
 * @method render
 */

/**
 * Removes controls from the page and unhooks events.
 * @id YAHOO.widget.Paginator.destroy
 * @method destroy
 */

/**
 * Hides the containers if there is only one page of data and attribute
 * alwaysVisible is false.  Conversely, it displays the containers if either
 * there is more than one page worth of data or alwaysVisible is turned on.
 * @id YAHOO.widget.Paginator.updateVisibility
 * @method updateVisibility
 */

/**
 * Get the configured container nodes
 * @id YAHOO.widget.Paginator.getContainerNodes
 * @method getContainerNodes
 * @return {Array} array of HTMLElement nodes
 */

/**
 * Get the total number of pages in the data set according to the current
 * rowsPerPage and totalRecords values.  If totalRecords is not set, or
 * set to YAHOO.widget.Paginator.VALUE_UNLIMITED, returns
 * YAHOO.widget.Paginator.VALUE_UNLIMITED.
 * @id YAHOO.widget.Paginator.getTotalPages
 * @method getTotalPages
 * @return {number}
 */

/**
 * Does the requested page have any records?
 * @id YAHOO.widget.Paginator.hasPage
 * @method hasPage
 * @param page {number} the page in question
 * @return {boolean}
 */

/**
 * Get the page number corresponding to the current record offset.
 * @id YAHOO.widget.Paginator.getCurrentPage
 * @method getCurrentPage
 * @return {number}
 */

/**
 * Are there records on the next page?
 * @id YAHOO.widget.Paginator.hasNextPage
 * @method hasNextPage
 * @return {boolean}
 */

/**
 * Get the page number of the next page, or null if the current page is the
 * last page.
 * @id YAHOO.widget.Paginator.getNextPage
 * @method getNextPage
 * @return {number}
 */

/**
 * Is there a page before the current page?
 * @id YAHOO.widget.Paginator.hasPreviousPage
 * @method hasPreviousPage
 * @return {boolean}
 */

/**
 * Get the page number of the previous page, or null if the current page
 * is the first page.
 * @id YAHOO.widget.Paginator.getPreviousPage
 * @method getPreviousPage
 * @return {number}
 */

/**
 * Get the start and end record indexes of the specified page.
 * @id YAHOO.widget.Paginator.getPageRecords
 * @method getPageRecords
 * @param page {number} (optional) The page (current page if not specified)
 * @return {Array} [start_index, end_index]
 */

/**
 * Set the current page to the provided page number if possible.
 * @id YAHOO.widget.Paginator.setPage
 * @method setPage
 * @param newPage {number} the new page number
 * @param silent {boolean} whether to forcibly avoid firing the
 * changeRequest event
 */

/**
 * Get the number of rows per page.
 * @id YAHOO.widget.Paginator.getRowsPerPage
 * @method getRowsPerPage
 * @return {number} the current setting of the rowsPerPage attribute
 */

/**
 * Set the number of rows per page.
 * @id YAHOO.widget.Paginator.setRowsPerPage
 * @method setRowsPerPage
 * @param rpp {number} the new number of rows per page
 * @param silent {boolean} whether to forcibly avoid firing the
 * changeRequest event
 */

/**
 * Get the total number of records.
 * @id YAHOO.widget.Paginator.getTotalRecords
 * @method getTotalRecords
 * @return {number} the current setting of totalRecords attribute
 */

/**
 * Set the total number of records.
 * @id YAHOO.widget.Paginator.setTotalRecords
 * @method setTotalRecords
 * @param total {number} the new total number of records
 * @param silent {boolean} whether to forcibly avoid firing the changeRequest event
 */

/**
 * Get the index of the first record on the current page
 * @id YAHOO.widget.Paginator.getStartIndex
 * @method getStartIndex
 * @return {number} the index of the first record on the current page
 */

/**
 * Move the record offset to a new starting index.  This will likely cause
 * the calculated current page to change.  You should probably use setPage.
 * @id YAHOO.widget.Paginator.setStartIndex
 * @method setStartIndex
 * @param offset {number} the new record offset
 * @param silent {boolean} whether to forcibly avoid firing the changeRequest event
 */

/**
 * Get an object literal describing the current state of the paginator.  If
 * an object literal of proposed values is passed, the proposed state will
 * be returned as an object literal with the following keys:
 * <ul>
 * <li>paginator - instance of the Paginator</li>
 * <li>page - number</li>
 * <li>totalRecords - number</li>
 * <li>recordOffset - number</li>
 * <li>rowsPerPage - number</li>
 * <li>records - [ start_index, end_index ]</li>
 * <li>before - (OPTIONAL) { state object literal for current state }</li>
 * </ul>
 * @id YAHOO.widget.Paginator.getState
 * @method getState
 * @return {object}
 * @param changes {object} OPTIONAL object literal with proposed values
 * Supported change keys include:
 * <ul>
 * <li>rowsPerPage</li>
 * <li>totalRecords</li>
 * <li>recordOffset OR</li>
 * <li>page</li>
 * </ul>
 */

/**
 * ui Component to generate the link to jump to the first page.
 *
 * @id YAHOO.widget.Paginator.ui.FirstPageLink
 * @namespace YAHOO.widget.Paginator.ui
 * @class FirstPageLink
 * @for YAHOO.widget.Paginator
 *
 * @constructor
 * @param p {Pagintor} Paginator instance to attach to
 */

/**
 * Decorates Paginator instances with new attributes. Called during
 * Paginator instantiation.
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.init
 * @method init
 * @param p {Paginator} Paginator instance to decorate
 * @static
 */

/**
 * Used as innerHTML for the first page link/span.
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.firstPageLinkLabel
 * @attribute firstPageLinkLabel
 * @default '&lt;&lt;&nbsp;first'
 */

/**
 * CSS class assigned to the link/span
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.firstPageLinkClass
 * @attribute firstPageLinkClass
 * @default 'yui-pg-first'
 */

/**
 * The currently placed HTMLElement node
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.current
 * @property current
 * @type HTMLElement
 * @private
 */

/**
 * Link node
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.link
 * @property link
 * @type HTMLElement
 * @private
 */

/**
 * Span node (inactive link)
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.span
 * @property span
 * @type HTMLElement
 * @private
 */

/**
 * Generate the nodes and return the appropriate node given the current
 * pagination state.
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.render
 * @method render
 * @param id_base {string} used to create unique ids for generated nodes
 * @return {HTMLElement}
 */

/**
 * Swap the link and span nodes if appropriate.
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.update
 * @method update
 * @param e {CustomEvent} The calling change event
 */

/**
 * Removes the onClick listener from the link in preparation for content
 * removal.
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.destroy
 * @method destroy
 * @private
 */

/**
 * Listener for the link's onclick event.  Pass new value to setPage method.
 * @id YAHOO.widget.Paginator.ui.FirstPageLink.onClick
 * @method onClick
 * @param e {DOMEvent} The click event
 */

/**
 * ui Component to generate the link to jump to the last page.
 *
 * @id YAHOO.widget.Paginator.ui.LastPageLink
 * @namespace YAHOO.widget.Paginator.ui
 * @class LastPageLink
 * @for YAHOO.widget.Paginator
 *
 * @constructor
 * @param p {Pagintor} Paginator instance to attach to
 */

/**
 * Decorates Paginator instances with new attributes. Called during
 * Paginator instantiation.
 * @id YAHOO.widget.Paginator.ui.LastPageLink.init
 * @method init
 * @param paginator {Paginator} Paginator instance to decorate
 * @static
 */

/**
 * Used as innerHTML for the last page link/span.
 * @id YAHOO.widget.Paginator.ui.LastPageLink.lastPageLinkLabel
 * @attribute lastPageLinkLabel
 * @default 'last&nbsp;&gt;&gt;'
 */

/**
 * CSS class assigned to the link/span
 * @id YAHOO.widget.Paginator.ui.LastPageLink.lastPageLinkClass
 * @attribute lastPageLinkClass
 * @default 'yui-pg-last'
 */

/**
 * Currently placed HTMLElement node
 * @id YAHOO.widget.Paginator.ui.LastPageLink.current
 * @property current
 * @type HTMLElement
 * @private
 */

/**
 * Link HTMLElement node
 * @id YAHOO.widget.Paginator.ui.LastPageLink.link
 * @property link
 * @type HTMLElement
 * @private
 */

/**
 * Span node (inactive link)
 * @id YAHOO.widget.Paginator.ui.LastPageLink.span
 * @property span
 * @type HTMLElement
 * @private
 */

/**
 * Empty place holder node for when the last page link is inappropriate to
 * display in any form (unlimited paging).
 * @id YAHOO.widget.Paginator.ui.LastPageLink.na
 * @property na
 * @type HTMLElement
 * @private
 */

/**
 * Generate the nodes and return the appropriate node given the current
 * pagination state.
 * @id YAHOO.widget.Paginator.ui.LastPageLink.render
 * @method render
 * @param id_base {string} used to create unique ids for generated nodes
 * @return {HTMLElement}
 */

/**
 * Swap the link, span, and na nodes if appropriate.
 * @id YAHOO.widget.Paginator.ui.LastPageLink.update
 * @method update
 * @param e {CustomEvent} The calling change event (ignored)
 */

/**
 * Removes the onClick listener from the link in preparation for content
 * removal.
 * @id YAHOO.widget.Paginator.ui.LastPageLink.destroy
 * @method destroy
 * @private
 */

/**
 * Listener for the link's onclick event.  Passes to setPage method.
 * @id YAHOO.widget.Paginator.ui.LastPageLink.onClick
 * @method onClick
 * @param e {DOMEvent} The click event
 */

/**
 * ui Component to generate the link to jump to the previous page.
 *
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink
 * @namespace YAHOO.widget.Paginator.ui
 * @class PreviousPageLink
 * @for YAHOO.widget.Paginator
 *
 * @constructor
 * @param p {Pagintor} Paginator instance to attach to
 */

/**
 * Decorates Paginator instances with new attributes. Called during
 * Paginator instantiation.
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.init
 * @method init
 * @param p {Paginator} Paginator instance to decorate
 * @static
 */

/**
 * Used as innerHTML for the previous page link/span.
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.previousPageLinkLabel
 * @attribute previousPageLinkLabel
 * @default '&lt;&nbsp;prev'
 */

/**
 * CSS class assigned to the link/span
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.previousPageLinkClass
 * @attribute previousPageLinkClass
 * @default 'yui-pg-previous'
 */

/**
 * Currently placed HTMLElement node
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.current
 * @property current
 * @type HTMLElement
 * @private
 */

/**
 * Link node
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.link
 * @property link
 * @type HTMLElement
 * @private
 */

/**
 * Span node (inactive link)
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.span
 * @property span
 * @type HTMLElement
 * @private
 */

/**
 * Generate the nodes and return the appropriate node given the current
 * pagination state.
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.render
 * @method render
 * @param id_base {string} used to create unique ids for generated nodes
 * @return {HTMLElement}
 */

/**
 * Swap the link and span nodes if appropriate.
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.update
 * @method update
 * @param e {CustomEvent} The calling change event
 */

/**
 * Removes the onClick listener from the link in preparation for content
 * removal.
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.destroy
 * @method destroy
 * @private
 */

/**
 * Listener for the link's onclick event.  Passes to setPage method.
 * @id YAHOO.widget.Paginator.ui.PreviousPageLink.onClick
 * @method onClick
 * @param e {DOMEvent} The click event
 */

/**
 * ui Component to generate the link to jump to the next page.
 *
 * @id YAHOO.widget.Paginator.ui.NextPageLink
 * @namespace YAHOO.widget.Paginator.ui
 * @class NextPageLink
 * @for YAHOO.widget.Paginator
 *
 * @constructor
 * @param p {Pagintor} Paginator instance to attach to
 */

/**
 * Decorates Paginator instances with new attributes. Called during
 * Paginator instantiation.
 * @id YAHOO.widget.Paginator.ui.NextPageLink.init
 * @method init
 * @param p {Paginator} Paginator instance to decorate
 * @static
 */

/**
 * Used as innerHTML for the next page link/span.
 * @id YAHOO.widget.Paginator.ui.NextPageLink.nextPageLinkLabel
 * @attribute nextPageLinkLabel
 * @default 'next&nbsp;&gt;'
 */

/**
 * CSS class assigned to the link/span
 * @id YAHOO.widget.Paginator.ui.NextPageLink.nextPageLinkClass
 * @attribute nextPageLinkClass
 * @default 'yui-pg-next'
 */

/**
 * Currently placed HTMLElement node
 * @id YAHOO.widget.Paginator.ui.NextPageLink.current
 * @property current
 * @type HTMLElement
 * @private
 */

/**
 * Link node
 * @id YAHOO.widget.Paginator.ui.NextPageLink.link
 * @property link
 * @type HTMLElement
 * @private
 */

/**
 * Span node (inactive link)
 * @id YAHOO.widget.Paginator.ui.NextPageLink.span
 * @property span
 * @type HTMLElement
 * @private
 */

/**
 * Generate the nodes and return the appropriate node given the current
 * pagination state.
 * @id YAHOO.widget.Paginator.ui.NextPageLink.render
 * @method render
 * @param id_base {string} used to create unique ids for generated nodes
 * @return {HTMLElement}
 */

/**
 * Swap the link and span nodes if appropriate.
 * @id YAHOO.widget.Paginator.ui.NextPageLink.update
 * @method update
 * @param e {CustomEvent} The calling change event
 */

/**
 * Removes the onClick listener from the link in preparation for content
 * removal.
 * @id YAHOO.widget.Paginator.ui.NextPageLink.destroy
 * @method destroy
 * @private
 */

/**
 * Listener for the link's onclick event.  Passes to setPage method.
 * @id YAHOO.widget.Paginator.ui.NextPageLink.onClick
 * @method onClick
 * @param e {DOMEvent} The click event
 */

/**
 * ui Component to generate the page links
 *
 * @id YAHOO.widget.Paginator.ui.PageLinks
 * @namespace YAHOO.widget.Paginator.ui
 * @class PageLinks
 * @for YAHOO.widget.Paginator
 *
 * @constructor
 * @param p {Pagintor} Paginator instance to attach to
 */

/**
 * Decorates Paginator instances with new attributes. Called during
 * Paginator instantiation.
 * @id YAHOO.widget.Paginator.ui.PageLinks.init
 * @method init
 * @param p {Paginator} Paginator instance to decorate
 * @static
 */

/**
 * CSS class assigned to each page link/span.
 * @id YAHOO.widget.Paginator.ui.PageLinks.pageLinkClass
 * @attribute pageLinkClass
 * @default 'yui-pg-page'
 */

/**
 * CSS class assigned to the current page span.
 * @id YAHOO.widget.Paginator.ui.PageLinks.currentPageClass
 * @attribute currentPageClass
 * @default 'yui-pg-current-page'
 */

/**
 * CSS class assigned to the span containing the page links.
 * @id YAHOO.widget.Paginator.ui.PageLinks.pageLinksContainerClass
 * @attribute pageLinksContainerClass
 * @default 'yui-pg-pages'
 */

/**
 * Maximum number of page links to display at one time.
 * @id YAHOO.widget.Paginator.ui.PageLinks.pageLinks
 * @attribute pageLinks
 * @default 10
 */

/**
 * Function used generate the innerHTML for each page link/span.  The
 * function receives as parameters the page number and a reference to the
 * paginator object.
 * @id YAHOO.widget.Paginator.ui.PageLinks.pageLabelBuilder
 * @attribute pageLabelBuilder
 * @default function (page, paginator) { return page; }
 */

/**
 * Calculates start and end page numbers given a current page, attempting
 * to keep the current page in the middle
 * @id YAHOO.widget.Paginator.ui.PageLinks.calculateRange
 * @static
 * @method calculateRange
 * @param {int} currentPage  The current page
 * @param {int} totalPages   (optional) Maximum number of pages
 * @param {int} numPages     (optional) Preferred number of pages in range
 * @return {Array} [start_page_number, end_page_number]
 */

/**
 * Current page
 * @id YAHOO.widget.Paginator.ui.PageLinks.current
 * @property current
 * @type number
 * @private
 */

/**
 * Span node containing the page links
 * @id YAHOO.widget.Paginator.ui.PageLinks.container
 * @property container
 * @type HTMLElement
 * @private
 */

/**
 * Generate the nodes and return the container node containing page links
 * appropriate to the current pagination state.
 * @id YAHOO.widget.Paginator.ui.PageLinks.render
 * @method render
 * @param id_base {string} used to create unique ids for generated nodes
 * @return {HTMLElement}
 */

/**
 * Update the links if appropriate
 * @id YAHOO.widget.Paginator.ui.PageLinks.update
 * @method update
 * @param e {CustomEvent} The calling change event
 */

/**
 * Force a rebuild of the page links.
 * @id YAHOO.widget.Paginator.ui.PageLinks.rebuild
 * @method rebuild
 * @param e {CustomEvent} The calling change event
 */

/**
 * Removes the onClick listener from the container in preparation for
 * content removal.
 * @id YAHOO.widget.Paginator.ui.PageLinks.destroy
 * @method destroy
 * @private
 */

/**
 * Listener for the container's onclick event.  Looks for qualifying link
 * clicks, and pulls the page number from the link's page attribute.
 * Sends link's page attribute to the Paginator's setPage method.
 * @id YAHOO.widget.Paginator.ui.PageLinks.onClick
 * @method onClick
 * @param e {DOMEvent} The click event
 */

/**
 * ui Component to generate the rows-per-page dropdown
 *
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown
 * @namespace YAHOO.widget.Paginator.ui
 * @class RowsPerPageDropdown
 * @for YAHOO.widget.Paginator
 *
 * @constructor
 * @param p {Pagintor} Paginator instance to attach to
 */

/**
 * Decorates Paginator instances with new attributes. Called during
 * Paginator instantiation.
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.init
 * @method init
 * @param p {Paginator} Paginator instance to decorate
 * @static
 */

/**
 * Array of available rows-per-page sizes.  Converted into select options.
 * Array values may be positive integers or object literals in the form<br>
 * { value : NUMBER, text : STRING }
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.rowsPerPageOptions
 * @attribute rowsPerPageOptions
 * @default []
 */

/**
 * CSS class assigned to the select node
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.rowsPerPageDropdownClass
 * @attribute rowsPerPageDropdownClass
 * @default 'yui-pg-rpp-options'
 */

/**
 * select node
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.select
 * @property select
 * @type HTMLElement
 * @private
 */

/**
 * Generate the select and option nodes and returns the select node.
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.render
 * @method render
 * @param id_base {string} used to create unique ids for generated nodes
 * @return {HTMLElement}
 */

/**
 * Select the appropriate option if changed.
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.update
 * @method update
 * @param e {CustomEvent} The calling change event
 */

/**
 * (Re)generate the select options.
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.rebuild
 * @method rebuild
 */

/**
 * Removes the onChange listener from the select in preparation for content
 * removal.
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.destroy
 * @method destroy
 * @private
 */

/**
 * Listener for the select's onchange event.  Sent to setRowsPerPage method.
 * @id YAHOO.widget.Paginator.ui.RowsPerPageDropdown.onChange
 * @method onChange
 * @param e {DOMEvent} The change event
 */

/**
 * ui Component to generate the textual report of current pagination status.
 * E.g. "Now viewing page 1 of 13".
 *
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport
 * @namespace YAHOO.widget.Paginator.ui
 * @class CurrentPageReport
 * @for YAHOO.widget.Paginator
 *
 * @constructor
 * @param p {Pagintor} Paginator instance to attach to
 */

/**
 * Decorates Paginator instances with new attributes. Called during
 * Paginator instantiation.
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.init
 * @method init
 * @param p {Paginator} Paginator instance to decorate
 * @static
 */

/**
 * CSS class assigned to the span containing the info.
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.pageReportClass
 * @attribute pageReportClass
 * @default 'yui-pg-current'
 */

/**
 * Used as innerHTML for the span.  Place holders in the form of {name}
 * will be replaced with the so named value from the key:value map
 * generated by the function held in the pageReportValueGenerator attribute.
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.pageReportTemplate
 * @attribute pageReportTemplate
 * @default '({currentPage} of {totalPages})'
 * @see pageReportValueGenerator attribute
 */

/**
 * Function to generate the value map used to populate the
 * pageReportTemplate.  The function is passed the Paginator instance as a
 * parameter.  The default function returns a map with the following keys:
 * <ul>
 * <li>currentPage</li>
 * <li>totalPages</li>
 * <li>startIndex</li>
 * <li>endIndex</li>
 * <li>startRecord</li>
 * <li>endRecord</li>
 * <li>totalRecords</li>
 * </ul>
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.pageReportValueGenarator
 * @attribute pageReportValueGenarator
 */

/**
 * Replace place holders in a string with the named values found in an
 * object literal.
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.sprintf
 * @static
 * @method sprintf
 * @param template {string} The content string containing place holders
 * @param values {object} The key:value pairs used to replace the place holders
 * @return {string}
 */

/**
 * Span node containing the formatted info
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.span
 * @property span
 * @type HTMLElement
 * @private
 */

/**
 * Generate the span containing info formatted per the pageReportTemplate
 * attribute.
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.render
 * @method render
 * @param id_base {string} used to create unique ids for generated nodes
 * @return {HTMLElement}
 */

/**
 * Regenerate the content of the span if appropriate. Calls
 * CurrentPageReport.sprintf with the value of the pageReportTemplate
 * attribute and the value map returned from pageReportValueGenerator
 * function.
 * @id YAHOO.widget.Paginator.ui.CurrentPageReport.update
 * @method update
 * @param e {CustomEvent} The calling change event
 */

/**
 * DataTable class for the YUI DataTable widget.
 *
 * @id YAHOO.widget.DataTable
 * @namespace YAHOO.widget
 * @class DataTable
 * @uses YAHOO.util.EventProvider
 * @constructor
 * @param elContainer {HTMLElement} Container element for the TABLE.
 * @param aColumnDefs {Object[]} Array of object literal Column definitions.
 * @param oDataSource {YAHOO.util.DataSource} DataSource instance.
 * @param oConfigs {object} (optional) Object literal of configuration values.
 */

/**
 * Class name assigned to liner DIV elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_LINER
 * @property DataTable.CLASS_LINER
 * @type String
 * @static
 * @final
 * @default "yui-dt-liner"
 */

/**
 * Class name assigned to display label elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_LABEL
 * @property DataTable.CLASS_LABEL
 * @type String
 * @static
 * @final
 * @default "yui-dt-label"
 */

/**
 * Class name assigned to Column drag target.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_COLTARGET
 * @property DataTable.CLASS_COLTARGET
 * @type String
 * @static
 * @final
 * @default "yui-dt-coltarget"
 */

/**
 * Class name assigned to resizer handle elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_RESIZER
 * @property DataTable.CLASS_RESIZER
 * @type String
 * @static
 * @final
 * @default "yui-dt-resizer"
 */

/**
 * Class name assigned to resizer proxy elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_RESIZERPROXY
 * @property DataTable.CLASS_RESIZERPROXY
 * @type String
 * @static
 * @final
 * @default "yui-dt-resizerproxy"
 */

/**
 * Class name assigned to Editor container elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_EDITOR
 * @property DataTable.CLASS_EDITOR
 * @type String
 * @static
 * @final
 * @default "yui-dt-editor"
 */

/**
 * Class name assigned to paginator container elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_PAGINATOR
 * @property DataTable.CLASS_PAGINATOR
 * @type String
 * @static
 * @final
 * @default "yui-dt-paginator"
 */

/**
 * Class name assigned to page number indicators.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_PAGE
 * @property DataTable.CLASS_PAGE
 * @type String
 * @static
 * @final
 * @default "yui-dt-page"
 */

/**
 * Class name assigned to default indicators.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_DEFAULT
 * @property DataTable.CLASS_DEFAULT
 * @type String
 * @static
 * @final
 * @default "yui-dt-default"
 */

/**
 * Class name assigned to previous indicators.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_PREVIOUS
 * @property DataTable.CLASS_PREVIOUS
 * @type String
 * @static
 * @final
 * @default "yui-dt-previous"
 */

/**
 * Class name assigned next indicators.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_NEXT
 * @property DataTable.CLASS_NEXT
 * @type String
 * @static
 * @final
 * @default "yui-dt-next"
 */

/**
 * Class name assigned to first elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_FIRST
 * @property DataTable.CLASS_FIRST
 * @type String
 * @static
 * @final
 * @default "yui-dt-first"
 */

/**
 * Class name assigned to last elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_LAST
 * @property DataTable.CLASS_LAST
 * @type String
 * @static
 * @final
 * @default "yui-dt-last"
 */

/**
 * Class name assigned to even elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_EVEN
 * @property DataTable.CLASS_EVEN
 * @type String
 * @static
 * @final
 * @default "yui-dt-even"
 */

/**
 * Class name assigned to odd elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_ODD
 * @property DataTable.CLASS_ODD
 * @type String
 * @static
 * @final
 * @default "yui-dt-odd"
 */

/**
 * Class name assigned to selected elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_SELECTED
 * @property DataTable.CLASS_SELECTED
 * @type String
 * @static
 * @final
 * @default "yui-dt-selected"
 */

/**
 * Class name assigned to highlighted elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_HIGHLIGHTED
 * @property DataTable.CLASS_HIGHLIGHTED
 * @type String
 * @static
 * @final
 * @default "yui-dt-highlighted"
 */

/**
 * Class name assigned to hidden elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_HIDDEN
 * @property DataTable.CLASS_HIDDEN
 * @type String
 * @static
 * @final
 * @default "yui-dt-hidden"
 */

/**
 * Class name assigned to disabled elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_DISABLED
 * @property DataTable.CLASS_DISABLED
 * @type String
 * @static
 * @final
 * @default "yui-dt-disabled"
 */

/**
 * Class name assigned to empty indicators.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_EMPTY
 * @property DataTable.CLASS_EMPTY
 * @type String
 * @static
 * @final
 * @default "yui-dt-empty"
 */

/**
 * Class name assigned to loading indicatorx.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_LOADING
 * @property DataTable.CLASS_LOADING
 * @type String
 * @static
 * @final
 * @default "yui-dt-loading"
 */

/**
 * Class name assigned to error indicators.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_ERROR
 * @property DataTable.CLASS_ERROR
 * @type String
 * @static
 * @final
 * @default "yui-dt-error"
 */

/**
 * Class name assigned to editable elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_EDITABLE
 * @property DataTable.CLASS_EDITABLE
 * @type String
 * @static
 * @final
 * @default "yui-dt-editable"
 */

/**
 * Class name assigned to draggable elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_DRAGGABLE
 * @property DataTable.CLASS_DRAGGABLE
 * @type String
 * @static
 * @final
 * @default "yui-dt-draggable"
 */

/**
 * Class name assigned to resizeable elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_RESIZEABLE
 * @property DataTable.CLASS_RESIZEABLE
 * @type String
 * @static
 * @final
 * @default "yui-dt-resizeable"
 */

/**
 * Class name assigned to scrollable elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_SCROLLABLE
 * @property DataTable.CLASS_SCROLLABLE
 * @type String
 * @static
 * @final
 * @default "yui-dt-scrollable"
 */

/**
 * Class name assigned to sortable elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_SORTABLE
 * @property DataTable.CLASS_SORTABLE
 * @type String
 * @static
 * @final
 * @default "yui-dt-sortable"
 */

/**
 * Class name assigned to ascending elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_ASC
 * @property DataTable.CLASS_ASC
 * @type String
 * @static
 * @final
 * @default "yui-dt-asc"
 */

/**
 * Class name assigned to descending elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_DESC
 * @property DataTable.CLASS_DESC
 * @type String
 * @static
 * @final
 * @default "yui-dt-desc"
 */

/**
 * Class name assigned to BUTTON elements and/or container elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_BUTTON
 * @property DataTable.CLASS_BUTTON
 * @type String
 * @static
 * @final
 * @default "yui-dt-button"
 */

/**
 * Class name assigned to INPUT TYPE=CHECKBOX elements and/or container elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_CHECKBOX
 * @property DataTable.CLASS_CHECKBOX
 * @type String
 * @static
 * @final
 * @default "yui-dt-checkbox"
 */

/**
 * Class name assigned to SELECT elements and/or container elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_DROPDOWN
 * @property DataTable.CLASS_DROPDOWN
 * @type String
 * @static
 * @final
 * @default "yui-dt-dropdown"
 */

/**
 * Class name assigned to INPUT TYPE=RADIO elements and/or container elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.CLASS_RADIO
 * @property DataTable.CLASS_RADIO
 * @type String
 * @static
 * @final
 * @default "yui-dt-radio"
 */

/**
 * Message to display if DataTable has no data.
 *
 * @id YAHOO.widget.DataTable.DataTable.MSG_EMPTY
 * @property DataTable.MSG_EMPTY
 * @type String
 * @static
 * @final
 * @default "No records found."
 */

/**
 * Message to display while DataTable is loading data.
 *
 * @id YAHOO.widget.DataTable.DataTable.MSG_LOADING
 * @property DataTable.MSG_LOADING
 * @type String
 * @static
 * @final
 * @default "Loading data..."
 */

/**
 * Message to display while DataTable has data error.
 *
 * @id YAHOO.widget.DataTable.DataTable.MSG_ERROR
 * @property DataTable.MSG_ERROR
 * @type String
 * @static
 * @final
 * @default "Data error."
 */

/**
 * Internal class variable for indexing multiple DataTable instances.
 *
 * @id YAHOO.widget.DataTable.DataTable._nCount
 * @property DataTable._nCount
 * @type Number
 * @private
 * @static
 */

/**
 * Internal class variable tracking current number of DataTable instances,
 * so that certain class values can be reset when all instances are destroyed.
 *
 * @id YAHOO.widget.DataTable.DataTable._nCurrentCount
 * @property DataTable._nCurrentCount
 * @type Number
 * @private
 * @static
 */

/**
 * Reference to STYLE node that is dynamically created and written to
 * in order to manage Column widths.
 *
 * @id YAHOO.widget.DataTable.DataTable._elStylesheet
 * @property DataTable._elStylesheet
 * @type HTMLElement
 * @private
 * @static
 */

/**
 * Set to true if _elStylesheet cannot be populated due to browser incompatibility.
 *
 * @id YAHOO.widget.DataTable.DataTable._bStylesheetFallback
 * @property DataTable._bStylesheetFallback
 * @type boolean
 * @private
 * @static
 */

/**
 * Object literal hash of Columns and their dynamically create style rules.
 *
 * @id YAHOO.widget.DataTable.DataTable._oStylesheetRules
 * @property DataTable._oStylesheetRules
 * @type Object
 * @private
 * @static
 */

/**
 * Element reference to shared Column drag target.
 *
 * @id YAHOO.widget.DataTable.DataTable._elColumnDragTarget
 * @property DataTable._elColumnDragTarget
 * @type HTMLElement
 * @private
 * @static
 */

/**
 * Element reference to shared Column resizer proxy.
 *
 * @id YAHOO.widget.DataTable.DataTable._elColumnResizerProxy
 * @property DataTable._elColumnResizerProxy
 * @type HTMLElement
 * @private
 * @static
 */

/**
 * Clones object literal or array of object literals.
 *
 * @id YAHOO.widget.DataTable.DataTable._cloneObject
 * @method DataTable._cloneObject
 * @param o {Object} Object.
 * @private
 * @static
 */

/**
 * Creates HTML markup for shared Column drag target.
 *
 * @id YAHOO.widget.DataTable.DataTable._initColumnDragTargetEl
 * @method DataTable._initColumnDragTargetEl
 * @return {HTMLElement} Reference to Column drag target.
 * @private
 * @static
 */

/**
 * Creates HTML markup for shared Column resizer proxy.
 *
 * @id YAHOO.widget.DataTable.DataTable._initColumnResizerProxyEl
 * @method DataTable._initColumnResizerProxyEl
 * @return {HTMLElement} Reference to Column resizer proxy.
 * @private
 * @static
 */

/**
 * Outputs markup into the given TH based on given Column.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatTheadCell
 * @method DataTable.formatTheadCell
 * @param elCellLabel {HTMLElement} The label DIV element within the TH liner.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oSelf {DT} DataTable instance.
 * @static
 */

/**
 * Formats a BUTTON element.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatButton
 * @method DataTable.formatButton
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object | Boolean} Data value for the cell. By default, the value
 * is what gets written to the BUTTON.
 * @static
 */

/**
 * Formats a CHECKBOX element.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatCheckbox
 * @method DataTable.formatCheckbox
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object | Boolean} Data value for the cell. Can be a simple
 * Boolean to indicate whether checkbox is checked or not. Can be object literal
 * {checked:bBoolean, label:sLabel}. Other forms of oData require a custom
 * formatter.
 * @static
 */

/**
 * Formats currency. Default unit is USD.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatCurrency
 * @method DataTable.formatCurrency
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Number} Data value for the cell.
 * @static
 */

/**
 * Formats JavaScript Dates.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatDate
 * @method DataTable.formatDate
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} Data value for the cell, or null.
 * @static
 */

/**
 * Formats SELECT elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatDropdown
 * @method DataTable.formatDropdown
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} Data value for the cell, or null.
 * @static
 */

/**
 * Formats emails.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatEmail
 * @method DataTable.formatEmail
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} Data value for the cell, or null.
 * @static
 */

/**
 * Formats links.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatLink
 * @method DataTable.formatLink
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} Data value for the cell, or null.
 * @static
 */

/**
 * Formats numbers.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatNumber
 * @method DataTable.formatNumber
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} Data value for the cell, or null.
 * @static
 */

/**
 * Formats INPUT TYPE=RADIO elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatRadio
 * @method DataTable.formatRadio
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} (Optional) Data value for the cell.
 * @static
 */

/**
 * Formats text strings.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatText
 * @method DataTable.formatText
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} (Optional) Data value for the cell.
 * @static
 */

/**
 * Formats TEXTAREA elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatTextarea
 * @method DataTable.formatTextarea
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} (Optional) Data value for the cell.
 * @static
 */

/**
 * Formats INPUT TYPE=TEXT elements.
 *
 * @id YAHOO.widget.DataTable.DataTable.formatTextbox
 * @method DataTable.formatTextbox
 * @param el {HTMLElement} The element to format with markup.
 * @param oRecord {YAHOO.widget.Record} Record instance.
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param oData {Object} (Optional) Data value for the cell.
 * @static
 */

/**
 * Handles Pag changeRequest events for static DataSources
 * (i.e. DataSources that return all data immediately)
 * @id YAHOO.widget.DataTable.DataTable.handleSimplePagination
 * @method DataTable.handleSimplePagination
 * @param {object} the requested state of the pagination
 * @param {DataTable} the DataTable instance
 * @static
 */

/**
 * Handles Pag changeRequest events for dynamic DataSources
 * such as DataSource.TYPE_XHR or DataSource.TYPE_JSFUNCTION.
 * @id YAHOO.widget.DataTable.DataTable.handleDataSourcePagination
 * @method DataTable.handleDataSourcePagination
 * @param {object} the requested state of the pagination
 * @param {DataTable} the DataTable instance
 * @static
 */

/**
 * Enables CHECKBOX Editor.
 *
 * @id YAHOO.widget.DataTable.DataTable.editCheckbox
 * @method DataTable.editCheckbox
 * @param oEditor {Object} Object literal representation of Editor values.
 * @param oSelf {DT} Reference back to DataTable instance.
 * @static
 */

/**
 * Enables Date Editor.
 *
 * @id YAHOO.widget.DataTable.DataTable.editDate
 * @method DataTable.editDate
 * @param oEditor {Object} Object literal representation of Editor values.
 * @param oSelf {DT} Reference back to DataTable instance.
 * @static
 */

/**
 * Enables SELECT Editor.
 *
 * @id YAHOO.widget.DataTable.DataTable.editDropdown
 * @method DataTable.editDropdown
 * @param oEditor {Object} Object literal representation of Editor values.
 * @param oSelf {DT} Reference back to DataTable instance.
 * @static
 */

/**
 * Enables INPUT TYPE=RADIO Editor.
 *
 * @id YAHOO.widget.DataTable.DataTable.editRadio
 * @method DataTable.editRadio
 * @param oEditor {Object} Object literal representation of Editor values.
 * @param oSelf {DT} Reference back to DataTable instance.
 * @static
 */

/**
 * Enables TEXTAREA Editor.
 *
 * @id YAHOO.widget.DataTable.DataTable.editTextarea
 * @method DataTable.editTextarea
 * @param oEditor {Object} Object literal representation of Editor values.
 * @param oSelf {DT} Reference back to DataTable instance.
 * @static
 */

/**
 * Enables INPUT TYPE=TEXT Editor.
 *
 * @id YAHOO.widget.DataTable.DataTable.editTextbox
 * @method DataTable.editTextbox
 * @param oEditor {Object} Object literal representation of Editor values.
 * @param oSelf {DT} Reference back to DataTable instance.
 * @static
 */

/**
 * Validates Editor input value to type Number, doing type conversion as
 * necessary. A valid Number value is return, else the previous value is returned
 * if input value does not validate.
 *
 *
 * @id YAHOO.widget.DataTable.DataTable.validateNumber
 * @method DataTable.validateNumber
 * @param oData {Object} Data to validate.
 * @static
 */

/**
 * Translates (proposed) DataTable state data into a form consumable by
 * DataSource sendRequest as the request parameter.  Use
 * set('generateParameter', yourFunc) to use a custom function rather than this
 * one.
 * @id YAHOO.widget.DataTable.DataTable._generateRequest
 * @method DataTable._generateRequest
 * @param oData {Object} Object literal defining the current or proposed state
 * @param oDataTable {DataTable} Reference to the DataTable instance
 * @returns {MIXED} Returns appropriate value based on DataSource type
 * @private
 * @static
 */

/**
 * Cell formatting functions.
 * @id YAHOO.widget.DataTable.DataTable.Formatter
 * @property DataTable.Formatter
 * @type Object
 * @static
 */

/**
 * Implementation of Element's abstract method. Sets up config values.
 *
 * @id YAHOO.widget.DataTable.initAttributes
 * @method initAttributes
 * @param oConfigs {Object} (Optional) Object literal definition of configuration values.
 * @private
 */

/**
 * @id YAHOO.widget.DataTable.summary
 * @attribute summary
 * @description Value for the SUMMARY attribute.
 * @type String
 */

/**
 * @id YAHOO.widget.DataTable.selectionMode
 * @attribute selectionMode
 * @description Specifies row or cell selection mode. Accepts the following strings:
 *    <dl>
 *      <dt>"standard"</dt>
 *      <dd>Standard row selection with support for modifier keys to enable
 *      multiple selections.</dd>
 *
 *      <dt>"single"</dt>
 *      <dd>Row selection with modifier keys disabled to not allow
 *      multiple selections.</dd>
 *
 *      <dt>"singlecell"</dt>
 *      <dd>Cell selection with modifier keys disabled to not allow
 *      multiple selections.</dd>
 *
 *      <dt>"cellblock"</dt>
 *      <dd>Cell selection with support for modifier keys to enable multiple
 *      selections in a block-fashion, like a spreadsheet.</dd>
 *
 *      <dt>"cellrange"</dt>
 *      <dd>Cell selection with support for modifier keys to enable multiple
 *      selections in a range-fashion, like a calendar.</dd>
 *    </dl>
 *
 * @default "standard"
 * @type String
 */

/**
 * @id YAHOO.widget.DataTable.initialRequest
 * @attribute initialRequest
 * @description Defines the initial request that gets sent to the DataSource
 * during initialization. Value is ignored if initialLoad is set to any value
 * other than true.
 * @type MIXED
 * @default null
 */

/**
 * @id YAHOO.widget.DataTable.initialLoad
 * @attribute initialLoad
 * @description Determines whether or not to load data at instantiation. By
 * default, will trigger a sendRequest() to the DataSource and pass in the
 * request defined by initialRequest. If set to false, data will not load
 * at instantiation. Alternatively, implementers who wish to work with a
 * custom payload may pass in an object literal with the following values:
 *
 *    <dl>
 *      <dt>request (MIXED)</dt>
 *      <dd>Request value.</dd>
 *
 *      <dt>argument (MIXED)</dt>
 *      <dd>Custom data that will be passed through to the callback function.</dd>
 *    </dl>
 *
 *
 * @type Boolean | Object
 * @default true
 */

/**
 * @id YAHOO.widget.DataTable.generateRequest
 * @attribute generateRequest
 * @description A function used to translate proposed DataTable state info
 * into a value which is then passed to the DataSource's sendRequest method.
 * This function is called to get the DataTable's initial data as well as
 * any data changes or requests such as pagination or sorting.  The method
 * is passed two params, an object literal with the state data and a
 * reference to the DataTable.
 * @type function
 * @default DT._generateRequest
 */

/**
 * @id YAHOO.widget.DataTable.sortedBy
 * @attribute sortedBy
 * @description Object literal provides metadata for initial sort values if
 * data will arrive pre-sorted:
 * <dl>
 *     <dt>sortedBy.key</dt>
 *     <dd>{String} Key of sorted Column</dd>
 *     <dt>sortedBy.dir</dt>
 *     <dd>{String} Initial sort direction, either DT.CLASS_ASC or DT.CLASS_DESC</dd>
 * </dl>
 * @type Object
 */

/**
 * @id YAHOO.widget.DataTable.paginator
 * @attribute paginator
 * @description Stores an instance of Pag, or (for
 * backward compatibility), an object literal of pagination values in the
 * following form:<br>
 *   { containers:[], // UI container elements <br>
 *   rowsPerPage:500, // 500 rows <br>
 *   currentPage:1,  // page one <br>
 *   pageLinks:0,    // show all links <br>
 *   pageLinksStart:1, // first link is page 1 <br>
 *   dropdownOptions:null, // no dropdown <br>
 *   links: [], // links elements <br>
 *   dropdowns: [] } //dropdown elements
 *
 * @default null
 * @type {Object|YAHOO.widget.Paginator}
 */

/**
 * @id YAHOO.widget.DataTable.paginated
 * @attribute paginated
 * @deprecated No longer used, as long as "paginator" value is an instance of
 * Paginator class.
 */

/**
 * @id YAHOO.widget.DataTable.paginationEventHandler
 * @attribute paginationEventHandler
 * @description For use with Pag pagination.  A
 * handler function that receives the requestChange event from the
 * configured paginator.  The handler method will be passed these
 * parameters:
 * <ol>
 * <li>oState {Object} - an object literal describing the requested
 * pagination state</li>
 * <li>oSelf {DataTable} - The DataTable instance.</li>
 * </ol>
 *
 * For pagination through dynamic or server side data, assign
 * DT.handleDataSourcePagination or your own custom
 * handler.
 * @type {function|Object}
 * @default DT.handleSimplePagination
 */

/**
 * @id YAHOO.widget.DataTable.caption
 * @attribute caption
 * @description Value for the CAPTION element.
 * @type String
 */

/**
 * @id YAHOO.widget.DataTable.scrollable
 * @attribute scrollable
 * @description True if primary TBODY should scroll.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.DataTable.width
 * @attribute width
 * @description Table width for scrollable tables
 * @type String
 */

/**
 * @id YAHOO.widget.DataTable.height
 * @attribute height
 * @description Table height for scrollable tables
 * @type String
 */

/**
 * @id YAHOO.widget.DataTable.draggableColumns
 * @attribute draggableColumns
 * @description True if Columns are draggable to reorder, false otherwise.
 * The Drag & Drop Utility is required to enable this feature. Only top-level
 * and non-nested Columns are draggable. Write once.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.DataTable.renderLoopSize
 * @attribute renderLoopSize
 * @description A value greater than 0 enables DOM rendering of rows to be
 * executed from a non-blocking timeout queue and sets how many rows to be
 * rendered per timeout. Recommended for very large data sets.
 * @type Number
 * @default 0
 */

/**
 * True if instance is initialized, so as to fire the initEvent rather than
 * renderEvent.
 *
 * @id YAHOO.widget.DataTable._bInit
 * @property _bInit
 * @type Boolean
 * @default true
 * @private
 */

/**
 * Index assigned to instance.
 *
 * @id YAHOO.widget.DataTable._nIndex
 * @property _nIndex
 * @type Number
 * @private
 */

/**
 * Counter for IDs assigned to TR elements.
 *
 * @id YAHOO.widget.DataTable._nTrCount
 * @property _nTrCount
 * @type Number
 * @private
 */

/**
 * Counter for IDs assigned to TD elements.
 *
 * @id YAHOO.widget.DataTable._nTdCount
 * @property _nTdCount
 * @type Number
 * @private
 */

/**
 * Unique id assigned to instance "yui-dtN", useful prefix for generating unique
 * DOM ID strings and log messages.
 *
 * @id YAHOO.widget.DataTable._sId
 * @property _sId
 * @type String
 * @private
 */

/**
 * Render chain.
 *
 * @id YAHOO.widget.DataTable._oChain
 * @property _oChain
 * @type YAHOO.util.Chain
 * @private
 */

/**
 * Sparse array of custom functions to set column widths for browsers that don't
 * support dynamic CSS rules.  Functions are added at the index representing
 * the number of rows they update.
 *
 * @id YAHOO.widget.DataTable._aFallbackColResizer
 * @property _aFallbackColResizer
 * @type Array
 * @private
 */

/**
 * DOM reference to the container element for the DataTable instance into which
 * all other elements get created.
 *
 * @id YAHOO.widget.DataTable._elContainer
 * @property _elContainer
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the container element for the DataTable's primary THEAD.
 *
 * @id YAHOO.widget.DataTable._elTheadContainer
 * @property _elTheadContainer
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the container element for the DataTable's primary TBODY.
 *
 * @id YAHOO.widget.DataTable._elTbodyContainer
 * @property _elTbodyContainer
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the CAPTION element for the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._elCaption
 * @property _elCaption
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the primary THEAD element for the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._elThead
 * @property _elThead
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the primary TBODY element for the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._elTbody
 * @property _elTbody
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the secondary TBODY element used to display DataTable messages.
 *
 * @id YAHOO.widget.DataTable._elMsgTbody
 * @property _elMsgTbody
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the secondary TBODY element's single TR element used to display DataTable messages.
 *
 * @id YAHOO.widget.DataTable._elMsgTbodyRow
 * @property _elMsgTbodyRow
 * @type HTMLElement
 * @private
 */

/**
 * DOM reference to the secondary TBODY element's single TD element used to display DataTable messages.
 *
 * @id YAHOO.widget.DataTable._elMsgTbodyCell
 * @property _elMsgTbodyCell
 * @type HTMLElement
 * @private
 */

/**
 * DataSource instance for the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._oDataSource
 * @property _oDataSource
 * @type YAHOO.util.DataSource
 * @private
 */

/**
 * ColumnSet instance for the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._oColumnSet
 * @property _oColumnSet
 * @type YAHOO.widget.ColumnSet
 * @private
 */

/**
 * RecordSet instance for the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._oRecordSet
 * @property _oRecordSet
 * @type YAHOO.widget.RecordSet
 * @private
 */

/**
 * ID string of first TR element of the current DataTable page.
 *
 * @id YAHOO.widget.DataTable._sFirstTrId
 * @property _sFirstTrId
 * @type String
 * @private
 */

/**
 * ID string of the last TR element of the current DataTable page.
 *
 * @id YAHOO.widget.DataTable._sLastTrId
 * @property _sLastTrId
 * @type String
 * @private
 */

/**
 * Template cell to create all new cells from.
 * @id YAHOO.widget.DataTable._tdElTemplate
 * @property _tdElTemplate
 * @type {HTMLElement}
 * @private
 */

/**
 * Template row to create all new rows from.
 * @id YAHOO.widget.DataTable._trElTemplate
 * @property _trElTemplate
 * @type {HTMLElement}
 * @private
 */

/**
 * True if x-scrollbar is currently visible.
 * @id YAHOO.widget.DataTable._bScrollbarX
 * @property _bScrollbarX
 * @type {Boolean}
 * @private
 */

/**
 * Clears browser text selection. Useful to call on rowSelectEvent or
 * cellSelectEvent to prevent clicks or dblclicks from selecting text in the
 * browser.
 *
 * @id YAHOO.widget.DataTable.clearTextSelection
 * @method clearTextSelection
 */

/**
 * Sets focus on the given element.
 *
 * @id YAHOO.widget.DataTable._focusEl
 * @method _focusEl
 * @param el {HTMLElement} Element.
 * @private
 */

/**
 * Syncs up widths of THs and TDs across all those Columns without width values.
 * Actual adjustment is to the liner DIVs so window resizing will not affect cells.
 *
 * @id YAHOO.widget.DataTable._syncColWidths
 * @method _syncColWidths
 * @private
 */

/**
 * Syncs padding around scrollable tables, including Column header right-padding
 * and container width and height.
 *
 * @id YAHOO.widget.DataTable._syncScrollPadding
 * @method _syncScrollPadding
 * @private
 */

/**
 * Initializes the HTMLElement templates used to create various table child
 * nodes.
 * @id YAHOO.widget.DataTable._initNodeTemplates
 * @method _initNodeTemplates
 * @private
 */

/**
 * Initializes the DataTable container element.
 *
 * @id YAHOO.widget.DataTable._initContainerEl
 * @method _initContainerEl
 * @param elContainer {HTMLElement | String} HTML DIV element by reference or ID.
 * @private
 */

/**
 * Initializes object literal of config values.
 *
 * @id YAHOO.widget.DataTable._initConfigs
 * @method _initConfigs
 * @param oConfig {Object} Object literal of config values.
 * @private
 */

/**
 * Initializes ColumnSet.
 *
 * @id YAHOO.widget.DataTable._initColumnSet
 * @method _initColumnSet
 * @param aColumnDefs {Object[]} Array of object literal Column definitions.
 * @private
 */

/**
 * Initializes DataSource.
 *
 * @id YAHOO.widget.DataTable._initDataSource
 * @method _initDataSource
 * @param oDataSource {YAHOO.util.DataSource} DataSource instance.
 * @private
 */

/**
 * Initializes RecordSet.
 *
 * @id YAHOO.widget.DataTable._initRecordSet
 * @method _initRecordSet
 * @private
 */

/**
 * Creates HTML markup for TABLE, THEAD and TBODY elements.
 *
 * @id YAHOO.widget.DataTable._initTableEl
 * @method _initTableEl
 * @private
 */

/**
 * Initializes THEAD elements for display and for screen readers.
 *
 * @id YAHOO.widget.DataTable._initTheadEls
 * @method _initTheadEls
 * @private
 */

/**
 * Populates TH cell as defined by Column.
 *
 * @id YAHOO.widget.DataTable._initThEl
 * @method _initThEl
 * @param elTheadCell {HTMLElement} TH cell element reference.
 * @param oColumn {YAHOO.widget.Column} Column object.
 * @param row {Number} Row index.
 * @param col {Number} Column index.
 * @param bA11y {Boolean} True if TH is for accessibility, so as not to
 * initialize presentation elements.
 * @private
 */

/**
 * Creates HTML markup for Cell Editor.
 *
 * @id YAHOO.widget.DataTable._initCellEditorEl
 * @method _initCellEditorEl
 * @private
 */

/**
 * Initializes Column sorting.
 *
 * @id YAHOO.widget.DataTable._initColumnSort
 * @method _initColumnSort
 * @private
 */

/**
 * Create a TR element for a given Record.
 * @id YAHOO.widget.DataTable._createTrEl
 * @method _createTrEl
 * @param oRecord {YAHOO.widget.Record} Record instance
 * @return {HTMLElement} The new TR element.  This must be added to the DOM.
 * @private
 */

/**
 * Formats all TD elements of given TR element with data from the given Record.
 *
 * @id YAHOO.widget.DataTable._updateTrEl
 * @method _updateTrEl
 * @param elRow {HTMLElement} The TR element to update.
 * @param oRecord {YAHOO.widget.Record} The associated Record instance.
 * @return {HTMLElement} DOM reference to the new TR element.
 * @private
 */

/**
 * Creates a cell within the specified row and column.
 * @id YAHOO.widget.DataTable._addTdEl
 * @method _addTdEl
 * @param elRow {HTMLElement} The row to add the cell to
 * @param oColumn {Column} The column definition to use for the cell
 * @param index {number} (optional) the index to add the cell at (default null)
 * @return {HTMLElement} the new cell
 * @private
 */

/**
 * Deletes TR element by DOM reference or by DataTable page row index.
 *
 * @id YAHOO.widget.DataTable._deleteTrEl
 * @method _deleteTrEl
 * @param row {HTMLElement | Number} TR element reference or Datatable page row index.
 * @return {Boolean} Returns true if successful, else returns false.
 * @private
 */

/**
 * Assigns the class DT.CLASS_FIRST to the first TR element
 * of the DataTable page and updates internal tracker.
 *
 * @id YAHOO.widget.DataTable._setFirstRow
 * @method _setFirstRow
 * @private
 */

/**
 * Assigns the class DT.CLASS_LAST to the last TR element
 * of the DataTable page and updates internal tracker.
 *
 * @id YAHOO.widget.DataTable._setLastRow
 * @method _setLastRow
 * @private
 */

/**
 * Assigns the classes DT.CLASS_EVEN and
 * DT.CLASS_ODD to alternating TR elements of the DataTable
 * page. For performance, a subset of rows may be specified.
 *
 * @id YAHOO.widget.DataTable._setRowStripes
 * @method _setRowStripes
 * @param row {HTMLElement | String | Number} (optional) HTML TR element reference
 * or string ID, or page row index of where to start striping.
 * @param range {Number} (optional) If given, how many rows to stripe, otherwise
 * stripe all the rows until the end.
 * @private
 */

/**
 * Syncs scrolltop and scrollleft of all TABLEs.
 *
 * @id YAHOO.widget.DataTable._onScroll
 * @method _onScroll
 * @param e {HTMLEvent} The scroll event.
 * @param oSelf {DT} DataTable instance
 * @private
 */

/**
 * Handles click events on the DOCUMENT.
 *
 * @id YAHOO.widget.DataTable._onDocumentClick
 * @method _onDocumentClick
 * @param e {HTMLEvent} The click event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles focus events on the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._onTableFocus
 * @method _onTableFocus
 * @param e {HTMLEvent} The focus event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles focus events on the THEAD element.
 *
 * @id YAHOO.widget.DataTable._onTheadFocus
 * @method _onTheadFocus
 * @param e {HTMLEvent} The focus event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles focus events on the TBODY element.
 *
 * @id YAHOO.widget.DataTable._onTbodyFocus
 * @method _onTbodyFocus
 * @param e {HTMLEvent} The focus event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles mouseover events on the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._onTableMouseover
 * @method _onTableMouseover
 * @param e {HTMLEvent} The mouseover event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles mouseout events on the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._onTableMouseout
 * @method _onTableMouseout
 * @param e {HTMLEvent} The mouseout event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles mousedown events on the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._onTableMousedown
 * @method _onTableMousedown
 * @param e {HTMLEvent} The mousedown event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles dblclick events on the DataTable instance.
 *
 * @id YAHOO.widget.DataTable._onTableDblclick
 * @method _onTableDblclick
 * @param e {HTMLEvent} The dblclick event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles keydown events on the THEAD element.
 *
 * @id YAHOO.widget.DataTable._onTheadKeydown
 * @method _onTheadKeydown
 * @param e {HTMLEvent} The key event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles keydown events on the TBODY element. Handles selection behavior,
 * provides hooks for ENTER to edit functionality.
 *
 * @id YAHOO.widget.DataTable._onTbodyKeydown
 * @method _onTbodyKeydown
 * @param e {HTMLEvent} The key event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles keypress events on the TABLE. Mainly to support stopEvent on Mac.
 *
 * @id YAHOO.widget.DataTable._onTableKeypress
 * @method _onTableKeypress
 * @param e {HTMLEvent} The key event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles click events on the THEAD element.
 *
 * @id YAHOO.widget.DataTable._onTheadClick
 * @method _onTheadClick
 * @param e {HTMLEvent} The click event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Handles click events on the primary TBODY element.
 *
 * @id YAHOO.widget.DataTable._onTbodyClick
 * @method _onTbodyClick
 * @param e {HTMLEvent} The click event.
 * @param oSelf {DT} DataTable instance.
 * @private
 */

/**
 * Returns unique id assigned to instance, which is a useful prefix for
 * generating unique DOM ID strings.
 *
 * @id YAHOO.widget.DataTable.getId
 * @method getId
 * @return {String} Unique ID of the DataSource instance.
 */

/**
 * DataSource instance name, for logging.
 *
 * @id YAHOO.widget.DataTable.toString
 * @method toString
 * @return {String} Unique name of the DataSource instance.
 */

/**
 * Returns the DataTable instance's DataSource instance.
 *
 * @id YAHOO.widget.DataTable.getDataSource
 * @method getDataSource
 * @return {YAHOO.util.DataSource} DataSource instance.
 */

/**
 * Returns the DataTable instance's ColumnSet instance.
 *
 * @id YAHOO.widget.DataTable.getColumnSet
 * @method getColumnSet
 * @return {YAHOO.widget.ColumnSet} ColumnSet instance.
 */

/**
 * Returns the DataTable instance's RecordSet instance.
 *
 * @id YAHOO.widget.DataTable.getRecordSet
 * @method getRecordSet
 * @return {YAHOO.widget.RecordSet} RecordSet instance.
 */

/**
 * Returns the DataTable instance's Cell Editor as an object literal with the
 * following properties:
 * <dl>
 * <dt>cell</dt>
 * <dd>{HTMLElement} Cell element being edited.</dd>
 *
 * <dt>column</dt>
 * <dd>{YAHOO.widget.Column} Associated Column instance.</dd>
 *
 * <dt>container</dt>
 * <dd>{HTMLElement} Reference to editor's container DIV element.</dd>
 *
 * <dt>isActive</dt>
 * <dd>{Boolean} True if cell is currently being edited.</dd>
 *
 * <dt>record</dt>
 * <dd>{YAHOO.widget.Record} Associated Record instance.</dd>
 *
 * <dt>validator</dt>
 * <dd>{HTMLFunction} Associated validator function called before new data is stored. Called
 * within the scope of the DataTable instance, the function receieves the
 * following arguments:
 *
 * <dl>
 *  <dt>oNewData</dt>
 *  <dd>{Object} New data to validate.</dd>
 *
 *  <dt>oOldData</dt>
 *  <dd>{Object} Original data in case of reversion.</dd>
 *
 *  <dt>oCellEditor</dt>
 *  <dd>{Object} Object literal representation of Editor values.</dd>
 * </dl>
 *
 *  </dd>
 *
 * <dt>defaultValue</dt>
 * <dd>Dynamically settable default value</dd>
 * </dl>
 *
 * <dt>value</dt>
 * <dd>Current input value</dd>
 * </dl>
 *
 *
 *
 *
 *
 * @id YAHOO.widget.DataTable.getCellEditor
 * @method getCellEditor
 * @return {Object} Cell Editor object literal values.
 */

/**
 * Returns DOM reference to the DataTable's container element.
 *
 * @id YAHOO.widget.DataTable.getContainerEl
 * @method getContainerEl
 * @return {HTMLElement} Reference to DIV element.
 */

/**
 * Returns DOM reference to the DataTable's THEAD element.
 *
 * @id YAHOO.widget.DataTable.getTheadEl
 * @method getTheadEl
 * @return {HTMLElement} Reference to THEAD element.
 */

/**
 * Returns DOM reference to the DataTable's primary TBODY element.
 *
 * @id YAHOO.widget.DataTable.getTbodyEl
 * @method getTbodyEl
 * @return {HTMLElement} Reference to TBODY element.
 */

/**
 * Returns DOM reference to the DataTable's secondary TBODY element that is
 * used to display messages.
 *
 * @id YAHOO.widget.DataTable.getMsgTbodyEl
 * @method getMsgTbodyEl
 * @return {HTMLElement} Reference to TBODY element.
 */

/**
 * Returns DOM reference to the TD element within the secondary TBODY that is
 * used to display messages.
 *
 * @id YAHOO.widget.DataTable.getMsgTdEl
 * @method getMsgTdEl
 * @return {HTMLElement} Reference to TD element.
 */

/**
 * Returns the corresponding TR reference for a given DOM element, ID string or
 * directly page row index. If the given identifier is a child of a TR element,
 * then DOM tree is traversed until a parent TR element is returned, otherwise
 * null.
 *
 * @id YAHOO.widget.DataTable.getTrEl
 * @method getTrEl
 * @param row {HTMLElement | String | Number | YAHOO.widget.Record} Which row to
 * get: by element reference, ID string, page row index, or Record.
 * @return {HTMLElement} Reference to TR element, or null.
 */

/**
 * Returns DOM reference to the first TR element in the DataTable page, or null.
 *
 * @id YAHOO.widget.DataTable.getFirstTrEl
 * @method getFirstTrEl
 * @return {HTMLElement} Reference to TR element.
 */

/**
 * Returns DOM reference to the last TR element in the DataTable page, or null.
 *
 * @id YAHOO.widget.DataTable.getLastTrEl
 * @method getLastTrEl
 * @return {HTMLElement} Reference to last TR element.
 */

/**
 * Returns DOM reference to the next TR element from the given TR element, or null.
 *
 * @id YAHOO.widget.DataTable.getNextTrEl
 * @method getNextTrEl
 * @param row {HTMLElement | String | Number | YAHOO.widget.Record} Element
 * reference, ID string, page row index, or Record from which to get next TR element.
 * @return {HTMLElement} Reference to next TR element.
 */

/**
 * Returns DOM reference to the previous TR element from the given TR element, or null.
 *
 * @id YAHOO.widget.DataTable.getPreviousTrEl
 * @method getPreviousTrEl
 * @param row {HTMLElement | String | Number | YAHOO.widget.Record} Element
 * reference, ID string, page row index, or Record from which to get previous TR element.
 * @return {HTMLElement} Reference to previous TR element.
 */

/**
 * Returns DOM reference to a TD liner element.
 *
 * @id YAHOO.widget.DataTable.getTdLinerEl
 * @method getTdLinerEl
 * @param cell {HTMLElement | String | Object} DOM element reference or string ID, or
 * object literal of syntax {record:oRecord, column:oColumn}.
 * @return {HTMLElement} Reference to TD liner element.
 */

/**
 * Returns DOM reference to a TD element.
 *
 * @id YAHOO.widget.DataTable.getTdEl
 * @method getTdEl
 * @param cell {HTMLElement | String | Object} DOM element reference or string ID, or
 * object literal of syntax {record:oRecord, column:oColumn}.
 * @return {HTMLElement} Reference to TD element.
 */

/**
 * Returns DOM reference to the first TD element in the DataTable page (by default),
 * the first TD element of the optionally given row, or null.
 *
 * @id YAHOO.widget.DataTable.getFirstTdEl
 * @method getFirstTdEl
 * @param row {HTMLElement} (optional) row from which to get first TD
 * @return {HTMLElement} Reference to TD element.
 */

/**
 * Returns DOM reference to the last TD element in the DataTable page (by default),
 * the first TD element of the optionally given row, or null.
 *
 * @id YAHOO.widget.DataTable.getLastTdEl
 * @method getLastTdEl
 * @return {HTMLElement} Reference to last TD element.
 */

/**
 * Returns DOM reference to the next TD element from the given cell, or null.
 *
 * @id YAHOO.widget.DataTable.getNextTdEl
 * @method getNextTdEl
 * @param cell {HTMLElement | String | Object} DOM element reference or string ID, or
 * object literal of syntax {record:oRecord, column:oColumn} from which to get next TD element.
 * @return {HTMLElement} Reference to next TD element, or null.
 */

/**
 * Returns DOM reference to the previous TD element from the given cell, or null.
 *
 * @id YAHOO.widget.DataTable.getPreviousTdEl
 * @method getPreviousTdEl
 * @param cell {HTMLElement | String | Object} DOM element reference or string ID, or
 * object literal of syntax {record:oRecord, column:oColumn} from which to get previous TD element.
 * @return {HTMLElement} Reference to previous TD element, or null.
 */

/**
 * Returns DOM reference to the above TD element from the given cell, or null.
 *
 * @id YAHOO.widget.DataTable.getAboveTdEl
 * @method getAboveTdEl
 * @param cell {HTMLElement | String | Object} DOM element reference or string ID, or
 * object literal of syntax {record:oRecord, column:oColumn} from which to get next TD element.
 * @return {HTMLElement} Reference to next TD element, or null.
 */

/**
 * Returns DOM reference to the below TD element from the given cell, or null.
 *
 * @id YAHOO.widget.DataTable.getBelowTdEl
 * @method getBelowTdEl
 * @param cell {HTMLElement | String | Object} DOM element reference or string ID, or
 * object literal of syntax {record:oRecord, column:oColumn} from which to get previous TD element.
 * @return {HTMLElement} Reference to previous TD element, or null.
 */

/**
 * Returns DOM reference to a TH liner element.
 *
 * @id YAHOO.widget.DataTable.getThLinerEl
 * @method getThLinerEl
 * @param theadCell {YAHOO.widget.Column | HTMLElement | String} Column instance,
 * DOM element reference, or string ID.
 * @return {HTMLElement} Reference to TH liner element.
 */

/**
 * Returns DOM reference to a TH element.
 *
 * @id YAHOO.widget.DataTable.getThEl
 * @method getThEl
 * @param theadCell {YAHOO.widget.Column | HTMLElement | String} Column instance,
 * DOM element reference, or string ID.
 * @return {HTMLElement} Reference to TH element.
 */

/**
 * Returns the page row index of given row. Returns null if the row is not on the
 * current DataTable page.
 *
 * @id YAHOO.widget.DataTable.getTrIndex
 * @method getTrIndex
 * @param row {HTMLElement | String | YAHOO.widget.Record | Number} DOM or ID
 * string reference to an element within the DataTable page, a Record instance,
 * or a Record's RecordSet index.
 * @return {Number} Page row index, or null if row does not exist or is not on current page.
 */

/**
 * Resets a RecordSet with the given data and populates the page view
 * with the new data. Any previous data and selection states are cleared.
 * However, sort states are not cleared, so if the given data is in a particular
 * sort order, implementers should take care to reset the sortedBy property. If
 * pagination is enabled, the currentPage is shown and Paginator UI updated,
 * otherwise all rows are displayed as a single page. For performance, existing
 * DOM elements are reused when possible.
 *
 * @id YAHOO.widget.DataTable.initializeTable
 * @method initializeTable
 */

/**
 * Renders the view with existing Records from the RecordSet while
 * maintaining sort, pagination, and selection states. For performance, reuses
 * existing DOM elements when possible while deleting extraneous elements.
 *
 * @id YAHOO.widget.DataTable.render
 * @method render
 */

/**
 * Nulls out the entire DataTable instance and related objects, removes attached
 * event listeners, and clears out DOM elements inside the container. After
 * calling this method, the instance reference should be expliclitly nulled by
 * implementer, as in myDataTable = null. Use with caution!
 *
 * @id YAHOO.widget.DataTable.destroy
 * @method destroy
 */

/**
 * Displays message within secondary TBODY.
 *
 * @id YAHOO.widget.DataTable.showTableMessage
 * @method showTableMessage
 * @param sHTML {String} (optional) Value for innerHTMlang.
 * @param sClassName {String} (optional) Classname.
 */

/**
 * Hides secondary TBODY.
 *
 * @id YAHOO.widget.DataTable.hideTableMessage
 * @method hideTableMessage
 */

/**
 * Brings focus to the TBODY element. Alias to focusTbodyEl.
 *
 * @id YAHOO.widget.DataTable.focus
 * @method focus
 */

/**
 * Brings focus to the THEAD element.
 *
 * @id YAHOO.widget.DataTable.focusTheadEl
 * @method focusTheadEl
 */

/**
 * Brings focus to the TBODY element.
 *
 * @id YAHOO.widget.DataTable.focusTbodyEl
 * @method focusTbodyEl
 */

/**
 * Returns Record index for given TR element or page row index.
 *
 * @id YAHOO.widget.DataTable.getRecordIndex
 * @method getRecordIndex
 * @param row {YAHOO.widget.Record | HTMLElement | Number} Record instance, TR
 * element reference or page row index.
 * @return {Number} Record's RecordSet index, or null.
 */

/**
 * For the given identifier, returns the associated Record instance.
 *
 * @id YAHOO.widget.DataTable.getRecord
 * @method getRecord
 * @param row {HTMLElement | Number | String} DOM reference to a TR element (or
 * child of a TR element), RecordSet position index, or Record ID.
 * @return {YAHOO.widget.Record} Record instance.
 */

/**
 * For the given identifier, returns the associated Column instance. Note: For
 * getting Columns by Column ID string, please use the method getColumnById().
 *
 * @id YAHOO.widget.DataTable.getColumn
 * @method getColumn
 * @param column {HTMLElement | String | Number} DOM reference or ID string to a
 * TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.
 * @return {YAHOO.widget.Column} Column instance.
 */

/**
 * For the given Column ID, returns the associated Column instance. Note: For
 * getting Columns by key, please use the method getColumn().
 *
 * @id YAHOO.widget.DataTable.getColumnById
 * @method getColumnById
 * @param column {String} Column ID string.
 * @return {YAHOO.widget.Column} Column instance.
 */

/**
 * For the given Column instance, returns next direction to sort.
 *
 * @id YAHOO.widget.DataTable.getColumnSortDir
 * @method getColumnSortDir
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @return {String} DataTable.widget.CLASS_ASC or DataTable.widget.CLASS_DESC.
 */

/**
 * Sorts given Column.
 *
 * @id YAHOO.widget.DataTable.sortColumn
 * @method sortColumn
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param sDir {String} (Optional) DT.CLASS_ASC or
 * DT.CLASS_DESC
 */

/**
 * Sets DOM elements of given Column to given pixel width. No validations
 * against minimum width and no updating Column.width value.
 *
 * @id YAHOO.widget.DataTable._setColumnWidth
 * @method _setColumnWidth
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param sWidth {String} New width value.
 * @private
 */

/**
 * Sets given Column to given pixel width. If new width is less than minimum
 * width, sets to minimum width. Updates oColumn.width value.
 *
 * @id YAHOO.widget.DataTable.setColumnWidth
 * @method setColumnWidth
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @param nWidth {Number} New width in pixels.
 */

/**
 * Hides given Column. NOTE: You cannot hide/show nested Columns. You can only
 * hide/show non-nested Columns, and top-level parent Columns (which will
 * hide/show all children Columns).
 *
 * @id YAHOO.widget.DataTable.hideColumn
 * @method hideColumn
 * @param oColumn {YAHOO.widget.Column} Column instance.
 */

/**
 * Shows given Column. NOTE: You cannot hide/show nested Columns. You can only
 * hide/show non-nested Columns, and top-level parent Columns (which will
 * hide/show all children Columns).
 *
 * @id YAHOO.widget.DataTable.showColumn
 * @method showColumn
 * @param oColumn {YAHOO.widget.Column} Column instance.
 */

/**
 * Removes given Column. NOTE: You cannot remove nested Columns. You can only remove
 * non-nested Columns, and top-level parent Columns (which will remove all
 * children Columns).
 *
 * @id YAHOO.widget.DataTable.removeColumn
 * @method removeColumn
 * @param oColumn {YAHOO.widget.Column} Column instance.
 * @return oColumn {YAHOO.widget.Column} Removed Column instance.
 */

/**
 * Inserts given Column at the index if given, otherwise at the end. NOTE: You
 * can only add non-nested Columns and top-level parent Columns. You cannot add
 * a nested Column to an existing parent.
 *
 * @id YAHOO.widget.DataTable.insertColumn
 * @method insertColumn
 * @param oColumn {Object | YAHOO.widget.Column} Object literal Column
 * definition or a Column instance.
 * @param index {Number} (optional) Column key index.
 */

/**
 * Selects given Column. NOTE: You cannot select/unselect nested Columns. You can only
 * select/unselect non-nested Columns, and bottom-level key Columns.
 *
 * @id YAHOO.widget.DataTable.selectColumn
 * @method selectColumn
 * @param column {HTMLElement | String | Number} DOM reference or ID string to a
 * TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.
 */

/**
 * Unselects given Column. NOTE: You cannot select/unselect nested Columns. You can only
 * select/unselect non-nested Columns, and bottom-level key Columns.
 *
 * @id YAHOO.widget.DataTable.unSelectColumn
 * @method unSelectColumn
 * @param column {HTMLElement | String | Number} DOM reference or ID string to a
 * TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.
 */

/**
 * Returns an array selected Column instances.
 *
 * @id YAHOO.widget.DataTable.getSelectedColumns
 * @method getSelectedColumns
 * @return {YAHOO.widget.Column[]} Array of Column instances.
 */

/**
 * Assigns the class DT.CLASS_HIGHLIGHTED to cells of the given Column.
 * NOTE: You cannot highlight/unhighlight nested Columns. You can only
 * highlight/unhighlight non-nested Columns, and bottom-level key Columns.
 *
 * @id YAHOO.widget.DataTable.highlightColumn
 * @method highlightColumn
 * @param column {HTMLElement | String | Number} DOM reference or ID string to a
 * TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.
 */

/**
 * Removes the class DT.CLASS_HIGHLIGHTED to cells of the given Column.
 * NOTE: You cannot highlight/unhighlight nested Columns. You can only
 * highlight/unhighlight non-nested Columns, and bottom-level key Columns.
 *
 * @id YAHOO.widget.DataTable.unhighlightColumn
 * @method unhighlightColumn
 * @param column {HTMLElement | String | Number} DOM reference or ID string to a
 * TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index.
 */

/**
 * Adds one new Record of data into the RecordSet at the index if given,
 * otherwise at the end. If the new Record is in page view, the
 * corresponding DOM elements are also updated.
 *
 * @id YAHOO.widget.DataTable.addRow
 * @method addRow
 * @param oData {Object} Object literal of data for the row.
 * @param index {Number} (optional) RecordSet position index at which to add data.
 */

/**
 * Convenience method to add multiple rows.
 *
 * @id YAHOO.widget.DataTable.addRows
 * @method addRows
 * @param aData {Object[]} Array of object literal data for the rows.
 * @param index {Number} (optional) RecordSet position index at which to add data.
 */

/**
 * For the given row, updates the associated Record with the given data. If the
 * row is on current page, the corresponding DOM elements are also updated.
 *
 * @id YAHOO.widget.DataTable.updateRow
 * @method updateRow
 * @param row {YAHOO.widget.Record | Number | HTMLElement | String}
 * Which row to update: By Record instance, by Record's RecordSet
 * position index, by HTMLElement reference to the TR element, or by ID string
 * of the TR element.
 * @param oData {Object} Object literal of data for the row.
 */

/**
 * Deletes the given row's Record from the RecordSet. If the row is on current page,
 * the corresponding DOM elements are also deleted.
 *
 * @id YAHOO.widget.DataTable.deleteRow
 * @method deleteRow
 * @param row {HTMLElement | String | Number} DOM element reference or ID string
 * to DataTable page element or RecordSet index.
 */

/**
 * Convenience method to delete multiple rows.
 *
 * @id YAHOO.widget.DataTable.deleteRows
 * @method deleteRows
 * @param row {HTMLElement | String | Number} DOM element reference or ID string
 * to DataTable page element or RecordSet index.
 * @param count {Number} (optional) How many rows to delete. A negative value
 * will delete towards the beginning.
 */

/**
 * Outputs markup into the given TD based on given Record.
 *
 * @id YAHOO.widget.DataTable.formatCell
 * @method formatCell
 * @param elCell {HTMLElement} The liner DIV element within the TD.
 * @param oRecord {YAHOO.widget.Record} (Optional) Record instance.
 * @param oColumn {YAHOO.widget.Column} (Optional) Column instance.
 */

/**
 * Delegates the Pag changeRequest events to the configured
 * handler.
 * @id YAHOO.widget.DataTable.onPaginatorChange
 * @method onPaginatorChange
 * @param {Object} an object literal describing the proposed pagination state
 */

/**
 * ID string of last highlighted cell element
 *
 * @id YAHOO.widget.DataTable._sLastHighlightedTdElId
 * @property _sLastHighlightedTdElId
 * @type String
 * @private
 */

/**
 * ID string of last highlighted row element
 *
 * @id YAHOO.widget.DataTable._sLastHighlightedTrElId
 * @property _sLastHighlightedTrElId
 * @type String
 * @private
 */

/**
 * Array to track row selections (by sRecordId) and/or cell selections
 * (by {recordId:sRecordId, columnId:sColumnId})
 *
 * @id YAHOO.widget.DataTable._aSelections
 * @property _aSelections
 * @type Object[]
 * @private
 */

/**
 * Record instance of the row selection anchor.
 *
 * @id YAHOO.widget.DataTable._oAnchorRecord
 * @property _oAnchorRecord
 * @type YAHOO.widget.Record
 * @private
 */

/**
 * Object literal representing cell selection anchor:
 * {recordId:sRecordId, columnId:sColumnId}.
 *
 * @id YAHOO.widget.DataTable._oAnchorCell
 * @property _oAnchorCell
 * @type Object
 * @private
 */

/**
 * Convenience method to remove the class DT.CLASS_SELECTED
 * from all TR elements on the page.
 *
 * @id YAHOO.widget.DataTable._unselectAllTrEls
 * @method _unselectAllTrEls
 * @private
 */

/**
 * Returns object literal of values that represent the selection trigger. Used
 * to determine selection behavior resulting from a key event.
 *
 * @id YAHOO.widget.DataTable._getSelectionTrigger
 * @method _getSelectionTrigger
 * @private
 */

/**
 * Returns object literal of values that represent the selection anchor. Used
 * to determine selection behavior resulting from a user event.
 *
 * @id YAHOO.widget.DataTable._getSelectionAnchor
 * @method _getSelectionAnchor
 * @param oTrigger {Object} (Optional) Object literal of selection trigger values
 * (for key events).
 * @private
 */

/**
 * Determines selection behavior resulting from a mouse event when selection mode
 * is set to "standard".
 *
 * @id YAHOO.widget.DataTable._handleStandardSelectionByMouse
 * @method _handleStandardSelectionByMouse
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 * @private
 */

/**
 * Determines selection behavior resulting from a key event when selection mode
 * is set to "standard".
 *
 * @id YAHOO.widget.DataTable._handleStandardSelectionByKey
 * @method _handleStandardSelectionByKey
 * @param e {HTMLEvent} Event object.
 * @private
 */

/**
 * Determines selection behavior resulting from a mouse event when selection mode
 * is set to "single".
 *
 * @id YAHOO.widget.DataTable._handleSingleSelectionByMouse
 * @method _handleSingleSelectionByMouse
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 * @private
 */

/**
 * Determines selection behavior resulting from a key event when selection mode
 * is set to "single".
 *
 * @id YAHOO.widget.DataTable._handleSingleSelectionByKey
 * @method _handleSingleSelectionByKey
 * @param e {HTMLEvent} Event object.
 * @private
 */

/**
 * Determines selection behavior resulting from a mouse event when selection mode
 * is set to "cellblock".
 *
 * @id YAHOO.widget.DataTable._handleCellBlockSelectionByMouse
 * @method _handleCellBlockSelectionByMouse
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 * @private
 */

/**
 * Determines selection behavior resulting from a key event when selection mode
 * is set to "cellblock".
 *
 * @id YAHOO.widget.DataTable._handleCellBlockSelectionByKey
 * @method _handleCellBlockSelectionByKey
 * @param e {HTMLEvent} Event object.
 * @private
 */

/**
 * Determines selection behavior resulting from a mouse event when selection mode
 * is set to "cellrange".
 *
 * @id YAHOO.widget.DataTable._handleCellRangeSelectionByMouse
 * @method _handleCellRangeSelectionByMouse
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 * @private
 */

/**
 * Determines selection behavior resulting from a key event when selection mode
 * is set to "cellrange".
 *
 * @id YAHOO.widget.DataTable._handleCellRangeSelectionByKey
 * @method _handleCellRangeSelectionByKey
 * @param e {HTMLEvent} Event object.
 * @private
 */

/**
 * Determines selection behavior resulting from a mouse event when selection mode
 * is set to "singlecell".
 *
 * @id YAHOO.widget.DataTable._handleSingleCellSelectionByMouse
 * @method _handleSingleCellSelectionByMouse
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 * @private
 */

/**
 * Determines selection behavior resulting from a key event when selection mode
 * is set to "singlecell".
 *
 * @id YAHOO.widget.DataTable._handleSingleCellSelectionByKey
 * @method _handleSingleCellSelectionByKey
 * @param e {HTMLEvent} Event object.
 * @private
 */

/**
 * Returns array of selected TR elements on the page.
 *
 * @id YAHOO.widget.DataTable.getSelectedTrEls
 * @method getSelectedTrEls
 * @return {HTMLElement[]} Array of selected TR elements.
 */

/**
 * Sets given row to the selected state.
 *
 * @id YAHOO.widget.DataTable.selectRow
 * @method selectRow
 * @param row {HTMLElement | String | YAHOO.widget.Record | Number} HTML element
 * reference or ID string, Record instance, or RecordSet position index.
 */

/**
 * Sets given row to the selected state.
 *
 * @id YAHOO.widget.DataTable.unselectRow
 * @method unselectRow
 * @param row {HTMLElement | String | YAHOO.widget.Record | Number} HTML element
 * reference or ID string, Record instance, or RecordSet position index.
 */

/**
 * Clears out all row selections.
 *
 * @id YAHOO.widget.DataTable.unselectAllRows
 * @method unselectAllRows
 */

/**
 * Convenience method to remove the class DT.CLASS_SELECTED
 * from all TD elements in the internal tracker.
 *
 * @id YAHOO.widget.DataTable._unselectAllTdEls
 * @method _unselectAllTdEls
 * @private
 */

/**
 * Returns array of selected TD elements on the page.
 *
 * @id YAHOO.widget.DataTable.getSelectedTdEls
 * @method getSelectedTdEls
 * @return {HTMLElement[]} Array of selected TD elements.
 */

/**
 * Sets given cell to the selected state.
 *
 * @id YAHOO.widget.DataTable.selectCell
 * @method selectCell
 * @param cell {HTMLElement | String} DOM element reference or ID string
 * to DataTable page element or RecordSet index.
 */

/**
 * Sets given cell to the unselected state.
 *
 * @id YAHOO.widget.DataTable.unselectCell
 * @method unselectCell
 * @param cell {HTMLElement | String} DOM element reference or ID string
 * to DataTable page element or RecordSet index.
 */

/**
 * Clears out all cell selections.
 *
 * @id YAHOO.widget.DataTable.unselectAllCells
 * @method unselectAllCells
 */

/**
 * Returns true if given item is selected, false otherwise.
 *
 * @id YAHOO.widget.DataTable.isSelected
 * @method isSelected
 * @param o {String | HTMLElement | YAHOO.widget.Record | Number
 * {record:YAHOO.widget.Record, column:YAHOO.widget.Column} } TR or TD element by
 * reference or ID string, a Record instance, a RecordSet position index,
 * or an object literal representation
 * of a cell.
 * @return {Boolean} True if item is selected.
 */

/**
 * Returns selected rows as an array of Record IDs.
 *
 * @id YAHOO.widget.DataTable.getSelectedRows
 * @method getSelectedRows
 * @return {String[]} Array of selected rows by Record ID.
 */

/**
 * Returns selected cells as an array of object literals:
 *     {recordId:sRecordId, columnId:sColumnId}.
 *
 * @id YAHOO.widget.DataTable.getSelectedCells
 * @method getSelectedCells
 * @return {Object[]} Array of selected cells by Record ID and Column ID.
 */

/**
 * Returns last selected Record ID.
 *
 * @id YAHOO.widget.DataTable.getLastSelectedRecord
 * @method getLastSelectedRecord
 * @return {String} Record ID of last selected row.
 */

/**
 * Returns last selected cell as an object literal:
 *     {recordId:sRecordId, columnId:sColumnId}.
 *
 * @id YAHOO.widget.DataTable.getLastSelectedCell
 * @method getLastSelectedCell
 * @return {Object} Object literal representation of a cell.
 */

/**
 * Assigns the class DT.CLASS_HIGHLIGHTED to the given row.
 *
 * @id YAHOO.widget.DataTable.highlightRow
 * @method highlightRow
 * @param row {HTMLElement | String} DOM element reference or ID string.
 */

/**
 * Removes the class DT.CLASS_HIGHLIGHTED from the given row.
 *
 * @id YAHOO.widget.DataTable.unhighlightRow
 * @method unhighlightRow
 * @param row {HTMLElement | String} DOM element reference or ID string.
 */

/**
 * Assigns the class DT.CLASS_HIGHLIGHTED to the given cell.
 *
 * @id YAHOO.widget.DataTable.highlightCell
 * @method highlightCell
 * @param cell {HTMLElement | String} DOM element reference or ID string.
 */

/**
 * Removes the class DT.CLASS_HIGHLIGHTED from the given cell.
 *
 * @id YAHOO.widget.DataTable.unhighlightCell
 * @method unhighlightCell
 * @param cell {HTMLElement | String} DOM element reference or ID string.
 */

/**
 * Shows Cell Editor for given cell.
 *
 * @id YAHOO.widget.DataTable.showCellEditor
 * @method showCellEditor
 * @param elCell {HTMLElement | String} Cell to edit.
 * @param oRecord {YAHOO.widget.Record} (Optional) Record instance.
 * @param oColumn {YAHOO.widget.Column} (Optional) Column instance.
 */

/**
 * Overridable abstract method to customize Cell Editor UI.
 *
 * @id YAHOO.widget.DataTable.doBeforeShowCellEditor
 * @method doBeforeShowCellEditor
 * @param oCellEditor {Object} Cell Editor object literal.
 */

/**
 * Adds Save/Cancel buttons to Cell Editor.
 *
 * @id YAHOO.widget.DataTable.showCellEditorBtns
 * @method showCellEditorBtns
 * @param elContainer {HTMLElement} Cell Editor container.
 */

/**
 * Clears Cell Editor of all state and UI.
 *
 * @id YAHOO.widget.DataTable.resetCellEditor
 * @method resetCellEditor
 */

/**
 * Saves Cell Editor input to Record.
 *
 * @id YAHOO.widget.DataTable.saveCellEditor
 * @method saveCellEditor
 */

/**
 * Cancels Cell Editor.
 *
 * @id YAHOO.widget.DataTable.cancelCellEditor
 * @method cancelCellEditor
 */

/**
 * Overridable method gives implementers a hook to access data before
 * it gets added to RecordSet and rendered to the TBODY.
 *
 * @id YAHOO.widget.DataTable.doBeforeLoadData
 * @method doBeforeLoadData
 * @param sRequest {String} Original request.
 * @param oResponse {Object} Response object.
 * @param oPayload {MIXED} additional arguments
 * @return {Boolean} Return true to continue loading data into RecordSet and
 * updating DataTable with new Records, false to cancel.
 */

/**
 * Overridable custom event handler to sort Column.
 *
 * @id YAHOO.widget.DataTable.onEventSortColumn
 * @method onEventSortColumn
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to select Column.
 *
 * @id YAHOO.widget.DataTable.onEventSelectColumn
 * @method onEventSelectColumn
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to highlight Column. Accounts for spurious
 * caused-by-child events.
 *
 * @id YAHOO.widget.DataTable.onEventHighlightColumn
 * @method onEventHighlightColumn
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to unhighlight Column. Accounts for spurious
 * caused-by-child events.
 *
 * @id YAHOO.widget.DataTable.onEventUnhighlightColumn
 * @method onEventUnhighlightColumn
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to manage selection according to desktop paradigm.
 *
 * @id YAHOO.widget.DataTable.onEventSelectRow
 * @method onEventSelectRow
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to select cell.
 *
 * @id YAHOO.widget.DataTable.onEventSelectCell
 * @method onEventSelectCell
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to highlight row. Accounts for spurious
 * caused-by-child events.
 *
 * @id YAHOO.widget.DataTable.onEventHighlightRow
 * @method onEventHighlightRow
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to unhighlight row. Accounts for spurious
 * caused-by-child events.
 *
 * @id YAHOO.widget.DataTable.onEventUnhighlightRow
 * @method onEventUnhighlightRow
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to highlight cell. Accounts for spurious
 * caused-by-child events.
 *
 * @id YAHOO.widget.DataTable.onEventHighlightCell
 * @method onEventHighlightCell
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to unhighlight cell. Accounts for spurious
 * caused-by-child events.
 *
 * @id YAHOO.widget.DataTable.onEventUnhighlightCell
 * @method onEventUnhighlightCell
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to format cell.
 *
 * @id YAHOO.widget.DataTable.onEventFormatCell
 * @method onEventFormatCell
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to edit cell.
 *
 * @id YAHOO.widget.DataTable.onEventShowCellEditor
 * @method onEventShowCellEditor
 * @param oArgs.event {HTMLEvent} Event object.
 * @param oArgs.target {HTMLElement} Target element.
 */

/**
 * Overridable custom event handler to save Cell Editor input.
 *
 * @id YAHOO.widget.DataTable.onEventSaveCellEditor
 * @method onEventSaveCellEditor
 * @param oArgs.editor {Object} Cell Editor object literal.
 */

/**
 * Overridable custom event handler to cancel Cell Editor.
 *
 * @id YAHOO.widget.DataTable.onEventCancelCellEditor
 * @method onEventCancelCellEditor
 * @param oArgs.editor {Object} Cell Editor object literal.
 */

/**
 * Callback function receives data from DataSource and populates an entire
 * DataTable with Records and TR elements, clearing previous Records, if any.
 *
 * @id YAHOO.widget.DataTable.onDataReturnInitializeTable
 * @method onDataReturnInitializeTable
 * @param sRequest {String} Original request.
 * @param oResponse {Object} Response object.
 * @param oPayload {MIXED} (optional) Additional argument(s)
 */

/**
 * Callback function receives data from DataSource and appends to an existing
 * DataTable new Records and, if applicable, creates or updates
 * corresponding TR elements.
 *
 * @id YAHOO.widget.DataTable.onDataReturnAppendRows
 * @method onDataReturnAppendRows
 * @param sRequest {String} Original request.
 * @param oResponse {Object} Response object.
 * @param oPayload {MIXED} (optional) Additional argument(s)
 */

/**
 * Callback function receives data from DataSource and inserts new records
 * starting at the index specified in oPayload.insertIndex.  If applicable,
 * creates or updates corresponding TR elements.
 *
 * @id YAHOO.widget.DataTable.onDataReturnInsertRows
 * @method onDataReturnInsertRows
 * @param sRequest {String} Original request.
 * @param oResponse {Object} Response object.
 * @param oPayload {MIXED} (optional) Additional argument(s)
 */

/**
 * Receives reponse from DataSource and populates the RecordSet with the
 * results.
 * @id YAHOO.widget.DataTable.onDataReturnSetRecords
 * @method onDataReturnSetRecords
 * @param oRequest {MIXED} Original generated request.
 * @param oResponse {Object} Response object.
 * @param oPayload {MIXED} (optional) Additional argument(s)
 */

/**
 * Updates the DataTable with data sent in an onDataReturn* payload
 * @id YAHOO.widget.DataTable._handleDataReturnPayload
 * @method _handleDataReturnPayload
 * @param oRequest {MIXED} Original generated request.
 * @param oResponse {Object} Response object.
 * @param oPayload {MIXED} Additional argument(s)
 * @private
 */

/**
 * Fired when the DataTable instance's initialization is complete.
 *
 * @id YAHOO.widget.DataTable.initEvent
 * @event initEvent
 */

/**
 * Fired when the DataTable's view is rendered.
 *
 * @id YAHOO.widget.DataTable.renderEvent
 * @event renderEvent
 */

/**
 * Fired when data is returned from DataSource but before it is consumed by
 * DataTable.
 *
 * @id YAHOO.widget.DataTable.dataReturnEvent
 * @event dataReturnEvent
 * @param oArgs.request {String} Original request.
 * @param oArgs.response {Object} Response object.
 */

/**
 * Fired when the DataTable has a focus event.
 *
 * @id YAHOO.widget.DataTable.tableFocusEvent
 * @event tableFocusEvent
 */

/**
 * Fired when the DataTable THEAD element has a focus event.
 *
 * @id YAHOO.widget.DataTable.theadFocusEvent
 * @event theadFocusEvent
 */

/**
 * Fired when the DataTable TBODY element has a focus event.
 *
 * @id YAHOO.widget.DataTable.tbodyFocusEvent
 * @event tbodyFocusEvent
 */

/**
 * Fired when the DataTable has a blur event.
 *
 * @id YAHOO.widget.DataTable.tableBlurEvent
 * @event tableBlurEvent
 */

/**
 * Fired when the DataTable has a key event.
 *
 * @id YAHOO.widget.DataTable.tableKeyEvent
 * @event tableKeyEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 */

/**
 * Fired when the DataTable THEAD element has a key event.
 *
 * @id YAHOO.widget.DataTable.theadKeyEvent
 * @event theadKeyEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 */

/**
 * Fired when the DataTable TBODY element has a key event.
 *
 * @id YAHOO.widget.DataTable.tbodyKeyEvent
 * @event tbodyKeyEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 */

/**
 * Fired when the DataTable has a mouseover.
 *
 * @id YAHOO.widget.DataTable.tableMouseoverEvent
 * @event tableMouseoverEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 *
 */

/**
 * Fired when the DataTable has a mouseout.
 *
 * @id YAHOO.widget.DataTable.tableMouseoutEvent
 * @event tableMouseoutEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 *
 */

/**
 * Fired when the DataTable has a mousedown.
 *
 * @id YAHOO.widget.DataTable.tableMousedownEvent
 * @event tableMousedownEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 *
 */

/**
 * Fired when the DataTable has a click.
 *
 * @id YAHOO.widget.DataTable.tableClickEvent
 * @event tableClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 *
 */

/**
 * Fired when the DataTable has a dblclick.
 *
 * @id YAHOO.widget.DataTable.tableDblclickEvent
 * @event tableDblclickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's TABLE element.
 *
 */

/**
 * Fired when a fixed scrolling DataTable has a scroll.
 *
 * @id YAHOO.widget.DataTable.tableScrollEvent
 * @event tableScrollEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The DataTable's CONTAINER element (in IE)
 * or the DataTable's TBODY element (everyone else).
 *
 */

/**
 * Fired when a message is shown in the DataTable's message element.
 *
 * @id YAHOO.widget.DataTable.tableMsgShowEvent
 * @event tableMsgShowEvent
 * @param oArgs.html {String} The HTML displayed.
 * @param oArgs.className {String} The className assigned.
 *
 */

/**
 * Fired when the DataTable's message element is hidden.
 *
 * @id YAHOO.widget.DataTable.tableMsgHideEvent
 * @event tableMsgHideEvent
 */

/**
 * Fired when a THEAD row has a mouseover.
 *
 * @id YAHOO.widget.DataTable.theadRowMouseoverEvent
 * @event theadRowMouseoverEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a THEAD row has a mouseout.
 *
 * @id YAHOO.widget.DataTable.theadRowMouseoutEvent
 * @event theadRowMouseoutEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a THEAD row has a mousedown.
 *
 * @id YAHOO.widget.DataTable.theadRowMousedownEvent
 * @event theadRowMousedownEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a THEAD row has a click.
 *
 * @id YAHOO.widget.DataTable.theadRowClickEvent
 * @event theadRowClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a THEAD row has a dblclick.
 *
 * @id YAHOO.widget.DataTable.theadRowDblclickEvent
 * @event theadRowDblclickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a THEAD cell has a mouseover.
 *
 * @id YAHOO.widget.DataTable.theadCellMouseoverEvent
 * @event theadCellMouseoverEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TH element.
 *
 */

/**
 * Fired when a THEAD cell has a mouseout.
 *
 * @id YAHOO.widget.DataTable.theadCellMouseoutEvent
 * @event theadCellMouseoutEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TH element.
 *
 */

/**
 * Fired when a THEAD cell has a mousedown.
 *
 * @id YAHOO.widget.DataTable.theadCellMousedownEvent
 * @event theadCellMousedownEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TH element.
 */

/**
 * Fired when a THEAD cell has a click.
 *
 * @id YAHOO.widget.DataTable.theadCellClickEvent
 * @event theadCellClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TH element.
 */

/**
 * Fired when a THEAD cell has a dblclick.
 *
 * @id YAHOO.widget.DataTable.theadCellDblclickEvent
 * @event theadCellDblclickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TH element.
 */

/**
 * Fired when a THEAD label has a mouseover.
 *
 * @id YAHOO.widget.DataTable.theadLabelMouseoverEvent
 * @event theadLabelMouseoverEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The SPAN element.
 *
 */

/**
 * Fired when a THEAD label has a mouseout.
 *
 * @id YAHOO.widget.DataTable.theadLabelMouseoutEvent
 * @event theadLabelMouseoutEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The SPAN element.
 *
 */

/**
 * Fired when a THEAD label has a mousedown.
 *
 * @id YAHOO.widget.DataTable.theadLabelMousedownEvent
 * @event theadLabelMousedownEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The SPAN element.
 */

/**
 * Fired when a THEAD label has a click.
 *
 * @id YAHOO.widget.DataTable.theadLabelClickEvent
 * @event theadLabelClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The SPAN element.
 */

/**
 * Fired when a THEAD label has a dblclick.
 *
 * @id YAHOO.widget.DataTable.theadLabelDblclickEvent
 * @event theadLabelDblclickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The SPAN element.
 */

/**
 * Fired when a column is sorted.
 *
 * @id YAHOO.widget.DataTable.columnSortEvent
 * @event columnSortEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 * @param oArgs.dir {String} Sort direction: YAHOO.widget.DataTable.CLASS_ASC
 * or YAHOO.widget.DataTable.CLASS_DESC.
 */

/**
 * Fired when a column width is set.
 *
 * @id YAHOO.widget.DataTable.columnSetWidthEvent
 * @event columnSetWidthEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 * @param oArgs.width {Number} The width in pixels.
 */

/**
 * Fired when a column is drag-resized.
 *
 * @id YAHOO.widget.DataTable.columnResizeEvent
 * @event columnResizeEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 * @param oArgs.target {HTMLElement} The TH element.
 */

/**
 * Fired when a column is hidden.
 *
 * @id YAHOO.widget.DataTable.columnHideEvent
 * @event columnHideEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 */

/**
 * Fired when a column is shown.
 *
 * @id YAHOO.widget.DataTable.columnShowEvent
 * @event columnShowEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 */

/**
 * Fired when a column is selected.
 *
 * @id YAHOO.widget.DataTable.columnSelectEvent
 * @event columnSelectEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 */

/**
 * Fired when a column is unselected.
 *
 * @id YAHOO.widget.DataTable.columnUnselectEvent
 * @event columnUnselectEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 */

/**
 * Fired when a column is removed.
 *
 * @id YAHOO.widget.DataTable.columnRemoveEvent
 * @event columnRemoveEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 */

/**
 * Fired when a column is inserted.
 *
 * @id YAHOO.widget.DataTable.columnInsertEvent
 * @event columnInsertEvent
 * @param oArgs.column {YAHOO.widget.Column} The Column instance.
 * @param oArgs.index {Number} The index position.
 */

/**
 * Fired when a column is highlighted.
 *
 * @id YAHOO.widget.DataTable.columnHighlightEvent
 * @event columnHighlightEvent
 * @param oArgs.column {YAHOO.widget.Column} The highlighted Column.
 */

/**
 * Fired when a column is unhighlighted.
 *
 * @id YAHOO.widget.DataTable.columnUnhighlightEvent
 * @event columnUnhighlightEvent
 * @param oArgs.column {YAHOO.widget.Column} The unhighlighted Column.
 */

/**
 * Fired when a row has a mouseover.
 *
 * @id YAHOO.widget.DataTable.rowMouseoverEvent
 * @event rowMouseoverEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a row has a mouseout.
 *
 * @id YAHOO.widget.DataTable.rowMouseoutEvent
 * @event rowMouseoutEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a row has a mousedown.
 *
 * @id YAHOO.widget.DataTable.rowMousedownEvent
 * @event rowMousedownEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a row has a click.
 *
 * @id YAHOO.widget.DataTable.rowClickEvent
 * @event rowClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a row has a dblclick.
 *
 * @id YAHOO.widget.DataTable.rowDblclickEvent
 * @event rowDblclickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TR element.
 */

/**
 * Fired when a row is added.
 *
 * @id YAHOO.widget.DataTable.rowAddEvent
 * @event rowAddEvent
 * @param oArgs.record {YAHOO.widget.Record} The added Record.
 */

/**
 * Fired when a row is updated.
 *
 * @id YAHOO.widget.DataTable.rowUpdateEvent
 * @event rowUpdateEvent
 * @param oArgs.record {YAHOO.widget.Record} The updated Record.
 * @param oArgs.oldData {Object} Object literal of the old data.
 */

/**
 * Fired when a row is deleted.
 *
 * @id YAHOO.widget.DataTable.rowDeleteEvent
 * @event rowDeleteEvent
 * @param oArgs.oldData {Object} Object literal of the deleted data.
 * @param oArgs.recordIndex {Number} Index of the deleted Record.
 * @param oArgs.trElIndex {Number} Index of the deleted TR element, if on current page.
 */

/**
 * Fired when a row is selected.
 *
 * @id YAHOO.widget.DataTable.rowSelectEvent
 * @event rowSelectEvent
 * @param oArgs.el {HTMLElement} The selected TR element, if applicable.
 * @param oArgs.record {YAHOO.widget.Record} The selected Record.
 */

/**
 * Fired when a row is unselected.
 *
 * @id YAHOO.widget.DataTable.rowUnselectEvent
 * @event rowUnselectEvent
 * @param oArgs.el {HTMLElement} The unselected TR element, if applicable.
 * @param oArgs.record {YAHOO.widget.Record} The unselected Record.
 */

/**
 * Fired when all row selections are cleared.
 *
 * @id YAHOO.widget.DataTable.unselectAllRowsEvent
 * @event unselectAllRowsEvent
 */

/**
 * Fired when a row is highlighted.
 *
 * @id YAHOO.widget.DataTable.rowHighlightEvent
 * @event rowHighlightEvent
 * @param oArgs.el {HTMLElement} The highlighted TR element.
 * @param oArgs.record {YAHOO.widget.Record} The highlighted Record.
 */

/**
 * Fired when a row is unhighlighted.
 *
 * @id YAHOO.widget.DataTable.rowUnhighlightEvent
 * @event rowUnhighlightEvent
 * @param oArgs.el {HTMLElement} The highlighted TR element.
 * @param oArgs.record {YAHOO.widget.Record} The highlighted Record.
 */

/**
 * Fired when a cell has a mouseover.
 *
 * @id YAHOO.widget.DataTable.cellMouseoverEvent
 * @event cellMouseoverEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TD element.
 */

/**
 * Fired when a cell has a mouseout.
 *
 * @id YAHOO.widget.DataTable.cellMouseoutEvent
 * @event cellMouseoutEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TD element.
 */

/**
 * Fired when a cell has a mousedown.
 *
 * @id YAHOO.widget.DataTable.cellMousedownEvent
 * @event cellMousedownEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TD element.
 */

/**
 * Fired when a cell has a click.
 *
 * @id YAHOO.widget.DataTable.cellClickEvent
 * @event cellClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TD element.
 */

/**
 * Fired when a cell has a dblclick.
 *
 * @id YAHOO.widget.DataTable.cellDblclickEvent
 * @event cellDblclickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The TD element.
 */

/**
 * Fired when a cell is formatted.
 *
 * @id YAHOO.widget.DataTable.cellFormatEvent
 * @event cellFormatEvent
 * @param oArgs.el {HTMLElement} The formatted TD element.
 * @param oArgs.record {YAHOO.widget.Record} The associated Record instance.
 * @param oArgs.column {YAHOO.widget.Column} The associated Column instance.
 * @param oArgs.key {String} (deprecated) The key of the formatted cell.
 */

/**
 * Fired when a cell is selected.
 *
 * @id YAHOO.widget.DataTable.cellSelectEvent
 * @event cellSelectEvent
 * @param oArgs.el {HTMLElement} The selected TD element.
 * @param oArgs.record {YAHOO.widget.Record} The associated Record instance.
 * @param oArgs.column {YAHOO.widget.Column} The associated Column instance.
 * @param oArgs.key {String} (deprecated) The key of the selected cell.
 */

/**
 * Fired when a cell is unselected.
 *
 * @id YAHOO.widget.DataTable.cellUnselectEvent
 * @event cellUnselectEvent
 * @param oArgs.el {HTMLElement} The unselected TD element.
 * @param oArgs.record {YAHOO.widget.Record} The associated Record.
 * @param oArgs.column {YAHOO.widget.Column} The associated Column instance.
 * @param oArgs.key {String} (deprecated) The key of the unselected cell.

 */

/**
 * Fired when a cell is highlighted.
 *
 * @id YAHOO.widget.DataTable.cellHighlightEvent
 * @event cellHighlightEvent
 * @param oArgs.el {HTMLElement} The highlighted TD element.
 * @param oArgs.record {YAHOO.widget.Record} The associated Record instance.
 * @param oArgs.column {YAHOO.widget.Column} The associated Column instance.
 * @param oArgs.key {String} (deprecated) The key of the highlighted cell.

 */

/**
 * Fired when a cell is unhighlighted.
 *
 * @id YAHOO.widget.DataTable.cellUnhighlightEvent
 * @event cellUnhighlightEvent
 * @param oArgs.el {HTMLElement} The unhighlighted TD element.
 * @param oArgs.record {YAHOO.widget.Record} The associated Record instance.
 * @param oArgs.column {YAHOO.widget.Column} The associated Column instance.
 * @param oArgs.key {String} (deprecated) The key of the unhighlighted cell.

 */

/**
 * Fired when all cell selections are cleared.
 *
 * @id YAHOO.widget.DataTable.unselectAllCellsEvent
 * @event unselectAllCellsEvent
 */

/**
 * Fired when an Editor is activated.
 *
 * @id YAHOO.widget.DataTable.editorShowEvent
 * @event editorShowEvent
 * @param oArgs.editor {Object} The Editor object literal.
 */

/**
 * Fired when an active Editor has a keydown.
 *
 * @id YAHOO.widget.DataTable.editorKeydownEvent
 * @event editorKeydownEvent
 * @param oArgs.editor {Object} The Editor object literal.
 * @param oArgs.event {HTMLEvent} The event object.
 */

/**
 * Fired when Editor input is reverted.
 *
 * @id YAHOO.widget.DataTable.editorRevertEvent
 * @event editorRevertEvent
 * @param oArgs.editor {Object} The Editor object literal.
 * @param oArgs.newData {Object} New data value from form input field.
 * @param oArgs.oldData {Object} Old data value.
 */

/**
 * Fired when Editor input is saved.
 *
 * @id YAHOO.widget.DataTable.editorSaveEvent
 * @event editorSaveEvent
 * @param oArgs.editor {Object} The Editor object literal.
 * @param oArgs.newData {Object} New data value from form input field.
 * @param oArgs.oldData {Object} Old data value.
 */

/**
 * Fired when Editor input is canceled.
 *
 * @id YAHOO.widget.DataTable.editorCancelEvent
 * @event editorCancelEvent
 * @param oArgs.editor {Object} The Editor object literal.
 */

/**
 * Fired when an active Editor has a blur.
 *
 * @id YAHOO.widget.DataTable.editorBlurEvent
 * @event editorBlurEvent
 * @param oArgs.editor {Object} The Editor object literal.
 */

/**
 * Fired when a link is clicked.
 *
 * @id YAHOO.widget.DataTable.linkClickEvent
 * @event linkClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The A element.
 */

/**
 * Fired when a BUTTON element is clicked.
 *
 * @id YAHOO.widget.DataTable.buttonClickEvent
 * @event buttonClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The BUTTON element.
 */

/**
 * Fired when a CHECKBOX element is clicked.
 *
 * @id YAHOO.widget.DataTable.checkboxClickEvent
 * @event checkboxClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The CHECKBOX element.
 */

/**
 * Fired when a RADIO element is clicked.
 *
 * @id YAHOO.widget.DataTable.radioClickEvent
 * @event radioClickEvent
 * @param oArgs.event {HTMLEvent} The event object.
 * @param oArgs.target {HTMLElement} The RADIO element.
 */

/**
 * @id YAHOO.widget.DataTable.getBody
 * @method getBody
 * @deprecated Use getTbodyEl().
 */

/**
 * @id YAHOO.widget.DataTable.getCell
 * @method getCell
 * @deprecated Use getTdEl().
 */

/**
 * @id YAHOO.widget.DataTable.getRow
 * @method getRow
 * @deprecated Use getTrEl().
 */

/**
 * @id YAHOO.widget.DataTable.refreshView
 * @method refreshView
 * @deprecated Use render.
 */

/**
 * @id YAHOO.widget.DataTable.select
 * @method select
 * @deprecated Use selectRow.
 */

/**
 * @id YAHOO.widget.DataTable.updatePaginator
 * @method updatePaginator
 * @deprecated Use Paginator class APIs.
 */

/**
 * @id YAHOO.widget.DataTable.showPage
 * @method showPage
 * @deprecated Use Paginator class APIs.
 */

/**
 * @id YAHOO.widget.DataTable.formatPaginators
 * @method formatPaginators
 * @deprecated Use Paginator class APIs.
 */

/**
 * @id YAHOO.widget.DataTable.formatPaginatorDropdown
 * @method formatPaginatorDropdown
 * @deprecated Use Paginator class APIs.
 */

/**
 * @id YAHOO.widget.DataTable.formatPaginatorLinks
 * @method formatPaginatorLinks
 * @deprecated Use Paginator class APIs.
 */

/**
 * @id YAHOO.widget.DataTable._onPaginatorLinkClick
 * @method _onPaginatorLinkClick
 * @private
 * @deprecated Use Paginator class APIs.
 */

/**
 * @id YAHOO.widget.DataTable._onPaginatorDropdownChange
 * @method _onPaginatorDropdownChange
 * @private
 * @deprecated Use Paginator class APIs.
 */

/**
 * @id YAHOO.widget.DataTable.onEventEditCell
 * @method onEventEditCell
 * @deprecated Use onEventShowCellEditor.
 */

/**
 * @id YAHOO.widget.DataTable.onDataReturnReplaceRows
 * @method onDataReturnReplaceRows
 * @deprecated Use onDataReturnInitializeTable.
 */

/**
 * @id YAHOO.widget.DataTable.headerRowMouseoverEvent
 * @event headerRowMouseoverEvent
 * @deprecated Use theadRowMouseoverEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerRowMouseoutEvent
 * @event headerRowMouseoutEvent
 * @deprecated Use theadRowMouseoutEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerRowMousedownEvent
 * @event headerRowMousedownEvent
 * @deprecated Use theadRowMousedownEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerRowClickEvent
 * @event headerRowClickEvent
 * @deprecated Use theadRowClickEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerRowDblclickEvent
 * @event headerRowDblclickEvent
 * @deprecated Use theadRowDblclickEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerCellMouseoverEvent
 * @event headerCellMouseoverEvent
 * @deprecated Use theadCellMouseoverEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerCellMouseoutEvent
 * @event headerCellMouseoutEvent
 * @deprecated Use theadCellMouseoutEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerCellMousedownEvent
 * @event headerCellMousedownEvent
 * @deprecated Use theadCellMousedownEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerCellClickEvent
 * @event headerCellClickEvent
 * @deprecated Use theadCellClickEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerCellDblclickEvent
 * @event headerCellDblclickEvent
 * @deprecated Use theadCellDblclickEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerLabelMouseoverEvent
 * @event headerLabelMouseoverEvent
 * @deprecated Use theadLabelMouseoverEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerLabelMouseoutEvent
 * @event headerLabelMouseoutEvent
 * @deprecated Use theadLabelMouseoutEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerLabelMousedownEvent
 * @event headerLabelMousedownEvent
 * @deprecated Use theadLabelMousedownEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerLabelClickEvent
 * @event headerLabelClickEvent
 * @deprecated Use theadLabelClickEvent.
 */

/**
 * @id YAHOO.widget.DataTable.headerLabelDbllickEvent
 * @event headerLabelDbllickEvent
 * @deprecated Use theadLabelDblclickEvent.
 */

/**
 * Provides helper methods for DOM elements.
 * @id YAHOO.util.Dom
 * @namespace YAHOO.util
 * @class Dom
 */

/**
 * Returns an HTMLElement reference.
 * @id YAHOO.util.Dom.get
 * @method get
 * @param {String | HTMLElement |Array} el Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and/or HTMLElements.
 * @return {HTMLElement | Array} A DOM reference to an HTML element or an array of HTMLElements.
 */

/**
 * Normalizes currentStyle and ComputedStyle.
 * @id YAHOO.util.Dom.getStyle
 * @method getStyle
 * @param {String | HTMLElement |Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.
 * @param {String} property The style property whose value is returned.
 * @return {String | Array} The current value of the style property for the element(s).
 */

/**
 * Wrapper for setting style properties of HTMLElements.  Normalizes "opacity" across modern browsers.
 * @id YAHOO.util.Dom.setStyle
 * @method setStyle
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.
 * @param {String} property The style property to be set.
 * @param {String} val The value to apply to the given property.
 */

/**
 * Gets the current position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
 * @id YAHOO.util.Dom.getXY
 * @method getXY
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements
 * @return {Array} The XY position of the element(s)
 */

/**
 * Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
 * @id YAHOO.util.Dom.getX
 * @method getX
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements
 * @return {Number | Array} The X position of the element(s)
 */

/**
 * Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
 * @id YAHOO.util.Dom.getY
 * @method getY
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements
 * @return {Number | Array} The Y position of the element(s)
 */

/**
 * Set the position of an html element in page coordinates, regardless of how the element is positioned.
 * The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
 * @id YAHOO.util.Dom.setXY
 * @method setXY
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements
 * @param {Array} pos Contains X & Y values for new position (coordinates are page-based)
 * @param {Boolean} noRetry By default we try and set the position a second time if the first fails
 */

/**
 * Set the X position of an html element in page coordinates, regardless of how the element is positioned.
 * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
 * @id YAHOO.util.Dom.setX
 * @method setX
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.
 * @param {Int} x The value to use as the X coordinate for the element(s).
 */

/**
 * Set the Y position of an html element in page coordinates, regardless of how the element is positioned.
 * The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).
 * @id YAHOO.util.Dom.setY
 * @method setY
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.
 * @param {Int} x To use as the Y coordinate for the element(s).
 */

/**
 * Returns the region position of the given element.
 * The element must be part of the DOM tree to have a region (display:none or elements not appended return false).
 * @id YAHOO.util.Dom.getRegion
 * @method getRegion
 * @param {String | HTMLElement | Array} el Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements.
 * @return {Region | Array} A Region or array of Region instances containing "top, left, bottom, right" member data.
 */

/**
 * Returns the width of the client (viewport).
 * @id YAHOO.util.Dom.getClientWidth
 * @method getClientWidth
 * @deprecated Now using getViewportWidth.  This interface left intact for back compat.
 * @return {Int} The width of the viewable area of the page.
 */

/**
 * Returns the height of the client (viewport).
 * @id YAHOO.util.Dom.getClientHeight
 * @method getClientHeight
 * @deprecated Now using getViewportHeight.  This interface left intact for back compat.
 * @return {Int} The height of the viewable area of the page.
 */

/**
 * Returns a array of HTMLElements with the given class.
 * For optimized performance, include a tag and/or root node when possible.
 * @id YAHOO.util.Dom.getElementsByClassName
 * @method getElementsByClassName
 * @param {String} className The class name to match against
 * @param {String} tag (optional) The tag name of the elements being collected
 * @param {String | HTMLElement} root (optional) The HTMLElement or an ID to use as the starting point
 * @param {Function} apply (optional) A function to apply to each element when found
 * @return {Array} An array of elements that have the given class name
 */

/**
 * Determines whether an HTMLElement has the given className.
 * @id YAHOO.util.Dom.hasClass
 * @method hasClass
 * @param {String | HTMLElement | Array} el The element or collection to test
 * @param {String} className the class name to search for
 * @return {Boolean | Array} A boolean value or array of boolean values
 */

/**
 * Adds a class name to a given element or collection of elements.
 * @id YAHOO.util.Dom.addClass
 * @method addClass
 * @param {String | HTMLElement | Array} el The element or collection to add the class to
 * @param {String} className the class name to add to the class attribute
 * @return {Boolean | Array} A pass/fail boolean or array of booleans
 */

/**
 * Removes a class name from a given element or collection of elements.
 * @id YAHOO.util.Dom.removeClass
 * @method removeClass
 * @param {String | HTMLElement | Array} el The element or collection to remove the class from
 * @param {String} className the class name to remove from the class attribute
 * @return {Boolean | Array} A pass/fail boolean or array of booleans
 */

/**
 * Replace a class with another class for a given element or collection of elements.
 * If no oldClassName is present, the newClassName is simply added.
 * @id YAHOO.util.Dom.replaceClass
 * @method replaceClass
 * @param {String | HTMLElement | Array} el The element or collection to remove the class from
 * @param {String} oldClassName the class name to be replaced
 * @param {String} newClassName the class name that will be replacing the old class name
 * @return {Boolean | Array} A pass/fail boolean or array of booleans
 */

/**
 * Returns an ID and applies it to the element "el", if provided.
 * @id YAHOO.util.Dom.generateId
 * @method generateId
 * @param {String | HTMLElement | Array} el (optional) An optional element array of elements to add an ID to (no ID is added if one is already present).
 * @param {String} prefix (optional) an optional prefix to use (defaults to "yui-gen").
 * @return {String | Array} The generated ID, or array of generated IDs (or original ID if already present on an element)
 */

/**
 * Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.
 * @id YAHOO.util.Dom.isAncestor
 * @method isAncestor
 * @param {String | HTMLElement} haystack The possible ancestor
 * @param {String | HTMLElement} needle The possible descendent
 * @return {Boolean} Whether or not the haystack is an ancestor of needle
 */

/**
 * Determines whether an HTMLElement is present in the current document.
 * @id YAHOO.util.Dom.inDocument
 * @method inDocument
 * @param {String | HTMLElement} el The element to search for
 * @return {Boolean} Whether or not the element is present in the current document
 */

/**
 * Returns a array of HTMLElements that pass the test applied by supplied boolean method.
 * For optimized performance, include a tag and/or root node when possible.
 * @id YAHOO.util.Dom.getElementsBy
 * @method getElementsBy
 * @param {Function} method - A boolean method for testing elements which receives the element as its only argument.
 * @param {String} tag (optional) The tag name of the elements being collected
 * @param {String | HTMLElement} root (optional) The HTMLElement or an ID to use as the starting point
 * @param {Function} apply (optional) A function to apply to each element when found
 * @return {Array} Array of HTMLElements
 */

/**
 * Runs the supplied method against each item in the Collection/Array.
 * The method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).
 * @id YAHOO.util.Dom.batch
 * @method batch
 * @param {String | HTMLElement | Array} el (optional) An element or array of elements to apply the method to
 * @param {Function} method The method to apply to the element(s)
 * @param {Any} o (optional) An optional arg that is passed to the supplied method
 * @param {Boolean} override (optional) Whether or not to override the scope of "method" with "o"
 * @return {Any | Array} The return value(s) from the supplied method
 */

/**
 * Returns the height of the document.
 * @id YAHOO.util.Dom.getDocumentHeight
 * @method getDocumentHeight
 * @return {Int} The height of the actual document (which includes the body and its margin).
 */

/**
 * Returns the width of the document.
 * @id YAHOO.util.Dom.getDocumentWidth
 * @method getDocumentWidth
 * @return {Int} The width of the actual document (which includes the body and its margin).
 */

/**
 * Returns the current height of the viewport.
 * @id YAHOO.util.Dom.getViewportHeight
 * @method getViewportHeight
 * @return {Int} The height of the viewable area of the page (excludes scrollbars).
 */

/**
 * Returns the current width of the viewport.
 * @id YAHOO.util.Dom.getViewportWidth
 * @method getViewportWidth
 * @return {Int} The width of the viewable area of the page (excludes scrollbars).
 */

/**
 * Returns the nearest ancestor that passes the test applied by supplied boolean method.
 * For performance reasons, IDs are not accepted and argument validation omitted.
 * @id YAHOO.util.Dom.getAncestorBy
 * @method getAncestorBy
 * @param {HTMLElement} node The HTMLElement to use as the starting point
 * @param {Function} method - A boolean method for testing elements which receives the element as its only argument.
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the nearest ancestor with the given className.
 * @id YAHOO.util.Dom.getAncestorByClassName
 * @method getAncestorByClassName
 * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point
 * @param {String} className
 * @return {Object} HTMLElement
 */

/**
 * Returns the nearest ancestor with the given tagName.
 * @id YAHOO.util.Dom.getAncestorByTagName
 * @method getAncestorByTagName
 * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point
 * @param {String} tagName
 * @return {Object} HTMLElement
 */

/**
 * Returns the previous sibling that is an HTMLElement.
 * For performance reasons, IDs are not accepted and argument validation omitted.
 * Returns the nearest HTMLElement sibling if no method provided.
 * @id YAHOO.util.Dom.getPreviousSiblingBy
 * @method getPreviousSiblingBy
 * @param {HTMLElement} node The HTMLElement to use as the starting point
 * @param {Function} method A boolean function used to test siblings
 * that receives the sibling node being tested as its only argument
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the previous sibling that is an HTMLElement
 * @id YAHOO.util.Dom.getPreviousSibling
 * @method getPreviousSibling
 * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the next HTMLElement sibling that passes the boolean method.
 * For performance reasons, IDs are not accepted and argument validation omitted.
 * Returns the nearest HTMLElement sibling if no method provided.
 * @id YAHOO.util.Dom.getNextSiblingBy
 * @method getNextSiblingBy
 * @param {HTMLElement} node The HTMLElement to use as the starting point
 * @param {Function} method A boolean function used to test siblings
 * that receives the sibling node being tested as its only argument
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the next sibling that is an HTMLElement
 * @id YAHOO.util.Dom.getNextSibling
 * @method getNextSibling
 * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the first HTMLElement child that passes the test method.
 * @id YAHOO.util.Dom.getFirstChildBy
 * @method getFirstChildBy
 * @param {HTMLElement} node The HTMLElement to use as the starting point
 * @param {Function} method A boolean function used to test children
 * that receives the node being tested as its only argument
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the first HTMLElement child.
 * @id YAHOO.util.Dom.getFirstChild
 * @method getFirstChild
 * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the last HTMLElement child that passes the test method.
 * @id YAHOO.util.Dom.getLastChildBy
 * @method getLastChildBy
 * @param {HTMLElement} node The HTMLElement to use as the starting point
 * @param {Function} method A boolean function used to test children
 * that receives the node being tested as its only argument
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns the last HTMLElement child.
 * @id YAHOO.util.Dom.getLastChild
 * @method getLastChild
 * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point
 * @return {Object} HTMLElement or null if not found
 */

/**
 * Returns an array of HTMLElement childNodes that pass the test method.
 * @id YAHOO.util.Dom.getChildrenBy
 * @method getChildrenBy
 * @param {HTMLElement} node The HTMLElement to start from
 * @param {Function} method A boolean function used to test children
 * that receives the node being tested as its only argument
 * @return {Array} A static array of HTMLElements
 */

/**
 * Returns an array of HTMLElement childNodes.
 * @id YAHOO.util.Dom.getChildren
 * @method getChildren
 * @param {String | HTMLElement} node The HTMLElement or an ID to use as the starting point
 * @return {Array} A static array of HTMLElements
 */

/**
 * Returns the left scroll value of the document
 * @id YAHOO.util.Dom.getDocumentScrollLeft
 * @method getDocumentScrollLeft
 * @param {HTMLDocument} document (optional) The document to get the scroll value of
 * @return {Int}  The amount that the document is scrolled to the left
 */

/**
 * Returns the top scroll value of the document
 * @id YAHOO.util.Dom.getDocumentScrollTop
 * @method getDocumentScrollTop
 * @param {HTMLDocument} document (optional) The document to get the scroll value of
 * @return {Int}  The amount that the document is scrolled to the top
 */

/**
 * Inserts the new node as the previous sibling of the reference node
 * @id YAHOO.util.Dom.insertBefore
 * @method insertBefore
 * @param {String | HTMLElement} newNode The node to be inserted
 * @param {String | HTMLElement} referenceNode The node to insert the new node before
 * @return {HTMLElement} The node that was inserted (or null if insert fails)
 */

/**
 * Inserts the new node as the next sibling of the reference node
 * @id YAHOO.util.Dom.insertAfter
 * @method insertAfter
 * @param {String | HTMLElement} newNode The node to be inserted
 * @param {String | HTMLElement} referenceNode The node to insert the new node after
 * @return {HTMLElement} The node that was inserted (or null if insert fails)
 */

/**
 * Creates a Region based on the viewport relative to the document.
 * @id YAHOO.util.Dom.getClientRegion
 * @method getClientRegion
 * @return {Region} A Region object representing the viewport which accounts for document scroll
 */

/**
 * A region is a representation of an object on a grid.  It is defined
 * by the top, right, bottom, left extents, so is rectangular by default.  If
 * other shapes are required, this class could be extended to support it.
 * @id YAHOO.util.Region
 * @namespace YAHOO.util
 * @class Region
 * @param {Int} t the top extent
 * @param {Int} r the right extent
 * @param {Int} b the bottom extent
 * @param {Int} l the left extent
 * @constructor
 */

/**
 * The region's top extent
 * @id YAHOO.util.Region.top
 * @property top
 * @type Int
 */

/**
 * The region's right extent
 * @id YAHOO.util.Region.right
 * @property right
 * @type int
 */

/**
 * The region's bottom extent
 * @id YAHOO.util.Region.bottom
 * @property bottom
 * @type Int
 */

/**
 * The region's left extent
 * @id YAHOO.util.Region.left
 * @property left
 * @type Int
 */

/**
 * Returns true if this region contains the region passed in
 * @id YAHOO.util.Region.contains
 * @method contains
 * @param  {Region}  region The region to evaluate
 * @return {Boolean}        True if the region is contained with this region,
 *                          else false
 */

/**
 * Returns the area of the region
 * @id YAHOO.util.Region.getArea
 * @method getArea
 * @return {Int} the region's area
 */

/**
 * Returns the region where the passed in region overlaps with this one
 * @id YAHOO.util.Region.intersect
 * @method intersect
 * @param  {Region} region The region that intersects
 * @return {Region}        The overlap region, or null if there is no overlap
 */

/**
 * Returns the region representing the smallest region that can contain both
 * the passed in region and this region.
 * @id YAHOO.util.Region.union
 * @method union
 * @param  {Region} region The region that to create the union with
 * @return {Region}        The union region
 */

/**
 * toString
 * @id YAHOO.util.Region.toString
 * @method toString
 * @return string the region properties
 */

/**
 * Returns a region that is occupied by the DOM element
 * @id YAHOO.util.Region.getRegion
 * @method getRegion
 * @param  {HTMLElement} el The element
 * @return {Region}         The region that the element occupies
 * @static
 */

/**
 * A point is a region that is special in that it represents a single point on
 * the grid.
 * @id YAHOO.util.Point
 * @namespace YAHOO.util
 * @class Point
 * @param {Int} x The X position of the point
 * @param {Int} y The Y position of the point
 * @constructor
 * @extends YAHOO.util.Region
 */

/**
 * The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)
 * @id YAHOO.util.Point.x
 * @property x
 * @type Int
 */

/**
 * The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)
 * @id YAHOO.util.Point.y
 * @property y
 * @type Int
 */

/**
 * DragDropMgr is a singleton that tracks the element interaction for
 * all DragDrop items in the window.  Generally, you will not call
 * this class directly, but it does have helper methods that could
 * be useful in your DragDrop implementations.
 * @id YAHOO.util.DragDropMgr
 * @class DragDropMgr
 * @static
 */

/**
 * Two dimensional Array of registered DragDrop objects.  The first
 * dimension is the DragDrop item group, the second the DragDrop
 * object.
 * @id YAHOO.util.DragDropMgr.ids
 * @property ids
 * @type {string: string}
 * @private
 * @static
 */

/**
 * Array of element ids defined as drag handles.  Used to determine
 * if the element that generated the mousedown event is actually the
 * handle and not the html element itself.
 * @id YAHOO.util.DragDropMgr.handleIds
 * @property handleIds
 * @type {string: string}
 * @private
 * @static
 */

/**
 * the DragDrop object that is currently being dragged
 * @id YAHOO.util.DragDropMgr.dragCurrent
 * @property dragCurrent
 * @type DragDrop
 * @private
 * @static
 **/

/**
 * the DragDrop object(s) that are being hovered over
 * @id YAHOO.util.DragDropMgr.dragOvers
 * @property dragOvers
 * @type Array
 * @private
 * @static
 */

/**
 * the X distance between the cursor and the object being dragged
 * @id YAHOO.util.DragDropMgr.deltaX
 * @property deltaX
 * @type int
 * @private
 * @static
 */

/**
 * the Y distance between the cursor and the object being dragged
 * @id YAHOO.util.DragDropMgr.deltaY
 * @property deltaY
 * @type int
 * @private
 * @static
 */

/**
 * Flag to determine if we should prevent the default behavior of the
 * events we define. By default this is true, but this can be set to
 * false if you need the default behavior (not recommended)
 * @id YAHOO.util.DragDropMgr.preventDefault
 * @property preventDefault
 * @type boolean
 * @static
 */

/**
 * Flag to determine if we should stop the propagation of the events
 * we generate. This is true by default but you may want to set it to
 * false if the html element contains other features that require the
 * mouse click.
 * @id YAHOO.util.DragDropMgr.stopPropagation
 * @property stopPropagation
 * @type boolean
 * @static
 */

/**
 * Internal flag that is set to true when drag and drop has been
 * initialized
 * @id YAHOO.util.DragDropMgr.initialized
 * @property initialized
 * @private
 * @static
 */

/**
 * All drag and drop can be disabled.
 * @id YAHOO.util.DragDropMgr.locked
 * @property locked
 * @private
 * @static
 */

/**
 * Provides additional information about the the current set of
 * interactions.  Can be accessed from the event handlers. It
 * contains the following properties:
 *
 *       out:       onDragOut interactions
 *       enter:     onDragEnter interactions
 *       over:      onDragOver interactions
 *       drop:      onDragDrop interactions
 *       point:     The location of the cursor
 *       draggedRegion: The location of dragged element at the time
 *                      of the interaction
 *       sourceRegion: The location of the source elemtn at the time
 *                     of the interaction
 *       validDrop: boolean
 * @id YAHOO.util.DragDropMgr.interactionInfo
 * @property interactionInfo
 * @type object
 * @static
 */

/**
 * Called the first time an element is registered.
 * @id YAHOO.util.DragDropMgr.init
 * @method init
 * @private
 * @static
 */

/**
 * In point mode, drag and drop interaction is defined by the
 * location of the cursor during the drag/drop
 * @id YAHOO.util.DragDropMgr.POINT
 * @property POINT
 * @type int
 * @static
 * @final
 */

/**
 * In intersect mode, drag and drop interaction is defined by the
 * cursor position or the amount of overlap of two or more drag and
 * drop objects.
 * @id YAHOO.util.DragDropMgr.INTERSECT
 * @property INTERSECT
 * @type int
 * @static
 * @final
 */

/**
 * In intersect mode, drag and drop interaction is defined only by the
 * overlap of two or more drag and drop objects.
 * @id YAHOO.util.DragDropMgr.STRICT_INTERSECT
 * @property STRICT_INTERSECT
 * @type int
 * @static
 * @final
 */

/**
 * The current drag and drop mode.  Default: POINT
 * @id YAHOO.util.DragDropMgr.mode
 * @property mode
 * @type int
 * @static
 */

/**
 * Runs method on all drag and drop objects
 * @id YAHOO.util.DragDropMgr._execOnAll
 * @method _execOnAll
 * @private
 * @static
 */

/**
 * Drag and drop initialization.  Sets up the global event handlers
 * @id YAHOO.util.DragDropMgr._onLoad
 * @method _onLoad
 * @private
 * @static
 */

/**
 * Reset constraints on all drag and drop objs
 * @id YAHOO.util.DragDropMgr._onResize
 * @method _onResize
 * @private
 * @static
 */

/**
 * Lock all drag and drop functionality
 * @id YAHOO.util.DragDropMgr.lock
 * @method lock
 * @static
 */

/**
 * Unlock all drag and drop functionality
 * @id YAHOO.util.DragDropMgr.unlock
 * @method unlock
 * @static
 */

/**
 * Is drag and drop locked?
 * @id YAHOO.util.DragDropMgr.isLocked
 * @method isLocked
 * @return {boolean} True if drag and drop is locked, false otherwise.
 * @static
 */

/**
 * Location cache that is set for all drag drop objects when a drag is
 * initiated, cleared when the drag is finished.
 * @id YAHOO.util.DragDropMgr.locationCache
 * @property locationCache
 * @private
 * @static
 */

/**
 * Set useCache to false if you want to force object the lookup of each
 * drag and drop linked element constantly during a drag.
 * @id YAHOO.util.DragDropMgr.useCache
 * @property useCache
 * @type boolean
 * @static
 */

/**
 * The number of pixels that the mouse needs to move after the
 * mousedown before the drag is initiated.  Default=3;
 * @id YAHOO.util.DragDropMgr.clickPixelThresh
 * @property clickPixelThresh
 * @type int
 * @static
 */

/**
 * The number of milliseconds after the mousedown event to initiate the
 * drag if we don't get a mouseup event. Default=1000
 * @id YAHOO.util.DragDropMgr.clickTimeThresh
 * @property clickTimeThresh
 * @type int
 * @static
 */

/**
 * Flag that indicates that either the drag pixel threshold or the
 * mousdown time threshold has been met
 * @id YAHOO.util.DragDropMgr.dragThreshMet
 * @property dragThreshMet
 * @type boolean
 * @private
 * @static
 */

/**
 * Timeout used for the click time threshold
 * @id YAHOO.util.DragDropMgr.clickTimeout
 * @property clickTimeout
 * @type Object
 * @private
 * @static
 */

/**
 * The X position of the mousedown event stored for later use when a
 * drag threshold is met.
 * @id YAHOO.util.DragDropMgr.startX
 * @property startX
 * @type int
 * @private
 * @static
 */

/**
 * The Y position of the mousedown event stored for later use when a
 * drag threshold is met.
 * @id YAHOO.util.DragDropMgr.startY
 * @property startY
 * @type int
 * @private
 * @static
 */

/**
 * Flag to determine if the drag event was fired from the click timeout and
 * not the mouse move threshold.
 * @id YAHOO.util.DragDropMgr.fromTimeout
 * @property fromTimeout
 * @type boolean
 * @private
 * @static
 */

/**
 * Each DragDrop instance must be registered with the DragDropMgr.
 * This is executed in DragDrop.init()
 * @id YAHOO.util.DragDropMgr.regDragDrop
 * @method regDragDrop
 * @param {DragDrop} oDD the DragDrop object to register
 * @param {String} sGroup the name of the group this element belongs to
 * @static
 */

/**
 * Removes the supplied dd instance from the supplied group. Executed
 * by DragDrop.removeFromGroup, so don't call this function directly.
 * @id YAHOO.util.DragDropMgr.removeDDFromGroup
 * @method removeDDFromGroup
 * @private
 * @static
 */

/**
 * Unregisters a drag and drop item.  This is executed in
 * DragDrop.unreg, use that method instead of calling this directly.
 * @id YAHOO.util.DragDropMgr._remove
 * @method _remove
 * @private
 * @static
 */

/**
 * Each DragDrop handle element must be registered.  This is done
 * automatically when executing DragDrop.setHandleElId()
 * @id YAHOO.util.DragDropMgr.regHandle
 * @method regHandle
 * @param {String} sDDId the DragDrop id this element is a handle for
 * @param {String} sHandleId the id of the element that is the drag
 * handle
 * @static
 */

/**
 * Utility function to determine if a given element has been
 * registered as a drag drop item.
 * @id YAHOO.util.DragDropMgr.isDragDrop
 * @method isDragDrop
 * @param {String} id the element id to check
 * @return {boolean} true if this element is a DragDrop item,
 * false otherwise
 * @static
 */

/**
 * Returns the drag and drop instances that are in all groups the
 * passed in instance belongs to.
 * @id YAHOO.util.DragDropMgr.getRelated
 * @method getRelated
 * @param {DragDrop} p_oDD the obj to get related data for
 * @param {boolean} bTargetsOnly if true, only return targetable objs
 * @return {DragDrop[]} the related instances
 * @static
 */

/**
 * Returns true if the specified dd target is a legal target for
 * the specifice drag obj
 * @id YAHOO.util.DragDropMgr.isLegalTarget
 * @method isLegalTarget
 * @param {DragDrop} the drag obj
 * @param {DragDrop} the target
 * @return {boolean} true if the target is a legal target for the
 * dd obj
 * @static
 */

/**
 * My goal is to be able to transparently determine if an object is
 * typeof DragDrop, and the exact subclass of DragDrop.  typeof
 * returns "object", oDD.constructor.toString() always returns
 * "DragDrop" and not the name of the subclass.  So for now it just
 * evaluates a well-known variable in DragDrop.
 * @id YAHOO.util.DragDropMgr.isTypeOfDD
 * @method isTypeOfDD
 * @param {Object} the object to evaluate
 * @return {boolean} true if typeof oDD = DragDrop
 * @static
 */

/**
 * Utility function to determine if a given element has been
 * registered as a drag drop handle for the given Drag Drop object.
 * @id YAHOO.util.DragDropMgr.isHandle
 * @method isHandle
 * @param {String} id the element id to check
 * @return {boolean} true if this element is a DragDrop handle, false
 * otherwise
 * @static
 */

/**
 * Returns the DragDrop instance for a given id
 * @id YAHOO.util.DragDropMgr.getDDById
 * @method getDDById
 * @param {String} id the id of the DragDrop object
 * @return {DragDrop} the drag drop object, null if it is not found
 * @static
 */

/**
 * Fired after a registered DragDrop object gets the mousedown event.
 * Sets up the events required to track the object being dragged
 * @id YAHOO.util.DragDropMgr.handleMouseDown
 * @method handleMouseDown
 * @param {Event} e the event
 * @param oDD the DragDrop object being dragged
 * @private
 * @static
 */

/**
 * Fired when either the drag pixel threshol or the mousedown hold
 * time threshold has been met.
 * @id YAHOO.util.DragDropMgr.startDrag
 * @method startDrag
 * @param x {int} the X position of the original mousedown
 * @param y {int} the Y position of the original mousedown
 * @static
 */

/**
 * Internal function to handle the mouseup event.  Will be invoked
 * from the context of the document.
 * @id YAHOO.util.DragDropMgr.handleMouseUp
 * @method handleMouseUp
 * @param {Event} e the event
 * @private
 * @static
 */

/**
 * Utility to stop event propagation and event default, if these
 * features are turned on.
 * @id YAHOO.util.DragDropMgr.stopEvent
 * @method stopEvent
 * @param {Event} e the event as returned by this.getEvent()
 * @static
 */

/**
 * Ends the current drag, cleans up the state, and fires the endDrag
 * and mouseUp events.  Called internally when a mouseup is detected
 * during the drag.  Can be fired manually during the drag by passing
 * either another event (such as the mousemove event received in onDrag)
 * or a fake event with pageX and pageY defined (so that endDrag and
 * onMouseUp have usable position data.).  Alternatively, pass true
 * for the silent parameter so that the endDrag and onMouseUp events
 * are skipped (so no event data is needed.)
 *
 * @id YAHOO.util.DragDropMgr.stopDrag
 * @method stopDrag
 * @param {Event} e the mouseup event, another event (or a fake event)
 *                  with pageX and pageY defined, or nothing if the
 *                  silent parameter is true
 * @param {boolean} silent skips the enddrag and mouseup events if true
 * @static
 */

/**
 * Internal function to handle the mousemove event.  Will be invoked
 * from the context of the html element.
 *
 * @id YAHOO.util.DragDropMgr.handleMouseMove
 * @todo figure out what we can do about mouse events lost when the
 * user drags objects beyond the window boundary.  Currently we can
 * detect this in internet explorer by verifying that the mouse is
 * down during the mousemove event.  Firefox doesn't give us the
 * button state on the mousemove event.
 * @method handleMouseMove
 * @param {Event} e the event
 * @private
 * @static
 */

/**
 * Iterates over all of the DragDrop elements to find ones we are
 * hovering over or dropping on
 * @id YAHOO.util.DragDropMgr.fireEvents
 * @method fireEvents
 * @param {Event} e the event
 * @param {boolean} isDrop is this a drop op or a mouseover op?
 * @private
 * @static
 */

/**
 * Helper function for getting the best match from the list of drag
 * and drop objects returned by the drag and drop events when we are
 * in INTERSECT mode.  It returns either the first object that the
 * cursor is over, or the object that has the greatest overlap with
 * the dragged element.
 * @id YAHOO.util.DragDropMgr.getBestMatch
 * @method getBestMatch
 * @param  {DragDrop[]} dds The array of drag and drop objects
 * targeted
 * @return {DragDrop}       The best single match
 * @static
 */

/**
 * Refreshes the cache of the top-left and bottom-right points of the
 * drag and drop objects in the specified group(s).  This is in the
 * format that is stored in the drag and drop instance, so typical
 * usage is:
 * <code>
 * YAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);
 * </code>
 * Alternatively:
 * <code>
 * YAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});
 * </code>
 * @id YAHOO.util.DragDropMgr.refreshCache
 * @todo this really should be an indexed array.  Alternatively this
 * method could accept both.
 * @method refreshCache
 * @param {Object} groups an associative array of groups to refresh
 * @static
 */

/**
 * This checks to make sure an element exists and is in the DOM.  The
 * main purpose is to handle cases where innerHTML is used to remove
 * drag and drop objects from the DOM.  IE provides an 'unspecified
 * error' when trying to access the offsetParent of such an element
 * @id YAHOO.util.DragDropMgr.verifyEl
 * @method verifyEl
 * @param {HTMLElement} el the element to check
 * @return {boolean} true if the element looks usable
 * @static
 */

/**
 * Returns a Region object containing the drag and drop element's position
 * and size, including the padding configured for it
 * @id YAHOO.util.DragDropMgr.getLocation
 * @method getLocation
 * @param {DragDrop} oDD the drag and drop object to get the
 *                       location for
 * @return {YAHOO.util.Region} a Region object representing the total area
 *                             the element occupies, including any padding
 *                             the instance is configured for.
 * @static
 */

/**
 * Checks the cursor location to see if it over the target
 * @id YAHOO.util.DragDropMgr.isOverTarget
 * @method isOverTarget
 * @param {YAHOO.util.Point} pt The point to evaluate
 * @param {DragDrop} oTarget the DragDrop object we are inspecting
 * @param {boolean} intersect true if we are in intersect mode
 * @param {YAHOO.util.Region} pre-cached location of the dragged element
 * @return {boolean} true if the mouse is over the target
 * @private
 * @static
 */

/**
 * unload event handler
 * @id YAHOO.util.DragDropMgr._onUnload
 * @method _onUnload
 * @private
 * @static
 */

/**
 * Cleans up the drag and drop events and objects.
 * @id YAHOO.util.DragDropMgr.unregAll
 * @method unregAll
 * @private
 * @static
 */

/**
 * A cache of DOM elements
 * @id YAHOO.util.DragDropMgr.elementCache
 * @property elementCache
 * @private
 * @static
 * @deprecated elements are not cached now
 */

/**
 * Get the wrapper for the DOM element specified
 * @id YAHOO.util.DragDropMgr.getElWrapper
 * @method getElWrapper
 * @param {String} id the id of the element to get
 * @return {YAHOO.util.DDM.ElementWrapper} the wrapped element
 * @private
 * @deprecated This wrapper isn't that useful
 * @static
 */

/**
 * Returns the actual DOM element
 * @id YAHOO.util.DragDropMgr.getElement
 * @method getElement
 * @param {String} id the id of the elment to get
 * @return {Object} The element
 * @deprecated use YAHOO.util.Dom.get instead
 * @static
 */

/**
 * Returns the style property for the DOM element (i.e.,
 * document.getElById(id).style)
 * @id YAHOO.util.DragDropMgr.getCss
 * @method getCss
 * @param {String} id the id of the elment to get
 * @return {Object} The style property of the element
 * @deprecated use YAHOO.util.Dom instead
 * @static
 */

/**
 * Inner class for cached elements
 * @id DragDropMgr.ElementWrapper
 * @class DragDropMgr.ElementWrapper
 * @for DragDropMgr
 * @private
 * @deprecated
 */

/**
 * The element
 * @id DragDropMgr.ElementWrapper.el
 * @property el
 */

/**
 * The element id
 * @id DragDropMgr.ElementWrapper.id
 * @property id
 */

/**
 * A reference to the style property
 * @id DragDropMgr.ElementWrapper.css
 * @property css
 */

/**
 * Returns the X position of an html element
 * @id DragDropMgr.ElementWrapper.getPosX
 * @method getPosX
 * @param el the element for which to get the position
 * @return {int} the X coordinate
 * @for DragDropMgr
 * @deprecated use YAHOO.util.Dom.getX instead
 * @static
 */

/**
 * Returns the Y position of an html element
 * @id DragDropMgr.ElementWrapper.getPosY
 * @method getPosY
 * @param el the element for which to get the position
 * @return {int} the Y coordinate
 * @deprecated use YAHOO.util.Dom.getY instead
 * @static
 */

/**
 * Swap two nodes.  In IE, we use the native method, for others we
 * emulate the IE behavior
 * @id DragDropMgr.ElementWrapper.swapNode
 * @method swapNode
 * @param n1 the first node to swap
 * @param n2 the other node to swap
 * @static
 */

/**
 * Returns the current scroll position
 * @id DragDropMgr.ElementWrapper.getScroll
 * @method getScroll
 * @private
 * @static
 */

/**
 * Returns the specified element style property
 * @id DragDropMgr.ElementWrapper.getStyle
 * @method getStyle
 * @param {HTMLElement} el          the element
 * @param {string}      styleProp   the style property
 * @return {string} The value of the style property
 * @deprecated use YAHOO.util.Dom.getStyle
 * @static
 */

/**
 * Gets the scrollTop
 * @id DragDropMgr.ElementWrapper.getScrollTop
 * @method getScrollTop
 * @return {int} the document's scrollTop
 * @static
 */

/**
 * Gets the scrollLeft
 * @id DragDropMgr.ElementWrapper.getScrollLeft
 * @method getScrollLeft
 * @return {int} the document's scrollTop
 * @static
 */

/**
 * Sets the x/y position of an element to the location of the
 * target element.
 * @id DragDropMgr.ElementWrapper.moveToEl
 * @method moveToEl
 * @param {HTMLElement} moveEl      The element to move
 * @param {HTMLElement} targetEl    The position reference element
 * @static
 */

/**
 * Gets the client height
 * @id DragDropMgr.ElementWrapper.getClientHeight
 * @method getClientHeight
 * @return {int} client height in px
 * @deprecated use YAHOO.util.Dom.getViewportHeight instead
 * @static
 */

/**
 * Gets the client width
 * @id DragDropMgr.ElementWrapper.getClientWidth
 * @method getClientWidth
 * @return {int} client width in px
 * @deprecated use YAHOO.util.Dom.getViewportWidth instead
 * @static
 */

/**
 * Numeric array sort function
 * @id DragDropMgr.ElementWrapper.numericSort
 * @method numericSort
 * @static
 */

/**
 * Internal counter
 * @id DragDropMgr.ElementWrapper._timeoutCount
 * @property _timeoutCount
 * @private
 * @static
 */

/**
 * Trying to make the load order less important.  Without this we get
 * an error if this file is loaded before the Event Utility.
 * @id DragDropMgr.ElementWrapper._addListeners
 * @method _addListeners
 * @private
 * @static
 */

/**
 * Recursively searches the immediate parent and all child nodes for
 * the handle element in order to determine wheter or not it was
 * clicked.
 * @id DragDropMgr.ElementWrapper.handleWasClicked
 * @method handleWasClicked
 * @param node the html element to inspect
 * @static
 */

/**
 * Defines the interface and base operation of items that that can be
 * dragged or can be drop targets.  It was designed to be extended, overriding
 * the event handlers for startDrag, onDrag, onDragOver, onDragOut.
 * Up to three html elements can be associated with a DragDrop instance:
 * <ul>
 * <li>linked element: the element that is passed into the constructor.
 * This is the element which defines the boundaries for interaction with
 * other DragDrop objects.</li>
 * <li>handle element(s): The drag operation only occurs if the element that
 * was clicked matches a handle element.  By default this is the linked
 * element, but there are times that you will want only a portion of the
 * linked element to initiate the drag operation, and the setHandleElId()
 * method provides a way to define this.</li>
 * <li>drag element: this represents an the element that would be moved along
 * with the cursor during a drag operation.  By default, this is the linked
 * element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define
 * a separate element that would be moved, as in {@link YAHOO.util.DDProxy}
 * </li>
 * </ul>
 * This class should not be instantiated until the onload event to ensure that
 * the associated elements are available.
 * The following would define a DragDrop obj that would interact with any
 * other DragDrop obj in the "group1" group:
 * <pre>
 *  dd = new YAHOO.util.DragDrop("div1", "group1");
 * </pre>
 * Since none of the event handlers have been implemented, nothing would
 * actually happen if you were to run the code above.  Normally you would
 * override this class or one of the default implementations, but you can
 * also override the methods you want on an instance of the class...
 * <pre>
 *  dd.onDragDrop = function(e, id) {
 *  &nbsp;&nbsp;alert("dd was dropped on " + id);
 *  }
 * </pre>
 * @id YAHOO.util.DragDrop
 * @namespace YAHOO.util
 * @class DragDrop
 * @constructor
 * @param {String} id of the element that is linked to this instance
 * @param {String} sGroup the group of related DragDrop objects
 * @param {object} config an object containing configurable attributes
 *                Valid properties for DragDrop:
 *                    padding, isTarget, maintainOffset, primaryButtonOnly,
 */

/**
 * An Object Literal containing the events that we will be using: mouseDown, b4MouseDown, mouseUp, b4StartDrag, startDrag, b4EndDrag, endDrag, mouseUp, drag, b4Drag, invalidDrop, b4DragOut, dragOut, dragEnter, b4DragOver, dragOver, b4DragDrop, dragDrop
 * By setting any of these to false, then event will not be fired.
 * @id YAHOO.util.DragDrop.events
 * @property events
 * @type object
 */

/**
 * @id YAHOO.util.DragDrop.on
 * @method on
 * @description Shortcut for EventProvider.subscribe, see YAHOO.util.EventProvider.subscribe
 */

/**
 * The id of the element associated with this object.  This is what we
 * refer to as the "linked element" because the size and position of
 * this element is used to determine when the drag and drop objects have
 * interacted.
 * @id YAHOO.util.DragDrop.id
 * @property id
 * @type String
 */

/**
 * Configuration attributes passed into the constructor
 * @id YAHOO.util.DragDrop.config
 * @property config
 * @type object
 */

/**
 * The id of the element that will be dragged.  By default this is same
 * as the linked element , but could be changed to another element. Ex:
 * YAHOO.util.DDProxy
 * @id YAHOO.util.DragDrop.dragElId
 * @property dragElId
 * @type String
 * @private
 */

/**
 * the id of the element that initiates the drag operation.  By default
 * this is the linked element, but could be changed to be a child of this
 * element.  This lets us do things like only starting the drag when the
 * header element within the linked html element is clicked.
 * @id YAHOO.util.DragDrop.handleElId
 * @property handleElId
 * @type String
 * @private
 */

/**
 * An associative array of HTML tags that will be ignored if clicked.
 * @id YAHOO.util.DragDrop.invalidHandleTypes
 * @property invalidHandleTypes
 * @type {string: string}
 */

/**
 * An associative array of ids for elements that will be ignored if clicked
 * @id YAHOO.util.DragDrop.invalidHandleIds
 * @property invalidHandleIds
 * @type {string: string}
 */

/**
 * An indexted array of css class names for elements that will be ignored
 * if clicked.
 * @id YAHOO.util.DragDrop.invalidHandleClasses
 * @property invalidHandleClasses
 * @type string[]
 */

/**
 * The linked element's absolute X position at the time the drag was
 * started
 * @id YAHOO.util.DragDrop.startPageX
 * @property startPageX
 * @type int
 * @private
 */

/**
 * The linked element's absolute X position at the time the drag was
 * started
 * @id YAHOO.util.DragDrop.startPageY
 * @property startPageY
 * @type int
 * @private
 */

/**
 * The group defines a logical collection of DragDrop objects that are
 * related.  Instances only get events when interacting with other
 * DragDrop object in the same group.  This lets us define multiple
 * groups using a single DragDrop subclass if we want.
 * @id YAHOO.util.DragDrop.groups
 * @property groups
 * @type {string: string}
 */

/**
 * Individual drag/drop instances can be locked.  This will prevent
 * onmousedown start drag.
 * @id YAHOO.util.DragDrop.locked
 * @property locked
 * @type boolean
 * @private
 */

/**
 * Lock this instance
 * @id YAHOO.util.DragDrop.lock
 * @method lock
 */

/**
 * Unlock this instace
 * @id YAHOO.util.DragDrop.unlock
 * @method unlock
 */

/**
 * By default, all instances can be a drop target.  This can be disabled by
 * setting isTarget to false.
 * @id YAHOO.util.DragDrop.isTarget
 * @property isTarget
 * @type boolean
 */

/**
 * The padding configured for this drag and drop object for calculating
 * the drop zone intersection with this object.
 * @id YAHOO.util.DragDrop.padding
 * @property padding
 * @type int[]
 */

/**
 * If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)
 * @id YAHOO.util.DragDrop.dragOnly
 * @property dragOnly
 * @type Boolean
 */

/**
 * Cached reference to the linked element
 * @id YAHOO.util.DragDrop._domRef
 * @property _domRef
 * @private
 */

/**
 * Internal typeof flag
 * @id YAHOO.util.DragDrop.__ygDragDrop
 * @property __ygDragDrop
 * @private
 */

/**
 * Set to true when horizontal contraints are applied
 * @id YAHOO.util.DragDrop.constrainX
 * @property constrainX
 * @type boolean
 * @private
 */

/**
 * Set to true when vertical contraints are applied
 * @id YAHOO.util.DragDrop.constrainY
 * @property constrainY
 * @type boolean
 * @private
 */

/**
 * The left constraint
 * @id YAHOO.util.DragDrop.minX
 * @property minX
 * @type int
 * @private
 */

/**
 * The right constraint
 * @id YAHOO.util.DragDrop.maxX
 * @property maxX
 * @type int
 * @private
 */

/**
 * The up constraint
 * @id YAHOO.util.DragDrop.minY
 * @property minY
 * @type int
 * @type int
 * @private
 */

/**
 * The down constraint
 * @id YAHOO.util.DragDrop.maxY
 * @property maxY
 * @type int
 * @private
 */

/**
 * The difference between the click position and the source element's location
 * @id YAHOO.util.DragDrop.deltaX
 * @property deltaX
 * @type int
 * @private
 */

/**
 * The difference between the click position and the source element's location
 * @id YAHOO.util.DragDrop.deltaY
 * @property deltaY
 * @type int
 * @private
 */

/**
 * Maintain offsets when we resetconstraints.  Set to true when you want
 * the position of the element relative to its parent to stay the same
 * when the page changes
 *
 * @id YAHOO.util.DragDrop.maintainOffset
 * @property maintainOffset
 * @type boolean
 */

/**
 * Array of pixel locations the element will snap to if we specified a
 * horizontal graduation/interval.  This array is generated automatically
 * when you define a tick interval.
 * @id YAHOO.util.DragDrop.xTicks
 * @property xTicks
 * @type int[]
 */

/**
 * Array of pixel locations the element will snap to if we specified a
 * vertical graduation/interval.  This array is generated automatically
 * when you define a tick interval.
 * @id YAHOO.util.DragDrop.yTicks
 * @property yTicks
 * @type int[]
 */

/**
 * By default the drag and drop instance will only respond to the primary
 * button click (left button for a right-handed mouse).  Set to true to
 * allow drag and drop to start with any mouse click that is propogated
 * by the browser
 * @id YAHOO.util.DragDrop.primaryButtonOnly
 * @property primaryButtonOnly
 * @type boolean
 */

/**
 * The availabe property is false until the linked dom element is accessible.
 * @id YAHOO.util.DragDrop.available
 * @property available
 * @type boolean
 */

/**
 * By default, drags can only be initiated if the mousedown occurs in the
 * region the linked element is.  This is done in part to work around a
 * bug in some browsers that mis-report the mousedown if the previous
 * mouseup happened outside of the window.  This property is set to true
 * if outer handles are defined.
 *
 * @id YAHOO.util.DragDrop.hasOuterHandles
 * @property hasOuterHandles
 * @type boolean
 * @default false
 */

/**
 * Property that is assigned to a drag and drop object when testing to
 * see if it is being targeted by another dd object.  This property
 * can be used in intersect mode to help determine the focus of
 * the mouse interaction.  DDM.getBestMatch uses this property first to
 * determine the closest match in INTERSECT mode when multiple targets
 * are part of the same interaction.
 * @id YAHOO.util.DragDrop.cursorIsOver
 * @property cursorIsOver
 * @type boolean
 */

/**
 * Property that is assigned to a drag and drop object when testing to
 * see if it is being targeted by another dd object.  This is a region
 * that represents the area the draggable element overlaps this target.
 * DDM.getBestMatch uses this property to compare the size of the overlap
 * to that of other targets in order to determine the closest match in
 * INTERSECT mode when multiple targets are part of the same interaction.
 * @id YAHOO.util.DragDrop.overlap
 * @property overlap
 * @type YAHOO.util.Region
 */

/**
 * Code that executes immediately before the startDrag event
 * @id YAHOO.util.DragDrop.b4StartDrag
 * @method b4StartDrag
 * @private
 */

/**
 * Abstract method called after a drag/drop object is clicked
 * and the drag or mousedown time thresholds have beeen met.
 * @id YAHOO.util.DragDrop.startDrag
 * @method startDrag
 * @param {int} X click location
 * @param {int} Y click location
 */

/**
 * Code that executes immediately before the onDrag event
 * @id YAHOO.util.DragDrop.b4Drag
 * @method b4Drag
 * @private
 */

/**
 * Abstract method called during the onMouseMove event while dragging an
 * object.
 * @id YAHOO.util.DragDrop.onDrag
 * @method onDrag
 * @param {Event} e the mousemove event
 */

/**
 * Abstract method called when this element fist begins hovering over
 * another DragDrop obj
 * @id YAHOO.util.DragDrop.onDragEnter
 * @method onDragEnter
 * @param {Event} e the mousemove event
 * @param {String|DragDrop[]} id In POINT mode, the element
 * id this is hovering over.  In INTERSECT mode, an array of one or more
 * dragdrop items being hovered over.
 */

/**
 * Code that executes immediately before the onDragOver event
 * @id YAHOO.util.DragDrop.b4DragOver
 * @method b4DragOver
 * @private
 */

/**
 * Abstract method called when this element is hovering over another
 * DragDrop obj
 * @id YAHOO.util.DragDrop.onDragOver
 * @method onDragOver
 * @param {Event} e the mousemove event
 * @param {String|DragDrop[]} id In POINT mode, the element
 * id this is hovering over.  In INTERSECT mode, an array of dd items
 * being hovered over.
 */

/**
 * Code that executes immediately before the onDragOut event
 * @id YAHOO.util.DragDrop.b4DragOut
 * @method b4DragOut
 * @private
 */

/**
 * Abstract method called when we are no longer hovering over an element
 * @id YAHOO.util.DragDrop.onDragOut
 * @method onDragOut
 * @param {Event} e the mousemove event
 * @param {String|DragDrop[]} id In POINT mode, the element
 * id this was hovering over.  In INTERSECT mode, an array of dd items
 * that the mouse is no longer over.
 */

/**
 * Code that executes immediately before the onDragDrop event
 * @id YAHOO.util.DragDrop.b4DragDrop
 * @method b4DragDrop
 * @private
 */

/**
 * Abstract method called when this item is dropped on another DragDrop
 * obj
 * @id YAHOO.util.DragDrop.onDragDrop
 * @method onDragDrop
 * @param {Event} e the mouseup event
 * @param {String|DragDrop[]} id In POINT mode, the element
 * id this was dropped on.  In INTERSECT mode, an array of dd items this
 * was dropped on.
 */

/**
 * Abstract method called when this item is dropped on an area with no
 * drop target
 * @id YAHOO.util.DragDrop.onInvalidDrop
 * @method onInvalidDrop
 * @param {Event} e the mouseup event
 */

/**
 * Code that executes immediately before the endDrag event
 * @id YAHOO.util.DragDrop.b4EndDrag
 * @method b4EndDrag
 * @private
 */

/**
 * Fired when we are done dragging the object
 * @id YAHOO.util.DragDrop.endDrag
 * @method endDrag
 * @param {Event} e the mouseup event
 */

/**
 * Code executed immediately before the onMouseDown event
 * @id YAHOO.util.DragDrop.b4MouseDown
 * @method b4MouseDown
 * @param {Event} e the mousedown event
 * @private
 */

/**
 * Event handler that fires when a drag/drop obj gets a mousedown
 * @id YAHOO.util.DragDrop.onMouseDown
 * @method onMouseDown
 * @param {Event} e the mousedown event
 */

/**
 * Event handler that fires when a drag/drop obj gets a mouseup
 * @id YAHOO.util.DragDrop.onMouseUp
 * @method onMouseUp
 * @param {Event} e the mouseup event
 */

/**
 * Override the onAvailable method to do what is needed after the initial
 * position was determined.
 * @id YAHOO.util.DragDrop.onAvailable
 * @method onAvailable
 */

/**
 * Returns a reference to the linked element
 * @id YAHOO.util.DragDrop.getEl
 * @method getEl
 * @return {HTMLElement} the html element
 */

/**
 * Returns a reference to the actual element to drag.  By default this is
 * the same as the html element, but it can be assigned to another
 * element. An example of this can be found in YAHOO.util.DDProxy
 * @id YAHOO.util.DragDrop.getDragEl
 * @method getDragEl
 * @return {HTMLElement} the html element
 */

/**
 * Sets up the DragDrop object.  Must be called in the constructor of any
 * YAHOO.util.DragDrop subclass
 * @id YAHOO.util.DragDrop.init
 * @method init
 * @param id the id of the linked element
 * @param {String} sGroup the group of related items
 * @param {object} config configuration attributes
 */

/**
 * Initializes Targeting functionality only... the object does not
 * get a mousedown handler.
 * @id YAHOO.util.DragDrop.initTarget
 * @method initTarget
 * @param id the id of the linked element
 * @param {String} sGroup the group of related items
 * @param {object} config configuration attributes
 */

/**
 * Applies the configuration parameters that were passed into the constructor.
 * This is supposed to happen at each level through the inheritance chain.  So
 * a DDProxy implentation will execute apply config on DDProxy, DD, and
 * DragDrop in order to get all of the parameters that are available in
 * each object.
 * @id YAHOO.util.DragDrop.applyConfig
 * @method applyConfig
 */

/**
 * Executed when the linked element is available
 * @id YAHOO.util.DragDrop.handleOnAvailable
 * @method handleOnAvailable
 * @private
 */

/**
 * Configures the padding for the target zone in px.  Effectively expands
 * (or reduces) the virtual object size for targeting calculations.
 * Supports css-style shorthand; if only one parameter is passed, all sides
 * will have that padding, and if only two are passed, the top and bottom
 * will have the first param, the left and right the second.
 * @id YAHOO.util.DragDrop.setPadding
 * @method setPadding
 * @param {int} iTop    Top pad
 * @param {int} iRight  Right pad
 * @param {int} iBot    Bot pad
 * @param {int} iLeft   Left pad
 */

/**
 * Stores the initial placement of the linked element.
 * @id YAHOO.util.DragDrop.setInitialPosition
 * @method setInitialPosition
 * @param {int} diffX   the X offset, default 0
 * @param {int} diffY   the Y offset, default 0
 * @private
 */

/**
 * Sets the start position of the element.  This is set when the obj
 * is initialized, the reset when a drag is started.
 * @id YAHOO.util.DragDrop.setStartPosition
 * @method setStartPosition
 * @param pos current position (from previous lookup)
 * @private
 */

/**
 * Add this instance to a group of related drag/drop objects.  All
 * instances belong to at least one group, and can belong to as many
 * groups as needed.
 * @id YAHOO.util.DragDrop.addToGroup
 * @method addToGroup
 * @param sGroup {string} the name of the group
 */

/**
 * Remove's this instance from the supplied interaction group
 * @id YAHOO.util.DragDrop.removeFromGroup
 * @method removeFromGroup
 * @param {string}  sGroup  The group to drop
 */

/**
 * Allows you to specify that an element other than the linked element
 * will be moved with the cursor during a drag
 * @id YAHOO.util.DragDrop.setDragElId
 * @method setDragElId
 * @param id {string} the id of the element that will be used to initiate the drag
 */

/**
 * Allows you to specify a child of the linked element that should be
 * used to initiate the drag operation.  An example of this would be if
 * you have a content div with text and links.  Clicking anywhere in the
 * content area would normally start the drag operation.  Use this method
 * to specify that an element inside of the content div is the element
 * that starts the drag operation.
 * @id YAHOO.util.DragDrop.setHandleElId
 * @method setHandleElId
 * @param id {string} the id of the element that will be used to
 * initiate the drag.
 */

/**
 * Allows you to set an element outside of the linked element as a drag
 * handle
 * @id YAHOO.util.DragDrop.setOuterHandleElId
 * @method setOuterHandleElId
 * @param id the id of the element that will be used to initiate the drag
 */

/**
 * Remove all drag and drop hooks for this element
 * @id YAHOO.util.DragDrop.unreg
 * @method unreg
 */

/**
 * Returns true if this instance is locked, or the drag drop mgr is locked
 * (meaning that all drag/drop is disabled on the page.)
 * @id YAHOO.util.DragDrop.isLocked
 * @method isLocked
 * @return {boolean} true if this obj or all drag/drop is locked, else
 * false
 */

/**
 * Fired when this object is clicked
 * @id YAHOO.util.DragDrop.handleMouseDown
 * @method handleMouseDown
 * @param {Event} e
 * @param {YAHOO.util.DragDrop} oDD the clicked dd object (this dd obj)
 * @private
 */

/**
 * @id YAHOO.util.DragDrop.clickValidator
 * @method clickValidator
 * @description Method validates that the clicked element
 * was indeed the handle or a valid child of the handle
 * @param {Event} e
 */

/**
 * Finds the location the element should be placed if we want to move
 * it to where the mouse location less the click offset would place us.
 * @id YAHOO.util.DragDrop.getTargetCoord
 * @method getTargetCoord
 * @param {int} iPageX the X coordinate of the click
 * @param {int} iPageY the Y coordinate of the click
 * @return an object that contains the coordinates (Object.x and Object.y)
 * @private
 */

/**
 * Allows you to specify a tag name that should not start a drag operation
 * when clicked.  This is designed to facilitate embedding links within a
 * drag handle that do something other than start the drag.
 * @id YAHOO.util.DragDrop.addInvalidHandleType
 * @method addInvalidHandleType
 * @param {string} tagName the type of element to exclude
 */

/**
 * Lets you to specify an element id for a child of a drag handle
 * that should not initiate a drag
 * @id YAHOO.util.DragDrop.addInvalidHandleId
 * @method addInvalidHandleId
 * @param {string} id the element id of the element you wish to ignore
 */

/**
 * Lets you specify a css class of elements that will not initiate a drag
 * @id YAHOO.util.DragDrop.addInvalidHandleClass
 * @method addInvalidHandleClass
 * @param {string} cssClass the class of the elements you wish to ignore
 */

/**
 * Unsets an excluded tag name set by addInvalidHandleType
 * @id YAHOO.util.DragDrop.removeInvalidHandleType
 * @method removeInvalidHandleType
 * @param {string} tagName the type of element to unexclude
 */

/**
 * Unsets an invalid handle id
 * @id YAHOO.util.DragDrop.removeInvalidHandleId
 * @method removeInvalidHandleId
 * @param {string} id the id of the element to re-enable
 */

/**
 * Unsets an invalid css class
 * @id YAHOO.util.DragDrop.removeInvalidHandleClass
 * @method removeInvalidHandleClass
 * @param {string} cssClass the class of the element(s) you wish to
 * re-enable
 */

/**
 * Checks the tag exclusion list to see if this click should be ignored
 * @id YAHOO.util.DragDrop.isValidHandleChild
 * @method isValidHandleChild
 * @param {HTMLElement} node the HTMLElement to evaluate
 * @return {boolean} true if this is a valid tag type, false if not
 */

/**
 * Create the array of horizontal tick marks if an interval was specified
 * in setXConstraint().
 * @id YAHOO.util.DragDrop.setXTicks
 * @method setXTicks
 * @private
 */

/**
 * Create the array of vertical tick marks if an interval was specified in
 * setYConstraint().
 * @id YAHOO.util.DragDrop.setYTicks
 * @method setYTicks
 * @private
 */

/**
 * By default, the element can be dragged any place on the screen.  Use
 * this method to limit the horizontal travel of the element.  Pass in
 * 0,0 for the parameters if you want to lock the drag to the y axis.
 * @id YAHOO.util.DragDrop.setXConstraint
 * @method setXConstraint
 * @param {int} iLeft the number of pixels the element can move to the left
 * @param {int} iRight the number of pixels the element can move to the
 * right
 * @param {int} iTickSize optional parameter for specifying that the
 * element
 * should move iTickSize pixels at a time.
 */

/**
 * Clears any constraints applied to this instance.  Also clears ticks
 * since they can't exist independent of a constraint at this time.
 * @id YAHOO.util.DragDrop.clearConstraints
 * @method clearConstraints
 */

/**
 * Clears any tick interval defined for this instance
 * @id YAHOO.util.DragDrop.clearTicks
 * @method clearTicks
 */

/**
 * By default, the element can be dragged any place on the screen.  Set
 * this to limit the vertical travel of the element.  Pass in 0,0 for the
 * parameters if you want to lock the drag to the x axis.
 * @id YAHOO.util.DragDrop.setYConstraint
 * @method setYConstraint
 * @param {int} iUp the number of pixels the element can move up
 * @param {int} iDown the number of pixels the element can move down
 * @param {int} iTickSize optional parameter for specifying that the
 * element should move iTickSize pixels at a time.
 */

/**
 * resetConstraints must be called if you manually reposition a dd element.
 * @id YAHOO.util.DragDrop.resetConstraints
 * @method resetConstraints
 */

/**
 * Normally the drag element is moved pixel by pixel, but we can specify
 * that it move a number of pixels at a time.  This method resolves the
 * location when we have it set up like this.
 * @id YAHOO.util.DragDrop.getTick
 * @method getTick
 * @param {int} val where we want to place the object
 * @param {int[]} tickArray sorted array of valid points
 * @return {int} the closest tick
 * @private
 */

/**
 * toString method
 * @id YAHOO.util.DragDrop.toString
 * @method toString
 * @return {string} string representation of the dd obj
 */

/**
 * @id YAHOO.util.DragDrop.mouseDownEvent
 * @event mouseDownEvent
 * @description Provides access to the mousedown event. The mousedown does not always result in a drag operation.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.b4MouseDownEvent
 * @event b4MouseDownEvent
 * @description Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.mouseUpEvent
 * @event mouseUpEvent
 * @description Fired from inside DragDropMgr when the drag operation is finished.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.b4StartDragEvent
 * @event b4StartDragEvent
 * @description Fires before the startDragEvent, returning false will cancel the startDrag Event.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.startDragEvent
 * @event startDragEvent
 * @description Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.b4EndDragEvent
 * @event b4EndDragEvent
 * @description Fires before the endDragEvent. Returning false will cancel.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.endDragEvent
 * @event endDragEvent
 * @description Fires on the mouseup event after a drag has been initiated (startDrag fired).
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.dragEvent
 * @event dragEvent
 * @description Occurs every mousemove event while dragging.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.b4DragEvent
 * @event b4DragEvent
 * @description Fires before the dragEvent.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.invalidDropEvent
 * @event invalidDropEvent
 * @description Fires when the dragged objects is dropped in a location that contains no drop targets.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.b4DragOutEvent
 * @event b4DragOutEvent
 * @description Fires before the dragOutEvent
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.dragOutEvent
 * @event dragOutEvent
 * @description Fires when a dragged object is no longer over an object that had the onDragEnter fire.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.dragEnterEvent
 * @event dragEnterEvent
 * @description Occurs when the dragged object first interacts with another targettable drag and drop object.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.b4DragOverEvent
 * @event b4DragOverEvent
 * @description Fires before the dragOverEvent.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.dragOverEvent
 * @event dragOverEvent
 * @description Fires every mousemove event while over a drag and drop object.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.b4DragDropEvent
 * @event b4DragDropEvent
 * @description Fires before the dragDropEvent
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DragDrop.dragDropEvent
 * @event dragDropEvent
 * @description Fires when the dragged objects is dropped on another.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * A DragDrop implementation where the linked element follows the
 * mouse cursor during a drag.
 * @id YAHOO.util.DD
 * @class DD
 * @extends YAHOO.util.DragDrop
 * @constructor
 * @param {String} id the id of the linked element
 * @param {String} sGroup the group of related DragDrop items
 * @param {object} config an object containing configurable attributes
 *                Valid properties for DD:
 *                    scroll
 */

/**
 * When set to true, the utility automatically tries to scroll the browser
 * window wehn a drag and drop element is dragged near the viewport boundary.
 * Defaults to true.
 * @id YAHOO.util.DD.scroll
 * @property scroll
 * @type boolean
 */

/**
 * Sets the pointer offset to the distance between the linked element's top
 * left corner and the location the element was clicked
 * @id YAHOO.util.DD.autoOffset
 * @method autoOffset
 * @param {int} iPageX the X coordinate of the click
 * @param {int} iPageY the Y coordinate of the click
 */

/**
 * Sets the pointer offset.  You can call this directly to force the
 * offset to be in a particular location (e.g., pass in 0,0 to set it
 * to the center of the object, as done in YAHOO.widget.Slider)
 * @id YAHOO.util.DD.setDelta
 * @method setDelta
 * @param {int} iDeltaX the distance from the left
 * @param {int} iDeltaY the distance from the top
 */

/**
 * Sets the drag element to the location of the mousedown or click event,
 * maintaining the cursor location relative to the location on the element
 * that was clicked.  Override this if you want to place the element in a
 * location other than where the cursor is.
 * @id YAHOO.util.DD.setDragElPos
 * @method setDragElPos
 * @param {int} iPageX the X coordinate of the mousedown or drag event
 * @param {int} iPageY the Y coordinate of the mousedown or drag event
 */

/**
 * Sets the element to the location of the mousedown or click event,
 * maintaining the cursor location relative to the location on the element
 * that was clicked.  Override this if you want to place the element in a
 * location other than where the cursor is.
 * @id YAHOO.util.DD.alignElWithMouse
 * @method alignElWithMouse
 * @param {HTMLElement} el the element to move
 * @param {int} iPageX the X coordinate of the mousedown or drag event
 * @param {int} iPageY the Y coordinate of the mousedown or drag event
 */

/**
 * Saves the most recent position so that we can reset the constraints and
 * tick marks on-demand.  We need to know this so that we can calculate the
 * number of pixels the element is offset from its original position.
 * @id YAHOO.util.DD.cachePosition
 * @method cachePosition
 * @param iPageX the current x position (optional, this just makes it so we
 * don't have to look it up again)
 * @param iPageY the current y position (optional, this just makes it so we
 * don't have to look it up again)
 */

/**
 * Auto-scroll the window if the dragged object has been moved beyond the
 * visible window boundary.
 * @id YAHOO.util.DD.autoScroll
 * @method autoScroll
 * @param {int} x the drag element's x position
 * @param {int} y the drag element's y position
 * @param {int} h the height of the drag element
 * @param {int} w the width of the drag element
 * @private
 */

/**
 * @id YAHOO.util.DD.mouseDownEvent
 * @event mouseDownEvent
 * @description Provides access to the mousedown event. The mousedown does not always result in a drag operation.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.b4MouseDownEvent
 * @event b4MouseDownEvent
 * @description Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.mouseUpEvent
 * @event mouseUpEvent
 * @description Fired from inside DragDropMgr when the drag operation is finished.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.b4StartDragEvent
 * @event b4StartDragEvent
 * @description Fires before the startDragEvent, returning false will cancel the startDrag Event.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.startDragEvent
 * @event startDragEvent
 * @description Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.b4EndDragEvent
 * @event b4EndDragEvent
 * @description Fires before the endDragEvent. Returning false will cancel.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.endDragEvent
 * @event endDragEvent
 * @description Fires on the mouseup event after a drag has been initiated (startDrag fired).
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.dragEvent
 * @event dragEvent
 * @description Occurs every mousemove event while dragging.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.b4DragEvent
 * @event b4DragEvent
 * @description Fires before the dragEvent.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.invalidDropEvent
 * @event invalidDropEvent
 * @description Fires when the dragged objects is dropped in a location that contains no drop targets.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.b4DragOutEvent
 * @event b4DragOutEvent
 * @description Fires before the dragOutEvent
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.dragOutEvent
 * @event dragOutEvent
 * @description Fires when a dragged object is no longer over an object that had the onDragEnter fire.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.dragEnterEvent
 * @event dragEnterEvent
 * @description Occurs when the dragged object first interacts with another targettable drag and drop object.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.b4DragOverEvent
 * @event b4DragOverEvent
 * @description Fires before the dragOverEvent.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.dragOverEvent
 * @event dragOverEvent
 * @description Fires every mousemove event while over a drag and drop object.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.b4DragDropEvent
 * @event b4DragDropEvent
 * @description Fires before the dragDropEvent
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DD.dragDropEvent
 * @event dragDropEvent
 * @description Fires when the dragged objects is dropped on another.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * A DragDrop implementation that inserts an empty, bordered div into
 * the document that follows the cursor during drag operations.  At the time of
 * the click, the frame div is resized to the dimensions of the linked html
 * element, and moved to the exact location of the linked element.
 *
 * References to the "frame" element refer to the single proxy element that
 * was created to be dragged in place of all DDProxy elements on the
 * page.
 *
 * @id YAHOO.util.DDProxy
 * @class DDProxy
 * @extends YAHOO.util.DD
 * @constructor
 * @param {String} id the id of the linked html element
 * @param {String} sGroup the group of related DragDrop objects
 * @param {object} config an object containing configurable attributes
 *                Valid properties for DDProxy in addition to those in DragDrop:
 *                   resizeFrame, centerFrame, dragElId
 */

/**
 * The default drag frame div id
 * @id YAHOO.util.DDProxy.YAHOO.util.DDProxy.dragElId
 * @property YAHOO.util.DDProxy.dragElId
 * @type String
 * @static
 */

/**
 * By default we resize the drag frame to be the same size as the element
 * we want to drag (this is to get the frame effect).  We can turn it off
 * if we want a different behavior.
 * @id YAHOO.util.DDProxy.resizeFrame
 * @property resizeFrame
 * @type boolean
 */

/**
 * By default the frame is positioned exactly where the drag element is, so
 * we use the cursor offset provided by YAHOO.util.DD.  Another option that works only if
 * you do not have constraints on the obj is to have the drag frame centered
 * around the cursor.  Set centerFrame to true for this effect.
 * @id YAHOO.util.DDProxy.centerFrame
 * @property centerFrame
 * @type boolean
 */

/**
 * Creates the proxy element if it does not yet exist
 * @id YAHOO.util.DDProxy.createFrame
 * @method createFrame
 */

/**
 * Initialization for the drag frame element.  Must be called in the
 * constructor of all subclasses
 * @id YAHOO.util.DDProxy.initFrame
 * @method initFrame
 */

/**
 * Resizes the drag frame to the dimensions of the clicked object, positions
 * it over the object, and finally displays it
 * @id YAHOO.util.DDProxy.showFrame
 * @method showFrame
 * @param {int} iPageX X click position
 * @param {int} iPageY Y click position
 * @private
 */

/**
 * The proxy is automatically resized to the dimensions of the linked
 * element when a drag is initiated, unless resizeFrame is set to false
 * @id YAHOO.util.DDProxy._resizeProxy
 * @method _resizeProxy
 * @private
 */

/**
 * @id YAHOO.util.DDProxy.mouseDownEvent
 * @event mouseDownEvent
 * @description Provides access to the mousedown event. The mousedown does not always result in a drag operation.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.b4MouseDownEvent
 * @event b4MouseDownEvent
 * @description Provides access to the mousedown event, before the mouseDownEvent gets fired. Returning false will cancel the drag.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.mouseUpEvent
 * @event mouseUpEvent
 * @description Fired from inside DragDropMgr when the drag operation is finished.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.b4StartDragEvent
 * @event b4StartDragEvent
 * @description Fires before the startDragEvent, returning false will cancel the startDrag Event.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.startDragEvent
 * @event startDragEvent
 * @description Occurs after a mouse down and the drag threshold has been met. The drag threshold default is either 3 pixels of mouse movement or 1 full second of holding the mousedown.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.b4EndDragEvent
 * @event b4EndDragEvent
 * @description Fires before the endDragEvent. Returning false will cancel.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.endDragEvent
 * @event endDragEvent
 * @description Fires on the mouseup event after a drag has been initiated (startDrag fired).
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.dragEvent
 * @event dragEvent
 * @description Occurs every mousemove event while dragging.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.b4DragEvent
 * @event b4DragEvent
 * @description Fires before the dragEvent.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.invalidDropEvent
 * @event invalidDropEvent
 * @description Fires when the dragged objects is dropped in a location that contains no drop targets.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.b4DragOutEvent
 * @event b4DragOutEvent
 * @description Fires before the dragOutEvent
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.dragOutEvent
 * @event dragOutEvent
 * @description Fires when a dragged object is no longer over an object that had the onDragEnter fire.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.dragEnterEvent
 * @event dragEnterEvent
 * @description Occurs when the dragged object first interacts with another targettable drag and drop object.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.b4DragOverEvent
 * @event b4DragOverEvent
 * @description Fires before the dragOverEvent.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.dragOverEvent
 * @event dragOverEvent
 * @description Fires every mousemove event while over a drag and drop object.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.b4DragDropEvent
 * @event b4DragDropEvent
 * @description Fires before the dragDropEvent
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * @id YAHOO.util.DDProxy.dragDropEvent
 * @event dragDropEvent
 * @description Fires when the dragged objects is dropped on another.
 * @type YAHOO.util.CustomEvent See Element.addListener for more information on listening for this event.
 */

/**
 * A DragDrop implementation that does not move, but can be a drop
 * target.  You would get the same result by simply omitting implementation
 * for the event callbacks, but this way we reduce the processing cost of the
 * event listener and the callbacks.
 * @id YAHOO.util.DDTarget
 * @class DDTarget
 * @extends YAHOO.util.DragDrop
 * @constructor
 * @param {String} id the id of the element that is a drop target
 * @param {String} sGroup the group of related DragDrop objects
 * @param {object} config an object containing configurable attributes
 *                 Valid properties for DDTarget in addition to those in
 *                 DragDrop:
 *                    none
 */

/**
 * @id YAHOO.widget.ToolbarButtonAdvanced
 * @description <p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>
 * @class ToolbarButtonAdvanced
 * @namespace YAHOO.widget
 * @requires yahoo, dom, element, event, container_core, menu, button
 * @beta
 *
 * Provides a toolbar button based on the button and menu widgets.
 * @constructor
 * @param {String/HTMLElement} el The element to turn into a button.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.ToolbarButtonAdvanced.buttonType
 * @property buttonType
 * @private
 * @description Tells if the Button is a Rich Button or a Simple Button
 */

/**
 * @id YAHOO.widget.ToolbarButtonAdvanced.checkValue
 * @method checkValue
 * @param {String} value The value of the option that we want to mark as selected
 * @description Select an option by value
 */

/**
 * @id YAHOO.widget.ToolbarButton
 * @description <p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>
 * @class ToolbarButton
 * @namespace YAHOO.widget
 * @requires yahoo, dom, element, event
 * @extends YAHOO.util.Element
 * @beta
 *
 * Provides a toolbar button based on the button and menu widgets, <select> elements are used in place of menu's.
 * @constructor
 * @param {String/HTMLElement} el The element to turn into a button.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.ToolbarButton.buttonType
 * @property buttonType
 * @private
 * @description Tells if the Button is a Rich Button or a Simple Button
 */

/**
 * @id YAHOO.widget.ToolbarButton._handleMouseOver
 * @method _handleMouseOver
 * @private
 * @description Adds classes to the button elements on mouseover (hover)
 */

/**
 * @id YAHOO.widget.ToolbarButton._handleMouseOut
 * @method _handleMouseOut
 * @private
 * @description Removes classes from the button elements on mouseout (hover)
 */

/**
 * @id YAHOO.widget.ToolbarButton.checkValue
 * @method checkValue
 * @param {String} value The value of the option that we want to mark as selected
 * @description Select an option by value
 */

/**
 * @id YAHOO.widget.ToolbarButton.init
 * @method init
 * @description The ToolbarButton class's initialization method
 */

/**
 * @id YAHOO.widget.ToolbarButton.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create
 * the toolbar.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the toolbar.
 */

/**
 * @id YAHOO.widget.ToolbarButton.value
 * @attribute value
 * @description The value of the button
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.menu
 * @attribute menu
 * @description The menu attribute, see YAHOO.widget.Button
 * @type Object
 */

/**
 * @id YAHOO.widget.ToolbarButton.type
 * @attribute type
 * @description The type of button to create: push, menu, color, select, spin
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.disabled
 * @attribute disabled
 * @description Set the button into a disabled state
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.label
 * @attribute label
 * @description The text label for the button
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.title
 * @attribute title
 * @description The title of the button
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.container
 * @config container
 * @description The container that the button is rendered to, handled by Toolbar
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton._handleSelect
 * @private
 * @method _handleSelect
 * @description The event fired when a change event gets fired on a select element
 * @param {Event} ev The change event.
 */

/**
 * @id YAHOO.widget.ToolbarButton.getMenu
 * @method getMenu
 * @description A stub function to mimic YAHOO.widget.Button's getMenu method
 */

/**
 * @id YAHOO.widget.ToolbarButton.fireEvent
 * @method fireEvent
 * @description Overridden fireEvent method to prevent DOM events from firing if the button is disabled.
 */

/**
 * @id YAHOO.widget.ToolbarButton.toString
 * @method toString
 * @description Returns a string representing the toolbar.
 * @return {String}
 */

/**
 * Provides a rich toolbar widget based on the button and menu widgets
 * @id YAHOO.widget.Toolbar
 * @constructor
 * @class Toolbar
 * @extends YAHOO.util.Element
 * @param {String/HTMLElement} el The element to turn into a toolbar.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.Toolbar._addMenuClasses
 * @method _addMenuClasses
 * @private
 * @description This method is called from Menu's renderEvent to add a few more classes to the menu items
 * @param {String} ev The event that fired.
 * @param {Array} na Array of event information.
 * @param {Object} o Button config object.
 */

/**
 * @id YAHOO.widget.Toolbar.buttonType
 * @property buttonType
 * @description The default button to use
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar.dd
 * @property dd
 * @description The DragDrop instance associated with the Toolbar
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar._colorData
 * @property _colorData
 * @description Object reference containing colors hex and text values.
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar._colorPicker
 * @property _colorPicker
 * @description The HTML Element containing the colorPicker
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar.STR_COLLAPSE
 * @property STR_COLLAPSE
 * @description String for Toolbar Collapse Button
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.STR_SPIN_LABEL
 * @property STR_SPIN_LABEL
 * @description String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.STR_SPIN_UP
 * @property STR_SPIN_UP
 * @description String for spinbutton up
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.STR_SPIN_DOWN
 * @property STR_SPIN_DOWN
 * @description String for spinbutton down
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar._titlebar
 * @property _titlebar
 * @description Object reference to the titlebar
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar.browser
 * @property browser
 * @description Standard browser detection
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar._buttonList
 * @protected
 * @property _buttonList
 * @description Internal property list of current buttons in the toolbar
 * @type Array
 */

/**
 * @id YAHOO.widget.Toolbar._buttonGroupList
 * @protected
 * @property _buttonGroupList
 * @description Internal property list of current button groups in the toolbar
 * @type Array
 */

/**
 * @id YAHOO.widget.Toolbar._sep
 * @protected
 * @property _sep
 * @description Internal reference to the separator HTML Element for cloning
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar._sepCount
 * @protected
 * @property _sepCount
 * @description Internal refernce for counting separators, so we can give them a useful class name for styling
 * @type Number
 */

/**
 * @id YAHOO.widget.Toolbar.draghandle
 * @protected
 * @property draghandle
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar._toolbarConfigs
 * @protected
 * @property _toolbarConfigs
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_CONTAINER
 * @protected
 * @property CLASS_CONTAINER
 * @description Default CSS class to apply to the toolbar container element
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_DRAGHANDLE
 * @protected
 * @property CLASS_DRAGHANDLE
 * @description Default CSS class to apply to the toolbar's drag handle element
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_SEPARATOR
 * @protected
 * @property CLASS_SEPARATOR
 * @description Default CSS class to apply to all separators in the toolbar
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_DISABLED
 * @protected
 * @property CLASS_DISABLED
 * @description Default CSS class to apply when the toolbar is disabled
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_PREFIX
 * @protected
 * @property CLASS_PREFIX
 * @description Default prefix for dynamically created class names
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.init
 * @method init
 * @description The Toolbar class's initialization method
 */

/**
 * @id YAHOO.widget.Toolbar.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create
 * the toolbar.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the toolbar.
 */

/**
 * @id YAHOO.widget.Toolbar.buttonType
 * @attribute buttonType
 * @description The buttonType to use (advanced or basic)
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.buttons
 * @attribute buttons
 * @description Object specifying the buttons to include in the toolbar
 * Example:
 * <code><pre>
 * {
 *   { id: 'b3', type: 'button', label: 'Underline', value: 'underline' },
 *   { type: 'separator' },
 *   { id: 'b4', type: 'menu', label: 'Align', value: 'align',
 *       menu: [
 *           { text: "Left", value: 'alignleft' },
 *           { text: "Center", value: 'aligncenter' },
 *           { text: "Right", value: 'alignright' }
 *       ]
 *   }
 * }
 * </pre></code>
 * @type Array
 */

/**
 * @id YAHOO.widget.Toolbar.disabled
 * @attribute disabled
 * @description Boolean indicating if the toolbar should be disabled. It will also disable the draggable attribute if it is on.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.cont
 * @config cont
 * @description The container for the toolbar.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar.grouplabels
 * @attribute grouplabels
 * @description Boolean indicating if the toolbar should show the group label's text string.
 * @default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.titlebar
 * @attribute titlebar
 * @description Boolean indicating if the toolbar should have a titlebar. If
 * passed a string, it will use that as the titlebar text
 * @default false
 * @type Boolean or String
 */

/**
 * @id YAHOO.widget.Toolbar.collapse
 * @attribute collapse
 * @description Boolean indicating if the the titlebar should have a collapse button.
 * The collapse button will not remove the toolbar, it will minimize it to the titlebar
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.draggable
 * @attribute draggable
 * @description Boolean indicating if the toolbar should be draggable.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.dd
 * @property dd
 * @description The DragDrop instance associated with the Toolbar
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar.addButtonGroup
 * @method addButtonGroup
 * @description Add a new button group to the toolbar. (uses addButton)
 * @param {Object} oGroup Object literal reference to the Groups Config (contains an array of button configs)
 */

/**
 * @id YAHOO.widget.Toolbar.addButtonToGroup
 * @method addButtonToGroup
 * @description Add a new button to a toolbar group. Buttons supported:
 *   push, split, menu, select, color, spin
 * @param {Object} oButton Object literal reference to the Button's Config
 * @param {String} group The Group identifier passed into the initial config
 * @param {HTMLElement} after Optional HTML element to insert this button after in the DOM.
 */

/**
 * @id YAHOO.widget.Toolbar.addButton
 * @method addButton
 * @description Add a new button to the toolbar. Buttons supported:
 *   push, split, menu, select, color, spin
 * @param {Object} oButton Object literal reference to the Button's Config
 * @param {HTMLElement} after Optional HTML element to insert this button after in the DOM.
 */

/**
 * @id YAHOO.widget.Toolbar.addSeparator
 * @method addSeparator
 * @description Add a new button separator to the toolbar.
 * @param {HTMLElement} cont Optional HTML element to insert this button into.
 * @param {HTMLElement} after Optional HTML element to insert this button after in the DOM.
 */

/**
 * @id YAHOO.widget.Toolbar._createColorPicker
 * @method _createColorPicker
 * @private
 * @description Creates the core DOM reference to the color picker menu item.
 * @param {String} id the id of the toolbar to prefix this DOM container with.
 */

/**
 * @id YAHOO.widget.Toolbar._resetColorPicker
 * @method _resetColorPicker
 * @private
 * @description Clears the currently selected color or mouseover color in the color picker.
 */

/**
 * @id YAHOO.widget.Toolbar._makeColorButton
 * @method _makeColorButton
 * @private
 * @description Called to turn a "color" button into a menu button with an Overlay for the menu.
 * @param {Object} _oButton YAHOO.widget.ToolbarButton reference
 */

/**
 * @id YAHOO.widget.Toolbar._makeSpinButton
 * @private
 * @method _makeSpinButton
 * @description Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values.
 * @param {Object} _button YAHOO.widget.ToolbarButton reference
 * @param {Object} oButton Object literal containing the buttons initial config
 */

/**
 * @id YAHOO.widget.Toolbar._buttonClick
 * @protected
 * @method _buttonClick
 * @description Click handler for all buttons in the toolbar.
 * @param {String} ev The event that was passed in.
 * @param {Object} info Object literal of information about the button that was clicked.
 */

/**
 * @id YAHOO.widget.Toolbar.getButtonById
 * @method getButtonById
 * @description Gets a button instance from the toolbar by is Dom id.
 * @param {String} id The Dom id to query for.
 * @return {YAHOO.widget.ToolbarButton}
 */

/**
 * @id YAHOO.widget.Toolbar.getButtonByValue
 * @method getButtonByValue
 * @description Gets a button instance or a menuitem instance from the toolbar by it's value.
 * @param {String} value The button value to query for.
 * @return {YAHOO.widget.ToolbarButton or YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Toolbar.getButtonByIndex
 * @method getButtonByIndex
 * @description Gets a button instance from the toolbar by is index in _buttonList.
 * @param {Number} index The index of the button in _buttonList.
 * @return {YAHOO.widget.ToolbarButton}
 */

/**
 * @id YAHOO.widget.Toolbar.getButtons
 * @method getButtons
 * @description Returns an array of buttons in the current toolbar
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Toolbar.disableButton
 * @method disableButton
 * @description Disables a button in the toolbar.
 * @param {String/Number} id Disable a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.enableButton
 * @method enableButton
 * @description Enables a button in the toolbar.
 * @param {String/Number} id Enable a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.selectButton
 * @method selectButton
 * @description Selects a button in the toolbar.
 * @param {String/Number} id Select a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.deselectButton
 * @method deselectButton
 * @description Deselects a button in the toolbar.
 * @param {String/Number} id Deselect a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.deselectAllButtons
 * @method deselectAllButtons
 * @description Deselects all buttons in the toolbar.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.disableAllButtons
 * @method disableAllButtons
 * @description Disables all buttons in the toolbar.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.enableAllButtons
 * @method enableAllButtons
 * @description Enables all buttons in the toolbar.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.resetAllButtons
 * @method resetAllButtons
 * @description Resets all buttons to their initial state.
 * @param {Object} _ex Except these buttons
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.destroyButton
 * @method destroyButton
 * @description Destroy a button in the toolbar.
 * @param {String/Number} id Destroy a button by it's id or index.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.destroy
 * @method destroy
 * @description Destroys the toolbar, all of it's elements and objects.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.collapse
 * @method collapse
 * @description Programatically collapse the toolbar.
 * @param {Boolean} collapse True to collapse, false to expand.
 */

/**
 * @id YAHOO.widget.Toolbar.toString
 * @method toString
 * @description Returns a string representing the toolbar.
 * @return {String}
 */

/**
 * @id YAHOO.widget.Toolbar.buttonClick
 * @event buttonClick
 * @param {Object} o The object passed to this handler is the button config used to create the button.
 * @description Fires when any botton receives a click event. Passes back a single object representing the buttons config object. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Toolbar.valueClick
 * @event valueClick
 * @param {Object} o The object passed to this handler is the button config used to create the button.
 * @description This is a special dynamic event that is created and dispatched based on the value property
 * of the button config. See Element.addListener for more information on listening for this event.
 * Example:
 * <code><pre>
 * buttons : [
 *   { type: 'button', value: 'test', value: 'testButton' }
 * ]</pre>
 * </code>
 * With the valueClick event you could subscribe to this buttons click event with this:
 * tbar.in('testButtonClick', function() { alert('test button clicked'); })
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Toolbar.toolbarExpanded
 * @event toolbarExpanded
 * @description Fires when the toolbar is expanded via the collapse button. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Toolbar.toolbarCollapsed
 * @event toolbarCollapsed
 * @description Fires when the toolbar is collapsed via the collapse button. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.
 * @id YAHOO.widget.SimpleEditor
 * @constructor
 * @class SimpleEditor
 * @extends YAHOO.util.Element
 * @param {String/HTMLElement} el The textarea element to turn into an editor.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.SimpleEditor._cleanClassName
 * @private
 * @method _cleanClassName
 * @description Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.
 * @param {String} str The classname to clean up
 * @return {String}
 */

/**
 * @id YAHOO.widget.SimpleEditor._docType
 * @property _docType
 * @description The DOCTYPE to use in the editable container.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorDirty
 * @property editorDirty
 * @description This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed.
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._defaultCSS
 * @property _defaultCSS
 * @description The default CSS used in the config for 'css'. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + 'ADD MYY CSS HERE' }
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor._defaultToolbar
 * @property _defaultToolbar
 * @private
 * @description Default toolbar config.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastButton
 * @property _lastButton
 * @private
 * @description The last button pressed, so we don't disable it.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._baseHREF
 * @property _baseHREF
 * @private
 * @description The base location of the editable page (this page) so that relative paths for image work.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastImage
 * @property _lastImage
 * @private
 * @description Safari reference for the last image selected (for styling as selected).
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor._blankImageLoaded
 * @property _blankImageLoaded
 * @private
 * @description Don't load the blank image more than once..
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._fixNodesTimer
 * @property _fixNodesTimer
 * @private
 * @description Holder for the fixNodes timer
 * @type Date
 */

/**
 * @id YAHOO.widget.SimpleEditor._nodeChangeTimer
 * @property _nodeChangeTimer
 * @private
 * @description Holds a reference to the nodeChange setTimeout call
 * @type Number
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastNodeChangeEvent
 * @property _lastNodeChangeEvent
 * @private
 * @description Flag to determine the last event that fired a node change
 * @type Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastNodeChange
 * @property _lastNodeChange
 * @private
 * @description Flag to determine when the last node change was fired
 * @type Date
 */

/**
 * @id YAHOO.widget.SimpleEditor._rendered
 * @property _rendered
 * @private
 * @description Flag to determine if editor has been rendered or not
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.DOMReady
 * @property DOMReady
 * @private
 * @description Flag to determine if DOM is ready or not
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._selection
 * @property _selection
 * @private
 * @description Holder for caching iframe selections
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._mask
 * @property _mask
 * @private
 * @description DOM Element holder for the editor Mask when disabled
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._showingHiddenElements
 * @property _showingHiddenElements
 * @private
 * @description Status of the hidden elements button
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentWindow
 * @property currentWindow
 * @description A reference to the currently open EditorWindow
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentEvent
 * @property currentEvent
 * @description A reference to the current editor event
 * @type Event
 */

/**
 * @id YAHOO.widget.SimpleEditor.operaEvent
 * @property operaEvent
 * @private
 * @description setTimeout holder for Opera and Image DoubleClick event..
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentFont
 * @property currentFont
 * @description A reference to the last font selected from the Toolbar
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentElement
 * @property currentElement
 * @description A reference to the current working element in the editor
 * @type Array
 */

/**
 * @id YAHOO.widget.SimpleEditor.dompath
 * @property dompath
 * @description A reference to the dompath container for writing the current working dom path to.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.beforeElement
 * @property beforeElement
 * @description A reference to the H2 placed before the editor for Accessibilty.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterElement
 * @property afterElement
 * @description A reference to the H2 placed after the editor for Accessibilty.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.invalidHTML
 * @property invalidHTML
 * @description Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to "{ keepContents: true }", then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbar
 * @property toolbar
 * @description Local property containing the YAHOO.widget.Toolbar instance
 * @type YAHOO.widget.Toolbar
 */

/**
 * @id YAHOO.widget.SimpleEditor._contentTimer
 * @private
 * @property _contentTimer
 * @description setTimeout holder for documentReady check
 */

/**
 * @id YAHOO.widget.SimpleEditor._contentTimerCounter
 * @private
 * @property _contentTimerCounter
 * @description Counter to check the number of times the body is polled for before giving up
 * @type Number
 */

/**
 * @id YAHOO.widget.SimpleEditor._disabled
 * @private
 * @property _disabled
 * @description The Toolbar items that should be disabled if there is no selection present in the editor.
 * @type Array
 */

/**
 * @id YAHOO.widget.SimpleEditor._alwaysDisabled
 * @private
 * @property _alwaysDisabled
 * @description The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._alwaysEnabled
 * @private
 * @property _alwaysEnabled
 * @description The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._semantic
 * @private
 * @property _semantic
 * @description The Toolbar commands that we should attempt to make tags out of instead of using styles.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._tag2cmd
 * @private
 * @property _tag2cmd
 * @description A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._getDoc
 * @private
 * @method _getDoc
 * @description Get the Document of the IFRAME
 * @return {Object}
 */

/**
 * @id YAHOO.widget.SimpleEditor._getWindow
 * @private
 * @method _getWindow
 * @description Get the Window of the IFRAME
 * @return {Object}
 */

/**
 * @id YAHOO.widget.SimpleEditor._focusWindow
 * @private
 * @method _focusWindow
 * @description Attempt to set the focus of the iframes window.
 * @param {Boolean} onLoad Safari needs some special care to set the cursor in the iframe
 */

/**
 * @id YAHOO.widget.SimpleEditor._hasSelection
 * @private
 * @method _hasSelection
 * @description Determines if there is a selection in the editor document.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.SimpleEditor._getSelection
 * @private
 * @method _getSelection
 * @description Handles the different selection objects across the A-Grade list.
 * @return {Object} Selection Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._selectNode
 * @private
 * @method _selectNode
 * @description Places the highlight around a given node
 * @param {HTMLElement} node The node to select
 */

/**
 * @id YAHOO.widget.SimpleEditor._getRange
 * @private
 * @method _getRange
 * @description Handles the different range objects across the A-Grade list.
 * @return {Object} Range Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._setDesignMode
 * @private
 * @method _setDesignMode
 * @description Sets the designMode of the iFrame document.
 * @param {String} state This should be either on or off
 */

/**
 * @id YAHOO.widget.SimpleEditor._toggleDesignMode
 * @private
 * @method _toggleDesignMode
 * @description Toggles the designMode of the iFrame document on and off.
 * @return {String} The state that it was set to.
 */

/**
 * @id YAHOO.widget.SimpleEditor._initEditor
 * @private
 * @method _initEditor
 * @description This method is fired from _checkLoaded when the document is ready. It turns on designMode and set's up the listeners.
 */

/**
 * @id YAHOO.widget.SimpleEditor._checkLoaded
 * @private
 * @method _checkLoaded
 * @description Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor._setInitialContent
 * @private
 * @method _setInitialContent
 * @description This method will open the iframes content document and write the textareas value into it, then start the body.onload checking.
 */

/**
 * @id YAHOO.widget.SimpleEditor._setMarkupType
 * @private
 * @method _setMarkupType
 * @param {String} action The action to take. Possible values are: css, default or semantic
 * @description This method will turn on/off the useCSS execCommand.
 */

/**
 * Set the editor to use CSS instead of HTML
 * @id YAHOO.widget.SimpleEditor._setEditorStyle
 * @param {Booleen} stat True/False
 * @method _setEditorStyle
 */

/**
 * @id YAHOO.widget.SimpleEditor._getSelectedElement
 * @private
 * @method _getSelectedElement
 * @description This method will attempt to locate the element that was last interacted with, either via selection, location or event.
 * @return {HTMLElement} The currently selected element.
 */

/**
 * @id YAHOO.widget.SimpleEditor._getDomPath
 * @private
 * @method _getDomPath
 * @description This method will attempt to build the DOM path from the currently selected element.
 * @param HTMLElement el The element to start with, if not provided _getSelectedElement is used
 * @return {Array} An array of node references that will create the DOM Path.
 */

/**
 * @id YAHOO.widget.SimpleEditor._writeDomPath
 * @private
 * @method _writeDomPath
 * @description Write the current DOM path out to the dompath container below the editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor._fixNodes
 * @private
 * @method _fixNodes
 * @description Fix href and imgs as well as remove invalid HTML.
 */

/**
 * @id YAHOO.widget.SimpleEditor._isNonEditable
 * @private
 * @method _isNonEditable
 * @param Event ev The Dom event being checked
 * @description Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.
 * If it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also
 * disable and enable the Editor's toolbar based on the noedit state.
 * @return Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._setCurrentEvent
 * @private
 * @method _setCurrentEvent
 * @param {Event} ev The event to cache
 * @description Sets the current event property
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleClick
 * @private
 * @method _handleClick
 * @param {Event} ev The event we are working on.
 * @description Handles all click events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleMouseUp
 * @private
 * @method _handleMouseUp
 * @param {Event} ev The event we are working on.
 * @description Handles all mouseup events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleMouseDown
 * @private
 * @method _handleMouseDown
 * @param {Event} ev The event we are working on.
 * @description Handles all mousedown events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleDoubleClick
 * @private
 * @method _handleDoubleClick
 * @param {Event} ev The event we are working on.
 * @description Handles all doubleclick events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleKeyUp
 * @private
 * @method _handleKeyUp
 * @param {Event} ev The event we are working on.
 * @description Handles all keyup events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleKeyPress
 * @private
 * @method _handleKeyPress
 * @param {Event} ev The event we are working on.
 * @description Handles all keypress events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._listFix
 * @private
 * @method _listFix
 * @param {Event} ev The event we are working on.
 * @description Handles the Enter key, Tab Key and Shift + Tab keys for List Items.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleKeyDown
 * @private
 * @method _handleKeyDown
 * @param {Event} ev The event we are working on.
 * @description Handles all keydown events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor.nodeChange
 * @method nodeChange
 * @param {Boolean} force Optional paramenter to skip the threshold counter
 * @description Handles setting up the toolbar buttons, getting the Dom path, fixing nodes.
 */

/**
 * @id YAHOO.widget.SimpleEditor._updateMenuChecked
 * @private
 * @method _updateMenuChecked
 * @param {Object} button The command identifier of the button you want to check
 * @param {String} value The value of the menu item you want to check
 * @param {YAHOO.widget.Toolbar} The Toolbar instance the button belongs to (defaults to this.toolbar)
 * @description Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleToolbarClick
 * @private
 * @method _handleToolbarClick
 * @param {Event} ev The event that triggered the button click
 * @description This is an event handler attached to the Toolbar's buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button.
 */

/**
 * @id YAHOO.widget.SimpleEditor._setupAfterElement
 * @private
 * @method _setupAfterElement
 * @description Creates the accessibility h2 header and places it after the iframe in the Dom for navigation.
 */

/**
 * @id YAHOO.widget.SimpleEditor._disableEditor
 * @private
 * @method _disableEditor
 * @param {Boolean} disabled Pass true to disable, false to enable
 * @description Creates a mask to place over the Editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor.EDITOR_PANEL_ID
 * @property EDITOR_PANEL_ID
 * @description HTML id to give the properties window in the DOM.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.SEP_DOMPATH
 * @property SEP_DOMPATH
 * @description The value to place in between the Dom path items
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_LEAVE_EDITOR
 * @property STR_LEAVE_EDITOR
 * @description The accessibility string for the element after the iFrame
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_BEFORE_EDITOR
 * @property STR_BEFORE_EDITOR
 * @description The accessibility string for the element before the iFrame
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_TITLE
 * @property STR_TITLE
 * @description The Title of the HTML document that is created in the iFrame
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_IMAGE_HERE
 * @property STR_IMAGE_HERE
 * @description The text to place in the URL textbox when using the blankimage.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_LINK_URL
 * @property STR_LINK_URL
 * @description The label string for the Link URL.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STOP_EXEC_COMMAND
 * @protected
 * @property STOP_EXEC_COMMAND
 * @description Set to true when you want the default execCommand function to not process anything
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.STOP_NODE_CHANGE
 * @protected
 * @property STOP_NODE_CHANGE
 * @description Set to true when you want the default nodeChange function to not process anything
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_NOEDIT
 * @protected
 * @property CLASS_NOEDIT
 * @description CSS class applied to elements that are not editable.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_CONTAINER
 * @protected
 * @property CLASS_CONTAINER
 * @description Default CSS class to apply to the editors container element
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_EDITABLE
 * @protected
 * @property CLASS_EDITABLE
 * @description Default CSS class to apply to the editors iframe element
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_EDITABLE_CONT
 * @protected
 * @property CLASS_EDITABLE_CONT
 * @description Default CSS class to apply to the editors iframe's parent element
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_PREFIX
 * @protected
 * @property CLASS_PREFIX
 * @description Default prefix for dynamically created class names
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.browser
 * @property browser
 * @description Standard browser detection
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.init
 * @method init
 * @description The Editor class' initialization method
 */

/**
 * @id YAHOO.widget.SimpleEditor.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create
 * the editor.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor.container
 * @config container
 * @description Used when dynamically creating the Editor from Javascript with no default textarea.
 * We will create one and place it in this container. If no container is passed we will append to document.body.
 * @default false
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.plainText
 * @config plainText
 * @description Process the inital textarea data as if it was plain text. Accounting for spaces, tabs and line feeds.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.iframe
 * @private
 * @config iframe
 * @description Internal config for holding the iframe element.
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.textarea
 * @private
 * @deprecated
 * @config textarea
 * @description Internal config for holding the textarea element (replaced with element).
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.container
 * @private
 * @config container
 * @description Internal config for holding a reference to the container to append a dynamic editor to.
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.nodeChangeThreshold
 * @config nodeChangeThreshold
 * @description The number of seconds that need to be in between nodeChange processing
 * @default 3
 * @type Number
 */

/**
 * @id YAHOO.widget.SimpleEditor.allowNoEdit
 * @config allowNoEdit
 * @description Should the editor check for non-edit fields. It should be noted that this technique is not perfect. If the user does the right things, they will still be able to make changes.
 * Such as highlighting an element below and above the content and hitting a toolbar button or a shortcut key.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.limitCommands
 * @config limitCommands
 * @description Should the Editor limit the allowed execCommands to the ones available in the toolbar. If true, then execCommand and keyboard shortcuts will fail if they are not defined in the toolbar.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.element_cont
 * @config element_cont
 * @description Internal config for the editors container
 * @default false
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.editor_wrapper
 * @private
 * @config editor_wrapper
 * @description The outter wrapper for the entire editor.
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.height
 * @attribute height
 * @description The height of the editor iframe container, not including the toolbar..
 * @default Best guessed size of the textarea, for best results use CSS to style the height of the textarea or pass it in as an argument
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.autoHeight
 * @config autoHeight
 * @description Remove the scrollbars from the edit area and resize it to fit the content. It will not go any lower than the current config height.
 * @default false
 * @type Boolean || Number
 */

/**
 * @id YAHOO.widget.SimpleEditor.width
 * @attribute width
 * @description The width of the editor container.
 * @default Best guessed size of the textarea, for best results use CSS to style the width of the textarea or pass it in as an argument
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.blankimage
 * @attribute blankimage
 * @description The URL for the image placeholder to put in when inserting an image.
 * @default The yahooapis.com address for the current release + 'assets/blankimage.png'
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.css
 * @attribute css
 * @description The Base CSS used to format the content of the editor
 * @default <code><pre>html {
height: 95%;
}
body {
height: 100%;
padding: 7px; background-color: #fff; font:13px/1.22 arial,helvetica,clean,sans-serif;*font-size:small;*font:x-small;
}
a {
color: blue;
text-decoration: underline;
cursor: pointer;
}
.warning-localfile {
border-bottom: 1px dashed red !important;
}
.yui-busy {
cursor: wait !important;
}
img.selected { //Safari image selection
border: 2px dotted #808080;
}
img {
cursor: pointer !important;
border: none;
}
</pre></code>
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.html
 * @attribute html
 * @description The default HTML to be written to the iframe document before the contents are loaded (Note that the DOCTYPE attr will be added at render item)
 * @default This HTML requires a few things if you are to override:
<p><code>{TITLE}, {CSS}, {HIDDEN_CSS}, {EXTRA_CSS}</code> and <code>{CONTENT}</code> need to be there, they are passed to YAHOO.lang.substitute to be replace with other strings.<p>
<p><code>onload="document.body._rteLoaded = true;"</code> : the onload statement must be there or the editor will not finish loading.</p>
<code>
<pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;{TITLE}&lt;/title&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;style&gt;
{CSS}
&lt;/style&gt;
&lt;style&gt;
{HIDDEN_CSS}
&lt;/style&gt;
&lt;style&gt;
{EXTRA_CSS}
&lt;/style&gt;
&lt;/head&gt;
&lt;body onload="document.body._rteLoaded = true;"&gt;
{CONTENT}
&lt;/body&gt;
&lt;/html&gt;
</pre>
</code>
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.extracss
 * @attribute extracss
 * @description Extra user defined css to load after the default SimpleEditor CSS
 * @default ''
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.handleSubmit
 * @attribute handleSubmit
 * @description Config handles if the editor will attach itself to the textareas parent form's submit handler.
If it is set to true, the editor will attempt to attach a submit listener to the textareas parent form.
Then it will trigger the editors save handler and place the new content back into the text area before the form is submitted.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.disabled
 * @attribute disabled
 * @description This will toggle the editor's disabled state. When the editor is disabled, designMode is turned off and a mask is placed over the iframe so no interaction can take place.
All Toolbar buttons are also disabled so they cannot be used.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbar_cont
 * @config toolbar_cont
 * @description Internal config for the toolbars container
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbar
 * @attribute toolbar
 * @description The default toolbar config.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.animate
 * @attribute animate
 * @description Should the editor animate window movements
 * @default false unless Animation is found, then true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.panel
 * @config panel
 * @description A reference to the panel we are using for windows.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.focusAtStart
 * @attribute focusAtStart
 * @description Should we focus the window when the content is ready?
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.dompath
 * @attribute dompath
 * @description Toggle the display of the current Dom path below the editor
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.markup
 * @attribute markup
 * @description Should we try to adjust the markup for the following types: semantic, css, default or xhtml
 * @default "semantic"
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.removeLineBreaks
 * @attribute removeLineBreaks
 * @description Should we remove linebreaks and extra spaces on cleanup
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._getBlankImage
 * @private
 * @method _getBlankImage
 * @description Retrieves the full url of the image to use as the blank image.
 * @return {String} The URL to the blank image
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleAutoHeight
 * @private
 * @method _handleAutoHeight
 * @description Handles resizing the editor's height based on the content
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleFormSubmit
 * @private
 * @method _handleFormSubmit
 * @description Handles the form submission.
 * @param {Object} ev The Form Submit Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleFontSize
 * @private
 * @method _handleFontSize
 * @description Handles the font size button in the toolbar.
 * @param {Object} o Object returned from Toolbar's buttonClick Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleAlign
 * @private
 * @method _handleAlign
 * @description Handles the alignment buttons in the toolbar.
 * @param {Object} o Object returned from Toolbar's buttonClick Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleAfterNodeChange
 * @private
 * @method _handleAfterNodeChange
 * @description Fires after a nodeChange happens to setup the things that where reset on the node change (button state).
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleInsertImageClick
 * @private
 * @method _handleInsertImageClick
 * @description Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleInsertImageWindowClose
 * @private
 * @method _handleInsertImageWindowClose
 * @description Handles the closing of the Image Properties Window.
 */

/**
 * @id YAHOO.widget.SimpleEditor._isLocalFile
 * @private
 * @method _isLocalFile
 * @param {String} url THe url/string to check
 * @description Checks to see if a string (href or img src) is possibly a local file reference..
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleCreateLinkClick
 * @private
 * @method _handleCreateLinkClick
 * @description Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleCreateLinkWindowClose
 * @private
 * @method _handleCreateLinkWindowClose
 * @description Handles the closing of the Link Properties Window.
 */

/**
 * @id YAHOO.widget.SimpleEditor.render
 * @method render
 * @description Calls the private method _render in a setTimeout to allow for other things on the page to continue to load.
 */

/**
 * @id YAHOO.widget.SimpleEditor._render
 * @private
 * @method _render
 * @description Causes the toolbar and the editor to render and replace the textarea.
 */

/**
 * @id YAHOO.widget.SimpleEditor.execCommand
 * @method execCommand
 * @param {String} action The "execCommand" action to try to execute (Example: bold, insertimage, inserthtml)
 * @param {String} value (optional) The value for a given action such as action: fontname value: 'Verdana'
 * @description This method attempts to try and level the differences in the various browsers and their support for execCommand actions
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_backcolor
 * @method cmd_backcolor
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('backcolor') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_forecolor
 * @method cmd_forecolor
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('forecolor') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_unlink
 * @method cmd_unlink
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('unlink') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_createlink
 * @method cmd_createlink
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('createlink') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_insertimage
 * @method cmd_insertimage
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('insertimage') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_inserthtml
 * @method cmd_inserthtml
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('inserthtml') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_list
 * @method cmd_list
 * @param tag The tag of the list you want to create (eg, ul or ol)
 * @description This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_insertorderedlist
 * @method cmd_insertorderedlist
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('insertorderedlist ') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_insertunorderedlist
 * @method cmd_insertunorderedlist
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('insertunorderedlist') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_fontname
 * @method cmd_fontname
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('fontname') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_fontsize
 * @method cmd_fontsize
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('fontsize') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor._swapEl
 * @private
 * @method _swapEl
 * @param {HTMLElement} el The element to swap with
 * @param {String} tagName The tagname of the element that you wish to create
 * @param {Function} callback (optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function.
 * @description This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it's place.
 */

/**
 * @id YAHOO.widget.SimpleEditor._createCurrentElement
 * @private
 * @method _createCurrentElement
 * @param {String} tagName (optional defaults to a) The tagname of the element that you wish to create
 * @param {Object} tagStyle (optional) Object literal containing styles to apply to the new element.
 * @description This is a work around for the various browser issues with execCommand. This method will run <code>execCommand('fontname', false, 'yui-tmp')</code> on the given selection.
 * It will then search the document for an element with the font-family set to <strong>yui-tmp</strong> and replace that with another span that has other information in it, then assign the new span to the
 * <code>this.currentElement</code> array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit.
 */

/**
 * @id YAHOO.widget.SimpleEditor.el
 * @knownissue
 * @browser Safari 2.x
 * @description The issue here is that we have no way of knowing where the cursor position is
 * inside of the iframe, so we have to place the newly inserted data in the best place that we can.
 * @method el
 */

/**
 * @id YAHOO.widget.SimpleEditor.saveHTML
 * @method saveHTML
 * @description Cleans the HTML with the cleanHTML method then places that string back into the textarea.
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.setEditorHTML
 * @method setEditorHTML
 * @param {String} html The html content to load into the editor
 * @description Loads HTML into the editors body
 */

/**
 * @id YAHOO.widget.SimpleEditor.getEditorHTML
 * @method getEditorHTML
 * @description Gets the unprocessed/unfiltered HTML from the editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.show
 * @method show
 * @description This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none.
 */

/**
 * @id YAHOO.widget.SimpleEditor.hide
 * @method hide
 * @description This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows.
 */

/**
 * @id YAHOO.widget.SimpleEditor._cleanIncomingHTML
 * @method _cleanIncomingHTML
 * @param {String} html The unfiltered HTML
 * @description Process the HTML with a few regexes to clean it up and stabilize the input
 * @return {String} The filtered HTML
 */

/**
 * @id YAHOO.widget.SimpleEditor.cleanHTML
 * @method cleanHTML
 * @param {String} html The unfiltered HTML
 * @description Process the HTML with a few regexes to clean it up and stabilize the output
 * @return {String} The filtered HTML
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_invalid_lists
 * @method filter_invalid_lists
 * @param String html The HTML string to filter
 * @description Filters invalid ol and ul list markup, converts this: <li></li><ol>..</ol> to this: <li></li><li><ol>..</ol></li>
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_safari
 * @method filter_safari
 * @param String html The HTML string to filter
 * @description Filters strings specific to Safari
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_internals
 * @method filter_internals
 * @param String html The HTML string to filter
 * @description Filters internal RTE strings and bogus attrs we don't want
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_all_rgb
 * @method filter_all_rgb
 * @param String str The HTML string to filter
 * @description Converts all RGB color strings found in passed string to a hex color, example: style="color: rgb(0, 255, 0)" converts to style="color: #00ff00"
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_rgb
 * @method filter_rgb
 * @param String css The CSS string containing rgb(#,#,#);
 * @description Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.pre_filter_linebreaks
 * @method pre_filter_linebreaks
 * @param String html The HTML to filter
 * @param String markup The markup type to filter to
 * @description HTML Pre Filter
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.post_filter_linebreaks
 * @method post_filter_linebreaks
 * @param String html The HTML to filter
 * @param String markup The markup type to filter to
 * @description HTML Pre Filter
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.clearEditorDoc
 * @method clearEditorDoc
 * @description Clear the doc of the Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor._renderPanel
 * @private
 * @method _renderPanel
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.openWindow
 * @method openWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.moveWindow
 * @method moveWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor._closeWindow
 * @private
 * @method _closeWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.closeWindow
 * @method closeWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.destroy
 * @method destroy
 * @description Destroys the editor, all of it's elements and objects.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.SimpleEditor.toString
 * @method toString
 * @description Returns a string representing the editor.
 * @return {String}
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbarLoaded
 * @event toolbarLoaded
 * @description Event is fired during the render process directly after the Toolbar is loaded. Allowing you to attach events to the toolbar. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.cleanHTML
 * @event cleanHTML
 * @description Event is fired after the cleanHTML method is called.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterRender
 * @event afterRender
 * @description Event is fired after the render process finishes. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorContentLoaded
 * @event editorContentLoaded
 * @description Event is fired after the editor iframe's document fully loads and fires it's onload event. From here you can start injecting your own things into the document. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorMouseUp
 * @event editorMouseUp
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorMouseDown
 * @event editorMouseDown
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorDoubleClick
 * @event editorDoubleClick
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorKeyUp
 * @event editorKeyUp
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorKeyPress
 * @event editorKeyPress
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorKeyDown
 * @event editorKeyDown
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.beforeNodeChange
 * @event beforeNodeChange
 * @description Event fires at the beginning of the nodeChange process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterNodeChange
 * @event afterNodeChange
 * @description Event fires at the end of the nodeChange process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.beforeExecCommand
 * @event beforeExecCommand
 * @description Event fires at the beginning of the execCommand process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterExecCommand
 * @event afterExecCommand
 * @description Event fires at the end of the execCommand process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.EditorInfo
 * @description Singleton object used to track the open window objects and panels across the various open editors
 * @class EditorInfo
 * @static
 */

/**
 * @id YAHOO.widget.EditorInfo._instances
 * @private
 * @property _instances
 * @description A reference to all editors on the page.
 * @type Object
 */

/**
 * @id YAHOO.widget.EditorInfo.window
 * @private
 * @property window
 * @description A reference to the currently open window object in any editor on the page.
 * @type Object YAHOO.widget.EditorWindow
 */

/**
 * @id YAHOO.widget.EditorInfo.panel
 * @private
 * @property panel
 * @description A reference to the currently open panel in any editor on the page.
 * @type Object YAHOO.widget.Overlay
 */

/**
 * @id YAHOO.widget.EditorInfo.getEditorById
 * @method getEditorById
 * @description Returns a reference to the Editor object associated with the given textarea
 * @param {String/HTMLElement} id The id or reference of the textarea to return the Editor instance of
 * @return Object YAHOO.widget.Editor
 */

/**
 * @id YAHOO.widget.EditorInfo.toString
 * @method toString
 * @description Returns a string representing the EditorInfo.
 * @return {String}
 */

/**
 * The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.
 * @id YAHOO.widget.Editor
 * @constructor
 * @class Editor
 * @extends YAHOO.widget.SimpleEditor
 * @param {String/HTMLElement} el The textarea element to turn into an editor.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.Editor._cleanClassName
 * @private
 * @method _cleanClassName
 * @description Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.
 * @param {String} str The classname to clean up
 * @return {String}
 */

/**
 * @id YAHOO.widget.Editor.STR_BEFORE_EDITOR
 * @property STR_BEFORE_EDITOR
 * @description The accessibility string for the element before the iFrame
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_CLOSE_WINDOW
 * @property STR_CLOSE_WINDOW
 * @description The Title of the close button in the Editor Window
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_CLOSE_WINDOW_NOTE
 * @property STR_CLOSE_WINDOW_NOTE
 * @description A note appearing in the Editor Window to tell the user that the Escape key will close the window
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_PROP_TITLE
 * @property STR_IMAGE_PROP_TITLE
 * @description The title for the Image Property Editor Window
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_URL
 * @property STR_IMAGE_URL
 * @description The label string for Image URL
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_TITLE
 * @property STR_IMAGE_TITLE
 * @description The label string for Image Description
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_SIZE
 * @property STR_IMAGE_SIZE
 * @description The label string for Image Size
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_ORIG_SIZE
 * @property STR_IMAGE_ORIG_SIZE
 * @description The label string for Original Image Size
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_COPY
 * @property STR_IMAGE_COPY
 * @description The label string for the image copy and paste message for Opera and Safari
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_PADDING
 * @property STR_IMAGE_PADDING
 * @description The label string for the image padding.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_BORDER
 * @property STR_IMAGE_BORDER
 * @description The label string for the image border.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_IMAGE_TEXTFLOW
 * @property STR_IMAGE_TEXTFLOW
 * @description The label string for the image text flow.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_LOCAL_FILE_WARNING
 * @property STR_LOCAL_FILE_WARNING
 * @description The label string for the local file warning.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_LINK_PROP_TITLE
 * @property STR_LINK_PROP_TITLE
 * @description The label string for the Link Property Editor Window.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_LINK_PROP_REMOVE
 * @property STR_LINK_PROP_REMOVE
 * @description The label string for the Remove link from text link inside the property editor.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_LINK_NEW_WINDOW
 * @property STR_LINK_NEW_WINDOW
 * @description The string for the open in a new window label.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.STR_LINK_TITLE
 * @property STR_LINK_TITLE
 * @description The string for the link description.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.CLASS_LOCAL_FILE
 * @protected
 * @property CLASS_LOCAL_FILE
 * @description CSS class applied to an element when it's found to have a local url.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.CLASS_HIDDEN
 * @protected
 * @property CLASS_HIDDEN
 * @description CSS class applied to the body when the hiddenelements button is pressed.
 * @type String
 */

/**
 * @id YAHOO.widget.Editor.init
 * @method init
 * @description The Editor class' initialization method
 */

/**
 * @id YAHOO.widget.Editor.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create
 * the editor.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the editor.
 */

/**
 * @id YAHOO.widget.Editor.localFileWarning
 * @attribute localFileWarning
 * @description Should we throw the warning if we detect a file that is local to their machine?
 * @default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Editor.hiddencss
 * @attribute hiddencss
 * @description The CSS used to show/hide hidden elements on the page, these rules must be prefixed with the class provided in <code>this.CLASS_HIDDEN</code>
 * @default <code><pre>
.yui-hidden font, .yui-hidden strong, .yui-hidden b, .yui-hidden em, .yui-hidden i, .yui-hidden u, .yui-hidden div, .yui-hidden p, .yui-hidden span, .yui-hidden img, .yui-hidden ul, .yui-hidden ol, .yui-hidden li, .yui-hidden table {
border: 1px dotted #ccc;
}
.yui-hidden .yui-non {
border: none;
}
.yui-hidden img {
padding: 2px;
}</pre></code>
 * @type String
 */

/**
 * @id YAHOO.widget.Editor._fixNodes
 * @private
 * @method _fixNodes
 * @description Fix href and imgs as well as remove invalid HTML.
 */

/**
 * @id YAHOO.widget.Editor._disabled
 * @private
 * @property _disabled
 * @description The Toolbar items that should be disabled if there is no selection present in the editor.
 * @type Array
 */

/**
 * @id YAHOO.widget.Editor._alwaysDisabled
 * @private
 * @property _alwaysDisabled
 * @description The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.
 * @type Object
 */

/**
 * @id YAHOO.widget.Editor._alwaysEnabled
 * @private
 * @property _alwaysEnabled
 * @description The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.
 * @type Object
 */

/**
 * @id YAHOO.widget.Editor._handleKeyDown
 * @private
 * @method _handleKeyDown
 * @param {Event} ev The event we are working on.
 * @description Override method that handles some new keydown events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.Editor._handleCreateLinkWindowClose
 * @private
 * @method _handleCreateLinkWindowClose
 * @description Handles the closing of the Link Properties Window.
 */

/**
 * @id YAHOO.widget.Editor._handleInsertImageClick
 * @private
 * @method _handleInsertImageClick
 * @description Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.
 */

/**
 * @id YAHOO.widget.Editor._handleInsertImageWindowClose
 * @private
 * @method _handleInsertImageWindowClose
 * @description Handles the closing of the Image Properties Window.
 */

/**
 * @id YAHOO.widget.Editor._renderPanel
 * @private
 * @method _renderPanel
 * @description Renders the panel used for Editor Windows to the document so we can start using it..
 * @return {YAHOO.widget.Overlay}
 */

/**
 * @id YAHOO.widget.Editor.openWindow
 * @method openWindow
 * @param {YAHOO.widget.EditorWindow} win A YAHOO.widget.EditorWindow instance
 * @description Opens a new "window/panel"
 */

/**
 * @id YAHOO.widget.Editor.moveWindow
 * @method moveWindow
 * @param {Boolean} force Boolean to tell it to move but not use any animation (Usually done the first time the window is loaded.)
 * @description Realign the window with the currentElement and reposition the knob above the panel.
 */

/**
 * @id YAHOO.widget.Editor._closeWindow
 * @private
 * @method _closeWindow
 * @description Close the currently open EditorWindow with the Escape key.
 * @param {Event} ev The keypress Event that we are trapping
 */

/**
 * @id YAHOO.widget.Editor.closeWindow
 * @method closeWindow
 * @description Close the currently open EditorWindow.
 */

/**
 * @id YAHOO.widget.Editor.cmd_heading
 * @method cmd_heading
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('heading') is used.
 */

/**
 * @id YAHOO.widget.Editor.cmd_hiddenelements
 * @method cmd_hiddenelements
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('hiddenelements') is used.
 */

/**
 * @id YAHOO.widget.Editor.cmd_removeformat
 * @method cmd_removeformat
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('removeformat') is used.
 */

/**
 * @id YAHOO.widget.Editor.cmd_script
 * @method cmd_script
 * @param action action passed from the execCommand method
 * @param value Value passed from the execCommand method
 * @description This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods.
 */

/**
 * @id YAHOO.widget.Editor.cmd_superscript
 * @method cmd_superscript
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('superscript') is used.
 */

/**
 * @id YAHOO.widget.Editor.cmd_subscript
 * @method cmd_subscript
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('subscript') is used.
 */

/**
 * @id YAHOO.widget.Editor.cmd_indent
 * @method cmd_indent
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('indent') is used.
 */

/**
 * @id YAHOO.widget.Editor.cmd_outdent
 * @method cmd_outdent
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('outdent') is used.
 */

/**
 * @id YAHOO.widget.Editor.toString
 * @method toString
 * @description Returns a string representing the editor.
 * @return {String}
 */

/**
 * @id YAHOO.widget.EditorWindow
 * @description Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.
 * This is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor.
 * @class EditorWindow
 * @param {String} name The name of the window.
 * @param {Object} attrs Attributes for the window. Current attributes used are : height and width
 */

/**
 * @id YAHOO.widget.EditorWindow.name
 * @private
 * @property name
 * @description A unique name for the window
 */

/**
 * @id YAHOO.widget.EditorWindow.attrs
 * @private
 * @property attrs
 * @description The window attributes
 */

/**
 * @id YAHOO.widget.EditorWindow._cache
 * @private
 * @property _cache
 * @description Holds a cache of the DOM for the window so we only have to build it once..
 */

/**
 * @id YAHOO.widget.EditorWindow.header
 * @private
 * @property header
 * @description Holder for the header of the window, used in Editor.openWindow
 */

/**
 * @id YAHOO.widget.EditorWindow.body
 * @private
 * @property body
 * @description Holder for the body of the window, used in Editor.openWindow
 */

/**
 * @id YAHOO.widget.EditorWindow.footer
 * @private
 * @property footer
 * @description Holder for the footer of the window, used in Editor.openWindow
 */

/**
 * @id YAHOO.widget.EditorWindow.setHeader
 * @method setHeader
 * @description Sets the header for the window.
 * @param {String/HTMLElement} str The string or DOM reference to be used as the windows header.
 */

/**
 * @id YAHOO.widget.EditorWindow.setBody
 * @method setBody
 * @description Sets the body for the window.
 * @param {String/HTMLElement} str The string or DOM reference to be used as the windows body.
 */

/**
 * @id YAHOO.widget.EditorWindow.setFooter
 * @method setFooter
 * @description Sets the footer for the window.
 * @param {String/HTMLElement} str The string or DOM reference to be used as the windows footer.
 */

/**
 * @id YAHOO.widget.EditorWindow.toString
 * @method toString
 * @description Returns a string representing the EditorWindow.
 * @return {String}
 */

/**
 * @id YAHOO.widget.EditorWindow.beforeOpenWindow
 * @event beforeOpenWindow
 * @param {EditorWindow} win The EditorWindow object
 * @param {Overlay} panel The Overlay object that is used to create the window.
 * @description Event fires before an Editor Window is opened. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.EditorWindow.afterOpenWindow
 * @event afterOpenWindow
 * @param {EditorWindow} win The EditorWindow object
 * @param {Overlay} panel The Overlay object that is used to create the window.
 * @description Event fires after an Editor Window is opened. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.EditorWindow.closeWindow
 * @event closeWindow
 * @param {EditorWindow} win The EditorWindow object
 * @description Event fires after an Editor Window is closed. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.EditorWindow.windowCMDOpen
 * @event windowCMDOpen
 * @param {EditorWindow} win The EditorWindow object
 * @param {Overlay} panel The Overlay object that is used to create the window.
 * @description Dynamic event fired when an EditorWindow is opened.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkOpen event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.EditorWindow.windowCMDClose
 * @event windowCMDClose
 * @param {EditorWindow} win The EditorWindow object
 * @param {Overlay} panel The Overlay object that is used to create the window.
 * @description Dynamic event fired when an EditorWindow is closed.. The dynamic event is based on the name of the window. Example Window: createlink, opening this window would fire the windowcreatelinkClose event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.ToolbarButtonAdvanced
 * @description <p>Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>
 * @class ToolbarButtonAdvanced
 * @namespace YAHOO.widget
 * @requires yahoo, dom, element, event, container_core, menu, button
 * @beta
 *
 * Provides a toolbar button based on the button and menu widgets.
 * @constructor
 * @param {String/HTMLElement} el The element to turn into a button.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.ToolbarButtonAdvanced.buttonType
 * @property buttonType
 * @private
 * @description Tells if the Button is a Rich Button or a Simple Button
 */

/**
 * @id YAHOO.widget.ToolbarButtonAdvanced.checkValue
 * @method checkValue
 * @param {String} value The value of the option that we want to mark as selected
 * @description Select an option by value
 */

/**
 * @id YAHOO.widget.ToolbarButton
 * @description <p>Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor's Toolbar</p>
 * @class ToolbarButton
 * @namespace YAHOO.widget
 * @requires yahoo, dom, element, event
 * @extends YAHOO.util.Element
 * @beta
 *
 * Provides a toolbar button based on the button and menu widgets, <select> elements are used in place of menu's.
 * @constructor
 * @param {String/HTMLElement} el The element to turn into a button.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.ToolbarButton.buttonType
 * @property buttonType
 * @private
 * @description Tells if the Button is a Rich Button or a Simple Button
 */

/**
 * @id YAHOO.widget.ToolbarButton._handleMouseOver
 * @method _handleMouseOver
 * @private
 * @description Adds classes to the button elements on mouseover (hover)
 */

/**
 * @id YAHOO.widget.ToolbarButton._handleMouseOut
 * @method _handleMouseOut
 * @private
 * @description Removes classes from the button elements on mouseout (hover)
 */

/**
 * @id YAHOO.widget.ToolbarButton.checkValue
 * @method checkValue
 * @param {String} value The value of the option that we want to mark as selected
 * @description Select an option by value
 */

/**
 * @id YAHOO.widget.ToolbarButton.init
 * @method init
 * @description The ToolbarButton class's initialization method
 */

/**
 * @id YAHOO.widget.ToolbarButton.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create
 * the toolbar.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the toolbar.
 */

/**
 * @id YAHOO.widget.ToolbarButton.value
 * @attribute value
 * @description The value of the button
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.menu
 * @attribute menu
 * @description The menu attribute, see YAHOO.widget.Button
 * @type Object
 */

/**
 * @id YAHOO.widget.ToolbarButton.type
 * @attribute type
 * @description The type of button to create: push, menu, color, select, spin
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.disabled
 * @attribute disabled
 * @description Set the button into a disabled state
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.label
 * @attribute label
 * @description The text label for the button
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.title
 * @attribute title
 * @description The title of the button
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton.container
 * @config container
 * @description The container that the button is rendered to, handled by Toolbar
 * @type String
 */

/**
 * @id YAHOO.widget.ToolbarButton._handleSelect
 * @private
 * @method _handleSelect
 * @description The event fired when a change event gets fired on a select element
 * @param {Event} ev The change event.
 */

/**
 * @id YAHOO.widget.ToolbarButton.getMenu
 * @method getMenu
 * @description A stub function to mimic YAHOO.widget.Button's getMenu method
 */

/**
 * @id YAHOO.widget.ToolbarButton.fireEvent
 * @method fireEvent
 * @description Overridden fireEvent method to prevent DOM events from firing if the button is disabled.
 */

/**
 * @id YAHOO.widget.ToolbarButton.toString
 * @method toString
 * @description Returns a string representing the toolbar.
 * @return {String}
 */

/**
 * Provides a rich toolbar widget based on the button and menu widgets
 * @id YAHOO.widget.Toolbar
 * @constructor
 * @class Toolbar
 * @extends YAHOO.util.Element
 * @param {String/HTMLElement} el The element to turn into a toolbar.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.Toolbar._addMenuClasses
 * @method _addMenuClasses
 * @private
 * @description This method is called from Menu's renderEvent to add a few more classes to the menu items
 * @param {String} ev The event that fired.
 * @param {Array} na Array of event information.
 * @param {Object} o Button config object.
 */

/**
 * @id YAHOO.widget.Toolbar.buttonType
 * @property buttonType
 * @description The default button to use
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar.dd
 * @property dd
 * @description The DragDrop instance associated with the Toolbar
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar._colorData
 * @property _colorData
 * @description Object reference containing colors hex and text values.
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar._colorPicker
 * @property _colorPicker
 * @description The HTML Element containing the colorPicker
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar.STR_COLLAPSE
 * @property STR_COLLAPSE
 * @description String for Toolbar Collapse Button
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.STR_SPIN_LABEL
 * @property STR_SPIN_LABEL
 * @description String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.STR_SPIN_UP
 * @property STR_SPIN_UP
 * @description String for spinbutton up
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.STR_SPIN_DOWN
 * @property STR_SPIN_DOWN
 * @description String for spinbutton down
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar._titlebar
 * @property _titlebar
 * @description Object reference to the titlebar
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar.browser
 * @property browser
 * @description Standard browser detection
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar._buttonList
 * @protected
 * @property _buttonList
 * @description Internal property list of current buttons in the toolbar
 * @type Array
 */

/**
 * @id YAHOO.widget.Toolbar._buttonGroupList
 * @protected
 * @property _buttonGroupList
 * @description Internal property list of current button groups in the toolbar
 * @type Array
 */

/**
 * @id YAHOO.widget.Toolbar._sep
 * @protected
 * @property _sep
 * @description Internal reference to the separator HTML Element for cloning
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar._sepCount
 * @protected
 * @property _sepCount
 * @description Internal refernce for counting separators, so we can give them a useful class name for styling
 * @type Number
 */

/**
 * @id YAHOO.widget.Toolbar.draghandle
 * @protected
 * @property draghandle
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar._toolbarConfigs
 * @protected
 * @property _toolbarConfigs
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_CONTAINER
 * @protected
 * @property CLASS_CONTAINER
 * @description Default CSS class to apply to the toolbar container element
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_DRAGHANDLE
 * @protected
 * @property CLASS_DRAGHANDLE
 * @description Default CSS class to apply to the toolbar's drag handle element
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_SEPARATOR
 * @protected
 * @property CLASS_SEPARATOR
 * @description Default CSS class to apply to all separators in the toolbar
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_DISABLED
 * @protected
 * @property CLASS_DISABLED
 * @description Default CSS class to apply when the toolbar is disabled
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.CLASS_PREFIX
 * @protected
 * @property CLASS_PREFIX
 * @description Default prefix for dynamically created class names
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.init
 * @method init
 * @description The Toolbar class's initialization method
 */

/**
 * @id YAHOO.widget.Toolbar.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create
 * the toolbar.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the toolbar.
 */

/**
 * @id YAHOO.widget.Toolbar.buttonType
 * @attribute buttonType
 * @description The buttonType to use (advanced or basic)
 * @type String
 */

/**
 * @id YAHOO.widget.Toolbar.buttons
 * @attribute buttons
 * @description Object specifying the buttons to include in the toolbar
 * Example:
 * <code><pre>
 * {
 *   { id: 'b3', type: 'button', label: 'Underline', value: 'underline' },
 *   { type: 'separator' },
 *   { id: 'b4', type: 'menu', label: 'Align', value: 'align',
 *       menu: [
 *           { text: "Left", value: 'alignleft' },
 *           { text: "Center", value: 'aligncenter' },
 *           { text: "Right", value: 'alignright' }
 *       ]
 *   }
 * }
 * </pre></code>
 * @type Array
 */

/**
 * @id YAHOO.widget.Toolbar.disabled
 * @attribute disabled
 * @description Boolean indicating if the toolbar should be disabled. It will also disable the draggable attribute if it is on.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.cont
 * @config cont
 * @description The container for the toolbar.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Toolbar.grouplabels
 * @attribute grouplabels
 * @description Boolean indicating if the toolbar should show the group label's text string.
 * @default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.titlebar
 * @attribute titlebar
 * @description Boolean indicating if the toolbar should have a titlebar. If
 * passed a string, it will use that as the titlebar text
 * @default false
 * @type Boolean or String
 */

/**
 * @id YAHOO.widget.Toolbar.collapse
 * @attribute collapse
 * @description Boolean indicating if the the titlebar should have a collapse button.
 * The collapse button will not remove the toolbar, it will minimize it to the titlebar
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.draggable
 * @attribute draggable
 * @description Boolean indicating if the toolbar should be draggable.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Toolbar.dd
 * @property dd
 * @description The DragDrop instance associated with the Toolbar
 * @type Object
 */

/**
 * @id YAHOO.widget.Toolbar.addButtonGroup
 * @method addButtonGroup
 * @description Add a new button group to the toolbar. (uses addButton)
 * @param {Object} oGroup Object literal reference to the Groups Config (contains an array of button configs)
 */

/**
 * @id YAHOO.widget.Toolbar.addButtonToGroup
 * @method addButtonToGroup
 * @description Add a new button to a toolbar group. Buttons supported:
 *   push, split, menu, select, color, spin
 * @param {Object} oButton Object literal reference to the Button's Config
 * @param {String} group The Group identifier passed into the initial config
 * @param {HTMLElement} after Optional HTML element to insert this button after in the DOM.
 */

/**
 * @id YAHOO.widget.Toolbar.addButton
 * @method addButton
 * @description Add a new button to the toolbar. Buttons supported:
 *   push, split, menu, select, color, spin
 * @param {Object} oButton Object literal reference to the Button's Config
 * @param {HTMLElement} after Optional HTML element to insert this button after in the DOM.
 */

/**
 * @id YAHOO.widget.Toolbar.addSeparator
 * @method addSeparator
 * @description Add a new button separator to the toolbar.
 * @param {HTMLElement} cont Optional HTML element to insert this button into.
 * @param {HTMLElement} after Optional HTML element to insert this button after in the DOM.
 */

/**
 * @id YAHOO.widget.Toolbar._createColorPicker
 * @method _createColorPicker
 * @private
 * @description Creates the core DOM reference to the color picker menu item.
 * @param {String} id the id of the toolbar to prefix this DOM container with.
 */

/**
 * @id YAHOO.widget.Toolbar._resetColorPicker
 * @method _resetColorPicker
 * @private
 * @description Clears the currently selected color or mouseover color in the color picker.
 */

/**
 * @id YAHOO.widget.Toolbar._makeColorButton
 * @method _makeColorButton
 * @private
 * @description Called to turn a "color" button into a menu button with an Overlay for the menu.
 * @param {Object} _oButton YAHOO.widget.ToolbarButton reference
 */

/**
 * @id YAHOO.widget.Toolbar._makeSpinButton
 * @private
 * @method _makeSpinButton
 * @description Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values.
 * @param {Object} _button YAHOO.widget.ToolbarButton reference
 * @param {Object} oButton Object literal containing the buttons initial config
 */

/**
 * @id YAHOO.widget.Toolbar._buttonClick
 * @protected
 * @method _buttonClick
 * @description Click handler for all buttons in the toolbar.
 * @param {String} ev The event that was passed in.
 * @param {Object} info Object literal of information about the button that was clicked.
 */

/**
 * @id YAHOO.widget.Toolbar.getButtonById
 * @method getButtonById
 * @description Gets a button instance from the toolbar by is Dom id.
 * @param {String} id The Dom id to query for.
 * @return {YAHOO.widget.ToolbarButton}
 */

/**
 * @id YAHOO.widget.Toolbar.getButtonByValue
 * @method getButtonByValue
 * @description Gets a button instance or a menuitem instance from the toolbar by it's value.
 * @param {String} value The button value to query for.
 * @return {YAHOO.widget.ToolbarButton or YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Toolbar.getButtonByIndex
 * @method getButtonByIndex
 * @description Gets a button instance from the toolbar by is index in _buttonList.
 * @param {Number} index The index of the button in _buttonList.
 * @return {YAHOO.widget.ToolbarButton}
 */

/**
 * @id YAHOO.widget.Toolbar.getButtons
 * @method getButtons
 * @description Returns an array of buttons in the current toolbar
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Toolbar.disableButton
 * @method disableButton
 * @description Disables a button in the toolbar.
 * @param {String/Number} id Disable a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.enableButton
 * @method enableButton
 * @description Enables a button in the toolbar.
 * @param {String/Number} id Enable a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.selectButton
 * @method selectButton
 * @description Selects a button in the toolbar.
 * @param {String/Number} id Select a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.deselectButton
 * @method deselectButton
 * @description Deselects a button in the toolbar.
 * @param {String/Number} id Deselect a button by it's id, index or value.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.deselectAllButtons
 * @method deselectAllButtons
 * @description Deselects all buttons in the toolbar.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.disableAllButtons
 * @method disableAllButtons
 * @description Disables all buttons in the toolbar.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.enableAllButtons
 * @method enableAllButtons
 * @description Enables all buttons in the toolbar.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.resetAllButtons
 * @method resetAllButtons
 * @description Resets all buttons to their initial state.
 * @param {Object} _ex Except these buttons
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.destroyButton
 * @method destroyButton
 * @description Destroy a button in the toolbar.
 * @param {String/Number} id Destroy a button by it's id or index.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.destroy
 * @method destroy
 * @description Destroys the toolbar, all of it's elements and objects.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.Toolbar.collapse
 * @method collapse
 * @description Programatically collapse the toolbar.
 * @param {Boolean} collapse True to collapse, false to expand.
 */

/**
 * @id YAHOO.widget.Toolbar.toString
 * @method toString
 * @description Returns a string representing the toolbar.
 * @return {String}
 */

/**
 * @id YAHOO.widget.Toolbar.buttonClick
 * @event buttonClick
 * @param {Object} o The object passed to this handler is the button config used to create the button.
 * @description Fires when any botton receives a click event. Passes back a single object representing the buttons config object. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Toolbar.valueClick
 * @event valueClick
 * @param {Object} o The object passed to this handler is the button config used to create the button.
 * @description This is a special dynamic event that is created and dispatched based on the value property
 * of the button config. See Element.addListener for more information on listening for this event.
 * Example:
 * <code><pre>
 * buttons : [
 *   { type: 'button', value: 'test', value: 'testButton' }
 * ]</pre>
 * </code>
 * With the valueClick event you could subscribe to this buttons click event with this:
 * tbar.in('testButtonClick', function() { alert('test button clicked'); })
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Toolbar.toolbarExpanded
 * @event toolbarExpanded
 * @description Fires when the toolbar is expanded via the collapse button. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Toolbar.toolbarCollapsed
 * @event toolbarCollapsed
 * @description Fires when the toolbar is collapsed via the collapse button. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor's toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization.
 * @id YAHOO.widget.SimpleEditor
 * @constructor
 * @class SimpleEditor
 * @extends YAHOO.util.Element
 * @param {String/HTMLElement} el The textarea element to turn into an editor.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.SimpleEditor._cleanClassName
 * @private
 * @method _cleanClassName
 * @description Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -'s.
 * @param {String} str The classname to clean up
 * @return {String}
 */

/**
 * @id YAHOO.widget.SimpleEditor._docType
 * @property _docType
 * @description The DOCTYPE to use in the editable container.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorDirty
 * @property editorDirty
 * @description This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed.
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._defaultCSS
 * @property _defaultCSS
 * @description The default CSS used in the config for 'css'. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + 'ADD MYY CSS HERE' }
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor._defaultToolbar
 * @property _defaultToolbar
 * @private
 * @description Default toolbar config.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastButton
 * @property _lastButton
 * @private
 * @description The last button pressed, so we don't disable it.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._baseHREF
 * @property _baseHREF
 * @private
 * @description The base location of the editable page (this page) so that relative paths for image work.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastImage
 * @property _lastImage
 * @private
 * @description Safari reference for the last image selected (for styling as selected).
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor._blankImageLoaded
 * @property _blankImageLoaded
 * @private
 * @description Don't load the blank image more than once..
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._fixNodesTimer
 * @property _fixNodesTimer
 * @private
 * @description Holder for the fixNodes timer
 * @type Date
 */

/**
 * @id YAHOO.widget.SimpleEditor._nodeChangeTimer
 * @property _nodeChangeTimer
 * @private
 * @description Holds a reference to the nodeChange setTimeout call
 * @type Number
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastNodeChangeEvent
 * @property _lastNodeChangeEvent
 * @private
 * @description Flag to determine the last event that fired a node change
 * @type Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._lastNodeChange
 * @property _lastNodeChange
 * @private
 * @description Flag to determine when the last node change was fired
 * @type Date
 */

/**
 * @id YAHOO.widget.SimpleEditor._rendered
 * @property _rendered
 * @private
 * @description Flag to determine if editor has been rendered or not
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.DOMReady
 * @property DOMReady
 * @private
 * @description Flag to determine if DOM is ready or not
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._selection
 * @property _selection
 * @private
 * @description Holder for caching iframe selections
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._mask
 * @property _mask
 * @private
 * @description DOM Element holder for the editor Mask when disabled
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._showingHiddenElements
 * @property _showingHiddenElements
 * @private
 * @description Status of the hidden elements button
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentWindow
 * @property currentWindow
 * @description A reference to the currently open EditorWindow
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentEvent
 * @property currentEvent
 * @description A reference to the current editor event
 * @type Event
 */

/**
 * @id YAHOO.widget.SimpleEditor.operaEvent
 * @property operaEvent
 * @private
 * @description setTimeout holder for Opera and Image DoubleClick event..
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentFont
 * @property currentFont
 * @description A reference to the last font selected from the Toolbar
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.currentElement
 * @property currentElement
 * @description A reference to the current working element in the editor
 * @type Array
 */

/**
 * @id YAHOO.widget.SimpleEditor.dompath
 * @property dompath
 * @description A reference to the dompath container for writing the current working dom path to.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.beforeElement
 * @property beforeElement
 * @description A reference to the H2 placed before the editor for Accessibilty.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterElement
 * @property afterElement
 * @description A reference to the H2 placed after the editor for Accessibilty.
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.invalidHTML
 * @property invalidHTML
 * @description Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to "{ keepContents: true }", then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbar
 * @property toolbar
 * @description Local property containing the YAHOO.widget.Toolbar instance
 * @type YAHOO.widget.Toolbar
 */

/**
 * @id YAHOO.widget.SimpleEditor._contentTimer
 * @private
 * @property _contentTimer
 * @description setTimeout holder for documentReady check
 */

/**
 * @id YAHOO.widget.SimpleEditor._contentTimerCounter
 * @private
 * @property _contentTimerCounter
 * @description Counter to check the number of times the body is polled for before giving up
 * @type Number
 */

/**
 * @id YAHOO.widget.SimpleEditor._disabled
 * @private
 * @property _disabled
 * @description The Toolbar items that should be disabled if there is no selection present in the editor.
 * @type Array
 */

/**
 * @id YAHOO.widget.SimpleEditor._alwaysDisabled
 * @private
 * @property _alwaysDisabled
 * @description The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._alwaysEnabled
 * @private
 * @property _alwaysEnabled
 * @description The Toolbar items that should ALWAYS be enabled event if there isn't a selection present in the editor.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._semantic
 * @private
 * @property _semantic
 * @description The Toolbar commands that we should attempt to make tags out of instead of using styles.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._tag2cmd
 * @private
 * @property _tag2cmd
 * @description A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._getDoc
 * @private
 * @method _getDoc
 * @description Get the Document of the IFRAME
 * @return {Object}
 */

/**
 * @id YAHOO.widget.SimpleEditor._getWindow
 * @private
 * @method _getWindow
 * @description Get the Window of the IFRAME
 * @return {Object}
 */

/**
 * @id YAHOO.widget.SimpleEditor._focusWindow
 * @private
 * @method _focusWindow
 * @description Attempt to set the focus of the iframes window.
 * @param {Boolean} onLoad Safari needs some special care to set the cursor in the iframe
 */

/**
 * @id YAHOO.widget.SimpleEditor._hasSelection
 * @private
 * @method _hasSelection
 * @description Determines if there is a selection in the editor document.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.SimpleEditor._getSelection
 * @private
 * @method _getSelection
 * @description Handles the different selection objects across the A-Grade list.
 * @return {Object} Selection Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._selectNode
 * @private
 * @method _selectNode
 * @description Places the highlight around a given node
 * @param {HTMLElement} node The node to select
 */

/**
 * @id YAHOO.widget.SimpleEditor._getRange
 * @private
 * @method _getRange
 * @description Handles the different range objects across the A-Grade list.
 * @return {Object} Range Object
 */

/**
 * @id YAHOO.widget.SimpleEditor._setDesignMode
 * @private
 * @method _setDesignMode
 * @description Sets the designMode of the iFrame document.
 * @param {String} state This should be either on or off
 */

/**
 * @id YAHOO.widget.SimpleEditor._toggleDesignMode
 * @private
 * @method _toggleDesignMode
 * @description Toggles the designMode of the iFrame document on and off.
 * @return {String} The state that it was set to.
 */

/**
 * @id YAHOO.widget.SimpleEditor._initEditor
 * @private
 * @method _initEditor
 * @description This method is fired from _checkLoaded when the document is ready. It turns on designMode and set's up the listeners.
 */

/**
 * @id YAHOO.widget.SimpleEditor._checkLoaded
 * @private
 * @method _checkLoaded
 * @description Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor._setInitialContent
 * @private
 * @method _setInitialContent
 * @description This method will open the iframes content document and write the textareas value into it, then start the body.onload checking.
 */

/**
 * @id YAHOO.widget.SimpleEditor._setMarkupType
 * @private
 * @method _setMarkupType
 * @param {String} action The action to take. Possible values are: css, default or semantic
 * @description This method will turn on/off the useCSS execCommand.
 */

/**
 * Set the editor to use CSS instead of HTML
 * @id YAHOO.widget.SimpleEditor._setEditorStyle
 * @param {Booleen} stat True/False
 * @method _setEditorStyle
 */

/**
 * @id YAHOO.widget.SimpleEditor._getSelectedElement
 * @private
 * @method _getSelectedElement
 * @description This method will attempt to locate the element that was last interacted with, either via selection, location or event.
 * @return {HTMLElement} The currently selected element.
 */

/**
 * @id YAHOO.widget.SimpleEditor._getDomPath
 * @private
 * @method _getDomPath
 * @description This method will attempt to build the DOM path from the currently selected element.
 * @param HTMLElement el The element to start with, if not provided _getSelectedElement is used
 * @return {Array} An array of node references that will create the DOM Path.
 */

/**
 * @id YAHOO.widget.SimpleEditor._writeDomPath
 * @private
 * @method _writeDomPath
 * @description Write the current DOM path out to the dompath container below the editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor._fixNodes
 * @private
 * @method _fixNodes
 * @description Fix href and imgs as well as remove invalid HTML.
 */

/**
 * @id YAHOO.widget.SimpleEditor._isNonEditable
 * @private
 * @method _isNonEditable
 * @param Event ev The Dom event being checked
 * @description Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.
 * If it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also
 * disable and enable the Editor's toolbar based on the noedit state.
 * @return Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._setCurrentEvent
 * @private
 * @method _setCurrentEvent
 * @param {Event} ev The event to cache
 * @description Sets the current event property
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleClick
 * @private
 * @method _handleClick
 * @param {Event} ev The event we are working on.
 * @description Handles all click events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleMouseUp
 * @private
 * @method _handleMouseUp
 * @param {Event} ev The event we are working on.
 * @description Handles all mouseup events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleMouseDown
 * @private
 * @method _handleMouseDown
 * @param {Event} ev The event we are working on.
 * @description Handles all mousedown events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleDoubleClick
 * @private
 * @method _handleDoubleClick
 * @param {Event} ev The event we are working on.
 * @description Handles all doubleclick events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleKeyUp
 * @private
 * @method _handleKeyUp
 * @param {Event} ev The event we are working on.
 * @description Handles all keyup events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleKeyPress
 * @private
 * @method _handleKeyPress
 * @param {Event} ev The event we are working on.
 * @description Handles all keypress events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor._listFix
 * @private
 * @method _listFix
 * @param {Event} ev The event we are working on.
 * @description Handles the Enter key, Tab Key and Shift + Tab keys for List Items.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleKeyDown
 * @private
 * @method _handleKeyDown
 * @param {Event} ev The event we are working on.
 * @description Handles all keydown events inside the iFrame document.
 */

/**
 * @id YAHOO.widget.SimpleEditor.nodeChange
 * @method nodeChange
 * @param {Boolean} force Optional paramenter to skip the threshold counter
 * @description Handles setting up the toolbar buttons, getting the Dom path, fixing nodes.
 */

/**
 * @id YAHOO.widget.SimpleEditor._updateMenuChecked
 * @private
 * @method _updateMenuChecked
 * @param {Object} button The command identifier of the button you want to check
 * @param {String} value The value of the menu item you want to check
 * @param {YAHOO.widget.Toolbar} The Toolbar instance the button belongs to (defaults to this.toolbar)
 * @description Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleToolbarClick
 * @private
 * @method _handleToolbarClick
 * @param {Event} ev The event that triggered the button click
 * @description This is an event handler attached to the Toolbar's buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button.
 */

/**
 * @id YAHOO.widget.SimpleEditor._setupAfterElement
 * @private
 * @method _setupAfterElement
 * @description Creates the accessibility h2 header and places it after the iframe in the Dom for navigation.
 */

/**
 * @id YAHOO.widget.SimpleEditor._disableEditor
 * @private
 * @method _disableEditor
 * @param {Boolean} disabled Pass true to disable, false to enable
 * @description Creates a mask to place over the Editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor.EDITOR_PANEL_ID
 * @property EDITOR_PANEL_ID
 * @description HTML id to give the properties window in the DOM.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.SEP_DOMPATH
 * @property SEP_DOMPATH
 * @description The value to place in between the Dom path items
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_LEAVE_EDITOR
 * @property STR_LEAVE_EDITOR
 * @description The accessibility string for the element after the iFrame
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_BEFORE_EDITOR
 * @property STR_BEFORE_EDITOR
 * @description The accessibility string for the element before the iFrame
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_TITLE
 * @property STR_TITLE
 * @description The Title of the HTML document that is created in the iFrame
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_IMAGE_HERE
 * @property STR_IMAGE_HERE
 * @description The text to place in the URL textbox when using the blankimage.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STR_LINK_URL
 * @property STR_LINK_URL
 * @description The label string for the Link URL.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.STOP_EXEC_COMMAND
 * @protected
 * @property STOP_EXEC_COMMAND
 * @description Set to true when you want the default execCommand function to not process anything
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.STOP_NODE_CHANGE
 * @protected
 * @property STOP_NODE_CHANGE
 * @description Set to true when you want the default nodeChange function to not process anything
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_NOEDIT
 * @protected
 * @property CLASS_NOEDIT
 * @description CSS class applied to elements that are not editable.
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_CONTAINER
 * @protected
 * @property CLASS_CONTAINER
 * @description Default CSS class to apply to the editors container element
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_EDITABLE
 * @protected
 * @property CLASS_EDITABLE
 * @description Default CSS class to apply to the editors iframe element
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_EDITABLE_CONT
 * @protected
 * @property CLASS_EDITABLE_CONT
 * @description Default CSS class to apply to the editors iframe's parent element
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.CLASS_PREFIX
 * @protected
 * @property CLASS_PREFIX
 * @description Default prefix for dynamically created class names
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.browser
 * @property browser
 * @description Standard browser detection
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.init
 * @method init
 * @description The Editor class' initialization method
 */

/**
 * @id YAHOO.widget.SimpleEditor.initAttributes
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create
 * the editor.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the editor.
 */

/**
 * @id YAHOO.widget.SimpleEditor.container
 * @config container
 * @description Used when dynamically creating the Editor from Javascript with no default textarea.
 * We will create one and place it in this container. If no container is passed we will append to document.body.
 * @default false
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.plainText
 * @config plainText
 * @description Process the inital textarea data as if it was plain text. Accounting for spaces, tabs and line feeds.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.iframe
 * @private
 * @config iframe
 * @description Internal config for holding the iframe element.
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.textarea
 * @private
 * @deprecated
 * @config textarea
 * @description Internal config for holding the textarea element (replaced with element).
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.container
 * @private
 * @config container
 * @description Internal config for holding a reference to the container to append a dynamic editor to.
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.nodeChangeThreshold
 * @config nodeChangeThreshold
 * @description The number of seconds that need to be in between nodeChange processing
 * @default 3
 * @type Number
 */

/**
 * @id YAHOO.widget.SimpleEditor.allowNoEdit
 * @config allowNoEdit
 * @description Should the editor check for non-edit fields. It should be noted that this technique is not perfect. If the user does the right things, they will still be able to make changes.
 * Such as highlighting an element below and above the content and hitting a toolbar button or a shortcut key.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.limitCommands
 * @config limitCommands
 * @description Should the Editor limit the allowed execCommands to the ones available in the toolbar. If true, then execCommand and keyboard shortcuts will fail if they are not defined in the toolbar.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.element_cont
 * @config element_cont
 * @description Internal config for the editors container
 * @default false
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.editor_wrapper
 * @private
 * @config editor_wrapper
 * @description The outter wrapper for the entire editor.
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.SimpleEditor.height
 * @attribute height
 * @description The height of the editor iframe container, not including the toolbar..
 * @default Best guessed size of the textarea, for best results use CSS to style the height of the textarea or pass it in as an argument
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.autoHeight
 * @config autoHeight
 * @description Remove the scrollbars from the edit area and resize it to fit the content. It will not go any lower than the current config height.
 * @default false
 * @type Boolean || Number
 */

/**
 * @id YAHOO.widget.SimpleEditor.width
 * @attribute width
 * @description The width of the editor container.
 * @default Best guessed size of the textarea, for best results use CSS to style the width of the textarea or pass it in as an argument
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.blankimage
 * @attribute blankimage
 * @description The URL for the image placeholder to put in when inserting an image.
 * @default The yahooapis.com address for the current release + 'assets/blankimage.png'
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.css
 * @attribute css
 * @description The Base CSS used to format the content of the editor
 * @default <code><pre>html {
height: 95%;
}
body {
height: 100%;
padding: 7px; background-color: #fff; font:13px/1.22 arial,helvetica,clean,sans-serif;*font-size:small;*font:x-small;
}
a {
color: blue;
text-decoration: underline;
cursor: pointer;
}
.warning-localfile {
border-bottom: 1px dashed red !important;
}
.yui-busy {
cursor: wait !important;
}
img.selected { //Safari image selection
border: 2px dotted #808080;
}
img {
cursor: pointer !important;
border: none;
}
</pre></code>
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.html
 * @attribute html
 * @description The default HTML to be written to the iframe document before the contents are loaded (Note that the DOCTYPE attr will be added at render item)
 * @default This HTML requires a few things if you are to override:
<p><code>{TITLE}, {CSS}, {HIDDEN_CSS}, {EXTRA_CSS}</code> and <code>{CONTENT}</code> need to be there, they are passed to YAHOO.lang.substitute to be replace with other strings.<p>
<p><code>onload="document.body._rteLoaded = true;"</code> : the onload statement must be there or the editor will not finish loading.</p>
<code>
<pre>
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;{TITLE}&lt;/title&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;style&gt;
{CSS}
&lt;/style&gt;
&lt;style&gt;
{HIDDEN_CSS}
&lt;/style&gt;
&lt;style&gt;
{EXTRA_CSS}
&lt;/style&gt;
&lt;/head&gt;
&lt;body onload="document.body._rteLoaded = true;"&gt;
{CONTENT}
&lt;/body&gt;
&lt;/html&gt;
</pre>
</code>
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.extracss
 * @attribute extracss
 * @description Extra user defined css to load after the default SimpleEditor CSS
 * @default ''
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.handleSubmit
 * @attribute handleSubmit
 * @description Config handles if the editor will attach itself to the textareas parent form's submit handler.
If it is set to true, the editor will attempt to attach a submit listener to the textareas parent form.
Then it will trigger the editors save handler and place the new content back into the text area before the form is submitted.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.disabled
 * @attribute disabled
 * @description This will toggle the editor's disabled state. When the editor is disabled, designMode is turned off and a mask is placed over the iframe so no interaction can take place.
All Toolbar buttons are also disabled so they cannot be used.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbar_cont
 * @config toolbar_cont
 * @description Internal config for the toolbars container
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbar
 * @attribute toolbar
 * @description The default toolbar config.
 * @type Object
 */

/**
 * @id YAHOO.widget.SimpleEditor.animate
 * @attribute animate
 * @description Should the editor animate window movements
 * @default false unless Animation is found, then true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.panel
 * @config panel
 * @description A reference to the panel we are using for windows.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.focusAtStart
 * @attribute focusAtStart
 * @description Should we focus the window when the content is ready?
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.dompath
 * @attribute dompath
 * @description Toggle the display of the current Dom path below the editor
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor.markup
 * @attribute markup
 * @description Should we try to adjust the markup for the following types: semantic, css, default or xhtml
 * @default "semantic"
 * @type String
 */

/**
 * @id YAHOO.widget.SimpleEditor.removeLineBreaks
 * @attribute removeLineBreaks
 * @description Should we remove linebreaks and extra spaces on cleanup
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.SimpleEditor._getBlankImage
 * @private
 * @method _getBlankImage
 * @description Retrieves the full url of the image to use as the blank image.
 * @return {String} The URL to the blank image
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleAutoHeight
 * @private
 * @method _handleAutoHeight
 * @description Handles resizing the editor's height based on the content
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleFormSubmit
 * @private
 * @method _handleFormSubmit
 * @description Handles the form submission.
 * @param {Object} ev The Form Submit Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleFontSize
 * @private
 * @method _handleFontSize
 * @description Handles the font size button in the toolbar.
 * @param {Object} o Object returned from Toolbar's buttonClick Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleAlign
 * @private
 * @method _handleAlign
 * @description Handles the alignment buttons in the toolbar.
 * @param {Object} o Object returned from Toolbar's buttonClick Event
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleAfterNodeChange
 * @private
 * @method _handleAfterNodeChange
 * @description Fires after a nodeChange happens to setup the things that where reset on the node change (button state).
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleInsertImageClick
 * @private
 * @method _handleInsertImageClick
 * @description Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleInsertImageWindowClose
 * @private
 * @method _handleInsertImageWindowClose
 * @description Handles the closing of the Image Properties Window.
 */

/**
 * @id YAHOO.widget.SimpleEditor._isLocalFile
 * @private
 * @method _isLocalFile
 * @param {String} url THe url/string to check
 * @description Checks to see if a string (href or img src) is possibly a local file reference..
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleCreateLinkClick
 * @private
 * @method _handleCreateLinkClick
 * @description Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked.
 */

/**
 * @id YAHOO.widget.SimpleEditor._handleCreateLinkWindowClose
 * @private
 * @method _handleCreateLinkWindowClose
 * @description Handles the closing of the Link Properties Window.
 */

/**
 * @id YAHOO.widget.SimpleEditor.render
 * @method render
 * @description Calls the private method _render in a setTimeout to allow for other things on the page to continue to load.
 */

/**
 * @id YAHOO.widget.SimpleEditor._render
 * @private
 * @method _render
 * @description Causes the toolbar and the editor to render and replace the textarea.
 */

/**
 * @id YAHOO.widget.SimpleEditor.execCommand
 * @method execCommand
 * @param {String} action The "execCommand" action to try to execute (Example: bold, insertimage, inserthtml)
 * @param {String} value (optional) The value for a given action such as action: fontname value: 'Verdana'
 * @description This method attempts to try and level the differences in the various browsers and their support for execCommand actions
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_backcolor
 * @method cmd_backcolor
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('backcolor') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_forecolor
 * @method cmd_forecolor
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('forecolor') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_unlink
 * @method cmd_unlink
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('unlink') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_createlink
 * @method cmd_createlink
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('createlink') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_insertimage
 * @method cmd_insertimage
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('insertimage') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_inserthtml
 * @method cmd_inserthtml
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('inserthtml') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_list
 * @method cmd_list
 * @param tag The tag of the list you want to create (eg, ul or ol)
 * @description This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_insertorderedlist
 * @method cmd_insertorderedlist
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('insertorderedlist ') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_insertunorderedlist
 * @method cmd_insertunorderedlist
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('insertunorderedlist') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_fontname
 * @method cmd_fontname
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('fontname') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor.cmd_fontsize
 * @method cmd_fontsize
 * @param value Value passed from the execCommand method
 * @description This is an execCommand override method. It is called from execCommand when the execCommand('fontsize') is used.
 */

/**
 * @id YAHOO.widget.SimpleEditor._swapEl
 * @private
 * @method _swapEl
 * @param {HTMLElement} el The element to swap with
 * @param {String} tagName The tagname of the element that you wish to create
 * @param {Function} callback (optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function.
 * @description This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it's place.
 */

/**
 * @id YAHOO.widget.SimpleEditor._createCurrentElement
 * @private
 * @method _createCurrentElement
 * @param {String} tagName (optional defaults to a) The tagname of the element that you wish to create
 * @param {Object} tagStyle (optional) Object literal containing styles to apply to the new element.
 * @description This is a work around for the various browser issues with execCommand. This method will run <code>execCommand('fontname', false, 'yui-tmp')</code> on the given selection.
 * It will then search the document for an element with the font-family set to <strong>yui-tmp</strong> and replace that with another span that has other information in it, then assign the new span to the
 * <code>this.currentElement</code> array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit.
 */

/**
 * @id YAHOO.widget.SimpleEditor.el
 * @knownissue
 * @browser Safari 2.x
 * @description The issue here is that we have no way of knowing where the cursor position is
 * inside of the iframe, so we have to place the newly inserted data in the best place that we can.
 * @method el
 */

/**
 * @id YAHOO.widget.SimpleEditor.saveHTML
 * @method saveHTML
 * @description Cleans the HTML with the cleanHTML method then places that string back into the textarea.
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.setEditorHTML
 * @method setEditorHTML
 * @param {String} html The html content to load into the editor
 * @description Loads HTML into the editors body
 */

/**
 * @id YAHOO.widget.SimpleEditor.getEditorHTML
 * @method getEditorHTML
 * @description Gets the unprocessed/unfiltered HTML from the editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.show
 * @method show
 * @description This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none.
 */

/**
 * @id YAHOO.widget.SimpleEditor.hide
 * @method hide
 * @description This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows.
 */

/**
 * @id YAHOO.widget.SimpleEditor._cleanIncomingHTML
 * @method _cleanIncomingHTML
 * @param {String} html The unfiltered HTML
 * @description Process the HTML with a few regexes to clean it up and stabilize the input
 * @return {String} The filtered HTML
 */

/**
 * @id YAHOO.widget.SimpleEditor.cleanHTML
 * @method cleanHTML
 * @param {String} html The unfiltered HTML
 * @description Process the HTML with a few regexes to clean it up and stabilize the output
 * @return {String} The filtered HTML
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_invalid_lists
 * @method filter_invalid_lists
 * @param String html The HTML string to filter
 * @description Filters invalid ol and ul list markup, converts this: <li></li><ol>..</ol> to this: <li></li><li><ol>..</ol></li>
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_safari
 * @method filter_safari
 * @param String html The HTML string to filter
 * @description Filters strings specific to Safari
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_internals
 * @method filter_internals
 * @param String html The HTML string to filter
 * @description Filters internal RTE strings and bogus attrs we don't want
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_all_rgb
 * @method filter_all_rgb
 * @param String str The HTML string to filter
 * @description Converts all RGB color strings found in passed string to a hex color, example: style="color: rgb(0, 255, 0)" converts to style="color: #00ff00"
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.filter_rgb
 * @method filter_rgb
 * @param String css The CSS string containing rgb(#,#,#);
 * @description Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.pre_filter_linebreaks
 * @method pre_filter_linebreaks
 * @param String html The HTML to filter
 * @param String markup The markup type to filter to
 * @description HTML Pre Filter
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.post_filter_linebreaks
 * @method post_filter_linebreaks
 * @param String html The HTML to filter
 * @param String markup The markup type to filter to
 * @description HTML Pre Filter
 * @return String
 */

/**
 * @id YAHOO.widget.SimpleEditor.clearEditorDoc
 * @method clearEditorDoc
 * @description Clear the doc of the Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor._renderPanel
 * @private
 * @method _renderPanel
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.openWindow
 * @method openWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.moveWindow
 * @method moveWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor._closeWindow
 * @private
 * @method _closeWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.closeWindow
 * @method closeWindow
 * @description Override Method for Advanced Editor
 */

/**
 * @id YAHOO.widget.SimpleEditor.destroy
 * @method destroy
 * @description Destroys the editor, all of it's elements and objects.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.SimpleEditor.toString
 * @method toString
 * @description Returns a string representing the editor.
 * @return {String}
 */

/**
 * @id YAHOO.widget.SimpleEditor.toolbarLoaded
 * @event toolbarLoaded
 * @description Event is fired during the render process directly after the Toolbar is loaded. Allowing you to attach events to the toolbar. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.cleanHTML
 * @event cleanHTML
 * @description Event is fired after the cleanHTML method is called.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterRender
 * @event afterRender
 * @description Event is fired after the render process finishes. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorContentLoaded
 * @event editorContentLoaded
 * @description Event is fired after the editor iframe's document fully loads and fires it's onload event. From here you can start injecting your own things into the document. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorMouseUp
 * @event editorMouseUp
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorMouseDown
 * @event editorMouseDown
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorDoubleClick
 * @event editorDoubleClick
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorKeyUp
 * @event editorKeyUp
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorKeyPress
 * @event editorKeyPress
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.editorKeyDown
 * @event editorKeyDown
 * @param {Event} ev The DOM Event that occured
 * @description Passed through HTML Event. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.beforeNodeChange
 * @event beforeNodeChange
 * @description Event fires at the beginning of the nodeChange process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterNodeChange
 * @event afterNodeChange
 * @description Event fires at the end of the nodeChange process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.beforeExecCommand
 * @event beforeExecCommand
 * @description Event fires at the beginning of the execCommand process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.SimpleEditor.afterExecCommand
 * @event afterExecCommand
 * @description Event fires at the end of the execCommand process. See Element.addListener for more information on listening for this event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.EditorInfo
 * @description Singleton object used to track the open window objects and panels across the various open editors
 * @class EditorInfo
 * @static
 */

/**
 * @id YAHOO.widget.EditorInfo._instances
 * @private
 * @property _instances
 * @description A reference to all editors on the page.
 * @type Object
 */

/**
 * @id YAHOO.widget.EditorInfo.window
 * @private
 * @property window
 * @description A reference to the currently open window object in any editor on the page.
 * @type Object YAHOO.widget.EditorWindow
 */

/**
 * @id YAHOO.widget.EditorInfo.panel
 * @private
 * @property panel
 * @description A reference to the currently open panel in any editor on the page.
 * @type Object YAHOO.widget.Overlay
 */

/**
 * @id YAHOO.widget.EditorInfo.getEditorById
 * @method getEditorById
 * @description Returns a reference to the Editor object associated with the given textarea
 * @param {String/HTMLElement} id The id or reference of the textarea to return the Editor instance of
 * @return Object YAHOO.widget.Editor
 */

/**
 * @id YAHOO.widget.EditorInfo.toString
 * @method toString
 * @description Returns a string representing the EditorInfo.
 * @return {String}
 */

/**
 * Provides Attribute configurations.
 * @id YAHOO.util.Attribute
 * @namespace YAHOO.util
 * @class Attribute
 * @constructor
 * @param hash {Object} The intial Attribute.
 * @param {YAHOO.util.AttributeProvider} The owner of the Attribute instance.
 */

/**
 * The name of the attribute.
 * @id YAHOO.util.Attribute.name
 * @property name
 * @type String
 */

/**
 * The value of the attribute.
 * @id YAHOO.util.Attribute.value
 * @property value
 * @type String
 */

/**
 * The owner of the attribute.
 * @id YAHOO.util.Attribute.owner
 * @property owner
 * @type YAHOO.util.AttributeProvider
 */

/**
 * Whether or not the attribute is read only.
 * @id YAHOO.util.Attribute.readOnly
 * @property readOnly
 * @type Boolean
 */

/**
 * Whether or not the attribute can only be written once.
 * @id YAHOO.util.Attribute.writeOnce
 * @property writeOnce
 * @type Boolean
 */

/**
 * The attribute's initial configuration.
 * @id YAHOO.util.Attribute._initialConfig
 * @private
 * @property _initialConfig
 * @type Object
 */

/**
 * Whether or not the attribute's value has been set.
 * @id YAHOO.util.Attribute._written
 * @private
 * @property _written
 * @type Boolean
 */

/**
 * The method to use when setting the attribute's value.
 * The method recieves the new value as the only argument.
 * @id YAHOO.util.Attribute.method
 * @property method
 * @type Function
 */

/**
 * The validator to use when setting the attribute's value.
 * @id YAHOO.util.Attribute.validator
 * @property validator
 * @type Function
 * @return Boolean
 */

/**
 * Retrieves the current value of the attribute.
 * @id YAHOO.util.Attribute.getValue
 * @method getValue
 * @return {any} The current value of the attribute.
 */

/**
 * Sets the value of the attribute and fires beforeChange and change events.
 * @id YAHOO.util.Attribute.setValue
 * @method setValue
 * @param {Any} value The value to apply to the attribute.
 * @param {Boolean} silent If true the change events will not be fired.
 * @return {Boolean} Whether or not the value was set.
 */

/**
 * Allows for configuring the Attribute's properties.
 * @id YAHOO.util.Attribute.configure
 * @method configure
 * @param {Object} map A key-value map of Attribute properties.
 * @param {Boolean} init Whether or not this should become the initial config.
 */

/**
 * Resets the value to the initial config value.
 * @id YAHOO.util.Attribute.resetValue
 * @method resetValue
 * @return {Boolean} Whether or not the value was set.
 */

/**
 * Resets the attribute config to the initial config state.
 * @id YAHOO.util.Attribute.resetConfig
 * @method resetConfig
 */

/**
 * Resets the value to the current value.
 * Useful when values may have gotten out of sync with actual properties.
 * @id YAHOO.util.Attribute.refresh
 * @method refresh
 * @return {Boolean} Whether or not the value was set.
 */

/**
 * Provides and manages YAHOO.util.Attribute instances
 * @id YAHOO.util.AttributeProvider
 * @namespace YAHOO.util
 * @class AttributeProvider
 * @uses YAHOO.util.EventProvider
 */

/**
 * A key-value map of Attribute configurations
 * @id YAHOO.util.AttributeProvider._configs
 * @property _configs
 * @protected (may be used by subclasses and augmentors)
 * @private
 * @type {Object}
 */

/**
 * Returns the current value of the attribute.
 * @id YAHOO.util.AttributeProvider.get
 * @method get
 * @param {String} key The attribute whose value will be returned.
 */

/**
 * Sets the value of a config.
 * @id YAHOO.util.AttributeProvider.set
 * @method set
 * @param {String} key The name of the attribute
 * @param {Any} value The value to apply to the attribute
 * @param {Boolean} silent Whether or not to suppress change events
 * @return {Boolean} Whether or not the value was set.
 */

/**
 * Returns an array of attribute names.
 * @id YAHOO.util.AttributeProvider.getAttributeKeys
 * @method getAttributeKeys
 * @return {Array} An array of attribute names.
 */

/**
 * Sets multiple attribute values.
 * @id YAHOO.util.AttributeProvider.setAttributes
 * @method setAttributes
 * @param {Object} map  A key-value map of attributes
 * @param {Boolean} silent Whether or not to suppress change events
 */

/**
 * Resets the specified attribute's value to its initial value.
 * @id YAHOO.util.AttributeProvider.resetValue
 * @method resetValue
 * @param {String} key The name of the attribute
 * @param {Boolean} silent Whether or not to suppress change events
 * @return {Boolean} Whether or not the value was set
 */

/**
 * Sets the attribute's value to its current value.
 * @id YAHOO.util.AttributeProvider.refresh
 * @method refresh
 * @param {String | Array} key The attribute(s) to refresh
 * @param {Boolean} silent Whether or not to suppress change events
 */

/**
 * Adds an Attribute to the AttributeProvider instance.
 * @id YAHOO.util.AttributeProvider.register
 * @method register
 * @param {String} key The attribute's name
 * @param {Object} map A key-value map containing the
 * attribute's properties.
 * @deprecated Use setAttributeConfig
 */

/**
 * Returns the attribute's properties.
 * @id YAHOO.util.AttributeProvider.getAttributeConfig
 * @method getAttributeConfig
 * @param {String} key The attribute's name
 * @private
 * @return {object} A key-value map containing all of the
 * attribute's properties.
 */

/**
 * Sets or updates an Attribute instance's properties.
 * @id YAHOO.util.AttributeProvider.setAttributeConfig
 * @method setAttributeConfig
 * @param {String} key The attribute's name.
 * @param {Object} map A key-value map of attribute properties
 * @param {Boolean} init Whether or not this should become the intial config.
 */

/**
 * Sets or updates an Attribute instance's properties.
 * @id YAHOO.util.AttributeProvider.configureAttribute
 * @method configureAttribute
 * @param {String} key The attribute's name.
 * @param {Object} map A key-value map of attribute properties
 * @param {Boolean} init Whether or not this should become the intial config.
 * @deprecated Use setAttributeConfig
 */

/**
 * Resets an attribute to its intial configuration.
 * @id YAHOO.util.AttributeProvider.resetAttributeConfig
 * @method resetAttributeConfig
 * @param {String} key The attribute's name.
 * @private
 */

/**
 * Fires the attribute's beforeChange event.
 * @id YAHOO.util.AttributeProvider.fireBeforeChangeEvent
 * @method fireBeforeChangeEvent
 * @param {String} key The attribute's name.
 * @param {Obj} e The event object to pass to handlers.
 */

/**
 * Fires the attribute's change event.
 * @id YAHOO.util.AttributeProvider.fireChangeEvent
 * @method fireChangeEvent
 * @param {String} key The attribute's name.
 * @param {Obj} e The event object to pass to the handlers.
 */

/**
 * Element provides an wrapper object to simplify adding
 * event listeners, using dom methods, and managing attributes.
 * @id YAHOO.util.Element
 * @class Element
 * @uses YAHOO.util.AttributeProvider
 * @constructor
 * @param el {HTMLElement | String} The html element that
 * represents the Element.
 * @param {Object} map A key-value map of initial config names and values
 */

/**
 * Dom events supported by the Element instance.
 * @id YAHOO.util.Element.DOM_EVENTS
 * @property DOM_EVENTS
 * @type Object
 */

/**
 * Wrapper for HTMLElement method.
 * @id YAHOO.util.Element.appendChild
 * @method appendChild
 * @param {YAHOO.util.Element || HTMLElement} child The element to append.
 */

/**
 * Wrapper for HTMLElement method.
 * @id YAHOO.util.Element.getElementsByTagName
 * @method getElementsByTagName
 * @param {String} tag The tagName to collect
 */

/**
 * Wrapper for HTMLElement method.
 * @id YAHOO.util.Element.hasChildNodes
 * @method hasChildNodes
 * @return {Boolean} Whether or not the element has childNodes
 */

/**
 * Wrapper for HTMLElement method.
 * @id YAHOO.util.Element.insertBefore
 * @method insertBefore
 * @param {HTMLElement} element The HTMLElement to insert
 * @param {HTMLElement} before The HTMLElement to insert
 * the element before.
 */

/**
 * Wrapper for HTMLElement method.
 * @id YAHOO.util.Element.removeChild
 * @method removeChild
 * @param {HTMLElement} child The HTMLElement to remove
 */

/**
 * Wrapper for HTMLElement method.
 * @id YAHOO.util.Element.replaceChild
 * @method replaceChild
 * @param {HTMLElement} newNode The HTMLElement to insert
 * @param {HTMLElement} oldNode The HTMLElement to replace
 */

/**
 * Registers Element specific attributes.
 * @id YAHOO.util.Element.initAttributes
 * @method initAttributes
 * @param {Object} map A key-value map of initial attribute configs
 */

/**
 * Adds a listener for the given event.  These may be DOM or
 * customEvent listeners.  Any event that is fired via fireEvent
 * can be listened for.  All handlers receive an event object.
 * @id YAHOO.util.Element.addListener
 * @method addListener
 * @param {String} type The name of the event to listen for
 * @param {Function} fn The handler to call when the event fires
 * @param {Any} obj A variable to pass to the handler
 * @param {Object} scope The object to use for the scope of the handler
 */

/**
 * Alias for addListener
 * @id YAHOO.util.Element.on
 * @method on
 * @param {String} type The name of the event to listen for
 * @param {Function} fn The function call when the event fires
 * @param {Any} obj A variable to pass to the handler
 * @param {Object} scope The object to use for the scope of the handler
 */

/**
 * Alias for addListener
 * @id YAHOO.util.Element.subscribe
 * @method subscribe
 * @param {String} type The name of the event to listen for
 * @param {Function} fn The function call when the event fires
 * @param {Any} obj A variable to pass to the handler
 * @param {Object} scope The object to use for the scope of the handler
 */

/**
 * Remove an event listener
 * @id YAHOO.util.Element.removeListener
 * @method removeListener
 * @param {String} type The name of the event to listen for
 * @param {Function} fn The function call when the event fires
 */

/**
 * Wrapper for Dom method.
 * @id YAHOO.util.Element.addClass
 * @method addClass
 * @param {String} className The className to add
 */

/**
 * Wrapper for Dom method.
 * @id YAHOO.util.Element.getElementsByClassName
 * @method getElementsByClassName
 * @param {String} className The className to collect
 * @param {String} tag (optional) The tag to use in
 * conjunction with class name
 * @return {Array} Array of HTMLElements
 */

/**
 * Wrapper for Dom method.
 * @id YAHOO.util.Element.hasClass
 * @method hasClass
 * @param {String} className The className to add
 * @return {Boolean} Whether or not the element has the class name
 */

/**
 * Wrapper for Dom method.
 * @id YAHOO.util.Element.removeClass
 * @method removeClass
 * @param {String} className The className to remove
 */

/**
 * Wrapper for Dom method.
 * @id YAHOO.util.Element.replaceClass
 * @method replaceClass
 * @param {String} oldClassName The className to replace
 * @param {String} newClassName The className to add
 */

/**
 * Wrapper for Dom method.
 * @id YAHOO.util.Element.setStyle
 * @method setStyle
 * @param {String} property The style property to set
 * @param {String} value The value to apply to the style property
 */

/**
 * Wrapper for Dom method.
 * @id YAHOO.util.Element.getStyle
 * @method getStyle
 * @param {String} property The style property to retrieve
 * @return {String} The current value of the property
 */

/**
 * Apply any queued set calls.
 * @id YAHOO.util.Element.fireQueue
 * @method fireQueue
 */

/**
 * Appends the HTMLElement into either the supplied parentNode.
 * @id YAHOO.util.Element.appendTo
 * @method appendTo
 * @param {HTMLElement | Element} parentNode The node to append to
 * @param {HTMLElement | Element} before An optional node to insert before
 */

/**
 * The HTMLElement the Element instance refers to.
 * @id YAHOO.util.Element.element
 * @attribute element
 * @type HTMLElement
 */

/**
 * Sets the value of the property and fires beforeChange and change events.
 * @id YAHOO.util.Element._registerHTMLAttr
 * @private
 * @method _registerHTMLAttr
 * @param {YAHOO.util.Element} element The Element instance to
 * register the config to.
 * @param {String} key The name of the config to register
 * @param {Object} map A key-value map of the config's params
 */

/**
 * Fires when the Element's HTMLElement can be retrieved by Id.
 * <p>See: Element.addListener</p>
 * <p><strong>Event fields:</strong><br>
 * <code>&lt;String&gt; type</code> available<br>
 * <code>&lt;HTMLElement&gt;
 * target</code> the HTMLElement bound to this Element instance<br>
 * <p><strong>Usage:</strong><br>
 * <code>var handler = function(e) {var target = e.target};<br>
 * myTabs.addListener('available', handler);</code></p>
 * @id YAHOO.util.Element.available
 * @event available
 */

/**
 * Fires when the Element's HTMLElement subtree is rendered.
 * <p>See: Element.addListener</p>
 * <p><strong>Event fields:</strong><br>
 * <code>&lt;String&gt; type</code> contentReady<br>
 * <code>&lt;HTMLElement&gt;
 * target</code> the HTMLElement bound to this Element instance<br>
 * <p><strong>Usage:</strong><br>
 * <code>var handler = function(e) {var target = e.target};<br>
 * myTabs.addListener('contentReady', handler);</code></p>
 * @id YAHOO.util.Element.contentReady
 * @event contentReady
 */

/**
 * Fires before the Element is appended to another Element.
 * <p>See: Element.addListener</p>
 * <p><strong>Event fields:</strong><br>
 * <code>&lt;String&gt; type</code> beforeAppendTo<br>
 * <code>&lt;HTMLElement/Element&gt;
 * target</code> the HTMLElement/Element being appended to
 * <p><strong>Usage:</strong><br>
 * <code>var handler = function(e) {var target = e.target};<br>
 * myTabs.addListener('beforeAppendTo', handler);</code></p>
 * @id YAHOO.util.Element.beforeAppendTo
 * @event beforeAppendTo
 */

/**
 * Fires after the Element is appended to another Element.
 * <p>See: Element.addListener</p>
 * <p><strong>Event fields:</strong><br>
 * <code>&lt;String&gt; type</code> appendTo<br>
 * <code>&lt;HTMLElement/Element&gt;
 * target</code> the HTMLElement/Element being appended to
 * <p><strong>Usage:</strong><br>
 * <code>var handler = function(e) {var target = e.target};<br>
 * myTabs.addListener('appendTo', handler);</code></p>
 * @id YAHOO.util.Element.appendTo
 * @event appendTo
 */

/**
 * The CustomEvent class lets you define events for your application
 * that can be subscribed to by one or more independent component.
 *
 * @id YAHOO.util.CustomEvent
 * @param {String}  type The type of event, which is passed to the callback
 *                  when the event fires
 * @param {Object}  oScope The context the event will fire from.  "this" will
 *                  refer to this object in the callback.  Default value:
 *                  the window object.  The listener can override this.
 * @param {boolean} silent pass true to prevent the event from writing to
 *                  the debugsystem
 * @param {int}     signature the signature that the custom event subscriber
 *                  will receive. YAHOO.util.CustomEvent.LIST or
 *                  YAHOO.util.CustomEvent.FLAT.  The default is
 *                  YAHOO.util.CustomEvent.LIST.
 * @namespace YAHOO.util
 * @class CustomEvent
 * @constructor
 */

/**
 * The type of event, returned to subscribers when the event fires
 * @id YAHOO.util.CustomEvent.type
 * @property type
 * @type string
 */

/**
 * The scope the the event will fire from by default.  Defaults to the window
 * obj
 * @id YAHOO.util.CustomEvent.scope
 * @property scope
 * @type object
 */

/**
 * By default all custom events are logged in the debug build, set silent
 * to true to disable debug outpu for this event.
 * @id YAHOO.util.CustomEvent.silent
 * @property silent
 * @type boolean
 */

/*** @id YAHOO.util.CustomEvent.signature

 * Custom events support two styles of arguments provided to the event
 * subscribers.
 * <ul>
 * <li>YAHOO.util.CustomEvent.LIST:
 *   <ul>
 *   <li>param1: event name</li>
 *   <li>param2: array of arguments sent to fire</li>
 *   <li>param3: <optional> a custom object supplied by the subscriber</li>
 *   </ul>
 * </li>
 * <li>YAHOO.util.CustomEvent.FLAT
 *   <ul>
 *   <li>param1: the first argument passed to fire.  If you need to
 *           pass multiple parameters, use and array or object literal</li>
 *   <li>param2: <optional> a custom object supplied by the subscriber</li>
 *   </ul>
 * </li>
 * </ul>
 *   @property signature
 *   @type int
 */

/**
 * The subscribers to this event
 * @id YAHOO.util.CustomEvent.subscribers
 * @property subscribers
 * @type Subscriber[]
 */

/**
 * Custom events provide a custom event that fires whenever there is
 * a new subscriber to the event.  This provides an opportunity to
 * handle the case where there is a non-repeating event that has
 * already fired has a new subscriber.
 *
 * @id YAHOO.util.CustomEvent.subscribeEvent
 * @event subscribeEvent
 * @type YAHOO.util.CustomEvent
 * @param {Function} fn The function to execute
 * @param {Object}   obj An object to be passed along when the event
 *                       fires
 * @param {boolean|Object}  override If true, the obj passed in becomes
 *                                   the execution scope of the listener.
 *                                   if an object, that object becomes the
 *                                   the execution scope.
 */

/**
 * In order to make it possible to execute the rest of the subscriber
 * stack when one thows an exception, the subscribers exceptions are
 * caught.  The most recent exception is stored in this property
 * @id YAHOO.util.CustomEvent.lastError
 * @property lastError
 * @type Error
 */

/**
 * Subscriber listener sigature constant.  The LIST type returns three
 * parameters: the event type, the array of args passed to fire, and
 * the optional custom object
 * @id YAHOO.util.CustomEvent.YAHOO.util.CustomEvent.LIST
 * @property YAHOO.util.CustomEvent.LIST
 * @static
 * @type int
 */

/**
 * Subscriber listener sigature constant.  The FLAT type returns two
 * parameters: the first argument passed to fire and the optional
 * custom object
 * @id YAHOO.util.CustomEvent.YAHOO.util.CustomEvent.FLAT
 * @property YAHOO.util.CustomEvent.FLAT
 * @static
 * @type int
 */

/**
 * Subscribes the caller to this event
 * @id YAHOO.util.CustomEvent.subscribe
 * @method subscribe
 * @param {Function} fn        The function to execute
 * @param {Object}   obj       An object to be passed along when the event
 *                             fires
 * @param {boolean|Object}  override If true, the obj passed in becomes
 *                                   the execution scope of the listener.
 *                                   if an object, that object becomes the
 *                                   the execution scope.
 */

/**
 * Unsubscribes subscribers.
 * @id YAHOO.util.CustomEvent.unsubscribe
 * @method unsubscribe
 * @param {Function} fn  The subscribed function to remove, if not supplied
 *                       all will be removed
 * @param {Object}   obj  The custom object passed to subscribe.  This is
 *                        optional, but if supplied will be used to
 *                        disambiguate multiple listeners that are the same
 *                        (e.g., you subscribe many object using a function
 *                        that lives on the prototype)
 * @return {boolean} True if the subscriber was found and detached.
 */

/**
 * Notifies the subscribers.  The callback functions will be executed
 * from the scope specified when the event was created, and with the
 * following parameters:
 *   <ul>
 *   <li>The type of event</li>
 *   <li>All of the arguments fire() was executed with as an array</li>
 *   <li>The custom object (if any) that was passed into the subscribe()
 *       method</li>
 *   </ul>
 * @id YAHOO.util.CustomEvent.fire
 * @method fire
 * @param {Object*} arguments an arbitrary set of parameters to pass to
 *                            the handler.
 * @return {boolean} false if one of the subscribers returned false,
 *                   true otherwise
 */

/**
 * Removes all listeners
 * @id YAHOO.util.CustomEvent.unsubscribeAll
 * @method unsubscribeAll
 * @return {int} The number of listeners unsubscribed
 */

/**
 * @id YAHOO.util.CustomEvent._delete
 * @method _delete
 * @private
 */

/**
 * @id YAHOO.util.CustomEvent.toString
 * @method toString
 */

/**
 * Stores the subscriber information to be used when the event fires.
 * @id YAHOO.util.Subscriber
 * @param {Function} fn       The function to execute
 * @param {Object}   obj      An object to be passed along when the event fires
 * @param {boolean}  override If true, the obj passed in becomes the execution
 *                            scope of the listener
 * @class Subscriber
 * @constructor
 */

/**
 * The callback that will be execute when the event fires
 * @id YAHOO.util.Subscriber.fn
 * @property fn
 * @type function
 */

/**
 * An optional custom object that will passed to the callback when
 * the event fires
 * @id YAHOO.util.Subscriber.obj
 * @property obj
 * @type object
 */

/**
 * The default execution scope for the event listener is defined when the
 * event is created (usually the object which contains the event).
 * By setting override to true, the execution scope becomes the custom
 * object passed in by the subscriber.  If override is an object, that
 * object becomes the scope.
 * @id YAHOO.util.Subscriber.override
 * @property override
 * @type boolean|object
 */

/**
 * Returns the execution scope for this listener.  If override was set to true
 * the custom obj will be the scope.  If override is an object, that is the
 * scope, otherwise the default scope will be used.
 * @id YAHOO.util.Subscriber.getScope
 * @method getScope
 * @param {Object} defaultScope the scope to use if this listener does not
 *                              override it.
 */

/**
 * Returns true if the fn and obj match this objects properties.
 * Used by the unsubscribe method to match the right subscriber.
 *
 * @id YAHOO.util.Subscriber.contains
 * @method contains
 * @param {Function} fn the function to execute
 * @param {Object} obj an object to be passed along when the event fires
 * @return {boolean} true if the supplied arguments match this
 *                   subscriber's signature.
 */

/**
 * @id YAHOO.util.Subscriber.toString
 * @method toString
 */

/**
 * The event utility provides functions to add and remove event listeners,
 * event cleansing.  It also tries to automatically remove listeners it
 * registers during the unload event.
 *
 * @id YAHOO.util.Event
 * @class Event
 * @static
 */

/**
 * True after the onload event has fired
 * @id YAHOO.util.Event.loadComplete
 * @property loadComplete
 * @type boolean
 * @static
 * @private
 */

/**
 * Cache of wrapped listeners
 * @id YAHOO.util.Event.listeners
 * @property listeners
 * @type array
 * @static
 * @private
 */

/**
 * User-defined unload function that will be fired before all events
 * are detached
 * @id YAHOO.util.Event.unloadListeners
 * @property unloadListeners
 * @type array
 * @static
 * @private
 */

/**
 * Cache of DOM0 event handlers to work around issues with DOM2 events
 * in Safari
 * @id YAHOO.util.Event.legacyEvents
 * @property legacyEvents
 * @static
 * @private
 */

/**
 * Listener stack for DOM0 events
 * @id YAHOO.util.Event.legacyHandlers
 * @property legacyHandlers
 * @static
 * @private
 */

/**
 * The number of times to poll after window.onload.  This number is
 * increased if additional late-bound handlers are requested after
 * the page load.
 * @id YAHOO.util.Event.retryCount
 * @property retryCount
 * @static
 * @private
 */

/**
 * onAvailable listeners
 * @id YAHOO.util.Event.onAvailStack
 * @property onAvailStack
 * @static
 * @private
 */

/**
 * Lookup table for legacy events
 * @id YAHOO.util.Event.legacyMap
 * @property legacyMap
 * @static
 * @private
 */

/**
 * Counter for auto id generation
 * @id YAHOO.util.Event.counter
 * @property counter
 * @static
 * @private
 */

/**
 * Normalized keycodes for webkit/safari
 * @id YAHOO.util.Event.webkitKeymap
 * @property webkitKeymap
 * @type {int: int}
 * @private
 * @static
 * @final
 */

/**
 * The number of times we should look for elements that are not
 * in the DOM at the time the event is requested after the document
 * has been loaded.  The default is 2000@amp;20 ms, so it will poll
 * for 40 seconds or until all outstanding handlers are bound
 * (whichever comes first).
 * @id YAHOO.util.Event.POLL_RETRYS
 * @property POLL_RETRYS
 * @type int
 * @static
 * @final
 */

/**
 * The poll interval in milliseconds
 * @id YAHOO.util.Event.POLL_INTERVAL
 * @property POLL_INTERVAL
 * @type int
 * @static
 * @final
 */

/**
 * Element to bind, int constant
 * @id YAHOO.util.Event.EL
 * @property EL
 * @type int
 * @static
 * @final
 */

/**
 * Type of event, int constant
 * @id YAHOO.util.Event.TYPE
 * @property TYPE
 * @type int
 * @static
 * @final
 */

/**
 * Function to execute, int constant
 * @id YAHOO.util.Event.FN
 * @property FN
 * @type int
 * @static
 * @final
 */

/**
 * Function wrapped for scope correction and cleanup, int constant
 * @id YAHOO.util.Event.WFN
 * @property WFN
 * @type int
 * @static
 * @final
 */

/**
 * Object passed in by the user that will be returned as a
 * parameter to the callback, int constant.  Specific to
 * unload listeners
 * @id YAHOO.util.Event.OBJ
 * @property OBJ
 * @type int
 * @static
 * @final
 */

/**
 * Adjusted scope, either the element we are registering the event
 * on or the custom object passed in by the listener, int constant
 * @id YAHOO.util.Event.ADJ_SCOPE
 * @property ADJ_SCOPE
 * @type int
 * @static
 * @final
 */

/**
 * The original obj passed into addListener
 * @id YAHOO.util.Event.OBJ
 * @property OBJ
 * @type int
 * @static
 * @final
 */

/**
 * The original scope parameter passed into addListener
 * @id YAHOO.util.Event.OVERRIDE
 * @property OVERRIDE
 * @type int
 * @static
 * @final
 */

/**
 * addListener/removeListener can throw errors in unexpected scenarios.
 * These errors are suppressed, the method returns false, and this property
 * is set
 * @id YAHOO.util.Event.lastError
 * @property lastError
 * @static
 * @type Error
 */

/**
 * Safari detection
 * @id YAHOO.util.Event.isSafari
 * @property isSafari
 * @private
 * @static
 * @deprecated use YAHOO.env.ua.webkit
 */

/**
 * webkit version
 * @id YAHOO.util.Event.webkit
 * @property webkit
 * @type string
 * @private
 * @static
 * @deprecated use YAHOO.env.ua.webkit
 */

/**
 * IE detection
 * @id YAHOO.util.Event.isIE
 * @property isIE
 * @private
 * @static
 * @deprecated use YAHOO.env.ua.ie
 */

/**
 * poll handle
 * @id YAHOO.util.Event._interval
 * @property _interval
 * @static
 * @private
 */

/**
 * document readystate poll handle
 * @id YAHOO.util.Event._dri
 * @property _dri
 * @static
 * @private
 */

/**
 * True when the document is initially usable
 * @id YAHOO.util.Event.DOMReady
 * @property DOMReady
 * @type boolean
 * @static
 */

/**
 * @id YAHOO.util.Event.startInterval
 * @method startInterval
 * @static
 * @private
 */

/**
 * Executes the supplied callback when the item with the supplied
 * id is found.  This is meant to be used to execute behavior as
 * soon as possible as the page loads.  If you use this after the
 * initial page load it will poll for a fixed time for the element.
 * The number of times it will poll and the frequency are
 * configurable.  By default it will poll for 10 seconds.
 *
 * <p>The callback is executed with a single parameter:
 * the custom object parameter, if provided.</p>
 *
 * @id YAHOO.util.Event.onAvailable
 * @method onAvailable
 *
 * @param {string||string[]}   p_id the id of the element, or an array
 * of ids to look for.
 * @param {function} p_fn what to execute when the element is found.
 * @param {object}   p_obj an optional object to be passed back as
 *                   a parameter to p_fn.
 * @param {boolean|object}  p_override If set to true, p_fn will execute
 *                   in the scope of p_obj, if set to an object it
 *                   will execute in the scope of that object
 * @param checkContent {boolean} check child node readiness (onContentReady)
 * @static
 */

/**
 * Works the same way as onAvailable, but additionally checks the
 * state of sibling elements to determine if the content of the
 * available element is safe to modify.
 *
 * <p>The callback is executed with a single parameter:
 * the custom object parameter, if provided.</p>
 *
 * @id YAHOO.util.Event.onContentReady
 * @method onContentReady
 *
 * @param {string}   p_id the id of the element to look for.
 * @param {function} p_fn what to execute when the element is ready.
 * @param {object}   p_obj an optional object to be passed back as
 *                   a parameter to p_fn.
 * @param {boolean|object}  p_override If set to true, p_fn will execute
 *                   in the scope of p_obj.  If an object, p_fn will
 *                   exectute in the scope of that object
 *
 * @static
 */

/**
 * Executes the supplied callback when the DOM is first usable.  This
 * will execute immediately if called after the DOMReady event has
 * fired.   @todo the DOMContentReady event does not fire when the
 * script is dynamically injected into the page.  This means the
 * DOMReady custom event will never fire in FireFox or Opera when the
 * library is injected.  It _will_ fire in Safari, and the IE
 * implementation would allow for us to fire it if the defered script
 * is not available.  We want this to behave the same in all browsers.
 * Is there a way to identify when the script has been injected
 * instead of included inline?  Is there a way to know whether the
 * window onload event has fired without having had a listener attached
 * to it when it did so?
 *
 * <p>The callback is a CustomEvent, so the signature is:</p>
 * <p>type &lt;string&gt;, args &lt;array&gt;, customobject &lt;object&gt;</p>
 * <p>For DOMReady events, there are no fire argments, so the
 * signature is:</p>
 * <p>"DOMReady", [], obj</p>
 *
 *
 * @id YAHOO.util.Event.onDOMReady
 * @method onDOMReady
 *
 * @param {function} p_fn what to execute when the element is found.
 * @param {object}   p_obj an optional object to be passed back as
 *                   a parameter to p_fn.
 * @param {boolean|object}  p_scope If set to true, p_fn will execute
 *                   in the scope of p_obj, if set to an object it
 *                   will execute in the scope of that object
 *
 * @static
 */

/**
 * Appends an event handler
 *
 * @id YAHOO.util.Event.addListener
 * @method addListener
 *
 * @param {String|HTMLElement|Array|NodeList} el An id, an element
 *  reference, or a collection of ids and/or elements to assign the
 *  listener to.
 * @param {String}   sType     The type of event to append
 * @param {Function} fn        The method the event invokes
 * @param {Object}   obj    An arbitrary object that will be
 *                             passed as a parameter to the handler
 * @param {Boolean|object}  override  If true, the obj passed in becomes
 *                             the execution scope of the listener. If an
 *                             object, this object becomes the execution
 *                             scope.
 * @return {Boolean} True if the action was successful or defered,
 *                        false if one or more of the elements
 *                        could not have the listener attached,
 *                        or if the operation throws an exception.
 * @static
 */

/**
 * When using legacy events, the handler is routed to this object
 * so we can fire our custom listener stack.
 * @id YAHOO.util.Event.fireLegacyEvent
 * @method fireLegacyEvent
 * @static
 * @private
 */

/**
 * Returns the legacy event index that matches the supplied
 * signature
 * @id YAHOO.util.Event.getLegacyIndex
 * @method getLegacyIndex
 * @static
 * @private
 */

/**
 * Logic that determines when we should automatically use legacy
 * events instead of DOM2 events.  Currently this is limited to old
 * Safari browsers with a broken preventDefault
 * @id YAHOO.util.Event.useLegacyEvent
 * @method useLegacyEvent
 * @static
 * @private
 */

/**
 * Removes an event listener
 *
 * @id YAHOO.util.Event.removeListener
 * @method removeListener
 *
 * @param {String|HTMLElement|Array|NodeList} el An id, an element
 *  reference, or a collection of ids and/or elements to remove
 *  the listener from.
 * @param {String} sType the type of event to remove.
 * @param {Function} fn the method the event invokes.  If fn is
 *  undefined, then all event handlers for the type of event are
 *  removed.
 * @return {boolean} true if the unbind was successful, false
 *  otherwise.
 * @static
 */

/**
 * Returns the event's target element.  Safari sometimes provides
 * a text node, and this is automatically resolved to the text
 * node's parent so that it behaves like other browsers.
 * @id YAHOO.util.Event.getTarget
 * @method getTarget
 * @param {Event} ev the event
 * @param {boolean} resolveTextNode when set to true the target's
 *                  parent will be returned if the target is a
 *                  text node.  @deprecated, the text node is
 *                  now resolved automatically
 * @return {HTMLElement} the event's target
 * @static
 */

/**
 * In some cases, some browsers will return a text node inside
 * the actual element that was targeted.  This normalizes the
 * return value for getTarget and getRelatedTarget.
 * @id YAHOO.util.Event.resolveTextNode
 * @method resolveTextNode
 * @param {HTMLElement} node node to resolve
 * @return {HTMLElement} the normized node
 * @static
 */

/**
 * Returns the event's pageX
 * @id YAHOO.util.Event.getPageX
 * @method getPageX
 * @param {Event} ev the event
 * @return {int} the event's pageX
 * @static
 */

/**
 * Returns the event's pageY
 * @id YAHOO.util.Event.getPageY
 * @method getPageY
 * @param {Event} ev the event
 * @return {int} the event's pageY
 * @static
 */

/**
 * Returns the pageX and pageY properties as an indexed array.
 * @id YAHOO.util.Event.getXY
 * @method getXY
 * @param {Event} ev the event
 * @return {[x, y]} the pageX and pageY properties of the event
 * @static
 */

/**
 * Returns the event's related target
 * @id YAHOO.util.Event.getRelatedTarget
 * @method getRelatedTarget
 * @param {Event} ev the event
 * @return {HTMLElement} the event's relatedTarget
 * @static
 */

/**
 * Returns the time of the event.  If the time is not included, the
 * event is modified using the current time.
 * @id YAHOO.util.Event.getTime
 * @method getTime
 * @param {Event} ev the event
 * @return {Date} the time of the event
 * @static
 */

/**
 * Convenience method for stopPropagation + preventDefault
 * @id YAHOO.util.Event.stopEvent
 * @method stopEvent
 * @param {Event} ev the event
 * @static
 */

/**
 * Stops event propagation
 * @id YAHOO.util.Event.stopPropagation
 * @method stopPropagation
 * @param {Event} ev the event
 * @static
 */

/**
 * Prevents the default behavior of the event
 * @id YAHOO.util.Event.preventDefault
 * @method preventDefault
 * @param {Event} ev the event
 * @static
 */

/**
 * Finds the event in the window object, the caller's arguments, or
 * in the arguments of another method in the callstack.  This is
 * executed automatically for events registered through the event
 * manager, so the implementer should not normally need to execute
 * this function at all.
 * @id YAHOO.util.Event.getEvent
 * @method getEvent
 * @param {Event} e the event parameter from the handler
 * @param {HTMLElement} boundEl the element the listener is attached to
 * @return {Event} the event
 * @static
 */

/**
 * Returns the charcode for an event
 * @id YAHOO.util.Event.getCharCode
 * @method getCharCode
 * @param {Event} ev the event
 * @return {int} the event's charCode
 * @static
 */

/**
 * Locating the saved event handler data by function ref
 *
 * @id YAHOO.util.Event._getCacheIndex
 * @method _getCacheIndex
 * @static
 * @private
 */

/**
 * Generates an unique ID for the element if it does not already
 * have one.
 * @id YAHOO.util.Event.generateId
 * @method generateId
 * @param el the element to create the id for
 * @return {string} the resulting id of the element
 * @static
 */

/**
 * We want to be able to use getElementsByTagName as a collection
 * to attach a group of events to.  Unfortunately, different
 * browsers return different types of collections.  This function
 * tests to determine if the object is array-like.  It will also
 * fail if the object is an array, but is empty.
 * @id YAHOO.util.Event._isValidCollection
 * @method _isValidCollection
 * @param o the object to test
 * @return {boolean} true if the object is array-like and populated
 * @static
 * @private
 */

/**
 * @id YAHOO.util.Event.elCache
 * @private
 * @property elCache
 * DOM element cache
 * @static
 * @deprecated Elements are not cached due to issues that arise when
 * elements are removed and re-added
 */

/**
 * We cache elements bound by id because when the unload event
 * fires, we can no longer use document.getElementById
 * @id YAHOO.util.Event.getEl
 * @method getEl
 * @static
 * @private
 * @deprecated Elements are not cached any longer
 */

/**
 * Clears the element cache
 * @id YAHOO.util.Event.clearCache
 * @deprecated Elements are not cached any longer
 * @method clearCache
 * @static
 * @private
 */

/**
 * Custom event the fires when the dom is initially usable
 * @id YAHOO.util.Event.DOMReadyEvent
 * @event DOMReadyEvent
 */

/**
 * hook up any deferred listeners
 * @id YAHOO.util.Event._load
 * @method _load
 * @static
 * @private
 */

/**
 * Fires the DOMReady event listeners the first time the document is
 * usable.
 * @id YAHOO.util.Event._ready
 * @method _ready
 * @static
 * @private
 */

/**
 * Polling function that runs before the onload event fires,
 * attempting to attach to DOM Nodes as soon as they are
 * available
 * @id YAHOO.util.Event._tryPreloadAttach
 * @method _tryPreloadAttach
 * @static
 * @private
 */

/**
 * Removes all listeners attached to the given element via addListener.
 * Optionally, the node's children can also be purged.
 * Optionally, you can specify a specific type of event to remove.
 * @id YAHOO.util.Event.purgeElement
 * @method purgeElement
 * @param {HTMLElement} el the element to purge
 * @param {boolean} recurse recursively purge this element's children
 * as well.  Use with caution.
 * @param {string} sType optional type of listener to purge. If
 * left out, all listeners will be removed
 * @static
 */

/**
 * Returns all listeners attached to the given element via addListener.
 * Optionally, you can specify a specific type of event to return.
 * @id YAHOO.util.Event.getListeners
 * @method getListeners
 * @param el {HTMLElement|string} the element or element id to inspect
 * @param sType {string} optional type of listener to return. If
 * left out, all listeners will be returned
 * @return {Object} the listener. Contains the following fields:
 * &nbsp;&nbsp;type:   (string)   the type of event
 * &nbsp;&nbsp;fn:     (function) the callback supplied to addListener
 * &nbsp;&nbsp;obj:    (object)   the custom object supplied to addListener
 * &nbsp;&nbsp;adjust: (boolean|object)  whether or not to adjust the default scope
 * &nbsp;&nbsp;scope: (boolean)  the derived scope based on the adjust parameter
 * &nbsp;&nbsp;index:  (int)      its position in the Event util listener cache
 * @static
 */

/**
 * Removes all listeners registered by pe.event.  Called
 * automatically during the unload event.
 * @id YAHOO.util.Event._unload
 * @method _unload
 * @static
 * @private
 */

/**
 * Returns scrollLeft
 * @id YAHOO.util.Event._getScrollLeft
 * @method _getScrollLeft
 * @static
 * @private
 */

/**
 * Returns scrollTop
 * @id YAHOO.util.Event._getScrollTop
 * @method _getScrollTop
 * @static
 * @private
 */

/**
 * Returns the scrollTop and scrollLeft.  Used to calculate the
 * pageX and pageY in Internet Explorer
 * @id YAHOO.util.Event._getScroll
 * @method _getScroll
 * @static
 * @private
 */

/**
 * Used by old versions of CustomEvent, restored for backwards
 * compatibility
 * @id YAHOO.util.Event.regCE
 * @method regCE
 * @private
 * @static
 * @deprecated still here for backwards compatibility
 */

/**
 * Adds a DOM event directly without the caching, cleanup, scope adj, etc
 *
 * @id YAHOO.util.Event._simpleAdd
 * @method _simpleAdd
 * @param {HTMLElement} el      the element to bind the handler to
 * @param {string}      sType   the type of event handler
 * @param {function}    fn      the callback to invoke
 * @param {boolen}      capture capture or bubble phase
 * @static
 * @private
 */

/**
 * Basic remove listener
 *
 * @id YAHOO.util.Event._simpleRemove
 * @method _simpleRemove
 * @param {HTMLElement} el      the element to bind the handler to
 * @param {string}      sType   the type of event handler
 * @param {function}    fn      the callback to invoke
 * @param {boolen}      capture capture or bubble phase
 * @static
 * @private
 */

/**
 * YAHOO.util.Event.on is an alias for addListener
 * @id YAHOO.util.Event.on
 * @method on
 * @see addListener
 * @static
 */

/**
 * EventProvider is designed to be used with YAHOO.augment to wrap
 * CustomEvents in an interface that allows events to be subscribed to
 * and fired by name.  This makes it possible for implementing code to
 * subscribe to an event that either has not been created yet, or will
 * not be created at all.
 *
 * @id YAHOO.util.EventProvider
 * @class EventProvider
 */

/**
 * Private storage of custom events
 * @id YAHOO.util.EventProvider.__yui_events
 * @property __yui_events
 * @type Object[]
 * @private
 */

/**
 * Private storage of custom event subscribers
 * @id YAHOO.util.EventProvider.__yui_subscribers
 * @property __yui_subscribers
 * @type Object[]
 * @private
 */

/**
 * Subscribe to a CustomEvent by event type
 *
 * @id YAHOO.util.EventProvider.subscribe
 * @method subscribe
 * @param p_type     {string}   the type, or name of the event
 * @param p_fn       {function} the function to exectute when the event fires
 * @param p_obj      {Object}   An object to be passed along when the event
 *                              fires
 * @param p_override {boolean}  If true, the obj passed in becomes the
 *                              execution scope of the listener
 */

/**
 * Unsubscribes one or more listeners the from the specified event
 * @id YAHOO.util.EventProvider.unsubscribe
 * @method unsubscribe
 * @param p_type {string}   The type, or name of the event.  If the type
 *                          is not specified, it will attempt to remove
 *                          the listener from all hosted events.
 * @param p_fn   {Function} The subscribed function to unsubscribe, if not
 *                          supplied, all subscribers will be removed.
 * @param p_obj  {Object}   The custom object passed to subscribe.  This is
 *                        optional, but if supplied will be used to
 *                        disambiguate multiple listeners that are the same
 *                        (e.g., you subscribe many object using a function
 *                        that lives on the prototype)
 * @return {boolean} true if the subscriber was found and detached.
 */

/**
 * Removes all listeners from the specified event.  If the event type
 * is not specified, all listeners from all hosted custom events will
 * be removed.
 * @id YAHOO.util.EventProvider.unsubscribeAll
 * @method unsubscribeAll
 * @param p_type {string}   The type, or name of the event
 */

/**
 * Creates a new custom event of the specified type.  If a custom event
 * by that name already exists, it will not be re-created.  In either
 * case the custom event is returned.
 *
 * @id YAHOO.util.EventProvider.createEvent
 * @method createEvent
 *
 * @param p_type {string} the type, or name of the event
 * @param p_config {object} optional config params.  Valid properties are:
 *
 *  <ul>
 *    <li>
 *      scope: defines the default execution scope.  If not defined
 *      the default scope will be this instance.
 *    </li>
 *    <li>
 *      silent: if true, the custom event will not generate log messages.
 *      This is false by default.
 *    </li>
 *    <li>
 *      onSubscribeCallback: specifies a callback to execute when the
 *      event has a new subscriber.  This will fire immediately for
 *      each queued subscriber if any exist prior to the creation of
 *      the event.
 *    </li>
 *  </ul>
 *
 *  @return {CustomEvent} the custom event
 *
 */

/**
 * Fire a custom event by name.  The callback functions will be executed
 * from the scope specified when the event was created, and with the
 * following parameters:
 *   <ul>
 *   <li>The first argument fire() was executed with</li>
 *   <li>The custom object (if any) that was passed into the subscribe()
 *       method</li>
 *   </ul>
 * If the custom event has not been explicitly created, it will be
 * created now with the default config, scoped to the host object
 * @id YAHOO.util.EventProvider.fireEvent
 * @method fireEvent
 * @param p_type    {string}  the type, or name of the event
 * @param arguments {Object*} an arbitrary set of parameters to pass to
 *                            the handler.
 * @return {boolean} the return value from CustomEvent.fire
 *
 */

/**
 * Returns true if the custom event of the provided type has been created
 * with createEvent.
 * @id YAHOO.util.EventProvider.hasEvent
 * @method hasEvent
 * @param type {string} the type, or name of the event
 */

/**
 * KeyListener is a utility that provides an easy interface for listening for
 * keydown/keyup events fired against DOM elements.
 * @id YAHOO.util.KeyListener
 * @namespace YAHOO.util
 * @class KeyListener
 * @constructor
 * @param {HTMLElement} attachTo The element or element ID to which the key
 *                               event should be attached
 * @param {String}      attachTo The element or element ID to which the key
 *                               event should be attached
 * @param {Object}      keyData  The object literal representing the key(s)
 *                               to detect. Possible attributes are
 *                               shift(boolean), alt(boolean), ctrl(boolean)
 *                               and keys(either an int or an array of ints
 *                               representing keycodes).
 * @param {Function}    handler  The CustomEvent handler to fire when the
 *                               key event is detected
 * @param {Object}      handler  An object literal representing the handler.
 * @param {String}      event    Optional. The event (keydown or keyup) to
 *                               listen for. Defaults automatically to keydown.
 *
 * @knownissue the "keypress" event is completely broken in Safari 2.x and below.
 *             the workaround is use "keydown" for key listening.  However, if
 *             it is desired to prevent the default behavior of the keystroke,
 *             that can only be done on the keypress event.  This makes key
 *             handling quite ugly.
 * @knownissue keydown is also broken in Safari 2.x and below for the ESC key.
 *             There currently is no workaround other than choosing another
 *             key to listen for.
 */

/**
 * The CustomEvent fired internally when a key is pressed
 * @id YAHOO.util.KeyListener.keyEvent
 * @event keyEvent
 * @private
 * @param {Object} keyData The object literal representing the key(s) to
 *                         detect. Possible attributes are shift(boolean),
 *                         alt(boolean), ctrl(boolean) and keys(either an
 *                         int or an array of ints representing keycodes).
 */

/**
 * The CustomEvent fired when the KeyListener is enabled via the enable()
 * function
 * @id YAHOO.util.KeyListener.enabledEvent
 * @event enabledEvent
 * @param {Object} keyData The object literal representing the key(s) to
 *                         detect. Possible attributes are shift(boolean),
 *                         alt(boolean), ctrl(boolean) and keys(either an
 *                         int or an array of ints representing keycodes).
 */

/**
 * The CustomEvent fired when the KeyListener is disabled via the
 * disable() function
 * @id YAHOO.util.KeyListener.disabledEvent
 * @event disabledEvent
 * @param {Object} keyData The object literal representing the key(s) to
 *                         detect. Possible attributes are shift(boolean),
 *                         alt(boolean), ctrl(boolean) and keys(either an
 *                         int or an array of ints representing keycodes).
 */

/**
 * Handles the key event when a key is pressed.
 * @id YAHOO.util.KeyListener.handleKeyPress
 * @method handleKeyPress
 * @param {DOMEvent} e   The keypress DOM event
 * @param {Object}   obj The DOM event scope object
 * @private
 */

/**
 * Enables the KeyListener by attaching the DOM event listeners to the
 * target DOM element
 * @id YAHOO.util.KeyListener.enable
 * @method enable
 */

/**
 * Boolean indicating the enabled/disabled state of the Tooltip
 * @id YAHOO.util.KeyListener.enabled
 * @property enabled
 * @type Boolean
 */

/**
 * Disables the KeyListener by removing the DOM event listeners from the
 * target DOM element
 * @id YAHOO.util.KeyListener.disable
 * @method disable
 */

/**
 * Returns a String representation of the object.
 * @id YAHOO.util.KeyListener.toString
 * @method toString
 * @return {String}  The string representation of the KeyListener
 */

/**
 * Constant representing the DOM "keydown" event.
 * @id YAHOO.util.KeyListener.YAHOO.util.KeyListener.KEYDOWN
 * @property YAHOO.util.KeyListener.KEYDOWN
 * @static
 * @final
 * @type String
 */

/**
 * Constant representing the DOM "keyup" event.
 * @id YAHOO.util.KeyListener.YAHOO.util.KeyListener.KEYUP
 * @property YAHOO.util.KeyListener.KEYUP
 * @static
 * @final
 * @type String
 */

/**
 * keycode constants for a subset of the special keys
 * @id YAHOO.util.KeyListener.KEY
 * @property KEY
 * @static
 * @final
 */

/**
 * Fetches and inserts one or more script or link nodes into the document
 * @id YAHOO.util.Get
 * @namespace YAHOO.util
 * @class YAHOO.util.Get
 */

/**
 * hash of queues to manage multiple requests
 * @id YAHOO.util.Get.queues
 * @property queues
 * @private
 */

/**
 * queue index used to generate transaction ids
 * @id YAHOO.util.Get.qidx
 * @property qidx
 * @type int
 * @private
 */

/**
 * node index used to generate unique node ids
 * @id YAHOO.util.Get.nidx
 * @property nidx
 * @type int
 * @private
 */

/**
 * interal property used to prevent multiple simultaneous purge
 * processes
 * @id YAHOO.util.Get.purging
 * @property purging
 * @type boolean
 * @private
 */

/**
 * Generates an HTML element, this is not appended to a document
 * @id YAHOO.util.Get._node
 * @method _node
 * @param type {string} the type of element
 * @param attr {string} the attributes
 * @param win {Window} optional window to create the element in
 * @return {HTMLElement} the generated node
 * @private
 */

/**
 * Generates a link node
 * @id YAHOO.util.Get._linkNode
 * @method _linkNode
 * @param url {string} the url for the css file
 * @param win {Window} optional window to create the node in
 * @return {HTMLElement} the generated node
 * @private
 */

/**
 * Generates a script node
 * @id YAHOO.util.Get._scriptNode
 * @method _scriptNode
 * @param url {string} the url for the script file
 * @param win {Window} optional window to create the node in
 * @return {HTMLElement} the generated node
 * @private
 */

/**
 * Returns the data payload for callback functions
 * @id YAHOO.util.Get._returnData
 * @method _returnData
 * @private
 */

/**
 * The request is complete, so executing the requester's callback
 * @id YAHOO.util.Get._finish
 * @method _finish
 * @param id {string} the id of the request
 * @private
 */

/**
 * Loads the next item for a given request
 * @id YAHOO.util.Get._next
 * @method _next
 * @param id {string} the id of the request
 * @param loaded {string} the url that was just loaded, if any
 * @private
 */

/**
 * Removes processed queues and corresponding nodes
 * @id YAHOO.util.Get._autoPurge
 * @method _autoPurge
 * @private
 */

/**
 * Removes the nodes for the specified queue
 * @id YAHOO.util.Get._purge
 * @method _purge
 * @private
 */

/**
 * Saves the state for the request and begins loading
 * the requested urls
 * @id YAHOO.util.Get.queue
 * @method queue
 * @param type {string} the type of node to insert
 * @param url {string} the url to load
 * @param opts the hash of options for this request
 * @private
 */

/**
 * Detects when a node has been loaded.  In the case of
 * script nodes, this does not guarantee that contained
 * script is ready to use.
 * @id YAHOO.util.Get._track
 * @method _track
 * @param type {string} the type of node to track
 * @param n {HTMLElement} the node to track
 * @param id {string} the id of the request
 * @param url {string} the url that is being loaded
 * @param win {Window} the targeted window
 * @param qlength the number of remaining items in the queue,
 * including this one
 * @param trackfn {Function} function to execute when finished
 * the default is _next
 * @private
 */

/**
 * The default poll freqency in ms, when needed
 * @id YAHOO.util.Get.POLL_FREQ
 * @property POLL_FREQ
 * @static
 * @type int
 * @default 10
 */

/**
 * The number of request required before an automatic purge.
 * property PURGE_THRESH
 * @id YAHOO.util.Get.PURGE_THRESH
 * @static
 * @type int
 * @default 20
 * @method PURGE_THRESH
 */

/**
 * The length time to poll for varName when loading a script in
 * Safari 2.x before the transaction fails.
 * property TIMEOUT
 * @id YAHOO.util.Get.TIMEOUT
 * @static
 * @type int
 * @default 2000
 * @method TIMEOUT
 */

/**
 * Called by the the helper for detecting script load in Safari
 * @id YAHOO.util.Get._finalize
 * @method _finalize
 * @param id {string} the transaction id
 * @private
 */

/**
 * Abort a transaction
 * @id YAHOO.util.Get.abort
 * @method abort
 * @param {string|object} either the tId or the object returned from
 * script() or css()
 */

/**
 * Fetches and inserts one or more script nodes into the head
 * of the current document or the document in a specified window.
 *
 * @id YAHOO.util.Get.script
 * @method script
 * @static
 * @param url {string|string[]} the url or urls to the script(s)
 * @param opts {object} Options:
 * <dl>
 * <dt>onSuccess</dt>
 * <dd>
 * callback to execute when the script(s) are finished loading
 * The callback receives an object back with the following
 * data:
 * <dl>
 * <dt>win</dt>
 * <dd>the window the script(s) were inserted into</dd>
 * <dt>data</dt>
 * <dd>the data object passed in when the request was made</dd>
 * <dt>nodes</dt>
 * <dd>An array containing references to the nodes that were
 * inserted</dd>
 * <dt>purge</dt>
 * <dd>A function that, when executed, will remove the nodes
 * that were inserted</dd>
 * <dt>
 * </dl>
 * </dd>
 * <dt>onFailure</dt>
 * <dd>
 * callback to execute when the script load operation fails
 * The callback receives an object back with the following
 * data:
 * <dl>
 * <dt>win</dt>
 * <dd>the window the script(s) were inserted into</dd>
 * <dt>data</dt>
 * <dd>the data object passed in when the request was made</dd>
 * <dt>nodes</dt>
 * <dd>An array containing references to the nodes that were
 * inserted successfully</dd>
 * <dt>purge</dt>
 * <dd>A function that, when executed, will remove any nodes
 * that were inserted</dd>
 * <dt>
 * </dl>
 * </dd>
 * <dt>scope</dt>
 * <dd>the execution context for the callbacks</dd>
 * <dt>win</dt>
 * <dd>a window other than the one the utility occupies</dd>
 * <dt>autopurge</dt>
 * <dd>
 * setting to true will let the utilities cleanup routine purge
 * the script once loaded
 * </dd>
 * <dt>data</dt>
 * <dd>
 * data that is supplied to the callback when the script(s) are
 * loaded.
 * </dd>
 * <dt>varName</dt>
 * <dd>
 * variable that should be available when a script is finished
 * loading.  Used to help Safari 2.x and below with script load
 * detection.  The type of this property should match what was
 * passed into the url parameter: if loading a single url, a
 * string can be supplied.  If loading multiple scripts, you
 * must supply an array that contains the variable name for
 * each script.
 * </dd>
 * </dl>
 * <pre>
 * // assumes yahoo, dom, and event are already on the page
 * &nbsp;&nbsp;YAHOO.util.Get.script(
 * &nbsp;&nbsp;["http://yui.yahooapis.com/2.3.1/build/dragdrop/dragdrop-min.js",
 * &nbsp;&nbsp;&nbsp;"http://yui.yahooapis.com/2.3.1/build/animation/animation-min.js"], &#123;
 * &nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new YAHOO.util.DDProxy("dd1"); // also new o.reference("dd1"); would work
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log("won't cause error because YAHOO is the scope");
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) // true
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// o.purge(); // optionally remove the script nodes immediately
 * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,
 * &nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;
 * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,
 * &nbsp;&nbsp;&nbsp;&nbsp;data: "foo",
 * &nbsp;&nbsp;&nbsp;&nbsp;scope: YAHOO,
 * &nbsp;&nbsp;&nbsp;&nbsp;// win: otherframe // target another window/frame
 * &nbsp;&nbsp;&nbsp;&nbsp;autopurge: true // allow the utility to choose when to remove the nodes
 * &nbsp;&nbsp;&#125;);
 * </pre>
 * @return {tId: string} an object containing info about the transaction
 */

/**
 * Fetches and inserts one or more css link nodes into the
 * head of the current document or the document in a specified
 * window.
 * @id YAHOO.util.Get.css
 * @method css
 * @static
 * @param url {string} the url or urls to the css file(s)
 * @param opts Options:
 * <dl>
 * <dt>onSuccess</dt>
 * <dd>
 * callback to execute when the css file(s) are finished loading
 * The callback receives an object back with the following
 * data:
 * <dl>win</dl>
 * <dd>the window the link nodes(s) were inserted into</dd>
 * <dt>data</dt>
 * <dd>the data object passed in when the request was made</dd>
 * <dt>nodes</dt>
 * <dd>An array containing references to the nodes that were
 * inserted</dd>
 * <dt>purge</dt>
 * <dd>A function that, when executed, will remove the nodes
 * that were inserted</dd>
 * <dt>
 * </dl>
 * </dd>
 * <dt>scope</dt>
 * <dd>the execution context for the callbacks</dd>
 * <dt>win</dt>
 * <dd>a window other than the one the utility occupies</dd>
 * <dt>data</dt>
 * <dd>
 * data that is supplied to the callbacks when the nodes(s) are
 * loaded.
 * </dd>
 * </dl>
 * <pre>
 *      YAHOO.util.Get.css("http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css");
 * </pre>
 * <pre>
 *      YAHOO.util.Get.css(["http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css",
 * </pre>
 * @return {tId: string} an object containing info about the transaction
 */

/**
 * The History class provides the ability to use the back/forward navigation
 * buttons in a DHTML application. It also allows a DHTML application to
 * be bookmarked in a specific state.
 *
 * @id YAHOO.util.History
 * @class History
 * @constructor
 */

/**
 * Our hidden IFrame used to store the browsing history.
 *
 * @id YAHOO.util.History._histFrame
 * @property _histFrame
 * @type HTMLIFrameElement
 * @default null
 * @private
 */

/**
 * INPUT field (with type="hidden" or type="text") or TEXTAREA.
 * This field keeps the value of the initial state, current state
 * the list of all states across pages within a single browser session.
 *
 * @id YAHOO.util.History._stateField
 * @property _stateField
 * @type HTMLInputElement|HTMLTextAreaElement
 * @default null
 * @private
 */

/**
 * Flag used to tell whether YAHOO.util.History.initialize has been called.
 *
 * @id YAHOO.util.History._initialized
 * @property _initialized
 * @type boolean
 * @default false
 * @private
 */

/**
 * List of registered modules.
 *
 * @id YAHOO.util.History._modules
 * @property _modules
 * @type array
 * @default []
 * @private
 */

/**
 * List of fully qualified states. This is used only by Safari.
 *
 * @id YAHOO.util.History._fqstates
 * @property _fqstates
 * @type array
 * @default []
 * @private
 */

/**
 * location.hash is a bit buggy on Opera. I have seen instances where
 * navigating the history using the back/forward buttons, and hence
 * changing the URL, would not change location.hash. That's ok, the
 * implementation of an equivalent is trivial.
 *
 * @id YAHOO.util.History._getHash
 * @method _getHash
 * @return {string} The hash portion of the document's location
 * @private
 */

/**
 * Stores all the registered modules' initial state and current state.
 * On Safari, we also store all the fully qualified states visited by
 * the application within a single browser session. The storage takes
 * place in the form field specified during initialization.
 *
 * @id YAHOO.util.History._storeStates
 * @method _storeStates
 * @private
 */

/**
 * Sets the new currentState attribute of all modules depending on the new
 * fully qualified state. Also notifies the modules which current state has
 * changed.
 *
 * @id YAHOO.util.History._handleFQStateChange
 * @method _handleFQStateChange
 * @param {string} fqstate Fully qualified state
 * @private
 */

/**
 * Update the IFrame with our new state.
 *
 * @id YAHOO.util.History._updateIFrame
 * @method _updateIFrame
 * @private
 * @return {boolean} true if successful. false otherwise.
 */

/**
 * Periodically checks whether our internal IFrame is ready to be used.
 *
 * @id YAHOO.util.History._checkIframeLoaded
 * @method _checkIframeLoaded
 * @private
 */

/**
 * Finish up the initialization of the Browser History Manager.
 *
 * @id YAHOO.util.History._initialize
 * @method _initialize
 * @private
 */

/**
 * Fired when the Browser History Manager is ready. If you subscribe to
 * this event after the Browser History Manager has been initialized,
 * it will not fire. Therefore, it is recommended to use the onReady
 * method instead.
 *
 * @id YAHOO.util.History.onLoadEvent
 * @event onLoadEvent
 * @see onReady
 */

/**
 * Executes the supplied callback when the Browser History Manager is
 * ready. This will execute immediately if called after the Browser
 * History Manager onLoad event has fired.
 *
 * @id YAHOO.util.History.onReady
 * @method onReady
 * @param {function} fn what to execute when the Browser History Manager is ready.
 * @param {object} obj an optional object to be passed back as a parameter to fn.
 * @param {boolean|object} override If true, the obj passed in becomes fn's execution scope.
 * @see onLoadEvent
 */

/**
 * Registers a new module.
 *
 * @id YAHOO.util.History.register
 * @method register
 * @param {string} module Non-empty string uniquely identifying the
 *     module you wish to register.
 * @param {string} initialState The initial state of the specified
 *     module corresponding to its earliest history entry.
 * @param {function} onStateChange Callback called when the
 *     state of the specified module has changed.
 * @param {object} obj An arbitrary object that will be passed as a
 *     parameter to the handler.
 * @param {boolean} override If true, the obj passed in becomes the
 *     execution scope of the listener.
 */

/**
 * Initializes the Browser History Manager. Call this method
 * from a script block located right after the opening body tag.
 *
 * @id YAHOO.util.History.initialize
 * @method initialize
 * @param {string|HTMLElement} stateField <input type="hidden"> used
 *     to store application states. Must be in the static markup.
 * @param {string|HTMLElement} histFrame IFrame used to store
 *     the history (only required on Internet Explorer)
 * @public
 */

/**
 * Call this method when you want to store a new entry in the browser's history.
 *
 * @id YAHOO.util.History.navigate
 * @method navigate
 * @param {string} module Non-empty string representing your module.
 * @param {string} state String representing the new state of the specified module.
 * @return {boolean} Indicates whether the new state was successfully added to the history.
 * @public
 */

/**
 * Call this method when you want to store a new entry in the browser's history.
 *
 * @id YAHOO.util.History.multiNavigate
 * @method multiNavigate
 * @param {object} states Associative array of module-state pairs to set simultaneously.
 * @return {boolean} Indicates whether the new state was successfully added to the history.
 * @public
 */

/**
 * Returns the current state of the specified module.
 *
 * @id YAHOO.util.History.getCurrentState
 * @method getCurrentState
 * @param {string} module Non-empty string representing your module.
 * @return {string} The current state of the specified module.
 * @public
 */

/**
 * Returns the state of a module according to the URL fragment
 * identifier. This method is useful to initialize your modules
 * if your application was bookmarked from a particular state.
 *
 * @id YAHOO.util.History.getBookmarkedState
 * @method getBookmarkedState
 * @param {string} module Non-empty string representing your module.
 * @return {string} The bookmarked state of the specified module.
 * @public
 */

/**
 * Returns the value of the specified query string parameter.
 * This method is not used internally by the Browser History Manager.
 * However, it is provided here as a helper since many applications
 * using the Browser History Manager will want to read the value of
 * url parameters to initialize themselves.
 *
 * @id YAHOO.util.History.getQueryStringParameter
 * @method getQueryStringParameter
 * @param {string} paramName Name of the parameter we want to look up.
 * @param {string} queryString Optional URL to look at. If not specified,
 *     this method uses the URL in the address bar.
 * @return {string} The value of the specified parameter, or null.
 * @public
 */

/**
 * @id YAHOO.widget.ImageCropper
 * @constructor
 * @class ImageCropper
 * @description <p>Creates a Image Cropper control.</p>
 * @extends YAHOO.util.Element
 * @param {String/HTMLElement} el The image element to make croppable.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.ImageCropper._instances
 * @private
 * @static
 * @property _instances
 * @description Internal hash table for all ImageCropper instances
 * @type Object
 */

/**
 * @id YAHOO.widget.ImageCropper.getCropperById
 * @static
 * @method getCropperById
 * @description Get's an ImageCropper object by the HTML id of the image associated with the ImageCropper object.
 * @return {Object} The ImageCropper Object
 */

/**
 * @id YAHOO.widget.ImageCropper.CSS_MAIN
 * @private
 * @property CSS_MAIN
 * @description The CSS class used to wrap the element
 * @type String
 */

/**
 * @id YAHOO.widget.ImageCropper.CSS_MASK
 * @private
 * @property CSS_MASK
 * @description The CSS class for the mask element
 * @type String
 */

/**
 * @id YAHOO.widget.ImageCropper.CSS_RESIZE_MASK
 * @private
 * @property CSS_RESIZE_MASK
 * @description The CSS class for the mask inside the resize element
 * @type String
 */

/**
 * @id YAHOO.widget.ImageCropper._image
 * @private
 * @property _image
 * @description The url of the image we are cropping
 * @type String
 */

/**
 * @id YAHOO.widget.ImageCropper._active
 * @private
 * @property _active
 * @description Flag to determine if the crop region is active
 * @type Boolean
 */

/**
 * @id YAHOO.widget.ImageCropper._resize
 * @private
 * @property _resize
 * @description A reference to the Resize Utility used in this Cropper Instance
 * @type Object
 */

/**
 * @id YAHOO.widget.ImageCropper._resizeEl
 * @private
 * @property _resizeEl
 * @description The HTML Element used to create the Resize Oject
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.ImageCropper._resizeMaskEl
 * @private
 * @property _resizeMaskEl
 * @description The HTML Element used to create the Resize mask
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.ImageCropper._wrap
 * @private
 * @property _wrap
 * @description The HTML Element created to wrap the image
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.ImageCropper._mask
 * @private
 * @property _mask
 * @description The HTML Element created to "mask" the image being cropped
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.ImageCropper._createWrap
 * @private
 * @method _createWrap
 * @description Creates the wrapper element used to wrap the image
 */

/**
 * @id YAHOO.widget.ImageCropper._createMask
 * @private
 * @method _createMask
 * @description Creates the mask element used to mask the image
 */

/**
 * @id YAHOO.widget.ImageCropper._createResize
 * @private
 * @method _createResize
 * @description Creates the resize element and the instance of the Resize Utility
 */

/**
 * @id YAHOO.widget.ImageCropper._handleMouseOver
 * @private
 * @method _handleMouseOver
 * @description Handles the mouseover event
 */

/**
 * @id YAHOO.widget.ImageCropper._handleMouseOut
 * @private
 * @method _handleMouseOut
 * @description Handles the mouseout event
 */

/**
 * @id YAHOO.widget.ImageCropper._moveEl
 * @private
 * @method _moveEl
 * @description Moves the resize element based on the arrow keys
 */

/**
 * @id YAHOO.widget.ImageCropper._handleKeyPress
 * @private
 * @method _handleKeyPress
 * @description Handles the keypress event
 */

/**
 * @id YAHOO.widget.ImageCropper._handleB4DragEvent
 * @private
 * @method _handleB4DragEvent
 * @description Handles the DragDrop b4DragEvent event
 */

/**
 * @id YAHOO.widget.ImageCropper._handleDragEvent
 * @private
 * @method _handleDragEvent
 * @description Handles the DragDrop DragEvent event
 */

/**
 * @id YAHOO.widget.ImageCropper._handleBeforeResizeEvent
 * @private
 * @method _handleBeforeResizeEvent
 * @description Handles the Resize Utilitys beforeResize event
 */

/**
 * @id YAHOO.widget.ImageCropper._handleResizeEvent
 * @private
 * @method _handleResizeEvent
 * @param Event ev The Resize Utilitys resize event.
 * @description Handles the Resize Utilitys Resize event
 */

/**
 * @id YAHOO.widget.ImageCropper._syncBackgroundPosition
 * @private
 * @method _syncBackgroundPosition
 * @description Syncs the packground position of the resize element with the resize elements top and left style position
 */

/**
 * @id YAHOO.widget.ImageCropper._setBackgroundPosition
 * @private
 * @method _setBackgroundPosition
 * @param Number l The left position
 * @param Number t The top position
 * @description Sets the background image position to the top and left position
 */

/**
 * @id YAHOO.widget.ImageCropper._setBackgroundImage
 * @private
 * @method _setBackgroundImage
 * @param String url The url of the image
 * @description Sets the background image of the resize element
 */

/**
 * @id YAHOO.widget.ImageCropper._handleStartResizeEvent
 * @private
 * @method _handleStartResizeEvent
 * @description Handles the Resize Utilitys startResizeEvent event
 */

/**
 * @id YAHOO.widget.ImageCropper._setConstraints
 * @private
 * @method _setConstraints
 * @param Boolean inside Used when called from inside a resize event, false by default (dragging)
 * @description Set the DragDrop constraints to keep the element inside the crop area.
 * @return {Object} Object containing Top, Right, Bottom and Left constraints
 */

/**
 * @id YAHOO.widget.ImageCropper.getCropCoords
 * @method getCropCoords
 * @description Returns the coordinates needed to crop the image
 * @return {Object} The top, left, height, width and image url of the image being cropped
 */

/**
 * @id YAHOO.widget.ImageCropper.reset
 * @method reset
 * @description Resets the crop element back to it's original position
 * @return {YAHOO.widget.ImageCropper} The ImageCropper instance
 */

/**
 * @id YAHOO.widget.ImageCropper.getEl
 * @method getEl
 * @description Get the HTML reference for the image element.
 * @return {HTMLElement} The image element
 */

/**
 * @id YAHOO.widget.ImageCropper.getResizeEl
 * @method getResizeEl
 * @description Get the HTML reference for the resize element.
 * @return {HTMLElement} The resize element
 */

/**
 * @id YAHOO.widget.ImageCropper.getWrapEl
 * @method getWrapEl
 * @description Get the HTML reference for the wrap element.
 * @return {HTMLElement} The wrap element
 */

/**
 * @id YAHOO.widget.ImageCropper.getMaskEl
 * @method getMaskEl
 * @description Get the HTML reference for the mask element.
 * @return {HTMLElement} The mask element
 */

/**
 * @id YAHOO.widget.ImageCropper.getResizeMaskEl
 * @method getResizeMaskEl
 * @description Get the HTML reference for the resizable object's mask element.
 * @return {HTMLElement} The resize objects mask element.
 */

/**
 * @id YAHOO.widget.ImageCropper.getResizeObject
 * @method getResizeObject
 * @description Get the Resize Utility object.
 * @return {YAHOO.util.Resize} The Resize instance
 */

/**
 * @id YAHOO.widget.ImageCropper.init
 * @private
 * @method init
 * @description The ImageCropper class's initialization method
 */

/**
 * @id YAHOO.widget.ImageCropper.initAttributes
 * @private
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create a croppable element.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the widget.
 */

/**
 * @id YAHOO.widget.ImageCropper.initialXY
 * @attribute initialXY
 * @description Array of the XY position that we need to set the crop element to when we build it. Defaults to [10, 10]
 * @type Array
 */

/**
 * @id YAHOO.widget.ImageCropper.keyTick
 * @attribute keyTick
 * @description The pixel tick for the arrow keys, defaults to 1
 * @type Number
 */

/**
 * @id YAHOO.widget.ImageCropper.shiftKeyTick
 * @attribute shiftKeyTick
 * @description The pixel tick for shift + the arrow keys, defaults to 10
 * @type Number
 */

/**
 * @id YAHOO.widget.ImageCropper.useKeys
 * @attribute useKeys
 * @description Should we use the Arrow keys to position the crop element, defaults to true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.ImageCropper.status
 * @attribute status
 * @description Show the Resize Utility status, defaults to true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.ImageCropper.minHeight
 * @attribute minHeight
 * @description MinHeight of the crop area, default 50
 * @type Number
 */

/**
 * @id YAHOO.widget.ImageCropper.minWidth
 * @attribute minWidth
 * @description MinWidth of the crop area, default 50.
 * @type Number
 */

/**
 * @id YAHOO.widget.ImageCropper.ratio
 * @attribute ratio
 * @description Set the ratio config option of the Resize Utlility, default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.ImageCropper.ratio
 * @attribute ratio
 * @description Set the autoRatio config option of the Resize Utlility, default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.ImageCropper.initHeight
 * @attribute initHeight
 * @description Set the initlal height of the crop area, defaults to 1/4 of the image height
 * @type Number
 */

/**
 * @id YAHOO.widget.ImageCropper.initWidth
 * @attribute initWidth
 * @description Set the initlal width of the crop area, defaults to 1/4 of the image width
 * @type Number
 */

/**
 * @id YAHOO.widget.ImageCropper.destroy
 * @method destroy
 * @description Destroys the ImageCropper object and all of it's elements & listeners.
 */

/**
 * @id YAHOO.widget.ImageCropper.toString
 * @method toString
 * @description Returns a string representing the ImageCropper Object.
 * @return {String}
 */

/**
 * @id YAHOO.widget.ImageCropper.dragEvent
 * @event dragEvent
 * @description Fires when the DragDrop dragEvent
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.ImageCropper.startResizeEvent
 * @event startResizeEvent
 * @description Fires when when a resize action is started.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.ImageCropper.resizeEvent
 * @event resizeEvent
 * @description Fires on every element resize.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.ImageCropper.moveEvent
 * @event moveEvent
 * @description Fires on every element move. Inside these methods: _handleKeyPress, _handleDragEvent, _handleResizeEvent
 * @type YAHOO.util.CustomEvent
 */

/**
 * A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints.
 * @id YAHOO.util.ImageLoader.group
 * @class YAHOO.util.ImageLoader.group
 * @requires YAHOO.util.Dom
 * @requires YAHOO.util.Event
 * @constructor
 * @param {String|HTMLElement}	trigEl	The HTML element id or reference to assign the trigger event to. Can be null for no trigger
 * @param {String}	trigAct The type of event to assign to trigEl. Can be null for no trigger
 * @param {Number}	timeout	Timeout (time limit) length, in seconds. Can be undefined, or <= 0, for no time limit
 */

/**
 * Name for the group. Only used to identify the group in logging statements
 * @id YAHOO.util.ImageLoader.group.name
 * @property name
 * @type String
 */

/**
 * Collection of images registered with this group
 * @id YAHOO.util.ImageLoader.group._imgObjs
 * @property _imgObjs
 * @private
 * @type Object
 */

/**
 * Timeout (time limit) length, in seconds
 * @id YAHOO.util.ImageLoader.group.timeoutLen
 * @property timeoutLen
 * @type Number
 */

/**
 * Timeout object to keep a handle on the time limit
 * @id YAHOO.util.ImageLoader.group._timeout
 * @property _timeout
 * @private
 * @type Object
 */

/**
 * Collection of triggers for this group.
 * Keeps track of each trigger's element, event, and event-listener-callback "fetch" function
 * @id YAHOO.util.ImageLoader.group._triggers
 * @property _triggers
 * @private
 * @type Array
 */

/**
 * Collection of custom-event triggers for this group.
 * Keeps track of each trigger's event object and event-listener-callback "fetch" function
 * @id YAHOO.util.ImageLoader.group._customTriggers
 * @property _customTriggers
 * @private
 * @type Array
 */

/**
 * Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately
 * @id YAHOO.util.ImageLoader.group.foldConditional
 * @property foldConditional
 * @type Boolean
 */

/**
 * Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.
 * This class should have, in its CSS style definition, "background:none !important;"
 * @id YAHOO.util.ImageLoader.group.className
 * @property className
 * @type String
 */

/**
 * HTML elements having the class name that is associated with this group
 * Elements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used
 * @id YAHOO.util.ImageLoader.group._classImageEls
 * @property _classImageEls
 * @private
 * @type Array
 */

/**
 * Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener
 * @id YAHOO.util.ImageLoader.group.addTrigger
 * @method addTrigger
 * @param {String|HTMLElement} trigEl  The HTML element id or reference to assign the trigger event to
 * @param {String} trigAct The type of event to assign to trigEl
 */

/**
 * Adds a custom event trigger to the group.
 * @id YAHOO.util.ImageLoader.group.addCustomTrigger
 * @method addCustomTrigger
 * @param {Object} event A YAHOO.util.CustomEvent object
 */

/**
 * Setup to do in the window's onload
 * Initiates time limit for group; executes the fold check for the images
 * @id YAHOO.util.ImageLoader.group._onloadTasks
 * @method _onloadTasks
 * @private
 */

/**
 * Returns the group's fetch method, with the proper closure, for use with setTimeout
 * @id YAHOO.util.ImageLoader.group._getFetchTimeout
 * @method _getFetchTimeout
 * @return {Function}  group's fetch method
 * @private
 */

/**
 * Registers a background image with the group
 * @id YAHOO.util.ImageLoader.group.registerBgImage
 * @method registerBgImage
 * @param {String}	domId	HTML DOM id of the image element
 * @param {String}	url	URL for the image
 * @return {Object}	bgImgObj that was registered, for modifying any attributes in the object
 */

/**
 * Registers a src image with the group
 * @id YAHOO.util.ImageLoader.group.registerSrcImage
 * @method registerSrcImage
 * @param {String}	domId	HTML DOM id of the image element
 * @param {String}	url	URL for the image
 * @param {Int}	width	pixel width of the image - defaults to image's natural size
 * @param {Int}	height	pixel height of the image - defaults to image's natural size
 * @return {Object}	srcImgObj that was registered, for modifying any attributes in the object
 */

/**
 * Registers an alpha-channel-type png background image with the group
 * @id YAHOO.util.ImageLoader.group.registerPngBgImage
 * @method registerPngBgImage
 * @param {String}	domId	HTML DOM id of the image element
 * @param {String}	url	URL for the image
 * @param {Object}  ailProps The AlphaImageLoader properties to be set for the image
 *                    Valid properties are 'sizingMethod' and 'enabled'
 * @return {Object}	pngBgImgObj that was registered, for modifying any attributes in the object
 */

/**
 * Displays the images in the group
 * @id YAHOO.util.ImageLoader.group.fetch
 * @method fetch
 */

/**
 * Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately.
 * @id YAHOO.util.ImageLoader.group._foldCheck
 * @method _foldCheck
 * @private
 */

/**
 * Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching
 * @id YAHOO.util.ImageLoader.group._fetchByClass
 * @method _fetchByClass
 * @private
 */

/**
 * Base class for image objects to be registered with the groups
 * @id YAHOO.util.ImageLoader.imgObj
 * @class YAHOO.util.ImageLoader.imgObj
 * @constructor
 * @param {String}	domId	HTML DOM id of the image element
 * @param {String}	url	URL for the image
 */

/**
 * HTML DOM id of the image element
 * @id YAHOO.util.ImageLoader.imgObj.domId
 * @property domId
 * @type String
 */

/**
 * URL for the image
 * @id YAHOO.util.ImageLoader.imgObj.url
 * @property url
 * @type String
 */

/**
 * Pixel width of the image. Will be set as a "width" attribute after the image is fetched.
 * Detaults to the natural width of the image.
 * Only appropriate with src images
 * @id YAHOO.util.ImageLoader.imgObj.width
 * @property width
 * @type Int
 */

/**
 * Pixel height of the image. Will be set as a "height" attribute after the image is fetched.
 * Detaults to the natural height of the image.
 * Only appropriate with src images
 * @id YAHOO.util.ImageLoader.imgObj.height
 * @property height
 * @type Int
 */

/**
 * Whether the style.visibility should be set to "visible" after the image is fetched.
 * Used when setting src images as visibility:hidden prior to image fetching
 * @id YAHOO.util.ImageLoader.imgObj.setVisible
 * @property setVisible
 * @type Boolean
 */

/**
 * Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren't fetched twice
 * @id YAHOO.util.ImageLoader.imgObj._fetched
 * @property _fetched
 * @type Boolean
 * @private
 */

/**
 * Displays the image; puts the URL into the DOM
 * @id YAHOO.util.ImageLoader.imgObj.fetch
 * @method fetch
 */

/**
 * Inserts the image URL into the DOM so that the image is displayed.
 * Must be overridden by child class
 * @id YAHOO.util.ImageLoader.imgObj._applyUrl
 * @method _applyUrl
 * @param {Object}	el	HTML DOM element
 * @private
 */

/**
 * Background image object. A background image is one whose URL is specified by "background-image" in the element's style
 * @id YAHOO.util.ImageLoader.bgImgObj
 * @class YAHOO.util.ImageLoader.bgImgObj
 * @constructor
 * @extends YAHOO.util.ImageLoader.imgObj
 * @param {String}	domId	HTML DOM id of the image element
 * @param {String}	url	URL for the image
 */

/**
 * Inserts the image URL into the DOM so that the image is displayed.
 * Sets style.backgroundImage
 * @id YAHOO.util.ImageLoader.bgImgObj._applyUrl
 * @method _applyUrl
 * @param {Object}	el	HTML DOM element
 * @private
 */

/**
 * Source image object. A source image is one whose URL is specified by a src attribute in the DOM element
 * @id YAHOO.util.ImageLoader.srcImgObj
 * @class YAHOO.util.ImageLoader.srcImgObj
 * @constructor
 * @extends YAHOO.util.ImageLoader.imgObj
 * @param {String}	domId	HTML DOM id of the image element
 * @param {String}	url	URL for the image
 * @param {Int}	width	pixel width of the image - defaults to image's natural size
 * @param {Int}	height	pixel height of the image - defaults to image's natural size
 */

/**
 * Inserts the image URL into the DOM so that the image is displayed.
 * Sets src
 * @id YAHOO.util.ImageLoader.srcImgObj._applyUrl
 * @method _applyUrl
 * @param {Object}	el	HTML DOM element
 * @private
 */

/**
 * PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by "background-image" in the element's style
 * @id YAHOO.util.ImageLoader.pngBgImgObj
 * @class YAHOO.util.ImageLoader.pngBgImgObj
 * @constructor
 * @extends YAHOO.util.ImageLoader.imgObj
 * @param {String}	domId	HTML DOM id of the image element
 * @param {String}	url	URL for the image
 * @param {Object}  ailProps The AlphaImageLoader properties to be set for the image
 *                    Valid properties are 'sizingMethod' and 'enabled'
 */

/**
 * AlphaImageLoader properties to be set for the image.
 * Valid properties are "sizingMethod" and "enabled".
 * @id YAHOO.util.ImageLoader.pngBgImgObj.props
 * @property props
 * @type Object
 */

/**
 * Inserts the image URL into the DOM so that the image is displayed.
 * If the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage
 * @id YAHOO.util.ImageLoader.pngBgImgObj._applyUrl
 * @method _applyUrl
 * @param {Object}	el	HTML DOM element
 * @private
 */

/**
 * Provides methods to parse JSON strings and convert objects to JSON strings.
 * @id YAHOO.lang.JSON
 * @module json
 * @requires yahoo
 * @class YAHOO.lang.JSON
 * @static
 */

/**
 * First step in the validation.  Regex used to replace all escape
 * sequences (i.e. "\\", etc) with '@' characters (a non-JSON character).
 * @id YAHOO.lang.JSON.RE_REPLACE_ESCAPES
 * @property RE_REPLACE_ESCAPES
 * @type {RegExp}
 * @static
 * @private
 */

/**
 * Second step in the validation.  Regex used to replace all simple
 * values with ']' characters.
 * @id YAHOO.lang.JSON.RE_REPLACE_VALUES
 * @property RE_REPLACE_VALUES
 * @type {RegExp}
 * @static
 * @private
 */

/**
 * Third step in the validation.  Regex used to remove all open square
 * brackets following a colon, comma, or at the beginning of the string.
 * @id YAHOO.lang.JSON.RE_REPLACE_BRACKETS
 * @property RE_REPLACE_BRACKETS
 * @type {RegExp}
 * @static
 * @private
 */

/**
 * Final step in the validation.  Regex used to test the string left after
 * all previous replacements for invalid characters.
 * @id YAHOO.lang.JSON.RE_INVALID
 * @property RE_INVALID
 * @type {RegExp}
 * @static
 * @private
 */

/**
 * Regex used to replace special characters in strings for JSON
 * stringification.
 * @id YAHOO.lang.JSON._SPECIAL_CHARS
 * @property _SPECIAL_CHARS
 * @type {RegExp}
 * @static
 * @private
 */

/**
 * Regex used to reconstitute serialized Dates.
 * @id YAHOO.lang.JSON._PARSE_DATE
 * @property _PARSE_DATE
 * @type {RegExp}
 * @static
 * @private
 */

/**
 * Character substitution map for common escapes and special characters.
 * @id YAHOO.lang.JSON._CHARS
 * @property _CHARS
 * @type {Object}
 * @static
 * @private
 */

/**
 * Traverses nested objects, applying a filter or mutation function to
 * each value.  The value returned from the function will replace the
 * original value in the key:value pair.  If the value returned is
 * undefined, the key will be omitted from the returned object.
 * @id YAHOO.lang.JSON._applyFilter
 * @method _applyFilter
 * @param data {MIXED} Any JavaScript data
 * @param filter {Function} filter or mutation function
 * @return {MIXED} The results of the filtered data
 * @static
 * @private
 */

/**
 * Four step determination whether a string is valid JSON.  In three steps,
 * escape sequences, safe values, and properly placed open square brackets
 * are replaced with placeholders or removed.  Then in the final step, the
 * result of all these replacements is checked for invalid characters.
 * @id YAHOO.lang.JSON.isValid
 * @method isValid
 * @param str {String} JSON string to be tested
 * @return {boolean} is the string safe for eval?
 * @static
 */

/**
 * Serializes a Date instance as a UTC date string.  Used internally by
 * stringify.  Override this method if you need Dates serialized in a
 * different format.
 * @id YAHOO.lang.JSON.dateToString
 * @method dateToString
 * @param d {Date} The Date to serialize
 * @return {String} stringified Date in UTC format YYYY-MM-DDTHH:mm:SSZ
 * @static
 */

/**
 * Reconstitute Date instances from the default JSON UTC serialization.
 * Reference this from a parse filter function to rebuild Dates during the
 * parse operation.
 * @id YAHOO.lang.JSON.stringToDate
 * @method stringToDate
 * @param str {String} String serialization of a Date
 * @return {Date}
 */

/**
 * Parse a JSON string, returning the native JavaScript representation.
 * Only minor modifications from http://www.json.org/json.js.
 * @id YAHOO.lang.JSON.parse
 * @param s {string} JSON string data
 * @param filter {function} (optional) function(k,v) passed each key value pair of object literals, allowing pruning or altering values
 * @return {MIXED} the native JavaScript representation of the JSON string
 * @throws SyntaxError
 * @method parse
 * @static
 * @public
 */

/**
 * Converts an arbitrary value to a JSON string representation.
 * Cyclical object or array references are replaced with null.
 * If a whitelist is provided, only matching object keys will be included.
 * If a depth limit is provided, objects and arrays at that depth will
 * be stringified as empty.
 * @id YAHOO.lang.JSON.stringify
 * @method stringify
 * @param o {MIXED} any arbitrary object to convert to JSON string
 * @param w {Array} (optional) whitelist of acceptable object keys to include
 * @param d {number} (optional) depth limit to recurse objects/arrays (practical minimum 1)
 * @return {string} JSON string representation of the input
 * @static
 * @public
 */

/**
 * @id YAHOO.widget.Layout
 * @constructor
 * @class Layout
 * @extends YAHOO.util.Element
 * @description <p>Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.</p>
 * @param {String/HTMLElement} el The element to make contain a layout.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.Layout._instances
 * @private
 * @static
 * @property _instances
 * @description Internal hash table for all layout instances
 * @type Object
 */

/**
 * @id YAHOO.widget.Layout.getLayoutById
 * @static
 * @method getLayoutById
 * @description Get's a layout object by the HTML id of the element associated with the Layout object.
 * @return {Object} The Layout Object
 */

/**
 * @id YAHOO.widget.Layout.browser
 * @property browser
 * @description A modified version of the YAHOO.env.ua object
 * @type Object
 */

/**
 * @id YAHOO.widget.Layout._rendered
 * @private
 * @property _rendered
 * @description Set to true when the layout is rendered
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Layout._zIndex
 * @private
 * @property _zIndex
 * @description The zIndex to set all LayoutUnits to
 * @type Number
 */

/**
 * @id YAHOO.widget.Layout._sizes
 * @private
 * @property _sizes
 * @description A collection of the current sizes of all usable LayoutUnits to be used for calculations
 * @type Object
 */

/**
 * @id YAHOO.widget.Layout._setBodySize
 * @private
 * @method _setBodySize
 * @param {Boolean} set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)
 * @description Used to set the body size of the layout, sets the height and width of the parent container
 */

/**
 * @id YAHOO.widget.Layout._setSides
 * @private
 * @method _setSides
 * @param {Boolean} set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)
 * @description Used to set the size and position of the left, right, top and bottom units
 */

/**
 * @id YAHOO.widget.Layout._setCenter
 * @private
 * @method _setCenter
 * @param {Boolean} set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)
 * @description Used to set the size and position of the center unit
 */

/**
 * @id YAHOO.widget.Layout.getSizes
 * @method getSizes
 * @description Get a reference to the internal Layout Unit sizes
 * @return {Object} An object of the layout unit sizes
 */

/**
 * @id YAHOO.widget.Layout.getUnitById
 * @method getUnitById
 * @param {String} id The HTML element id of the unit
 * @description Get the LayoutUnit by it's HTML id
 * @return {YAHOO.widget.LayoutUnit} The LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout.getUnitByPosition
 * @method getUnitByPosition
 * @param {String} pos The position of the unit in this layout
 * @description Get the LayoutUnit by it's position in this layout
 * @return {YAHOO.widget.LayoutUnit} The LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout.removeUnit
 * @method removeUnit
 * @param {Object} unit The LayoutUnit that you want to remove
 * @description Remove the unit from this layout and resize the layout.
 */

/**
 * @id YAHOO.widget.Layout.addUnit
 * @method addUnit
 * @param {Object} cfg The config for the LayoutUnit that you want to add
 * @description Add a unit to this layout and if the layout is rendered, resize the layout.
 * @return {YAHOO.widget.LayoutUnit} The LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout._createUnits
 * @private
 * @method _createUnits
 * @description Private method to create units from the config that was passed in.
 */

/**
 * @id YAHOO.widget.Layout.resize
 * @method resize
 * @param {Boolean} set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)
 * @description Starts the chain of resize routines that will resize all the units.
 * @return {YAHOO.widget.Layout} The Layout instance
 */

/**
 * @id YAHOO.widget.Layout._setupBodyElements
 * @private
 * @method _setupBodyElements
 * @description Sets up the main doc element when using the body as the main element.
 */

/**
 * @id YAHOO.widget.Layout._setupElements
 * @private
 * @method _setupElements
 * @description Sets up the main doc element when not using the body as the main element.
 */

/**
 * @id YAHOO.widget.Layout._isBody
 * @private
 * @property _isBody
 * @description Flag to determine if we are using the body as the root element.
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Layout._doc
 * @private
 * @property _doc
 * @description Reference to the root element
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.Layout._left
 * @private
 * @property _left
 * @description Reference to the left LayoutUnit Object
 * @type {YAHOO.widget.LayoutUnit} A LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout._right
 * @private
 * @property _right
 * @description Reference to the right LayoutUnit Object
 * @type {YAHOO.widget.LayoutUnit} A LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout._top
 * @private
 * @property _top
 * @description Reference to the top LayoutUnit Object
 * @type {YAHOO.widget.LayoutUnit} A LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout._bottom
 * @private
 * @property _bottom
 * @description Reference to the bottom LayoutUnit Object
 * @type {YAHOO.widget.LayoutUnit} A LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout._center
 * @private
 * @property _center
 * @description Reference to the center LayoutUnit Object
 * @type {YAHOO.widget.LayoutUnit} A LayoutUnit instance
 */

/**
 * @id YAHOO.widget.Layout.init
 * @private
 * @method init
 * @description The Layout class' initialization method
 */

/**
 * @id YAHOO.widget.Layout.render
 * @method render
 * @description This method starts the render process, applying classnames and creating elements
 * @return {YAHOO.widget.Layout} The Layout instance
 */

/**
 * @id YAHOO.widget.Layout._stamp
 * @private
 * @method _stamp
 * @description Stamps the root node with a secure classname for ease of use. Also sets the this.browser.standardsMode variable.
 */

/**
 * @id YAHOO.widget.Layout.initAttributes
 * @private
 * @method initAttributes
 * @description Processes the config
 */

/**
 * @id YAHOO.widget.Layout.units
 * @attribute units
 * @description An array of config definitions for the LayoutUnits to add to this layout
 * @type Array
 */

/**
 * @id YAHOO.widget.Layout.minHeight
 * @attribute minHeight
 * @description The minimum height in pixels
 * @type Number
 */

/**
 * @id YAHOO.widget.Layout.minWidth
 * @attribute minWidth
 * @description The minimum width in pixels
 * @type Number
 */

/**
 * @id YAHOO.widget.Layout.height
 * @attribute height
 * @description The height in pixels
 * @type Number
 */

/**
 * @id YAHOO.widget.Layout.width
 * @attribute width
 * @description The width in pixels
 * @type Number
 */

/**
 * @id YAHOO.widget.Layout.parent
 * @attribute parent
 * @description If this layout is to be used as a child of another Layout instance, this config will bind the resize events together.
 * @type Object YAHOO.widget.Layout
 */

/**
 * @id YAHOO.widget.Layout.toString
 * @method toString
 * @description Returns a string representing the Layout.
 * @return {String}
 */

/**
 * @id YAHOO.widget.Layout.resize
 * @event resize
 * @description Fired when this.resize is called
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Layout.startResize
 * @event startResize
 * @description Fired when the Resize Utility for a Unit fires it's startResize Event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Layout.beforeResize
 * @event beforeResize
 * @description Firef at the beginning of the resize method. If you return false, the resize is cancelled.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Layout.render
 * @event render
 * @description Fired after the render method completes.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.LayoutUnit
 * @constructor
 * @class LayoutUnit
 * @extends YAHOO.util.Element
 * @description <p>Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.</p>
 * @param {String/HTMLElement} el The element to make a unit.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.widget.LayoutUnit._instances
 * @private
 * @static
 * @property _instances
 * @description Internal hash table for all layout unit instances
 * @type Object
 */

/**
 * @id YAHOO.widget.LayoutUnit.getLayoutUnitById
 * @static
 * @method getLayoutUnitById
 * @description Get's a layout unit object by the HTML id of the element associated with the Layout Unit object.
 * @return {Object} The Layout Object
 */

/**
 * @id YAHOO.widget.LayoutUnit.STR_CLOSE
 * @property STR_CLOSE
 * @description String used for close button title
 * @type {String}
 */

/**
 * @id YAHOO.widget.LayoutUnit.STR_COLLAPSE
 * @property STR_COLLAPSE
 * @description String used for collapse button title
 * @type {String}
 */

/**
 * @id YAHOO.widget.LayoutUnit.STR_EXPAND
 * @property STR_EXPAND
 * @description String used for expand button title
 * @type {String}
 */

/**
 * @id YAHOO.widget.LayoutUnit.browser
 * @property browser
 * @description A modified version of the YAHOO.env.ua object
 * @type Object
 */

/**
 * @id YAHOO.widget.LayoutUnit._sizes
 * @private
 * @property _sizes
 * @description A collection of the current sizes of the contents of this Layout Unit
 * @type Object
 */

/**
 * @id YAHOO.widget.LayoutUnit._anim
 * @private
 * @property _anim
 * @description A reference to the Animation instance used by this LayouUnit
 * @type YAHOO.util.Anim
 */

/**
 * @id YAHOO.widget.LayoutUnit._resize
 * @private
 * @property _resize
 * @description A reference to the Resize instance used by this LayoutUnit
 * @type YAHOO.util.Resize
 */

/**
 * @id YAHOO.widget.LayoutUnit._clip
 * @private
 * @property _clip
 * @description A reference to the clip element used when collapsing the unit
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.LayoutUnit._gutter
 * @private
 * @property _gutter
 * @description A simple hash table used to store the gutter to apply to the Unit
 * @type Object
 */

/**
 * @id YAHOO.widget.LayoutUnit.header
 * @property header
 * @description A reference to the HTML element used for the Header
 * @type HTMLELement
 */

/**
 * @id YAHOO.widget.LayoutUnit.body
 * @property body
 * @description A reference to the HTML element used for the body
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.LayoutUnit.footer
 * @property footer
 * @description A reference to the HTML element used for the footer
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.LayoutUnit._collapsed
 * @private
 * @property _collapsed
 * @description Flag to determine if the unit is collapsed or not.
 * @type Boolean
 */

/**
 * @id YAHOO.widget.LayoutUnit._collapsing
 * @private
 * @property _collapsing
 * @description A flag set while the unit is being collapsed, used so we don't fire events while animating the size
 * @type Boolean
 */

/**
 * @id YAHOO.widget.LayoutUnit._lastWidth
 * @private
 * @property _lastWidth
 * @description A holder for the last known width of the unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit._lastHeight
 * @private
 * @property _lastHeight
 * @description A holder for the last known height of the unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit._lastTop
 * @private
 * @property _lastTop
 * @description A holder for the last known top of the unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit._lastLeft
 * @private
 * @property _lastLeft
 * @description A holder for the last known left of the unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit._lastScroll
 * @private
 * @property _lastScroll
 * @description A holder for the last known scroll state of the unit
 * @type Boolean
 */

/**
 * @id YAHOO.widget.LayoutUnit.resize
 * @method resize
 * @description Resize either the unit or it's clipped state, also updating the box inside
 * @param {Boolean} force This will force full calculations even when the unit is collapsed
 * @return {YAHOO.widget.LayoutUnit} The LayoutUnit instance
 */

/**
 * @id YAHOO.widget.LayoutUnit._setWidth
 * @private
 * @method _setWidth
 * @description Sets the width of the element based on the border size of the element.
 * @param {HTMLElement} el The HTMLElement to have it's width set
 * @param {Number} w The width that you want it the element set to
 * @return {Number} The new width, fixed for borders and IE QuirksMode
 */

/**
 * @id YAHOO.widget.LayoutUnit._setHeight
 * @private
 * @method _setHeight
 * @description Sets the height of the element based on the border size of the element.
 * @param {HTMLElement} el The HTMLElement to have it's height set
 * @param {Number} h The height that you want it the element set to
 * @return {Number} The new height, fixed for borders and IE QuirksMode
 */

/**
 * @id YAHOO.widget.LayoutUnit._fixQuirks
 * @private
 * @method _fixQuirks
 * @description Fixes the box calculations for IE in QuirksMode
 * @param {HTMLElement} el The HTMLElement to set the dimension on
 * @param {Number} dim The number of the dimension to fix
 * @param {String} side The dimension (h or w) to fix. Defaults to h
 * @return {Number} The fixed dimension
 */

/**
 * @id YAHOO.widget.LayoutUnit._getBoxSize
 * @private
 * @method _getBoxSize
 * @description Get's the elements clientHeight and clientWidth plus the size of the borders
 * @param {HTMLElement} el The HTMLElement to get the size of
 * @return {Array} An array of height and width
 */

/**
 * @id YAHOO.widget.LayoutUnit._getBorderSizes
 * @private
 * @method _getBorderSizes
 * @description Get the CSS border size of the element passed.
 * @param {HTMLElement} el The element to get the border size of
 * @return {Array} An array of the top, right, bottom, left borders.
 */

/**
 * @id YAHOO.widget.LayoutUnit._createClip
 * @private
 * @method _createClip
 * @description Create the clip element used when the Unit is collapsed
 */

/**
 * @id YAHOO.widget.LayoutUnit._toggleClip
 * @private
 * @method _toggleClip
 * @description Toggle th current state of the Clip element and set it's height, width and position
 */

/**
 * @id YAHOO.widget.LayoutUnit.getSizes
 * @method getSizes
 * @description Get a reference to the internal sizes object
 * @return {Object} An object of the sizes used for calculations
 */

/**
 * @id YAHOO.widget.LayoutUnit.toggle
 * @method toggle
 * @description Toggles the Unit, replacing it with a clipped version.
 * @return {YAHOO.widget.LayoutUnit} The LayoutUnit instance
 */

/**
 * @id YAHOO.widget.LayoutUnit.expand
 * @method expand
 * @description Expand the Unit if it is collapsed.
 * @return {YAHOO.widget.LayoutUnit} The LayoutUnit instance
 */

/**
 * @id YAHOO.widget.LayoutUnit.collapse
 * @method collapse
 * @description Collapse the Unit if it is not collapsed.
 * @return {YAHOO.widget.LayoutUnit} The LayoutUnit instance
 */

/**
 * @id YAHOO.widget.LayoutUnit.close
 * @method close
 * @description Close the unit, removing it from the parent Layout.
 * @return {YAHOO.widget.Layout} The parent Layout instance
 */

/**
 * @id YAHOO.widget.LayoutUnit.init
 * @private
 * @method init
 * @description The initalization method inherited from Element.
 */

/**
 * @id YAHOO.widget.LayoutUnit.initAttributes
 * @private
 * @method initAttributes
 * @description Processes the config
 */

/**
 * @id YAHOO.widget.LayoutUnit.wrap
 * @private
 * @attribute wrap
 * @description A reference to the wrap element
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.LayoutUnit.grids
 * @attribute grids
 * @description Set this option to true if you want the LayoutUnit to fix the first layer of YUI CSS Grids (margins)
 * @type Boolean
 */

/**
 * @id YAHOO.widget.LayoutUnit.top
 * @private
 * @attribute top
 * @description The current top positioning of the Unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.left
 * @private
 * @attribute left
 * @description The current left position of the Unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.minWidth
 * @attribute minWidth
 * @description The minWidth parameter passed to the Resize Utility
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.maxWidth
 * @attribute maxWidth
 * @description The maxWidth parameter passed to the Resize Utility
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.minHeight
 * @attribute minHeight
 * @description The minHeight parameter passed to the Resize Utility
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.maxHeight
 * @attribute maxHeight
 * @description The maxHeight parameter passed to the Resize Utility
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.height
 * @attribute height
 * @description The height of the Unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.width
 * @attribute width
 * @description The width of the Unit
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.position
 * @attribute position
 * @description The position (top, right, bottom, left or center) of the Unit in the Layout
 * @type {String}
 */

/**
 * @id YAHOO.widget.LayoutUnit.gutter
 * @attribute gutter
 * @description The gutter that we should apply to the parent Layout around this Unit. Supports standard CSS markup: (2 4 0 5) or (2) or (2 5)
 * @type String
 */

/**
 * @id YAHOO.widget.LayoutUnit.parent
 * @attribute parent
 * @description The parent Layout that we are assigned to
 * @type {Object} YAHOO.widget.Layout
 */

/**
 * @id YAHOO.widget.LayoutUnit.collapseSize
 * @attribute collapseSize
 * @description The pixel size of the Clip that we will collapse to
 * @type Number
 */

/**
 * @id YAHOO.widget.LayoutUnit.duration
 * @attribute duration
 * @description The duration to give the Animation Utility when animating the opening and closing of Units
 */

/**
 * @id YAHOO.widget.LayoutUnit.easing
 * @attribute easing
 * @description The Animation Easing to apply to the Animation instance for this unit.
 */

/**
 * @id YAHOO.widget.LayoutUnit.animate
 * @attribute animate
 * @description Use animation to collapse/expand the unit
 * @type Boolean
 */

/**
 * @id YAHOO.widget.LayoutUnit.header
 * @attribute header
 * @description The text to use as the Header of the Unit
 */

/**
 * @id YAHOO.widget.LayoutUnit.proxy
 * @attribute proxy
 * @description Use the proxy config setting for the Resize Utility
 * @type Boolean
 */

/**
 * @id YAHOO.widget.LayoutUnit.body
 * @attribute body
 * @description The content for the body. If we find an element in the page with an id that matches the passed option we will move that element into the body of this unit.
 */

/**
 * @id YAHOO.widget.LayoutUnit.footer
 * @attribute footer
 * @description The content for the footer. If we find an element in the page with an id that matches the passed option we will move that element into the footer of this unit.
 */

/**
 * @id YAHOO.widget.LayoutUnit.close
 * @attribute close
 * @description Adds a close icon to the unit
 */

/**
 * @id YAHOO.widget.LayoutUnit.collapse
 * @attribute collapse
 * @description Adds a collapse icon to the unit
 */

/**
 * @id YAHOO.widget.LayoutUnit.scroll
 * @attribute scroll
 * @description Adds a class to the unit to allow for overflow: auto, default is overflow: hidden
 */

/**
 * @id YAHOO.widget.LayoutUnit.hover
 * @attribute hover
 * @description Config option to pass to the Resize Utility
 */

/**
 * @id YAHOO.widget.LayoutUnit.resize
 * @attribute resize
 * @description Should a Resize instance be added to this unit
 */

/**
 * @id YAHOO.widget.LayoutUnit._cleanGrids
 * @private
 * @method _cleanGrids
 * @description This method attempts to clean up the first level of the YUI CSS Grids, YAHOO.util.Selector is required for this operation.
 */

/**
 * @id YAHOO.widget.LayoutUnit._createHeader
 * @private
 * @method _createHeader
 * @description Creates the HTMLElement for the header
 * @return {HTMLElement} The new HTMLElement
 */

/**
 * @id YAHOO.widget.LayoutUnit.destroy
 * @method destroy
 * @description Removes this unit from the parent and cleans up after itself.
 * @return {YAHOO.widget.Layout} The parent Layout instance
 */

/**
 * @id YAHOO.widget.LayoutUnit.toString
 * @method toString
 * @description Returns a string representing the LayoutUnit.
 * @return {String}
 */

/**
 * @id YAHOO.widget.LayoutUnit.resize
 * @event resize
 * @description Fired when this.resize is called
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.LayoutUnit.startResize
 * @event startResize
 * @description Fired when the Resize Utility fires it's startResize Event.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.LayoutUnit.beforeResize
 * @event beforeResize
 * @description Firef at the beginning of the resize method. If you return false, the resize is cancelled.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.LayoutUnit.contentChange
 * @event contentChange
 * @description Fired when the content in the header, body or footer is changed via the API
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.LayoutUnit.close
 * @event close
 * @description Fired when the unit is closed
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.LayoutUnit.collapse
 * @event collapse
 * @description Fired when the unit is collapsed
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.LayoutUnit.expand
 * @event expand
 * @description Fired when the unit is exanded
 * @type YAHOO.util.CustomEvent
 */

/**
 * The LogMsg class defines a single log message.
 *
 * @id LogMsg
 * @class LogMsg
 * @constructor
 * @param oConfigs {Object} Object literal of configuration params.
 */

/**
 * Log message.
 *
 * @id LogMsg.msg
 * @property msg
 * @type String
 */

/**
 * Log timestamp.
 *
 * @id LogMsg.time
 * @property time
 * @type Date
 */

/**
 * Log category.
 *
 * @id LogMsg.category
 * @property category
 * @type String
 */

/**
 * Log source. The first word passed in as the source argument.
 *
 * @id LogMsg.source
 * @property source
 * @type String
 */

/**
 * Log source detail. The remainder of the string passed in as the source argument, not
 * including the first word (if any).
 *
 * @id LogMsg.sourceDetail
 * @property sourceDetail
 * @type String
 */

/**
 * The LogWriter class provides a mechanism to log messages through
 * YAHOO.widget.Logger from a named source.
 *
 * @id LogWriter
 * @class LogWriter
 * @constructor
 * @param sSource {String} Source of LogWriter instance.
 */

/**
 * Public accessor to the unique name of the LogWriter instance.
 *
 * @id LogWriter.toString
 * @method toString
 * @return {String} Unique name of the LogWriter instance.
 */

/**
 * Logs a message attached to the source of the LogWriter.
 *
 * @id LogWriter.log
 * @method log
 * @param sMsg {String} The log message.
 * @param sCategory {String} Category name.
 */

/**
 * Public accessor to get the source name.
 *
 * @id LogWriter.getSource
 * @method getSource
 * @return {String} The LogWriter source.
 */

/**
 * Public accessor to set the source name.
 *
 * @id LogWriter.setSource
 * @method setSource
 * @param sSource {String} Source of LogWriter instance.
 */

/**
 * Source of the LogWriter instance.
 *
 * @id LogWriter._source
 * @property _source
 * @type String
 * @private
 */

/**
 * The LogReader class provides UI to read messages logged to YAHOO.widget.Logger.
 *
 * @id LogReader
 * @class LogReader
 * @constructor
 * @param elContainer {HTMLElement} (optional) DOM element reference of an existing DIV.
 * @param elContainer {String} (optional) String ID of an existing DIV.
 * @param oConfigs {Object} (optional) Object literal of configuration params.
 */

/**
 * Whether or not LogReader is enabled to output log messages.
 *
 * @id LogReader.logReaderEnabled
 * @property logReaderEnabled
 * @type Boolean
 * @default true
 */

/**
 * Public member to access CSS width of the LogReader container.
 *
 * @id LogReader.width
 * @property width
 * @type String
 */

/**
 * Public member to access CSS height of the LogReader container.
 *
 * @id LogReader.height
 * @property height
 * @type String
 */

/**
 * Public member to access CSS top position of the LogReader container.
 *
 * @id LogReader.top
 * @property top
 * @type String
 */

/**
 * Public member to access CSS left position of the LogReader container.
 *
 * @id LogReader.left
 * @property left
 * @type String
 */

/**
 * Public member to access CSS right position of the LogReader container.
 *
 * @id LogReader.right
 * @property right
 * @type String
 */

/**
 * Public member to access CSS bottom position of the LogReader container.
 *
 * @id LogReader.bottom
 * @property bottom
 * @type String
 */

/**
 * Public member to access CSS font size of the LogReader container.
 *
 * @id LogReader.fontSize
 * @property fontSize
 * @type String
 */

/**
 * Whether or not the footer UI is enabled for the LogReader.
 *
 * @id LogReader.footerEnabled
 * @property footerEnabled
 * @type Boolean
 * @default true
 */

/**
 * Whether or not output is verbose (more readable). Setting to true will make
 * output more compact (less readable).
 *
 * @id LogReader.verboseOutput
 * @property verboseOutput
 * @type Boolean
 * @default true
 */

/**
 * Whether or not newest message is printed on top.
 *
 * @id LogReader.newestOnTop
 * @property newestOnTop
 * @type Boolean
 */

/**
 * Output timeout buffer in milliseconds.
 *
 * @id LogReader.outputBuffer
 * @property outputBuffer
 * @type Number
 * @default 100
 */

/**
 * Maximum number of messages a LogReader console will display.
 *
 * @id LogReader.thresholdMax
 * @property thresholdMax
 * @type Number
 * @default 500
 */

/**
 * When a LogReader console reaches its thresholdMax, it will clear out messages
 * and print out the latest thresholdMin number of messages.
 *
 * @id LogReader.thresholdMin
 * @property thresholdMin
 * @type Number
 * @default 100
 */

/**
 * True when LogReader is in a collapsed state, false otherwise.
 *
 * @id LogReader.isCollapsed
 * @property isCollapsed
 * @type Boolean
 * @default false
 */

/**
 * True when LogReader is in a paused state, false otherwise.
 *
 * @id LogReader.isPaused
 * @property isPaused
 * @type Boolean
 * @default false
 */

/**
 * Enables draggable LogReader if DragDrop Utility is present.
 *
 * @id LogReader.draggable
 * @property draggable
 * @type Boolean
 * @default true
 */

/**
 * Public accessor to the unique name of the LogReader instance.
 *
 * @id LogReader.toString
 * @method toString
 * @return {String} Unique name of the LogReader instance.
 */

/**
 * Pauses output of log messages. While paused, log messages are not lost, but
 * get saved to a buffer and then output upon resume of LogReader.
 *
 * @id LogReader.pause
 * @method pause
 */

/**
 * Resumes output of log messages, including outputting any log messages that
 * have been saved to buffer while paused.
 *
 * @id LogReader.resume
 * @method resume
 */

/**
 * Hides UI of LogReader. Logging functionality is not disrupted.
 *
 * @id LogReader.hide
 * @method hide
 */

/**
 * Shows UI of LogReader. Logging functionality is not disrupted.
 *
 * @id LogReader.show
 * @method show
 */

/**
 * Collapses UI of LogReader. Logging functionality is not disrupted.
 *
 * @id LogReader.collapse
 * @method collapse
 */

/**
 * Expands UI of LogReader. Logging functionality is not disrupted.
 *
 * @id LogReader.expand
 * @method expand
 */

/**
 * Returns related checkbox element for given filter (i.e., category or source).
 *
 * @id LogReader.getCheckbox
 * @method getCheckbox
 * @param {String} Category or source name.
 * @return {Array} Array of all filter checkboxes.
 */

/**
 * Returns array of enabled categories.
 *
 * @id LogReader.getCategories
 * @method getCategories
 * @return {String[]} Array of enabled categories.
 */

/**
 * Shows log messages associated with given category.
 *
 * @id LogReader.showCategory
 * @method showCategory
 * @param {String} Category name.
 */

/**
 * Hides log messages associated with given category.
 *
 * @id LogReader.hideCategory
 * @method hideCategory
 * @param {String} Category name.
 */

/**
 * Returns array of enabled sources.
 *
 * @id LogReader.getSources
 * @method getSources
 * @return {Array} Array of enabled sources.
 */

/**
 * Shows log messages associated with given source.
 *
 * @id LogReader.showSource
 * @method showSource
 * @param {String} Source name.
 */

/**
 * Hides log messages associated with given source.
 *
 * @id LogReader.hideSource
 * @method hideSource
 * @param {String} Source name.
 */

/**
 * Does not delete any log messages, but clears all printed log messages from
 * the console. Log messages will be printed out again if user re-filters. The
 * static method YAHOO.widget.Logger.reset() should be called in order to
 * actually delete log messages.
 *
 * @id LogReader.clearConsole
 * @method clearConsole
 */

/**
 * Updates title to given string.
 *
 * @id LogReader.setTitle
 * @method setTitle
 * @param sTitle {String} New title.
 */

/**
 * Gets timestamp of the last log.
 *
 * @id LogReader.getLastTime
 * @method getLastTime
 * @return {Date} Timestamp of the last log.
 */

/**
 * Formats message string to HTML for output to console.
 *
 * @id LogReader.formatMsg
 * @method formatMsg
 * @param oLogMsg {Object} Log message object.
 * @return {String} HTML-formatted message for output to console.
 */

/**
 * Converts input chars "<", ">", and "&" to HTML entities.
 *
 * @id LogReader.html2Text
 * @method html2Text
 * @param sHtml {String} String to convert.
 * @private
 */

/**
 * Internal class member to index multiple LogReader instances.
 *
 * @id LogReader._memberName
 * @property _memberName
 * @static
 * @type Number
 * @default 0
 * @private
 */

/**
 * Name of LogReader instance.
 *
 * @id LogReader._sName
 * @property _sName
 * @type String
 * @private
 */

/**
 * A class member shared by all LogReaders if a container needs to be
 * created during instantiation. Will be null if a container element never needs to
 * be created on the fly, such as when the implementer passes in their own element.
 *
 * @id LogReader._elDefaultContainer
 * @property _elDefaultContainer
 * @type HTMLElement
 * @private
 */

/**
 * Buffer of log message objects for batch output.
 *
 * @id LogReader._buffer
 * @property _buffer
 * @type Object[]
 * @private
 */

/**
 * Number of log messages output to console.
 *
 * @id LogReader._consoleMsgCount
 * @property _consoleMsgCount
 * @type Number
 * @default 0
 * @private
 */

/**
 * Date of last output log message.
 *
 * @id LogReader._lastTime
 * @property _lastTime
 * @type Date
 * @private
 */

/**
 * Batched output timeout ID.
 *
 * @id LogReader._timeout
 * @property _timeout
 * @type Number
 * @private
 */

/**
 * Hash of filters and their related checkbox elements.
 *
 * @id LogReader._filterCheckboxes
 * @property _filterCheckboxes
 * @type Object
 * @private
 */

/**
 * Array of filters for log message categories.
 *
 * @id LogReader._categoryFilters
 * @property _categoryFilters
 * @type String[]
 * @private
 */

/**
 * Array of filters for log message sources.
 *
 * @id LogReader._sourceFilters
 * @property _sourceFilters
 * @type String[]
 * @private
 */

/**
 * LogReader container element.
 *
 * @id LogReader._elContainer
 * @property _elContainer
 * @type HTMLElement
 * @private
 */

/**
 * LogReader header element.
 *
 * @id LogReader._elHd
 * @property _elHd
 * @type HTMLElement
 * @private
 */

/**
 * LogReader collapse element.
 *
 * @id LogReader._elCollapse
 * @property _elCollapse
 * @type HTMLElement
 * @private
 */

/**
 * LogReader collapse button element.
 *
 * @id LogReader._btnCollapse
 * @property _btnCollapse
 * @type HTMLElement
 * @private
 */

/**
 * LogReader title header element.
 *
 * @id LogReader._title
 * @property _title
 * @type HTMLElement
 * @private
 */

/**
 * LogReader console element.
 *
 * @id LogReader._elConsole
 * @property _elConsole
 * @type HTMLElement
 * @private
 */

/**
 * LogReader footer element.
 *
 * @id LogReader._elFt
 * @property _elFt
 * @type HTMLElement
 * @private
 */

/**
 * LogReader buttons container element.
 *
 * @id LogReader._elBtns
 * @property _elBtns
 * @type HTMLElement
 * @private
 */

/**
 * Container element for LogReader category filter checkboxes.
 *
 * @id LogReader._elCategoryFilters
 * @property _elCategoryFilters
 * @type HTMLElement
 * @private
 */

/**
 * Container element for LogReader source filter checkboxes.
 *
 * @id LogReader._elSourceFilters
 * @property _elSourceFilters
 * @type HTMLElement
 * @private
 */

/**
 * LogReader pause button element.
 *
 * @id LogReader._btnPause
 * @property _btnPause
 * @type HTMLElement
 * @private
 */

/**
 * Clear button element.
 *
 * @id LogReader._btnClear
 * @property _btnClear
 * @type HTMLElement
 * @private
 */

/**
 * Initializes the primary container element.
 *
 * @id LogReader._initContainerEl
 * @method _initContainerEl
 * @param elContainer {HTMLElement} Container element by reference or string ID.
 * @private
 */

/**
 * Initializes the header element.
 *
 * @id LogReader._initHeaderEl
 * @method _initHeaderEl
 * @private
 */

/**
 * Initializes the console element.
 *
 * @id LogReader._initConsoleEl
 * @method _initConsoleEl
 * @private
 */

/**
 * Initializes the footer element.
 *
 * @id LogReader._initFooterEl
 * @method _initFooterEl
 * @private
 */

/**
 * Initializes Drag and Drop on the header element.
 *
 * @id LogReader._initDragDrop
 * @method _initDragDrop
 * @private
 */

/**
 * Initializes category filters.
 *
 * @id LogReader._initCategories
 * @method _initCategories
 * @private
 */

/**
 * Initializes source filters.
 *
 * @id LogReader._initSources
 * @method _initSources
 * @private
 */

/**
 * Creates the UI for a category filter in the LogReader footer element.
 *
 * @id LogReader._createCategoryCheckbox
 * @method _createCategoryCheckbox
 * @param sCategory {String} Category name.
 * @private
 */

/**
 * Creates a checkbox in the LogReader footer element to filter by source.
 *
 * @id LogReader._createSourceCheckbox
 * @method _createSourceCheckbox
 * @param sSource {String} Source name.
 * @private
 */

/**
 * Reprints all log messages in the stack through filters.
 *
 * @id LogReader._filterLogs
 * @method _filterLogs
 * @private
 */

/**
 * Sends buffer of log messages to output and clears buffer.
 *
 * @id LogReader._printBuffer
 * @method _printBuffer
 * @private
 */

/**
 * Cycles through an array of log messages, and outputs each one to the console
 * if its category has not been filtered out.
 *
 * @id LogReader._printToConsole
 * @method _printToConsole
 * @param aEntries {Object[]} Array of LogMsg objects to output to console.
 * @private
 */

/**
 * Handles Logger's categoryCreateEvent.
 *
 * @id LogReader._onCategoryCreate
 * @method _onCategoryCreate
 * @param sType {String} The event.
 * @param aArgs {Object[]} Data passed from event firer.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * Handles Logger's sourceCreateEvent.
 *
 * @id LogReader._onSourceCreate
 * @method _onSourceCreate
 * @param sType {String} The event.
 * @param aArgs {Object[]} Data passed from event firer.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * Handles check events on the category filter checkboxes.
 *
 * @id LogReader._onCheckCategory
 * @method _onCheckCategory
 * @param v {HTMLEvent} The click event.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * Handles check events on the category filter checkboxes.
 *
 * @id LogReader._onCheckSource
 * @method _onCheckSource
 * @param v {HTMLEvent} The click event.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * Handles click events on the collapse button.
 *
 * @id LogReader._onClickCollapseBtn
 * @method _onClickCollapseBtn
 * @param v {HTMLEvent} The click event.
 * @param oSelf {Object} The LogReader instance
 * @private
 */

/**
 * Handles click events on the pause button.
 *
 * @id LogReader._onClickPauseBtn
 * @method _onClickPauseBtn
 * @param v {HTMLEvent} The click event.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * Handles click events on the clear button.
 *
 * @id LogReader._onClickClearBtn
 * @method _onClickClearBtn
 * @param v {HTMLEvent} The click event.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * Handles Logger's newLogEvent.
 *
 * @id LogReader._onNewLog
 * @method _onNewLog
 * @param sType {String} The event.
 * @param aArgs {Object[]} Data passed from event firer.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * Handles Logger's resetEvent.
 *
 * @id LogReader._onReset
 * @method _onReset
 * @param sType {String} The event.
 * @param aArgs {Object[]} Data passed from event firer.
 * @param oSelf {Object} The LogReader instance.
 * @private
 */

/**
 * The singleton Logger class provides core log management functionality. Saves
 * logs written through the global YAHOO.log function or written by a LogWriter
 * instance. Provides access to logs for reading by a LogReader instance or
 * native browser console such as the Firebug extension to Firefox or Safari's
 * JavaScript console through integration with the console.log() method.
 *
 * @id YAHOO.widget.Logger
 * @class Logger
 * @static
 */

/**
 * True if Logger is enabled, false otherwise.
 *
 * @id YAHOO.widget.Logger.loggerEnabled
 * @property loggerEnabled
 * @type Boolean
 * @static
 * @default true
 */

/**
 * Array of categories.
 *
 * @id YAHOO.widget.Logger.categories
 * @property categories
 * @type String[]
 * @static
 * @default ["info","warn","error","time","window"]
 */

/**
 * Array of sources.
 *
 * @id YAHOO.widget.Logger.sources
 * @property sources
 * @type String[]
 * @static
 * @default ["global"]
 */

/**
 * Upper limit on size of internal stack.
 *
 * @id YAHOO.widget.Logger.maxStackEntries
 * @property maxStackEntries
 * @type Number
 * @static
 * @default 2500
 */

/**
 * Internal property to track whether output to browser console is enabled.
 *
 * @id YAHOO.widget.Logger._browserConsoleEnabled
 * @property _browserConsoleEnabled
 * @type Boolean
 * @static
 * @default false
 * @private
 */

/**
 * Array to hold all log messages.
 *
 * @id YAHOO.widget.Logger._stack
 * @property _stack
 * @type Array
 * @static
 * @private
 */

/**
 * Static timestamp of Logger initialization.
 *
 * @id YAHOO.widget.Logger._startTime
 * @property _startTime
 * @type Date
 * @static
 * @private
 */

/**
 * Timestamp of last logged message.
 *
 * @id YAHOO.widget.Logger._lastTime
 * @property _lastTime
 * @type Date
 * @static
 * @private
 */

/**
 * Saves a log message to the stack and fires newLogEvent. If the log message is
 * assigned to an unknown category, creates a new category. If the log message is
 * from an unknown source, creates a new source.  If browser console is enabled,
 * outputs the log message to browser console.
 *
 * @id YAHOO.widget.Logger.log
 * @method log
 * @param sMsg {String} The log message.
 * @param sCategory {String} Category of log message, or null.
 * @param sSource {String} Source of LogWriter, or null if global.
 */

/**
 * Resets internal stack and startTime, enables Logger, and fires logResetEvent.
 *
 * @id YAHOO.widget.Logger.reset
 * @method reset
 */

/**
 * Public accessor to internal stack of log message objects.
 *
 * @id YAHOO.widget.Logger.getStack
 * @method getStack
 * @return {Object[]} Array of log message objects.
 */

/**
 * Public accessor to internal start time.
 *
 * @id YAHOO.widget.Logger.getStartTime
 * @method getStartTime
 * @return {Date} Internal date of when Logger singleton was initialized.
 */

/**
 * Disables output to the browser's global console.log() function, which is used
 * by the Firebug extension to Firefox as well as Safari.
 *
 * @id YAHOO.widget.Logger.disableBrowserConsole
 * @method disableBrowserConsole
 */

/**
 * Enables output to the browser's global console.log() function, which is used
 * by the Firebug extension to Firefox as well as Safari.
 *
 * @id YAHOO.widget.Logger.enableBrowserConsole
 * @method enableBrowserConsole
 */

/**
 * Surpresses native JavaScript errors and outputs to console. By default,
 * Logger does not handle JavaScript window error events.
 * NB: Not all browsers support the window.onerror event.
 *
 * @id YAHOO.widget.Logger.handleWindowErrors
 * @method handleWindowErrors
 */

/**
 * Unsurpresses native JavaScript errors. By default,
 * Logger does not handle JavaScript window error events.
 * NB: Not all browsers support the window.onerror event.
 *
 * @id YAHOO.widget.Logger.unhandleWindowErrors
 * @method unhandleWindowErrors
 */

/**
 * Fired when a new category has been created.
 *
 * @id YAHOO.widget.Logger.categoryCreateEvent
 * @event categoryCreateEvent
 * @param sCategory {String} Category name.
 */

/**
 * Fired when a new source has been named.
 *
 * @id YAHOO.widget.Logger.sourceCreateEvent
 * @event sourceCreateEvent
 * @param sSource {String} Source name.
 */

/**
 * Fired when a new log message has been created.
 *
 * @id YAHOO.widget.Logger.newLogEvent
 * @event newLogEvent
 * @param sMsg {String} Log message.
 */

/**
 * Fired when the Logger has been reset has been created.
 *
 * @id YAHOO.widget.Logger.logResetEvent
 * @event logResetEvent
 */

/**
 * Creates a new category of log messages and fires categoryCreateEvent.
 *
 * @id YAHOO.widget.Logger._createNewCategory
 * @method _createNewCategory
 * @param sCategory {String} Category name.
 * @private
 */

/**
 * Checks to see if a category has already been created.
 *
 * @id YAHOO.widget.Logger._isNewCategory
 * @method _isNewCategory
 * @param sCategory {String} Category name.
 * @return {Boolean} Returns true if category is unknown, else returns false.
 * @private
 */

/**
 * Creates a new source of log messages and fires sourceCreateEvent.
 *
 * @id YAHOO.widget.Logger._createNewSource
 * @method _createNewSource
 * @param sSource {String} Source name.
 * @private
 */

/**
 * Checks to see if a source already exists.
 *
 * @id YAHOO.widget.Logger._isNewSource
 * @method _isNewSource
 * @param sSource {String} Source name.
 * @return {Boolean} Returns true if source is unknown, else returns false.
 * @private
 */

/**
 * Outputs a log message to global console.log() function.
 *
 * @id YAHOO.widget.Logger._printToBrowserConsole
 * @method _printToBrowserConsole
 * @param oEntry {Object} Log entry object.
 * @private
 */

/**
 * Handles logging of messages due to window error events.
 *
 * @id YAHOO.widget.Logger._onWindowError
 * @method _onWindowError
 * @param sMsg {String} The error message.
 * @param sUrl {String} URL of the error.
 * @param sLine {String} Line number of the error.
 * @private
 */

/**
 * Singleton that manages a collection of all menus and menu items.  Listens
 * for DOM events at the document level and dispatches the events to the
 * corresponding menu or menu item.
 *
 * @id YAHOO.widget.MenuManager
 * @namespace YAHOO.widget
 * @class MenuManager
 * @static
 */

/**
 * @id YAHOO.widget.MenuManager.getMenuRootElement
 * @method getMenuRootElement
 * @description Finds the root DIV node of a menu or the root LI node of
 * a menu item.
 * @private
 * @param {HTMLElement} p_oElement Object
 * specifying an HTML element.
 */

/**
 * @id YAHOO.widget.MenuManager.onDOMEvent
 * @method onDOMEvent
 * @description Generic, global event handler for all of a menu's
 * DOM-based events.  This listens for events against the document
 * object.  If the target of a given event is a member of a menu or
 * menu item's DOM, the instance's corresponding Custom Event is fired.
 * @private
 * @param {Event} p_oEvent Object representing the DOM event object
 * passed back by the event utility (YAHOO.util.Event).
 */

/**
 * @id YAHOO.widget.MenuManager.onMenuDestroy
 * @method onMenuDestroy
 * @description "destroy" event handler for a menu.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 * @param {YAHOO.widget.Menu} p_oMenu The menu that fired the event.
 */

/**
 * @id YAHOO.widget.MenuManager.onMenuFocus
 * @method onMenuFocus
 * @description "focus" event handler for a MenuItem instance.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.MenuManager.onMenuBlur
 * @method onMenuBlur
 * @description "blur" event handler for a MenuItem instance.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.MenuManager.onMenuVisibleConfigChange
 * @method onMenuVisibleConfigChange
 * @description Event handler for when the "visible" configuration
 * property of a Menu instance changes.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.MenuManager.onItemDestroy
 * @method onItemDestroy
 * @description "destroy" event handler for a MenuItem instance.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.MenuManager.onItemAdded
 * @method onItemAdded
 * @description "itemadded" event handler for a Menu instance.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.MenuManager.addMenu
 * @method addMenu
 * @description Adds a menu to the collection of known menus.
 * @param {YAHOO.widget.Menu} p_oMenu Object specifying the Menu
 * instance to be added.
 */

/**
 * @id YAHOO.widget.MenuManager.removeMenu
 * @method removeMenu
 * @description Removes a menu from the collection of known menus.
 * @param {YAHOO.widget.Menu} p_oMenu Object specifying the Menu
 * instance to be removed.
 */

/**
 * @id YAHOO.widget.MenuManager.hideVisible
 * @method hideVisible
 * @description Hides all visible, dynamically positioned menus
 * (excluding instances of YAHOO.widget.MenuBar).
 */

/**
 * @id YAHOO.widget.MenuManager.getVisible
 * @method getVisible
 * @description Returns a collection of all visible menus registered
 * with the menu manger.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.MenuManager.getMenus
 * @method getMenus
 * @description Returns a collection of all menus registered with the
 * menu manger.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.MenuManager.getMenu
 * @method getMenu
 * @description Returns a menu with the specified id.
 * @param {String} p_sId String specifying the id of the
 * <code>&#60;div&#62;</code> element representing the menu to
 * be retrieved.
 * @return {YAHOO.widget.Menu}
 */

/**
 * @id YAHOO.widget.MenuManager.getMenuItem
 * @method getMenuItem
 * @description Returns a menu item with the specified id.
 * @param {String} p_sId String specifying the id of the
 * <code>&#60;li&#62;</code> element representing the menu item to
 * be retrieved.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.MenuManager.getMenuItemGroup
 * @method getMenuItemGroup
 * @description Returns an array of menu item instances whose
 * corresponding <code>&#60;li&#62;</code> elements are child
 * nodes of the <code>&#60;ul&#62;</code> element with the
 * specified id.
 * @param {String} p_sId String specifying the id of the
 * <code>&#60;ul&#62;</code> element representing the group of
 * menu items to be retrieved.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.MenuManager.getFocusedMenuItem
 * @method getFocusedMenuItem
 * @description Returns a reference to the menu item that currently
 * has focus.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.MenuManager.getFocusedMenu
 * @method getFocusedMenu
 * @description Returns a reference to the menu that currently
 * has focus.
 * @return {YAHOO.widget.Menu}
 */

/**
 * @id YAHOO.widget.MenuManager.toString
 * @method toString
 * @description Returns a string representing the menu manager.
 * @return {String}
 */

/**
 * The Menu class creates a container that holds a vertical list representing
 * a set of options or commands.  Menu is the base class for all
 * menu containers.
 * @id YAHOO.widget.Menu
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the menu.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;select&#62;</code> element to be used as the data source
 * for the menu.
 * @param {HTMLDivElement} p_oElement Object
 * specifying the <code>&#60;div&#62;</code> element of the menu.
 * @param {HTMLSelectElement} p_oElement
 * Object specifying the <code>&#60;select&#62;</code> element to be used as
 * the data source for the menu.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu. See configuration class documentation for
 * more details.
 * @namespace YAHOO.widget
 * @class Menu
 * @constructor
 * @extends YAHOO.widget.Overlay
 */

/**
 * @id YAHOO.widget.Menu.checkPosition
 * @method checkPosition
 * @description Checks to make sure that the value of the "position" property
 * is one of the supported strings. Returns true if the position is supported.
 * @private
 * @param {Object} p_sPosition String specifying the position of the menu.
 * @return {Boolean}
 */

/**
 * Constant representing the name of the Menu's events
 * @id YAHOO.widget.Menu.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the Menu's configuration properties
 * @id YAHOO.widget.Menu.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * @id YAHOO.widget.Menu.CSS_CLASS_NAME
 * @property CSS_CLASS_NAME
 * @description String representing the CSS class(es) to be applied to the
 * menu's <code>&#60;div&#62;</code> element.
 * @default "yuimenu"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Menu.ITEM_TYPE
 * @property ITEM_TYPE
 * @description Object representing the type of menu item to instantiate and
 * add when parsing the child nodes (either <code>&#60;li&#62;</code> element,
 * <code>&#60;optgroup&#62;</code> element or <code>&#60;option&#62;</code>)
 * of the menu's source HTML element.
 * @default YAHOO.widget.MenuItem
 * @final
 * @type YAHOO.widget.MenuItem
 */

/**
 * @id YAHOO.widget.Menu.GROUP_TITLE_TAG_NAME
 * @property GROUP_TITLE_TAG_NAME
 * @description String representing the tagname of the HTML element used to
 * title the menu's item groups.
 * @default H6
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.Menu.OFF_SCREEN_POSITION
 * @property OFF_SCREEN_POSITION
 * @description Array representing the default x and y position that a menu
 * should have when it is positioned outside the viewport by the
 * "poistionOffScreen" method.
 * @default [-10000, -10000]
 * @final
 * @type Array
 */

/**
 * @id YAHOO.widget.Menu._nHideDelayId
 * @property _nHideDelayId
 * @description Number representing the time-out setting used to cancel the
 * hiding of a menu.
 * @default null
 * @private
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu._nShowDelayId
 * @property _nShowDelayId
 * @description Number representing the time-out setting used to cancel the
 * showing of a menu.
 * @default null
 * @private
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu._nSubmenuHideDelayId
 * @property _nSubmenuHideDelayId
 * @description Number representing the time-out setting used to cancel the
 * hiding of a submenu.
 * @default null
 * @private
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu._nBodyScrollId
 * @property _nBodyScrollId
 * @description Number representing the time-out setting used to cancel the
 * scrolling of the menu's body element.
 * @default null
 * @private
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu._bHideDelayEventHandlersAssigned
 * @property _bHideDelayEventHandlersAssigned
 * @description Boolean indicating if the "mouseover" and "mouseout" event
 * handlers used for hiding the menu via a call to "window.setTimeout" have
 * already been assigned.
 * @default false
 * @private
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu._bHandledMouseOverEvent
 * @property _bHandledMouseOverEvent
 * @description Boolean indicating the current state of the menu's
 * "mouseover" event.
 * @default false
 * @private
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu._bHandledMouseOutEvent
 * @property _bHandledMouseOutEvent
 * @description Boolean indicating the current state of the menu's
 * "mouseout" event.
 * @default false
 * @private
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu._aGroupTitleElements
 * @property _aGroupTitleElements
 * @description Array of HTML element used to title groups of menu items.
 * @default []
 * @private
 * @type Array
 */

/**
 * @id YAHOO.widget.Menu._aItemGroups
 * @property _aItemGroups
 * @description Multi-dimensional Array representing the menu items as they
 * are grouped in the menu.
 * @default []
 * @private
 * @type Array
 */

/**
 * @id YAHOO.widget.Menu._aListElements
 * @property _aListElements
 * @description Array of <code>&#60;ul&#62;</code> elements, each of which is
 * the parent node for each item's <code>&#60;li&#62;</code> element.
 * @default []
 * @private
 * @type Array
 */

/**
 * @id YAHOO.widget.Menu._nCurrentMouseX
 * @property _nCurrentMouseX
 * @description The current x coordinate of the mouse inside the area of
 * the menu.
 * @default 0
 * @private
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu._bStopMouseEventHandlers
 * @property _bStopMouseEventHandlers
 * @description Stops "mouseover," "mouseout," and "mousemove" event handlers
 * from executing.
 * @default false
 * @private
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu._sClassName
 * @property _sClassName
 * @description The current value of the "classname" configuration attribute.
 * @default null
 * @private
 * @type String
 */

/**
 * @id YAHOO.widget.Menu.lazyLoad
 * @property lazyLoad
 * @description Boolean indicating if the menu's "lazy load" feature is
 * enabled.  If set to "true," initialization and rendering of the menu's
 * items will be deferred until the first time it is made visible.  This
 * property should be set via the constructor using the configuration
 * object literal.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu.itemData
 * @property itemData
 * @description Array of items to be added to the menu.  The array can contain
 * strings representing the text for each item to be created, object literals
 * representing the menu item configuration properties, or MenuItem instances.
 * This property should be set via the constructor using the configuration
 * object literal.
 * @default null
 * @type Array
 */

/**
 * @id YAHOO.widget.Menu.activeItem
 * @property activeItem
 * @description Object reference to the item in the menu that has is selected.
 * @default null
 * @type YAHOO.widget.MenuItem
 */

/**
 * @id YAHOO.widget.Menu.parent
 * @property parent
 * @description Object reference to the menu's parent menu or menu item.
 * This property can be set via the constructor using the configuration
 * object literal.
 * @default null
 * @type YAHOO.widget.MenuItem
 */

/**
 * @id YAHOO.widget.Menu.srcElement
 * @property srcElement
 * @description Object reference to the HTML element (either
 * <code>&#60;select&#62;</code> or <code>&#60;div&#62;</code>) used to
 * create the menu.
 * @default null
 * @type HTMLSelectElement|HTMLDivElement
 */

/**
 * @id YAHOO.widget.Menu.mouseOverEvent
 * @event mouseOverEvent
 * @description Fires when the mouse has entered the menu.  Passes back
 * the DOM Event object as an argument.
 */

/**
 * @id YAHOO.widget.Menu.mouseOutEvent
 * @event mouseOutEvent
 * @description Fires when the mouse has left the menu.  Passes back the DOM
 * Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.mouseDownEvent
 * @event mouseDownEvent
 * @description Fires when the user mouses down on the menu.  Passes back the
 * DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.mouseUpEvent
 * @event mouseUpEvent
 * @description Fires when the user releases a mouse button while the mouse is
 * over the menu.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.clickEvent
 * @event clickEvent
 * @description Fires when the user clicks the on the menu.  Passes back the
 * DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.keyPressEvent
 * @event keyPressEvent
 * @description Fires when the user presses an alphanumeric key when one of the
 * menu's items has focus.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.keyDownEvent
 * @event keyDownEvent
 * @description Fires when the user presses a key when one of the menu's items
 * has focus.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.keyUpEvent
 * @event keyUpEvent
 * @description Fires when the user releases a key when one of the menu's items
 * has focus.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.itemAddedEvent
 * @event itemAddedEvent
 * @description Fires when an item is added to the menu.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.itemRemovedEvent
 * @event itemRemovedEvent
 * @description Fires when an item is removed to the menu.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.Menu.init
 * @method init
 * @description The Menu class's initialization method. This method is
 * automatically called by the constructor, and sets up all DOM references
 * for pre-existing markup, and creates required markup if it is not
 * already present.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the menu.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;select&#62;</code> element to be used as the data source
 * for the menu.
 * @param {HTMLDivElement} p_oElement Object
 * specifying the <code>&#60;div&#62;</code> element of the menu.
 * @param {HTMLSelectElement} p_oElement
 * Object specifying the <code>&#60;select&#62;</code> element to be used as
 * the data source for the menu.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu. See configuration class documentation for
 * more details.
 */

/**
 * @id YAHOO.widget.Menu._initSubTree
 * @method _initSubTree
 * @description Iterates the childNodes of the source element to find nodes
 * used to instantiate menu and menu items.
 * @private
 */

/**
 * @id YAHOO.widget.Menu._getFirstEnabledItem
 * @method _getFirstEnabledItem
 * @description Returns the first enabled item in the menu.
 * @return {YAHOO.widget.MenuItem}
 * @private
 */

/**
 * @id YAHOO.widget.Menu._addItemToGroup
 * @method _addItemToGroup
 * @description Adds a menu item to a group.
 * @private
 * @param {Number} p_nGroupIndex Number indicating the group to which the
 * item belongs.
 * @param {YAHOO.widget.MenuItem} p_oItem Object reference for the MenuItem
 * instance to be added to the menu.
 * @param {String} p_oItem String specifying the text of the item to be added
 * to the menu.
 * @param {Object} p_oItem Object literal containing a set of menu item
 * configuration properties.
 * @param {Number} p_nItemIndex Optional. Number indicating the index at
 * which the menu item should be added.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Menu._removeItemFromGroupByIndex
 * @method _removeItemFromGroupByIndex
 * @description Removes a menu item from a group by index.  Returns the menu
 * item that was removed.
 * @private
 * @param {Number} p_nGroupIndex Number indicating the group to which the menu
 * item belongs.
 * @param {Number} p_nItemIndex Number indicating the index of the menu item
 * to be removed.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Menu._removeItemFromGroupByValue
 * @method _removeItemFromGroupByValue
 * @description Removes a menu item from a group by reference.  Returns the
 * menu item that was removed.
 * @private
 * @param {Number} p_nGroupIndex Number indicating the group to which the
 * menu item belongs.
 * @param {YAHOO.widget.MenuItem} p_oItem Object reference for the MenuItem
 * instance to be removed.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Menu._updateItemProperties
 * @method _updateItemProperties
 * @description Updates the "index," "groupindex," and "className" properties
 * of the menu items in the specified group.
 * @private
 * @param {Number} p_nGroupIndex Number indicating the group of items to update.
 */

/**
 * @id YAHOO.widget.Menu._createItemGroup
 * @method _createItemGroup
 * @description Creates a new menu item group (array) and its associated
 * <code>&#60;ul&#62;</code> element. Returns an aray of menu item groups.
 * @private
 * @param {Number} p_nIndex Number indicating the group to create.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Menu._getItemGroup
 * @method _getItemGroup
 * @description Returns the menu item group at the specified index.
 * @private
 * @param {Number} p_nIndex Number indicating the index of the menu item group
 * to be retrieved.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Menu._configureSubmenu
 * @method _configureSubmenu
 * @description Subscribes the menu item's submenu to its parent menu's events.
 * @private
 * @param {YAHOO.widget.MenuItem} p_oItem Object reference for the MenuItem
 * instance with the submenu to be configured.
 */

/**
 * @id YAHOO.widget.Menu._subscribeToItemEvents
 * @method _subscribeToItemEvents
 * @description Subscribes a menu to a menu item's event.
 * @private
 * @param {YAHOO.widget.MenuItem} p_oItem Object reference for the MenuItem
 * instance whose events should be subscribed to.
 */

/**
 * @id YAHOO.widget.Menu._onVisibleChange
 * @method _onVisibleChange
 * @description Change event handler for the the menu's "visible" configuration
 * property.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._cancelHideDelay
 * @method _cancelHideDelay
 * @description Cancels the call to "hideMenu."
 * @private
 */

/**
 * @id YAHOO.widget.Menu._execHideDelay
 * @method _execHideDelay
 * @description Hides the menu after the number of milliseconds specified by
 * the "hidedelay" configuration property.
 * @private
 */

/**
 * @id YAHOO.widget.Menu._cancelShowDelay
 * @method _cancelShowDelay
 * @description Cancels the call to the "showMenu."
 * @private
 */

/**
 * @id YAHOO.widget.Menu._execShowDelay
 * @method _execShowDelay
 * @description Shows the menu after the number of milliseconds specified by
 * the "showdelay" configuration property have ellapsed.
 * @private
 * @param {YAHOO.widget.Menu} p_oMenu Object specifying the menu that should
 * be made visible.
 */

/**
 * @id YAHOO.widget.Menu._execSubmenuHideDelay
 * @method _execSubmenuHideDelay
 * @description Hides a submenu after the number of milliseconds specified by
 * the "submenuhidedelay" configuration property have ellapsed.
 * @private
 * @param {YAHOO.widget.Menu} p_oSubmenu Object specifying the submenu that
 * should be hidden.
 * @param {Number} p_nMouseX The x coordinate of the mouse when it left
 * the specified submenu's parent menu item.
 * @param {Number} p_nHideDelay The number of milliseconds that should ellapse
 * before the submenu is hidden.
 */

/**
 * @id YAHOO.widget.Menu._disableScrollHeader
 * @method _disableScrollHeader
 * @description Disables the header used for scrolling the body of the menu.
 * @protected
 */

/**
 * @id YAHOO.widget.Menu._disableScrollFooter
 * @method _disableScrollFooter
 * @description Disables the footer used for scrolling the body of the menu.
 * @protected
 */

/**
 * @id YAHOO.widget.Menu._enableScrollHeader
 * @method _enableScrollHeader
 * @description Enables the header used for scrolling the body of the menu.
 * @protected
 */

/**
 * @id YAHOO.widget.Menu._enableScrollFooter
 * @method _enableScrollFooter
 * @description Enables the footer used for scrolling the body of the menu.
 * @protected
 */

/**
 * @id YAHOO.widget.Menu._onMouseOver
 * @method _onMouseOver
 * @description "mouseover" event handler for the menu.
 * @protected
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onMouseOut
 * @method _onMouseOut
 * @description "mouseout" event handler for the menu.
 * @protected
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onMouseMove
 * @method _onMouseMove
 * @description "click" event handler for the menu.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object passed
 * back by the event utility (YAHOO.util.Event).
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu._onClick
 * @method _onClick
 * @description "click" event handler for the menu.
 * @protected
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onKeyDown
 * @method _onKeyDown
 * @description "keydown" event handler for the menu.
 * @protected
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onKeyPress
 * @method _onKeyPress
 * @description "keypress" event handler for a Menu instance.
 * @protected
 * @param {String} p_sType The name of the event that was fired.
 * @param {Array} p_aArgs Collection of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.Menu._onYChange
 * @method _onYChange
 * @description "y" event handler for a Menu instance.
 * @protected
 * @param {String} p_sType The name of the event that was fired.
 * @param {Array} p_aArgs Collection of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.Menu._onScrollTargetMouseOver
 * @method _onScrollTargetMouseOver
 * @description "mouseover" event handler for the menu's "header" and "footer"
 * elements.  Used to scroll the body of the menu up and down when the
 * menu's "maxheight" configuration property is set to a value greater than 0.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object passed
 * back by the event utility (YAHOO.util.Event).
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu._onScrollTargetMouseOut
 * @method _onScrollTargetMouseOut
 * @description "mouseout" event handler for the menu's "header" and "footer"
 * elements.  Used to stop scrolling the body of the menu up and down when the
 * menu's "maxheight" configuration property is set to a value greater than 0.
 * @protected
 * @param {Event} p_oEvent Object representing the DOM event object passed
 * back by the event utility (YAHOO.util.Event).
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu._onInit
 * @method _onInit
 * @description "init" event handler for the menu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onBeforeRender
 * @method _onBeforeRender
 * @description "beforerender" event handler for the menu.  Appends all of the
 * <code>&#60;ul&#62;</code>, <code>&#60;li&#62;</code> and their accompanying
 * title elements to the body element of the menu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onRender
 * @method _onRender
 * @description "render" event handler for the menu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onBeforeShow
 * @method _onBeforeShow
 * @description "beforeshow" event handler for the menu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onShow
 * @method _onShow
 * @description "show" event handler for the menu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onBeforeHide
 * @method _onBeforeHide
 * @description "beforehide" event handler for the menu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onParentMenuConfigChange
 * @method _onParentMenuConfigChange
 * @description "configchange" event handler for a submenu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oSubmenu Object representing the submenu that
 * subscribed to the event.
 */

/**
 * @id YAHOO.widget.Menu._onParentMenuRender
 * @method _onParentMenuRender
 * @description "render" event handler for a submenu.  Renders a
 * submenu in response to the firing of its parent's "render" event.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oSubmenu Object representing the submenu that
 * subscribed to the event.
 */

/**
 * @id YAHOO.widget.Menu._onSubmenuBeforeShow
 * @method _onSubmenuBeforeShow
 * @description "beforeshow" event handler for a submenu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onMenuItemFocus
 * @method _onMenuItemFocus
 * @description "focus" event handler for the menu's items.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onMenuItemBlur
 * @method _onMenuItemBlur
 * @description "blur" event handler for the menu's items.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu._onMenuItemDestroy
 * @method _onMenuItemDestroy
 * @description "destroy" event handler for the menu's items.
 * @private
 * @param {String} p_sType String representing the name of the event
 * that was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.Menu._onMenuItemConfigChange
 * @method _onMenuItemConfigChange
 * @description "configchange" event handler for the menu's items.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.Menu.enforceConstraints
 * @method enforceConstraints
 * @description The default event handler executed when the moveEvent is fired,
 * if the "constraintoviewport" configuration property is set to true.
 * @param {String} type The name of the event that was fired.
 * @param {Array} args Collection of arguments sent when the
 * event was fired.
 * @param {Array} obj Array containing the current Menu instance
 * and the item that fired the event.
 */

/**
 * @id YAHOO.widget.Menu.configVisible
 * @method configVisible
 * @description Event handler for when the "visible" configuration property
 * the menu changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu.configPosition
 * @method configPosition
 * @description Event handler for when the "position" configuration property
 * of the menu changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu.configIframe
 * @method configIframe
 * @description Event handler for when the "iframe" configuration property of
 * the menu changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu.configHideDelay
 * @method configHideDelay
 * @description Event handler for when the "hidedelay" configuration property
 * of the menu changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu.configContainer
 * @method configContainer
 * @description Event handler for when the "container" configuration property
 * of the menu changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oMenu Object representing the menu that
 * fired the event.
 */

/**
 * @id YAHOO.widget.Menu._setMaxHeight
 * @method _setMaxHeight
 * @description "renderEvent" handler used to defer the setting of the
 * "maxheight" configuration property until the menu is rendered in lazy
 * load scenarios.
 * @param {String} p_sType The name of the event that was fired.
 * @param {Array} p_aArgs Collection of arguments sent when the event
 * was fired.
 * @param {Number} p_nMaxHeight Number representing the value to set for the
 * "maxheight" configuration property.
 * @private
 */

/**
 * @id YAHOO.widget.Menu.configMaxHeight
 * @method configMaxHeight
 * @description Event handler for when the "maxheight" configuration property of
 * a Menu changes.
 * @param {String} p_sType The name of the event that was fired.
 * @param {Array} p_aArgs Collection of arguments sent when the event
 * was fired.
 * @param {YAHOO.widget.Menu} p_oMenu The Menu instance fired
 * the event.
 */

/**
 * @id YAHOO.widget.Menu.configClassName
 * @method configClassName
 * @description Event handler for when the "classname" configuration property of
 * a menu changes.
 * @param {String} p_sType The name of the event that was fired.
 * @param {Array} p_aArgs Collection of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oMenu The Menu instance fired the event.
 */

/**
 * @id YAHOO.widget.Menu._onItemAdded
 * @method _onItemAdded
 * @description "itemadded" event handler for a Menu instance.
 * @private
 * @param {String} p_sType The name of the event that was fired.
 * @param {Array} p_aArgs Collection of arguments sent when the event
 * was fired.
 */

/**
 * @id YAHOO.widget.Menu.configDisabled
 * @method configDisabled
 * @description Event handler for when the "disabled" configuration property of
 * a menu changes.
 * @param {String} p_sType The name of the event that was fired.
 * @param {Array} p_aArgs Collection of arguments sent when the event was fired.
 * @param {YAHOO.widget.Menu} p_oMenu The Menu instance fired the event.
 */

/**
 * @id YAHOO.widget.Menu.onRender
 * @method onRender
 * @description "render" event handler for the menu.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.Menu.initEvents
 * @method initEvents
 * @description Initializes the custom events for the menu.
 */

/**
 * @id YAHOO.widget.Menu.positionOffScreen
 * @method positionOffScreen
 * @description Positions the menu outside of the boundaries of the browser's
 * viewport.  Called automatically when a menu is hidden to ensure that
 * it doesn't force the browser to render uncessary scrollbars.
 */

/**
 * @id YAHOO.widget.Menu.getRoot
 * @method getRoot
 * @description Finds the menu's root menu.
 */

/**
 * @id YAHOO.widget.Menu.toString
 * @method toString
 * @description Returns a string representing the menu.
 * @return {String}
 */

/**
 * @id YAHOO.widget.Menu.setItemGroupTitle
 * @method setItemGroupTitle
 * @description Sets the title of a group of menu items.
 * @param {String} p_sGroupTitle String specifying the title of the group.
 * @param {Number} p_nGroupIndex Optional. Number specifying the group to which
 * the title belongs.
 */

/**
 * @id YAHOO.widget.Menu.addItem
 * @method addItem
 * @description Appends an item to the menu.
 * @param {YAHOO.widget.MenuItem} p_oItem Object reference for the MenuItem
 * instance to be added to the menu.
 * @param {String} p_oItem String specifying the text of the item to be added
 * to the menu.
 * @param {Object} p_oItem Object literal containing a set of menu item
 * configuration properties.
 * @param {Number} p_nGroupIndex Optional. Number indicating the group to
 * which the item belongs.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Menu.addItems
 * @method addItems
 * @description Adds an array of items to the menu.
 * @param {Array} p_aItems Array of items to be added to the menu.  The array
 * can contain strings specifying the text for each item to be created, object
 * literals specifying each of the menu item configuration properties,
 * or MenuItem instances.
 * @param {Number} p_nGroupIndex Optional. Number specifying the group to
 * which the items belongs.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Menu.insertItem
 * @method insertItem
 * @description Inserts an item into the menu at the specified index.
 * @param {YAHOO.widget.MenuItem} p_oItem Object reference for the MenuItem
 * instance to be added to the menu.
 * @param {String} p_oItem String specifying the text of the item to be added
 * to the menu.
 * @param {Object} p_oItem Object literal containing a set of menu item
 * configuration properties.
 * @param {Number} p_nItemIndex Number indicating the ordinal position at which
 * the item should be added.
 * @param {Number} p_nGroupIndex Optional. Number indicating the group to which
 * the item belongs.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Menu.removeItem
 * @method removeItem
 * @description Removes the specified item from the menu.
 * @param {YAHOO.widget.MenuItem} p_oObject Object reference for the MenuItem
 * instance to be removed from the menu.
 * @param {Number} p_oObject Number specifying the index of the item
 * to be removed.
 * @param {Number} p_nGroupIndex Optional. Number specifying the group to
 * which the item belongs.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Menu.getItems
 * @method getItems
 * @description Returns an array of all of the items in the menu.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Menu.getItemGroups
 * @method getItemGroups
 * @description Multi-dimensional Array representing the menu items as they
 * are grouped in the menu.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Menu.getItem
 * @method getItem
 * @description Returns the item at the specified index.
 * @param {Number} p_nItemIndex Number indicating the ordinal position of the
 * item to be retrieved.
 * @param {Number} p_nGroupIndex Optional. Number indicating the group to which
 * the item belongs.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.Menu.getSubmenus
 * @method getSubmenus
 * @description Returns an array of all of the submenus that are immediate
 * children of the menu.
 * @return {Array}
 */

/**
 * @id YAHOO.widget.Menu.clearContent
 * @method clearContent
 * @description Removes all of the content from the menu, including the menu
 * items, group titles, header and footer.
 */

/**
 * @id YAHOO.widget.Menu.destroy
 * @method destroy
 * @description Removes the menu's <code>&#60;div&#62;</code> element
 * (and accompanying child nodes) from the document.
 */

/**
 * @id YAHOO.widget.Menu.setInitialFocus
 * @method setInitialFocus
 * @description Sets focus to the menu's first enabled item.
 */

/**
 * @id YAHOO.widget.Menu.setInitialSelection
 * @method setInitialSelection
 * @description Sets the "selected" configuration property of the menu's first
 * enabled item to "true."
 */

/**
 * @id YAHOO.widget.Menu.clearActiveItem
 * @method clearActiveItem
 * @description Sets the "selected" configuration property of the menu's active
 * item to "false" and hides the item's submenu.
 * @param {Boolean} p_bBlur Boolean indicating if the menu's active item
 * should be blurred.
 */

/**
 * @id YAHOO.widget.Menu.focus
 * @method focus
 * @description Causes the menu to receive focus and fires the "focus" event.
 */

/**
 * @id YAHOO.widget.Menu.blur
 * @method blur
 * @description Causes the menu to lose focus and fires the "blur" event.
 */

/**
 * @id YAHOO.widget.Menu.hasFocus
 * @method hasFocus
 * @description Returns a boolean indicating whether or not the menu has focus.
 * @return {Boolean}
 */

/**
 * Adds the specified CustomEvent subscriber to the menu and each of
 * its submenus.
 * @id YAHOO.widget.Menu.subscribe
 * @method subscribe
 * @param p_type     {string}   the type, or name of the event
 * @param p_fn       {function} the function to exectute when the event fires
 * @param p_obj      {Object}   An object to be passed along when the event
 *                              fires
 * @param p_override {boolean}  If true, the obj passed in becomes the
 *                              execution scope of the listener
 */

/**
 * @id YAHOO.widget.Menu.initDefaultConfig
 * @description Initializes the class's configurable properties which can be
 * changed using the menu's Config object ("cfg").
 * @method initDefaultConfig
 */

/**
 * @id YAHOO.widget.Menu.effect
 * @config effect
 * @description Object or array of objects representing the ContainerEffect
 * classes that are active for animating the container.  When set this
 * property is automatically applied to all submenus.
 * @type Object
 * @default null
 */

/**
 * @id YAHOO.widget.Menu.x
 * @config x
 * @description Number representing the absolute x-coordinate position of
 * the Menu.  This property is only applied when the "position"
 * configuration property is set to dynamic.
 * @type Number
 * @default null
 */

/**
 * @id YAHOO.widget.Menu.y
 * @config y
 * @description Number representing the absolute y-coordinate position of
 * the Menu.  This property is only applied when the "position"
 * configuration property is set to dynamic.
 * @type Number
 * @default null
 */

/**
 * @id YAHOO.widget.Menu.xy
 * @description Array of the absolute x and y positions of the Menu.  This
 * property is only applied when the "position" configuration property is
 * set to dynamic.
 * @config xy
 * @type Number[]
 * @default null
 */

/**
 * @id YAHOO.widget.Menu.context
 * @config context
 * @description Array of context arguments for context-sensitive positioning.
 * The format is: [id or element, element corner, context corner].
 * For example, setting this property to ["img1", "tl", "bl"] would
 * align the Mnu's top left corner to the context element's
 * bottom left corner.  This property is only applied when the "position"
 * configuration property is set to dynamic.
 * @type Array
 * @default null
 */

/**
 * @id YAHOO.widget.Menu.fixedcenter
 * @config fixedcenter
 * @description Boolean indicating if the Menu should be anchored to the
 * center of the viewport.  This property is only applied when the
 * "position" configuration property is set to dynamic.
 * @type Boolean
 * @default false
 */

/**
 * @id YAHOO.widget.Menu.zindex
 * @config zindex
 * @description Number representing the CSS z-index of the Menu.  This
 * property is only applied when the "position" configuration property is
 * set to dynamic.
 * @type Number
 * @default null
 */

/**
 * @id YAHOO.widget.Menu.iframe
 * @config iframe
 * @description Boolean indicating whether or not the Menu should
 * have an IFRAME shim; used to prevent SELECT elements from
 * poking through an Overlay instance in IE6.  When set to "true",
 * the iframe shim is created when the Menu instance is intially
 * made visible.  This property is only applied when the "position"
 * configuration property is set to dynamic and is automatically applied
 * to all submenus.
 * @type Boolean
 * @default true for IE6 and below, false for all other browsers.
 */

/**
 * @id YAHOO.widget.Menu.visible
 * @config visible
 * @description Boolean indicating whether or not the menu is visible.  If
 * the menu's "position" configuration property is set to "dynamic" (the
 * default), this property toggles the menu's <code>&#60;div&#62;</code>
 * element's "visibility" style property between "visible" (true) or
 * "hidden" (false).  If the menu's "position" configuration property is
 * set to "static" this property toggles the menu's
 * <code>&#60;div&#62;</code> element's "display" style property
 * between "block" (true) or "none" (false).
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu.constraintoviewport
 * @config constraintoviewport
 * @description Boolean indicating if the menu will try to remain inside
 * the boundaries of the size of viewport.  This property is only applied
 * when the "position" configuration property is set to dynamic and is
 * automatically applied to all submenus.
 * @default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu.position
 * @config position
 * @description String indicating how a menu should be positioned on the
 * screen.  Possible values are "static" and "dynamic."  Static menus are
 * visible by default and reside in the normal flow of the document
 * (CSS position: static).  Dynamic menus are hidden by default, reside
 * out of the normal flow of the document (CSS position: absolute), and
 * can overlay other elements on the screen.
 * @default dynamic
 * @type String
 */

/**
 * @id YAHOO.widget.Menu.submenualignment
 * @config submenualignment
 * @description Array defining how submenus should be aligned to their
 * parent menu item. The format is: [itemCorner, submenuCorner]. By default
 * a submenu's top left corner is aligned to its parent menu item's top
 * right corner.
 * @default ["tl","tr"]
 * @type Array
 */

/**
 * @id YAHOO.widget.Menu.autosubmenudisplay
 * @config autosubmenudisplay
 * @description Boolean indicating if submenus are automatically made
 * visible when the user mouses over the menu's items.
 * @default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu.showdelay
 * @config showdelay
 * @description Number indicating the time (in milliseconds) that should
 * expire before a submenu is made visible when the user mouses over
 * the menu's items.  This property is only applied when the "position"
 * configuration property is set to dynamic and is automatically applied
 * to all submenus.
 * @default 250
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu.hidedelay
 * @config hidedelay
 * @description Number indicating the time (in milliseconds) that should
 * expire before the menu is hidden.  This property is only applied when
 * the "position" configuration property is set to dynamic and is
 * automatically applied to all submenus.
 * @default 0
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu.submenuhidedelay
 * @config submenuhidedelay
 * @description Number indicating the time (in milliseconds) that should
 * expire before a submenu is hidden when the user mouses out of a menu item
 * heading in the direction of a submenu.  The value must be greater than or
 * equal to the value specified for the "showdelay" configuration property.
 * This property is only applied when the "position" configuration property
 * is set to dynamic and is automatically applied to all submenus.
 * @default 250
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu.clicktohide
 * @config clicktohide
 * @description Boolean indicating if the menu will automatically be
 * hidden if the user clicks outside of it.  This property is only
 * applied when the "position" configuration property is set to dynamic
 * and is automatically applied to all submenus.
 * @default true
 * @type Boolean
 */

/**
 * @id YAHOO.widget.Menu.container
 * @config container
 * @description HTML element reference or string specifying the id
 * attribute of the HTML element that the menu's markup should be
 * rendered into.
 * @type HTMLElement|String
 * @default document.body
 */

/**
 * @id YAHOO.widget.Menu.scrollincrement
 * @config scrollincrement
 * @description Number used to control the scroll speed of a menu.  Used to
 * increment the "scrollTop" property of the menu's body by when a menu's
 * content is scrolling.  When set this property is automatically applied
 * to all submenus.
 * @default 1
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu.minscrollheight
 * @config minscrollheight
 * @description Number defining the minimum threshold for the "maxheight"
 * configuration property.  When set this property is automatically applied
 * to all submenus.
 * @default 90
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu.maxheight
 * @config maxheight
 * @description Number defining the maximum height (in pixels) for a menu's
 * body element (<code>&#60;div class="bd"&#60;</code>).  Once a menu's body
 * exceeds this height, the contents of the body are scrolled to maintain
 * this value.  This value cannot be set lower than the value of the
 * "minscrollheight" configuration property.
 * @default 0
 * @type Number
 */

/**
 * @id YAHOO.widget.Menu.classname
 * @config classname
 * @description String representing the CSS class to be applied to the
 * menu's root <code>&#60;div&#62;</code> element.  The specified class(es)
 * are appended in addition to the default class as specified by the menu's
 * CSS_CLASS_NAME constant. When set this property is automatically
 * applied to all submenus.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.Menu.disabled
 * @config disabled
 * @description Boolean indicating if the menu should be disabled.
 * Disabling a menu disables each of its items.  (Disabled menu items are
 * dimmed and will not respond to user input or fire events.)  Disabled
 * menus have a corresponding "disabled" CSS class applied to their root
 * <code>&#60;div&#62;</code> element.
 * @default false
 * @type Boolean
 */

/**
 * Creates an item for a menu.
 *
 * @id YAHOO.widget.MenuItem
 * @param {String} p_oObject String specifying the text of the menu item.
 * @param {HTMLLIElement} p_oObject Object specifying
 * the <code>&#60;li&#62;</code> element of the menu item.
 * @param {HTMLOptGroupElement} p_oObject Object
 * specifying the <code>&#60;optgroup&#62;</code> element of the menu item.
 * @param {HTMLOptionElement} p_oObject Object
 * specifying the <code>&#60;option&#62;</code> element of the menu item.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu item. See configuration class documentation
 * for more details.
 * @class MenuItem
 * @constructor
 */

/**
 * Constant representing the name of the MenuItem's events
 * @id YAHOO.widget.MenuItem.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the MenuItem's configuration properties
 * @id YAHOO.widget.MenuItem.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * @id YAHOO.widget.MenuItem.CSS_CLASS_NAME
 * @property CSS_CLASS_NAME
 * @description String representing the CSS class(es) to be applied to the
 * <code>&#60;li&#62;</code> element of the menu item.
 * @default "yuimenuitem"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.CSS_LABEL_CLASS_NAME
 * @property CSS_LABEL_CLASS_NAME
 * @description String representing the CSS class(es) to be applied to the
 * menu item's <code>&#60;a&#62;</code> element.
 * @default "yuimenuitemlabel"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.SUBMENU_TYPE
 * @property SUBMENU_TYPE
 * @description Object representing the type of menu to instantiate and
 * add when parsing the child nodes of the menu item's source HTML element.
 * @final
 * @type YAHOO.widget.Menu
 */

/**
 * @id YAHOO.widget.MenuItem._oAnchor
 * @property _oAnchor
 * @description Object reference to the menu item's
 * <code>&#60;a&#62;</code> element.
 * @default null
 * @private
 * @type HTMLAnchorElement
 */

/**
 * @id YAHOO.widget.MenuItem._oHelpTextEM
 * @property _oHelpTextEM
 * @description Object reference to the menu item's help text
 * <code>&#60;em&#62;</code> element.
 * @default null
 * @private
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.MenuItem._oSubmenu
 * @property _oSubmenu
 * @description Object reference to the menu item's submenu.
 * @default null
 * @private
 * @type YAHOO.widget.Menu
 */

/**
 * @id YAHOO.widget.MenuItem._oOnclickAttributeValue
 * @property _oOnclickAttributeValue
 * @description Object reference to the menu item's current value for the
 * "onclick" configuration attribute.
 * @default null
 * @private
 * @type Object
 */

/**
 * @id YAHOO.widget.MenuItem._sClassName
 * @property _sClassName
 * @description The current value of the "classname" configuration attribute.
 * @default null
 * @private
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.constructor
 * @property constructor
 * @description Object reference to the menu item's constructor function.
 * @default YAHOO.widget.MenuItem
 * @type YAHOO.widget.MenuItem
 */

/**
 * @id YAHOO.widget.MenuItem.index
 * @property index
 * @description Number indicating the ordinal position of the menu item in
 * its group.
 * @default null
 * @type Number
 */

/**
 * @id YAHOO.widget.MenuItem.groupIndex
 * @property groupIndex
 * @description Number indicating the index of the group to which the menu
 * item belongs.
 * @default null
 * @type Number
 */

/**
 * @id YAHOO.widget.MenuItem.parent
 * @property parent
 * @description Object reference to the menu item's parent menu.
 * @default null
 * @type YAHOO.widget.Menu
 */

/**
 * @id YAHOO.widget.MenuItem.element
 * @property element
 * @description Object reference to the menu item's
 * <code>&#60;li&#62;</code> element.
 * @default HTMLLIElement
 * @type HTMLLIElement
 */

/**
 * @id YAHOO.widget.MenuItem.srcElement
 * @property srcElement
 * @description Object reference to the HTML element (either
 * <code>&#60;li&#62;</code>, <code>&#60;optgroup&#62;</code> or
 * <code>&#60;option&#62;</code>) used create the menu item.
 * @default HTMLLIElement|HTMLOptGroupElement|HTMLOptionElement
 * @type HTMLLIElement|
 * HTMLOptGroupElement|HTMLOptionElement
 */

/**
 * @id YAHOO.widget.MenuItem.value
 * @property value
 * @description Object reference to the menu item's value.
 * @default null
 * @type Object
 */

/**
 * @id YAHOO.widget.MenuItem.browser
 * @property browser
 * @deprecated Use YAHOO.env.ua
 * @description String representing the browser.
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.id
 * @property id
 * @description Id of the menu item's root <code>&#60;li&#62;</code>
 * element.  This property should be set via the constructor using the
 * configuration object literal.  If an id is not specified, then one will
 * be created using the "generateId" method of the Dom utility.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.destroyEvent
 * @event destroyEvent
 * @description Fires when the menu item's <code>&#60;li&#62;</code>
 * element is removed from its parent <code>&#60;ul&#62;</code> element.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.mouseOverEvent
 * @event mouseOverEvent
 * @description Fires when the mouse has entered the menu item.  Passes
 * back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.mouseOutEvent
 * @event mouseOutEvent
 * @description Fires when the mouse has left the menu item.  Passes back
 * the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.mouseDownEvent
 * @event mouseDownEvent
 * @description Fires when the user mouses down on the menu item.  Passes
 * back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.mouseUpEvent
 * @event mouseUpEvent
 * @description Fires when the user releases a mouse button while the mouse
 * is over the menu item.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.clickEvent
 * @event clickEvent
 * @description Fires when the user clicks the on the menu item.  Passes
 * back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.keyPressEvent
 * @event keyPressEvent
 * @description Fires when the user presses an alphanumeric key when the
 * menu item has focus.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.keyDownEvent
 * @event keyDownEvent
 * @description Fires when the user presses a key when the menu item has
 * focus.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.keyUpEvent
 * @event keyUpEvent
 * @description Fires when the user releases a key when the menu item has
 * focus.  Passes back the DOM Event object as an argument.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.focusEvent
 * @event focusEvent
 * @description Fires when the menu item receives focus.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.blurEvent
 * @event blurEvent
 * @description Fires when the menu item loses the input focus.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.widget.MenuItem.init
 * @method init
 * @description The MenuItem class's initialization method. This method is
 * automatically called by the constructor, and sets up all DOM references
 * for pre-existing markup, and creates required markup if it is not
 * already present.
 * @param {String} p_oObject String specifying the text of the menu item.
 * @param {HTMLLIElement} p_oObject Object specifying
 * the <code>&#60;li&#62;</code> element of the menu item.
 * @param {HTMLOptGroupElement} p_oObject Object
 * specifying the <code>&#60;optgroup&#62;</code> element of the menu item.
 * @param {HTMLOptionElement} p_oObject Object
 * specifying the <code>&#60;option&#62;</code> element of the menu item.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu item. See configuration class documentation
 * for more details.
 */

/**
 * @id YAHOO.widget.MenuItem._createRootNodeStructure
 * @method _createRootNodeStructure
 * @description Creates the core DOM structure for the menu item.
 * @private
 */

/**
 * @id YAHOO.widget.MenuItem._initSubTree
 * @method _initSubTree
 * @description Iterates the source element's childNodes collection and uses
 * the child nodes to instantiate other menus.
 * @private
 */

/**
 * @id YAHOO.widget.MenuItem.configText
 * @method configText
 * @description Event handler for when the "text" configuration property of
 * the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configHelpText
 * @method configHelpText
 * @description Event handler for when the "helptext" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configURL
 * @method configURL
 * @description Event handler for when the "url" configuration property of
 * the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configTarget
 * @method configTarget
 * @description Event handler for when the "target" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configEmphasis
 * @method configEmphasis
 * @description Event handler for when the "emphasis" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configStrongEmphasis
 * @method configStrongEmphasis
 * @description Event handler for when the "strongemphasis" configuration
 * property of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configChecked
 * @method configChecked
 * @description Event handler for when the "checked" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configDisabled
 * @method configDisabled
 * @description Event handler for when the "disabled" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configSelected
 * @method configSelected
 * @description Event handler for when the "selected" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem._onSubmenuBeforeHide
 * @method _onSubmenuBeforeHide
 * @description "beforehide" Custom Event handler for a submenu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 */

/**
 * @id YAHOO.widget.MenuItem.configSubmenu
 * @method configSubmenu
 * @description Event handler for when the "submenu" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configOnClick
 * @method configOnClick
 * @description Event handler for when the "onclick" configuration property
 * of the menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.configClassName
 * @method configClassName
 * @description Event handler for when the "classname" configuration
 * property of a menu item changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuItem} p_oItem Object representing the menu item
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuItem.initDefaultConfig
 * @method initDefaultConfig
 * @description Initializes an item's configurable properties.
 */

/**
 * @id YAHOO.widget.MenuItem.text
 * @config text
 * @description String specifying the text label for the menu item.
 * When building a menu from existing HTML the value of this property
 * will be interpreted from the menu's markup.
 * @default ""
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.helptext
 * @config helptext
 * @description String specifying additional instructional text to
 * accompany the text for the menu item.
 * @deprecated Use "text" configuration property to add help text markup.
 * For example: <code>oMenuItem.cfg.setProperty("text", "Copy &#60;em
 * class=\"helptext\"&#62;Ctrl + C&#60;/em&#62;");</code>
 * @default null
 * @type String|
 * HTMLElement
 */

/**
 * @id YAHOO.widget.MenuItem.url
 * @config url
 * @description String specifying the URL for the menu item's anchor's
 * "href" attribute.  When building a menu from existing HTML the value
 * of this property will be interpreted from the menu's markup.
 * @default "#"
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.target
 * @config target
 * @description String specifying the value for the "target" attribute
 * of the menu item's anchor element. <strong>Specifying a target will
 * require the user to click directly on the menu item's anchor node in
 * order to cause the browser to navigate to the specified URL.</strong>
 * When building a menu from existing HTML the value of this property
 * will be interpreted from the menu's markup.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.emphasis
 * @config emphasis
 * @description Boolean indicating if the text of the menu item will be
 * rendered with emphasis.
 * @deprecated Use "text" configuration property to add emphasis.
 * For example: <code>oMenuItem.cfg.setProperty("text", "&#60;em&#62;Some
 * Text&#60;/em&#62;");</code>
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.MenuItem.strongemphasis
 * @config strongemphasis
 * @description Boolean indicating if the text of the menu item will be
 * rendered with strong emphasis.
 * @deprecated Use "text" configuration property to add strong emphasis.
 * For example: <code>oMenuItem.cfg.setProperty("text", "&#60;strong&#62;
 * Some Text&#60;/strong&#62;");</code>
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.MenuItem.checked
 * @config checked
 * @description Boolean indicating if the menu item should be rendered
 * with a checkmark.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.MenuItem.disabled
 * @config disabled
 * @description Boolean indicating if the menu item should be disabled.
 * (Disabled menu items are  dimmed and will not respond to user input
 * or fire events.)
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.MenuItem.selected
 * @config selected
 * @description Boolean indicating if the menu item should
 * be highlighted.
 * @default false
 * @type Boolean
 */

/**
 * @id YAHOO.widget.MenuItem.submenu
 * @config submenu
 * @description Object specifying the submenu to be appended to the
 * menu item.  The value can be one of the following: <ul><li>Object
 * specifying a Menu instance.</li><li>Object literal specifying the
 * menu to be created.  Format: <code>{ id: [menu id], itemdata:
 * [array of values for
 * items] }</code>.</li><li>String specifying the id attribute
 * of the <code>&#60;div&#62;</code> element of the menu.</li><li>
 * Object specifying the <code>&#60;div&#62;</code> element of the
 * menu.</li></ul>
 * @default null
 * @type Menu|String|Object|
 * HTMLElement
 */

/**
 * @id YAHOO.widget.MenuItem.onclick
 * @config onclick
 * @description Object literal representing the code to be executed when
 * the item is clicked.  Format:<br> <code> {<br>
 * <strong>fn:</strong> Function,   &#47;&#47; The handler to call when
 * the event fires.<br> <strong>obj:</strong> Object, &#47;&#47; An
 * object to  pass back to the handler.<br> <strong>scope:</strong>
 * Object &#47;&#47; The object to use for the scope of the handler.
 * <br> } </code>
 * @type Object
 * @default null
 */

/**
 * @id YAHOO.widget.MenuItem.classname
 * @config classname
 * @description CSS class to be applied to the menu item's root
 * <code>&#60;li&#62;</code> element.  The specified class(es) are
 * appended in addition to the default class as specified by the menu
 * item's CSS_CLASS_NAME constant.
 * @default null
 * @type String
 */

/**
 * @id YAHOO.widget.MenuItem.getNextEnabledSibling
 * @method getNextEnabledSibling
 * @description Finds the menu item's next enabled sibling.
 * @return YAHOO.widget.MenuItem
 */

/**
 * @id YAHOO.widget.MenuItem.getPreviousEnabledSibling
 * @method getPreviousEnabledSibling
 * @description Finds the menu item's previous enabled sibling.
 * @return {YAHOO.widget.MenuItem}
 */

/**
 * @id YAHOO.widget.MenuItem.focus
 * @method focus
 * @description Causes the menu item to receive the focus and fires the
 * focus event.
 */

/**
 * @id YAHOO.widget.MenuItem.blur
 * @method blur
 * @description Causes the menu item to lose focus and fires the
 * blur event.
 */

/**
 * @id YAHOO.widget.MenuItem.hasFocus
 * @method hasFocus
 * @description Returns a boolean indicating whether or not the menu item
 * has focus.
 * @return {Boolean}
 */

/**
 * @id YAHOO.widget.MenuItem.destroy
 * @method destroy
 * @description Removes the menu item's <code>&#60;li&#62;</code> element
 * from its parent <code>&#60;ul&#62;</code> element.
 */

/**
 * @id YAHOO.widget.MenuItem.toString
 * @method toString
 * @description Returns a string representing the menu item.
 * @return {String}
 */

/**
 * Creates a list of options or commands which are made visible in response to
 * an HTML element's "contextmenu" event ("mousedown" for Opera).
 *
 * @id YAHOO.widget.ContextMenu
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the context menu.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;select&#62;</code> element to be used as the data source for the
 * context menu.
 * @param {HTMLDivElement} p_oElement Object specifying the
 * <code>&#60;div&#62;</code> element of the context menu.
 * @param {HTMLSelectElement} p_oElement Object specifying
 * the <code>&#60;select&#62;</code> element to be used as the data source for
 * the context menu.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the context menu. See configuration class documentation
 * for more details.
 * @class ContextMenu
 * @constructor
 * @extends YAHOO.widget.Menu
 * @namespace YAHOO.widget
 */

/**
 * Constant representing the name of the ContextMenu's events
 * @id YAHOO.widget.ContextMenu.EVENT_TYPES
 * @property EVENT_TYPES
 * @private
 * @final
 * @type Object
 */

/**
 * Constant representing the ContextMenu's configuration properties
 * @id YAHOO.widget.ContextMenu.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * @id YAHOO.widget.ContextMenu.position
 * @method position
 * @description "beforeShow" event handler used to position the contextmenu.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {Array} p_aPos Array representing the xy position for the context menu.
 */

/**
 * @id YAHOO.widget.ContextMenu._oTrigger
 * @property _oTrigger
 * @description Object reference to the current value of the "trigger"
 * configuration property.
 * @default null
 * @private
 * @type String|HTMLElement|Array
 */

/**
 * @id YAHOO.widget.ContextMenu._bCancelled
 * @property _bCancelled
 * @description Boolean indicating if the display of the context menu should
 * be cancelled.
 * @default false
 * @private
 * @type Boolean
 */

/**
 * @id YAHOO.widget.ContextMenu.contextEventTarget
 * @property contextEventTarget
 * @description Object reference for the HTML element that was the target of the
 * "contextmenu" DOM event ("mousedown" for Opera) that triggered the display of
 * the context menu.
 * @default null
 * @type HTMLElement
 */

/**
 * @id YAHOO.widget.ContextMenu.triggerContextMenuEvent
 * @event triggerContextMenuEvent
 * @description Custom Event wrapper for the "contextmenu" DOM event
 * ("mousedown" for Opera) fired by the element(s) that trigger the display of
 * the context menu.
 */

/**
 * @id YAHOO.widget.ContextMenu.init
 * @method init
 * @description The ContextMenu class's initialization method. This method is
 * automatically called by the constructor, and sets up all DOM references for
 * pre-existing markup, and creates required markup if it is not already present.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the context menu.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;select&#62;</code> element to be used as the data source for
 * the context menu.
 * @param {HTMLDivElement} p_oElement Object specifying the
 * <code>&#60;div&#62;</code> element of the context menu.
 * @param {HTMLSelectElement} p_oElement Object specifying
 * the <code>&#60;select&#62;</code> element to be used as the data source for
 * the context menu.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the context menu. See configuration class documentation
 * for more details.
 */

/**
 * @id YAHOO.widget.ContextMenu.initEvents
 * @method initEvents
 * @description Initializes the custom events for the context menu.
 */

/**
 * @id YAHOO.widget.ContextMenu.cancel
 * @method cancel
 * @description Cancels the display of the context menu.
 */

/**
 * @id YAHOO.widget.ContextMenu._removeEventHandlers
 * @method _removeEventHandlers
 * @description Removes all of the DOM event handlers from the HTML element(s)
 * whose "context menu" event ("click" for Opera) trigger the display of
 * the context menu.
 * @private
 */

/**
 * @id YAHOO.widget.ContextMenu._onTriggerClick
 * @method _onTriggerClick
 * @description "click" event handler for the HTML element(s) identified as the
 * "trigger" for the context menu.  Used to cancel default behaviors in Opera.
 * @private
 * @param {Event} p_oEvent Object representing the DOM event object passed back
 * by the event utility (YAHOO.util.Event).
 * @param {YAHOO.widget.ContextMenu} p_oMenu Object representing the context
 * menu that is handling the event.
 */

/**
 * @id YAHOO.widget.ContextMenu._onTriggerContextMenu
 * @method _onTriggerContextMenu
 * @description "contextmenu" event handler ("mousedown" for Opera) for the HTML
 * element(s) that trigger the display of the context menu.
 * @private
 * @param {Event} p_oEvent Object representing the DOM event object passed back
 * by the event utility (YAHOO.util.Event).
 * @param {YAHOO.widget.ContextMenu} p_oMenu Object representing the context
 * menu that is handling the event.
 */

/**
 * @id YAHOO.widget.ContextMenu.toString
 * @method toString
 * @description Returns a string representing the context menu.
 * @return {String}
 */

/**
 * @id YAHOO.widget.ContextMenu.initDefaultConfig
 * @method initDefaultConfig
 * @description Initializes the class's configurable properties which can be
 * changed using the context menu's Config object ("cfg").
 */

/**
 * @id YAHOO.widget.ContextMenu.trigger
 * @config trigger
 * @description The HTML element(s) whose "contextmenu" event ("mousedown"
 * for Opera) trigger the display of the context menu.  Can be a string
 * representing the id attribute of the HTML element, an object reference
 * for the HTML element, or an array of strings or HTML element references.
 * @default null
 * @type String|HTMLElement|Array
 */

/**
 * @id YAHOO.widget.ContextMenu.destroy
 * @method destroy
 * @description Removes the context menu's <code>&#60;div&#62;</code> element
 * (and accompanying child nodes) from the document.
 */

/**
 * @id YAHOO.widget.ContextMenu.configTrigger
 * @method configTrigger
 * @description Event handler for when the value of the "trigger" configuration
 * property changes.
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.ContextMenu} p_oMenu Object representing the context
 * menu that fired the event.
 */

/**
 * Creates an item for a context menu.
 *
 * @id YAHOO.widget.ContextMenuItem
 * @param {String} p_oObject String specifying the text of the context menu item.
 * @param {HTMLLIElement} p_oObject Object specifying the
 * <code>&#60;li&#62;</code> element of the context menu item.
 * @param {HTMLOptGroupElement} p_oObject Object
 * specifying the <code>&#60;optgroup&#62;</code> element of the context
 * menu item.
 * @param {HTMLOptionElement} p_oObject Object specifying
 * the <code>&#60;option&#62;</code> element of the context menu item.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the context menu item. See configuration class
 * documentation for more details.
 * @class ContextMenuItem
 * @constructor
 * @extends YAHOO.widget.MenuItem
 * @deprecated As of version 2.4.0 items for YAHOO.widget.ContextMenu instances
 * are of type YAHOO.widget.MenuItem.
 */

/**
 * Horizontal collection of items, each of which can contain a submenu.
 *
 * @id YAHOO.widget.MenuBar
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the menu bar.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;select&#62;</code> element to be used as the data source for the
 * menu bar.
 * @param {HTMLDivElement} p_oElement Object specifying
 * the <code>&#60;div&#62;</code> element of the menu bar.
 * @param {HTMLSelectElement} p_oElement Object
 * specifying the <code>&#60;select&#62;</code> element to be used as the data
 * source for the menu bar.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu bar. See configuration class documentation for
 * more details.
 * @class MenuBar
 * @constructor
 * @extends YAHOO.widget.Menu
 * @namespace YAHOO.widget
 */

/**
 * @id YAHOO.widget.MenuBar.checkPosition
 * @method checkPosition
 * @description Checks to make sure that the value of the "position" property
 * is one of the supported strings. Returns true if the position is supported.
 * @private
 * @param {Object} p_sPosition String specifying the position of the menu.
 * @return {Boolean}
 */

/**
 * Constant representing the MenuBar's configuration properties
 * @id YAHOO.widget.MenuBar.DEFAULT_CONFIG
 * @property DEFAULT_CONFIG
 * @private
 * @final
 * @type Object
 */

/**
 * @id YAHOO.widget.MenuBar.init
 * @method init
 * @description The MenuBar class's initialization method. This method is
 * automatically called by the constructor, and sets up all DOM references for
 * pre-existing markup, and creates required markup if it is not already present.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;div&#62;</code> element of the menu bar.
 * @param {String} p_oElement String specifying the id attribute of the
 * <code>&#60;select&#62;</code> element to be used as the data source for the
 * menu bar.
 * @param {HTMLDivElement} p_oElement Object specifying
 * the <code>&#60;div&#62;</code> element of the menu bar.
 * @param {HTMLSelectElement} p_oElement Object
 * specifying the <code>&#60;select&#62;</code> element to be used as the data
 * source for the menu bar.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu bar. See configuration class documentation for
 * more details.
 */

/**
 * @id YAHOO.widget.MenuBar.CSS_CLASS_NAME
 * @property CSS_CLASS_NAME
 * @description String representing the CSS class(es) to be applied to the menu
 * bar's <code>&#60;div&#62;</code> element.
 * @default "yuimenubar"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.MenuBar._onKeyDown
 * @method _onKeyDown
 * @description "keydown" Custom Event handler for the menu bar.
 * @private
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuBar} p_oMenuBar Object representing the menu bar
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuBar._onClick
 * @method _onClick
 * @description "click" event handler for the menu bar.
 * @protected
 * @param {String} p_sType String representing the name of the event that
 * was fired.
 * @param {Array} p_aArgs Array of arguments sent when the event was fired.
 * @param {YAHOO.widget.MenuBar} p_oMenuBar Object representing the menu bar
 * that fired the event.
 */

/**
 * @id YAHOO.widget.MenuBar.toString
 * @method toString
 * @description Returns a string representing the menu bar.
 * @return {String}
 */

/**
 * @id YAHOO.widget.MenuBar.initDefaultConfig
 * @description Initializes the class's configurable properties which can be
 * changed using the menu bar's Config object ("cfg").
 * @method initDefaultConfig
 */

/**
 * @id YAHOO.widget.MenuBar.position
 * @config position
 * @description String indicating how a menu bar should be positioned on the
 * screen.  Possible values are "static" and "dynamic."  Static menu bars
 * are visible by default and reside in the normal flow of the document
 * (CSS position: static).  Dynamic menu bars are hidden by default, reside
 * out of the normal flow of the document (CSS position: absolute), and can
 * overlay other elements on the screen.
 * @default static
 * @type String
 */

/**
 * @id YAHOO.widget.MenuBar.submenualignment
 * @config submenualignment
 * @description Array defining how submenus should be aligned to their
 * parent menu bar item. The format is: [itemCorner, submenuCorner].
 * @default ["tl","bl"]
 * @type Array
 */

/**
 * @id YAHOO.widget.MenuBar.autosubmenudisplay
 * @config autosubmenudisplay
 * @description Boolean indicating if submenus are automatically made
 * visible when the user mouses over the menu bar's items.
 * @default false
 * @type Boolean
 */

/**
 * Creates an item for a menu bar.
 *
 * @id YAHOO.widget.MenuBarItem
 * @param {String} p_oObject String specifying the text of the menu bar item.
 * @param {HTMLLIElement} p_oObject Object specifying the
 * <code>&#60;li&#62;</code> element of the menu bar item.
 * @param {HTMLOptGroupElement} p_oObject Object
 * specifying the <code>&#60;optgroup&#62;</code> element of the menu bar item.
 * @param {HTMLOptionElement} p_oObject Object specifying
 * the <code>&#60;option&#62;</code> element of the menu bar item.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu bar item. See configuration class documentation
 * for more details.
 * @class MenuBarItem
 * @constructor
 * @extends YAHOO.widget.MenuItem
 */

/**
 * @id YAHOO.widget.MenuBarItem.init
 * @method init
 * @description The MenuBarItem class's initialization method. This method is
 * automatically called by the constructor, and sets up all DOM references for
 * pre-existing markup, and creates required markup if it is not already present.
 * @param {String} p_oObject String specifying the text of the menu bar item.
 * @param {HTMLLIElement} p_oObject Object specifying the
 * <code>&#60;li&#62;</code> element of the menu bar item.
 * @param {HTMLOptGroupElement} p_oObject Object
 * specifying the <code>&#60;optgroup&#62;</code> element of the menu bar item.
 * @param {HTMLOptionElement} p_oObject Object specifying
 * the <code>&#60;option&#62;</code> element of the menu bar item.
 * @param {Object} p_oConfig Optional. Object literal specifying the
 * configuration for the menu bar item. See configuration class documentation
 * for more details.
 */

/**
 * @id YAHOO.widget.MenuBarItem.CSS_CLASS_NAME
 * @property CSS_CLASS_NAME
 * @description String representing the CSS class(es) to be applied to the
 * <code>&#60;li&#62;</code> element of the menu bar item.
 * @default "yuimenubaritem"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.MenuBarItem.CSS_LABEL_CLASS_NAME
 * @property CSS_LABEL_CLASS_NAME
 * @description String representing the CSS class(es) to be applied to the
 * menu bar item's <code>&#60;a&#62;</code> element.
 * @default "yuimenubaritemlabel"
 * @final
 * @type String
 */

/**
 * @id YAHOO.widget.MenuBarItem.toString
 * @method toString
 * @description Returns a string representing the menu bar item.
 * @return {String}
 */

/**
 * Profiles functions in JavaScript.
 * @id YAHOO.tool.Profiler
 * @namespace YAHOO.tool
 * @class Profiler
 * @static
 */

/**
 * Container object on which to put the original unprofiled methods.
 * @id YAHOO.tool.Profiler._container
 * @type Object
 * @private
 * @static
 * @property _container
 */

/**
 * Call information for functions.
 * @id YAHOO.tool.Profiler._report
 * @type Object
 * @private
 * @static
 * @property _report
 */

/**
 * Returns the average amount of time (in milliseconds) that the function
 * with the given name takes to execute.
 * @id YAHOO.tool.Profiler.getAverage
 * @param {String} name The name of the function whose data should be returned.
 *      If an object type method, it should be 'constructor.prototype.methodName';
 *      a normal object method would just be 'object.methodName'.
 * @return {float} The average time it takes the function to execute.
 * @static
 * @method getAverage
 */

/**
 * Returns the number of times that the given function has been called.
 * @id YAHOO.tool.Profiler.getCallCount
 * @param {String} name The name of the function whose data should be returned.
 * @return {int} The number of times the function was called.
 * @static
 * @method getCallCount
 */

/**
 * Returns the maximum amount of time (in milliseconds) that the function
 * with the given name takes to execute.
 * @id YAHOO.tool.Profiler.getMax
 * @param {String} name The name of the function whose data should be returned.
 *      If an object type method, it should be 'constructor.prototype.methodName';
 *      a normal object method would just be 'object.methodName'.
 * @return {float} The maximum time it takes the function to execute.
 * @method getMax
 */

/**
 * Returns the minimum amount of time (in milliseconds) that the function
 * with the given name takes to execute.
 * @id YAHOO.tool.Profiler.getMin
 * @param {String} name The name of the function whose data should be returned.
 *      If an object type method, it should be 'constructor.prototype.methodName';
 *      a normal object method would just be 'object.methodName'.
 * @return {float} The minimum time it takes the function to execute.
 * @method getMin
 */

/**
 * Returns an object containing profiling data for a single function.
 * The object has an entry for min, max, avg, calls, and points).
 * @id YAHOO.tool.Profiler.getFunctionReport
 * @return {Object} An object containing profile data for a given function.
 * @static
 * @method getFunctionReport
 */

/**
 * Returns an object containing profiling data for all of the functions
 * that were profiled. The object has an entry for each function and
 * returns all information (min, max, average, calls, etc.) for each
 * function.
 * @id YAHOO.tool.Profiler.getFullReport
 * @return {Object} An object containing all profile data.
 * @static
 * @method getFullReport
 */

/**
 * Sets up a constructor for profiling, including all properties and methods on the prototype.
 * @id YAHOO.tool.Profiler.registerConstructor
 * @param {string} name The fully-qualified name of the function including namespace information.
 * @param {Object} owner (Optional) The object that owns the function (namespace or containing object).
 * @return {Void}
 * @static
 * @method registerConstructor
 */

/**
 * Sets up a function for profiling. It essentially overwrites the function with one
 * that has instrumentation data. This method also creates an entry for the function
 * in the profile report. The original function is stored on the _container object.
 * @id YAHOO.tool.Profiler.registerFunction
 * @param {String} name The full name of the function including namespacing. This
 *      is the name of the function that is stored in the report.
 * @param {Object} owner (Optional) The object that owns the function. If the function
 *      isn't global then this argument is required. This could be the namespace that
 *      the function belongs to, such as YAHOO.util.Dom, or the object on which it's
 *      a method.
 * @return {Void}
 * @method registerFunction
 */

/**
 * Sets up an object for profiling. It takes the object and looks for functions.
 * When a function is found, registerMethod() is called on it. If set to recrusive
 * mode, it will also setup objects found inside of this object for profiling,
 * using the same methodology.
 * @id YAHOO.tool.Profiler.registerObject
 * @param {String} name The name of the object to profile (shows up in report).
 * @param {Object} owner (Optional) The object represented by the name.
 * @param {Boolean} recurse (Optional) Determines if subobject methods are also profiled.
 * @return {Void}
 * @static
 * @method registerObject
 */

/**
 * Removes a constructor function from profiling. Reverses the registerConstructor() method.
 * @id YAHOO.tool.Profiler.unregisterFunction
 * @param {String} name The full name of the function including namespacing. This
 *      is the name of the function that is stored in the report.
 * @return {Void}
 * @method unregisterFunction
 */

/**
 * Removes function from profiling. Reverses the registerFunction() method.
 * @id YAHOO.tool.Profiler.unregisterFunction
 * @param {String} name The full name of the function including namespacing. This
 *      is the name of the function that is stored in the report.
 * @return {Void}
 * @method unregisterFunction
 */

/**
 * Unregisters an object for profiling. It takes the object and looks for functions.
 * When a function is found, unregisterMethod() is called on it. If set to recrusive
 * mode, it will also unregister objects found inside of this object,
 * using the same methodology.
 * @id YAHOO.tool.Profiler.unregisterObject
 * @param {String} name The name of the object to unregister.
 * @param {Boolean} recurse (Optional) Determines if subobject methods should also be
 *      unregistered.
 * @return {Void}
 * @static
 * @method unregisterObject
 */

/**
 * A widget to view YUI Profiler output.
 * @id YAHOO.widget.ProfilerViewer
 * @namespace YAHOO.widget
 * @class ProfilerViewer
 * @extends YAHOO.util.Element
 * @constructor
 * @param {HTMLElement | String | Object} el(optional) The html
 * element into which the ProfileViewer should be rendered.
 * An element will be created if none provided.
 * @param {Object} attr (optional) A key map of the ProfilerViewer's
 * initial attributes.  Ignored if first arg is an attributes object.
 */

/**
 * Classname for ProfilerViewer containing element.
 * @id YAHOO.widget.ProfilerViewer.CLASS
 * @static
 * @property CLASS
 * @type string
 * @public
 * @default "yui-pv"
 */

/**
 * Classname for ProfilerViewer button dashboard.
 * @id YAHOO.widget.ProfilerViewer.CLASS_DASHBOARD
 * @static
 * @property CLASS_DASHBOARD
 * @type string
 * @public
 * @default "yui-pv-dashboard"
 */

/**
 * Classname for the "refresh data" button.
 * @id YAHOO.widget.ProfilerViewer.CLASS_REFRESH
 * @static
 * @property CLASS_REFRESH
 * @type string
 * @public
 * @default "yui-pv-refresh"
 */

/**
 * Classname for busy indicator in the dashboard.
 * @id YAHOO.widget.ProfilerViewer.CLASS_BUSY
 * @static
 * @property CLASS_BUSY
 * @type string
 * @public
 * @default "yui-pv-busy"
 */

/**
 * Classname for element containing the chart and chart
 * legend elements.
 * @id YAHOO.widget.ProfilerViewer.CLASS_CHART_CONTAINER
 * @static
 * @property CLASS_CHART_CONTAINER
 * @type string
 * @public
 * @default "yui-pv-chartcontainer"
 */

/**
 * Classname for element containing the chart.
 * @id YAHOO.widget.ProfilerViewer.CLASS_CHART
 * @static
 * @property CLASS_CHART
 * @type string
 * @public
 * @default "yui-pv-chart"
 */

/**
 * Classname for element containing the chart's legend.
 * @id YAHOO.widget.ProfilerViewer.CLASS_CHART_LEGEND
 * @static
 * @property CLASS_CHART_LEGEND
 * @type string
 * @public
 * @default "yui-pv-chartlegend"
 */

/**
 * Classname for element containing the datatable.
 * @id YAHOO.widget.ProfilerViewer.CLASS_TABLE
 * @static
 * @property CLASS_TABLE
 * @type string
 * @public
 * @default "yui-pv-table"
 */

/**
 * Strings used in the UI.
 * @id YAHOO.widget.ProfilerViewer.STRINGS
 * @static
 * @property STRINGS
 * @object
 * @public
 * @default English language strings for UI.
 */

/**
 * Function used to format numbers in milliseconds
 * for chart; must be publicly accessible, per Charts spec.
 * @id YAHOO.widget.ProfilerViewer.timeAxisLabelFunction
 * @static
 * @property timeAxisLabelFunction
 * @type function
 * @private
 */

/**
 * Function used to format percent numbers for chart; must
 * be publicly accessible, per Charts spec.
 * @id YAHOO.widget.ProfilerViewer.percentAxisLabelFunction
 * @static
 * @property percentAxisLabelFunction
 * @type function
 * @private
 */

/**
 * Refreshes the data displayed in the ProfilerViewer. When called,
 * this will invoke a refresh of the DataTable and (if displayed)
 * the Chart.
 * @id YAHOO.widget.ProfilerViewer.refreshData
 * @method refreshData
 * @return void
 * @public
 */

/**
 * Returns the element containing the console's header.
 * @id YAHOO.widget.ProfilerViewer.getHeadEl
 * @method getHeadEl
 * @return HTMLElement
 * @public
 */

/**
 * Returns the element containing the console's body, including
 * the chart and the datatable..
 * @id YAHOO.widget.ProfilerViewer.getBodyEl
 * @method getBodyEl
 * @return HTMLElement
 * @public
 */

/**
 * Returns the element containing the console's chart.
 * @id YAHOO.widget.ProfilerViewer.getChartEl
 * @method getChartEl
 * @return HTMLElement
 * @public
 */

/**
 * Returns the element containing the console's dataTable.
 * @id YAHOO.widget.ProfilerViewer.getTableEl
 * @method getTableEl
 * @return HTMLElement
 * @public
 */

/**
 * Returns the element containing the console's DataTable
 * instance.
 * @id YAHOO.widget.ProfilerViewer.getDataTable
 * @method getDataTable
 * @return YAHOO.widget.DataTable
 * @public
 */

/**
 * Returns the element containing the console's Chart instance.
 * @id YAHOO.widget.ProfilerViewer.getChart
 * @method getChart
 * @return YAHOO.widget.BarChart
 * @public
 */

/**
 * Fired when a data refresh is requested. No arguments are passed
 * with this event.
 *
 * @id YAHOO.widget.ProfilerViewer.refreshDataEvent
 * @event refreshDataEvent
 */

/**
 * Fired when the viewer canvas first renders. No arguments are passed
 * with this event.
 *
 * @id YAHOO.widget.ProfilerViewer.renderEvent
 * @event renderEvent
 */

/**
 * If no element is passed in, create it as the first element
 * in the document.
 * @id YAHOO.widget.ProfilerViewer._createProfilerViewerElement
 * @method _createProfilerViewerElement
 * @return HTMLElement
 * @private
 */

/**
 * Provides a readable name for the ProfilerViewer instance.
 * @id YAHOO.widget.ProfilerViewer.toString
 * @method toString
 * @return String
 * @private
 */

/**
 * Toggles visibility of the viewer canvas.
 * @id YAHOO.widget.ProfilerViewer._toggleVisible
 * @method _toggleVisible
 * @return void
 * @private
 */

/**
 * Shows the viewer canvas.
 * @id YAHOO.widget.ProfilerViewer.show
 * @method show
 * @return void
 * @private
 */

/**
 * Hides the viewer canvas.
 * @id YAHOO.widget.ProfilerViewer.hide
 * @method hide
 * @return void
 * @private
 */

/**
 * Render the viewer canvas
 * @id YAHOO.widget.ProfilerViewer._render
 * @method _render
 * @return void
 * @private
 */

/**
 * Set up the DOM structure for the ProfilerViewer launcher.
 * @id YAHOO.widget.ProfilerViewer._initLauncherDOM
 * @method _initLauncherDOM
 * @private
 */

/**
 * Set up the DOM structure for the ProfilerViewer canvas,
 * including the holder for the DataTable.
 * @id YAHOO.widget.ProfilerViewer._initViewerDOM
 * @method _initViewerDOM
 * @private
 */

/**
 * Set up the DOM structure for the ProfilerViewer canvas.
 * @id YAHOO.widget.ProfilerViewer._initChartDOM
 * @method _initChartDOM
 * @private
 */

/**
 * Create anchor elements for use as buttons. Args: label
 * is text to appear on the face of the button, parentEl
 * is the el to which the anchor will be attached, position
 * is true for inserting as the first node and false for
 * inserting as the last node of the parentEl.
 * @id YAHOO.widget.ProfilerViewer._createButton
 * @method _createButton
 * @private
 */

/**
 * Set's console busy state.
 * @id YAHOO.widget.ProfilerViewer._setBusyState
 * @method _setBusyState
 * @private
 **/

/**
 * Generages a sorting function based on current sortedBy
 * values.
 * @id YAHOO.widget.ProfilerViewer._createProfilerViewerElement
 * @method _createProfilerViewerElement
 * @private
 **/

/**
 * Utility function for array sums.
 * @id YAHOO.widget.ProfilerViewer._arraySum
 * @method _arraySum
 * @private
 **/

/**
 * Retrieves data from Profiler, filtering and sorting as needed
 * based on current widget state.  Adds calculated percentage
 * column and function name to data returned by Profiler.
 * @id YAHOO.widget.ProfilerViewer._getProfilerData
 * @method _getProfilerData
 * @private
 **/

/**
 * Set up the DataTable.
 * @id YAHOO.widget.ProfilerViewer._initDataTable
 * @method _initDataTable
 * @private
 */

/**
 * Proxy the sort event in DataTable into the ProfilerViewer
 * attribute.
 * @id YAHOO.widget.ProfilerViewer._sortedByChange
 * @method _sortedByChange
 * @private
 **/

/**
 * Proxy the render event in DataTable into the ProfilerViewer
 * attribute.
 * @id YAHOO.widget.ProfilerViewer._dataTableRenderHandler
 * @method _dataTableRenderHandler
 * @private
 **/

/**
 * Event handler for clicks on the DataTable's sortable column
 * heads.
 * @id YAHOO.widget.ProfilerViewer._thClickHandler
 * @method _thClickHandler
 * @private
 **/

/**
 * Refresh DataTable, getting new data from Profiler.
 * @id YAHOO.widget.ProfilerViewer._refreshDataTable
 * @method _refreshDataTable
 * @private
 **/

/**
 * Refresh chart, getting new data from table.
 * @id YAHOO.widget.ProfilerViewer._refreshChart
 * @method _refreshChart
 * @private
 **/

/**
 * Get data for the Chart from DataTable recordset
 * @id YAHOO.widget.ProfilerViewer._getChartData
 * @method _getChartData
 * @private
 */

/**
 * Build series definition based on current configuration attributes.
 * @id YAHOO.widget.ProfilerViewer._getSeriesDef
 * @method _getSeriesDef
 * @private
 */

/**
 * Set up the Chart.
 * @id YAHOO.widget.ProfilerViewer._initChart
 * @method _initChart
 * @private
 */

/**
 * Set up the Chart's legend
 * @id YAHOO.widget.ProfilerViewer._drawChartLegend
 * @method _drawChartLegend
 * @private
 **/

/**
 * Resize the chart's canvas if based on number of records
 * returned from the chart's datasource.
 * @id YAHOO.widget.ProfilerViewer._sizeChartCanvas
 * @method _sizeChartCanvas
 * @private
 **/

/**
 * setAttributeConfigs TabView specific properties.
 * @id YAHOO.widget.ProfilerViewer.initAttributes
 * @method initAttributes
 * @param {Object} attr Hash of initial attributes
 * @method initAttributes
 * @private
 */

/**
 * The YUI Loader base path from which to pull YUI files needed
 * in the rendering of the ProfilerViewer canvas.  Passed directly
 * to YUI Loader.  Leave blank to draw files from
 * yui.yahooapis.com.
 * @id YAHOO.widget.ProfilerViewer.base
 * @attribute base
 * @type string
 * @default ""
 */

/**
 * The height of the DataTable.  The table will scroll
 * vertically if the content overflows the specified
 * height.
 * @id YAHOO.widget.ProfilerViewer.tableHeight
 * @attribute tableHeight
 * @type string
 * @default "15em"
 */

/**
 * The default column key to sort by.  Valid keys are: fn, calls,
 * avg, min, max, total.  Valid dir values are:
 * YAHOO.widget.DataTable.CLASS_ASC and
 * YAHOO.widget.DataTable.CLASS_DESC (or their
 * string equivalents).
 * @id YAHOO.widget.ProfilerViewer.sortedBy
 * @attribute sortedBy
 * @type string
 * @default {key:"total", dir:"yui-dt-desc"}
 */

/**
 * A filter function to use in selecting functions that will
 * appear in the ProfilerViewer report.  The function is passed
 * a function report object and should return a boolean indicating
 * whether that function should be included in the ProfilerViewer
 * display.  The argument is structured as follows:
 *
 * {
 *	 	fn: <str function name>,
 *		calls : <n number of calls>,
 *		avg : <n average call duration>,
 *		max: <n duration of longest call>,
 *		min: <n duration of shortest call>,
 *		total: <n total time of all calls>
 *		points :
 *	}
 *
 * For example, you would use the follwing filter function to
 * return only functions that have been called at least once:
 *
 * 	function(o) {
 *		return (o.calls > 0);
 *	}
 *
 * @id YAHOO.widget.ProfilerViewer.filter
 * @attribute filter
 * @type function
 * @default null
 */

/**
 * The path to the YUI Charts swf file; must be a full URI
 * or a path relative to the page being profiled. Changes at runtime
 * not supported; pass this value in at instantiation.
 * @id YAHOO.widget.ProfilerViewer.swfUrl
 * @attribute swfUrl
 * @type string
 * @default "http://yui.yahooapis.com/2.5.0/build/charts/assets/charts.swf"
 */

/**
 * The maximum number of functions to profile in the chart. The
 * greater the number of functions, the greater the height of the
 * chart canvas.
 * height.
 * @id YAHOO.widget.ProfilerViewer.maxChartFunctions
 * @attribute maxChartFunctions
 * @type int
 * @default 6
 */

/**
 * The style object that defines the chart's visual presentation.
 * Conforms to the style attribute passed to the Charts Control
 * constructor.  See Charts Control User's Guide for more information
 * on how to format this object.
 * @id YAHOO.widget.ProfilerViewer.chartStyle
 * @attribute chartStyle
 * @type obj
 * @default See JS source for default definitions.
 */

/**
 * The series definition information to use when charting
 * specific fields on the chart.  displayName, xField,
 * and style members are used to construct the series
 * definition; the "group" member is the array of fields
 * that should be charted when the table is sorted by a
 * given field.
 * @id YAHOO.widget.ProfilerViewer.chartSeriesDefinitions
 * @attribute chartSeriesDefinitions
 * @type obj
 * @default See JS source for full default definitions.
 */

/**
 * The default visibility setting for the viewer canvas. If true,
 * the viewer will load all necessary files and render itself
 * immediately upon instantiation; otherwise, the viewer will
 * load only minimal resources until the user toggles visibility
 * via the UI.
 * @id YAHOO.widget.ProfilerViewer.visible
 * @attribute visible
 * @type boolean
 * @default false
 */

/**
 * The default visibility setting for the chart.
 * @id YAHOO.widget.ProfilerViewer.showChart
 * @attribute showChart
 * @type boolean
 * @default true
 */

/**
 * @id YAHOO.util.Resize
 * @constructor
 * @class Resize
 * @extends YAHOO.util.Element
 * @description <p>Makes an element resizable</p>
 * @param {String/HTMLElement} el The element to make resizable.
 * @param {Object} attrs Object liternal containing configuration parameters.
 */

/**
 * @id YAHOO.util.Resize._instances
 * @private
 * @static
 * @property _instances
 * @description Internal hash table for all resize instances
 * @type Object
 */

/**
 * @id YAHOO.util.Resize.getResizeById
 * @static
 * @method getResizeById
 * @description Get's a resize object by the HTML id of the element associated with the Resize object.
 * @return {Object} The Resize Object
 */

/**
 * @id YAHOO.util.Resize.CSS_RESIZE
 * @private
 * @property CSS_RESIZE
 * @description Base CSS class name
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_DRAG
 * @private
 * @property CSS_DRAG
 * @description Class name added when dragging is enabled
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_HOVER
 * @private
 * @property CSS_HOVER
 * @description Class name used for hover only handles
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_PROXY
 * @private
 * @property CSS_PROXY
 * @description Class name given to the proxy element
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_WRAP
 * @private
 * @property CSS_WRAP
 * @description Class name given to the wrap element
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_KNOB
 * @private
 * @property CSS_KNOB
 * @description Class name used to make the knob style handles
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_HIDDEN
 * @private
 * @property CSS_HIDDEN
 * @description Class name given to the wrap element to make all handles hidden
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_HANDLE
 * @private
 * @property CSS_HANDLE
 * @description Class name given to all handles, used as a base for single handle names as well.. Handle "t" will get this.CSS_HANDLE + '-t' as well as this.CSS_HANDLE
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_STATUS
 * @private
 * @property CSS_STATUS
 * @description Class name given to the status element
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_GHOST
 * @private
 * @property CSS_GHOST
 * @description Class name given to the wrap element when the ghost property is active
 * @type String
 */

/**
 * @id YAHOO.util.Resize.CSS_RESIZING
 * @private
 * @property CSS_RESIZING
 * @description Class name given to the wrap element when a resize action is taking place.
 * @type String
 */

/**
 * @id YAHOO.util.Resize._resizeEvent
 * @private
 * @property _resizeEvent
 * @description The mouse event used to resize with
 * @type Event
 */

/**
 * @id YAHOO.util.Resize.dd
 * @private
 * @property dd
 * @description The YAHOO.util.DragDrop instance used if draggable is true
 * @type Object
 */

/**
 * @id YAHOO.util.Resize.browser
 * @private
 * @property browser
 * @description A copy of the YAHOO.env.ua property
 * @type Object
 */

/**
 * @id YAHOO.util.Resize._positioned
 * @private
 * @property _positioned
 * @description A flag to show if the element is absolutely positioned
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize._dds
 * @private
 * @property _dds
 * @description An Object containing references to all of the YAHOO.util.DragDrop instances used for the resize handles
 * @type Object
 */

/**
 * @id YAHOO.util.Resize._wrap
 * @private
 * @property _wrap
 * @description The HTML reference of the element wrapper
 * @type HTMLElement
 */

/**
 * @id YAHOO.util.Resize._proxy
 * @private
 * @property _proxy
 * @description The HTML reference of the element proxy
 * @type HTMLElement
 */

/**
 * @id YAHOO.util.Resize._handles
 * @private
 * @property _handles
 * @description An object containing references to all of the resize handles.
 * @type Object
 */

/**
 * @id YAHOO.util.Resize._currentHandle
 * @private
 * @property _currentHandle
 * @description The string identifier of the currently active handle. e.g. 'r', 'br', 'tl'
 * @type String
 */

/**
 * @id YAHOO.util.Resize._currentDD
 * @private
 * @property _currentDD
 * @description A link to the currently active DD object
 * @type Object
 */

/**
 * @id YAHOO.util.Resize._cache
 * @private
 * @property _cache
 * @description An lookup table containing key information for the element being resized. e.g. height, width, x position, y position, etc..
 * @type Object
 */

/**
 * @id YAHOO.util.Resize._active
 * @private
 * @property _active
 * @description Flag to show if the resize is active. Used for events.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize._createProxy
 * @private
 * @method _createProxy
 * @description Creates the proxy element if the proxy config is true
 */

/**
 * @id YAHOO.util.Resize._createWrap
 * @private
 * @method _createWrap
 * @description Creates the wrap element if the wrap config is true. It will auto wrap the following element types: img, textarea, input, iframe, select
 */

/**
 * @id YAHOO.util.Resize._setupDragDrop
 * @private
 * @method _setupDragDrop
 * @description Setup the YAHOO.util.DragDrop instance on the element
 */

/**
 * @id YAHOO.util.Resize._createHandles
 * @private
 * @method _createHandles
 * @description Creates the handles as specified in the config
 */

/**
 * @id YAHOO.util.Resize._ieSelectFix
 * @private
 * @method _ieSelectFix
 * @description The function we use as the onselectstart handler when we start a drag in Internet Explorer
 */

/**
 * @id YAHOO.util.Resize._ieSelectBack
 * @private
 * @property _ieSelectBack
 * @description We will hold a copy of the current "onselectstart" method on this property, and reset it after we are done using it.
 */

/**
 * @id YAHOO.util.Resize._setAutoRatio
 * @private
 * @method _setAutoRatio
 * @param {Event} ev A mouse event.
 * @description This method checks to see if the "autoRatio" config is set. If it is, we will check to see if the "Shift Key" is pressed. If so, we will set the config ratio to true.
 */

/**
 * @id YAHOO.util.Resize._handleMouseDown
 * @private
 * @method _handleMouseDown
 * @param {Event} ev A mouse event.
 * @description This method preps the autoRatio on MouseDown.
 */

/**
 * @id YAHOO.util.Resize._handleMouseOver
 * @private
 * @method _handleMouseOver
 * @param {Event} ev A mouse event.
 * @description Adds CSS class names to the handles
 */

/**
 * @id YAHOO.util.Resize._handleMouseOut
 * @private
 * @method _handleMouseOut
 * @param {Event} ev A mouse event.
 * @description Removes CSS class names to the handles
 */

/**
 * @id YAHOO.util.Resize._handleStartDrag
 * @private
 * @method _handleStartDrag
 * @param {Object} args The args passed from the CustomEvent.
 * @param {Object} dd The YAHOO.util.DragDrop object we are working with.
 * @description Resizes the proxy, sets up the YAHOO.util.DragDrop handlers, updates the status div and preps the cache
 */

/**
 * @id YAHOO.util.Resize._setCache
 * @private
 * @method _setCache
 * @description Sets up the this._cache hash table.
 */

/**
 * @id YAHOO.util.Resize._handleMouseUp
 * @private
 * @method _handleMouseUp
 * @param {Event} ev A mouse event.
 * @description Cleans up listeners, hides proxy element and removes class names.
 */

/**
 * @id YAHOO.util.Resize._setRatio
 * @private
 * @method _setRatio
 * @param {Number} h The height offset.
 * @param {Number} w The with offset.
 * @param {Number} t The top offset.
 * @param {Number} l The left offset.
 * @description Using the Height, Width, Top & Left, it recalcuates them based on the original element size.
 * @return {Array} The new Height, Width, Top & Left settings
 */

/**
 * @id YAHOO.util.Resize._updateStatus
 * @private
 * @method _updateStatus
 * @param {Number} h The new height setting.
 * @param {Number} w The new width setting.
 * @param {Number} t The new top setting.
 * @param {Number} l The new left setting.
 * @description Using the Height, Width, Top & Left, it updates the status element with the elements sizes.
 */

/**
 * @id YAHOO.util.Resize.reset
 * @method reset
 * @description Resets the element to is start state.
 * @return {YAHOO.util.Resize} The Resize instance
 */

/**
 * @id YAHOO.util.Resize.resize
 * @method resize
 * @param {Event} ev The mouse event.
 * @param {Number} h The new height setting.
 * @param {Number} w The new width setting.
 * @param {Number} t The new top setting.
 * @param {Number} l The new left setting.
 * @param {Boolean} force Resize the element (used for proxy resize).
 * @description Resizes the element, wrapper or proxy based on the data from the handlers.
 * @return {YAHOO.util.Resize} The Resize instance
 */

/**
 * @id YAHOO.util.Resize._handle_for_br
 * @private
 * @method _handle_for_br
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Bottom Right handle.
 */

/**
 * @id YAHOO.util.Resize._handle_for_bl
 * @private
 * @method _handle_for_bl
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Bottom Left handle.
 */

/**
 * @id YAHOO.util.Resize._handle_for_tl
 * @private
 * @method _handle_for_tl
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Top Left handle.
 */

/**
 * @id YAHOO.util.Resize._handle_for_tr
 * @private
 * @method _handle_for_tr
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Top Right handle.
 */

/**
 * @id YAHOO.util.Resize._handle_for_r
 * @private
 * @method _handle_for_r
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Right handle.
 */

/**
 * @id YAHOO.util.Resize._handle_for_l
 * @private
 * @method _handle_for_l
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Left handle.
 */

/**
 * @id YAHOO.util.Resize._handle_for_b
 * @private
 * @method _handle_for_b
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Bottom handle.
 */

/**
 * @id YAHOO.util.Resize._handle_for_t
 * @private
 * @method _handle_for_t
 * @param {Object} args The arguments from the CustomEvent.
 * @description Handles the sizes for the Top handle.
 */

/**
 * @id YAHOO.util.Resize._setWidth
 * @private
 * @method _setWidth
 * @param {Event} ev The mouse event.
 * @param {Boolean} flip Argument to determine the direction of the movement.
 * @description Calculates the width based on the mouse event.
 * @return {Number} The new value
 */

/**
 * @id YAHOO.util.Resize._checkWidth
 * @private
 * @method _checkWidth
 * @param {Number} w The width to check.
 * @description Checks the value passed against the maxWidth and minWidth.
 * @return {Number} the new value
 */

/**
 * @id YAHOO.util.Resize._checkHeight
 * @private
 * @method _checkHeight
 * @param {Number} h The height to check.
 * @description Checks the value passed against the maxHeight and minHeight.
 * @return {Number} The new value
 */

/**
 * @id YAHOO.util.Resize._setHeight
 * @private
 * @method _setHeight
 * @param {Event} ev The mouse event.
 * @param {Boolean} flip Argument to determine the direction of the movement.
 * @description Calculated the height based on the mouse event.
 * @return {Number} The new value
 */

/**
 * @id YAHOO.util.Resize._snapTick
 * @private
 * @method _snapTick
 * @param {Number} size The size to tick against.
 * @param {Number} pix The tick pixels.
 * @description Adjusts the number based on the ticks used.
 * @return {Number} the new snapped position
 */

/**
 * @id YAHOO.util.Resize.init
 * @private
 * @method init
 * @description The Resize class's initialization method
 */

/**
 * @id YAHOO.util.Resize.getProxyEl
 * @method getProxyEl
 * @description Get the HTML reference for the proxy, returns null if no proxy.
 * @return {HTMLElement} The proxy element
 */

/**
 * @id YAHOO.util.Resize.getWrapEl
 * @method getWrapEl
 * @description Get the HTML reference for the wrap element, returns the current element if not wrapped.
 * @return {HTMLElement} The wrap element
 */

/**
 * @id YAHOO.util.Resize.getStatusEl
 * @method getStatusEl
 * @description Get the HTML reference for the status element.
 * @return {HTMLElement} The status element
 */

/**
 * @id YAHOO.util.Resize.getActiveHandleEl
 * @method getActiveHandleEl
 * @description Get the HTML reference for the currently active resize handle.
 * @return {HTMLElement} The handle element that is active
 */

/**
 * @id YAHOO.util.Resize.isActive
 * @method isActive
 * @description Returns true or false if a resize operation is currently active on the element.
 * @return {Boolean}
 */

/**
 * @id YAHOO.util.Resize.initAttributes
 * @private
 * @method initAttributes
 * @description Initializes all of the configuration attributes used to create a resizable element.
 * @param {Object} attr Object literal specifying a set of
 * configuration attributes used to create the utility.
 */

/**
 * @id YAHOO.util.Resize.setSize
 * @attribute setSize
 * @description Set the size of the resized element, if set to false the element will not be auto resized,
 * the resize event will contain the dimensions so the end user can resize it on their own.
 * This setting will only work with proxy set to true and animate set to false.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.wrap
 * @attribute wrap
 * @description Should we wrap the element
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.handles
 * @attribute handles
 * @description The handles to use (any combination of): 't', 'b', 'r', 'l', 'bl', 'br', 'tl', 'tr'. Defaults to: ['r', 'b', 'br'].
 * Can use a shortcut of All. Note: 8 way resizing should be done on an element that is absolutely positioned.
 * @type Array
 */

/**
 * @id YAHOO.util.Resize.width
 * @attribute width
 * @description The width of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.height
 * @attribute height
 * @description The height of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.minWidth
 * @attribute minWidth
 * @description The minimum width of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.minHeight
 * @attribute minHeight
 * @description The minimum height of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.maxWidth
 * @attribute maxWidth
 * @description The maximum width of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.maxHeight
 * @attribute maxHeight
 * @description The maximum height of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.minY
 * @attribute minY
 * @description The minimum y coord of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.minX
 * @attribute minX
 * @description The minimum x coord of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.maxY
 * @attribute maxY
 * @description The max y coord of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.maxX
 * @attribute maxX
 * @description The max x coord of the element
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.animate
 * @attribute animate
 * @description Should be use animation to resize the element (can only be used if we use proxy).
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.animateEasing
 * @attribute animateEasing
 * @description The Easing to apply to the animation.
 * @type Object
 */

/**
 * @id YAHOO.util.Resize.animateDuration
 * @attribute animateDuration
 * @description The Duration to apply to the animation.
 * @type Number
 */

/**
 * @id YAHOO.util.Resize.proxy
 * @attribute proxy
 * @description Resize a proxy element instead of the real element.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.ratio
 * @attribute ratio
 * @description Maintain the element's ratio when resizing.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.ghost
 * @attribute ghost
 * @description Apply an opacity filter to the element being resized (only works with proxy).
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.draggable
 * @attribute draggable
 * @description A convienence method to make the element draggable
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.hover
 * @attribute hover
 * @description Only show the handles when they are being moused over.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.hiddenHandles
 * @attribute hiddenHandles
 * @description Don't show the handles, just use the cursor to the user.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.knobHandles
 * @attribute knobHandles
 * @description Use the smaller handles, instead if the full size handles.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.xTicks
 * @attribute xTicks
 * @description The number of x ticks to span the resize to.
 * @type Number or False
 */

/**
 * @id YAHOO.util.Resize.yTicks
 * @attribute yTicks
 * @description The number of y ticks to span the resize to.
 * @type Number or False
 */

/**
 * @id YAHOO.util.Resize.status
 * @attribute status
 * @description Show the status (new size) of the resize.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.autoRatio
 * @attribute autoRatio
 * @description Using the shift key during a resize will toggle the ratio config.
 * @type Boolean
 */

/**
 * @id YAHOO.util.Resize.destroy
 * @method destroy
 * @description Destroys the resize object and all of it's elements & listeners.
 */

/**
 * @id YAHOO.util.Resize.toString
 * @method toString
 * @description Returns a string representing the Resize Object.
 * @return {String}
 */

/**
 * @id YAHOO.util.Resize.dragEvent
 * @event dragEvent
 * @description Fires when the YAHOO.util.DragDrop dragEvent is fired for the config option draggable.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.util.Resize.startResize
 * @event startResize
 * @description Fires when when a resize action is started.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.util.Resize.resize
 * @event resize
 * @description Fires on every element resize (only fires once when used with proxy config setting).
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.util.Resize.beforeResize
 * @event beforeResize
 * @description Fires before every element resize after the size calculations, returning false will stop the resize.
 * @type YAHOO.util.CustomEvent
 */

/**
 * @id YAHOO.util.Resize.proxyResize
 * @event proxyResize
 * @description Fires on every proxy resize (only fires when used with proxy config setting).
 * @type YAHOO.util.CustomEvent
 */

/**
 * Provides helper methods for collecting and filtering DOM elements.
 * @id YAHOO.util.Selector
 * @namespace YAHOO.util
 * @class Selector
 * @static
 */

/**
 * Default document for use queries
 * @id YAHOO.util.Selector.document
 * @property document
 * @type object
 * @default window.document
 */

/**
 * Mapping of attributes to aliases, normally to work around HTMLAttributes
 * that conflict with JS reserved words.
 * @id YAHOO.util.Selector.attrAliases
 * @property attrAliases
 * @type object
 */

/**
 * Mapping of shorthand tokens to corresponding attribute selector
 * @id YAHOO.util.Selector.shorthand
 * @property shorthand
 * @type object
 */

/**
 * List of operators and corresponding boolean functions.
 * These functions are passed the attribute and the current node's value of the attribute.
 * @id YAHOO.util.Selector.operators
 * @property operators
 * @type object
 */

/**
 * List of pseudo-classes and corresponding boolean functions.
 * These functions are called with the current node, and any value that was parsed with the pseudo regex.
 * @id YAHOO.util.Selector.pseudos
 * @property pseudos
 * @type object
 */

/**
 * Test if the supplied node matches the supplied selector.
 * @id YAHOO.util.Selector.test
 * @method test
 *
 * @param {HTMLElement | String} node An id or node reference to the HTMLElement being tested.
 * @param {string} selector The CSS Selector to test the node against.
 * @return{boolean} Whether or not the node matches the selector.
 * @static

 */

/**
 * Filters a set of nodes based on a given CSS selector.
 * @id YAHOO.util.Selector.filter
 * @method filter
 *
 * @param {array}  A set of nodes/ids to filter.
 * @param {string} selector The selector used to test each node.
 * @return{array} An array of nodes from the supplied array that match the given selector.
 * @static
 */

/**
 * Retrieves a set of nodes based on a given CSS selector.
 * @id YAHOO.util.Selector.query
 * @method query
 *
 * @param {string} selector The CSS Selector to test the node against.
 * @param {HTMLElement | String} root optional An id or HTMLElement to start the query from. Defaults to Selector.document.
 * @param {Boolean} firstOnly optional Whether or not to return only the first match.
 * @return {Array} An array of nodes that match the given selector.
 * @static
 */

/**
 * A DragDrop implementation that can be used as a background for a
 * slider.  It takes a reference to the thumb instance
 * so it can delegate some of the events to it.  The goal is to make the
 * thumb jump to the location on the background when the background is
 * clicked.
 *
 * @id YAHOO.widget.Slider
 * @class Slider
 * @extends YAHOO.util.DragDrop
 * @uses YAHOO.util.EventProvider
 * @constructor
 * @param {String}      id     The id of the element linked to this instance
 * @param {String}      sGroup The group of related DragDrop items
 * @param {SliderThumb} oThumb The thumb for this slider
 * @param {String}      sType  The type of slider (horiz, vert, region)
 */

/**
 * Factory method for creating a horizontal slider
 * @id YAHOO.widget.Slider.YAHOO.widget.Slider.getHorizSlider
 * @method YAHOO.widget.Slider.getHorizSlider
 * @static
 * @param {String} sBGElId the id of the slider's background element
 * @param {String} sHandleElId the id of the thumb element
 * @param {int} iLeft the number of pixels the element can move left
 * @param {int} iRight the number of pixels the element can move right
 * @param {int} iTickSize optional parameter for specifying that the element
 * should move a certain number pixels at a time.
 * @return {Slider} a horizontal slider control
 */

/**
 * Factory method for creating a vertical slider
 * @id YAHOO.widget.Slider.YAHOO.widget.Slider.getVertSlider
 * @method YAHOO.widget.Slider.getVertSlider
 * @static
 * @param {String} sBGElId the id of the slider's background element
 * @param {String} sHandleElId the id of the thumb element
 * @param {int} iUp the number of pixels the element can move up
 * @param {int} iDown the number of pixels the element can move down
 * @param {int} iTickSize optional parameter for specifying that the element
 * should move a certain number pixels at a time.
 * @return {Slider} a vertical slider control
 */

/**
 * Factory method for creating a slider region like the one in the color
 * picker example
 * @id YAHOO.widget.Slider.YAHOO.widget.Slider.getSliderRegion
 * @method YAHOO.widget.Slider.getSliderRegion
 * @static
 * @param {String} sBGElId the id of the slider's background element
 * @param {String} sHandleElId the id of the thumb element
 * @param {int} iLeft the number of pixels the element can move left
 * @param {int} iRight the number of pixels the element can move right
 * @param {int} iUp the number of pixels the element can move up
 * @param {int} iDown the number of pixels the element can move down
 * @param {int} iTickSize optional parameter for specifying that the element
 * should move a certain number pixels at a time.
 * @return {Slider} a slider region control
 */

/**
 * By default, animation is available if the animation utility is detected.
 * @id YAHOO.widget.Slider.YAHOO.widget.Slider.ANIM_AVAIL
 * @property YAHOO.widget.Slider.ANIM_AVAIL
 * @static
 * @type boolean
 */

/**
 * Override the default setting of dragOnly to true.
 * @id YAHOO.widget.Slider.dragOnly
 * @property dragOnly
 * @type boolean
 * @default true
 */

/**
 * Initializes the slider.  Executed in the constructor
 * @id YAHOO.widget.Slider.initSlider
 * @method initSlider
 * @param {string} sType the type of slider (horiz, vert, region)
 */

/**
 * The type of the slider (horiz, vert, region)
 * @id YAHOO.widget.Slider.type
 * @property type
 * @type string
 */

/**
 * Event the fires when the value of the control changes.  If
 * the control is animated the event will fire every point
 * along the way.
 * @id YAHOO.widget.Slider.change
 * @event change
 * @param {int} newOffset|x the new offset for normal sliders, or the new
 *                          x offset for region sliders
 * @param {int} y the number of pixels the thumb has moved on the y axis
 *                (region sliders only)
 */

/**
 * Event that fires at the beginning of a slider thumb move.
 * @id YAHOO.widget.Slider.slideStart
 * @event slideStart
 */

/**
 * Event that fires at the end of a slider thumb move
 * @id YAHOO.widget.Slider.slideEnd
 * @event slideEnd
 */

/**
 * Overrides the isTarget property in YAHOO.util.DragDrop
 * @id YAHOO.widget.Slider.isTarget
 * @property isTarget
 * @private
 */

/**
 * Flag that determines if the thumb will animate when moved
 * @id YAHOO.widget.Slider.animate
 * @property animate
 * @type boolean
 */

/**
 * Set to false to disable a background click thumb move
 * @id YAHOO.widget.Slider.backgroundEnabled
 * @property backgroundEnabled
 * @type boolean
 */

/**
 * Adjustment factor for tick animation, the more ticks, the
 * faster the animation (by default)
 * @id YAHOO.widget.Slider.tickPause
 * @property tickPause
 * @type int
 */

/**
 * Enables the arrow, home and end keys, defaults to true.
 * @id YAHOO.widget.Slider.enableKeys
 * @property enableKeys
 * @type boolean
 */

/**
 * Specifies the number of pixels the arrow keys will move the slider.
 * Default is 20.
 * @id YAHOO.widget.Slider.keyIncrement
 * @property keyIncrement
 * @type int
 */

/**
 * moveComplete is set to true when the slider has moved to its final
 * destination.  For animated slider, this value can be checked in
 * the onChange handler to make it possible to execute logic only
 * when the move is complete rather than at all points along the way.
 * Deprecated because this flag is only useful when the background is
 * clicked and the slider is animated.  If the user drags the thumb,
 * the flag is updated when the drag is over ... the final onDrag event
 * fires before the mouseup the ends the drag, so the implementer will
 * never see it.
 *
 * @id YAHOO.widget.Slider.moveComplete
 * @property moveComplete
 * @type Boolean
 * @deprecated use the slideEnd event instead
 */

/**
 * If animation is configured, specifies the length of the animation
 * in seconds.
 * @id YAHOO.widget.Slider.animationDuration
 * @property animationDuration
 * @type int
 * @default 0.2
 */

/**
 * Constant for valueChangeSource, indicating that the user clicked or
 * dragged the slider to change the value.
 * @id YAHOO.widget.Slider.SOURCE_UI_EVENT
 * @property SOURCE_UI_EVENT
 * @final
 * @default 1
 */

/**
 * Constant for valueChangeSource, indicating that the value was altered
 * by a programmatic call to setValue/setRegionValue.
 * @id YAHOO.widget.Slider.SOURCE_SET_VALUE
 * @property SOURCE_SET_VALUE
 * @final
 * @default 2
 */

/**
 * When the slider value changes, this property is set to identify where
 * the update came from.  This will be either 1, meaning the slider was
 * clicked or dragged, or 2, meaning that it was set via a setValue() call.
 * This can be used within event handlers to apply some of the logic only
 * when dealing with one source or another.
 * @id YAHOO.widget.Slider.valueChangeSource
 * @property valueChangeSource
 * @type int
 * @since 2.3.0
 */

/**
 * Indicates whether or not events will be supressed for the current
 * slide operation
 * @id YAHOO.widget.Slider._silent
 * @property _silent
 * @type boolean
 * @private
 */

/**
 * Saved offset used to protect against NaN problems when slider is
 * set to display:none
 * @id YAHOO.widget.Slider.lastOffset
 * @property lastOffset
 * @type Number[]
 */

/**
 * Initializes the slider's thumb. Executed in the constructor.
 * @id YAHOO.widget.Slider.initThumb
 * @method initThumb
 * @param {YAHOO.widget.SliderThumb} t the slider thumb
 */

/**
 * A YAHOO.widget.SliderThumb instance that we will use to
 * reposition the thumb when the background is clicked
 * @id YAHOO.widget.Slider.thumb
 * @property thumb
 * @type YAHOO.widget.SliderThumb
 */

/**
 * Executed when the slider element is available
 * @id YAHOO.widget.Slider.onAvailable
 * @method onAvailable
 */

/**
 * Executed when a keypress event happens with the control focused.
 * Prevents the default behavior for navigation keys.  The actual
 * logic for moving the slider thumb in response to a key event
 * happens in handleKeyDown.
 * @id YAHOO.widget.Slider.handleKeyPress
 * @param {Event} e the keypress event
 * @method handleKeyPress
 */

/**
 * Executed when a keydown event happens with the control focused.
 * Updates the slider value and display when the keypress is an
 * arrow key, home, or end as long as enableKeys is set to true.
 * @id YAHOO.widget.Slider.handleKeyDown
 * @param {Event} e the keydown event
 * @method handleKeyDown
 */

/**
 * Initialization that sets up the value offsets once the elements are ready
 * @id YAHOO.widget.Slider.setStartSliderState
 * @method setStartSliderState
 */

/**
 * The basline position of the background element, used
 * to determine if the background has moved since the last
 * operation.
 * @id YAHOO.widget.Slider.baselinePos
 * @property baselinePos
 * @type Number[]
 */

/**
 * When the thumb is available, we cache the centerpoint of the element so
 * we can position the element correctly when the background is clicked
 * @id YAHOO.widget.Slider.setThumbCenterPoint
 * @method setThumbCenterPoint
 */

/**
 * The center of the slider element is stored so we can
 * place it in the correct position when the background is clicked.
 * @id YAHOO.widget.Slider.thumbCenterPoint
 * @property thumbCenterPoint
 * @type {"x": int, "y": int}
 */

/**
 * Locks the slider, overrides YAHOO.util.DragDrop
 * @id YAHOO.widget.Slider.lock
 * @method lock
 */

/**
 * Unlocks the slider, overrides YAHOO.util.DragDrop
 * @id YAHOO.widget.Slider.unlock
 * @method unlock
 */

/**
 * Handles mouseup event on the thumb
 * @id YAHOO.widget.Slider.thumbMouseUp
 * @method thumbMouseUp
 * @private
 */

/**
 * Returns a reference to this slider's thumb
 * @id YAHOO.widget.Slider.getThumb
 * @method getThumb
 * @return {SliderThumb} this slider's thumb
 */

/**
 * Try to focus the element when clicked so we can add
 * accessibility features
 * @id YAHOO.widget.Slider.focus
 * @method focus
 * @private
 */

/**
 * Event that fires when the value of the slider has changed
 * @id YAHOO.widget.Slider.onChange
 * @method onChange
 * @param {int} firstOffset the number of pixels the thumb has moved
 * from its start position. Normal horizontal and vertical sliders will only
 * have the firstOffset.  Regions will have both, the first is the horizontal
 * offset, the second the vertical.
 * @param {int} secondOffset the y offset for region sliders
 * @deprecated use instance.subscribe("change") instead
 */

/**
 * Event that fires when the at the beginning of the slider thumb move
 * @id YAHOO.widget.Slider.onSlideStart
 * @method onSlideStart
 * @deprecated use instance.subscribe("slideStart") instead
 */

/**
 * Event that fires at the end of a slider thumb move
 * @id YAHOO.widget.Slider.onSliderEnd
 * @method onSliderEnd
 * @deprecated use instance.subscribe("slideEnd") instead
 */

/**
 * Returns the slider's thumb offset from the start position
 * @id YAHOO.widget.Slider.getValue
 * @method getValue
 * @return {int} the current value
 */

/**
 * Returns the slider's thumb X offset from the start position
 * @id YAHOO.widget.Slider.getXValue
 * @method getXValue
 * @return {int} the current horizontal offset
 */

/**
 * Returns the slider's thumb Y offset from the start position
 * @id YAHOO.widget.Slider.getYValue
 * @method getYValue
 * @return {int} the current vertical offset
 */

/**
 * Internal handler for the slider thumb's onChange event
 * @id YAHOO.widget.Slider.handleThumbChange
 * @method handleThumbChange
 * @private
 */

/**
 * Provides a way to set the value of the slider in code.
 * @id YAHOO.widget.Slider.setValue
 * @method setValue
 * @param {int} newOffset the number of pixels the thumb should be
 * positioned away from the initial start point
 * @param {boolean} skipAnim set to true to disable the animation
 * for this move action (but not others).
 * @param {boolean} force ignore the locked setting and set value anyway
 * @param {boolean} silent when true, do not fire events
 * @return {boolean} true if the move was performed, false if it failed
 */

/**
 * Provides a way to set the value of the region slider in code.
 * @id YAHOO.widget.Slider.setRegionValue
 * @method setRegionValue
 * @param {int} newOffset the number of pixels the thumb should be
 * positioned away from the initial start point (x axis for region)
 * @param {int} newOffset2 the number of pixels the thumb should be
 * positioned away from the initial start point (y axis for region)
 * @param {boolean} skipAnim set to true to disable the animation
 * for this move action (but not others).
 * @param {boolean} force ignore the locked setting and set value anyway
 * @param {boolean} silent when true, do not fire events
 * @return {boolean} true if the move was performed, false if it failed
 */

/**
 * Checks the background position element position.  If it has moved from the
 * baseline position, the constraints for the thumb are reset
 * @id YAHOO.widget.Slider.verifyOffset
 * @param checkPos {boolean} check the position instead of using cached value
 * @method verifyOffset
 * @return {boolean} True if the offset is the same as the baseline.
 */

/**
 * Move the associated slider moved to a timeout to try to get around the
 * mousedown stealing moz does when I move the slider element between the
 * cursor and the background during the mouseup event
 * @id YAHOO.widget.Slider.moveThumb
 * @method moveThumb
 * @param {int} x the X coordinate of the click
 * @param {int} y the Y coordinate of the click
 * @param {boolean} skipAnim don't animate if the move happend onDrag
 * @param {boolean} midMove set to true if this is not terminating
 * the slider movement
 * @private
 */

/**
 * Move the slider one tick mark towards its final coordinate.  Used
 * for the animation when tick marks are defined
 * @id YAHOO.widget.Slider.moveOneTick
 * @method moveOneTick
 * @param {int[]} the destination coordinate
 * @private
 */

/**
 * Returns the next X tick value based on the current coord and the target coord.
 * @id YAHOO.widget.Slider._getNextX
 * @method _getNextX
 * @private
 */

/**
 * Returns the next Y tick value based on the current coord and the target coord.
 * @id YAHOO.widget.Slider._getNextY
 * @method _getNextY
 * @private
 */

/**
 * Resets the constraints before moving the thumb.
 * @id YAHOO.widget.Slider.b4MouseDown
 * @method b4MouseDown
 * @private
 */

/**
 * Handles the mousedown event for the slider background
 * @id YAHOO.widget.Slider.onMouseDown
 * @method onMouseDown
 * @private
 */

/**
 * Handles the onDrag event for the slider background
 * @id YAHOO.widget.Slider.onDrag
 * @method onDrag
 * @private
 */

/**
 * Fired when the slider movement ends
 * @id YAHOO.widget.Slider.endMove
 * @method endMove
 * @private
 */

/**
 * Fires the change event if the value has been changed.  Ignored if we are in
 * the middle of an animation as the event will fire when the animation is
 * complete
 * @id YAHOO.widget.Slider.fireEvents
 * @method fireEvents
 * @param {boolean} thumbEvent set to true if this event is fired from an event
 *                  that occurred on the thumb.  If it is, the state of the
 *                  thumb dd object should be correct.  Otherwise, the event
 *                  originated on the background, so the thumb state needs to
 *                  be refreshed before proceeding.
 * @private
 */

/**
 * Slider toString
 * @id YAHOO.widget.Slider.toString
 * @method toString
 * @return {string} string representation of the instance
 */

/**
 * A drag and drop implementation to be used as the thumb of a slider.
 * @id YAHOO.widget.SliderThumb
 * @class SliderThumb
 * @extends YAHOO.util.DD
 * @constructor
 * @param {String} id the id of the slider html element
 * @param {String} sGroup the group of related DragDrop items
 * @param {int} iLeft the number of pixels the element can move left
 * @param {int} iRight the number of pixels the element can move right
 * @param {int} iUp the number of pixels the element can move up
 * @param {int} iDown the number of pixels the element can move down
 * @param {int} iTickSize optional parameter for specifying that the element
 * should move a certain number pixels at a time.
 */

/**
 * The id of the thumbs parent HTML element (the slider background
 * element).
 * @id YAHOO.widget.SliderThumb.parentElId
 * @property parentElId
 * @type string
 */

/**
 * Overrides the isTarget property in YAHOO.util.DragDrop
 * @id YAHOO.widget.SliderThumb.isTarget
 * @property isTarget
 * @private
 */

/**
 * The tick size for this slider
 * @id YAHOO.widget.SliderThumb.tickSize
 * @property tickSize
 * @type int
 * @private
 */

/**
 * Informs the drag and drop util that the offsets should remain when
 * resetting the constraints.  This preserves the slider value when
 * the constraints are reset
 * @id YAHOO.widget.SliderThumb.maintainOffset
 * @property maintainOffset
 * @type boolean
 * @private
 */

/**
 * Turns off the autoscroll feature in drag and drop
 * @id YAHOO.widget.SliderThumb.scroll
 * @property scroll
 * @private
 */

/**
 * The (X and Y) difference between the thumb location and its parent
 * (the slider background) when the control is instantiated.
 * @id YAHOO.widget.SliderThumb.startOffset
 * @property startOffset
 * @type Number[]
 */

/**
 * Override the default setting of dragOnly to true.
 * @id YAHOO.widget.SliderThumb.dragOnly
 * @property dragOnly
 * @type boolean
 * @default true
 */

/**
 * Flag used to figure out if this is a horizontal or vertical slider
 * @id YAHOO.widget.SliderThumb._isHoriz
 * @property _isHoriz
 * @type boolean
 * @private
 */

/**
 * Cache the last value so we can check for change
 * @id YAHOO.widget.SliderThumb._prevVal
 * @property _prevVal
 * @type int
 * @private
 */

/**
 * The slider is _graduated if there is a tick interval defined
 * @id YAHOO.widget.SliderThumb._graduated
 * @property _graduated
 * @type boolean
 * @private
 */

/**
 * Returns the difference between the location of the thumb and its parent.
 * @id YAHOO.widget.SliderThumb.getOffsetFromParent
 * @method getOffsetFromParent
 * @param {Number[]} parentPos Optionally accepts the position of the parent
 * @type Number[]
 */

/**
 * Set up the slider, must be called in the constructor of all subclasses
 * @id YAHOO.widget.SliderThumb.initSlider
 * @method initSlider
 * @param {int} iLeft the number of pixels the element can move left
 * @param {int} iRight the number of pixels the element can move right
 * @param {int} iUp the number of pixels the element can move up
 * @param {int} iDown the number of pixels the element can move down
 * @param {int} iTickSize the width of the tick interval.
 */

/**
 * Clear's the slider's ticks
 * @id YAHOO.widget.SliderThumb.clearTicks
 * @method clearTicks
 */

/**
 * Gets the current offset from the element's start position in
 * pixels.
 * @id YAHOO.widget.SliderThumb.getValue
 * @method getValue
 * @return {int} the number of pixels (positive or negative) the
 * slider has moved from the start position.
 */

/**
 * Gets the current X offset from the element's start position in
 * pixels.
 * @id YAHOO.widget.SliderThumb.getXValue
 * @method getXValue
 * @return {int} the number of pixels (positive or negative) the
 * slider has moved horizontally from the start position.
 */

/**
 * Gets the current Y offset from the element's start position in
 * pixels.
 * @id YAHOO.widget.SliderThumb.getYValue
 * @method getYValue
 * @return {int} the number of pixels (positive or negative) the
 * slider has moved vertically from the start position.
 */

/**
 * Thumb toString
 * @id YAHOO.widget.SliderThumb.toString
 * @method toString
 * @return {string} string representation of the instance
 */

/**
 * The onchange event for the handle/thumb is delegated to the YAHOO.widget.Slider
 * instance it belongs to.
 * @id YAHOO.widget.SliderThumb.onChange
 * @method onChange
 * @private
 */

/**
 * A slider with two thumbs, one that represents the min value and
 * the other the max.  Actually a composition of two sliders, both with
 * the same background.  The constraints for each slider are adjusted
 * dynamically so that the min value of the max slider is equal or greater
 * to the current value of the min slider, and the max value of the min
 * slider is the current value of the max slider.
 * Constructor assumes both thumbs are positioned absolutely at the 0 mark on
 * the background.
 *
 * @id YAHOO.widget.DualSlider
 * @namespace YAHOO.widget
 * @class DualSlider
 * @uses YAHOO.util.EventProvider
 * @constructor
 * @param {Slider} minSlider The Slider instance used for the min value thumb
 * @param {Slider} maxSlider The Slider instance used for the max value thumb
 * @param {int}    range The number of pixels the thumbs may move within
 * @param {Array}  initVals (optional) [min,max] Initial thumb placement
 */

/**
 * A slider instance that keeps track of the lower value of the range.
 * <strong>read only</strong>
 * @id YAHOO.widget.DualSlider.minSlider
 * @property minSlider
 * @type Slider
 */

/**
 * A slider instance that keeps track of the upper value of the range.
 * <strong>read only</strong>
 * @id YAHOO.widget.DualSlider.maxSlider
 * @property maxSlider
 * @type Slider
 */

/**
 * The currently active slider (min or max). <strong>read only</strong>
 * @id YAHOO.widget.DualSlider.activeSlider
 * @property activeSlider
 * @type Slider
 */

/**
 * Is the DualSlider oriented horizontally or vertically?
 * <strong>read only</strong>
 * @id YAHOO.widget.DualSlider.isHoriz
 * @property isHoriz
 * @type boolean
 */

/**
 * Event that fires when the slider is finished setting up
 * @id YAHOO.widget.DualSlider.ready
 * @event ready
 * @param {DualSlider} dualslider the DualSlider instance
 */

/**
 * Event that fires when either the min or max value changes
 * @id YAHOO.widget.DualSlider.change
 * @event change
 * @param {DualSlider} dualslider the DualSlider instance
 */

/**
 * Event that fires when one of the thumbs begins to move
 * @id YAHOO.widget.DualSlider.slideStart
 * @event slideStart
 * @param {Slider} activeSlider the moving slider
 */

/**
 * Event that fires when one of the thumbs finishes moving
 * @id YAHOO.widget.DualSlider.slideEnd
 * @event slideEnd
 * @param {Slider} activeSlider the moving slider
 */

/**
 * The current value of the min thumb. <strong>read only</strong>.
 * @id YAHOO.widget.DualSlider.minVal
 * @property minVal
 * @type int
 */

/**
 * The current value of the max thumb. <strong>read only</strong>.
 * @id YAHOO.widget.DualSlider.maxVal
 * @property maxVal
 * @type int
 */

/**
 * Pixel distance to maintain between thumbs.
 * @id YAHOO.widget.DualSlider.minRange
 * @property minRange
 * @type int
 * @default 0
 */

/**
 * Executed when one of the sliders fires the slideStart event
 * @id YAHOO.widget.DualSlider._handleSlideStart
 * @method _handleSlideStart
 * @private
 */

/**
 * Executed when one of the sliders fires the slideEnd event
 * @id YAHOO.widget.DualSlider._handleSlideEnd
 * @method _handleSlideEnd
 * @private
 */

/**
 * Overrides the onDrag method for both sliders
 * @id YAHOO.widget.DualSlider._handleDrag
 * @method _handleDrag
 * @private
 */

/**
 * Executed when the min slider fires the change event
 * @id YAHOO.widget.DualSlider._handleMinChange
 * @method _handleMinChange
 * @private
 */

/**
 * Executed when the max slider fires the change event
 * @id YAHOO.widget.DualSlider._handleMaxChange
 * @method _handleMaxChange
 * @private
 */

/**
 * Sets the min and max thumbs to new values.
 * @id YAHOO.widget.DualSlider.setValues
 * @method setValues
 * @param min {int} Pixel offset to assign to the min thumb
 * @param max {int} Pixel offset to assign to the max thumb
 * @param skipAnim {boolean} (optional) Set to true to skip thumb animation.
 * Default false
 * @param force {boolean} (optional) ignore the locked setting and set
 * value anyway. Default false
 * @param silent {boolean} (optional) Set to true to skip firing change
 * events.  Default false
 */

/**
 * Set the min thumb position to a new value.
 * @id YAHOO.widget.DualSlider.setMinValue
 * @method setMinValue
 * @param min {int} Pixel offset for min thumb
 * @param skipAnim {boolean} (optional) Set to true to skip thumb animation.
 * Default false
 * @param force {boolean} (optional) ignore the locked setting and set
 * value anyway. Default false
 * @param silent {boolean} (optional) Set to true to skip firing change
 * events.  Default false
 */

/**
 * Set the max thumb position to a new value.
 * @id YAHOO.widget.DualSlider.setMaxValue
 * @method setMaxValue
 * @param max {int} Pixel offset for max thumb
 * @param skipAnim {boolean} (optional) Set to true to skip thumb animation.
 * Default false
 * @param force {boolean} (optional) ignore the locked setting and set
 * value anyway. Default false
 * @param silent {boolean} (optional) Set to true to skip firing change
 * events.  Default false
 */

/**
 * Executed when one of the sliders is moved
 * @id YAHOO.widget.DualSlider.updateValue
 * @method updateValue
 * @param silent {boolean} (optional) Set to true to skip firing change
 * events.  Default false
 * @private
 */

/**
 * A background click will move the slider thumb nearest to the click.
 * Override if you need different behavior.
 * @id YAHOO.widget.DualSlider.selectActiveSlider
 * @method selectActiveSlider
 * @param e {Event} the mousedown event
 * @private
 */

/**
 * Overrides the onMouseDown for both slider, only moving the active slider
 * @id YAHOO.widget.DualSlider.handleMouseDown
 * @method handleMouseDown
 * @private
 */

/**
 * Schedule an event callback that will execute once, then unsubscribe
 * itself.
 * @id YAHOO.widget.DualSlider._oneTimeCallback
 * @method _oneTimeCallback
 * @param o {EventProvider} Object to attach the event to
 * @param evt {string} Name of the event
 * @param fn {Function} function to execute once
 * @private
 */

/**
 * Clean up the slideEnd event subscribers array, since each one-time
 * callback will be replaced in the event's subscribers property with
 * null.  This will cause memory bloat and loss of performance.
 * @id YAHOO.widget.DualSlider._cleanEvent
 * @method _cleanEvent
 * @param o {EventProvider} object housing the CustomEvent
 * @param evt {string} name of the CustomEvent
 * @private
 */

/**
 * Factory method for creating a horizontal dual-thumb slider
 * @id YAHOO.widget.DualSlider.YAHOO.widget.Slider.getHorizDualSlider
 * @for YAHOO.widget.Slider
 * @method YAHOO.widget.Slider.getHorizDualSlider
 * @static
 * @param {String} bg the id of the slider's background element
 * @param {String} minthumb the id of the min thumb
 * @param {String} maxthumb the id of the thumb thumb
 * @param {int} range the number of pixels the thumbs can move within
 * @param {int} iTickSize (optional) the element should move this many pixels
 * at a time
 * @param {Array}  initVals (optional) [min,max] Initial thumb placement
 * @return {DualSlider} a horizontal dual-thumb slider control
 */

/**
 * Factory method for creating a vertical dual-thumb slider.
 * @id YAHOO.widget.DualSlider.YAHOO.widget.Slider.getVertDualSlider
 * @for YAHOO.widget.Slider
 * @method YAHOO.widget.Slider.getVertDualSlider
 * @static
 * @param {String} bg the id of the slider's background element
 * @param {String} minthumb the id of the min thumb
 * @param {String} maxthumb the id of the thumb thumb
 * @param {int} range the number of pixels the thumbs can move within
 * @param {int} iTickSize (optional) the element should move this many pixels
 * at a time
 * @param {Array}  initVals (optional) [min,max] Initial thumb placement
 * @return {DualSlider} a vertical dual-thumb slider control
 */

/**
 * A widget to control tabbed views.
 * @id YAHOO.widget.TabView
 * @namespace YAHOO.widget
 * @class TabView
 * @extends YAHOO.util.Element
 * @constructor
 * @param {HTMLElement | String | Object} el(optional) The html
 * element that represents the TabView, or the attribute object to use.
 * An element will be created if none provided.
 * @param {Object} attr (optional) A key map of the tabView's
 * initial attributes.  Ignored if first arg is attributes object.
 */

/**
 * The className to add when building from scratch.
 * @id YAHOO.widget.TabView.CLASSNAME
 * @property CLASSNAME
 * @default "navset"
 */

/**
 * The className of the HTMLElement containing the TabView's tab elements
 * to look for when building from existing markup, or to add when building
 * from scratch.
 * All childNodes of the tab container are treated as Tabs when building
 * from existing markup.
 * @id YAHOO.widget.TabView.TAB_PARENT_CLASSNAME
 * @property TAB_PARENT_CLASSNAME
 * @default "nav"
 */

/**
 * The className of the HTMLElement containing the TabView's label elements
 * to look for when building from existing markup, or to add when building
 * from scratch.
 * All childNodes of the content container are treated as content elements when
 * building from existing markup.
 * @id YAHOO.widget.TabView.CONTENT_PARENT_CLASSNAME
 * @property CONTENT_PARENT_CLASSNAME
 * @default "nav-content"
 */

/**
 * Adds a Tab to the TabView instance.
 * If no index is specified, the tab is added to the end of the tab list.
 * @id YAHOO.widget.TabView.addTab
 * @method addTab
 * @param {YAHOO.widget.Tab} tab A Tab instance to add.
 * @param {Integer} index The position to add the tab.
 * @return void
 */

/**
 * Routes childNode events.
 * @id YAHOO.widget.TabView.DOMEventHandler
 * @method DOMEventHandler
 * @param {event} e The Dom event that is being handled.
 * @return void
 */

/**
 * Returns the Tab instance at the specified index.
 * @id YAHOO.widget.TabView.getTab
 * @method getTab
 * @param {Integer} index The position of the Tab.
 * @return YAHOO.widget.Tab
 */

/**
 * Returns the index of given tab.
 * @id YAHOO.widget.TabView.getTabIndex
 * @method getTabIndex
 * @param {YAHOO.widget.Tab} tab The tab whose index will be returned.
 * @return int
 */

/**
 * Removes the specified Tab from the TabView.
 * @id YAHOO.widget.TabView.removeTab
 * @method removeTab
 * @param {YAHOO.widget.Tab} item The Tab instance to be removed.
 * @return void
 */

/**
 * Provides a readable name for the TabView instance.
 * @id YAHOO.widget.TabView.toString
 * @method toString
 * @return String
 */

/**
 * The transiton to use when switching between tabs.
 * @id YAHOO.widget.TabView.contentTransition
 * @method contentTransition
 */

/**
 * setAttributeConfigs TabView specific properties.
 * @id YAHOO.widget.TabView.initAttributes
 * @method initAttributes
 * @param {Object} attr Hash of initial attributes
 */

/**
 * The Tabs belonging to the TabView instance.
 * @id YAHOO.widget.TabView.tabs
 * @attribute tabs
 * @type Array
 */

/**
 * The container of the tabView's label elements.
 * @id YAHOO.widget.TabView._tabParent
 * @property _tabParent
 * @private
 * @type HTMLElement
 */

/**
 * The container of the tabView's content elements.
 * @id YAHOO.widget.TabView._contentParent
 * @property _contentParent
 * @type HTMLElement
 * @private
 */

/**
 * How the Tabs should be oriented relative to the TabView.
 * @id YAHOO.widget.TabView.orientation
 * @attribute orientation
 * @type String
 * @default "top"
 */

/**
 * The index of the tab currently active.
 * @id YAHOO.widget.TabView.activeIndex
 * @attribute activeIndex
 * @type Int
 */

/**
 * The tab currently active.
 * @id YAHOO.widget.TabView.activeTab
 * @attribute activeTab
 * @type YAHOO.widget.Tab
 */

/**
 * Creates Tab instances from a collection of HTMLElements.
 * @id YAHOO.widget.TabView.initTabs
 * @method initTabs
 * @private
 * @return void
 */

/**
 * A representation of a Tab's label and content.
 * @id YAHOO.widget.Tab
 * @namespace YAHOO.widget
 * @class Tab
 * @extends YAHOO.util.Element
 * @constructor
 * @param element {HTMLElement | String} (optional) The html element that
 * represents the TabView. An element will be created if none provided.
 * @param {Object} properties A key map of initial properties
 */

/**
 * The default tag name for a Tab's inner element.
 * @id YAHOO.widget.Tab.LABEL_INNER_TAGNAME
 * @property LABEL_INNER_TAGNAME
 * @type String
 * @default "em"
 */

/**
 * The class name applied to active tabs.
 * @id YAHOO.widget.Tab.ACTIVE_CLASSNAME
 * @property ACTIVE_CLASSNAME
 * @type String
 * @default "selected"
 */

/**
 * The title applied to active tabs.
 * @id YAHOO.widget.Tab.ACTIVE_TITLE
 * @property ACTIVE_TITLE
 * @type String
 * @default "active"
 */

/**
 * The class name applied to disabled tabs.
 * @id YAHOO.widget.Tab.DISABLED_CLASSNAME
 * @property DISABLED_CLASSNAME
 * @type String
 * @default "disabled"
 */

/**
 * The class name applied to dynamic tabs while loading.
 * @id YAHOO.widget.Tab.LOADING_CLASSNAME
 * @property LOADING_CLASSNAME
 * @type String
 * @default "disabled"
 */

/**
 * Provides a reference to the connection request object when data is
 * loaded dynamically.
 * @id YAHOO.widget.Tab.dataConnection
 * @property dataConnection
 * @type Object
 */

/**
 * Object containing success and failure callbacks for loading data.
 * @id YAHOO.widget.Tab.loadHandler
 * @property loadHandler
 * @type object
 */

/**
 * Provides a readable name for the tab.
 * @id YAHOO.widget.Tab.toString
 * @method toString
 * @return String
 */

/**
 * setAttributeConfigs TabView specific properties.
 * @id YAHOO.widget.Tab.initAttributes
 * @method initAttributes
 * @param {Object} attr Hash of initial attributes
 */

/**
 * The event that triggers the tab's activation.
 * @id YAHOO.widget.Tab.activationEvent
 * @attribute activationEvent
 * @type String
 */

/**
 * The element that contains the tab's label.
 * @id YAHOO.widget.Tab.labelEl
 * @attribute labelEl
 * @type HTMLElement
 */

/**
 * The tab's label text (or innerHTML).
 * @id YAHOO.widget.Tab.label
 * @attribute label
 * @type String
 */

/**
 * The HTMLElement that contains the tab's content.
 * @id YAHOO.widget.Tab.contentEl
 * @attribute contentEl
 * @type HTMLElement
 */

/**
 * The tab's content.
 * @id YAHOO.widget.Tab.content
 * @attribute content
 * @type String
 */

/**
 * The tab's data source, used for loading content dynamically.
 * @id YAHOO.widget.Tab.dataSrc
 * @attribute dataSrc
 * @type String
 */

/**
 * Whether or not content should be reloaded for every view.
 * @id YAHOO.widget.Tab.cacheData
 * @attribute cacheData
 * @type Boolean
 * @default false
 */

/**
 * The method to use for the data request.
 * @id YAHOO.widget.Tab.loadMethod
 * @attribute loadMethod
 * @type String
 * @default "GET"
 */

/**
 * Whether or not any data has been loaded from the server.
 * @id YAHOO.widget.Tab.dataLoaded
 * @attribute dataLoaded
 * @type Boolean
 */

/**
 * Number if milliseconds before aborting and calling failure handler.
 * @id YAHOO.widget.Tab.dataTimeout
 * @attribute dataTimeout
 * @type Number
 * @default null
 */

/**
 * Whether or not the tab is currently active.
 * If a dataSrc is set for the tab, the content will be loaded from
 * the given source.
 * @id YAHOO.widget.Tab.active
 * @attribute active
 * @type Boolean
 */

/**
 * Whether or not the tab is disabled.
 * @id YAHOO.widget.Tab.disabled
 * @attribute disabled
 * @type Boolean
 */

/**
 * The href of the tab's anchor element.
 * @id YAHOO.widget.Tab.href
 * @attribute href
 * @type String
 * @default '#'
 */

/**
 * The Whether or not the tab's content is visible.
 * @id YAHOO.widget.Tab.contentVisible
 * @attribute contentVisible
 * @type Boolean
 * @default false
 */

/**
 * Contains the tree view state data and the root node.
 *
 * @id YAHOO.widget.TreeView
 * @class TreeView
 * @uses YAHOO.util.EventProvider
 * @constructor
 * @param {string|HTMLElement} id The id of the element, or the element
 * itself that the tree will be inserted into.
 */

/**
 * The id of tree container element
 * @id YAHOO.widget.TreeView.id
 * @property id
 * @type String
 */

/**
 * The host element for this tree
 * @id YAHOO.widget.TreeView._el
 * @property _el
 * @private
 */

/**
 * Flat collection of all nodes in this tree.  This is a sparse
 * array, so the length property can't be relied upon for a
 * node count for the tree.
 * @id YAHOO.widget.TreeView._nodes
 * @property _nodes
 * @type Node[]
 * @private
 */

/**
 * We lock the tree control while waiting for the dynamic loader to return
 * @id YAHOO.widget.TreeView.locked
 * @property locked
 * @type boolean
 */

/**
 * The animation to use for expanding children, if any
 * @id YAHOO.widget.TreeView._expandAnim
 * @property _expandAnim
 * @type string
 * @private
 */

/**
 * The animation to use for collapsing children, if any
 * @id YAHOO.widget.TreeView._collapseAnim
 * @property _collapseAnim
 * @type string
 * @private
 */

/**
 * The current number of animations that are executing
 * @id YAHOO.widget.TreeView._animCount
 * @property _animCount
 * @type int
 * @private
 */

/**
 * The maximum number of animations to run at one time.
 * @id YAHOO.widget.TreeView.maxAnim
 * @property maxAnim
 * @type int
 */

/**
 * Sets up the animation for expanding children
 * @id YAHOO.widget.TreeView.setExpandAnim
 * @method setExpandAnim
 * @param {string} type the type of animation (acceptable values defined
 * in YAHOO.widget.TVAnim)
 */

/**
 * Sets up the animation for collapsing children
 * @id YAHOO.widget.TreeView.setCollapseAnim
 * @method setCollapseAnim
 * @param {string} the type of animation (acceptable values defined in
 * YAHOO.widget.TVAnim)
 */

/**
 * Perform the expand animation if configured, or just show the
 * element if not configured or too many animations are in progress
 * @id YAHOO.widget.TreeView.animateExpand
 * @method animateExpand
 * @param el {HTMLElement} the element to animate
 * @param node {YAHOO.util.Node} the node that was expanded
 * @return {boolean} true if animation could be invoked, false otherwise
 */

/**
 * Perform the collapse animation if configured, or just show the
 * element if not configured or too many animations are in progress
 * @id YAHOO.widget.TreeView.animateCollapse
 * @method animateCollapse
 * @param el {HTMLElement} the element to animate
 * @param node {YAHOO.util.Node} the node that was expanded
 * @return {boolean} true if animation could be invoked, false otherwise
 */

/**
 * Function executed when the expand animation completes
 * @id YAHOO.widget.TreeView.expandComplete
 * @method expandComplete
 */

/**
 * Function executed when the collapse animation completes
 * @id YAHOO.widget.TreeView.collapseComplete
 * @method collapseComplete
 */

/**
 * Initializes the tree
 * @id YAHOO.widget.TreeView.init
 * @method init
 * @param {string|HTMLElement} id the id of the element that will hold the tree
 * @private
 */

/**
 * When animation is enabled, this event fires when the animation
 * starts
 * @id YAHOO.widget.TreeView.animStart
 * @event animStart
 * @type CustomEvent
 * @param {YAHOO.widget.Node} node the node that is expanding/collapsing
 * @param {String} type the type of animation ("expand" or "collapse")
 */

/**
 * When animation is enabled, this event fires when the animation
 * completes
 * @id YAHOO.widget.TreeView.animComplete
 * @event animComplete
 * @type CustomEvent
 * @param {YAHOO.widget.Node} node the node that is expanding/collapsing
 * @param {String} type the type of animation ("expand" or "collapse")
 */

/**
 * Fires when a node is going to be collapsed.  Return false to stop
 * the collapse.
 * @id YAHOO.widget.TreeView.collapse
 * @event collapse
 * @type CustomEvent
 * @param {YAHOO.widget.Node} node the node that is collapsing
 */

/**
 * Fires after a node is successfully collapsed.  This event will not fire
 * if the "collapse" event was cancelled.
 * @id YAHOO.widget.TreeView.collapseComplete
 * @event collapseComplete
 * @type CustomEvent
 * @param {YAHOO.widget.Node} node the node that was collapsed
 */

/**
 * Fires when a node is going to be expanded.  Return false to stop
 * the collapse.
 * @id YAHOO.widget.TreeView.expand
 * @event expand
 * @type CustomEvent
 * @param {YAHOO.widget.Node} node the node that is expanding
 */

/**
 * Fires after a node is successfully expanded.  This event will not fire
 * if the "expand" event was cancelled.
 * @id YAHOO.widget.TreeView.expandComplete
 * @event expandComplete
 * @type CustomEvent
 * @param {YAHOO.widget.Node} node the node that was expanded
 */

/**
 * Renders the tree boilerplate and visible nodes
 * @id YAHOO.widget.TreeView.draw
 * @method draw
 */

/**
 * Returns the tree's host element
 * @id YAHOO.widget.TreeView.getEl
 * @method getEl
 * @return {HTMLElement} the host element
 */

/**
 * Nodes register themselves with the tree instance when they are created.
 * @id YAHOO.widget.TreeView.regNode
 * @method regNode
 * @param node {Node} the node to register
 * @private
 */

/**
 * Returns the root node of this tree
 * @id YAHOO.widget.TreeView.getRoot
 * @method getRoot
 * @return {Node} the root node
 */

/**
 * Configures this tree to dynamically load all child data
 * @id YAHOO.widget.TreeView.setDynamicLoad
 * @method setDynamicLoad
 * @param {function} fnDataLoader the function that will be called to get the data
 * @param iconMode {int} configures the icon that is displayed when a dynamic
 * load node is expanded the first time without children.  By default, the
 * "collapse" icon will be used.  If set to 1, the leaf node icon will be
 * displayed.
 */

/**
 * Expands all child nodes.  Note: this conflicts with the "multiExpand"
 * node property.  If expand all is called in a tree with nodes that
 * do not allow multiple siblings to be displayed, only the last sibling
 * will be expanded.
 * @id YAHOO.widget.TreeView.expandAll
 * @method expandAll
 */

/**
 * Collapses all expanded child nodes in the entire tree.
 * @id YAHOO.widget.TreeView.collapseAll
 * @method collapseAll
 */

/**
 * Returns a node in the tree that has the specified index (this index
 * is created internally, so this function probably will only be used
 * in html generated for a given node.)
 * @id YAHOO.widget.TreeView.getNodeByIndex
 * @method getNodeByIndex
 * @param {int} nodeIndex the index of the node wanted
 * @return {Node} the node with index=nodeIndex, null if no match
 */

/**
 * Returns a node that has a matching property and value in the data
 * object that was passed into its constructor.
 * @id YAHOO.widget.TreeView.getNodeByProperty
 * @method getNodeByProperty
 * @param {object} property the property to search (usually a string)
 * @param {object} value the value we want to find (usuall an int or string)
 * @return {Node} the matching node, null if no match
 */

/**
 * Returns a collection of nodes that have a matching property
 * and value in the data object that was passed into its constructor.
 * @id YAHOO.widget.TreeView.getNodesByProperty
 * @method getNodesByProperty
 * @param {object} property the property to search (usually a string)
 * @param {object} value the value we want to find (usuall an int or string)
 * @return {Array} the matching collection of nodes, null if no match
 */

/**
 * Returns the treeview node reference for an anscestor element
 * of the node, or null if it is not contained within any node
 * in this tree.
 * @id YAHOO.widget.TreeView.getNodeByElement
 * @method getNodeByElement
 * @param {HTMLElement} the element to test
 * @return {YAHOO.widget.Node} a node reference or null
 */

/**
 * Removes the node and its children, and optionally refreshes the
 * branch of the tree that was affected.
 * @id YAHOO.widget.TreeView.removeNode
 * @method removeNode
 * @param {Node} The node to remove
 * @param {boolean} autoRefresh automatically refreshes branch if true
 * @return {boolean} False is there was a problem, true otherwise.
 */

/**
 * wait until the animation is complete before deleting
 * to avoid javascript errors
 * @id YAHOO.widget.TreeView._removeChildren_animComplete
 * @method _removeChildren_animComplete
 * @param o the custom event payload
 * @private
 */

/**
 * Deletes this nodes child collection, recursively.  Also collapses
 * the node, and resets the dynamic load flag.  The primary use for
 * this method is to purge a node and allow it to fetch its data
 * dynamically again.
 * @id YAHOO.widget.TreeView.removeChildren
 * @method removeChildren
 * @param {Node} node the node to purge
 */

/**
 * Deletes the node and recurses children
 * @id YAHOO.widget.TreeView._deleteNode
 * @method _deleteNode
 * @private
 */

/**
 * Removes the node from the tree, preserving the child collection
 * to make it possible to insert the branch into another part of the
 * tree, or another tree.
 * @id YAHOO.widget.TreeView.popNode
 * @method popNode
 * @param {Node} the node to remove
 */

/**
 * TreeView instance toString
 * @id YAHOO.widget.TreeView.toString
 * @method toString
 * @return {string} string representation of the tree
 */

/**
 * Generates an unique id for an element if it doesn't yet have one
 * @id YAHOO.widget.TreeView.generateId
 * @method generateId
 * @private
 */

/**
 * Abstract method that is executed when a node is expanded
 * @id YAHOO.widget.TreeView.onExpand
 * @method onExpand
 * @param node {Node} the node that was expanded
 * @deprecated use treeobj.subscribe("expand") instead
 */

/**
 * Abstract method that is executed when a node is collapsed.
 * @id YAHOO.widget.TreeView.onCollapse
 * @method onCollapse
 * @param node {Node} the node that was collapsed.
 * @deprecated use treeobj.subscribe("collapse") instead
 */

/**
 * Running count of all nodes created in all trees.  This is
 * used to provide unique identifies for all nodes.  Deleting
 * nodes does not change the nodeCount.
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.nodeCount
 * @property YAHOO.widget.TreeView.nodeCount
 * @type int
 * @static
 */

/**
 * Global cache of tree instances
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.trees
 * @property YAHOO.widget.TreeView.trees
 * @type Array
 * @static
 * @private
 */

/**
 * Counter for generating a new unique element id
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.counter
 * @property YAHOO.widget.TreeView.counter
 * @static
 * @private
 */

/**
 * Global method for getting a tree by its id.  Used in the generated
 * tree html.
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.getTree
 * @method YAHOO.widget.TreeView.getTree
 * @param treeId {String} the id of the tree instance
 * @return {TreeView} the tree instance requested, null if not found.
 * @static
 */

/**
 * Global method for getting a node by its id.  Used in the generated
 * tree html.
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.getNode
 * @method YAHOO.widget.TreeView.getNode
 * @param treeId {String} the id of the tree instance
 * @param nodeIndex {String} the index of the node to return
 * @return {Node} the node instance requested, null if not found
 * @static
 */

/**
 * Add a DOM event
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.addHandler
 * @method YAHOO.widget.TreeView.addHandler
 * @param el the elment to bind the handler to
 * @param {string} sType the type of event handler
 * @param {function} fn the callback to invoke
 * @static
 */

/**
 * Remove a DOM event
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.removeHandler
 * @method YAHOO.widget.TreeView.removeHandler
 * @param el the elment to bind the handler to
 * @param {string} sType the type of event handler
 * @param {function} fn the callback to invoke
 * @static
 */

/**
 * Attempts to preload the images defined in the styles used to draw the tree by
 * rendering off-screen elements that use the styles.
 * @id YAHOO.widget.TreeView.YAHOO.widget.TreeView.preload
 * @method YAHOO.widget.TreeView.preload
 * @param {string} prefix the prefix to use to generate the names of the
 * images to preload, default is ygtv
 * @static
 */

/**
 * The base class for all tree nodes.  The node's presentation and behavior in
 * response to mouse events is handled in Node subclasses.
 * @id YAHOO.widget.Node
 * @namespace YAHOO.widget
 * @class Node
 * @uses YAHOO.util.EventProvider
 * @param oData {object} a string or object containing the data that will
 * be used to render this node, and any custom attributes that should be
 * stored with the node (which is available in noderef.data).
 * @param oParent {Node} this node's parent node
 * @param expanded {boolean} the initial expanded/collapsed state
 * @constructor
 */

/**
 * The index for this instance obtained from global counter in YAHOO.widget.TreeView.
 * @id YAHOO.widget.Node.index
 * @property index
 * @type int
 */

/**
 * This node's child node collection.
 * @id YAHOO.widget.Node.children
 * @property children
 * @type Node[]
 */

/**
 * Tree instance this node is part of
 * @id YAHOO.widget.Node.tree
 * @property tree
 * @type TreeView
 */

/**
 * The data linked to this node.  This can be any object or primitive
 * value, and the data can be used in getNodeHtml().
 * @id YAHOO.widget.Node.data
 * @property data
 * @type object
 */

/**
 * Parent node
 * @id YAHOO.widget.Node.parent
 * @property parent
 * @type Node
 */

/**
 * The depth of this node.  We start at -1 for the root node.
 * @id YAHOO.widget.Node.depth
 * @property depth
 * @type int
 */

/**
 * The href for the node's label.  If one is not specified, the href will
 * be set so that it toggles the node.
 * @id YAHOO.widget.Node.href
 * @property href
 * @type string
 */

/**
 * The label href target, defaults to current window
 * @id YAHOO.widget.Node.target
 * @property target
 * @type string
 */

/**
 * The node's expanded/collapsed state
 * @id YAHOO.widget.Node.expanded
 * @property expanded
 * @type boolean
 */

/**
 * Can multiple children be expanded at once?
 * @id YAHOO.widget.Node.multiExpand
 * @property multiExpand
 * @type boolean
 */

/**
 * Should we render children for a collapsed node?  It is possible that the
 * implementer will want to render the hidden data...  @todo verify that we
 * need this, and implement it if we do.
 * @id YAHOO.widget.Node.renderHidden
 * @property renderHidden
 * @type boolean
 */

/**
 * This flag is set to true when the html is generated for this node's
 * children, and set to false when new children are added.
 * @id YAHOO.widget.Node.childrenRendered
 * @property childrenRendered
 * @type boolean
 */

/**
 * Dynamically loaded nodes only fetch the data the first time they are
 * expanded.  This flag is set to true once the data has been fetched.
 * @id YAHOO.widget.Node.dynamicLoadComplete
 * @property dynamicLoadComplete
 * @type boolean
 */

/**
 * This node's previous sibling
 * @id YAHOO.widget.Node.previousSibling
 * @property previousSibling
 * @type Node
 */

/**
 * This node's next sibling
 * @id YAHOO.widget.Node.nextSibling
 * @property nextSibling
 * @type Node
 */

/**
 * We can set the node up to call an external method to get the child
 * data dynamically.
 * @id YAHOO.widget.Node._dynLoad
 * @property _dynLoad
 * @type boolean
 * @private
 */

/**
 * Function to execute when we need to get this node's child data.
 * @id YAHOO.widget.Node.dataLoader
 * @property dataLoader
 * @type function
 */

/**
 * This is true for dynamically loading nodes while waiting for the
 * callback to return.
 * @id YAHOO.widget.Node.isLoading
 * @property isLoading
 * @type boolean
 */

/**
 * The toggle/branch icon will not show if this is set to false.  This
 * could be useful if the implementer wants to have the child contain
 * extra info about the parent, rather than an actual node.
 * @id YAHOO.widget.Node.hasIcon
 * @property hasIcon
 * @type boolean
 */

/**
 * Used to configure what happens when a dynamic load node is expanded
 * and we discover that it does not have children.  By default, it is
 * treated as if it still could have children (plus/minus icon).  Set
 * iconMode to have it display like a leaf node instead.
 * @id YAHOO.widget.Node.iconMode
 * @property iconMode
 * @type int
 */

/**
 * Specifies whether or not the content area of the node should be allowed
 * to wrap.
 * @id YAHOO.widget.Node.nowrap
 * @property nowrap
 * @type boolean
 * @default false
 */

/**
 * If true, the node will alway be rendered as a leaf node.  This can be
 * used to override the presentation when dynamically loading the entire
 * tree.  Setting this to true also disables the dynamic load call for the
 * node.
 * @id YAHOO.widget.Node.isLeaf
 * @property isLeaf
 * @type boolean
 * @default false
 */

/**
 * The node type
 * @id YAHOO.widget.Node._type
 * @property _type
 * @private
 */

/**
 * Initializes this node, gets some of the properties from the parent
 * @id YAHOO.widget.Node.init
 * @method init
 * @param oData {object} a string or object containing the data that will
 * be used to render this node
 * @param oParent {Node} this node's parent node
 * @param expanded {boolean} the initial expanded/collapsed state
 */

/**
 * The parentChange event is fired when a parent element is applied
 * to the node.  This is useful if you need to apply tree-level
 * properties to a tree that need to happen if a node is moved from
 * one tree to another.
 *
 * @id YAHOO.widget.Node.parentChange
 * @event parentChange
 * @type CustomEvent
 */

/**
 * Certain properties for the node cannot be set until the parent
 * is known. This is called after the node is inserted into a tree.
 * the parent is also applied to this node's children in order to
 * make it possible to move a branch from one tree to another.
 * @id YAHOO.widget.Node.applyParent
 * @method applyParent
 * @param {Node} parentNode this node's parent node
 * @return {boolean} true if the application was successful
 */

/**
 * Appends a node to the child collection.
 * @id YAHOO.widget.Node.appendChild
 * @method appendChild
 * @param childNode {Node} the new node
 * @return {Node} the child node
 * @private
 */

/**
 * Appends this node to the supplied node's child collection
 * @id YAHOO.widget.Node.appendTo
 * @method appendTo
 * @param parentNode {Node} the node to append to.
 * @return {Node} The appended node
 */

/**
 * Inserts this node before this supplied node
 * @id YAHOO.widget.Node.insertBefore
 * @method insertBefore
 * @param node {Node} the node to insert this node before
 * @return {Node} the inserted node
 */

/**
 * Inserts this node after the supplied node
 * @id YAHOO.widget.Node.insertAfter
 * @method insertAfter
 * @param node {Node} the node to insert after
 * @return {Node} the inserted node
 */

/**
 * Returns true if the Node is a child of supplied Node
 * @id YAHOO.widget.Node.isChildOf
 * @method isChildOf
 * @param parentNode {Node} the Node to check
 * @return {boolean} The node index if this Node is a child of
 *                   supplied Node, else -1.
 * @private
 */

/**
 * Returns a node array of this node's siblings, null if none.
 * @id YAHOO.widget.Node.getSiblings
 * @method getSiblings
 * @return Node[]
 */

/**
 * Shows this node's children
 * @id YAHOO.widget.Node.showChildren
 * @method showChildren
 */

/**
 * Hides this node's children
 * @id YAHOO.widget.Node.hideChildren
 * @method hideChildren
 */

/**
 * Returns the id for this node's container div
 * @id YAHOO.widget.Node.getElId
 * @method getElId
 * @return {string} the element id
 */

/**
 * Returns the id for this node's children div
 * @id YAHOO.widget.Node.getChildrenElId
 * @method getChildrenElId
 * @return {string} the element id for this node's children div
 */

/**
 * Returns the id for this node's toggle element
 * @id YAHOO.widget.Node.getToggleElId
 * @method getToggleElId
 * @return {string} the toggel element id
 */

/**
 * Returns this node's container html element
 * @id YAHOO.widget.Node.getEl
 * @method getEl
 * @return {HTMLElement} the container html element
 */

/**
 * Returns the div that was generated for this node's children
 * @id YAHOO.widget.Node.getChildrenEl
 * @method getChildrenEl
 * @return {HTMLElement} this node's children div
 */

/**
 * Returns the element that is being used for this node's toggle.
 * @id YAHOO.widget.Node.getToggleEl
 * @method getToggleEl
 * @return {HTMLElement} this node's toggle html element
 */

/**
 * Generates the link that will invoke this node's toggle method
 * @id YAHOO.widget.Node.getToggleLink
 * @method getToggleLink
 * @return {string} the javascript url for toggling this node
 */

/**
 * Hides this nodes children (creating them if necessary), changes the
 * @id YAHOO.widget.Node.collapse
 * @method collapse
 * toggle style.
 */

/**
 * Shows this nodes children (creating them if necessary), changes the
 * toggle style, and collapses its siblings if multiExpand is not set.
 * @id YAHOO.widget.Node.expand
 * @method expand
 */

/**
 * Returns the css style name for the toggle
 * @id YAHOO.widget.Node.getStyle
 * @method getStyle
 * @return {string} the css class for this node's toggle
 */

/**
 * Returns the hover style for the icon
 * @id YAHOO.widget.Node.getHoverStyle
 * @return {string} the css class hover state
 * @method getHoverStyle
 */

/**
 * Recursively expands all of this node's children.
 * @id YAHOO.widget.Node.expandAll
 * @method expandAll
 */

/**
 * Recursively collapses all of this node's children.
 * @id YAHOO.widget.Node.collapseAll
 * @method collapseAll
 */

/**
 * Configures this node for dynamically obtaining the child data
 * when the node is first expanded.  Calling it without the callback
 * will turn off dynamic load for the node.
 * @id YAHOO.widget.Node.setDynamicLoad
 * @method setDynamicLoad
 * @param fmDataLoader {function} the function that will be used to get the data.
 * @param iconMode {int} configures the icon that is displayed when a dynamic
 * load node is expanded the first time without children.  By default, the
 * "collapse" icon will be used.  If set to 1, the leaf node icon will be
 * displayed.
 */

/**
 * Evaluates if this node is the root node of the tree
 * @id YAHOO.widget.Node.isRoot
 * @method isRoot
 * @return {boolean} true if this is the root node
 */

/**
 * Evaluates if this node's children should be loaded dynamically.  Looks for
 * the property both in this instance and the root node.  If the tree is
 * defined to load all children dynamically, the data callback function is
 * defined in the root node
 * @id YAHOO.widget.Node.isDynamic
 * @method isDynamic
 * @return {boolean} true if this node's children are to be loaded dynamically
 */

/**
 * Returns the current icon mode.  This refers to the way childless dynamic
 * load nodes appear (this comes into play only after the initial dynamic
 * load request produced no children).
 * @id YAHOO.widget.Node.getIconMode
 * @method getIconMode
 * @return {int} 0 for collapse style, 1 for leaf node style
 */

/**
 * Checks if this node has children.  If this node is lazy-loading and the
 * children have not been rendered, we do not know whether or not there
 * are actual children.  In most cases, we need to assume that there are
 * children (for instance, the toggle needs to show the expandable
 * presentation state).  In other times we want to know if there are rendered
 * children.  For the latter, "checkForLazyLoad" should be false.
 * @id YAHOO.widget.Node.hasChildren
 * @method hasChildren
 * @param checkForLazyLoad {boolean} should we check for unloaded children?
 * @return {boolean} true if this has children or if it might and we are
 * checking for this condition.
 */

/**
 * Expands if node is collapsed, collapses otherwise.
 * @id YAHOO.widget.Node.toggle
 * @method toggle
 */

/**
 * Returns the markup for this node and its children.
 * @id YAHOO.widget.Node.getHtml
 * @method getHtml
 * @return {string} the markup for this node and its expanded children.
 */

/**
 * Called when first rendering the tree.  We always build the div that will
 * contain this nodes children, but we don't render the children themselves
 * unless this node is expanded.
 * @id YAHOO.widget.Node.getChildrenHtml
 * @method getChildrenHtml
 * @return {string} the children container div html and any expanded children
 * @private
 */

/**
 * Generates the markup for the child nodes.  This is not done until the node
 * is expanded.
 * @id YAHOO.widget.Node.renderChildren
 * @method renderChildren
 * @return {string} the html for this node's children
 * @private
 */

/**
 * Called when we know we have all the child data.
 * @id YAHOO.widget.Node.completeRender
 * @method completeRender
 * @return {string} children html
 */

/**
 * Load complete is the callback function we pass to the data provider
 * in dynamic load situations.
 * @id YAHOO.widget.Node.loadComplete
 * @method loadComplete
 */

/**
 * Returns this node's ancestor at the specified depth.
 * @id YAHOO.widget.Node.getAncestor
 * @method getAncestor
 * @param {int} depth the depth of the ancestor.
 * @return {Node} the ancestor
 */

/**
 * Returns the css class for the spacer at the specified depth for
 * this node.  If this node's ancestor at the specified depth
 * has a next sibling the presentation is different than if it
 * does not have a next sibling
 * @id YAHOO.widget.Node.getDepthStyle
 * @method getDepthStyle
 * @param {int} depth the depth of the ancestor.
 * @return {string} the css class for the spacer
 */

/**
 * Get the markup for the node.  This is designed to be overrided so that we can
 * support different types of nodes.
 * @id YAHOO.widget.Node.getNodeHtml
 * @method getNodeHtml
 * @return {string} The HTML that will render this node.
 */

/**
 * Regenerates the html for this node and its children.  To be used when the
 * node is expanded and new children have been added.
 * @id YAHOO.widget.Node.refresh
 * @method refresh
 */

/**
 * Node toString
 * @id YAHOO.widget.Node.toString
 * @method toString
 * @return {string} string representation of the node
 */

/**
 * The default node presentation.  The first parameter should be
 * either a string that will be used as the node's label, or an object
 * that has a string propery called label.  By default, the clicking the
 * label will toggle the expanded/collapsed state of the node.  By
 * changing the href property of the instance, this behavior can be
 * changed so that the label will go to the specified href.
 * @id YAHOO.widget.TextNode
 * @namespace YAHOO.widget
 * @class TextNode
 * @extends YAHOO.widget.Node
 * @constructor
 * @param oData {object} a string or object containing the data that will
 * be used to render this node.
 * Valid properties:
 * <dl>
 *   <dt>label</dt>
 *   <dd>The text for the node's label</dd>
 *   <dt>title</dt>
 *   <dd>The title attribute for the label anchor</dd>
 *   <dt>title</dt>
 *   <dd>The title attribute for the label anchor</dd>
 *   <dt>href</dt>
 *   <dd>The href for the node's label.  By default it is set to
 *   expand/collapse the node.</dd>
 *   <dt>target</dt>
 *   <dd>The target attribute for the label anchor</dd>
 *   <dt>style</dt>
 *   <dd>A CSS class to apply to the label anchor</dd>
 * </dl>
 * All other attributes are made available in noderef.data, which
 * can be used to store custom attributes.  TreeView.getNode(s)ByProperty
 * can be used to retreive a node by one of the attributes.
 * @param oParent {YAHOO.widget.Node} this node's parent node
 * @param expanded {boolean} the initial expanded/collapsed state
 */

/**
 * The CSS class for the label href.  Defaults to ygtvlabel, but can be
 * overridden to provide a custom presentation for a specific node.
 * @id YAHOO.widget.TextNode.labelStyle
 * @property labelStyle
 * @type string
 */

/**
 * The derived element id of the label for this node
 * @id YAHOO.widget.TextNode.labelElId
 * @property labelElId
 * @type string
 */

/**
 * The text for the label.  It is assumed that the oData parameter will
 * either be a string that will be used as the label, or an object that
 * has a property called "label" that we will use.
 * @id YAHOO.widget.TextNode.label
 * @property label
 * @type string
 */

/**
 * Custom event that is fired when the text node label is clicked.  The
 * custom event is defined on the tree instance, so there is a single
 * event that handles all nodes in the tree.  The node clicked is
 * provided as an argument
 *
 * @id YAHOO.widget.TextNode.labelClick
 * @event labelClick
 * @for YAHOO.widget.TreeView
 * @param {YAHOO.widget.Node} node the node clicked
 */

/**
 * Sets up the node label
 * @id YAHOO.widget.TextNode.setUpLabel
 * @method setUpLabel
 * @param oData string containing the label, or an object with a label property
 */

/**
 * Returns the label element
 * @id YAHOO.widget.TextNode.getLabelEl
 * @for YAHOO.widget.TextNode
 * @method getLabelEl
 * @return {object} the element
 */

/**
 * Executed when the label is clicked.  Fires the labelClick custom event.
 * @id YAHOO.widget.TextNode.onLabelClick
 * @method onLabelClick
 * @param me {Node} this node
 * @scope the anchor tag clicked
 * @return false to cancel the anchor click
 */

/**
 * A custom YAHOO.widget.Node that handles the unique nature of
 * the virtual, presentationless root node.
 * @id YAHOO.widget.RootNode
 * @namespace YAHOO.widget
 * @class RootNode
 * @extends YAHOO.widget.Node
 * @param oTree {YAHOO.widget.TreeView} The tree instance this node belongs to
 * @constructor
 */

/**
 * This implementation takes either a string or object for the
 * oData argument.  If is it a string, we will use it for the display
 * of this node (and it can contain any html code).  If the parameter
 * is an object, we look for a parameter called "html" that will be
 * used for this node's display.
 * @id YAHOO.widget.HTMLNode
 * @namespace YAHOO.widget
 * @class HTMLNode
 * @extends YAHOO.widget.Node
 * @constructor
 * @param oData {object} a string or object containing the data that will
 * be used to render this node.
 * Valid configuration properties:
 * <dl>
 *   <dt>html</dt>
 *   <dd>The html content for the node</dd>
 * </dl>
 * All other attributes are made available in noderef.data, which
 * can be used to store custom attributes.  TreeView.getNode(s)ByProperty
 * can be used to retreive a node by one of the attributes.
 * @param oParent {YAHOO.widget.Node} this node's parent node
 * @param expanded {boolean} the initial expanded/collapsed state
 * @param hasIcon {boolean} specifies whether or not leaf nodes should
 * be rendered with or without a horizontal line line icon. If the icon
 * is not displayed, the content fills the space it would have occupied.
 * This option operates independently of the leaf node presentation logic
 * for dynamic nodes.
 */

/**
 * The CSS class for the html content container.  Defaults to ygtvhtml, but
 * can be overridden to provide a custom presentation for a specific node.
 * @id YAHOO.widget.HTMLNode.contentStyle
 * @property contentStyle
 * @type string
 */

/**
 * The generated id that will contain the data passed in by the implementer.
 * @id YAHOO.widget.HTMLNode.contentElId
 * @property contentElId
 * @type string
 */

/**
 * The HTML content to use for this node's display
 * @id YAHOO.widget.HTMLNode.html
 * @property html
 * @type string
 */

/**
 * Sets up the node label
 * @id YAHOO.widget.HTMLNode.initContent
 * @property initContent
 * @param oData {object} An html string or object containing an html property
 * @param hasIcon {boolean} determines if the node will be rendered with an
 * icon or not
 */

/**
 * Synchronizes the node.data, node.html, and the node's content
 * @id YAHOO.widget.HTMLNode.setHtml
 * @property setHtml
 * @param o {object} An html string or object containing an html property
 */

/**
 * Returns the outer html element for this node's content
 * @id YAHOO.widget.HTMLNode.getContentEl
 * @method getContentEl
 * @return {HTMLElement} the element
 */

/**
 * A menu-specific implementation that differs from TextNode in that only
 * one sibling can be expanded at a time.
 * @id YAHOO.widget.MenuNode
 * @namespace YAHOO.widget
 * @class MenuNode
 * @extends YAHOO.widget.TextNode
 * @param oData {object} a string or object containing the data that will
 * be used to render this node.
 * Valid properties:
 * <dl>
 *   <dt>label</dt>
 *   <dd>The text for the node's label</dd>
 *   <dt>title</dt>
 *   <dd>The title attribute for the label anchor</dd>
 *   <dt>title</dt>
 *   <dd>The title attribute for the label anchor</dd>
 *   <dt>href</dt>
 *   <dd>The href for the node's label.  By default it is set to
 *   expand/collapse the node.</dd>
 *   <dt>target</dt>
 *   <dd>The target attribute for the label anchor</dd>
 *   <dt>style</dt>
 *   <dd>A CSS class to apply to the label anchor</dd>
 * </dl>
 * All other attributes are made available in noderef.data, which
 * can be used to store custom attributes.  TreeView.getNode(s)ByProperty
 * can be used to retreive a node by one of the attributes.
 * @param oParent {YAHOO.widget.Node} this node's parent node
 * @param expanded {boolean} the initial expanded/collapsed state
 * @constructor
 */

/**
 * A static factory class for tree view expand/collapse animations
 * @id YAHOO.widget.TVAnim
 * @class TVAnim
 * @static
 */

/**
 * Constant for the fade in animation
 * @id YAHOO.widget.TVAnim.FADE_IN
 * @property FADE_IN
 * @type string
 * @static
 */

/**
 * Constant for the fade out animation
 * @id YAHOO.widget.TVAnim.FADE_OUT
 * @property FADE_OUT
 * @type string
 * @static
 */

/**
 * Returns a ygAnim instance of the given type
 * @id YAHOO.widget.TVAnim.getAnim
 * @method getAnim
 * @param type {string} the type of animation
 * @param el {HTMLElement} the element to element (probably the children div)
 * @param callback {function} function to invoke when the animation is done.
 * @return {YAHOO.util.Animation} the animation instance
 * @static
 */

/**
 * Returns true if the specified animation class is available
 * @id YAHOO.widget.TVAnim.isValid
 * @method isValid
 * @param type {string} the type of animation
 * @return {boolean} true if valid, false if not
 * @static
 */

/**
 * A 1/2 second fade-in animation.
 * @id YAHOO.widget.TVFadeIn
 * @class TVFadeIn
 * @constructor
 * @param el {HTMLElement} the element to animate
 * @param callback {function} function to invoke when the animation is finished
 */

/**
 * The element to animate
 * @id YAHOO.widget.TVFadeIn.el
 * @property el
 * @type HTMLElement
 */

/**
 * the callback to invoke when the animation is complete
 * @id YAHOO.widget.TVFadeIn.callback
 * @property callback
 * @type function
 */

/**
 * Performs the animation
 * @id YAHOO.widget.TVFadeIn.animate
 * @method animate
 */

/**
 * Clean up and invoke callback
 * @id YAHOO.widget.TVFadeIn.onComplete
 * @method onComplete
 */

/**
 * toString
 * @id YAHOO.widget.TVFadeIn.toString
 * @method toString
 * @return {string} the string representation of the instance
 */

/**
 * A 1/2 second fade out animation.
 * @id YAHOO.widget.TVFadeOut
 * @class TVFadeOut
 * @constructor
 * @param el {HTMLElement} the element to animate
 * @param callback {Function} function to invoke when the animation is finished
 */

/**
 * The element to animate
 * @id YAHOO.widget.TVFadeOut.el
 * @property el
 * @type HTMLElement
 */

/**
 * the callback to invoke when the animation is complete
 * @id YAHOO.widget.TVFadeOut.callback
 * @property callback
 * @type function
 */

/**
 * Performs the animation
 * @id YAHOO.widget.TVFadeOut.animate
 * @method animate
 */

/**
 * Clean up and invoke callback
 * @id YAHOO.widget.TVFadeOut.onComplete
 * @method onComplete
 */

/**
 * toString
 * @id YAHOO.widget.TVFadeOut.toString
 * @method toString
 * @return {string} the string representation of the instance
 */

/**
 * Wraps Flash embedding functionality and allows communication with SWF through
 * attributes.
 *
 * @id YAHOO.widget.FlashAdapter
 * @namespace YAHOO.widget
 * @class FlashAdapter
 * @uses YAHOO.util.AttributeProvider
 */

/**
 * Fires when the SWF is initialized and communication is possible.
 * @id YAHOO.widget.FlashAdapter.contentReady
 * @event contentReady
 */

/**
 * The URL of the SWF file.
 * @id YAHOO.widget.FlashAdapter._swfURL
 * @property _swfURL
 * @type String
 * @private
 */

/**
 * A reference to the embedded SWF file.
 * @id YAHOO.widget.FlashAdapter._swf
 * @property _swf
 * @private
 */

/**
 * The id of this instance.
 * @id YAHOO.widget.FlashAdapter._id
 * @property _id
 * @type String
 * @private
 */

/**
 * The initializing attributes are stored here until the SWF is ready.
 * @id YAHOO.widget.FlashAdapter._attributes
 * @property _attributes
 * @type Object
 * @private
 */

/**
 * Public accessor to the unique name of the FlashAdapter instance.
 *
 * @id YAHOO.widget.FlashAdapter.toString
 * @method toString
 * @return {String} Unique name of the FlashAdapter instance.
 */

/**
 * Embeds the SWF in the page and associates it with this instance.
 *
 * @id YAHOO.widget.FlashAdapter._embedSWF
 * @method _embedSWF
 * @private
 */

/**
 * Handles or re-dispatches events received from the SWF.
 *
 * @id YAHOO.widget.FlashAdapter._eventHandler
 * @method _eventHandler
 * @private
 */

/**
 * Called when the SWF has been initialized.
 *
 * @id YAHOO.widget.FlashAdapter._loadHandler
 * @method _loadHandler
 * @private
 */

/**
 * Initializes the attributes.
 *
 * @id YAHOO.widget.FlashAdapter._initAttributes
 * @method _initAttributes
 * @private
 */

/**
 * @id YAHOO.widget.FlashAdapter.swfURL
 * @attribute swfURL
 * @description Absolute or relative URL to the SWF displayed by the FlashAdapter.
 * @type String
 */

/**
 * Getter for swfURL attribute.
 *
 * @id YAHOO.widget.FlashAdapter._getSWFURL
 * @method _getSWFURL
 * @private
 */

/**
 * Receives event messages from SWF and passes them to the correct instance
 * of FlashAdapter.
 *
 * @id YAHOO.widget.FlashAdapter.YAHOO.widget.FlashAdapter.eventHandler
 * @method YAHOO.widget.FlashAdapter.eventHandler
 * @static
 * @private
 */

/**
 * Uploader class for the YUI Uploader component.
 *
 * @id YAHOO.widget.Uploader
 * @namespace YAHOO.widget
 * @class Uploader
 * @uses YAHOO.widget.FlashAdapter
 * @constructor
 * @param containerId {HTMLElement} Container element for the Flash Player instance.
 */

/**
 * Fires when the user has finished selecting files in the "Open File" dialog.
 *
 * @id YAHOO.widget.Uploader.fileSelect
 * @event fileSelect
 * @param event.type {String} The event type
 * @param event.fileList {Array} An array of objects with file information
 * @param event.fileList[].size {Number} File size in bytes for a specific file in fileList
 * @param event.fileList[].cDate {Date} Creation date for a specific file in fileList
 * @param event.fileList[].mDate {Date} Modification date for a specific file in fileList
 * @param event.fileList[].name {String} File name for a specific file in fileList
 * @param event.fileList[].id {String} Unique file id of a specific file in fileList
 */

/**
 * Fires when an upload of a specific file has started.
 *
 * @id YAHOO.widget.Uploader.uploadStart
 * @event uploadStart
 * @param event.type {String} The event type
 * @param event.id {String} The id of the file that's started to upload
 */

/**
 * Fires when new information about the upload progress for a specific file is available.
 *
 * @id YAHOO.widget.Uploader.uploadProgress
 * @event uploadProgress
 * @param event.type {String} The event type
 * @param event.id {String} The id of the file with which the upload progress data is associated
 * @param bytesLoaded {Number} The number of bytes of the file uploaded so far
 * @param bytesTotal {Number} The total size of the file
 */

/**
 * Fires when an upload for a specific file is cancelled.
 *
 * @id YAHOO.widget.Uploader.uploadCancel
 * @event uploadCancel
 * @param event.type {String} The event type
 * @param event.id {String} The id of the file with which the upload has been cancelled.
 */

/**
 * Fires when an upload for a specific file is complete.
 *
 * @id YAHOO.widget.Uploader.uploadComplete
 * @event uploadComplete
 * @param event.type {String} The event type
 * @param event.id {String} The id of the file for which the upload has been completed.
 */

/**
 * Fires when the server sends data in response to a completed upload.
 *
 * @id YAHOO.widget.Uploader.uploadCompleteData
 * @event uploadCompleteData
 * @param event.type {String} The event type
 * @param event.id {String} The id of the file for which the upload has been completed.
 * @param event.data {String} The raw data returned by the server in response to the upload.
 */

/**
 * Fires when an upload error occurs.
 *
 * @id YAHOO.widget.Uploader.uploadError
 * @event uploadError
 * @param event.type {String} The event type
 * @param event.id {String} The id of the file that was being uploaded when the error has occurred.
 * @param event.status {String} The status message associated with the error.
 */

/**
 * Location of the Uploader SWF
 *
 * @id YAHOO.widget.Uploader.Chart.SWFURL
 * @property Chart.SWFURL
 * @private
 * @static
 * @final
 * @default "assets/Uploader.swf"
 */

/**
 * Invokes the "Open File" dialog and allows the user to select the files for upload
 *
 * @id YAHOO.widget.Uploader.browse
 * @param allowMultiple {Boolean} If true, allows for multiple file selection; if false, only a single file can be selected. False by default.
 * @param extensionFilterArray {Array} An array of key-value pairs for permissible file extensions. The array elements should
 * be of the form: {description: "Images", extensions: "*.jpg, *.gif, *.png"}.
 * @method browse
 */

/**
 * Starts the upload of the file specified by fileID to the location specified by uploadScriptPath.
 *
 * @id YAHOO.widget.Uploader.upload
 * @param fileID {String} The id of the file to start uploading.
 * @param uploadScriptPath {String} The URL of the upload location.
 * @param method {String} Either "GET" or "POST", specifying how the variables accompanying the file upload POST request should be submitted. "GET" by default.
 * @param vars {Object} The object containing variables to be sent in the same request as the file upload.
 * @param fieldName {String} The name of the variable in the POST request containing the file data. "Filedata" by default.
 * @method upload
 */

/**
 * Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed.
 *
 * @id YAHOO.widget.Uploader.uploadAll
 * @param uploadScriptPath {String} The URL of the upload location.
 * @param method {String} Either "GET" or "POST", specifying how the variables accompanying the file upload POST request should be submitted. "GET" by default.
 * @param vars {Object} The object containing variables to be sent in the same request as the file upload.
 * @param fieldName {String} The name of the variable in the POST request containing the file data. "Filedata" by default.
 * @method uploadAll
 */

/**
 * Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled.
 *
 * @id YAHOO.widget.Uploader.cancel
 * @param fileID {String} The ID of the file whose upload should be cancelled.
 * @method cancel
 */

/**
 * Clears the list of files queued for upload.
 *
 * @id YAHOO.widget.Uploader.clearFileList
 * @method clearFileList
 */

/**
 * Removes the specified file from the upload queue.
 *
 * @id YAHOO.widget.Uploader.removeFile
 * @param fileID {String} The id of the file to remove from the upload queue.
 * @method removeFile
 */

/**
 * YAHOO_config is not included as part of the library.  Instead it is an
 * object that can be defined by the implementer immediately before
 * including the YUI library.  The properties included in this object
 * will be used to configure global properties needed as soon as the
 * library begins to load.
 * @id YAHOO_config
 * @class YAHOO_config
 * @static
 */

/**
 * A reference to a function that will be executed every time a YAHOO module
 * is loaded.  As parameter, this function will receive the version
 * information for the module. See
 * YAHOO.env.getVersion for the description of the version data structure.
 * @id YAHOO_config.listener
 * @property listener
 * @type Function
 * @static
 * @default undefined
 */

/**
 * Set to true if the library will be dynamically loaded after window.onload.
 * Defaults to false
 * @id YAHOO_config.injecting
 * @property injecting
 * @type boolean
 * @static
 * @default undefined
 */

/**
 * Instructs the yuiloader component to dynamically load yui components and
 * their dependencies.  See the yuiloader documentation for more information
 * about dynamic loading
 * @id YAHOO_config.load
 * @property load
 * @static
 * @default undefined
 * @see yuiloader
 */

/**
 * Forces the use of the supplied locale where applicable in the library
 * @id YAHOO_config.locale
 * @property locale
 * @type string
 * @static
 * @default undefined
 */

/**
 * The YAHOO global namespace object.  If YAHOO is already defined, the
 * existing YAHOO object will not be overwritten so that defined
 * namespaces are preserved.
 * @id YAHOO
 * @class YAHOO
 * @static
 */

/**
 * Returns the namespace specified and creates it if it doesn't exist
 * <pre>
 * YAHOO.namespace("property.package");
 * YAHOO.namespace("YAHOO.property.package");
 * </pre>
 * Either of the above would create YAHOO.property, then
 * YAHOO.property.package
 *
 * Be careful when naming packages. Reserved words may work in some browsers
 * and not others. For instance, the following will fail in Safari:
 * <pre>
 * YAHOO.namespace("really.long.nested.namespace");
 * </pre>
 * This fails because "long" is a future reserved word in ECMAScript
 *
 * @id YAHOO.namespace
 * @method namespace
 * @static
 * @param  {String*} arguments 1-n namespaces to create
 * @return {Object}  A reference to the last namespace object created
 */

/**
 * Uses YAHOO.widget.Logger to output a log message, if the widget is
 * available.
 *
 * @id YAHOO.log
 * @method log
 * @static
 * @param  {String}  msg  The message to log.
 * @param  {String}  cat  The log category for the message.  Default
 *                        categories are "info", "warn", "error", time".
 *                        Custom categories can be used as well. (opt)
 * @param  {String}  src  The source of the the message (opt)
 * @return {Boolean}      True if the log operation was successful.
 */

/**
 * Registers a module with the YAHOO object
 * @id YAHOO.register
 * @method register
 * @static
 * @param {String}   name    the name of the module (event, slider, etc)
 * @param {Function} mainClass a reference to class in the module.  This
 *                             class will be tagged with the version info
 *                             so that it will be possible to identify the
 *                             version that is in use when multiple versions
 *                             have loaded
 * @param {Object}   data      metadata object for the module.  Currently it
 *                             is expected to contain a "version" property
 *                             and a "build" property at minimum.
 */

/**
 * YAHOO.env is used to keep track of what is known about the YUI library and
 * the browsing environment
 * @id YAHOO.env
 * @class YAHOO.env
 * @static
 */

/**
 * Keeps the version info for all YUI modules that have reported themselves
 * @id YAHOO.env.modules
 * @property modules
 * @type Object[]
 */

/**
 * List of functions that should be executed every time a YUI module
 * reports itself.
 * @id YAHOO.env.listeners
 * @property listeners
 * @type Function[]
 */

/**
 * Returns the version data for the specified module:
 *      <dl>
 *      <dt>name:</dt>      <dd>The name of the module</dd>
 *      <dt>version:</dt>   <dd>The version in use</dd>
 *      <dt>build:</dt>     <dd>The build number in use</dd>
 *      <dt>versions:</dt>  <dd>All versions that were registered</dd>
 *      <dt>builds:</dt>    <dd>All builds that were registered.</dd>
 *      <dt>mainClass:</dt> <dd>An object that was was stamped with the
 *                 current version and build. If
 *                 mainClass.VERSION != version or mainClass.BUILD != build,
 *                 multiple versions of pieces of the library have been
 *                 loaded, potentially causing issues.</dd>
 *       </dl>
 *
 * @id YAHOO.env.getVersion
 * @method getVersion
 * @static
 * @param {String}  name the name of the module (event, slider, etc)
 * @return {Object} The version info
 */

/**
 * Do not fork for a browser if it can be avoided.  Use feature detection when
 * you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version
 * number for the browser engine, 0 otherwise.  This value may or may not map
 * to the version number of the browser using the engine.  The value is
 * presented as a float so that it can easily be used for boolean evaluation
 * as well as for looking for a particular range of versions.  Because of this,
 * some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9
 * reports 1.8).
 * @id YAHOO.env.ua
 * @class YAHOO.env.ua
 * @static
 */

/**
 * Internet Explorer version number or 0.  Example: 6
 * @id YAHOO.env.ua.ie
 * @property ie
 * @type float
 */

/**
 * Opera version number or 0.  Example: 9.2
 * @id YAHOO.env.ua.opera
 * @property opera
 * @type float
 */

/**
 * Gecko engine revision number.  Will evaluate to 1 if Gecko
 * is detected but the revision could not be found. Other browsers
 * will be 0.  Example: 1.8
 * <pre>
 * Firefox 1.0.0.4: 1.7.8   <-- Reports 1.7
 * Firefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8
 * Firefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8
 * Firefox 3 alpha: 1.9a4   <-- Reports 1.9
 * </pre>
 * @id YAHOO.env.ua.gecko
 * @property gecko
 * @type float
 */

/**
 * AppleWebKit version.  KHTML browsers that are not WebKit browsers
 * will evaluate to 1, other browsers 0.  Example: 418.9.1
 * <pre>
 * Safari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the
 *                                   latest available for Mac OSX 10.3.
 * Safari 2.0.2:         416     <-- hasOwnProperty introduced
 * Safari 2.0.4:         418     <-- preventDefault fixed
 * Safari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run
 *                                   different versions of webkit
 * Safari 2.0.4 (419.3): 419     <-- Tiger installations that have been
 *                                   updated, but not updated
 *                                   to the latest patch.
 * Webkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG
 *                                   and many major issues fixed).
 * Safari 3.0.4 (523.12):523.12  <-- First Tiger release - automatic update
 *                                   from 2.x via the 10.4.11 OS patch
 * Webkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event
 *
 * </pre>
 * http://developer.apple.com/internet/safari/uamatrix.html
 * @id YAHOO.env.ua.webkit
 * @property webkit
 * @type float
 */

/**
 * The mobile property will be set to a string containing any relevant
 * user agent information when a modern mobile browser is detected.
 * Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series
 * devices with the WebKit-based browser, and Opera Mini.
 * @id YAHOO.env.ua.mobile
 * @property mobile
 * @type string
 */

/**
 * Provides the language utilites and extensions used by the library
 * @id YAHOO.lang
 * @class YAHOO.lang
 */

/**
 * Determines whether or not the provided object is an array.
 * Testing typeof/instanceof/constructor of arrays across frame
 * boundaries isn't possible in Safari unless you have a reference
 * to the other frame to test against its Array prototype.  To
 * handle this case, we test well-known array properties instead.
 * properties.
 * @id YAHOO.lang.isArray
 * @method isArray
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a boolean
 * @id YAHOO.lang.isBoolean
 * @method isBoolean
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a function
 * @id YAHOO.lang.isFunction
 * @method isFunction
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is null
 * @id YAHOO.lang.isNull
 * @method isNull
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a legal number
 * @id YAHOO.lang.isNumber
 * @method isNumber
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is of type object
 * or function
 * @id YAHOO.lang.isObject
 * @method isObject
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a string
 * @id YAHOO.lang.isString
 * @method isString
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is undefined
 * @id YAHOO.lang.isUndefined
 * @method isUndefined
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the property was added
 * to the object instance.  Returns false if the property is not present
 * in the object, or was inherited from the prototype.
 * This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.
 * There is a discrepancy between YAHOO.lang.hasOwnProperty and
 * Object.prototype.hasOwnProperty when the property is a primitive added to
 * both the instance AND prototype with the same value:
 * <pre>
 * var A = function() {};
 * A.prototype.foo = 'foo';
 * var a = new A();
 * a.foo = 'foo';
 * alert(a.hasOwnProperty('foo')); // true
 * alert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback
 * </pre>
 * @id YAHOO.lang.hasOwnProperty
 * @method hasOwnProperty
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * IE will not enumerate native functions in a derived object even if the
 * function was overridden.  This is a workaround for specific functions
 * we care about on the Object prototype.
 * @id YAHOO.lang._IEEnumFix
 * @property _IEEnumFix
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @static
 * @private
 */

/**
 * Utility to set up the prototype, constructor and superclass properties to
 * support an inheritance strategy that can chain constructors and methods.
 * Static members will not be inherited.
 *
 * @id YAHOO.lang.extend
 * @method extend
 * @static
 * @param {Function} subc   the object to modify
 * @param {Function} superc the object to inherit
 * @param {Object} overrides  additional properties/methods to add to the
 *                              subclass prototype.  These will override the
 *                              matching items obtained from the superclass
 *                              if present.
 */

/**
 * Applies all properties in the supplier to the receiver if the
 * receiver does not have these properties yet.  Optionally, one or
 * more methods/properties can be specified (as additional
 * parameters).  This option will overwrite the property if receiver
 * has it already.  If true is passed as the third parameter, all
 * properties will be applied and _will_ overwrite properties in
 * the receiver.
 *
 * @id YAHOO.lang.augmentObject
 * @method augmentObject
 * @static
 * @since 2.3.0
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*|boolean}  arguments zero or more properties methods
 *        to augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would
 *        overwrite an existing property in the receiver. If true
 *        is specified as the third parameter, all properties will
 *        be applied and will overwrite an existing property in
 *        the receiver
 */

/**
 * Same as YAHOO.lang.augmentObject, except it only applies prototype properties
 * @id YAHOO.lang.augmentProto
 * @see YAHOO.lang.augmentObject
 * @method augmentProto
 * @static
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*|boolean}  arguments zero or more properties methods
 *        to augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would overwrite an existing
 *        property in the receiver.  if true is specified as the third
 *        parameter, all properties will be applied and will overwrite an
 *        existing property in the receiver
 */

/**
 * Returns a simple string representation of the object or array.
 * Other types of objects will be returned unprocessed.  Arrays
 * are expected to be indexed.  Use object notation for
 * associative arrays.
 * @id YAHOO.lang.dump
 * @method dump
 * @since 2.3.0
 * @param o {Object} The object to dump
 * @param d {int} How deep to recurse child objects, default 3
 * @return {String} the dump result
 */

/**
 * Does variable substitution on a string. It scans through the string
 * looking for expressions enclosed in { } braces. If an expression
 * is found, it is used a key on the object.  If there is a space in
 * the key, the first word is used for the key and the rest is provided
 * to an optional function to be used to programatically determine the
 * value (the extra information might be used for this decision). If
 * the value for the key in the object, or what is returned from the
 * function has a string value, number value, or object value, it is
 * substituted for the bracket expression and it repeats.  If this
 * value is an object, it uses the Object's toString() if this has
 * been overridden, otherwise it does a shallow dump of the key/value
 * pairs.
 * @id YAHOO.lang.substitute
 * @method substitute
 * @since 2.3.0
 * @param s {String} The string that will be modified.
 * @param o {Object} An object containing the replacement values
 * @param f {Function} An optional function that can be used to
 *                     process each match.  It receives the key,
 *                     value, and any extra metadata included with
 *                     the key inside of the braces.
 * @return {String} the substituted string
 */

/**
 * Returns a string without any leading or trailing whitespace.  If
 * the input is not a string, the input will be returned untouched.
 * @id YAHOO.lang.trim
 * @method trim
 * @since 2.3.0
 * @param s {string} the string to trim
 * @return {string} the trimmed string
 */

/**
 * Returns a new object containing all of the properties of
 * all the supplied objects.  The properties from later objects
 * will overwrite those in earlier objects.
 * @id YAHOO.lang.merge
 * @method merge
 * @since 2.3.0
 * @param arguments {Object*} the objects to merge
 * @return the new merged object
 */

/**
 * Executes the supplied function in the context of the supplied
 * object 'when' milliseconds later.  Executes the function a
 * single time unless periodic is set to true.
 * @id YAHOO.lang.later
 * @method later
 * @since 2.4.0
 * @param when {int} the number of milliseconds to wait until the fn
 * is executed
 * @param o the context object
 * @param fn {Function|String} the function to execute or the name of
 * the method in the 'o' object to execute
 * @param data [Array] data that is provided to the function.  This accepts
 * either a single item or an array.  If an array is provided, the
 * function is executed with one parameter for each array item.  If
 * you need to pass a single array parameter, it needs to be wrapped in
 * an array [myarray]
 * @param periodic {boolean} if true, executes continuously at supplied
 * interval until canceled
 * @return a timer object. Call the cancel() method on this object to
 * stop the timer.
 */

/**
 * A convenience method for detecting a legitimate non-null value.
 * Returns false for null/undefined/NaN, true for other values,
 * including 0/false/''
 * @id YAHOO.lang.isValue
 * @method isValue
 * @since 2.3.0
 * @param o {any} the item to test
 * @return {boolean} true if it is not null/undefined/NaN || false
 */

/**
 * Same as YAHOO.lang.augmentObject, except it only applies prototype
 * properties.  This is an alias for augmentProto.
 * @id YAHOO.lang.augment
 * @see YAHOO.lang.augmentObject
 * @method augment
 * @static
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*|boolean}  arguments zero or more properties methods to
 *        augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would
 *        overwrite an existing property in the receiver.  if true
 *        is specified as the third parameter, all properties will
 *        be applied and will overwrite an existing property in
 *        the receiver
 */

/**
 * An alias for YAHOO.lang.augment
 * @id YAHOO.lang.augment
 * @for YAHOO
 * @method augment
 * @static
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*}  arguments zero or more properties methods to
 *        augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would
 *        overwrite an existing property in the receiver
 */

/**
 * An alias for YAHOO.lang.extend
 * @id YAHOO.lang.extend
 * @method extend
 * @static
 * @param {Function} subc   the object to modify
 * @param {Function} superc the object to inherit
 * @param {Object} overrides  additional properties/methods to add to the
 *        subclass prototype.  These will override the
 *        matching items obtained from the superclass if present.
 */

/**
 * YAHOO_config is not included as part of the library.  Instead it is an
 * object that can be defined by the implementer immediately before
 * including the YUI library.  The properties included in this object
 * will be used to configure global properties needed as soon as the
 * library begins to load.
 * @id YAHOO_config
 * @class YAHOO_config
 * @static
 */

/**
 * A reference to a function that will be executed every time a YAHOO module
 * is loaded.  As parameter, this function will receive the version
 * information for the module. See
 * YAHOO.env.getVersion for the description of the version data structure.
 * @id YAHOO_config.listener
 * @property listener
 * @type Function
 * @static
 * @default undefined
 */

/**
 * Set to true if the library will be dynamically loaded after window.onload.
 * Defaults to false
 * @id YAHOO_config.injecting
 * @property injecting
 * @type boolean
 * @static
 * @default undefined
 */

/**
 * Instructs the yuiloader component to dynamically load yui components and
 * their dependencies.  See the yuiloader documentation for more information
 * about dynamic loading
 * @id YAHOO_config.load
 * @property load
 * @static
 * @default undefined
 * @see yuiloader
 */

/**
 * Forces the use of the supplied locale where applicable in the library
 * @id YAHOO_config.locale
 * @property locale
 * @type string
 * @static
 * @default undefined
 */

/**
 * The YAHOO global namespace object.  If YAHOO is already defined, the
 * existing YAHOO object will not be overwritten so that defined
 * namespaces are preserved.
 * @id YAHOO
 * @class YAHOO
 * @static
 */

/**
 * Returns the namespace specified and creates it if it doesn't exist
 * <pre>
 * YAHOO.namespace("property.package");
 * YAHOO.namespace("YAHOO.property.package");
 * </pre>
 * Either of the above would create YAHOO.property, then
 * YAHOO.property.package
 *
 * Be careful when naming packages. Reserved words may work in some browsers
 * and not others. For instance, the following will fail in Safari:
 * <pre>
 * YAHOO.namespace("really.long.nested.namespace");
 * </pre>
 * This fails because "long" is a future reserved word in ECMAScript
 *
 * @id YAHOO.namespace
 * @method namespace
 * @static
 * @param  {String*} arguments 1-n namespaces to create
 * @return {Object}  A reference to the last namespace object created
 */

/**
 * Uses YAHOO.widget.Logger to output a log message, if the widget is
 * available.
 *
 * @id YAHOO.log
 * @method log
 * @static
 * @param  {String}  msg  The message to log.
 * @param  {String}  cat  The log category for the message.  Default
 *                        categories are "info", "warn", "error", time".
 *                        Custom categories can be used as well. (opt)
 * @param  {String}  src  The source of the the message (opt)
 * @return {Boolean}      True if the log operation was successful.
 */

/**
 * Registers a module with the YAHOO object
 * @id YAHOO.register
 * @method register
 * @static
 * @param {String}   name    the name of the module (event, slider, etc)
 * @param {Function} mainClass a reference to class in the module.  This
 *                             class will be tagged with the version info
 *                             so that it will be possible to identify the
 *                             version that is in use when multiple versions
 *                             have loaded
 * @param {Object}   data      metadata object for the module.  Currently it
 *                             is expected to contain a "version" property
 *                             and a "build" property at minimum.
 */

/**
 * YAHOO.env is used to keep track of what is known about the YUI library and
 * the browsing environment
 * @id YAHOO.env
 * @class YAHOO.env
 * @static
 */

/**
 * Keeps the version info for all YUI modules that have reported themselves
 * @id YAHOO.env.modules
 * @property modules
 * @type Object[]
 */

/**
 * List of functions that should be executed every time a YUI module
 * reports itself.
 * @id YAHOO.env.listeners
 * @property listeners
 * @type Function[]
 */

/**
 * Returns the version data for the specified module:
 *      <dl>
 *      <dt>name:</dt>      <dd>The name of the module</dd>
 *      <dt>version:</dt>   <dd>The version in use</dd>
 *      <dt>build:</dt>     <dd>The build number in use</dd>
 *      <dt>versions:</dt>  <dd>All versions that were registered</dd>
 *      <dt>builds:</dt>    <dd>All builds that were registered.</dd>
 *      <dt>mainClass:</dt> <dd>An object that was was stamped with the
 *                 current version and build. If
 *                 mainClass.VERSION != version or mainClass.BUILD != build,
 *                 multiple versions of pieces of the library have been
 *                 loaded, potentially causing issues.</dd>
 *       </dl>
 *
 * @id YAHOO.env.getVersion
 * @method getVersion
 * @static
 * @param {String}  name the name of the module (event, slider, etc)
 * @return {Object} The version info
 */

/**
 * Do not fork for a browser if it can be avoided.  Use feature detection when
 * you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version
 * number for the browser engine, 0 otherwise.  This value may or may not map
 * to the version number of the browser using the engine.  The value is
 * presented as a float so that it can easily be used for boolean evaluation
 * as well as for looking for a particular range of versions.  Because of this,
 * some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9
 * reports 1.8).
 * @id YAHOO.env.ua
 * @class YAHOO.env.ua
 * @static
 */

/**
 * Internet Explorer version number or 0.  Example: 6
 * @id YAHOO.env.ua.ie
 * @property ie
 * @type float
 */

/**
 * Opera version number or 0.  Example: 9.2
 * @id YAHOO.env.ua.opera
 * @property opera
 * @type float
 */

/**
 * Gecko engine revision number.  Will evaluate to 1 if Gecko
 * is detected but the revision could not be found. Other browsers
 * will be 0.  Example: 1.8
 * <pre>
 * Firefox 1.0.0.4: 1.7.8   <-- Reports 1.7
 * Firefox 1.5.0.9: 1.8.0.9 <-- Reports 1.8
 * Firefox 2.0.0.3: 1.8.1.3 <-- Reports 1.8
 * Firefox 3 alpha: 1.9a4   <-- Reports 1.9
 * </pre>
 * @id YAHOO.env.ua.gecko
 * @property gecko
 * @type float
 */

/**
 * AppleWebKit version.  KHTML browsers that are not WebKit browsers
 * will evaluate to 1, other browsers 0.  Example: 418.9.1
 * <pre>
 * Safari 1.3.2 (312.6): 312.8.1 <-- Reports 312.8 -- currently the
 *                                   latest available for Mac OSX 10.3.
 * Safari 2.0.2:         416     <-- hasOwnProperty introduced
 * Safari 2.0.4:         418     <-- preventDefault fixed
 * Safari 2.0.4 (419.3): 418.9.1 <-- One version of Safari may run
 *                                   different versions of webkit
 * Safari 2.0.4 (419.3): 419     <-- Tiger installations that have been
 *                                   updated, but not updated
 *                                   to the latest patch.
 * Webkit 212 nightly:   522+    <-- Safari 3.0 precursor (with native SVG
 *                                   and many major issues fixed).
 * Safari 3.0.4 (523.12):523.12  <-- First Tiger release - automatic update
 *                                   from 2.x via the 10.4.11 OS patch
 * Webkit nightly 1/2008:525+    <-- Supports DOMContentLoaded event
 *
 * </pre>
 * http://developer.apple.com/internet/safari/uamatrix.html
 * @id YAHOO.env.ua.webkit
 * @property webkit
 * @type float
 */

/**
 * The mobile property will be set to a string containing any relevant
 * user agent information when a modern mobile browser is detected.
 * Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series
 * devices with the WebKit-based browser, and Opera Mini.
 * @id YAHOO.env.ua.mobile
 * @property mobile
 * @type string
 */

/**
 * Provides the language utilites and extensions used by the library
 * @id YAHOO.lang
 * @class YAHOO.lang
 */

/**
 * Determines whether or not the provided object is an array.
 * Testing typeof/instanceof/constructor of arrays across frame
 * boundaries isn't possible in Safari unless you have a reference
 * to the other frame to test against its Array prototype.  To
 * handle this case, we test well-known array properties instead.
 * properties.
 * @id YAHOO.lang.isArray
 * @method isArray
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a boolean
 * @id YAHOO.lang.isBoolean
 * @method isBoolean
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a function
 * @id YAHOO.lang.isFunction
 * @method isFunction
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is null
 * @id YAHOO.lang.isNull
 * @method isNull
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a legal number
 * @id YAHOO.lang.isNumber
 * @method isNumber
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is of type object
 * or function
 * @id YAHOO.lang.isObject
 * @method isObject
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is a string
 * @id YAHOO.lang.isString
 * @method isString
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the provided object is undefined
 * @id YAHOO.lang.isUndefined
 * @method isUndefined
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * Determines whether or not the property was added
 * to the object instance.  Returns false if the property is not present
 * in the object, or was inherited from the prototype.
 * This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.
 * There is a discrepancy between YAHOO.lang.hasOwnProperty and
 * Object.prototype.hasOwnProperty when the property is a primitive added to
 * both the instance AND prototype with the same value:
 * <pre>
 * var A = function() {};
 * A.prototype.foo = 'foo';
 * var a = new A();
 * a.foo = 'foo';
 * alert(a.hasOwnProperty('foo')); // true
 * alert(YAHOO.lang.hasOwnProperty(a, 'foo')); // false when using fallback
 * </pre>
 * @id YAHOO.lang.hasOwnProperty
 * @method hasOwnProperty
 * @param {any} o The object being testing
 * @return {boolean} the result
 */

/**
 * IE will not enumerate native functions in a derived object even if the
 * function was overridden.  This is a workaround for specific functions
 * we care about on the Object prototype.
 * @id YAHOO.lang._IEEnumFix
 * @property _IEEnumFix
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @static
 * @private
 */

/**
 * Utility to set up the prototype, constructor and superclass properties to
 * support an inheritance strategy that can chain constructors and methods.
 * Static members will not be inherited.
 *
 * @id YAHOO.lang.extend
 * @method extend
 * @static
 * @param {Function} subc   the object to modify
 * @param {Function} superc the object to inherit
 * @param {Object} overrides  additional properties/methods to add to the
 *                              subclass prototype.  These will override the
 *                              matching items obtained from the superclass
 *                              if present.
 */

/**
 * Applies all properties in the supplier to the receiver if the
 * receiver does not have these properties yet.  Optionally, one or
 * more methods/properties can be specified (as additional
 * parameters).  This option will overwrite the property if receiver
 * has it already.  If true is passed as the third parameter, all
 * properties will be applied and _will_ overwrite properties in
 * the receiver.
 *
 * @id YAHOO.lang.augmentObject
 * @method augmentObject
 * @static
 * @since 2.3.0
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*|boolean}  arguments zero or more properties methods
 *        to augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would
 *        overwrite an existing property in the receiver. If true
 *        is specified as the third parameter, all properties will
 *        be applied and will overwrite an existing property in
 *        the receiver
 */

/**
 * Same as YAHOO.lang.augmentObject, except it only applies prototype properties
 * @id YAHOO.lang.augmentProto
 * @see YAHOO.lang.augmentObject
 * @method augmentProto
 * @static
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*|boolean}  arguments zero or more properties methods
 *        to augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would overwrite an existing
 *        property in the receiver.  if true is specified as the third
 *        parameter, all properties will be applied and will overwrite an
 *        existing property in the receiver
 */

/**
 * Returns a simple string representation of the object or array.
 * Other types of objects will be returned unprocessed.  Arrays
 * are expected to be indexed.  Use object notation for
 * associative arrays.
 * @id YAHOO.lang.dump
 * @method dump
 * @since 2.3.0
 * @param o {Object} The object to dump
 * @param d {int} How deep to recurse child objects, default 3
 * @return {String} the dump result
 */

/**
 * Does variable substitution on a string. It scans through the string
 * looking for expressions enclosed in { } braces. If an expression
 * is found, it is used a key on the object.  If there is a space in
 * the key, the first word is used for the key and the rest is provided
 * to an optional function to be used to programatically determine the
 * value (the extra information might be used for this decision). If
 * the value for the key in the object, or what is returned from the
 * function has a string value, number value, or object value, it is
 * substituted for the bracket expression and it repeats.  If this
 * value is an object, it uses the Object's toString() if this has
 * been overridden, otherwise it does a shallow dump of the key/value
 * pairs.
 * @id YAHOO.lang.substitute
 * @method substitute
 * @since 2.3.0
 * @param s {String} The string that will be modified.
 * @param o {Object} An object containing the replacement values
 * @param f {Function} An optional function that can be used to
 *                     process each match.  It receives the key,
 *                     value, and any extra metadata included with
 *                     the key inside of the braces.
 * @return {String} the substituted string
 */

/**
 * Returns a string without any leading or trailing whitespace.  If
 * the input is not a string, the input will be returned untouched.
 * @id YAHOO.lang.trim
 * @method trim
 * @since 2.3.0
 * @param s {string} the string to trim
 * @return {string} the trimmed string
 */

/**
 * Returns a new object containing all of the properties of
 * all the supplied objects.  The properties from later objects
 * will overwrite those in earlier objects.
 * @id YAHOO.lang.merge
 * @method merge
 * @since 2.3.0
 * @param arguments {Object*} the objects to merge
 * @return the new merged object
 */

/**
 * Executes the supplied function in the context of the supplied
 * object 'when' milliseconds later.  Executes the function a
 * single time unless periodic is set to true.
 * @id YAHOO.lang.later
 * @method later
 * @since 2.4.0
 * @param when {int} the number of milliseconds to wait until the fn
 * is executed
 * @param o the context object
 * @param fn {Function|String} the function to execute or the name of
 * the method in the 'o' object to execute
 * @param data [Array] data that is provided to the function.  This accepts
 * either a single item or an array.  If an array is provided, the
 * function is executed with one parameter for each array item.  If
 * you need to pass a single array parameter, it needs to be wrapped in
 * an array [myarray]
 * @param periodic {boolean} if true, executes continuously at supplied
 * interval until canceled
 * @return a timer object. Call the cancel() method on this object to
 * stop the timer.
 */

/**
 * A convenience method for detecting a legitimate non-null value.
 * Returns false for null/undefined/NaN, true for other values,
 * including 0/false/''
 * @id YAHOO.lang.isValue
 * @method isValue
 * @since 2.3.0
 * @param o {any} the item to test
 * @return {boolean} true if it is not null/undefined/NaN || false
 */

/**
 * Same as YAHOO.lang.augmentObject, except it only applies prototype
 * properties.  This is an alias for augmentProto.
 * @id YAHOO.lang.augment
 * @see YAHOO.lang.augmentObject
 * @method augment
 * @static
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*|boolean}  arguments zero or more properties methods to
 *        augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would
 *        overwrite an existing property in the receiver.  if true
 *        is specified as the third parameter, all properties will
 *        be applied and will overwrite an existing property in
 *        the receiver
 */

/**
 * An alias for YAHOO.lang.augment
 * @id YAHOO.lang.augment
 * @for YAHOO
 * @method augment
 * @static
 * @param {Function} r  the object to receive the augmentation
 * @param {Function} s  the object that supplies the properties to augment
 * @param {String*}  arguments zero or more properties methods to
 *        augment the receiver with.  If none specified, everything
 *        in the supplier will be used unless it would
 *        overwrite an existing property in the receiver
 */

/**
 * An alias for YAHOO.lang.extend
 * @id YAHOO.lang.extend
 * @method extend
 * @static
 * @param {Function} subc   the object to modify
 * @param {Function} superc the object to inherit
 * @param {Object} overrides  additional properties/methods to add to the
 *        subclass prototype.  These will override the
 *        matching items obtained from the superclass if present.
 */

/**
 * Fetches and inserts one or more script or link nodes into the document
 * @id YAHOO.util.Get
 * @namespace YAHOO.util
 * @class YAHOO.util.Get
 */

/**
 * hash of queues to manage multiple requests
 * @id YAHOO.util.Get.queues
 * @property queues
 * @private
 */

/**
 * queue index used to generate transaction ids
 * @id YAHOO.util.Get.qidx
 * @property qidx
 * @type int
 * @private
 */

/**
 * node index used to generate unique node ids
 * @id YAHOO.util.Get.nidx
 * @property nidx
 * @type int
 * @private
 */

/**
 * interal property used to prevent multiple simultaneous purge
 * processes
 * @id YAHOO.util.Get.purging
 * @property purging
 * @type boolean
 * @private
 */

/**
 * Generates an HTML element, this is not appended to a document
 * @id YAHOO.util.Get._node
 * @method _node
 * @param type {string} the type of element
 * @param attr {string} the attributes
 * @param win {Window} optional window to create the element in
 * @return {HTMLElement} the generated node
 * @private
 */

/**
 * Generates a link node
 * @id YAHOO.util.Get._linkNode
 * @method _linkNode
 * @param url {string} the url for the css file
 * @param win {Window} optional window to create the node in
 * @return {HTMLElement} the generated node
 * @private
 */

/**
 * Generates a script node
 * @id YAHOO.util.Get._scriptNode
 * @method _scriptNode
 * @param url {string} the url for the script file
 * @param win {Window} optional window to create the node in
 * @return {HTMLElement} the generated node
 * @private
 */

/**
 * Returns the data payload for callback functions
 * @id YAHOO.util.Get._returnData
 * @method _returnData
 * @private
 */

/**
 * The request is complete, so executing the requester's callback
 * @id YAHOO.util.Get._finish
 * @method _finish
 * @param id {string} the id of the request
 * @private
 */

/**
 * Loads the next item for a given request
 * @id YAHOO.util.Get._next
 * @method _next
 * @param id {string} the id of the request
 * @param loaded {string} the url that was just loaded, if any
 * @private
 */

/**
 * Removes processed queues and corresponding nodes
 * @id YAHOO.util.Get._autoPurge
 * @method _autoPurge
 * @private
 */

/**
 * Removes the nodes for the specified queue
 * @id YAHOO.util.Get._purge
 * @method _purge
 * @private
 */

/**
 * Saves the state for the request and begins loading
 * the requested urls
 * @id YAHOO.util.Get.queue
 * @method queue
 * @param type {string} the type of node to insert
 * @param url {string} the url to load
 * @param opts the hash of options for this request
 * @private
 */

/**
 * Detects when a node has been loaded.  In the case of
 * script nodes, this does not guarantee that contained
 * script is ready to use.
 * @id YAHOO.util.Get._track
 * @method _track
 * @param type {string} the type of node to track
 * @param n {HTMLElement} the node to track
 * @param id {string} the id of the request
 * @param url {string} the url that is being loaded
 * @param win {Window} the targeted window
 * @param qlength the number of remaining items in the queue,
 * including this one
 * @param trackfn {Function} function to execute when finished
 * the default is _next
 * @private
 */

/**
 * The default poll freqency in ms, when needed
 * @id YAHOO.util.Get.POLL_FREQ
 * @property POLL_FREQ
 * @static
 * @type int
 * @default 10
 */

/**
 * The number of request required before an automatic purge.
 * property PURGE_THRESH
 * @id YAHOO.util.Get.PURGE_THRESH
 * @static
 * @type int
 * @default 20
 * @method PURGE_THRESH
 */

/**
 * The length time to poll for varName when loading a script in
 * Safari 2.x before the transaction fails.
 * property TIMEOUT
 * @id YAHOO.util.Get.TIMEOUT
 * @static
 * @type int
 * @default 2000
 * @method TIMEOUT
 */

/**
 * Called by the the helper for detecting script load in Safari
 * @id YAHOO.util.Get._finalize
 * @method _finalize
 * @param id {string} the transaction id
 * @private
 */

/**
 * Abort a transaction
 * @id YAHOO.util.Get.abort
 * @method abort
 * @param {string|object} either the tId or the object returned from
 * script() or css()
 */

/**
 * Fetches and inserts one or more script nodes into the head
 * of the current document or the document in a specified window.
 *
 * @id YAHOO.util.Get.script
 * @method script
 * @static
 * @param url {string|string[]} the url or urls to the script(s)
 * @param opts {object} Options:
 * <dl>
 * <dt>onSuccess</dt>
 * <dd>
 * callback to execute when the script(s) are finished loading
 * The callback receives an object back with the following
 * data:
 * <dl>
 * <dt>win</dt>
 * <dd>the window the script(s) were inserted into</dd>
 * <dt>data</dt>
 * <dd>the data object passed in when the request was made</dd>
 * <dt>nodes</dt>
 * <dd>An array containing references to the nodes that were
 * inserted</dd>
 * <dt>purge</dt>
 * <dd>A function that, when executed, will remove the nodes
 * that were inserted</dd>
 * <dt>
 * </dl>
 * </dd>
 * <dt>onFailure</dt>
 * <dd>
 * callback to execute when the script load operation fails
 * The callback receives an object back with the following
 * data:
 * <dl>
 * <dt>win</dt>
 * <dd>the window the script(s) were inserted into</dd>
 * <dt>data</dt>
 * <dd>the data object passed in when the request was made</dd>
 * <dt>nodes</dt>
 * <dd>An array containing references to the nodes that were
 * inserted successfully</dd>
 * <dt>purge</dt>
 * <dd>A function that, when executed, will remove any nodes
 * that were inserted</dd>
 * <dt>
 * </dl>
 * </dd>
 * <dt>scope</dt>
 * <dd>the execution context for the callbacks</dd>
 * <dt>win</dt>
 * <dd>a window other than the one the utility occupies</dd>
 * <dt>autopurge</dt>
 * <dd>
 * setting to true will let the utilities cleanup routine purge
 * the script once loaded
 * </dd>
 * <dt>data</dt>
 * <dd>
 * data that is supplied to the callback when the script(s) are
 * loaded.
 * </dd>
 * <dt>varName</dt>
 * <dd>
 * variable that should be available when a script is finished
 * loading.  Used to help Safari 2.x and below with script load
 * detection.  The type of this property should match what was
 * passed into the url parameter: if loading a single url, a
 * string can be supplied.  If loading multiple scripts, you
 * must supply an array that contains the variable name for
 * each script.
 * </dd>
 * </dl>
 * <pre>
 * // assumes yahoo, dom, and event are already on the page
 * &nbsp;&nbsp;YAHOO.util.Get.script(
 * &nbsp;&nbsp;["http://yui.yahooapis.com/2.3.1/build/dragdrop/dragdrop-min.js",
 * &nbsp;&nbsp;&nbsp;"http://yui.yahooapis.com/2.3.1/build/animation/animation-min.js"], &#123;
 * &nbsp;&nbsp;&nbsp;&nbsp;onSuccess: function(o) &#123;
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new YAHOO.util.DDProxy("dd1"); // also new o.reference("dd1"); would work
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log("won't cause error because YAHOO is the scope");
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.log(o.nodes.length === 2) // true
 * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// o.purge(); // optionally remove the script nodes immediately
 * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,
 * &nbsp;&nbsp;&nbsp;&nbsp;onFailure: function(o) &#123;
 * &nbsp;&nbsp;&nbsp;&nbsp;&#125;,
 * &nbsp;&nbsp;&nbsp;&nbsp;data: "foo",
 * &nbsp;&nbsp;&nbsp;&nbsp;scope: YAHOO,
 * &nbsp;&nbsp;&nbsp;&nbsp;// win: otherframe // target another window/frame
 * &nbsp;&nbsp;&nbsp;&nbsp;autopurge: true // allow the utility to choose when to remove the nodes
 * &nbsp;&nbsp;&#125;);
 * </pre>
 * @return {tId: string} an object containing info about the transaction
 */

/**
 * Fetches and inserts one or more css link nodes into the
 * head of the current document or the document in a specified
 * window.
 * @id YAHOO.util.Get.css
 * @method css
 * @static
 * @param url {string} the url or urls to the css file(s)
 * @param opts Options:
 * <dl>
 * <dt>onSuccess</dt>
 * <dd>
 * callback to execute when the css file(s) are finished loading
 * The callback receives an object back with the following
 * data:
 * <dl>win</dl>
 * <dd>the window the link nodes(s) were inserted into</dd>
 * <dt>data</dt>
 * <dd>the data object passed in when the request was made</dd>
 * <dt>nodes</dt>
 * <dd>An array containing references to the nodes that were
 * inserted</dd>
 * <dt>purge</dt>
 * <dd>A function that, when executed, will remove the nodes
 * that were inserted</dd>
 * <dt>
 * </dl>
 * </dd>
 * <dt>scope</dt>
 * <dd>the execution context for the callbacks</dd>
 * <dt>win</dt>
 * <dd>a window other than the one the utility occupies</dd>
 * <dt>data</dt>
 * <dd>
 * data that is supplied to the callbacks when the nodes(s) are
 * loaded.
 * </dd>
 * </dl>
 * <pre>
 *      YAHOO.util.Get.css("http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css");
 * </pre>
 * <pre>
 *      YAHOO.util.Get.css(["http://yui.yahooapis.com/2.3.1/build/menu/assets/skins/sam/menu.css",
 * </pre>
 * @return {tId: string} an object containing info about the transaction
 */

/**
 * YUILoader provides dynamic loading for YUI.
 * @id YAHOO.util.YUILoader
 * @class YAHOO.util.YUILoader
 * @todo
 *      version management, automatic sandboxing
 */

/**
 * Internal callback to handle multiple internal insert() calls
 * so that css is inserted prior to js
 * @id YAHOO.util.YUILoader._internalCallback
 * @property _internalCallback
 * @private
 */

/**
 * Use the YAHOO environment listener to detect script load.  This
 * is only switched on for Safari 2.x and below.
 * @id YAHOO.util.YUILoader._useYahooListener
 * @property _useYahooListener
 * @private
 */

/**
 * Callback that will be executed when the loader is finished
 * with an insert
 * @id YAHOO.util.YUILoader.onSuccess
 * @method onSuccess
 * @type function
 */

/**
 * Callback that will be executed if there is a failure
 * @id YAHOO.util.YUILoader.onFailure
 * @method onFailure
 * @type function
 */

/**
 * Callback that will be executed each time a new module is loaded
 * @id YAHOO.util.YUILoader.onProgress
 * @method onProgress
 * @type function
 */

/**
 * The execution scope for all callbacks
 * @id YAHOO.util.YUILoader.scope
 * @property scope
 * @default this
 */

/**
 * Data that is passed to all callbacks
 * @id YAHOO.util.YUILoader.data
 * @property data
 */

/**
 * The name of the variable in a sandbox or script node
 * (for external script support in Safari 2.x and earlier)
 * to reference when the load is complete.  If this variable
 * is not available in the specified scripts, the operation will
 * fail.
 * @id YAHOO.util.YUILoader.varName
 * @property varName
 * @type string
 */

/**
 * The base directory.
 * @id YAHOO.util.YUILoader.base
 * @property base
 * @type string
 * @default http://yui.yahooapis.com/[YUI VERSION]/build/
 */

/**
 * A list of modules that should not be loaded, even if
 * they turn up in the dependency tree
 * @id YAHOO.util.YUILoader.ignore
 * @property ignore
 * @type string[]
 */

/**
 * A list of modules that should always be loaded, even
 * if they have already been inserted into the page.
 * @id YAHOO.util.YUILoader.force
 * @property force
 * @type string
 */

/**
 * Should we allow rollups
 * @id YAHOO.util.YUILoader.allowRollup
 * @property allowRollup
 * @type boolean
 * @default true
 */

/**
 * A filter to apply to result urls.  This filter will modify the default
 * path for all modules.  The default path for the YUI library is the
 * minified version of the files (e.g., event-min.js).  The filter property
 * can be a predefined filter or a custom filter.  The valid predefined
 * filters are:
 * <dl>
 *  <dt>DEBUG</dt>
 *  <dd>Selects the debug versions of the library (e.g., event-debug.js).
 *      This option will automatically include the logger widget</dd>
 *  <dt>RAW</dt>
 *  <dd>Selects the non-minified version of the library (e.g., event.js).
 * </dl>
 * You can also define a custom filter, which must be an object literal
 * containing a search expression and a replace string:
 * <pre>
 *  myFilter: &#123;
 *      'searchExp': "-min\\.js",
 *      'replaceStr': "-debug.js"
 *  &#125;
 * </pre>
 * @id YAHOO.util.YUILoader.filter
 * @property filter
 * @type string|{searchExp: string, replaceStr: string}
 */

/**
 * The list of requested modules
 * @id YAHOO.util.YUILoader.required
 * @property required
 * @type {string: boolean}
 */

/**
 * The library metadata
 * @id YAHOO.util.YUILoader.moduleInfo
 * @property moduleInfo
 */

/**
 * List of rollup files found in the library metadata
 * @id YAHOO.util.YUILoader.rollups
 * @property rollups
 */

/**
 * Whether or not to load optional dependencies for
 * the requested modules
 * @id YAHOO.util.YUILoader.loadOptional
 * @property loadOptional
 * @type boolean
 * @default false
 */

/**
 * All of the derived dependencies in sorted order, which
 * will be populated when either calculate() or insert()
 * is called
 * @id YAHOO.util.YUILoader.sorted
 * @property sorted
 * @type string[]
 */

/**
 * Set when beginning to compute the dependency tree.
 * Composed of what YAHOO reports to be loaded combined
 * with what has been loaded by the tool
 * @id YAHOO.util.YUILoader.loaded
 * @property loaded
 * @type {string: boolean}
 */

/**
 * Flag to indicate the dependency tree needs to be recomputed
 * if insert is called again.
 * @id YAHOO.util.YUILoader.dirty
 * @property dirty
 * @type boolean
 * @default true
 */

/**
 * List of modules inserted by the utility
 * @id YAHOO.util.YUILoader.inserted
 * @property inserted
 * @type {string: boolean}
 */

/*** @id YAHOO.util.YUILoader.skin

 * Provides the information used to skin the skinnable components.
 * The following skin definition would result in 'skin1' and 'skin2'
 * being loaded for calendar (if calendar was requested), and
 * 'sam' for all other skinnable components:
 *
 *   <code>
 *   skin: {
 *
 *      // The default skin, which is automatically applied if not
 *      // overriden by a component-specific skin definition.
 *      // Change this in to apply a different skin globally
 *      defaultSkin: 'sam',
 *
 *      // This is combined with the loader base property to get
 *      // the default root directory for a skin. ex:
 *      // http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/
 *      base: 'assets/skins/',
 *
 *      // The name of the rollup css file for the skin
 *      path: 'skin.css',
 *
 *      // The number of skinnable components requested that are
 *      // required before using the rollup file rather than the
 *      // individual component css files
 *      rollup: 3,
 *
 *      // Any component-specific overrides can be specified here,
 *      // making it possible to load different skins for different
 *      // components.  It is possible to load more than one skin
 *      // for a given component as well.
 *      overrides: {
 *          calendar: ['skin1', 'skin2']
 *      }
 *   }
 *   </code>
 *   @property skin
 */

/** Add a new module to the component metadata.
 * <dl>
 *     <dt>name:</dt>       <dd>required, the component name</dd>
 *     <dt>type:</dt>       <dd>required, the component type (js or css)</dd>
 *     <dt>path:</dt>       <dd>required, the path to the script from "base"</dd>
 *     <dt>requires:</dt>   <dd>the modules required by this component</dd>
 *     <dt>optional:</dt>   <dd>the optional modules for this component</dd>
 *     <dt>supersedes:</dt> <dd>the modules this component replaces</dd>
 *     <dt>rollup:</dt>     <dd>the number of superseded modules required for automatic rollup</dd>
 *     <dt>fullpath:</dt>   <dd>If fullpath is specified, this is used instead of the configured base + path</dd>
 *     <dt>skinnable:</dt>  <dd>flag to determine if skin assets should automatically be pulled in</dd>
 * </dl>
 * @id YAHOO.util.YUILoader.addModule
 * @method addModule
 * @param o An object containing the module data
 * @return {boolean} true if the module was added, false if
 * the object passed in did not provide all required attributes
 */

/**
 * Add a requirement for one or more module
 * @id YAHOO.util.YUILoader.require
 * @method require
 * @param what {string[] | string*} the modules to load
 */

/**
 * Adds the skin def to the module info
 * @id YAHOO.util.YUILoader._addSkin
 * @method _addSkin
 * @private
 */

/**
 * Returns an object containing properties for all modules required
 * in order to load the requested module
 * @id YAHOO.util.YUILoader.getRequires
 * @method getRequires
 * @param mod The module definition from moduleInfo
 */

/**
 * Returns an object literal of the modules the supplied module satisfies
 * @id YAHOO.util.YUILoader.getProvides
 * @method getProvides
 * @param mod The module definition from moduleInfo
 * @return what this module provides
 */

/**
 * Calculates the dependency tree, the result is stored in the sorted
 * property
 * @id YAHOO.util.YUILoader.calculate
 * @method calculate
 * @param o optional options object
 */

/**
 * Investigates the current YUI configuration on the page.  By default,
 * modules already detected will not be loaded again unless a force
 * option is encountered.  Called by calculate()
 * @id YAHOO.util.YUILoader._setup
 * @method _setup
 * @private
 */

/**
 * Inspects the required modules list looking for additional
 * dependencies.  Expands the required list to include all
 * required modules.  Called by calculate()
 * @id YAHOO.util.YUILoader._explode
 * @method _explode
 * @private
 */

/**
 * Sets up the requirements for the skin assets if any of the
 * requested modules are skinnable
 * @id YAHOO.util.YUILoader._skin
 * @method _skin
 * @private
 */

/**
 * Returns the skin module name for the specified skin name.  If a
 * module name is supplied, the returned skin module name is
 * specific to the module passed in.
 * @id YAHOO.util.YUILoader.formatSkin
 * @method formatSkin
 * @param skin {string} the name of the skin
 * @param mod {string} optional: the name of a module to skin
 * @return {string} the full skin module name
 */

/**
 * Reverses <code>formatSkin</code>, providing the skin name and
 * module name if the string matches the pattern for skins.
 * @id YAHOO.util.YUILoader.parseSkin
 * @method parseSkin
 * @param mod {string} the module name to parse
 * @return {skin: string, module: string} the parsed skin name
 * and module name, or null if the supplied string does not match
 * the skin pattern
 */

/**
 * Look for rollup packages to determine if all of the modules a
 * rollup supersedes are required.  If so, include the rollup to
 * help reduce the total number of connections required.  Called
 * by calculate()
 * @id YAHOO.util.YUILoader._rollup
 * @method _rollup
 * @private
 */

/**
 * Remove superceded modules and loaded modules.  Called by
 * calculate() after we have the mega list of all dependencies
 * @id YAHOO.util.YUILoader._reduce
 * @method _reduce
 * @private
 */

/**
 * Sorts the dependency tree.  The last step of calculate()
 * @id YAHOO.util.YUILoader._sort
 * @method _sort
 * @private
 */

/**
 * inserts the requested modules and their dependencies.
 * <code>type</code> can be "js" or "css".  Both script and
 * css are inserted if type is not provided.
 * @id YAHOO.util.YUILoader.insert
 * @method insert
 * @param o optional options object
 * @param type {string} the type of dependency to insert
 */

/**
 * Executed every time a module is loaded, and if we are in a load
 * cycle, we attempt to load the next script.  Public so that it
 * is possible to call this if using a method other than
 * YAHOO.register to determine when scripts are fully loaded
 * @id YAHOO.util.YUILoader.loadNext
 * @method loadNext
 * @param mname {string} optional the name of the module that has
 * been loaded (which is usually why it is time to load the next
 * one)
 */

/**
 * In IE, the onAvailable/onDOMReady events need help when Event is
 * loaded dynamically
 * @id YAHOO.util.YUILoader._pushEvents
 * @method _pushEvents
 * @param {Function} optional function reference
 * @private
 */

/**
 * Test case containing various tests to run.
 * @id YAHOO.tool.TestCase
 * @param template An object containing any number of test methods, other methods,
 *                 an optional name, and anything else the test case needs.
 * @class TestCase
 * @namespace YAHOO.tool
 * @constructor
 */

/**
 * Resumes a paused test and runs the given function.
 * @id YAHOO.tool.TestCase.resume
 * @param {Function} segment (Optional) The function to run.
 *      If omitted, the test automatically passes.
 * @return {Void}
 * @method resume
 */

/**
 * Causes the test case to wait a specified amount of time and then
 * continue executing the given code.
 * @id YAHOO.tool.TestCase.wait
 * @param {Function} segment (Optional) The function to run after the delay.
 *      If omitted, the TestRunner will wait until resume() is called.
 * @param {int} delay (Optional) The number of milliseconds to wait before running
 *      the function. If omitted, defaults to zero.
 * @return {Void}
 * @method wait
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestCase.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestCase.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Represents a stoppage in test execution to wait for an amount of time before
 * continuing.
 * @id YAHOO.tool.TestCase.Wait
 * @param {Function} segment A function to run when the wait is over.
 * @param {int} delay The number of milliseconds to wait before running the code.
 * @class Wait
 * @namespace YAHOO.tool.TestCase
 * @constructor
 *
 */

/**
 * The segment of code to run when the wait is over.
 * @id YAHOO.tool.TestCase.Wait.segment
 * @type Function
 * @property segment
 */

/**
 * The delay before running the segment of code.
 * @id YAHOO.tool.TestCase.Wait.delay
 * @type int
 * @property delay
 */

/**
 * A test suite that can contain a collection of TestCase and TestSuite objects.
 * @id YAHOO.tool.TestSuite
 * @param {String||Object} data The name of the test suite or an object containing
 *      a name property as well as setUp and tearDown methods.
 * @namespace YAHOO.tool
 * @class TestSuite
 * @constructor
 */

/**
 * The name of the test suite.
 * @id YAHOO.tool.TestSuite.name
 * @type String
 * @property name
 */

/**
 * Adds a test suite or test case to the test suite.
 * @id YAHOO.tool.TestSuite.add
 * @param {YAHOO.tool.TestSuite||YAHOO.tool.TestCase} testObject The test suite or test case to add.
 * @return {Void}
 * @method add
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestSuite.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestSuite.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Runs test suites and test cases, providing events to allowing for the
 * interpretation of test results.
 * @id YAHOO.tool.TestRunner
 * @namespace YAHOO.tool
 * @class TestRunner
 * @static
 */

/**
 * A node in the test tree structure. May represent a TestSuite, TestCase, or
 * test function.
 * @id YAHOO.tool.TestNode
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @class TestNode
 * @constructor
 * @private
 */

/**
 * The TestSuite, TestCase, or test function represented by this node.
 * @id YAHOO.tool.TestNode.testObject
 * @type Variant
 * @property testObject
 */

/**
 * Pointer to this node's first child.
 * @id YAHOO.tool.TestNode.firstChild
 * @type TestNode
 * @property firstChild
 */

/**
 * Pointer to this node's last child.
 * @id YAHOO.tool.TestNode.lastChild
 * @type TestNode
 * @property lastChild
 */

/**
 * Pointer to this node's parent.
 * @id YAHOO.tool.TestNode.parent
 * @type TestNode
 * @property parent
 */

/**
 * Pointer to this node's next sibling.
 * @id YAHOO.tool.TestNode.next
 * @type TestNode
 * @property next
 */

/**
 * Test results for this test object.
 * @id YAHOO.tool.TestNode.results
 * @type object
 * @property results
 */

/**
 * Appends a new test object (TestSuite, TestCase, or test function name) as a child
 * of this node.
 * @id YAHOO.tool.TestNode.appendChild
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @return {Void}
 * @method appendChild
 */

/**
 * Suite on which to attach all TestSuites and TestCases to be run.
 * @id YAHOO.tool.TestNode.masterSuite
 * @type YAHOO.tool.TestSuite
 * @property masterSuite
 * @private
 */

/**
 * Pointer to the current node in the test tree.
 * @id YAHOO.tool.TestNode._cur
 * @type TestNode
 * @private
 * @property _cur
 */

/**
 * Pointer to the root node in the test tree.
 * @id YAHOO.tool.TestNode._root
 * @type TestNode
 * @private
 * @property _root
 */

/**
 * Fires when a test case is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testcasebegin
 * @event testcasebegin
 */

/**
 * Fires when all tests in a test case have been executed.
 * @id YAHOO.tool.TestNode.testcasecomplete
 * @event testcasecomplete
 */

/**
 * Fires when a test suite is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testsuitebegin
 * @event testsuitebegin
 */

/**
 * Fires when all test cases in a test suite have been
 * completed.
 * @id YAHOO.tool.TestNode.testsuitecomplete
 * @event testsuitecomplete
 */

/**
 * Fires when a test has passed.
 * @id YAHOO.tool.TestNode.pass
 * @event pass
 */

/**
 * Fires when a test has failed.
 * @id YAHOO.tool.TestNode.fail
 * @event fail
 */

/**
 * Fires when a test has been ignored.
 * @id YAHOO.tool.TestNode.ignore
 * @event ignore
 */

/**
 * Fires when all test suites and test cases have been completed.
 * @id YAHOO.tool.TestNode.complete
 * @event complete
 */

/**
 * Fires when the run() method is called.
 * @id YAHOO.tool.TestNode.begin
 * @event begin
 */

/**
 * Adds a test case to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestCaseToTestTree
 * @param {TestNode} parentNode The node to add the test case to as a child.
 * @param {YAHOO.tool.TestCase} testCase The test case to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestCaseToTestTree
 */

/**
 * Adds a test suite to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestSuiteToTestTree
 * @param {TestNode} parentNode The node to add the test suite to as a child.
 * @param {YAHOO.tool.TestSuite} testSuite The test suite to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestSuiteToTestTree
 */

/**
 * Builds the test tree based on items in the master suite. The tree is a hierarchical
 * representation of the test suites, test cases, and test functions. The resulting tree
 * is stored in _root and the pointer _cur is set to the root initially.
 * @id YAHOO.tool.TestNode._buildTestTree
 * @return {Void}
 * @static
 * @private
 * @method _buildTestTree
 */

/**
 * Handles the completion of a test object's tests. Tallies test results
 * from one level up to the next.
 * @id YAHOO.tool.TestNode._handleTestObjectComplete
 * @param {TestNode} node The TestNode representing the test object.
 * @return {Void}
 * @method _handleTestObjectComplete
 * @private
 */

/**
 * Retrieves the next node in the test tree.
 * @id YAHOO.tool.TestNode._next
 * @return {TestNode} The next node in the test tree or null if the end is reached.
 * @private
 * @static
 * @method _next
 */

/**
 * Runs a test case or test suite, returning the results.
 * @id YAHOO.tool.TestNode._run
 * @param {YAHOO.tool.TestCase|YAHOO.tool.TestSuite} testObject The test case or test suite to run.
 * @return {Object} Results of the execution with properties passed, failed, and total.
 * @private
 * @method _run
 * @static
 */

/**
 * Adds a test suite or test case to the list of test objects to run.
 * @id YAHOO.tool.TestNode.add
 * @param testObject Either a TestCase or a TestSuite that should be run.
 * @return {Void}
 * @method add
 * @static
 */

/**
 * Removes all test objects from the runner.
 * @id YAHOO.tool.TestNode.clear
 * @return {Void}
 * @method clear
 * @static
 */

/**
 * Resumes the TestRunner after wait() was called.
 * @id YAHOO.tool.TestNode.resume
 * @param {Function} segment The function to run as the rest
 *      of the haulted test.
 * @return {Void}
 * @method resume
 * @static
 */

/**
 * Runs the test suite.
 * @id YAHOO.tool.TestNode.run
 * @return {Void}
 * @method run
 * @static
 */

/**
 * The Assert object provides functions to test JavaScript values against
 * known and expected results. Whenever a comparison (assertion) fails,
 * an error is thrown.
 *
 * @id YAHOO.util.Assert
 * @namespace YAHOO.util
 * @class Assert
 * @static
 */

/**
 * Forces an assertion error to occur.
 * @id YAHOO.util.Assert.fail
 * @param {String} message (Optional) The message to display with the failure.
 * @method fail
 * @static
 */

/**
 * Asserts that a value is equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areEqual
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a value is not equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areNotEqual
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotEqual
 * @static
 */

/**
 * Asserts that a value is not the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areNotSame
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotSame
 * @static
 */

/**
 * Asserts that a value is the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areSame
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areSame
 * @static
 */

/**
 * Asserts that a value is false. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isFalse
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFalse
 * @static
 */

/**
 * Asserts that a value is true. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isTrue
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTrue
 * @static
 */

/**
 * Asserts that a value is not a number.
 * @id YAHOO.util.Assert.isNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNaN
 * @static
 */

/**
 * Asserts that a value is not the special NaN value.
 * @id YAHOO.util.Assert.isNotNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNaN
 * @static
 */

/**
 * Asserts that a value is not null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNull
 * @static
 */

/**
 * Asserts that a value is not undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotUndefined
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotUndefined
 * @static
 */

/**
 * Asserts that a value is null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNull
 * @static
 */

/**
 * Asserts that a value is undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isUndefined
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isUndefined
 * @static
 */

/**
 * Asserts that a value is an array.
 * @id YAHOO.util.Assert.isArray
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isArray
 * @static
 */

/**
 * Asserts that a value is a Boolean.
 * @id YAHOO.util.Assert.isBoolean
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isBoolean
 * @static
 */

/**
 * Asserts that a value is a function.
 * @id YAHOO.util.Assert.isFunction
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFunction
 * @static
 */

/**
 * Asserts that a value is an instance of a particular object. This may return
 * incorrect results when comparing objects from one frame to constructors in
 * another frame. For best results, don't use in a cross-frame manner.
 * @id YAHOO.util.Assert.isInstanceOf
 * @param {Function} expected The function that the object should be an instance of.
 * @param {Object} actual The object to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isInstanceOf
 * @static
 */

/**
 * Asserts that a value is a number.
 * @id YAHOO.util.Assert.isNumber
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNumber
 * @static
 */

/**
 * Asserts that a value is an object.
 * @id YAHOO.util.Assert.isObject
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isObject
 * @static
 */

/**
 * Asserts that a value is a string.
 * @id YAHOO.util.Assert.isString
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isString
 * @static
 */

/**
 * Asserts that a value is of a particular type.
 * @id YAHOO.util.Assert.isTypeOf
 * @param {String} expectedType The expected type of the variable.
 * @param {Object} actualValue The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTypeOf
 * @static
 */

/**
 * AssertionError is thrown whenever an assertion fails. It provides methods
 * to more easily get at error information and also provides a base class
 * from which more specific assertion errors can be derived.
 *
 * @id YAHOO.util.AssertionError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @class AssertionError
 * @extends Error
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.AssertionError.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This should
 * be overridden by all subclasses to provide specific information.
 * @id YAHOO.util.AssertionError.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * Returns a string representation of the error.
 * @id YAHOO.util.AssertionError.toString
 * @method toString
 * @return {String} A string representation of the error.
 */

/**
 * Returns a primitive value version of the error. Same as toString().
 * @id YAHOO.util.AssertionError.valueOf
 * @method valueOf
 * @return {String} A primitive value version of the error.
 */

/**
 * ComparisonFailure is subclass of AssertionError that is thrown whenever
 * a comparison between two values fails. It provides mechanisms to retrieve
 * both the expected and actual value.
 *
 * @id YAHOO.util.ComparisonFailure
 * @param {String} message The message to display when the error occurs.
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value that caused the assertion to fail.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ComparisonFailure
 * @constructor
 */

/**
 * The expected value.
 * @id YAHOO.util.ComparisonFailure.expected
 * @type Object
 * @property expected
 */

/**
 * The actual value.
 * @id YAHOO.util.ComparisonFailure.actual
 * @type Object
 * @property actual
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ComparisonFailure.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This message
 * provides information about the expected and actual values.
 * @id YAHOO.util.ComparisonFailure.toString
 * @method toString
 * @return {String} A string describing the error.
 */

/**
 * UnexpectedValue is subclass of AssertionError that is thrown whenever
 * a value was unexpected in its scope. This typically means that a test
 * was performed to determine that a value was *not* equal to a certain
 * value.
 *
 * @id YAHOO.util.UnexpectedValue
 * @param {String} message The message to display when the error occurs.
 * @param {Object} unexpected The unexpected value.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedValue
 * @constructor
 */

/**
 * The unexpected value.
 * @id YAHOO.util.UnexpectedValue.unexpected
 * @type Object
 * @property unexpected
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedValue.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. The message
 * contains information about the unexpected value that was encountered.
 * @id YAHOO.util.UnexpectedValue.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * ShouldFail is subclass of AssertionError that is thrown whenever
 * a test was expected to fail but did not.
 *
 * @id YAHOO.util.ShouldFail
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldFail
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldFail.name
 * @type String
 * @property name
 */

/**
 * ShouldError is subclass of AssertionError that is thrown whenever
 * a test is expected to throw an error but doesn't.
 *
 * @id YAHOO.util.ShouldError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldError
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldError.name
 * @type String
 * @property name
 */

/**
 * UnexpectedError is subclass of AssertionError that is thrown whenever
 * an error occurs within the course of a test and the test was not expected
 * to throw an error.
 *
 * @id YAHOO.util.UnexpectedError
 * @param {Error} cause The unexpected error that caused this error to be
 *                      thrown.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedError
 * @constructor
 */

/**
 * The unexpected error that occurred.
 * @id YAHOO.util.UnexpectedError.cause
 * @type Error
 * @property cause
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedError.name
 * @type String
 * @property name
 */

/**
 * The ArrayAssert object provides functions to test JavaScript array objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ArrayAssert
 * @namespace YAHOO.util
 * @class ArrayAssert
 * @static
 */

/**
 * Asserts that a value is present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.contains
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method contains
 * @static
 */

/**
 * Asserts that a set of values are present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * be found.
 * @id YAHOO.util.ArrayAssert.containsItems
 * @param {Object[]} needles An array of values that are expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsItems
 * @static
 */

/**
 * Asserts that a value matching some condition is present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.containsMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsMatch
 * @static
 */

/**
 * Asserts that a value is not present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.doesNotContain
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContain
 * @static
 */

/**
 * Asserts that a set of values are not present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * not be found.
 * @id YAHOO.util.ArrayAssert.doesNotContainItems
 * @param {Object[]} needles An array of values that are not expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainItems
 * @static
 */

/**
 * Asserts that no values matching a condition are present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.doesNotContainMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainMatch
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.indexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method indexOf
 * @static
 */

/**
 * Asserts that the values in an array are equal, and in the same position,
 * as values in another array. This uses the double equals sign
 * so type cohersion may occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEqual
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreEqual
 * @static
 */

/**
 * Asserts that the values in an array are equivalent, and in the same position,
 * as values in another array. This uses a function to determine if the values
 * are equivalent. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEquivalent
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {Function} comparator A function that returns true if the values are equivalent
 *      or false if not.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @return {Void}
 * @method itemsAreEquivalent
 * @static
 */

/**
 * Asserts that an array is empty.
 * @id YAHOO.util.ArrayAssert.isEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isEmpty
 * @static
 */

/**
 * Asserts that an array is not empty.
 * @id YAHOO.util.ArrayAssert.isNotEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotEmpty
 * @static
 */

/**
 * Asserts that the values in an array are the same, and in the same position,
 * as values in another array. This uses the triple equals sign
 * so no type cohersion will occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreSame
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreSame
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index,
 * starting from the back of the array.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.lastIndexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method lastIndexOf
 * @static
 */

/**
 * The ObjectAssert object provides functions to test JavaScript objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ObjectAssert
 * @namespace YAHOO.util
 * @class ObjectAssert
 * @static
 */

/**
 * Asserts that all properties in the object exist in another object.
 * @id YAHOO.util.ObjectAssert.propertiesAreEqual
 * @param {Object} expected An object with the expected properties.
 * @param {Object} actual An object with the actual properties.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method propertiesAreEqual
 * @static
 */

/**
 * Asserts that an object has a property with the given name.
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * Asserts that a property with the given name exists on an object instance (not on its prototype).
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * The DateAssert object provides functions to test JavaScript Date objects
 * for a variety of cases.
 *
 * @id YAHOO.util.DateAssert
 * @namespace YAHOO.util
 * @class DateAssert
 * @static
 */

/**
 * Asserts that a date's month, day, and year are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a date's hour, minutes, and seconds are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * The UserAction object provides functions that simulate events occurring in
 * the browser. Since these are simulated events, they do not behave exactly
 * as regular, user-initiated events do, but can be used to test simple
 * user interactions safely.
 *
 * @id YAHOO.util.UserAction
 * @namespace YAHOO.util
 * @class UserAction
 * @static
 */

/**
 * Simulates a key event using the given event information to populate
 * the generated event object. This method does browser-equalizing
 * calculations to account for differences in the DOM and IE event models
 * as well as different browser quirks. Note: keydown causes Safari 2.x to
 * crash.
 * @id YAHOO.util.UserAction.simulateKeyEvent
 * @method simulateKeyEvent
 * @private
 * @static
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: keyup, keydown, and keypress.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 3 specifies that all key events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 3 specifies that all
 *      key events can be cancelled. The default
 *      is true.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {int} keyCode (Optional) The code for the key that is in use.
 *      The default is 0.
 * @param {int} charCode (Optional) The Unicode code for the character
 *      associated with the key being used. The default is 0.
 */

/**
 * Simulates a mouse event using the given event information to populate
 * the generated event object. This method does browser-equalizing
 * calculations to account for differences in the DOM and IE event models
 * as well as different browser quirks.
 * @id YAHOO.util.UserAction.simulateMouseEvent
 * @method simulateMouseEvent
 * @private
 * @static
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: click, dblclick, mousedown, mouseup, mouseout,
 *      mouseover, and mousemove.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 2 specifies that all mouse events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 2 specifies that all
 *      mouse events except mousemove can be cancelled. The default
 *      is true for all events except mousemove, for which the default
 *      is false.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {int} detail (Optional) The number of times the mouse button has
 *      been used. The default value is 1.
 * @param {int} screenX (Optional) The x-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} screenY (Optional) The y-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} clientX (Optional) The x-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {int} clientY (Optional) The y-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {int} button (Optional) The button being pressed while the event
 *      is executing. The value should be 0 for the primary mouse button
 *      (typically the left button), 1 for the terciary mouse button
 *      (typically the middle button), and 2 for the secondary mouse button
 *      (typically the right button). The default is 0.
 * @param {HTMLElement} relatedTarget (Optional) For mouseout events,
 *      this is the element that the mouse has moved to. For mouseover
 *      events, this is the element that the mouse has moved from. This
 *      argument is ignored for all other events. The default is null.
 */

/**
 * Simulates a mouse event on a particular element.
 * @id YAHOO.util.UserAction.mouseEvent
 * @param {HTMLElement} target The element to click on.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: click, dblclick, mousedown, mouseup, mouseout,
 *      mouseover, and mousemove.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseEvent
 * @static
 */

/**
 * Simulates a click on a particular element.
 * @id YAHOO.util.UserAction.click
 * @param {HTMLElement} target The element to click on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method click
 * @static
 */

/**
 * Simulates a double click on a particular element.
 * @id YAHOO.util.UserAction.dblclick
 * @param {HTMLElement} target The element to double click on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method dblclick
 * @static
 */

/**
 * Simulates a mousedown on a particular element.
 * @id YAHOO.util.UserAction.mousedown
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mousedown
 * @static
 */

/**
 * Simulates a mousemove on a particular element.
 * @id YAHOO.util.UserAction.mousemove
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mousemove
 * @static
 */

/**
 * Simulates a mouseout event on a particular element. Use "relatedTarget"
 * on the options object to specify where the mouse moved to.
 * Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so
 * toElement is assigned in its place. IE doesn't allow toElement to be
 * be assigned, so relatedTarget is assigned in its place. Both of these
 * concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly
 * in both browsers.
 * @id YAHOO.util.UserAction.mouseout
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseout
 * @static
 */

/**
 * Simulates a mouseover event on a particular element. Use "relatedTarget"
 * on the options object to specify where the mouse moved from.
 * Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so
 * fromElement is assigned in its place. IE doesn't allow fromElement to be
 * be assigned, so relatedTarget is assigned in its place. Both of these
 * concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly
 * in both browsers.
 * @id YAHOO.util.UserAction.mouseover
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseover
 * @static
 */

/**
 * Simulates a mouseup on a particular element.
 * @id YAHOO.util.UserAction.mouseup
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseup
 * @static
 */

/**
 * Fires an event that normally would be fired by the keyboard (keyup,
 * keydown, keypress). Make sure to specify either keyCode or charCode as
 * an option.
 * @id YAHOO.util.UserAction.fireKeyEvent
 * @private
 * @param {String} type The type of event ("keyup", "keydown" or "keypress").
 * @param {HTMLElement} target The target of the event.
 * @param {Object} options Options for the event. Either keyCode or charCode
 *                         are required.
 * @method fireKeyEvent
 * @static
 */

/**
 * Simulates a keydown event on a particular element.
 * @id YAHOO.util.UserAction.keydown
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method keydown
 * @static
 */

/**
 * Simulates a keypress on a particular element.
 * @id YAHOO.util.UserAction.keypress
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method keypress
 * @static
 */

/**
 * Simulates a keyup event on a particular element.
 * @id YAHOO.util.UserAction.keyup
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method keyup
 * @static
 */

/**
 * Runs pages containing test suite definitions.
 * @id YAHOO.tool.TestManager
 * @namespace YAHOO.tool
 * @class TestManager
 * @static
 */

/**
 * Constant for the testpagebegin custom event
 * @id YAHOO.tool.TestManager.TEST_PAGE_BEGIN_EVENT
 * @property TEST_PAGE_BEGIN_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * Constant for the testpagecomplete custom event
 * @id YAHOO.tool.TestManager.TEST_PAGE_COMPLETE_EVENT
 * @property TEST_PAGE_COMPLETE_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * Constant for the testmanagerbegin custom event
 * @id YAHOO.tool.TestManager.TEST_MANAGER_BEGIN_EVENT
 * @property TEST_MANAGER_BEGIN_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * Constant for the testmanagercomplete custom event
 * @id YAHOO.tool.TestManager.TEST_MANAGER_COMPLETE_EVENT
 * @property TEST_MANAGER_COMPLETE_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * The URL of the page currently being executed.
 * @id YAHOO.tool.TestManager._curPage
 * @type String
 * @private
 * @property _curPage
 * @static
 */

/**
 * The frame used to load and run tests.
 * @id YAHOO.tool.TestManager._frame
 * @type Window
 * @private
 * @property _frame
 * @static
 */

/**
 * The logger used to output results from the various tests.
 * @id YAHOO.tool.TestManager._logger
 * @type YAHOO.tool.TestLogger
 * @private
 * @property _logger
 * @static
 */

/**
 * The timeout ID for the next iteration through the tests.
 * @id YAHOO.tool.TestManager._timeoutId
 * @type int
 * @private
 * @property _timeoutId
 * @static
 */

/**
 * Array of pages to load.
 * @id YAHOO.tool.TestManager._pages
 * @type String[]
 * @private
 * @property _pages
 * @static
 */

/**
 * Aggregated results
 * @id YAHOO.tool.TestManager._results
 * @type Object
 * @private
 * @property _results
 * @static
 */

/**
 * Signals that a test page has been loaded. This should be called from
 * within the test page itself to notify the TestManager that it is ready.
 * @id YAHOO.tool.TestManager.load
 * @return {Void}
 * @static
 * @method load
 */

/**
 * Sets the pages to be loaded.
 * @id YAHOO.tool.TestManager.setPages
 * @param {String[]} pages An array of URLs to load.
 * @return {Void}
 * @static
 * @method setPages
 */

/**
 * Begins the process of running the tests.
 * @id YAHOO.tool.TestManager.start
 * @return {Void}
 * @static
 * @method start
 */

/**
 * Fires when loading a test page
 * @id YAHOO.tool.TestManager.testpagebegin
 * @event testpagebegin
 * @param curPage {string} the page being loaded
 * @static
 */

/**
 * Fires when a test page is complete
 * @id YAHOO.tool.TestManager.testpagecomplete
 * @event testpagecomplete
 * @param obj {page: string, results: object} the name of the
 * page that was loaded, and the test suite results
 * @static
 */

/**
 * Fires when the test manager starts running all test pages
 * @id YAHOO.tool.TestManager.testmanagerbegin
 * @event testmanagerbegin
 * @static
 */

/**
 * Fires when the test manager finishes running all test pages.  External
 * test runners should subscribe to this event in order to get the
 * aggregated test results.
 * @id YAHOO.tool.TestManager.testmanagercomplete
 * @event testmanagercomplete
 * @param obj { pages_passed: int, pages_failed: int, tests_passed: int
 *              tests_failed: int, passed: string[], failed: string[],
 *              page_results: {} }
 * @static
 */

/**
 * Stops the execution of tests.
 * @id YAHOO.tool.TestManager.stop
 * @return {Void}
 * @static
 * @method stop
 */

/**
 * Displays test execution progress and results, providing filters based on
 * different key events.
 * @id YAHOO.tool.TestLogger
 * @namespace YAHOO.tool
 * @class TestLogger
 * @constructor
 * @param {HTMLElement} element (Optional) The element to create the logger in.
 * @param {Object} config (Optional) Configuration options for the logger.
 */

/**
 * Formats message string to HTML for output to console.
 * @id YAHOO.tool.TestLogger.formatMsg
 * @private
 * @method formatMsg
 * @param oLogMsg {Object} Log message object.
 * @return {String} HTML-formatted message for output to console.
 */

/**
 * Clears the reference to the TestRunner from previous operations. This
 * unsubscribes all events and removes the object reference.
 * @id YAHOO.tool.TestLogger.clearTestRunner
 * @return {Void}
 * @static
 * @method clearTestRunner
 */

/**
 * Sets the source test runner that the logger should monitor.
 * @id YAHOO.tool.TestLogger.setTestRunner
 * @param {YAHOO.tool.TestRunner} testRunner The TestRunner to observe.
 * @return {Void}
 * @static
 * @method setTestRunner
 */

/**
 * Returns test results formatted as a JSON string. Requires JSON utility.
 * @id YAHOO.tool.TestFormat.TestLogger.JSON
 * @param {Object} result The results object created by TestRunner.
 * @return {String} An XML-formatted string of results.
 * @namespace YAHOO.tool.TestFormat
 * @method JSON
 * @static
 */

/**
 * Returns test results formatted as an XML string.
 * @id YAHOO.tool.TestFormat.TestLogger.XML
 * @param {Object} result The results object created by TestRunner.
 * @return {String} An XML-formatted string of results.
 * @namespace YAHOO.tool.TestFormat
 * @method XML
 * @static
 */

/**
 * An object capable of sending test results to a server.
 * @id YAHOO.tool.TestReporter
 * @param {String} url The URL to submit the results to.
 * @param {Function} format (Optiona) A function that outputs the results in a specific format.
 *      Default is YAHOO.tool.TestFormat.XML.
 * @constructor
 * @namespace YAHOO.tool
 * @class TestReporter
 */

/**
 * The URL to submit the data to.
 * @id YAHOO.tool.TestReporter.url
 * @type String
 * @property url
 */

/**
 * The formatting function to call when submitting the data.
 * @id YAHOO.tool.TestReporter.format
 * @type Function
 * @property format
 */

/**
 * Extra fields to submit with the request.
 * @id YAHOO.tool.TestReporter._fields
 * @type Object
 * @property _fields
 * @private
 */

/**
 * The form element used to submit the results.
 * @id YAHOO.tool.TestReporter._form
 * @type HTMLFormElement
 * @property _form
 * @private
 */

/**
 * Iframe used as a target for form submission.
 * @id YAHOO.tool.TestReporter._iframe
 * @type HTMLIFrameElement
 * @property _iframe
 * @private
 */

/**
 * Adds a field to the form that submits the results.
 * @id YAHOO.tool.TestReporter.addField
 * @param {String} name The name of the field.
 * @param {Variant} value The value of the field.
 * @return {Void}
 * @method addField
 */

/**
 * Removes all previous defined fields.
 * @id YAHOO.tool.TestReporter.addField
 * @return {Void}
 * @method addField
 */

/**
 * Cleans up the memory associated with the TestReporter, removing DOM elements
 * that were created.
 * @id YAHOO.tool.TestReporter.destroy
 * @return {Void}
 * @method destroy
 */

/**
 * Sends the report to the server.
 * @id YAHOO.tool.TestReporter.report
 * @param {Object} results The results object created by TestRunner.
 * @return {Void}
 * @method report
 */

/**
 * Test case containing various tests to run.
 * @id YAHOO.tool.TestCase
 * @param template An object containing any number of test methods, other methods,
 *                 an optional name, and anything else the test case needs.
 * @class TestCase
 * @namespace YAHOO.tool
 * @constructor
 */

/**
 * Resumes a paused test and runs the given function.
 * @id YAHOO.tool.TestCase.resume
 * @param {Function} segment (Optional) The function to run.
 *      If omitted, the test automatically passes.
 * @return {Void}
 * @method resume
 */

/**
 * Causes the test case to wait a specified amount of time and then
 * continue executing the given code.
 * @id YAHOO.tool.TestCase.wait
 * @param {Function} segment (Optional) The function to run after the delay.
 *      If omitted, the TestRunner will wait until resume() is called.
 * @param {int} delay (Optional) The number of milliseconds to wait before running
 *      the function. If omitted, defaults to zero.
 * @return {Void}
 * @method wait
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestCase.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestCase.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Represents a stoppage in test execution to wait for an amount of time before
 * continuing.
 * @id YAHOO.tool.TestCase.Wait
 * @param {Function} segment A function to run when the wait is over.
 * @param {int} delay The number of milliseconds to wait before running the code.
 * @class Wait
 * @namespace YAHOO.tool.TestCase
 * @constructor
 *
 */

/**
 * The segment of code to run when the wait is over.
 * @id YAHOO.tool.TestCase.Wait.segment
 * @type Function
 * @property segment
 */

/**
 * The delay before running the segment of code.
 * @id YAHOO.tool.TestCase.Wait.delay
 * @type int
 * @property delay
 */

/**
 * A test suite that can contain a collection of TestCase and TestSuite objects.
 * @id YAHOO.tool.TestSuite
 * @param {String||Object} data The name of the test suite or an object containing
 *      a name property as well as setUp and tearDown methods.
 * @namespace YAHOO.tool
 * @class TestSuite
 * @constructor
 */

/**
 * The name of the test suite.
 * @id YAHOO.tool.TestSuite.name
 * @type String
 * @property name
 */

/**
 * Adds a test suite or test case to the test suite.
 * @id YAHOO.tool.TestSuite.add
 * @param {YAHOO.tool.TestSuite||YAHOO.tool.TestCase} testObject The test suite or test case to add.
 * @return {Void}
 * @method add
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestSuite.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestSuite.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Runs test suites and test cases, providing events to allowing for the
 * interpretation of test results.
 * @id YAHOO.tool.TestRunner
 * @namespace YAHOO.tool
 * @class TestRunner
 * @static
 */

/**
 * A node in the test tree structure. May represent a TestSuite, TestCase, or
 * test function.
 * @id YAHOO.tool.TestNode
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @class TestNode
 * @constructor
 * @private
 */

/**
 * The TestSuite, TestCase, or test function represented by this node.
 * @id YAHOO.tool.TestNode.testObject
 * @type Variant
 * @property testObject
 */

/**
 * Pointer to this node's first child.
 * @id YAHOO.tool.TestNode.firstChild
 * @type TestNode
 * @property firstChild
 */

/**
 * Pointer to this node's last child.
 * @id YAHOO.tool.TestNode.lastChild
 * @type TestNode
 * @property lastChild
 */

/**
 * Pointer to this node's parent.
 * @id YAHOO.tool.TestNode.parent
 * @type TestNode
 * @property parent
 */

/**
 * Pointer to this node's next sibling.
 * @id YAHOO.tool.TestNode.next
 * @type TestNode
 * @property next
 */

/**
 * Test results for this test object.
 * @id YAHOO.tool.TestNode.results
 * @type object
 * @property results
 */

/**
 * Appends a new test object (TestSuite, TestCase, or test function name) as a child
 * of this node.
 * @id YAHOO.tool.TestNode.appendChild
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @return {Void}
 * @method appendChild
 */

/**
 * Suite on which to attach all TestSuites and TestCases to be run.
 * @id YAHOO.tool.TestNode.masterSuite
 * @type YAHOO.tool.TestSuite
 * @property masterSuite
 * @private
 */

/**
 * Pointer to the current node in the test tree.
 * @id YAHOO.tool.TestNode._cur
 * @type TestNode
 * @private
 * @property _cur
 */

/**
 * Pointer to the root node in the test tree.
 * @id YAHOO.tool.TestNode._root
 * @type TestNode
 * @private
 * @property _root
 */

/**
 * Fires when a test case is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testcasebegin
 * @event testcasebegin
 */

/**
 * Fires when all tests in a test case have been executed.
 * @id YAHOO.tool.TestNode.testcasecomplete
 * @event testcasecomplete
 */

/**
 * Fires when a test suite is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testsuitebegin
 * @event testsuitebegin
 */

/**
 * Fires when all test cases in a test suite have been
 * completed.
 * @id YAHOO.tool.TestNode.testsuitecomplete
 * @event testsuitecomplete
 */

/**
 * Fires when a test has passed.
 * @id YAHOO.tool.TestNode.pass
 * @event pass
 */

/**
 * Fires when a test has failed.
 * @id YAHOO.tool.TestNode.fail
 * @event fail
 */

/**
 * Fires when a test has been ignored.
 * @id YAHOO.tool.TestNode.ignore
 * @event ignore
 */

/**
 * Fires when all test suites and test cases have been completed.
 * @id YAHOO.tool.TestNode.complete
 * @event complete
 */

/**
 * Fires when the run() method is called.
 * @id YAHOO.tool.TestNode.begin
 * @event begin
 */

/**
 * Adds a test case to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestCaseToTestTree
 * @param {TestNode} parentNode The node to add the test case to as a child.
 * @param {YAHOO.tool.TestCase} testCase The test case to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestCaseToTestTree
 */

/**
 * Adds a test suite to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestSuiteToTestTree
 * @param {TestNode} parentNode The node to add the test suite to as a child.
 * @param {YAHOO.tool.TestSuite} testSuite The test suite to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestSuiteToTestTree
 */

/**
 * Builds the test tree based on items in the master suite. The tree is a hierarchical
 * representation of the test suites, test cases, and test functions. The resulting tree
 * is stored in _root and the pointer _cur is set to the root initially.
 * @id YAHOO.tool.TestNode._buildTestTree
 * @return {Void}
 * @static
 * @private
 * @method _buildTestTree
 */

/**
 * Handles the completion of a test object's tests. Tallies test results
 * from one level up to the next.
 * @id YAHOO.tool.TestNode._handleTestObjectComplete
 * @param {TestNode} node The TestNode representing the test object.
 * @return {Void}
 * @method _handleTestObjectComplete
 * @private
 */

/**
 * Retrieves the next node in the test tree.
 * @id YAHOO.tool.TestNode._next
 * @return {TestNode} The next node in the test tree or null if the end is reached.
 * @private
 * @static
 * @method _next
 */

/**
 * Runs a test case or test suite, returning the results.
 * @id YAHOO.tool.TestNode._run
 * @param {YAHOO.tool.TestCase|YAHOO.tool.TestSuite} testObject The test case or test suite to run.
 * @return {Object} Results of the execution with properties passed, failed, and total.
 * @private
 * @method _run
 * @static
 */

/**
 * Adds a test suite or test case to the list of test objects to run.
 * @id YAHOO.tool.TestNode.add
 * @param testObject Either a TestCase or a TestSuite that should be run.
 * @return {Void}
 * @method add
 * @static
 */

/**
 * Removes all test objects from the runner.
 * @id YAHOO.tool.TestNode.clear
 * @return {Void}
 * @method clear
 * @static
 */

/**
 * Resumes the TestRunner after wait() was called.
 * @id YAHOO.tool.TestNode.resume
 * @param {Function} segment The function to run as the rest
 *      of the haulted test.
 * @return {Void}
 * @method resume
 * @static
 */

/**
 * Runs the test suite.
 * @id YAHOO.tool.TestNode.run
 * @return {Void}
 * @method run
 * @static
 */

/**
 * The Assert object provides functions to test JavaScript values against
 * known and expected results. Whenever a comparison (assertion) fails,
 * an error is thrown.
 *
 * @id YAHOO.util.Assert
 * @namespace YAHOO.util
 * @class Assert
 * @static
 */

/**
 * Forces an assertion error to occur.
 * @id YAHOO.util.Assert.fail
 * @param {String} message (Optional) The message to display with the failure.
 * @method fail
 * @static
 */

/**
 * Asserts that a value is equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areEqual
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a value is not equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areNotEqual
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotEqual
 * @static
 */

/**
 * Asserts that a value is not the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areNotSame
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotSame
 * @static
 */

/**
 * Asserts that a value is the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areSame
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areSame
 * @static
 */

/**
 * Asserts that a value is false. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isFalse
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFalse
 * @static
 */

/**
 * Asserts that a value is true. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isTrue
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTrue
 * @static
 */

/**
 * Asserts that a value is not a number.
 * @id YAHOO.util.Assert.isNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNaN
 * @static
 */

/**
 * Asserts that a value is not the special NaN value.
 * @id YAHOO.util.Assert.isNotNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNaN
 * @static
 */

/**
 * Asserts that a value is not null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNull
 * @static
 */

/**
 * Asserts that a value is not undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotUndefined
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotUndefined
 * @static
 */

/**
 * Asserts that a value is null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNull
 * @static
 */

/**
 * Asserts that a value is undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isUndefined
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isUndefined
 * @static
 */

/**
 * Asserts that a value is an array.
 * @id YAHOO.util.Assert.isArray
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isArray
 * @static
 */

/**
 * Asserts that a value is a Boolean.
 * @id YAHOO.util.Assert.isBoolean
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isBoolean
 * @static
 */

/**
 * Asserts that a value is a function.
 * @id YAHOO.util.Assert.isFunction
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFunction
 * @static
 */

/**
 * Asserts that a value is an instance of a particular object. This may return
 * incorrect results when comparing objects from one frame to constructors in
 * another frame. For best results, don't use in a cross-frame manner.
 * @id YAHOO.util.Assert.isInstanceOf
 * @param {Function} expected The function that the object should be an instance of.
 * @param {Object} actual The object to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isInstanceOf
 * @static
 */

/**
 * Asserts that a value is a number.
 * @id YAHOO.util.Assert.isNumber
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNumber
 * @static
 */

/**
 * Asserts that a value is an object.
 * @id YAHOO.util.Assert.isObject
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isObject
 * @static
 */

/**
 * Asserts that a value is a string.
 * @id YAHOO.util.Assert.isString
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isString
 * @static
 */

/**
 * Asserts that a value is of a particular type.
 * @id YAHOO.util.Assert.isTypeOf
 * @param {String} expectedType The expected type of the variable.
 * @param {Object} actualValue The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTypeOf
 * @static
 */

/**
 * AssertionError is thrown whenever an assertion fails. It provides methods
 * to more easily get at error information and also provides a base class
 * from which more specific assertion errors can be derived.
 *
 * @id YAHOO.util.AssertionError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @class AssertionError
 * @extends Error
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.AssertionError.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This should
 * be overridden by all subclasses to provide specific information.
 * @id YAHOO.util.AssertionError.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * Returns a string representation of the error.
 * @id YAHOO.util.AssertionError.toString
 * @method toString
 * @return {String} A string representation of the error.
 */

/**
 * Returns a primitive value version of the error. Same as toString().
 * @id YAHOO.util.AssertionError.valueOf
 * @method valueOf
 * @return {String} A primitive value version of the error.
 */

/**
 * ComparisonFailure is subclass of AssertionError that is thrown whenever
 * a comparison between two values fails. It provides mechanisms to retrieve
 * both the expected and actual value.
 *
 * @id YAHOO.util.ComparisonFailure
 * @param {String} message The message to display when the error occurs.
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value that caused the assertion to fail.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ComparisonFailure
 * @constructor
 */

/**
 * The expected value.
 * @id YAHOO.util.ComparisonFailure.expected
 * @type Object
 * @property expected
 */

/**
 * The actual value.
 * @id YAHOO.util.ComparisonFailure.actual
 * @type Object
 * @property actual
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ComparisonFailure.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This message
 * provides information about the expected and actual values.
 * @id YAHOO.util.ComparisonFailure.toString
 * @method toString
 * @return {String} A string describing the error.
 */

/**
 * UnexpectedValue is subclass of AssertionError that is thrown whenever
 * a value was unexpected in its scope. This typically means that a test
 * was performed to determine that a value was *not* equal to a certain
 * value.
 *
 * @id YAHOO.util.UnexpectedValue
 * @param {String} message The message to display when the error occurs.
 * @param {Object} unexpected The unexpected value.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedValue
 * @constructor
 */

/**
 * The unexpected value.
 * @id YAHOO.util.UnexpectedValue.unexpected
 * @type Object
 * @property unexpected
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedValue.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. The message
 * contains information about the unexpected value that was encountered.
 * @id YAHOO.util.UnexpectedValue.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * ShouldFail is subclass of AssertionError that is thrown whenever
 * a test was expected to fail but did not.
 *
 * @id YAHOO.util.ShouldFail
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldFail
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldFail.name
 * @type String
 * @property name
 */

/**
 * ShouldError is subclass of AssertionError that is thrown whenever
 * a test is expected to throw an error but doesn't.
 *
 * @id YAHOO.util.ShouldError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldError
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldError.name
 * @type String
 * @property name
 */

/**
 * UnexpectedError is subclass of AssertionError that is thrown whenever
 * an error occurs within the course of a test and the test was not expected
 * to throw an error.
 *
 * @id YAHOO.util.UnexpectedError
 * @param {Error} cause The unexpected error that caused this error to be
 *                      thrown.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedError
 * @constructor
 */

/**
 * The unexpected error that occurred.
 * @id YAHOO.util.UnexpectedError.cause
 * @type Error
 * @property cause
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedError.name
 * @type String
 * @property name
 */

/**
 * The ArrayAssert object provides functions to test JavaScript array objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ArrayAssert
 * @namespace YAHOO.util
 * @class ArrayAssert
 * @static
 */

/**
 * Asserts that a value is present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.contains
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method contains
 * @static
 */

/**
 * Asserts that a set of values are present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * be found.
 * @id YAHOO.util.ArrayAssert.containsItems
 * @param {Object[]} needles An array of values that are expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsItems
 * @static
 */

/**
 * Asserts that a value matching some condition is present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.containsMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsMatch
 * @static
 */

/**
 * Asserts that a value is not present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.doesNotContain
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContain
 * @static
 */

/**
 * Asserts that a set of values are not present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * not be found.
 * @id YAHOO.util.ArrayAssert.doesNotContainItems
 * @param {Object[]} needles An array of values that are not expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainItems
 * @static
 */

/**
 * Asserts that no values matching a condition are present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.doesNotContainMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainMatch
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.indexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method indexOf
 * @static
 */

/**
 * Asserts that the values in an array are equal, and in the same position,
 * as values in another array. This uses the double equals sign
 * so type cohersion may occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEqual
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreEqual
 * @static
 */

/**
 * Asserts that the values in an array are equivalent, and in the same position,
 * as values in another array. This uses a function to determine if the values
 * are equivalent. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEquivalent
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {Function} comparator A function that returns true if the values are equivalent
 *      or false if not.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @return {Void}
 * @method itemsAreEquivalent
 * @static
 */

/**
 * Asserts that an array is empty.
 * @id YAHOO.util.ArrayAssert.isEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isEmpty
 * @static
 */

/**
 * Asserts that an array is not empty.
 * @id YAHOO.util.ArrayAssert.isNotEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotEmpty
 * @static
 */

/**
 * Asserts that the values in an array are the same, and in the same position,
 * as values in another array. This uses the triple equals sign
 * so no type cohersion will occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreSame
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreSame
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index,
 * starting from the back of the array.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.lastIndexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method lastIndexOf
 * @static
 */

/**
 * The ObjectAssert object provides functions to test JavaScript objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ObjectAssert
 * @namespace YAHOO.util
 * @class ObjectAssert
 * @static
 */

/**
 * Asserts that all properties in the object exist in another object.
 * @id YAHOO.util.ObjectAssert.propertiesAreEqual
 * @param {Object} expected An object with the expected properties.
 * @param {Object} actual An object with the actual properties.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method propertiesAreEqual
 * @static
 */

/**
 * Asserts that an object has a property with the given name.
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * Asserts that a property with the given name exists on an object instance (not on its prototype).
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * The DateAssert object provides functions to test JavaScript Date objects
 * for a variety of cases.
 *
 * @id YAHOO.util.DateAssert
 * @namespace YAHOO.util
 * @class DateAssert
 * @static
 */

/**
 * Asserts that a date's month, day, and year are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a date's hour, minutes, and seconds are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * The UserAction object provides functions that simulate events occurring in
 * the browser. Since these are simulated events, they do not behave exactly
 * as regular, user-initiated events do, but can be used to test simple
 * user interactions safely.
 *
 * @id YAHOO.util.UserAction
 * @namespace YAHOO.util
 * @class UserAction
 * @static
 */

/**
 * Simulates a key event using the given event information to populate
 * the generated event object. This method does browser-equalizing
 * calculations to account for differences in the DOM and IE event models
 * as well as different browser quirks. Note: keydown causes Safari 2.x to
 * crash.
 * @id YAHOO.util.UserAction.simulateKeyEvent
 * @method simulateKeyEvent
 * @private
 * @static
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: keyup, keydown, and keypress.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 3 specifies that all key events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 3 specifies that all
 *      key events can be cancelled. The default
 *      is true.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {int} keyCode (Optional) The code for the key that is in use.
 *      The default is 0.
 * @param {int} charCode (Optional) The Unicode code for the character
 *      associated with the key being used. The default is 0.
 */

/**
 * Simulates a mouse event using the given event information to populate
 * the generated event object. This method does browser-equalizing
 * calculations to account for differences in the DOM and IE event models
 * as well as different browser quirks.
 * @id YAHOO.util.UserAction.simulateMouseEvent
 * @method simulateMouseEvent
 * @private
 * @static
 * @param {HTMLElement} target The target of the given event.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: click, dblclick, mousedown, mouseup, mouseout,
 *      mouseover, and mousemove.
 * @param {Boolean} bubbles (Optional) Indicates if the event can be
 *      bubbled up. DOM Level 2 specifies that all mouse events bubble by
 *      default. The default is true.
 * @param {Boolean} cancelable (Optional) Indicates if the event can be
 *      canceled using preventDefault(). DOM Level 2 specifies that all
 *      mouse events except mousemove can be cancelled. The default
 *      is true for all events except mousemove, for which the default
 *      is false.
 * @param {Window} view (Optional) The view containing the target. This is
 *      typically the window object. The default is window.
 * @param {int} detail (Optional) The number of times the mouse button has
 *      been used. The default value is 1.
 * @param {int} screenX (Optional) The x-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} screenY (Optional) The y-coordinate on the screen at which
 *      point the event occured. The default is 0.
 * @param {int} clientX (Optional) The x-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {int} clientY (Optional) The y-coordinate on the client at which
 *      point the event occured. The default is 0.
 * @param {Boolean} ctrlKey (Optional) Indicates if one of the CTRL keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} altKey (Optional) Indicates if one of the ALT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} shiftKey (Optional) Indicates if one of the SHIFT keys
 *      is pressed while the event is firing. The default is false.
 * @param {Boolean} metaKey (Optional) Indicates if one of the META keys
 *      is pressed while the event is firing. The default is false.
 * @param {int} button (Optional) The button being pressed while the event
 *      is executing. The value should be 0 for the primary mouse button
 *      (typically the left button), 1 for the terciary mouse button
 *      (typically the middle button), and 2 for the secondary mouse button
 *      (typically the right button). The default is 0.
 * @param {HTMLElement} relatedTarget (Optional) For mouseout events,
 *      this is the element that the mouse has moved to. For mouseover
 *      events, this is the element that the mouse has moved from. This
 *      argument is ignored for all other events. The default is null.
 */

/**
 * Simulates a mouse event on a particular element.
 * @id YAHOO.util.UserAction.mouseEvent
 * @param {HTMLElement} target The element to click on.
 * @param {String} type The type of event to fire. This can be any one of
 *      the following: click, dblclick, mousedown, mouseup, mouseout,
 *      mouseover, and mousemove.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseEvent
 * @static
 */

/**
 * Simulates a click on a particular element.
 * @id YAHOO.util.UserAction.click
 * @param {HTMLElement} target The element to click on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method click
 * @static
 */

/**
 * Simulates a double click on a particular element.
 * @id YAHOO.util.UserAction.dblclick
 * @param {HTMLElement} target The element to double click on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method dblclick
 * @static
 */

/**
 * Simulates a mousedown on a particular element.
 * @id YAHOO.util.UserAction.mousedown
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mousedown
 * @static
 */

/**
 * Simulates a mousemove on a particular element.
 * @id YAHOO.util.UserAction.mousemove
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mousemove
 * @static
 */

/**
 * Simulates a mouseout event on a particular element. Use "relatedTarget"
 * on the options object to specify where the mouse moved to.
 * Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so
 * toElement is assigned in its place. IE doesn't allow toElement to be
 * be assigned, so relatedTarget is assigned in its place. Both of these
 * concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly
 * in both browsers.
 * @id YAHOO.util.UserAction.mouseout
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseout
 * @static
 */

/**
 * Simulates a mouseover event on a particular element. Use "relatedTarget"
 * on the options object to specify where the mouse moved from.
 * Quirks: Firefox less than 2.0 doesn't set relatedTarget properly, so
 * fromElement is assigned in its place. IE doesn't allow fromElement to be
 * be assigned, so relatedTarget is assigned in its place. Both of these
 * concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly
 * in both browsers.
 * @id YAHOO.util.UserAction.mouseover
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseover
 * @static
 */

/**
 * Simulates a mouseup on a particular element.
 * @id YAHOO.util.UserAction.mouseup
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method mouseup
 * @static
 */

/**
 * Fires an event that normally would be fired by the keyboard (keyup,
 * keydown, keypress). Make sure to specify either keyCode or charCode as
 * an option.
 * @id YAHOO.util.UserAction.fireKeyEvent
 * @private
 * @param {String} type The type of event ("keyup", "keydown" or "keypress").
 * @param {HTMLElement} target The target of the event.
 * @param {Object} options Options for the event. Either keyCode or charCode
 *                         are required.
 * @method fireKeyEvent
 * @static
 */

/**
 * Simulates a keydown event on a particular element.
 * @id YAHOO.util.UserAction.keydown
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method keydown
 * @static
 */

/**
 * Simulates a keypress on a particular element.
 * @id YAHOO.util.UserAction.keypress
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method keypress
 * @static
 */

/**
 * Simulates a keyup event on a particular element.
 * @id YAHOO.util.UserAction.keyup
 * @param {HTMLElement} target The element to act on.
 * @param {Object} options Additional event options (use DOM standard names).
 * @method keyup
 * @static
 */

/**
 * Runs pages containing test suite definitions.
 * @id YAHOO.tool.TestManager
 * @namespace YAHOO.tool
 * @class TestManager
 * @static
 */

/**
 * Constant for the testpagebegin custom event
 * @id YAHOO.tool.TestManager.TEST_PAGE_BEGIN_EVENT
 * @property TEST_PAGE_BEGIN_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * Constant for the testpagecomplete custom event
 * @id YAHOO.tool.TestManager.TEST_PAGE_COMPLETE_EVENT
 * @property TEST_PAGE_COMPLETE_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * Constant for the testmanagerbegin custom event
 * @id YAHOO.tool.TestManager.TEST_MANAGER_BEGIN_EVENT
 * @property TEST_MANAGER_BEGIN_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * Constant for the testmanagercomplete custom event
 * @id YAHOO.tool.TestManager.TEST_MANAGER_COMPLETE_EVENT
 * @property TEST_MANAGER_COMPLETE_EVENT
 * @static
 * @type string
 * @final
 */

/**
 * The URL of the page currently being executed.
 * @id YAHOO.tool.TestManager._curPage
 * @type String
 * @private
 * @property _curPage
 * @static
 */

/**
 * The frame used to load and run tests.
 * @id YAHOO.tool.TestManager._frame
 * @type Window
 * @private
 * @property _frame
 * @static
 */

/**
 * The logger used to output results from the various tests.
 * @id YAHOO.tool.TestManager._logger
 * @type YAHOO.tool.TestLogger
 * @private
 * @property _logger
 * @static
 */

/**
 * The timeout ID for the next iteration through the tests.
 * @id YAHOO.tool.TestManager._timeoutId
 * @type int
 * @private
 * @property _timeoutId
 * @static
 */

/**
 * Array of pages to load.
 * @id YAHOO.tool.TestManager._pages
 * @type String[]
 * @private
 * @property _pages
 * @static
 */

/**
 * Aggregated results
 * @id YAHOO.tool.TestManager._results
 * @type Object
 * @private
 * @property _results
 * @static
 */

/**
 * Signals that a test page has been loaded. This should be called from
 * within the test page itself to notify the TestManager that it is ready.
 * @id YAHOO.tool.TestManager.load
 * @return {Void}
 * @static
 * @method load
 */

/**
 * Sets the pages to be loaded.
 * @id YAHOO.tool.TestManager.setPages
 * @param {String[]} pages An array of URLs to load.
 * @return {Void}
 * @static
 * @method setPages
 */

/**
 * Begins the process of running the tests.
 * @id YAHOO.tool.TestManager.start
 * @return {Void}
 * @static
 * @method start
 */

/**
 * Fires when loading a test page
 * @id YAHOO.tool.TestManager.testpagebegin
 * @event testpagebegin
 * @param curPage {string} the page being loaded
 * @static
 */

/**
 * Fires when a test page is complete
 * @id YAHOO.tool.TestManager.testpagecomplete
 * @event testpagecomplete
 * @param obj {page: string, results: object} the name of the
 * page that was loaded, and the test suite results
 * @static
 */

/**
 * Fires when the test manager starts running all test pages
 * @id YAHOO.tool.TestManager.testmanagerbegin
 * @event testmanagerbegin
 * @static
 */

/**
 * Fires when the test manager finishes running all test pages.  External
 * test runners should subscribe to this event in order to get the
 * aggregated test results.
 * @id YAHOO.tool.TestManager.testmanagercomplete
 * @event testmanagercomplete
 * @param obj { pages_passed: int, pages_failed: int, tests_passed: int
 *              tests_failed: int, passed: string[], failed: string[],
 *              page_results: {} }
 * @static
 */

/**
 * Stops the execution of tests.
 * @id YAHOO.tool.TestManager.stop
 * @return {Void}
 * @static
 * @method stop
 */

/**
 * Displays test execution progress and results, providing filters based on
 * different key events.
 * @id YAHOO.tool.TestLogger
 * @namespace YAHOO.tool
 * @class TestLogger
 * @constructor
 * @param {HTMLElement} element (Optional) The element to create the logger in.
 * @param {Object} config (Optional) Configuration options for the logger.
 */

/**
 * Formats message string to HTML for output to console.
 * @id YAHOO.tool.TestLogger.formatMsg
 * @private
 * @method formatMsg
 * @param oLogMsg {Object} Log message object.
 * @return {String} HTML-formatted message for output to console.
 */

/**
 * Clears the reference to the TestRunner from previous operations. This
 * unsubscribes all events and removes the object reference.
 * @id YAHOO.tool.TestLogger.clearTestRunner
 * @return {Void}
 * @static
 * @method clearTestRunner
 */

/**
 * Sets the source test runner that the logger should monitor.
 * @id YAHOO.tool.TestLogger.setTestRunner
 * @param {YAHOO.tool.TestRunner} testRunner The TestRunner to observe.
 * @return {Void}
 * @static
 * @method setTestRunner
 */

/**
 * Returns test results formatted as a JSON string. Requires JSON utility.
 * @id YAHOO.tool.TestFormat.TestLogger.JSON
 * @param {Object} result The results object created by TestRunner.
 * @return {String} An XML-formatted string of results.
 * @namespace YAHOO.tool.TestFormat
 * @method JSON
 * @static
 */

/**
 * Returns test results formatted as an XML string.
 * @id YAHOO.tool.TestFormat.TestLogger.XML
 * @param {Object} result The results object created by TestRunner.
 * @return {String} An XML-formatted string of results.
 * @namespace YAHOO.tool.TestFormat
 * @method XML
 * @static
 */

/**
 * An object capable of sending test results to a server.
 * @id YAHOO.tool.TestReporter
 * @param {String} url The URL to submit the results to.
 * @param {Function} format (Optiona) A function that outputs the results in a specific format.
 *      Default is YAHOO.tool.TestFormat.XML.
 * @constructor
 * @namespace YAHOO.tool
 * @class TestReporter
 */

/**
 * The URL to submit the data to.
 * @id YAHOO.tool.TestReporter.url
 * @type String
 * @property url
 */

/**
 * The formatting function to call when submitting the data.
 * @id YAHOO.tool.TestReporter.format
 * @type Function
 * @property format
 */

/**
 * Extra fields to submit with the request.
 * @id YAHOO.tool.TestReporter._fields
 * @type Object
 * @property _fields
 * @private
 */

/**
 * The form element used to submit the results.
 * @id YAHOO.tool.TestReporter._form
 * @type HTMLFormElement
 * @property _form
 * @private
 */

/**
 * Iframe used as a target for form submission.
 * @id YAHOO.tool.TestReporter._iframe
 * @type HTMLIFrameElement
 * @property _iframe
 * @private
 */

/**
 * Adds a field to the form that submits the results.
 * @id YAHOO.tool.TestReporter.addField
 * @param {String} name The name of the field.
 * @param {Variant} value The value of the field.
 * @return {Void}
 * @method addField
 */

/**
 * Removes all previous defined fields.
 * @id YAHOO.tool.TestReporter.addField
 * @return {Void}
 * @method addField
 */

/**
 * Cleans up the memory associated with the TestReporter, removing DOM elements
 * that were created.
 * @id YAHOO.tool.TestReporter.destroy
 * @return {Void}
 * @method destroy
 */

/**
 * Sends the report to the server.
 * @id YAHOO.tool.TestReporter.report
 * @param {Object} results The results object created by TestRunner.
 * @return {Void}
 * @method report
 */

/**
 * Test case containing various tests to run.
 * @id YAHOO.tool.TestCase
 * @param template An object containing any number of test methods, other methods,
 *                 an optional name, and anything else the test case needs.
 * @class TestCase
 * @namespace YAHOO.tool
 * @constructor
 */

/**
 * Resumes a paused test and runs the given function.
 * @id YAHOO.tool.TestCase.resume
 * @param {Function} segment (Optional) The function to run.
 *      If omitted, the test automatically passes.
 * @return {Void}
 * @method resume
 */

/**
 * Causes the test case to wait a specified amount of time and then
 * continue executing the given code.
 * @id YAHOO.tool.TestCase.wait
 * @param {Function} segment (Optional) The function to run after the delay.
 *      If omitted, the TestRunner will wait until resume() is called.
 * @param {int} delay (Optional) The number of milliseconds to wait before running
 *      the function. If omitted, defaults to zero.
 * @return {Void}
 * @method wait
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestCase.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestCase.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Represents a stoppage in test execution to wait for an amount of time before
 * continuing.
 * @id YAHOO.tool.TestCase.Wait
 * @param {Function} segment A function to run when the wait is over.
 * @param {int} delay The number of milliseconds to wait before running the code.
 * @class Wait
 * @namespace YAHOO.tool.TestCase
 * @constructor
 *
 */

/**
 * The segment of code to run when the wait is over.
 * @id YAHOO.tool.TestCase.Wait.segment
 * @type Function
 * @property segment
 */

/**
 * The delay before running the segment of code.
 * @id YAHOO.tool.TestCase.Wait.delay
 * @type int
 * @property delay
 */

/**
 * A test suite that can contain a collection of TestCase and TestSuite objects.
 * @id YAHOO.tool.TestSuite
 * @param {String||Object} data The name of the test suite or an object containing
 *      a name property as well as setUp and tearDown methods.
 * @namespace YAHOO.tool
 * @class TestSuite
 * @constructor
 */

/**
 * The name of the test suite.
 * @id YAHOO.tool.TestSuite.name
 * @type String
 * @property name
 */

/**
 * Adds a test suite or test case to the test suite.
 * @id YAHOO.tool.TestSuite.add
 * @param {YAHOO.tool.TestSuite||YAHOO.tool.TestCase} testObject The test suite or test case to add.
 * @return {Void}
 * @method add
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestSuite.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestSuite.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Runs test suites and test cases, providing events to allowing for the
 * interpretation of test results.
 * @id YAHOO.tool.TestRunner
 * @namespace YAHOO.tool
 * @class TestRunner
 * @static
 */

/**
 * A node in the test tree structure. May represent a TestSuite, TestCase, or
 * test function.
 * @id YAHOO.tool.TestNode
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @class TestNode
 * @constructor
 * @private
 */

/**
 * The TestSuite, TestCase, or test function represented by this node.
 * @id YAHOO.tool.TestNode.testObject
 * @type Variant
 * @property testObject
 */

/**
 * Pointer to this node's first child.
 * @id YAHOO.tool.TestNode.firstChild
 * @type TestNode
 * @property firstChild
 */

/**
 * Pointer to this node's last child.
 * @id YAHOO.tool.TestNode.lastChild
 * @type TestNode
 * @property lastChild
 */

/**
 * Pointer to this node's parent.
 * @id YAHOO.tool.TestNode.parent
 * @type TestNode
 * @property parent
 */

/**
 * Pointer to this node's next sibling.
 * @id YAHOO.tool.TestNode.next
 * @type TestNode
 * @property next
 */

/**
 * Test results for this test object.
 * @id YAHOO.tool.TestNode.results
 * @type object
 * @property results
 */

/**
 * Appends a new test object (TestSuite, TestCase, or test function name) as a child
 * of this node.
 * @id YAHOO.tool.TestNode.appendChild
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @return {Void}
 * @method appendChild
 */

/**
 * Suite on which to attach all TestSuites and TestCases to be run.
 * @id YAHOO.tool.TestNode.masterSuite
 * @type YAHOO.tool.TestSuite
 * @property masterSuite
 * @private
 */

/**
 * Pointer to the current node in the test tree.
 * @id YAHOO.tool.TestNode._cur
 * @type TestNode
 * @private
 * @property _cur
 */

/**
 * Pointer to the root node in the test tree.
 * @id YAHOO.tool.TestNode._root
 * @type TestNode
 * @private
 * @property _root
 */

/**
 * Fires when a test case is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testcasebegin
 * @event testcasebegin
 */

/**
 * Fires when all tests in a test case have been executed.
 * @id YAHOO.tool.TestNode.testcasecomplete
 * @event testcasecomplete
 */

/**
 * Fires when a test suite is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testsuitebegin
 * @event testsuitebegin
 */

/**
 * Fires when all test cases in a test suite have been
 * completed.
 * @id YAHOO.tool.TestNode.testsuitecomplete
 * @event testsuitecomplete
 */

/**
 * Fires when a test has passed.
 * @id YAHOO.tool.TestNode.pass
 * @event pass
 */

/**
 * Fires when a test has failed.
 * @id YAHOO.tool.TestNode.fail
 * @event fail
 */

/**
 * Fires when a test has been ignored.
 * @id YAHOO.tool.TestNode.ignore
 * @event ignore
 */

/**
 * Fires when all test suites and test cases have been completed.
 * @id YAHOO.tool.TestNode.complete
 * @event complete
 */

/**
 * Fires when the run() method is called.
 * @id YAHOO.tool.TestNode.begin
 * @event begin
 */

/**
 * Adds a test case to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestCaseToTestTree
 * @param {TestNode} parentNode The node to add the test case to as a child.
 * @param {YAHOO.tool.TestCase} testCase The test case to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestCaseToTestTree
 */

/**
 * Adds a test suite to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestSuiteToTestTree
 * @param {TestNode} parentNode The node to add the test suite to as a child.
 * @param {YAHOO.tool.TestSuite} testSuite The test suite to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestSuiteToTestTree
 */

/**
 * Builds the test tree based on items in the master suite. The tree is a hierarchical
 * representation of the test suites, test cases, and test functions. The resulting tree
 * is stored in _root and the pointer _cur is set to the root initially.
 * @id YAHOO.tool.TestNode._buildTestTree
 * @return {Void}
 * @static
 * @private
 * @method _buildTestTree
 */

/**
 * Handles the completion of a test object's tests. Tallies test results
 * from one level up to the next.
 * @id YAHOO.tool.TestNode._handleTestObjectComplete
 * @param {TestNode} node The TestNode representing the test object.
 * @return {Void}
 * @method _handleTestObjectComplete
 * @private
 */

/**
 * Retrieves the next node in the test tree.
 * @id YAHOO.tool.TestNode._next
 * @return {TestNode} The next node in the test tree or null if the end is reached.
 * @private
 * @static
 * @method _next
 */

/**
 * Runs a test case or test suite, returning the results.
 * @id YAHOO.tool.TestNode._run
 * @param {YAHOO.tool.TestCase|YAHOO.tool.TestSuite} testObject The test case or test suite to run.
 * @return {Object} Results of the execution with properties passed, failed, and total.
 * @private
 * @method _run
 * @static
 */

/**
 * Adds a test suite or test case to the list of test objects to run.
 * @id YAHOO.tool.TestNode.add
 * @param testObject Either a TestCase or a TestSuite that should be run.
 * @return {Void}
 * @method add
 * @static
 */

/**
 * Removes all test objects from the runner.
 * @id YAHOO.tool.TestNode.clear
 * @return {Void}
 * @method clear
 * @static
 */

/**
 * Resumes the TestRunner after wait() was called.
 * @id YAHOO.tool.TestNode.resume
 * @param {Function} segment The function to run as the rest
 *      of the haulted test.
 * @return {Void}
 * @method resume
 * @static
 */

/**
 * Runs the test suite.
 * @id YAHOO.tool.TestNode.run
 * @return {Void}
 * @method run
 * @static
 */

/**
 * The Assert object provides functions to test JavaScript values against
 * known and expected results. Whenever a comparison (assertion) fails,
 * an error is thrown.
 *
 * @id YAHOO.util.Assert
 * @namespace YAHOO.util
 * @class Assert
 * @static
 */

/**
 * Forces an assertion error to occur.
 * @id YAHOO.util.Assert.fail
 * @param {String} message (Optional) The message to display with the failure.
 * @method fail
 * @static
 */

/**
 * Asserts that a value is equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areEqual
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a value is not equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areNotEqual
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotEqual
 * @static
 */

/**
 * Asserts that a value is not the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areNotSame
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotSame
 * @static
 */

/**
 * Asserts that a value is the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areSame
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areSame
 * @static
 */

/**
 * Asserts that a value is false. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isFalse
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFalse
 * @static
 */

/**
 * Asserts that a value is true. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isTrue
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTrue
 * @static
 */

/**
 * Asserts that a value is not a number.
 * @id YAHOO.util.Assert.isNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNaN
 * @static
 */

/**
 * Asserts that a value is not the special NaN value.
 * @id YAHOO.util.Assert.isNotNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNaN
 * @static
 */

/**
 * Asserts that a value is not null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNull
 * @static
 */

/**
 * Asserts that a value is not undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotUndefined
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotUndefined
 * @static
 */

/**
 * Asserts that a value is null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNull
 * @static
 */

/**
 * Asserts that a value is undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isUndefined
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isUndefined
 * @static
 */

/**
 * Asserts that a value is an array.
 * @id YAHOO.util.Assert.isArray
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isArray
 * @static
 */

/**
 * Asserts that a value is a Boolean.
 * @id YAHOO.util.Assert.isBoolean
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isBoolean
 * @static
 */

/**
 * Asserts that a value is a function.
 * @id YAHOO.util.Assert.isFunction
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFunction
 * @static
 */

/**
 * Asserts that a value is an instance of a particular object. This may return
 * incorrect results when comparing objects from one frame to constructors in
 * another frame. For best results, don't use in a cross-frame manner.
 * @id YAHOO.util.Assert.isInstanceOf
 * @param {Function} expected The function that the object should be an instance of.
 * @param {Object} actual The object to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isInstanceOf
 * @static
 */

/**
 * Asserts that a value is a number.
 * @id YAHOO.util.Assert.isNumber
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNumber
 * @static
 */

/**
 * Asserts that a value is an object.
 * @id YAHOO.util.Assert.isObject
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isObject
 * @static
 */

/**
 * Asserts that a value is a string.
 * @id YAHOO.util.Assert.isString
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isString
 * @static
 */

/**
 * Asserts that a value is of a particular type.
 * @id YAHOO.util.Assert.isTypeOf
 * @param {String} expectedType The expected type of the variable.
 * @param {Object} actualValue The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTypeOf
 * @static
 */

/**
 * AssertionError is thrown whenever an assertion fails. It provides methods
 * to more easily get at error information and also provides a base class
 * from which more specific assertion errors can be derived.
 *
 * @id YAHOO.util.AssertionError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @class AssertionError
 * @extends Error
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.AssertionError.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This should
 * be overridden by all subclasses to provide specific information.
 * @id YAHOO.util.AssertionError.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * Returns a string representation of the error.
 * @id YAHOO.util.AssertionError.toString
 * @method toString
 * @return {String} A string representation of the error.
 */

/**
 * Returns a primitive value version of the error. Same as toString().
 * @id YAHOO.util.AssertionError.valueOf
 * @method valueOf
 * @return {String} A primitive value version of the error.
 */

/**
 * ComparisonFailure is subclass of AssertionError that is thrown whenever
 * a comparison between two values fails. It provides mechanisms to retrieve
 * both the expected and actual value.
 *
 * @id YAHOO.util.ComparisonFailure
 * @param {String} message The message to display when the error occurs.
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value that caused the assertion to fail.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ComparisonFailure
 * @constructor
 */

/**
 * The expected value.
 * @id YAHOO.util.ComparisonFailure.expected
 * @type Object
 * @property expected
 */

/**
 * The actual value.
 * @id YAHOO.util.ComparisonFailure.actual
 * @type Object
 * @property actual
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ComparisonFailure.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This message
 * provides information about the expected and actual values.
 * @id YAHOO.util.ComparisonFailure.toString
 * @method toString
 * @return {String} A string describing the error.
 */

/**
 * UnexpectedValue is subclass of AssertionError that is thrown whenever
 * a value was unexpected in its scope. This typically means that a test
 * was performed to determine that a value was *not* equal to a certain
 * value.
 *
 * @id YAHOO.util.UnexpectedValue
 * @param {String} message The message to display when the error occurs.
 * @param {Object} unexpected The unexpected value.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedValue
 * @constructor
 */

/**
 * The unexpected value.
 * @id YAHOO.util.UnexpectedValue.unexpected
 * @type Object
 * @property unexpected
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedValue.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. The message
 * contains information about the unexpected value that was encountered.
 * @id YAHOO.util.UnexpectedValue.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * ShouldFail is subclass of AssertionError that is thrown whenever
 * a test was expected to fail but did not.
 *
 * @id YAHOO.util.ShouldFail
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldFail
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldFail.name
 * @type String
 * @property name
 */

/**
 * ShouldError is subclass of AssertionError that is thrown whenever
 * a test is expected to throw an error but doesn't.
 *
 * @id YAHOO.util.ShouldError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldError
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldError.name
 * @type String
 * @property name
 */

/**
 * UnexpectedError is subclass of AssertionError that is thrown whenever
 * an error occurs within the course of a test and the test was not expected
 * to throw an error.
 *
 * @id YAHOO.util.UnexpectedError
 * @param {Error} cause The unexpected error that caused this error to be
 *                      thrown.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedError
 * @constructor
 */

/**
 * The unexpected error that occurred.
 * @id YAHOO.util.UnexpectedError.cause
 * @type Error
 * @property cause
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedError.name
 * @type String
 * @property name
 */

/**
 * The ArrayAssert object provides functions to test JavaScript array objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ArrayAssert
 * @namespace YAHOO.util
 * @class ArrayAssert
 * @static
 */

/**
 * Asserts that a value is present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.contains
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method contains
 * @static
 */

/**
 * Asserts that a set of values are present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * be found.
 * @id YAHOO.util.ArrayAssert.containsItems
 * @param {Object[]} needles An array of values that are expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsItems
 * @static
 */

/**
 * Asserts that a value matching some condition is present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.containsMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsMatch
 * @static
 */

/**
 * Asserts that a value is not present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.doesNotContain
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContain
 * @static
 */

/**
 * Asserts that a set of values are not present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * not be found.
 * @id YAHOO.util.ArrayAssert.doesNotContainItems
 * @param {Object[]} needles An array of values that are not expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainItems
 * @static
 */

/**
 * Asserts that no values matching a condition are present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.doesNotContainMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainMatch
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.indexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method indexOf
 * @static
 */

/**
 * Asserts that the values in an array are equal, and in the same position,
 * as values in another array. This uses the double equals sign
 * so type cohersion may occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEqual
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreEqual
 * @static
 */

/**
 * Asserts that the values in an array are equivalent, and in the same position,
 * as values in another array. This uses a function to determine if the values
 * are equivalent. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEquivalent
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {Function} comparator A function that returns true if the values are equivalent
 *      or false if not.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @return {Void}
 * @method itemsAreEquivalent
 * @static
 */

/**
 * Asserts that an array is empty.
 * @id YAHOO.util.ArrayAssert.isEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isEmpty
 * @static
 */

/**
 * Asserts that an array is not empty.
 * @id YAHOO.util.ArrayAssert.isNotEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotEmpty
 * @static
 */

/**
 * Asserts that the values in an array are the same, and in the same position,
 * as values in another array. This uses the triple equals sign
 * so no type cohersion will occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreSame
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreSame
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index,
 * starting from the back of the array.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.lastIndexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method lastIndexOf
 * @static
 */

/**
 * The ObjectAssert object provides functions to test JavaScript objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ObjectAssert
 * @namespace YAHOO.util
 * @class ObjectAssert
 * @static
 */

/**
 * Asserts that all properties in the object exist in another object.
 * @id YAHOO.util.ObjectAssert.propertiesAreEqual
 * @param {Object} expected An object with the expected properties.
 * @param {Object} actual An object with the actual properties.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method propertiesAreEqual
 * @static
 */

/**
 * Asserts that an object has a property with the given name.
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * Asserts that a property with the given name exists on an object instance (not on its prototype).
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * The DateAssert object provides functions to test JavaScript Date objects
 * for a variety of cases.
 *
 * @id YAHOO.util.DateAssert
 * @namespace YAHOO.util
 * @class DateAssert
 * @static
 */

/**
 * Asserts that a date's month, day, and year are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a date's hour, minutes, and seconds are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Test case containing various tests to run.
 * @id YAHOO.tool.TestCase
 * @param template An object containing any number of test methods, other methods,
 *                 an optional name, and anything else the test case needs.
 * @class TestCase
 * @namespace YAHOO.tool
 * @constructor
 */

/**
 * Resumes a paused test and runs the given function.
 * @id YAHOO.tool.TestCase.resume
 * @param {Function} segment (Optional) The function to run.
 *      If omitted, the test automatically passes.
 * @return {Void}
 * @method resume
 */

/**
 * Causes the test case to wait a specified amount of time and then
 * continue executing the given code.
 * @id YAHOO.tool.TestCase.wait
 * @param {Function} segment (Optional) The function to run after the delay.
 *      If omitted, the TestRunner will wait until resume() is called.
 * @param {int} delay (Optional) The number of milliseconds to wait before running
 *      the function. If omitted, defaults to zero.
 * @return {Void}
 * @method wait
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestCase.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestCase.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Represents a stoppage in test execution to wait for an amount of time before
 * continuing.
 * @id YAHOO.tool.TestCase.Wait
 * @param {Function} segment A function to run when the wait is over.
 * @param {int} delay The number of milliseconds to wait before running the code.
 * @class Wait
 * @namespace YAHOO.tool.TestCase
 * @constructor
 *
 */

/**
 * The segment of code to run when the wait is over.
 * @id YAHOO.tool.TestCase.Wait.segment
 * @type Function
 * @property segment
 */

/**
 * The delay before running the segment of code.
 * @id YAHOO.tool.TestCase.Wait.delay
 * @type int
 * @property delay
 */

/**
 * A test suite that can contain a collection of TestCase and TestSuite objects.
 * @id YAHOO.tool.TestSuite
 * @param {String||Object} data The name of the test suite or an object containing
 *      a name property as well as setUp and tearDown methods.
 * @namespace YAHOO.tool
 * @class TestSuite
 * @constructor
 */

/**
 * The name of the test suite.
 * @id YAHOO.tool.TestSuite.name
 * @type String
 * @property name
 */

/**
 * Adds a test suite or test case to the test suite.
 * @id YAHOO.tool.TestSuite.add
 * @param {YAHOO.tool.TestSuite||YAHOO.tool.TestCase} testObject The test suite or test case to add.
 * @return {Void}
 * @method add
 */

/**
 * Function to run before each test is executed.
 * @id YAHOO.tool.TestSuite.setUp
 * @return {Void}
 * @method setUp
 */

/**
 * Function to run after each test is executed.
 * @id YAHOO.tool.TestSuite.tearDown
 * @return {Void}
 * @method tearDown
 */

/**
 * Runs test suites and test cases, providing events to allowing for the
 * interpretation of test results.
 * @id YAHOO.tool.TestRunner
 * @namespace YAHOO.tool
 * @class TestRunner
 * @static
 */

/**
 * A node in the test tree structure. May represent a TestSuite, TestCase, or
 * test function.
 * @id YAHOO.tool.TestNode
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @class TestNode
 * @constructor
 * @private
 */

/**
 * The TestSuite, TestCase, or test function represented by this node.
 * @id YAHOO.tool.TestNode.testObject
 * @type Variant
 * @property testObject
 */

/**
 * Pointer to this node's first child.
 * @id YAHOO.tool.TestNode.firstChild
 * @type TestNode
 * @property firstChild
 */

/**
 * Pointer to this node's last child.
 * @id YAHOO.tool.TestNode.lastChild
 * @type TestNode
 * @property lastChild
 */

/**
 * Pointer to this node's parent.
 * @id YAHOO.tool.TestNode.parent
 * @type TestNode
 * @property parent
 */

/**
 * Pointer to this node's next sibling.
 * @id YAHOO.tool.TestNode.next
 * @type TestNode
 * @property next
 */

/**
 * Test results for this test object.
 * @id YAHOO.tool.TestNode.results
 * @type object
 * @property results
 */

/**
 * Appends a new test object (TestSuite, TestCase, or test function name) as a child
 * of this node.
 * @id YAHOO.tool.TestNode.appendChild
 * @param {Variant} testObject A TestSuite, TestCase, or the name of a test function.
 * @return {Void}
 * @method appendChild
 */

/**
 * Suite on which to attach all TestSuites and TestCases to be run.
 * @id YAHOO.tool.TestNode.masterSuite
 * @type YAHOO.tool.TestSuite
 * @property masterSuite
 * @private
 */

/**
 * Pointer to the current node in the test tree.
 * @id YAHOO.tool.TestNode._cur
 * @type TestNode
 * @private
 * @property _cur
 */

/**
 * Pointer to the root node in the test tree.
 * @id YAHOO.tool.TestNode._root
 * @type TestNode
 * @private
 * @property _root
 */

/**
 * Fires when a test case is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testcasebegin
 * @event testcasebegin
 */

/**
 * Fires when all tests in a test case have been executed.
 * @id YAHOO.tool.TestNode.testcasecomplete
 * @event testcasecomplete
 */

/**
 * Fires when a test suite is opened but before the first
 * test is executed.
 * @id YAHOO.tool.TestNode.testsuitebegin
 * @event testsuitebegin
 */

/**
 * Fires when all test cases in a test suite have been
 * completed.
 * @id YAHOO.tool.TestNode.testsuitecomplete
 * @event testsuitecomplete
 */

/**
 * Fires when a test has passed.
 * @id YAHOO.tool.TestNode.pass
 * @event pass
 */

/**
 * Fires when a test has failed.
 * @id YAHOO.tool.TestNode.fail
 * @event fail
 */

/**
 * Fires when a test has been ignored.
 * @id YAHOO.tool.TestNode.ignore
 * @event ignore
 */

/**
 * Fires when all test suites and test cases have been completed.
 * @id YAHOO.tool.TestNode.complete
 * @event complete
 */

/**
 * Fires when the run() method is called.
 * @id YAHOO.tool.TestNode.begin
 * @event begin
 */

/**
 * Adds a test case to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestCaseToTestTree
 * @param {TestNode} parentNode The node to add the test case to as a child.
 * @param {YAHOO.tool.TestCase} testCase The test case to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestCaseToTestTree
 */

/**
 * Adds a test suite to the test tree as a child of the specified node.
 * @id YAHOO.tool.TestNode._addTestSuiteToTestTree
 * @param {TestNode} parentNode The node to add the test suite to as a child.
 * @param {YAHOO.tool.TestSuite} testSuite The test suite to add.
 * @return {Void}
 * @static
 * @private
 * @method _addTestSuiteToTestTree
 */

/**
 * Builds the test tree based on items in the master suite. The tree is a hierarchical
 * representation of the test suites, test cases, and test functions. The resulting tree
 * is stored in _root and the pointer _cur is set to the root initially.
 * @id YAHOO.tool.TestNode._buildTestTree
 * @return {Void}
 * @static
 * @private
 * @method _buildTestTree
 */

/**
 * Handles the completion of a test object's tests. Tallies test results
 * from one level up to the next.
 * @id YAHOO.tool.TestNode._handleTestObjectComplete
 * @param {TestNode} node The TestNode representing the test object.
 * @return {Void}
 * @method _handleTestObjectComplete
 * @private
 */

/**
 * Retrieves the next node in the test tree.
 * @id YAHOO.tool.TestNode._next
 * @return {TestNode} The next node in the test tree or null if the end is reached.
 * @private
 * @static
 * @method _next
 */

/**
 * Runs a test case or test suite, returning the results.
 * @id YAHOO.tool.TestNode._run
 * @param {YAHOO.tool.TestCase|YAHOO.tool.TestSuite} testObject The test case or test suite to run.
 * @return {Object} Results of the execution with properties passed, failed, and total.
 * @private
 * @method _run
 * @static
 */

/**
 * Adds a test suite or test case to the list of test objects to run.
 * @id YAHOO.tool.TestNode.add
 * @param testObject Either a TestCase or a TestSuite that should be run.
 * @return {Void}
 * @method add
 * @static
 */

/**
 * Removes all test objects from the runner.
 * @id YAHOO.tool.TestNode.clear
 * @return {Void}
 * @method clear
 * @static
 */

/**
 * Resumes the TestRunner after wait() was called.
 * @id YAHOO.tool.TestNode.resume
 * @param {Function} segment The function to run as the rest
 *      of the haulted test.
 * @return {Void}
 * @method resume
 * @static
 */

/**
 * Runs the test suite.
 * @id YAHOO.tool.TestNode.run
 * @return {Void}
 * @method run
 * @static
 */

/**
 * The Assert object provides functions to test JavaScript values against
 * known and expected results. Whenever a comparison (assertion) fails,
 * an error is thrown.
 *
 * @id YAHOO.util.Assert
 * @namespace YAHOO.util
 * @class Assert
 * @static
 */

/**
 * Forces an assertion error to occur.
 * @id YAHOO.util.Assert.fail
 * @param {String} message (Optional) The message to display with the failure.
 * @method fail
 * @static
 */

/**
 * Asserts that a value is equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areEqual
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a value is not equal to another. This uses the double equals sign
 * so type cohersion may occur.
 * @id YAHOO.util.Assert.areNotEqual
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotEqual
 * @static
 */

/**
 * Asserts that a value is not the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areNotSame
 * @param {Object} unexpected The unexpected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areNotSame
 * @static
 */

/**
 * Asserts that a value is the same as another. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.areSame
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areSame
 * @static
 */

/**
 * Asserts that a value is false. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isFalse
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFalse
 * @static
 */

/**
 * Asserts that a value is true. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isTrue
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTrue
 * @static
 */

/**
 * Asserts that a value is not a number.
 * @id YAHOO.util.Assert.isNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNaN
 * @static
 */

/**
 * Asserts that a value is not the special NaN value.
 * @id YAHOO.util.Assert.isNotNaN
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNaN
 * @static
 */

/**
 * Asserts that a value is not null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotNull
 * @static
 */

/**
 * Asserts that a value is not undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNotUndefined
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotUndefined
 * @static
 */

/**
 * Asserts that a value is null. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isNull
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNull
 * @static
 */

/**
 * Asserts that a value is undefined. This uses the triple equals sign
 * so no type cohersion may occur.
 * @id YAHOO.util.Assert.isUndefined
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isUndefined
 * @static
 */

/**
 * Asserts that a value is an array.
 * @id YAHOO.util.Assert.isArray
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isArray
 * @static
 */

/**
 * Asserts that a value is a Boolean.
 * @id YAHOO.util.Assert.isBoolean
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isBoolean
 * @static
 */

/**
 * Asserts that a value is a function.
 * @id YAHOO.util.Assert.isFunction
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isFunction
 * @static
 */

/**
 * Asserts that a value is an instance of a particular object. This may return
 * incorrect results when comparing objects from one frame to constructors in
 * another frame. For best results, don't use in a cross-frame manner.
 * @id YAHOO.util.Assert.isInstanceOf
 * @param {Function} expected The function that the object should be an instance of.
 * @param {Object} actual The object to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isInstanceOf
 * @static
 */

/**
 * Asserts that a value is a number.
 * @id YAHOO.util.Assert.isNumber
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNumber
 * @static
 */

/**
 * Asserts that a value is an object.
 * @id YAHOO.util.Assert.isObject
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isObject
 * @static
 */

/**
 * Asserts that a value is a string.
 * @id YAHOO.util.Assert.isString
 * @param {Object} actual The value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isString
 * @static
 */

/**
 * Asserts that a value is of a particular type.
 * @id YAHOO.util.Assert.isTypeOf
 * @param {String} expectedType The expected type of the variable.
 * @param {Object} actualValue The actual value to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isTypeOf
 * @static
 */

/**
 * AssertionError is thrown whenever an assertion fails. It provides methods
 * to more easily get at error information and also provides a base class
 * from which more specific assertion errors can be derived.
 *
 * @id YAHOO.util.AssertionError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @class AssertionError
 * @extends Error
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.AssertionError.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This should
 * be overridden by all subclasses to provide specific information.
 * @id YAHOO.util.AssertionError.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * Returns a string representation of the error.
 * @id YAHOO.util.AssertionError.toString
 * @method toString
 * @return {String} A string representation of the error.
 */

/**
 * Returns a primitive value version of the error. Same as toString().
 * @id YAHOO.util.AssertionError.valueOf
 * @method valueOf
 * @return {String} A primitive value version of the error.
 */

/**
 * ComparisonFailure is subclass of AssertionError that is thrown whenever
 * a comparison between two values fails. It provides mechanisms to retrieve
 * both the expected and actual value.
 *
 * @id YAHOO.util.ComparisonFailure
 * @param {String} message The message to display when the error occurs.
 * @param {Object} expected The expected value.
 * @param {Object} actual The actual value that caused the assertion to fail.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ComparisonFailure
 * @constructor
 */

/**
 * The expected value.
 * @id YAHOO.util.ComparisonFailure.expected
 * @type Object
 * @property expected
 */

/**
 * The actual value.
 * @id YAHOO.util.ComparisonFailure.actual
 * @type Object
 * @property actual
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ComparisonFailure.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. This message
 * provides information about the expected and actual values.
 * @id YAHOO.util.ComparisonFailure.toString
 * @method toString
 * @return {String} A string describing the error.
 */

/**
 * UnexpectedValue is subclass of AssertionError that is thrown whenever
 * a value was unexpected in its scope. This typically means that a test
 * was performed to determine that a value was *not* equal to a certain
 * value.
 *
 * @id YAHOO.util.UnexpectedValue
 * @param {String} message The message to display when the error occurs.
 * @param {Object} unexpected The unexpected value.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedValue
 * @constructor
 */

/**
 * The unexpected value.
 * @id YAHOO.util.UnexpectedValue.unexpected
 * @type Object
 * @property unexpected
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedValue.name
 * @type String
 * @property name
 */

/**
 * Returns a fully formatted error for an assertion failure. The message
 * contains information about the unexpected value that was encountered.
 * @id YAHOO.util.UnexpectedValue.getMessage
 * @method getMessage
 * @return {String} A string describing the error.
 */

/**
 * ShouldFail is subclass of AssertionError that is thrown whenever
 * a test was expected to fail but did not.
 *
 * @id YAHOO.util.ShouldFail
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldFail
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldFail.name
 * @type String
 * @property name
 */

/**
 * ShouldError is subclass of AssertionError that is thrown whenever
 * a test is expected to throw an error but doesn't.
 *
 * @id YAHOO.util.ShouldError
 * @param {String} message The message to display when the error occurs.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class ShouldError
 * @constructor
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.ShouldError.name
 * @type String
 * @property name
 */

/**
 * UnexpectedError is subclass of AssertionError that is thrown whenever
 * an error occurs within the course of a test and the test was not expected
 * to throw an error.
 *
 * @id YAHOO.util.UnexpectedError
 * @param {Error} cause The unexpected error that caused this error to be
 *                      thrown.
 * @namespace YAHOO.util
 * @extends YAHOO.util.AssertionError
 * @class UnexpectedError
 * @constructor
 */

/**
 * The unexpected error that occurred.
 * @id YAHOO.util.UnexpectedError.cause
 * @type Error
 * @property cause
 */

/**
 * The name of the error that occurred.
 * @id YAHOO.util.UnexpectedError.name
 * @type String
 * @property name
 */

/**
 * The ArrayAssert object provides functions to test JavaScript array objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ArrayAssert
 * @namespace YAHOO.util
 * @class ArrayAssert
 * @static
 */

/**
 * Asserts that a value is present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.contains
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method contains
 * @static
 */

/**
 * Asserts that a set of values are present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * be found.
 * @id YAHOO.util.ArrayAssert.containsItems
 * @param {Object[]} needles An array of values that are expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsItems
 * @static
 */

/**
 * Asserts that a value matching some condition is present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.containsMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method containsMatch
 * @static
 */

/**
 * Asserts that a value is not present in an array. This uses the triple equals
 * sign so no type cohersion may occur.
 * @id YAHOO.util.ArrayAssert.doesNotContain
 * @param {Object} needle The value that is expected in the array.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContain
 * @static
 */

/**
 * Asserts that a set of values are not present in an array. This uses the triple equals
 * sign so no type cohersion may occur. For this assertion to pass, all values must
 * not be found.
 * @id YAHOO.util.ArrayAssert.doesNotContainItems
 * @param {Object[]} needles An array of values that are not expected in the array.
 * @param {Array} haystack An array of values to check.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainItems
 * @static
 */

/**
 * Asserts that no values matching a condition are present in an array. This uses
 * a function to determine a match.
 * @id YAHOO.util.ArrayAssert.doesNotContainMatch
 * @param {Function} matcher A function that returns true if the items matches or false if not.
 * @param {Array} haystack An array of values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method doesNotContainMatch
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.indexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method indexOf
 * @static
 */

/**
 * Asserts that the values in an array are equal, and in the same position,
 * as values in another array. This uses the double equals sign
 * so type cohersion may occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEqual
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreEqual
 * @static
 */

/**
 * Asserts that the values in an array are equivalent, and in the same position,
 * as values in another array. This uses a function to determine if the values
 * are equivalent. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreEquivalent
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {Function} comparator A function that returns true if the values are equivalent
 *      or false if not.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @return {Void}
 * @method itemsAreEquivalent
 * @static
 */

/**
 * Asserts that an array is empty.
 * @id YAHOO.util.ArrayAssert.isEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isEmpty
 * @static
 */

/**
 * Asserts that an array is not empty.
 * @id YAHOO.util.ArrayAssert.isNotEmpty
 * @param {Array} actual The array to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method isNotEmpty
 * @static
 */

/**
 * Asserts that the values in an array are the same, and in the same position,
 * as values in another array. This uses the triple equals sign
 * so no type cohersion will occur. Note that the array objects themselves
 * need not be the same for this test to pass.
 * @id YAHOO.util.ArrayAssert.itemsAreSame
 * @param {Array} expected An array of the expected values.
 * @param {Array} actual Any array of the actual values.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method itemsAreSame
 * @static
 */

/**
 * Asserts that the given value is contained in an array at the specified index,
 * starting from the back of the array.
 * This uses the triple equals sign so no type cohersion will occur.
 * @id YAHOO.util.ArrayAssert.lastIndexOf
 * @param {Object} needle The value to look for.
 * @param {Array} haystack The array to search in.
 * @param {int} index The index at which the value should exist.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method lastIndexOf
 * @static
 */

/**
 * The ObjectAssert object provides functions to test JavaScript objects
 * for a variety of cases.
 *
 * @id YAHOO.util.ObjectAssert
 * @namespace YAHOO.util
 * @class ObjectAssert
 * @static
 */

/**
 * Asserts that all properties in the object exist in another object.
 * @id YAHOO.util.ObjectAssert.propertiesAreEqual
 * @param {Object} expected An object with the expected properties.
 * @param {Object} actual An object with the actual properties.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method propertiesAreEqual
 * @static
 */

/**
 * Asserts that an object has a property with the given name.
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * Asserts that a property with the given name exists on an object instance (not on its prototype).
 * @id YAHOO.util.ObjectAssert.hasProperty
 * @param {String} propertyName The name of the property to test.
 * @param {Object} object The object to search.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method hasProperty
 * @static
 */

/**
 * The DateAssert object provides functions to test JavaScript Date objects
 * for a variety of cases.
 *
 * @id YAHOO.util.DateAssert
 * @namespace YAHOO.util
 * @class DateAssert
 * @static
 */

/**
 * Asserts that a date's month, day, and year are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

/**
 * Asserts that a date's hour, minutes, and seconds are equal to another date's.
 * @id YAHOO.util.DateAssert.areEqual
 * @param {Date} expected The expected date.
 * @param {Date} actual The actual date to test.
 * @param {String} message (Optional) The message to display if the assertion fails.
 * @method areEqual
 * @static
 */

