.t.e.s.t. Comments
LINE_COMMENT    "// This is a line comment", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
EOL             "\n", st=LS(regexp=null,string=nullxmlOpen=0,flags=stringmode=0,stringlit=)
IDENTIFIER      "code", la=1, st=LS(regexp=null,string=codexmlOpen=0,flags=dirty|stringmode=0,stringlit=code)
LPAREN          "(", st=LS(regexp=null,string=codexmlOpen=0,flags=divregexp|dirty|stringmode=0,stringlit=code)
RPAREN          ")", st=LS(regexp=null,string=codexmlOpen=0,flags=dirty|stringmode=0,stringlit=code)
LINE_COMMENT    "//More comments", la=1, st=LS(regexp=null,string=codexmlOpen=0,flags=dirty|stringmode=0,stringlit=code)
EOL             "\n", st=LS(regexp=null,string=codexmlOpen=0,flags=stringmode=0,stringlit=code)
BLOCK_COMMENT   "/* block comment*/", st=LS(regexp=null,string=codexmlOpen=0,flags=dirty|stringmode=0,stringlit=code)
IDENTIFIER      "not", la=1, st=LS(regexp=null,string=notxmlOpen=0,flags=dirty|stringmode=0,stringlit=not)
----- EOF -----

.t.e.s.t. Identifiers
IDENTIFIER      "a", la=1, st=LS(regexp=null,string=axmlOpen=0,flags=dirty|stringmode=0,stringlit=a)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=axmlOpen=0,flags=dirty|stringmode=0,stringlit=a)
IDENTIFIER      "ab", la=1, st=LS(regexp=null,string=abxmlOpen=0,flags=dirty|stringmode=0,stringlit=ab)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=abxmlOpen=0,flags=dirty|stringmode=0,stringlit=ab)
IDENTIFIER      "aB2", la=1, st=LS(regexp=null,string=aB2xmlOpen=0,flags=dirty|stringmode=0,stringlit=aB2)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=aB2xmlOpen=0,flags=dirty|stringmode=0,stringlit=aB2)
FLOAT_LITERAL   "2", la=1, st=LS(regexp=null,string=2xmlOpen=0,flags=dirty|stringmode=0,stringlit=aB2)
IDENTIFIER      "a", la=1, st=LS(regexp=null,string=axmlOpen=0,flags=dirty|stringmode=0,stringlit=a)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=axmlOpen=0,flags=dirty|stringmode=0,stringlit=a)
IDENTIFIER      "x", la=1, st=LS(regexp=null,string=xxmlOpen=0,flags=dirty|stringmode=0,stringlit=x)
EOL             "\n", st=LS(regexp=null,string=xxmlOpen=0,flags=stringmode=0,stringlit=x)
IDENTIFIER      "yZ", la=1, st=LS(regexp=null,string=yZxmlOpen=0,flags=dirty|stringmode=0,stringlit=yZ)
EOL             "\n", st=LS(regexp=null,string=yZxmlOpen=0,flags=stringmode=0,stringlit=yZ)
IDENTIFIER      "z", la=1, st=LS(regexp=null,string=zxmlOpen=0,flags=dirty|stringmode=0,stringlit=z)
----- EOF -----

.t.e.s.t. String Literals
STRING_BEGIN    """, la=2, st=LS(regexp=null,string= xmlOpen=0,flags=dirty|stringmode=2,stringlit=" ")
STRING_LITERAL  " ", la=1, st=LS(regexp=null,string= xmlOpen=0,flags=dirty|stringmode=3,stringlit=" ")
STRING_END      """, st=LS(regexp=null,string= xmlOpen=0,flags=dirty|stringmode=0,stringlit=" ")
----- EOF -----

.t.e.s.t. Regular expressions
REGEXP_BEGIN    "/", la=16, st=LS(regexp=,string=^Ruby the OOPLxmlOpen=0,flags=dirty|stringmode=4,stringlit=/^Ruby the OOPL/)
REGEXP_LITERAL  "^Ruby the OOPL", la=2, st=LS(regexp=,string=^Ruby the OOPLxmlOpen=0,flags=dirty|stringmode=5,stringlit=/^Ruby the OOPL/)
REGEXP_END      "/", la=1, st=LS(regexp=,string=^Ruby the OOPLxmlOpen=0,flags=dirty|stringmode=0,stringlit=/^Ruby the OOPL/)
SEMI            ";", st=LS(regexp=,string=^Ruby the OOPLxmlOpen=0,flags=divregexp|dirty|stringmode=0,stringlit=/^Ruby the OOPL/)
EOL             "\n", st=LS(regexp=,string=^Ruby the OOPLxmlOpen=0,flags=divregexp|stringmode=0,stringlit=/^Ruby the OOPL/)
REGEXP_BEGIN    "/", la=7, st=LS(regexp=i,string=RubyixmlOpen=0,flags=dirty|eof|stringmode=4,stringlit=/Ruby/i)
REGEXP_LITERAL  "Ruby", la=3, st=LS(regexp=i,string=RubyixmlOpen=0,flags=dirty|eof|stringmode=5,stringlit=/Ruby/i)
REGEXP_END      "/i", la=1, st=LS(regexp=i,string=RubyixmlOpen=0,flags=dirty|eof|stringmode=0,stringlit=/Ruby/i)
----- EOF -----

.t.e.s.t. Number Literals
FLOAT_LITERAL   "123", la=1, st=LS(regexp=null,string=123xmlOpen=0,flags=dirty|stringmode=0,stringlit=)
EOL             "\n", st=LS(regexp=null,string=123xmlOpen=0,flags=stringmode=0,stringlit=)
NONUNARY_OP     "-", la=1, st=LS(regexp=null,string=123xmlOpen=0,flags=dirty|stringmode=0,stringlit=)
FLOAT_LITERAL   "123", la=1, st=LS(regexp=null,string=123xmlOpen=0,flags=dirty|stringmode=0,stringlit=)
EOL             "\n", st=LS(regexp=null,string=123xmlOpen=0,flags=stringmode=0,stringlit=)
FLOAT_LITERAL   "1", la=1, st=LS(regexp=null,string=1xmlOpen=0,flags=dirty|stringmode=0,stringlit=)
IDENTIFIER      "_234", la=1, st=LS(regexp=null,string=_234xmlOpen=0,flags=dirty|stringmode=0,stringlit=_234)
EOL             "\n", st=LS(regexp=null,string=_234xmlOpen=0,flags=stringmode=0,stringlit=_234)
FLOAT_LITERAL   "123.45", la=1, st=LS(regexp=null,string=123.45xmlOpen=0,flags=dirty|stringmode=0,stringlit=_234)
EOL             "\n", st=LS(regexp=null,string=123.45xmlOpen=0,flags=stringmode=0,stringlit=_234)
FLOAT_LITERAL   "1.2e-3", la=1, st=LS(regexp=null,string=1.2e-3xmlOpen=0,flags=dirty|stringmode=0,stringlit=_234)
EOL             "\n", st=LS(regexp=null,string=1.2e-3xmlOpen=0,flags=stringmode=0,stringlit=_234)
FLOAT_LITERAL   "0xffff", la=1, st=LS(regexp=null,string=ffffxmlOpen=0,flags=dirty|stringmode=0,stringlit=_234)
EOL             "\n", st=LS(regexp=null,string=ffffxmlOpen=0,flags=stringmode=0,stringlit=_234)
FLOAT_LITERAL   "0", la=1, st=LS(regexp=null,string=0xmlOpen=0,flags=dirty|stringmode=0,stringlit=_234)
IDENTIFIER      "b01011", la=1, st=LS(regexp=null,string=b01011xmlOpen=0,flags=dirty|stringmode=0,stringlit=b01011)
EOL             "\n", st=LS(regexp=null,string=b01011xmlOpen=0,flags=stringmode=0,stringlit=b01011)
FLOAT_LITERAL   "0377", la=1, st=LS(regexp=null,string=377xmlOpen=0,flags=dirty|stringmode=0,stringlit=b01011)
----- EOF -----

.t.e.s.t. Operators
NONUNARY_OP     "=", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=divregexp|dirty|stringmode=0,stringlit=)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=divregexp|dirty|stringmode=0,stringlit=)
NONUNARY_OP     "+", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
NONUNARY_OP     "-", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
NONUNARY_OP     "*", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
LBRACKET        "[", st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
RBRACKET        "]", st=LS(regexp=null,string=nullxmlOpen=0,flags=dirty|stringmode=0,stringlit=)
----- EOF -----

.t.e.s.t. Keywords
EOL             " \n", st=LS(regexp=null,string=nullxmlOpen=0,flags=divregexp|stringmode=0,stringlit=)
IDENTIFIER      "alias", la=1, st=LS(regexp=null,string=aliasxmlOpen=0,flags=dirty|stringmode=0,stringlit=alias)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=aliasxmlOpen=0,flags=dirty|stringmode=0,stringlit=alias)
IDENTIFIER      "and", la=1, st=LS(regexp=null,string=andxmlOpen=0,flags=dirty|stringmode=0,stringlit=and)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=andxmlOpen=0,flags=dirty|stringmode=0,stringlit=and)
IDENTIFIER      "BEGIN", la=1, st=LS(regexp=null,string=BEGINxmlOpen=0,flags=dirty|stringmode=0,stringlit=BEGIN)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=BEGINxmlOpen=0,flags=dirty|stringmode=0,stringlit=BEGIN)
IDENTIFIER      "begin", la=1, st=LS(regexp=null,string=beginxmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=beginxmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
BREAK           "break", la=1, st=LS(regexp=null,string=breakxmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=breakxmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
CASE            "case", la=1, st=LS(regexp=null,string=casexmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=casexmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
ANY_KEYWORD     "class", la=1, st=LS(regexp=null,string=classxmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=classxmlOpen=0,flags=dirty|stringmode=0,stringlit=begin)
IDENTIFIER      "def", la=1, st=LS(regexp=null,string=defxmlOpen=0,flags=dirty|stringmode=0,stringlit=def)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=defxmlOpen=0,flags=dirty|stringmode=0,stringlit=def)
IDENTIFIER      "defined", la=1, st=LS(regexp=null,string=definedxmlOpen=0,flags=dirty|stringmode=0,stringlit=defined)
NONUNARY_OP     "?", st=LS(regexp=null,string=definedxmlOpen=0,flags=dirty|stringmode=0,stringlit=defined)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=definedxmlOpen=0,flags=dirty|stringmode=0,stringlit=defined)
ANY_KEYWORD     "do", la=1, st=LS(regexp=null,string=doxmlOpen=0,flags=dirty|stringmode=0,stringlit=defined)
EOL             "\n", st=LS(regexp=null,string=doxmlOpen=0,flags=stringmode=0,stringlit=defined)
ELSE            "else", la=1, st=LS(regexp=null,string=elsexmlOpen=0,flags=dirty|stringmode=0,stringlit=defined)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=elsexmlOpen=0,flags=dirty|stringmode=0,stringlit=defined)
IDENTIFIER      "elsif", la=1, st=LS(regexp=null,string=elsifxmlOpen=0,flags=dirty|stringmode=0,stringlit=elsif)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=elsifxmlOpen=0,flags=dirty|stringmode=0,stringlit=elsif)
IDENTIFIER      "END", la=1, st=LS(regexp=null,string=ENDxmlOpen=0,flags=dirty|stringmode=0,stringlit=END)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=ENDxmlOpen=0,flags=dirty|stringmode=0,stringlit=END)
IDENTIFIER      "end", la=1, st=LS(regexp=null,string=endxmlOpen=0,flags=dirty|stringmode=0,stringlit=end)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=endxmlOpen=0,flags=dirty|stringmode=0,stringlit=end)
IDENTIFIER      "ensure", la=1, st=LS(regexp=null,string=ensurexmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=ensurexmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
ANY_KEYWORD     "false", la=1, st=LS(regexp=null,string=falsexmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=falsexmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
FOR             "for", la=1, st=LS(regexp=null,string=forxmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=forxmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
IF              "if", la=1, st=LS(regexp=null,string=ifxmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=ifxmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
ANY_KEYWORD     "in", la=1, st=LS(regexp=null,string=inxmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=inxmlOpen=0,flags=dirty|stringmode=0,stringlit=ensure)
IDENTIFIER      "module", la=1, st=LS(regexp=null,string=modulexmlOpen=0,flags=dirty|stringmode=0,stringlit=module)
EOL             "\n", st=LS(regexp=null,string=modulexmlOpen=0,flags=stringmode=0,stringlit=module)
IDENTIFIER      "next", la=1, st=LS(regexp=null,string=nextxmlOpen=0,flags=dirty|stringmode=0,stringlit=next)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=nextxmlOpen=0,flags=dirty|stringmode=0,stringlit=next)
IDENTIFIER      "nil", la=1, st=LS(regexp=null,string=nilxmlOpen=0,flags=dirty|stringmode=0,stringlit=nil)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=nilxmlOpen=0,flags=dirty|stringmode=0,stringlit=nil)
IDENTIFIER      "not", la=1, st=LS(regexp=null,string=notxmlOpen=0,flags=dirty|stringmode=0,stringlit=not)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=notxmlOpen=0,flags=dirty|stringmode=0,stringlit=not)
IDENTIFIER      "or", la=1, st=LS(regexp=null,string=orxmlOpen=0,flags=dirty|stringmode=0,stringlit=or)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=orxmlOpen=0,flags=dirty|stringmode=0,stringlit=or)
IDENTIFIER      "redo", la=1, st=LS(regexp=null,string=redoxmlOpen=0,flags=dirty|stringmode=0,stringlit=redo)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=redoxmlOpen=0,flags=dirty|stringmode=0,stringlit=redo)
IDENTIFIER      "rescue", la=1, st=LS(regexp=null,string=rescuexmlOpen=0,flags=dirty|stringmode=0,stringlit=rescue)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=rescuexmlOpen=0,flags=dirty|stringmode=0,stringlit=rescue)
IDENTIFIER      "retry", la=1, st=LS(regexp=null,string=retryxmlOpen=0,flags=dirty|stringmode=0,stringlit=retry)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=retryxmlOpen=0,flags=dirty|stringmode=0,stringlit=retry)
ANY_KEYWORD     "return", la=1, st=LS(regexp=null,string=returnxmlOpen=0,flags=dirty|stringmode=0,stringlit=retry)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=returnxmlOpen=0,flags=dirty|stringmode=0,stringlit=retry)
IDENTIFIER      "self", la=1, st=LS(regexp=null,string=selfxmlOpen=0,flags=dirty|stringmode=0,stringlit=self)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=selfxmlOpen=0,flags=dirty|stringmode=0,stringlit=self)
ANY_KEYWORD     "super", la=1, st=LS(regexp=null,string=superxmlOpen=0,flags=dirty|stringmode=0,stringlit=self)
EOL             "\n", st=LS(regexp=null,string=superxmlOpen=0,flags=stringmode=0,stringlit=self)
IDENTIFIER      "then", la=1, st=LS(regexp=null,string=thenxmlOpen=0,flags=dirty|stringmode=0,stringlit=then)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=thenxmlOpen=0,flags=dirty|stringmode=0,stringlit=then)
ANY_KEYWORD     "true", la=1, st=LS(regexp=null,string=truexmlOpen=0,flags=dirty|stringmode=0,stringlit=then)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=truexmlOpen=0,flags=dirty|stringmode=0,stringlit=then)
IDENTIFIER      "undef", la=1, st=LS(regexp=null,string=undefxmlOpen=0,flags=dirty|stringmode=0,stringlit=undef)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=undefxmlOpen=0,flags=dirty|stringmode=0,stringlit=undef)
IDENTIFIER      "unless", la=1, st=LS(regexp=null,string=unlessxmlOpen=0,flags=dirty|stringmode=0,stringlit=unless)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=unlessxmlOpen=0,flags=dirty|stringmode=0,stringlit=unless)
IDENTIFIER      "until", la=1, st=LS(regexp=null,string=untilxmlOpen=0,flags=dirty|stringmode=0,stringlit=until)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=untilxmlOpen=0,flags=dirty|stringmode=0,stringlit=until)
IDENTIFIER      "when", la=1, st=LS(regexp=null,string=whenxmlOpen=0,flags=dirty|stringmode=0,stringlit=when)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=whenxmlOpen=0,flags=dirty|stringmode=0,stringlit=when)
WHILE           "while", la=1, st=LS(regexp=null,string=whilexmlOpen=0,flags=dirty|stringmode=0,stringlit=when)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=whilexmlOpen=0,flags=dirty|stringmode=0,stringlit=when)
IDENTIFIER      "yield", la=1, st=LS(regexp=null,string=yieldxmlOpen=0,flags=dirty|stringmode=0,stringlit=yield)
----- EOF -----

.t.e.s.t. Non-keywords
IDENTIFIER      "require", la=1, st=LS(regexp=null,string=requirexmlOpen=0,flags=dirty|stringmode=0,stringlit=require)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=requirexmlOpen=0,flags=dirty|stringmode=0,stringlit=require)
IDENTIFIER      "attr_accessor", la=1, st=LS(regexp=null,string=attr_accessorxmlOpen=0,flags=dirty|stringmode=0,stringlit=attr_accessor)
EOL             "\n", st=LS(regexp=null,string=attr_accessorxmlOpen=0,flags=stringmode=0,stringlit=attr_accessor)
IDENTIFIER      "abstracta", la=1, st=LS(regexp=null,string=abstractaxmlOpen=0,flags=dirty|stringmode=0,stringlit=abstracta)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=abstractaxmlOpen=0,flags=dirty|stringmode=0,stringlit=abstracta)
IDENTIFIER      "assertx", la=1, st=LS(regexp=null,string=assertxxmlOpen=0,flags=dirty|stringmode=0,stringlit=assertx)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=assertxxmlOpen=0,flags=dirty|stringmode=0,stringlit=assertx)
IDENTIFIER      "b", la=1, st=LS(regexp=null,string=bxmlOpen=0,flags=dirty|stringmode=0,stringlit=b)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=bxmlOpen=0,flags=dirty|stringmode=0,stringlit=b)
IDENTIFIER      "br", la=1, st=LS(regexp=null,string=brxmlOpen=0,flags=dirty|stringmode=0,stringlit=br)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=brxmlOpen=0,flags=dirty|stringmode=0,stringlit=br)
IDENTIFIER      "car", la=1, st=LS(regexp=null,string=carxmlOpen=0,flags=dirty|stringmode=0,stringlit=car)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=carxmlOpen=0,flags=dirty|stringmode=0,stringlit=car)
IDENTIFIER      "dou", la=1, st=LS(regexp=null,string=douxmlOpen=0,flags=dirty|stringmode=0,stringlit=dou)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=douxmlOpen=0,flags=dirty|stringmode=0,stringlit=dou)
IDENTIFIER      "doubl", la=1, st=LS(regexp=null,string=doublxmlOpen=0,flags=dirty|stringmode=0,stringlit=doubl)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=doublxmlOpen=0,flags=dirty|stringmode=0,stringlit=doubl)
IDENTIFIER      "finall", la=1, st=LS(regexp=null,string=finallxmlOpen=0,flags=dirty|stringmode=0,stringlit=finall)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=finallxmlOpen=0,flags=dirty|stringmode=0,stringlit=finall)
IDENTIFIER      "im", la=1, st=LS(regexp=null,string=imxmlOpen=0,flags=dirty|stringmode=0,stringlit=im)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=imxmlOpen=0,flags=dirty|stringmode=0,stringlit=im)
IDENTIFIER      "i", la=1, st=LS(regexp=null,string=ixmlOpen=0,flags=dirty|stringmode=0,stringlit=i)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=ixmlOpen=0,flags=dirty|stringmode=0,stringlit=i)
IDENTIFIER      "ifa", la=1, st=LS(regexp=null,string=ifaxmlOpen=0,flags=dirty|stringmode=0,stringlit=ifa)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=ifaxmlOpen=0,flags=dirty|stringmode=0,stringlit=ifa)
IDENTIFIER      "inti", la=1, st=LS(regexp=null,string=intixmlOpen=0,flags=dirty|stringmode=0,stringlit=inti)
WHITESPACE      " ", la=1, st=LS(regexp=null,string=intixmlOpen=0,flags=dirty|stringmode=0,stringlit=inti)
IDENTIFIER      "throwsx", la=1, st=LS(regexp=null,string=throwsxxmlOpen=0,flags=dirty|stringmode=0,stringlit=throwsx)
----- EOF -----

<Unnamed test>
----- EOF -----

