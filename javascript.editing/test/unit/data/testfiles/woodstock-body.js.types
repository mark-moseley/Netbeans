/**
 * The contents of this file are subject to the terms
 * of the Common Development and Distribution License
 * (the License).  You may not use this file except in
 * compliance with the License.
 * 
 * You can obtain a copy of the license at
 * https://woodstock.dev.java.net/public/CDDLv1.0.html.
 * See the License for the specific language governing
 * permissions and limitations under the License.
 * 
 * When distributing Covered Code, include this CDDL
 * Header Notice in each file and include the License file
 * at https://woodstock.dev.java.net/public/CDDLv1.0.html.
 * If applicable, add the following below the CDDL Header,
 * with the fields enclosed by brackets [] replaced by
 * you own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Copyright 2008 Sun Microsystems, Inc. All rights reserved.
 */

<webui.suntheme4_2.dojo.provide>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.dojo>dojo</webui.suntheme4_2.dojo>.<webui.suntheme4_2.dojo.provide>provide</webui.suntheme4_2.dojo.provide>(<String>"webui.suntheme4_2.body"</String>)</webui.suntheme4_2.dojo.provide>;

<webui.suntheme4_2.dojo.require>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.dojo>dojo</webui.suntheme4_2.dojo>.<webui.suntheme4_2.dojo.require>require</webui.suntheme4_2.dojo.require>(<String>"webui.suntheme4_2.browser"</String>)</webui.suntheme4_2.dojo.require>;
<webui.suntheme4_2.dojo.require>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.dojo>dojo</webui.suntheme4_2.dojo>.<webui.suntheme4_2.dojo.require>require</webui.suntheme4_2.dojo.require>(<String>"webui.suntheme4_2.common"</String>)</webui.suntheme4_2.dojo.require>;
<webui.suntheme4_2.dojo.require>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.dojo>dojo</webui.suntheme4_2.dojo>.<webui.suntheme4_2.dojo.require>require</webui.suntheme4_2.dojo.require>(<String>"webui.suntheme4_2.cookie"</String>)</webui.suntheme4_2.dojo.require>;

/**
 * @class This class contains functions used to maintain focus and scroll position.
 * &lt;p&gt;
 * There can be an initial focus element and a default focus element. The
 * initial focus element is identifed by the "focusElementId" argument.
 * This argument is typically null on the first display of the page. If
 * the Body component is not preserving the focus then it may also be null,
 * at other times, since it represents the element id that last received
 * the focus before the request.
 * &lt;/p&gt;&lt;p&gt;
 * Whenever the page is displayed and "focusElementId" is null
 * "defaultFocusElementId" will receive the focus if it is not null. This id is
 * defined by the application using the Body "focus" attribute. If the
 * application wants to control the focus in all cases then it should set
 * the Body component "preserveFocus" attribute to "false". The application then
 * explicitly sets the Body "focus" attribute to the element id to receive
 * focus on every request/response.
 * &lt;/p&gt;&lt;p&gt;
 * In order to preserve focus across requests, the "focusElementFieldId"
 * element is used to preserve the id of the element that receives the focus
 * last. It is a hidden field that is submitted in the
 * request. See the "com.sun.webui.jsf.util.FocusManager" class for
 * information on how the focus is managed. This field exists in all
 * forms, since that it is the only way to guarantee that the last
 * element that received the focus is sent to the server. Which form
 * is submitted can never be known.
 * &lt;/p&gt;
 * @constructor This function is used to construct a body object.
 * @param {String} viewId Used to name the scroll cookie
 * @param {String} path A member of the scroll cookie
 * @param {String} defaultFocusElementId The HTML element id that will receive focus.
 * @param {String} focusElementId The id of the element to receive the initial focus.
 * @param {String} focusElementFieldId The id of a hidden field to maintain
 * the id of the last element to have the focus.
 * @param {boolean} preserveScroll if true or not defined the scroll position is 
 * maintained else scroll is not maintained.
 */
webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<String>body</String> = <Function>function(<String>viewId</String>, <String>path</String>, <String>defaultFocusElementId</String>, 
	<String>focusElementId</String>, <String>focusElementFieldId</String>, <boolean>preserveScroll</boolean>)  {
    /**
     * The id of the HTML element to receive the focus, if the
     * element identified in focusElementFieldId cannot receive the focus.
     */
    this.<String>defaultFocusId</String> = <String>defaultFocusElementId</String>;

    /**
     * The id of a hidden input element whose value is the id
     * of the HTML element to receive the focus. It is set by
     * the focusListener and calls to setFocusBy{Id,Element}.
     */
    this.<String>focusElementFieldId</String> = <String>focusElementFieldId</String>;

    /**
     * The element id to receive the preserved, or initial focus.
     * This member should not be referenced once the onload listener
     * has been invoked. After that point the hidden field will have
     * have the element with the focus. We do this so that two locations
     * do not have to be kept in sync. Developers can just set the focus
     * to the element itself and the focus handler will manage the
     * focus persisitence.
     */
    this.<String>focusElementId</String> = <String>focusElementId</String>;

    // "==" also handles "null"
    //
    this.<String>preserveScroll</String> = (<Boolean><boolean>preserveScroll</boolean> == null)</Boolean>
        ? <Boolean>true</Boolean> : <Boolean.valueOf><Boolean>new Boolean(<boolean>preserveScroll</boolean></Boolean>).<Boolean.valueOf>valueOf</Boolean.valueOf>()</Boolean.valueOf>;

    /**
     * Create the scroll cookie object.
     */
    if (<Boolean>this.preserveScroll == <Boolean>true</Boolean></Boolean>) {
	this.<String>scrollCookie</String> = <webui.suntheme4_2.scrollCookie>new <webui.suntheme4_2.scrollCookie>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.scrollCookie</webui.suntheme4_2.scrollCookie>(<String>viewId</String>, <String>path</String>)</webui.suntheme4_2.scrollCookie>;
    }

    /**
     * According to HTML spec only these elements have
     * "onfocus" which we will equate to "focus".
     * A, AREA, BUTTON, INPUT, LABEL, SELECT, TEXTAREA
     * However just check for a non null "focus" or 
     * catch the exception when trying to reference it.
     * Returns true if the element has a "focus" method, is not
     * disabled, and isVisible, else false.
     *
     * @param {Node} element The DOM node to have focus.
     * @return {boolean} true if DOM Node can have focus.
     */
    this.<String>canAcceptFocus</String> = <Function>function(<Node>element</Node>) {
	var <Boolean>result = <Boolean>false</Boolean></Boolean>;
	try {
	    result = <Boolean><Node>element</Node> != null</Boolean> &amp;&amp; <Node.focus><Node>element</Node>.focus</Node.focus> &amp;&amp; !<Node.disabled><Node>element</Node>.disabled</Node.disabled>
		&amp;&amp; <Boolean><Node.type><Node>element</Node>.type</Node.type> != <String>"hidden"</String></Boolean>
		&amp;&amp; <webui.suntheme4_2.common.isVisible>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.common>common</webui.suntheme4_2.common>.<webui.suntheme4_2.common.isVisible>isVisible</webui.suntheme4_2.common.isVisible>(<Node.id><Node>element</Node>.id</Node.id>)</webui.suntheme4_2.common.isVisible>;
	} catch(err) {}
	return result;
    }</Function>;

    /**
     * Record the id of the element that has just receivied focus.
     * This is called whenever an element receives the focus.
     * This is set on the document so that the cursor entering the
     * window does not trigger this listener.
     *
     * @param {Event} event The object generated by the focus event.
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>focusListener</String> = <Function>function(<Event>event</Event>) {
	// If it's not an element node just return
	//
	var node = null;
	var <Boolean>isElementNode = <Boolean>false</Boolean></Boolean>;
	
	// is IE 
	//
	if (<HTMLDocument.attachEvent><HTMLDocument>document</HTMLDocument>.attachEvent</HTMLDocument.attachEvent>) {
	    <Event.srcElement>node</Event.srcElement> = <Event.srcElement><Event>event</Event>.srcElement</Event.srcElement>;
	
	    // We have to hard code "1" as the Node.ELEMENT_NODE in
	    // ie, because ie does not make the constant accessible.
	    //
	    isElementNode = (<Boolean><Event.srcElement>node</Event.srcElement> == null</Boolean> ? <Boolean>false</Boolean> : <Boolean><Event.srcElement.nodeType><Event.srcElement>node</Event.srcElement>.nodeType</Event.srcElement.nodeType> == <Number>1</Number></Boolean>);
	} else {
	    <Event.target>node</Event.target> = <Event.target><Event>event</Event>.target</Event.target>;
	    <Boolean>isElementNode</Boolean> = <Boolean><Event.target.nodeType><Event.target>node</Event.target>.nodeType</Event.target.nodeType> == <Node.ELEMENT_NODE>Node.ELEMENT_NODE</Node.ELEMENT_NODE></Boolean>;
	}

	if (<Boolean>isElementNode</Boolean>) {
	    // Note that there is no reliable way to set
	    // focus to some other element if the event element
	    // deemed to receive the focus can't accept the focus.
	    //
	    this.updateFocusElementField(<Event.target>node</Event.target>);
	}
	return <Boolean>true</Boolean>;
    }</Function>;

    /**
     * Set the initial focus and the scroll position.
     *
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>onLoadListener</String> = <Function>function() {
	// register the focus listener first.
	// Then call "setDefaultFocus" using "setTimeout" to
	// allow javascript processing to complete, probably
	// to allow "onload" to complete. The focus listener
	// will update the hidden focus fields as a result
	// of the call to "focus" in setDefaultFocus.
	//

	// Add the focus listener, in the onload to prevent
	// recursive calls from calling setDefaultFocus.
	//
        if (<webui.suntheme4_2.browser.isIe>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.browser>browser</webui.suntheme4_2.browser>.<webui.suntheme4_2.browser.isIe>isIe</webui.suntheme4_2.browser.isIe>()</webui.suntheme4_2.browser.isIe>) {
            <webui.suntheme4_2.dojo.connect>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.dojo>dojo</webui.suntheme4_2.dojo>.<webui.suntheme4_2.dojo.connect>connect</webui.suntheme4_2.dojo.connect>(<HTMLDocument>document</HTMLDocument>, <String>"onfocusin"</String>, this, <String>"focusListener"</String>)</webui.suntheme4_2.dojo.connect>;
        } else {
            <webui.suntheme4_2.dojo.connect>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.dojo>dojo</webui.suntheme4_2.dojo>.<webui.suntheme4_2.dojo.connect>connect</webui.suntheme4_2.dojo.connect>(<Window>window</Window>, <String>"onfocus"</String>, this, <String>"focusListener"</String>)</webui.suntheme4_2.dojo.connect>;
        }

        // Rely on the focus listener to update the focus
        // hidden fields by catching the 'element.focus()' in
        // setDefaultFocus
        //
        this.setInitialFocus();

	// Set up the scroll position after the focus has been
	// restored. Need to make sure that this takes into
	// account the default focus that was just set.
	//
	return this.setDefaultScrollPosition();
    }</Function>;

    /**
     * Update the page's scroll position.
     *
     * @param {Event} event The object generated by the onUnload event.
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>onUnloadListener</String> = <Function>function(<Event>event</Event>) {
	return this.storeScrollPosition();
    }</Function>;

    /**
     * Set the default focus to the application's chosen default focus element.
     * This method should only be called once to prevent recursive
     * calls since it calls "focus()" on the focus element.
     * Called currently from the onload listener.
     * &lt;p&gt;
     * If "this.defaultFocusId" is not null it will receive the focus; 
     * otherwise, no focus is set.
     * &lt;/p&gt;
     * @return {boolean} false if a default focus cannot be established, else true.
     */
    this.<String>setDefaultFocus</String> = <Function>function() {
        // HTML elements may not have been added, yet.
        if (<Boolean>this.defaultFocusId != null</Boolean>) {
            var domNode = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(this.defaultFocusId)</HTMLDocument.getElementById>;
            if (<Boolean>domNode == null</Boolean>) {
                var _this = this; // Closure magic.
                return <setTimeout>setTimeout(<Function>function() { <_this.setDefaultFocus>_this.<_this.setDefaultFocus>setDefaultFocus</_this.setDefaultFocus>()</_this.setDefaultFocus>; }</Function>, <Number>10</Number>)</setTimeout>;
            }

            // Focus not set try the default.
            //
            if (this.setFocusById(this.defaultFocusId)) {
                return <Boolean>true</Boolean>;
            }
        }

	/* For now it doesn't sound like a good idea to ever set
	 * a "heuristic" default focus. It is better for screen readers to start
	 * from the top of the page which we will assume that that
	 * browser starts from there when focus is not set explicitly.
	 * This code can be removed, but left it in case we want to
	 * for some reason.

	// No previously set focus element and no default.
	// Find the first focusable element in the first available form.
	//
	for each (var f in window.document.forms) {
	    for each (var e in f.elements) {
		if (this.setFocusByElement(e)) {
		    return true;
		}
	    }
	}
	// If there is no form, set on the first available link
	//
	for each (var l in window.document.links) {
	    if (this.setFocusByElement(l)) {
		return true;
	    }
	}
	*/
	return <Boolean>false</Boolean>;
    }</Function>;

    /**
     * This method is invoked in the onload listener, body.onLoadListener.
     *
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>setDefaultScrollPosition</String> = <Function>function() {
	if (!this.preserveScroll) {
	    return <Boolean>false</Boolean>;
	}
	// # char found, anchor being used. forego scrolling.
	// CR 6342635. 
	//
        if (<Boolean><Window.location.href.indexOf><Window>window</Window>.<Window.location>location</Window.location>.<Window.location.href>href</Window.location.href>.<Window.location.href.indexOf>indexOf</Window.location.href.indexOf>(<String>'#'</String>)</Window.location.href.indexOf> == -<Number>1</Number></Boolean>) {
	    this.scrollCookie.restore(); 
	} else {
	    // destroy the recent scroll data
	    //
	    this.scrollCookie.reset();
	}
        return <Boolean>true</Boolean>;
    }</Function>;

    /**
     * Set the initial focus by restoring the focus from a previous
     * request or to the application's chosen default focus element.
     * This method should only be called once to prevent recursive
     * calls since it calls "focus()" on the focus element.
     * Called currently from the onload listener.
     * &lt;p&gt;
     * If "this.focusElementId" is not null it will receive the focus.
     * If that element can't receive the focus then the application defined 
     * "this.defaultFocusId" receives the focus. If that element cannot receive 
     * the focus, no focus is set.
     * &lt;/p&gt;
     * @return {boolean} false if focus cannot be established, else true.
     */
    this.<String>setInitialFocus</String> = <Function>function() {
        // HTML elements may not have been added, yet.
        if (<Boolean>this.focusElementId != null</Boolean>) {
            var domNode = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(this.focusElementId)</HTMLDocument.getElementById>;
            if (<Boolean>domNode == null</Boolean>) {
                var _this = this; // Closure magic.
                return <setTimeout>setTimeout(<Function>function() { <_this.setInitialFocus>_this.<_this.setInitialFocus>setInitialFocus</_this.setInitialFocus>()</_this.setInitialFocus>; }</Function>, <Number>10</Number>)</setTimeout>;
            }

            // Try to set focus to "this.focusElementId". If this fails
            // fallback to the app defined default 
            // "this.defaultFocusElementId", if there is one.
            //
            if (this.setFocusById(this.focusElementId)) {
                return <Boolean>true</Boolean>;
            }
        }
        return this.setDefaultFocus();
    }</Function>;

    /**
     * Set the focus on "focusElement".
     * If focus can be set returns true else false.
     *
     * @param {Node} focusElement The DOM node to have focus.
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>setFocusByElement</String> = <Function>function(<Node>focusElement</Node>) {
	if (<Boolean><Node>focusElement</Node> == null</Boolean> || !this.canAcceptFocus(<Node>focusElement</Node>)) {
	    return <Boolean>false</Boolean>;
	}

	// canAcceptFocus tests the existence of the "focus" handler.
	// So it is safe to call it outside of a try/catch statement.
	// This should trigger the focus listener.
        try {
            // Still need try/catch because canAcceptFocus doesn't account for 
            // when parent is invisible. For example, the table's sort panel 
            // closes during page submit making focus element invisible.
            <Node.focus><Node>focusElement</Node>.<Node.focus>focus</Node.focus>()</Node.focus>;
        } catch(err) {}

	// Assume that this update is performed by the 
	// focus listener. This policy was changed in order to 
	// call "setDefaultFocus" using "setTimeout" in order for
	// javascript to have time to be evaluated, probably for
	// on load processing to complete.
	//this.updateFocusElementField(focusElement);
	return <Boolean>true</Boolean>;
    }</Function>;

    /**
     * Set the focus on element with id "fid".
     * If focus can be set returns true else false.
     *
     * @param {String} fid The id of the DOM node to have focus.
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>setFocusById</String> = <Function>function(<String>fid</String>) {
	if (<Boolean><String>fid</String> == null</Boolean> || <Boolean><String.length><String>fid</String>.length</String.length> == <Number>0</Number></Boolean>) {
	    return <Boolean>false</Boolean>;
	}
	return this.setFocusByElement(<HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<String>fid</String>)</HTMLDocument.getElementById>);
    }</Function>;

    /**
     * This method is invoked in the onunload event listener
     * body.onUnloadListener
     *
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>storeScrollPosition</String> = <Function>function() {
	if (!this.preserveScroll) {
	    return <Boolean>false</Boolean>;
	}
	try {
	    this.scrollCookie.set(); 
	} catch (e) {
	}
        return <Boolean>true</Boolean>; 
    }</Function>;

    /** 
     * Update the hidden field that maintains the last element to 
     * receive the focus. If the body has multiple forms every form's
     * hidden field is updated with the "focusElement".
     *
     * @param {Node} focusElement The DOM node to have focus.
     * @return {boolean} true if successful; otherwise, false.
     */
    this.<String>updateFocusElementField</String> = <Function>function(<Node>focusElement</Node>) {
	// Don't know if we'll have issues if multiple forms contain
	// an element with the same id. I know getElementById gets
	// confused.
	//

        if (<Boolean><Node>focusElement</Node> == null</Boolean>) {
	    return <Boolean>false</Boolean>;
	}
	// Get the form that contains the focus element.
	//
	for (var <Number>i = <Number>0</Number></Number>;  <Boolean><Number>i</Number> &lt; <HTMLDocument.forms.length><HTMLDocument>document</HTMLDocument>.<HTMLDocument.forms>forms</HTMLDocument.forms>.length</HTMLDocument.forms.length></Boolean>; ++<Number>i</Number>) {
	    var form = <HTMLDocument>document</HTMLDocument>.<HTMLDocument.forms>forms</HTMLDocument.forms>[<Number>i</Number>];
            var field = null;

	    // Get the hidden field that maintains the focus element id.
	    // If it exists return it. We know its name is the same
	    // as its id.
	    //
	    try {
		field = form.<form.elements>elements</form.elements>[this.focusElementFieldId];
		if (<Boolean>field != null</Boolean>) {
		    field.<String>value</String> = <Node.id><Node>focusElement</Node>.id</Node.id>;
		    continue;
		}
	    } catch (e) {
		// the array access of a non existent element
		// probably threw exception so create the field.
	    }
		
	    // If it doesn't exist create it.
	    // and add it to the form.
	    //
	    field = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>'input'</String>)</HTMLDocument.createElement>;
	    field.<String>type</String> = <String>'hidden'</String>;
	    field.<String>id</String> = this.focusElementFieldId;
	    field.<String>name</String> = this.focusElementFieldId;
	    field.<String>value</String> = <Node.id><Node>focusElement</Node>.id</Node.id>;
	    <form.appendChild>form.<form.appendChild>appendChild</form.appendChild>(field)</form.appendChild>;
	}
	return <Boolean>true</Boolean>;
    }</Function>;

    // The focus listener is set on the document so that the cursor 
    // entering the window does not trigger this listener. 
    this.onLoadListener();

    // If we are not preserving scroll don't add the unload listener.
    if (<Boolean>this.preserveScroll == <Boolean>true</Boolean></Boolean>) {
        <webui.suntheme4_2.dojo.addOnUnload>webui.<webui.suntheme4_2>suntheme4_2</webui.suntheme4_2>.<webui.suntheme4_2.dojo>dojo</webui.suntheme4_2.dojo>.<webui.suntheme4_2.dojo.addOnUnload>addOnUnload</webui.suntheme4_2.dojo.addOnUnload>(this, <String>"onUnloadListener"</String>)</webui.suntheme4_2.dojo.addOnUnload>;
    }
}</Function>;
