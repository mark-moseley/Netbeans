Missing position for node SCRIPT[0:0]:BLOCK[1500:0]:BLOCK[1500:37]:EXPR_RESULT[1501:2]:SETPROP[1501:2]:FUNCTION[1501:33]:BLOCK[1501:69]:LOOP[1505:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[1500:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1513:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1515:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:BLOCK[2200:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:BLOCK[2206:33]:BLOCK[2206:33]:BLOCK[2211:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:BLOCK[2206:33]:BLOCK[2206:33]:BLOCK[2212:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:BLOCK[2206:33]:BLOCK[2206:33]:BLOCK[2221:6]:BLOCK[2221:27]:BLOCK[2223:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:BLOCK[2206:33]:BLOCK[2206:33]:BLOCK[2221:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:BLOCK[2206:33]:BLOCK[2206:33]:BLOCK[2221:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:BLOCK[2206:33]:EXPR_VOID[2206:9]:SETNAME[2206:9]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:BLOCK[2196:54]:EXPR_RESULT[2197:10]:SETPROP[2197:10]:FUNCTION[2197:27]:BLOCK[2197:57]:LOCAL_BLOCK[2206:4]:LOOP[2206:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2196:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2239:21]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2239:33]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2239:47]:BLOCK[2240:10]:BLOCK[2240:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2239:8]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2241:23]:BLOCK[2243:10]:BLOCK[2243:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2241:23]:BLOCK[2243:10]:BLOCK[2249:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2241:23]:BLOCK[2243:10]:BLOCK[2253:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2241:23]:BLOCK[2243:10]:BLOCK[2253:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:CASE[2241:8]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2236:10]:SETPROP[2236:10]:CALL[2236:29]:FUNCTION[2237:4]:BLOCK[2237:38]:SWITCH[2238:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2235:29]:EXPR_RESULT[2270:10]:SETPROP[2270:10]:CALL[2270:34]:FUNCTION[2271:4]:BLOCK[2271:42]:BLOCK[2272:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2279:2]:CALL[2279:2]:FUNCTION[2279:61]:BLOCK[2279:78]:EXPR_VOID[2280:12]:SETELEM[2280:12]:CALL[2280:30]:FUNCTION[2281:6]:BLOCK[2281:33]:BLOCK[2284:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2279:2]:CALL[2279:2]:FUNCTION[2279:61]:BLOCK[2279:78]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2293:10]:SETPROP[2293:10]:FUNCTION[2293:29]:BLOCK[2293:54]:BLOCK[2297:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2293:10]:SETPROP[2293:10]:FUNCTION[2293:29]:BLOCK[2293:54]:BLOCK[2299:4]:BLOCK[2299:28]:BLOCK[2300:6]:BLOCK[2301:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2293:10]:SETPROP[2293:10]:FUNCTION[2293:29]:BLOCK[2293:54]:BLOCK[2299:4]:BLOCK[2299:28]:BLOCK[2300:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2293:10]:SETPROP[2293:10]:FUNCTION[2293:29]:BLOCK[2293:54]:BLOCK[2299:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2293:10]:SETPROP[2293:10]:FUNCTION[2293:29]:BLOCK[2293:54]:BLOCK[2305:4]:BLOCK[2305:25]:BLOCK[2306:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2293:10]:SETPROP[2293:10]:FUNCTION[2293:29]:BLOCK[2293:54]:BLOCK[2305:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2313:10]:SETPROP[2313:10]:FUNCTION[2313:31]:BLOCK[2313:56]:BLOCK[2319:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2313:10]:SETPROP[2313:10]:FUNCTION[2313:31]:BLOCK[2313:56]:BLOCK[2324:4]:BLOCK[2328:11]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2313:10]:SETPROP[2313:10]:FUNCTION[2313:31]:BLOCK[2313:56]:BLOCK[2324:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2313:10]:SETPROP[2313:10]:FUNCTION[2313:31]:BLOCK[2313:56]:BLOCK[2324:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2365:10]:SETPROP[2365:10]:OBJECTLIT[2365:41]:OBJECTLIT[2367:12]:FUNCTION[2368:15]:BLOCK[2368:40]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2365:10]:SETPROP[2365:10]:OBJECTLIT[2365:41]:OBJECTLIT[2367:12]:FUNCTION[2372:13]:BLOCK[2372:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2380:2]:CALL[2380:2]:FUNCTION[2381:50]:BLOCK[2381:65]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2278:31]:EXPR_RESULT[2386:3]:CALL[2386:3]:FUNCTION[2386:3]:BLOCK[2386:15]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:BLOCK[2427:5]:BLOCK[2427:35]:EXPR_RESULT[2428:10]:SETPROP[2428:10]:FUNCTION[2428:31]:BLOCK[2428:56]:BLOCK[2433:4]:BLOCK[2434:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:BLOCK[2427:5]:BLOCK[2427:35]:EXPR_RESULT[2428:10]:SETPROP[2428:10]:FUNCTION[2428:31]:BLOCK[2428:56]:BLOCK[2433:4]:BLOCK[2434:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:BLOCK[2427:5]:BLOCK[2427:35]:EXPR_RESULT[2428:10]:SETPROP[2428:10]:FUNCTION[2428:31]:BLOCK[2428:56]:BLOCK[2433:4]:BLOCK[2434:6]:TRY[2436:13]:CATCH[2440:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:BLOCK[2427:5]:BLOCK[2427:35]:EXPR_RESULT[2428:10]:SETPROP[2428:10]:FUNCTION[2428:31]:BLOCK[2428:56]:BLOCK[2433:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:BLOCK[2427:5]:BLOCK[2427:35]:EXPR_RESULT[2448:10]:SETPROP[2448:10]:FUNCTION[2448:37]:BLOCK[2448:55]:LOOP[2450:4]:BLOCK[2450:7]:BLOCK[2453:6]:BLOCK[2454:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:BLOCK[2427:5]:BLOCK[2427:35]:EXPR_RESULT[2448:10]:SETPROP[2448:10]:FUNCTION[2448:37]:BLOCK[2448:55]:LOOP[2450:4]:BLOCK[2450:7]:BLOCK[2453:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:BLOCK[2427:5]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:BLOCK[2418:5]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:BLOCK[2278:5]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2235:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2463:0]:BLOCK[2463:53]:EXPR_RESULT[2465:10]:SETPROP[2465:10]:FUNCTION[2465:27]:BLOCK[2465:54]:BLOCK[2468:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2463:0]:BLOCK[2463:53]:EXPR_RESULT[2465:10]:SETPROP[2465:10]:FUNCTION[2465:27]:BLOCK[2465:54]:BLOCK[2469:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2463:0]:BLOCK[2463:53]:EXPR_RESULT[2465:10]:SETPROP[2465:10]:FUNCTION[2465:27]:BLOCK[2465:54]:BLOCK[2474:4]:BLOCK[2474:56]:EXPR_VOID[2475:6]:CALL[2475:6]:FUNCTION[2475:34]:BLOCK[2475:49]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2463:0]:BLOCK[2463:53]:EXPR_RESULT[2465:10]:SETPROP[2465:10]:FUNCTION[2465:27]:BLOCK[2465:54]:BLOCK[2474:4]:BLOCK[2474:56]:EXPR_VOID[2476:6]:CALL[2476:6]:FUNCTION[2477:14]:BLOCK[2477:29]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2463:0]:BLOCK[2463:53]:EXPR_RESULT[2465:10]:SETPROP[2465:10]:FUNCTION[2465:27]:BLOCK[2465:54]:BLOCK[2474:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2463:0]:BLOCK[2463:53]:EXPR_RESULT[2465:10]:SETPROP[2465:10]:FUNCTION[2465:27]:BLOCK[2465:54]:BLOCK[2474:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2463:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2490:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2491:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2499:4]:BLOCK[2499:54]:BLOCK[2503:6]:EXPR_VOID[2504:8]:CALL[2504:8]:FUNCTION[2504:23]:BLOCK[2504:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2499:4]:BLOCK[2499:54]:BLOCK[2503:6]:EXPR_VOID[2506:8]:CALL[2506:8]:FUNCTION[2506:23]:BLOCK[2506:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2499:4]:BLOCK[2499:54]:BLOCK[2503:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2499:4]:BLOCK[2499:54]:BLOCK[2503:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2499:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:BLOCK[2486:45]:EXPR_RESULT[2487:10]:SETPROP[2487:10]:FUNCTION[2487:28]:BLOCK[2487:55]:BLOCK[2499:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2486:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2594:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[3407:0]:BLOCK[3407:26]:EXPR_RESULT[3410:11]:SETPROP[3410:11]:FUNCTION[3410:29]:BLOCK[3410:44]:LOOP[3411:4]:BLOCK[3412:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[3407:0]:BLOCK[3407:26]:EXPR_RESULT[3410:11]:SETPROP[3410:11]:FUNCTION[3410:29]:BLOCK[3410:44]:LOOP[3411:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[3407:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[35:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[3760:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[4194:0]:EXPR_RESULT[4194:38]:SETPROP[4194:38]:CALL[4194:72]:FUNCTION[4194:72]:BLOCK[4194:97]:EXPR_VOID[4199:2]:SETPROP[4199:2]:HOOK[4199:43]:FUNCTION[4204:6]:BLOCK[4204:35]:BLOCK[4207:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[4194:0]:EXPR_RESULT[4194:38]:SETPROP[4194:38]:CALL[4194:72]:FUNCTION[4194:72]:BLOCK[4194:97]:EXPR_VOID[4199:2]:SETPROP[4199:2]:HOOK[4199:43]:FUNCTION[4204:6]:BLOCK[4204:35]:LOOP[4212:4]:BLOCK[4212:54]:BLOCK[4213:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[4194:0]:EXPR_RESULT[4194:38]:SETPROP[4194:38]:CALL[4194:72]:FUNCTION[4194:72]:BLOCK[4194:97]:EXPR_VOID[4199:2]:SETPROP[4199:2]:HOOK[4199:43]:FUNCTION[4204:6]:BLOCK[4204:35]:LOOP[4212:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[4194:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[526:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[548:6]:LEAVEWITH[0:0]:LEAVEWITH
Missing position for node SCRIPT[0:0]:BLOCK[813:0]:BLOCK[813:30]:FUNCTION[814:2]:BLOCK[814:24]:BLOCK[815:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[813:0]:BLOCK[813:30]:FUNCTION[814:2]:BLOCK[814:24]:BLOCK[816:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[813:0]:BLOCK[813:30]:FUNCTION[814:2]:BLOCK[814:24]:LOOP[819:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[813:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[828:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[914:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[917:0]:EXPR_RESULT[917:36]:SETPROP[917:36]:FUNCTION[917:56]:BLOCK[917:74]:BLOCK[920:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[917:0]:EXPR_RESULT[917:36]:SETPROP[917:36]:FUNCTION[917:56]:BLOCK[917:74]:LOOP[921:2]:BLOCK[922:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[917:0]:EXPR_RESULT[917:36]:SETPROP[917:36]:FUNCTION[917:56]:BLOCK[917:74]:LOOP[921:2]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[917:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[926:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[940:0]:BLOCK[940:28]:EXPR_RESULT[941:8]:SETPROP[941:8]:FUNCTION[941:27]:BLOCK[941:38]:LOOP[943:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[940:0]:BLOCK[940:28]:EXPR_RESULT[941:8]:SETPROP[941:8]:FUNCTION[941:27]:BLOCK[941:38]:LOOP[944:4]:BLOCK[944:64]:BLOCK[945:6]:BLOCK[945:40]:LOOP[946:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[940:0]:BLOCK[940:28]:EXPR_RESULT[941:8]:SETPROP[941:8]:FUNCTION[941:27]:BLOCK[941:38]:LOOP[944:4]:BLOCK[944:64]:BLOCK[945:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[940:0]:BLOCK[940:28]:EXPR_RESULT[941:8]:SETPROP[941:8]:FUNCTION[941:27]:BLOCK[941:38]:LOOP[944:4]:BLOCK[944:64]:BLOCK[945:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[940:0]:BLOCK[940:28]:EXPR_RESULT[941:8]:SETPROP[941:8]:FUNCTION[941:27]:BLOCK[941:38]:LOOP[944:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[940:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[101:0]:SETPROP[101:0]:FUNCTION[101:16]:BLOCK[101:46]:LOCAL_BLOCK[102:2]:LOOP[102:2]:BLOCK[103:4]:EXPR_VOID[102:11]:SETNAME[102:11]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[101:0]:SETPROP[101:0]:FUNCTION[101:16]:BLOCK[101:46]:LOCAL_BLOCK[102:2]:LOOP[102:2]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[101:0]:SETPROP[101:0]:FUNCTION[101:16]:BLOCK[101:46]:LOCAL_BLOCK[102:2]:LOOP[102:2]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[101:0]:SETPROP[101:0]:FUNCTION[101:16]:BLOCK[101:46]:LOCAL_BLOCK[102:2]:LOOP[102:2]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[101:0]:SETPROP[101:0]:FUNCTION[101:16]:BLOCK[101:46]:LOCAL_BLOCK[102:2]:LOOP[102:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[108:11]:BLOCK[108:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[108:11]:BLOCK[108:28]:TRY[109:4]:BLOCK[109:8]:BLOCK[110:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[108:11]:BLOCK[108:28]:TRY[109:4]:BLOCK[109:8]:BLOCK[111:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[108:11]:BLOCK[108:28]:TRY[109:4]:CATCH[113:6]:BLOCK[114:6]:BLOCK[114:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[108:11]:BLOCK[108:28]:TRY[109:4]:CATCH[113:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:BLOCK[128:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:BLOCK[129:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:BLOCK[130:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:LOCAL_BLOCK[133:4]:LOOP[133:4]:BLOCK[133:33]:BLOCK[133:33]:BLOCK[135:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:LOCAL_BLOCK[133:4]:LOOP[133:4]:BLOCK[133:33]:EXPR_VOID[133:13]:SETNAME[133:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:LOCAL_BLOCK[133:4]:LOOP[133:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:LOCAL_BLOCK[133:4]:LOOP[133:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:LOCAL_BLOCK[133:4]:LOOP[133:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:LOCAL_BLOCK[133:4]:LOOP[133:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:SWITCH[121:4]:CASE[122:6]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:SWITCH[121:4]:CASE[123:6]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[119:10]:BLOCK[119:27]:SWITCH[121:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[150:8]:BLOCK[150:25]:LOCAL_BLOCK[152:4]:LOOP[152:4]:BLOCK[153:6]:EXPR_VOID[152:13]:SETNAME[152:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[150:8]:BLOCK[150:25]:LOCAL_BLOCK[152:4]:LOOP[152:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[150:8]:BLOCK[150:25]:LOCAL_BLOCK[152:4]:LOOP[152:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[150:8]:BLOCK[150:25]:LOCAL_BLOCK[152:4]:LOOP[152:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[150:8]:BLOCK[150:25]:LOCAL_BLOCK[152:4]:LOOP[152:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[157:10]:BLOCK[157:27]:LOCAL_BLOCK[159:4]:LOOP[159:4]:BLOCK[160:6]:EXPR_VOID[159:13]:SETNAME[159:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[157:10]:BLOCK[157:27]:LOCAL_BLOCK[159:4]:LOOP[159:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[157:10]:BLOCK[157:27]:LOCAL_BLOCK[159:4]:LOOP[159:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[157:10]:BLOCK[157:27]:LOCAL_BLOCK[159:4]:LOOP[159:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[107:0]:CALL[107:0]:OBJECTLIT[107:22]:FUNCTION[157:10]:BLOCK[157:27]:LOCAL_BLOCK[159:4]:LOOP[159:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1124:9]:BLOCK[1124:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1128:12]:BLOCK[1128:32]:BLOCK[1129:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1128:12]:BLOCK[1128:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1133:14]:BLOCK[1133:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1137:12]:BLOCK[1137:57]:EXPR_VOID[1138:4]:CALL[1138:4]:FUNCTION[1138:14]:BLOCK[1138:34]:BLOCK[1139:6]:BLOCK[1139:50]:TRY[1140:8]:CATCH[1142:10]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1137:12]:BLOCK[1137:57]:EXPR_VOID[1138:4]:CALL[1138:4]:FUNCTION[1138:14]:BLOCK[1138:34]:BLOCK[1139:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1137:12]:BLOCK[1137:57]:EXPR_VOID[1138:4]:CALL[1138:4]:FUNCTION[1138:14]:BLOCK[1138:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1121:0]:SETPROP[1121:0]:OBJECTLIT[1121:18]:FUNCTION[1137:12]:BLOCK[1137:57]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1150:0]:CALL[1150:0]:OBJECTLIT[1150:25]:FUNCTION[1151:14]:BLOCK[1151:25]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1150:0]:CALL[1150:0]:OBJECTLIT[1150:25]:FUNCTION[1152:14]:BLOCK[1152:25]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1155:0]:SETPROP[1155:0]:CALL[1155:12]:OBJECTLIT[1155:25]:FUNCTION[1156:14]:BLOCK[1156:32]:BLOCK[1170:4]:BLOCK[1172:9]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1155:0]:SETPROP[1155:0]:CALL[1155:12]:OBJECTLIT[1155:25]:FUNCTION[1156:14]:BLOCK[1156:32]:BLOCK[1170:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1155:0]:SETPROP[1155:0]:CALL[1155:12]:OBJECTLIT[1155:25]:FUNCTION[1156:14]:BLOCK[1156:32]:BLOCK[1170:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1155:0]:SETPROP[1155:0]:CALL[1155:12]:OBJECTLIT[1155:25]:FUNCTION[1156:14]:BLOCK[1156:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1180:14]:BLOCK[1180:45]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:BLOCK[1191:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:BLOCK[1199:4]:BLOCK[1199:47]:BLOCK[1201:6]:BLOCK[1203:11]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:BLOCK[1199:4]:BLOCK[1199:47]:BLOCK[1201:6]:EXPR_VOID[1201:30]:SETPROP_OP[1201:30]:ADD[0:0]:ADD
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:BLOCK[1199:4]:BLOCK[1199:47]:BLOCK[1201:6]:EXPR_VOID[1201:30]:SETPROP_OP[1201:30]:ADD[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:BLOCK[1199:4]:BLOCK[1199:47]:BLOCK[1201:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:BLOCK[1199:4]:BLOCK[1199:47]:BLOCK[1201:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:BLOCK[1199:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:TRY[1207:4]:BLOCK[1207:8]:BLOCK[1209:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:TRY[1207:4]:BLOCK[1207:8]:BLOCK[1215:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:TRY[1207:4]:BLOCK[1207:8]:BLOCK[1224:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1186:11]:BLOCK[1186:25]:TRY[1207:4]:CATCH[1228:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1233:17]:BLOCK[1233:28]:BLOCK[1235:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1233:17]:BLOCK[1233:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:BLOCK[1246:4]:BLOCK[1246:31]:BLOCK[1254:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:BLOCK[1246:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:BLOCK[1260:4]:BLOCK[1260:56]:BLOCK[1263:6]:EXPR_VOID[1267:8]:CALL[1267:8]:FUNCTION[1267:24]:BLOCK[1267:39]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:BLOCK[1260:4]:BLOCK[1260:56]:BLOCK[1263:6]:LOOP[1264:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:BLOCK[1260:4]:BLOCK[1260:56]:BLOCK[1263:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:BLOCK[1260:4]:BLOCK[1260:56]:BLOCK[1263:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:BLOCK[1260:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:LOCAL_BLOCK[1270:4]:LOOP[1270:4]:BLOCK[1271:6]:EXPR_VOID[1270:13]:SETNAME[1270:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:LOCAL_BLOCK[1270:4]:LOOP[1270:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:LOCAL_BLOCK[1270:4]:LOOP[1270:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:LOCAL_BLOCK[1270:4]:LOOP[1270:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:LOCAL_BLOCK[1270:4]:LOOP[1270:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1239:21]:BLOCK[1239:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1279:13]:BLOCK[1279:24]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1279:13]:BLOCK[1279:24]:TRY[1280:4]:CATCH[1282:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1285:23]:BLOCK[1285:44]:BLOCK[1288:4]:BLOCK[1288:29]:BLOCK[1299:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1285:23]:BLOCK[1285:44]:BLOCK[1288:4]:BLOCK[1288:29]:TRY[1289:6]:CATCH[1294:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1285:23]:BLOCK[1285:44]:BLOCK[1288:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1285:23]:BLOCK[1285:44]:BLOCK[1312:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1285:23]:BLOCK[1285:44]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1285:23]:BLOCK[1285:44]:TRY[1305:4]:CATCH[1308:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1318:13]:BLOCK[1318:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1318:13]:BLOCK[1318:28]:TRY[1319:4]:CATCH[1321:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1324:16]:BLOCK[1324:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1324:16]:BLOCK[1324:27]:TRY[1325:4]:CATCH[1327:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1177:0]:SETPROP[1177:0]:CALL[1177:15]:OBJECTLIT[1177:39]:FUNCTION[1332:21]:BLOCK[1332:41]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1342:14]:BLOCK[1342:31]:BLOCK[1347:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1342:14]:BLOCK[1342:31]:BLOCK[1354:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1342:14]:BLOCK[1342:31]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1366:17]:BLOCK[1366:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1366:17]:BLOCK[1366:28]:TRY[1367:4]:CATCH[1369:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1374:17]:BLOCK[1374:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1374:17]:BLOCK[1374:28]:TRY[1375:4]:CATCH[1377:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1388:18]:BLOCK[1388:29]:BLOCK[1390:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1388:18]:BLOCK[1388:29]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1388:18]:BLOCK[1388:29]:TRY[1392:4]:CATCH[1394:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1399:20]:BLOCK[1399:31]:BLOCK[1401:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1399:20]:BLOCK[1399:31]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1341:0]:SETPROP[1341:0]:CALL[1341:16]:OBJECTLIT[1341:29]:FUNCTION[1399:20]:BLOCK[1399:31]:TRY[1405:4]:CATCH[1407:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1414:14]:BLOCK[1414:56]:EXPR_VOID[1422:4]:SETPROP[1422:4]:CALL[1422:26]:GETPROP[1425:7]:FUNCTION[1422:26]:BLOCK[1422:51]:BLOCK[1424:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1414:14]:BLOCK[1414:56]:EXPR_VOID[1422:4]:SETPROP[1422:4]:CALL[1422:26]:GETPROP[1425:7]:FUNCTION[1422:26]:BLOCK[1422:51]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1414:14]:BLOCK[1414:56]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1430:17]:BLOCK[1430:40]:BLOCK[1434:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1430:17]:BLOCK[1430:40]:BLOCK[1436:4]:BLOCK[1436:32]:BLOCK[1437:6]:BLOCK[1437:29]:BLOCK[1438:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1430:17]:BLOCK[1430:40]:BLOCK[1436:4]:BLOCK[1436:32]:BLOCK[1437:6]:BLOCK[1437:29]:BLOCK[1438:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1430:17]:BLOCK[1430:40]:BLOCK[1436:4]:BLOCK[1436:32]:BLOCK[1437:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1430:17]:BLOCK[1430:40]:BLOCK[1436:4]:BLOCK[1436:32]:BLOCK[1437:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1430:17]:BLOCK[1430:40]:BLOCK[1436:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1413:0]:SETPROP[1413:0]:CALL[1413:15]:OBJECTLIT[1413:42]:FUNCTION[1430:17]:BLOCK[1430:40]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1449:0]:SETPROP[1449:0]:CALL[1449:25]:OBJECTLIT[1449:49]:FUNCTION[1450:14]:BLOCK[1450:56]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1449:0]:SETPROP[1449:0]:CALL[1449:25]:OBJECTLIT[1449:49]:FUNCTION[1464:9]:BLOCK[1464:20]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1449:0]:SETPROP[1449:0]:CALL[1449:25]:OBJECTLIT[1449:49]:FUNCTION[1469:8]:BLOCK[1469:19]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1449:0]:SETPROP[1449:0]:CALL[1449:25]:OBJECTLIT[1449:49]:FUNCTION[1475:18]:BLOCK[1475:37]:BLOCK[1476:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1449:0]:SETPROP[1449:0]:CALL[1449:25]:OBJECTLIT[1449:49]:FUNCTION[1475:18]:BLOCK[1475:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1449:0]:SETPROP[1449:0]:CALL[1449:25]:OBJECTLIT[1449:49]:FUNCTION[1485:16]:BLOCK[1485:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1533:1]:CALL[1533:1]:GETPROP[1548:3]:FUNCTION[1533:1]:BLOCK[1533:12]:EXPR_VOID[1535:2]:SETPROP[1535:2]:FUNCTION[1535:17]:BLOCK[1535:47]:BLOCK[1539:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1533:1]:CALL[1533:1]:GETPROP[1548:3]:FUNCTION[1533:1]:BLOCK[1533:12]:EXPR_VOID[1535:2]:SETPROP[1535:2]:FUNCTION[1535:17]:BLOCK[1535:47]:BLOCK[1544:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1533:1]:CALL[1533:1]:GETPROP[1548:3]:FUNCTION[1533:1]:BLOCK[1533:12]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1579:10]:BLOCK[1579:37]:BLOCK[1581:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1579:10]:BLOCK[1579:37]:BLOCK[1582:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1589:11]:BLOCK[1589:38]:BLOCK[1591:4]:BLOCK[1592:9]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1589:11]:BLOCK[1589:38]:BLOCK[1591:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1589:11]:BLOCK[1589:38]:BLOCK[1591:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:BLOCK[1604:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:BLOCK[1610:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:LOOP[1618:4]:BLOCK[1618:43]:LOCAL_BLOCK[1620:6]:LOOP[1620:6]:BLOCK[1620:24]:BLOCK[1620:24]:BLOCK[1622:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:LOOP[1618:4]:BLOCK[1618:43]:LOCAL_BLOCK[1620:6]:LOOP[1620:6]:BLOCK[1620:24]:EXPR_VOID[1620:15]:SETNAME[1620:15]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:LOOP[1618:4]:BLOCK[1618:43]:LOCAL_BLOCK[1620:6]:LOOP[1620:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:LOOP[1618:4]:BLOCK[1618:43]:LOCAL_BLOCK[1620:6]:LOOP[1620:6]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:LOOP[1618:4]:BLOCK[1618:43]:LOCAL_BLOCK[1620:6]:LOOP[1620:6]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:LOOP[1618:4]:BLOCK[1618:43]:LOCAL_BLOCK[1620:6]:LOOP[1620:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:LOOP[1618:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1603:18]:BLOCK[1603:29]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1635:19]:BLOCK[1635:48]:BLOCK[1636:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:BLOCK[1646:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:LOCAL_BLOCK[1652:4]:LOOP[1652:4]:BLOCK[1652:33]:BLOCK[1652:33]:BLOCK[1657:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:LOCAL_BLOCK[1652:4]:LOOP[1652:4]:BLOCK[1652:33]:BLOCK[1652:33]:BLOCK[1658:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:LOCAL_BLOCK[1652:4]:LOOP[1652:4]:BLOCK[1652:33]:EXPR_VOID[1652:9]:SETNAME[1652:9]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:LOCAL_BLOCK[1652:4]:LOOP[1652:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:LOCAL_BLOCK[1652:4]:LOOP[1652:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:LOCAL_BLOCK[1652:4]:LOOP[1652:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1643:10]:BLOCK[1643:40]:LOCAL_BLOCK[1652:4]:LOOP[1652:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1675:8]:BLOCK[1675:47]:BLOCK[1677:4]:BLOCK[1679:9]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1675:8]:BLOCK[1675:47]:BLOCK[1677:4]:BLOCK[1679:9]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1675:8]:BLOCK[1675:47]:BLOCK[1677:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1675:8]:BLOCK[1675:47]:BLOCK[1677:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1675:8]:BLOCK[1675:47]:BLOCK[1681:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1687:11]:BLOCK[1687:29]:EXPR_VOID[1690:4]:CALL[1690:4]:FUNCTION[1690:48]:BLOCK[1690:63]:BLOCK[1693:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1687:11]:BLOCK[1687:29]:EXPR_VOID[1690:4]:CALL[1690:4]:FUNCTION[1690:48]:BLOCK[1690:63]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1698:22]:BLOCK[1698:50]:LOOP[1701:4]:BLOCK[1702:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1698:22]:BLOCK[1698:50]:LOOP[1701:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1715:19]:BLOCK[1715:37]:LOOP[1717:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1721:24]:BLOCK[1721:42]:BLOCK[1722:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1721:24]:BLOCK[1721:42]:BLOCK[1724:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1721:24]:BLOCK[1721:42]:LOOP[1723:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1741:9]:BLOCK[1741:37]:BLOCK[1742:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1747:6]:BLOCK[1747:43]:BLOCK[1749:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1755:8]:BLOCK[1755:45]:BLOCK[1757:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1763:12]:BLOCK[1763:49]:BLOCK[1765:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1771:8]:BLOCK[1771:45]:BLOCK[1773:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1789:12]:BLOCK[1789:30]:BLOCK[1792:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1798:17]:BLOCK[1798:41]:BLOCK[1800:4]:BLOCK[1800:30]:BLOCK[1802:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1798:17]:BLOCK[1798:41]:BLOCK[1800:4]:BLOCK[1800:30]:BLOCK[1803:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1798:17]:BLOCK[1798:41]:BLOCK[1800:4]:BLOCK[1800:30]:BLOCK[1804:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1798:17]:BLOCK[1798:41]:BLOCK[1800:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:BLOCK[1816:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:BLOCK[1816:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:BLOCK[1819:33]:BLOCK[1819:33]:BLOCK[1822:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:BLOCK[1819:33]:BLOCK[1819:33]:BLOCK[1823:6]:BLOCK[1825:11]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:BLOCK[1819:33]:BLOCK[1819:33]:BLOCK[1823:6]:BLOCK[1825:11]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:BLOCK[1819:33]:BLOCK[1819:33]:BLOCK[1823:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:BLOCK[1819:33]:BLOCK[1819:33]:BLOCK[1823:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:BLOCK[1819:33]:EXPR_VOID[1819:13]:SETNAME[1819:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1812:18]:BLOCK[1812:49]:LOCAL_BLOCK[1819:4]:LOOP[1819:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1844:16]:BLOCK[1844:45]:BLOCK[1845:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1851:16]:BLOCK[1851:45]:BLOCK[1852:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1851:16]:BLOCK[1851:45]:BLOCK[1853:4]:EXPR_VOID[1853:40]:SETPROP_OP[1853:40]:ADD[0:0]:ADD
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1851:16]:BLOCK[1851:45]:BLOCK[1853:4]:EXPR_VOID[1853:40]:SETPROP_OP[1853:40]:ADD[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1851:16]:BLOCK[1851:45]:BLOCK[1853:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1858:19]:BLOCK[1858:48]:BLOCK[1859:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1865:19]:BLOCK[1865:48]:BLOCK[1866:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1872:19]:BLOCK[1872:37]:LOOP[1875:4]:BLOCK[1875:17]:BLOCK[1877:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1872:19]:BLOCK[1872:37]:LOOP[1875:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1888:16]:BLOCK[1888:44]:BLOCK[1892:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1888:16]:BLOCK[1888:44]:BLOCK[1895:4]:BLOCK[1895:57]:BLOCK[1898:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1888:16]:BLOCK[1888:44]:BLOCK[1895:4]:BLOCK[1895:57]:BLOCK[1902:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1888:16]:BLOCK[1888:44]:BLOCK[1895:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1888:16]:BLOCK[1888:44]:LOOP[1905:4]:BLOCK[1906:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1888:16]:BLOCK[1888:44]:LOOP[1905:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1917:12]:BLOCK[1917:37]:BLOCK[1921:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1917:12]:BLOCK[1917:37]:BLOCK[1925:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:BLOCK[1936:4]:BLOCK[1936:33]:EXPR_VOID[1936:33]:SETPROP_OP[1936:33]:ADD[0:0]:ADD
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:BLOCK[1936:4]:BLOCK[1936:33]:EXPR_VOID[1936:33]:SETPROP_OP[1936:33]:ADD[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:BLOCK[1936:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:LOCAL_BLOCK[1941:4]:LOOP[1941:4]:BLOCK[1942:6]:BLOCK[1942:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:LOCAL_BLOCK[1941:4]:LOOP[1941:4]:BLOCK[1942:6]:BLOCK[1942:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:LOCAL_BLOCK[1941:4]:LOOP[1941:4]:BLOCK[1942:6]:EXPR_VOID[1941:13]:SETNAME[1941:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:LOCAL_BLOCK[1941:4]:LOOP[1941:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:LOCAL_BLOCK[1941:4]:LOOP[1941:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:LOCAL_BLOCK[1941:4]:LOOP[1941:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1933:12]:BLOCK[1933:38]:LOCAL_BLOCK[1941:4]:LOOP[1941:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1958:17]:BLOCK[1958:35]:BLOCK[1961:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1981:18]:BLOCK[1981:36]:BLOCK[1984:4]:BLOCK[1984:33]:BLOCK[1989:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1981:18]:BLOCK[1981:36]:BLOCK[1984:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[1997:18]:BLOCK[1997:36]:BLOCK[1999:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2010:16]:BLOCK[2010:34]:BLOCK[2012:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2010:16]:BLOCK[2010:34]:BLOCK[2014:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2019:16]:BLOCK[2019:34]:BLOCK[2021:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2037:20]:BLOCK[2037:38]:LOOP[2039:4]:BLOCK[2039:7]:BLOCK[2043:6]:BLOCK[2043:19]:BLOCK[2044:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2037:20]:BLOCK[2037:38]:LOOP[2039:4]:BLOCK[2039:7]:BLOCK[2043:6]:BLOCK[2043:19]:BLOCK[2046:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2037:20]:BLOCK[2037:38]:LOOP[2039:4]:BLOCK[2039:7]:BLOCK[2043:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2052:14]:BLOCK[2052:32]:BLOCK[2054:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2076:14]:BLOCK[2076:32]:BLOCK[2078:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2102:19]:BLOCK[2102:37]:BLOCK[2103:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2102:19]:BLOCK[2102:37]:BLOCK[2104:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2102:19]:BLOCK[2102:37]:LOOP[2106:4]:BLOCK[2107:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2102:19]:BLOCK[2102:37]:LOOP[2106:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2113:18]:BLOCK[2113:39]:LOOP[2117:4]:BLOCK[2117:7]:BLOCK[2122:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2113:18]:BLOCK[2113:39]:LOOP[2128:4]:BLOCK[2128:7]:BLOCK[2129:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2158:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2164:4]:BLOCK[2164:33]:EXPR_VOID[2164:33]:SETELEM_OP[2164:33]:SUB[0:0]:SUB
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2164:4]:BLOCK[2164:33]:EXPR_VOID[2164:33]:SETELEM_OP[2164:33]:SUB[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2164:4]:BLOCK[2164:33]:EXPR_VOID[2165:42]:SETELEM_OP[2165:42]:SUB[0:0]:SUB
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2164:4]:BLOCK[2164:33]:EXPR_VOID[2165:42]:SETELEM_OP[2165:42]:SUB[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2164:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2170:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2171:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2172:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1552:0]:SETPROP[1552:0]:OBJECTLIT[1552:18]:FUNCTION[2138:17]:BLOCK[2138:43]:BLOCK[2173:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[197:0]:CALL[197:0]:OBJECTLIT[197:34]:FUNCTION[203:8]:BLOCK[203:19]:BLOCK[204:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[197:0]:CALL[197:0]:OBJECTLIT[197:34]:FUNCTION[218:9]:BLOCK[218:20]:BLOCK[219:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[197:0]:CALL[197:0]:OBJECTLIT[197:34]:FUNCTION[240:13]:BLOCK[240:24]:BLOCK[241:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2522:0]:SETPROP[2522:0]:FUNCTION[2522:42]:BLOCK[2522:66]:EXPR_VOID[2525:2]:CALL[2525:2]:FUNCTION[2525:13]:BLOCK[2525:24]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2529:0]:SETPROP[2529:0]:OBJECTLIT[2529:33]:OBJECTLIT[2530:10]:FUNCTION[2532:12]:BLOCK[2532:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2529:0]:SETPROP[2529:0]:OBJECTLIT[2529:33]:OBJECTLIT[2530:10]:FUNCTION[2535:21]:BLOCK[2535:46]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2529:0]:SETPROP[2529:0]:OBJECTLIT[2529:33]:OBJECTLIT[2539:7]:FUNCTION[2541:12]:BLOCK[2541:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2529:0]:SETPROP[2529:0]:OBJECTLIT[2529:33]:OBJECTLIT[2539:7]:FUNCTION[2544:21]:BLOCK[2544:46]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2529:0]:SETPROP[2529:0]:OBJECTLIT[2529:33]:OBJECTLIT[2549:10]:FUNCTION[2551:12]:BLOCK[2551:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2529:0]:SETPROP[2529:0]:OBJECTLIT[2529:33]:OBJECTLIT[2555:9]:FUNCTION[2557:12]:BLOCK[2557:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2529:0]:SETPROP[2529:0]:OBJECTLIT[2529:33]:OBJECTLIT[2555:9]:FUNCTION[2560:21]:BLOCK[2560:46]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2573:1]:CALL[2573:1]:GETPROP[2580:3]:FUNCTION[2573:1]:BLOCK[2573:12]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:BLOCK[2602:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:BLOCK[2608:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:BLOCK[2615:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:LOCAL_BLOCK[2617:4]:LOOP[2617:4]:BLOCK[2617:30]:BLOCK[2617:30]:BLOCK[2619:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:LOCAL_BLOCK[2617:4]:LOOP[2617:4]:BLOCK[2617:30]:EXPR_VOID[2617:9]:SETNAME[2617:9]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:LOCAL_BLOCK[2617:4]:LOOP[2617:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:LOCAL_BLOCK[2617:4]:LOOP[2617:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:LOCAL_BLOCK[2617:4]:LOOP[2617:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:FUNCTION[2607:29]:BLOCK[2607:47]:LOCAL_BLOCK[2617:4]:LOOP[2617:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:OBJECTLIT[2626:5]:FUNCTION[2627:13]:BLOCK[2627:24]:BLOCK[2629:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2601:0]:SETPROP[2601:0]:CALL[2601:18]:FUNCTION[2601:18]:BLOCK[2601:29]:VAR[2607:2]:NAME[2607:6]:CALL[2607:15]:OBJECTLIT[2626:5]:FUNCTION[2627:13]:BLOCK[2627:24]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2640:0]:SETPROP[2640:0]:FUNCTION[2640:23]:BLOCK[2640:52]:BLOCK[2641:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2648:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2659:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2664:2]:BLOCK[2665:7]:BLOCK[2666:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2664:2]:BLOCK[2665:7]:BLOCK[2666:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2664:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2664:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2712:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2717:2]:BLOCK[2717:35]:LOCAL_BLOCK[2718:4]:LOOP[2718:4]:BLOCK[2718:43]:BLOCK[2718:43]:BLOCK[2720:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2717:2]:BLOCK[2717:35]:LOCAL_BLOCK[2718:4]:LOOP[2718:4]:BLOCK[2718:43]:EXPR_VOID[2718:13]:SETNAME[2718:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2717:2]:BLOCK[2717:35]:LOCAL_BLOCK[2718:4]:LOOP[2718:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2717:2]:BLOCK[2717:35]:LOCAL_BLOCK[2718:4]:LOOP[2718:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2717:2]:BLOCK[2717:35]:LOCAL_BLOCK[2718:4]:LOOP[2718:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2717:2]:BLOCK[2717:35]:LOCAL_BLOCK[2718:4]:LOOP[2718:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2717:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:BLOCK[2728:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2670:2]:BLOCK[2670:27]:BLOCK[2672:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2670:2]:BLOCK[2670:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:LOCAL_BLOCK[2679:4]:LOOP[2679:4]:BLOCK[2679:34]:BLOCK[2679:34]:BLOCK[2681:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:LOCAL_BLOCK[2679:4]:LOOP[2679:4]:BLOCK[2679:34]:BLOCK[2679:34]:BLOCK[2682:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:LOCAL_BLOCK[2679:4]:LOOP[2679:4]:BLOCK[2679:34]:EXPR_VOID[2679:13]:SETNAME[2679:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:LOCAL_BLOCK[2679:4]:LOOP[2679:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:LOCAL_BLOCK[2679:4]:LOOP[2679:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:LOCAL_BLOCK[2679:4]:LOOP[2679:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:LOCAL_BLOCK[2679:4]:LOOP[2679:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2677:2]:BLOCK[2677:52]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2687:2]:BLOCK[2687:33]:BLOCK[2700:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2687:2]:BLOCK[2687:33]:BLOCK[2701:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2687:2]:BLOCK[2687:33]:BLOCK[2703:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:FUNCTION[2687:2]:BLOCK[2687:33]:BLOCK[2705:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2645:0]:SETPROP[2645:0]:FUNCTION[2645:21]:BLOCK[2645:39]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2732:0]:SETPROP[2732:0]:OBJECTLIT[2732:20]:FUNCTION[2733:17]:BLOCK[2733:28]:EXPR_VOID[2736:4]:CALL[2736:4]:FUNCTION[2736:28]:BLOCK[2736:40]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:FUNCTION[3376:17]:BLOCK[3376:48]:LOOP[3379:4]:BLOCK[3380:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:FUNCTION[3376:17]:BLOCK[3376:48]:LOOP[3379:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:FUNCTION[3385:15]:BLOCK[3385:53]:BLOCK[3386:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:FUNCTION[3392:21]:BLOCK[3392:52]:EXPR_VOID[3395:4]:CALL[3395:4]:FUNCTION[3395:59]:BLOCK[3395:71]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:FUNCTION[3392:21]:BLOCK[3392:52]:LOOP[3399:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:FUNCTION[2903:18]:BLOCK[2903:30]:BLOCK[2904:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:FUNCTION[2919:12]:BLOCK[2919:24]:BLOCK[2921:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:FUNCTION[2919:12]:BLOCK[2919:24]:BLOCK[2922:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2942:13]:BLOCK[2942:25]:LOOP[2947:8]:BLOCK[2947:47]:LOCAL_BLOCK[2949:10]:LOOP[2949:10]:BLOCK[2949:27]:BLOCK[2949:27]:BLOCK[2950:12]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2942:13]:BLOCK[2942:25]:LOOP[2947:8]:BLOCK[2947:47]:LOCAL_BLOCK[2949:10]:LOOP[2949:10]:BLOCK[2949:27]:EXPR_VOID[2949:19]:SETNAME[2949:19]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2942:13]:BLOCK[2942:25]:LOOP[2947:8]:BLOCK[2947:47]:LOCAL_BLOCK[2949:10]:LOOP[2949:10]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2942:13]:BLOCK[2942:25]:LOOP[2947:8]:BLOCK[2947:47]:LOCAL_BLOCK[2949:10]:LOOP[2949:10]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2942:13]:BLOCK[2942:25]:LOOP[2947:8]:BLOCK[2947:47]:LOCAL_BLOCK[2949:10]:LOOP[2949:10]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2942:13]:BLOCK[2942:25]:LOOP[2947:8]:BLOCK[2947:47]:LOCAL_BLOCK[2949:10]:LOOP[2949:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2942:13]:BLOCK[2942:25]:LOOP[2947:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2981:11]:BLOCK[2981:33]:BLOCK[2983:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2981:11]:BLOCK[2981:33]:BLOCK[2984:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2981:11]:BLOCK[2981:33]:BLOCK[2985:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2981:11]:BLOCK[2981:33]:BLOCK[2987:8]:BLOCK[2987:60]:BLOCK[2988:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2981:11]:BLOCK[2981:33]:BLOCK[2987:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[2898:9]:OBJECTLIT[2934:13]:FUNCTION[2981:11]:BLOCK[2981:33]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3000:12]:FUNCTION[3009:12]:BLOCK[3009:24]:BLOCK[3010:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3063:12]:BLOCK[3063:27]:LOOP[3064:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3070:10]:BLOCK[3070:26]:LOOP[3071:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3076:12]:BLOCK[3076:28]:LOOP[3077:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3085:11]:BLOCK[3085:49]:BLOCK[3087:6]:BLOCK[3087:19]:LOOP[3088:8]:BLOCK[3088:90]:BLOCK[3090:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3085:11]:BLOCK[3085:49]:BLOCK[3087:6]:BLOCK[3087:19]:LOOP[3088:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3085:11]:BLOCK[3085:49]:BLOCK[3087:6]:BLOCK[3092:13]:LOOP[3093:8]:BLOCK[3094:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3085:11]:BLOCK[3085:49]:BLOCK[3087:6]:BLOCK[3092:13]:LOOP[3093:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3085:11]:BLOCK[3085:49]:BLOCK[3087:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3085:11]:BLOCK[3085:49]:BLOCK[3087:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3085:11]:BLOCK[3085:49]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3099:12]:BLOCK[3099:28]:BLOCK[3100:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3099:12]:BLOCK[3099:28]:LOOP[3102:6]:BLOCK[3103:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3099:12]:BLOCK[3099:28]:LOOP[3102:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3111:16]:BLOCK[3111:32]:LOOP[3113:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3118:11]:BLOCK[3118:27]:LOOP[3120:6]:BLOCK[3120:64]:LOOP[3121:8]:BLOCK[3122:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3118:11]:BLOCK[3118:27]:LOOP[3120:6]:BLOCK[3120:64]:LOOP[3121:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3118:11]:BLOCK[3118:27]:LOOP[3120:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3127:14]:BLOCK[3127:30]:LOOP[3128:6]:BLOCK[3128:64]:BLOCK[3130:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3127:14]:BLOCK[3127:30]:LOOP[3128:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3135:18]:BLOCK[3135:34]:LOOP[3137:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3142:24]:BLOCK[3142:39]:LOOP[3143:6]:BLOCK[3144:7]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3142:24]:BLOCK[3142:39]:LOOP[3143:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3148:28]:BLOCK[3148:43]:LOOP[3149:6]:BLOCK[3150:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3148:28]:BLOCK[3148:43]:LOOP[3149:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:BLOCK[3158:17]:BLOCK[3159:8]:BLOCK[3159:24]:BLOCK[3161:10]:BLOCK[3161:42]:LOOP[3162:12]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:BLOCK[3158:17]:BLOCK[3159:8]:BLOCK[3159:24]:BLOCK[3161:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:BLOCK[3158:17]:BLOCK[3159:8]:BLOCK[3159:24]:BLOCK[3161:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:BLOCK[3158:17]:BLOCK[3159:8]:BLOCK[3159:24]:BLOCK[3166:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:BLOCK[3158:17]:BLOCK[3159:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:BLOCK[3158:17]:LOOP[3168:8]:BLOCK[3169:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:BLOCK[3158:17]:LOOP[3168:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:BLOCK[3158:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3155:13]:BLOCK[3155:56]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3176:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3177:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3180:37]:LOOP[3181:12]:BLOCK[3182:14]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3180:37]:LOOP[3181:12]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:BLOCK[3183:49]:LOOP[3184:12]:BLOCK[3185:14]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:BLOCK[3183:49]:LOOP[3184:12]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:BLOCK[3186:17]:BLOCK[3186:47]:LOOP[3187:12]:BLOCK[3188:14]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:BLOCK[3186:17]:BLOCK[3186:47]:LOOP[3187:12]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:BLOCK[3186:17]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:BLOCK[3186:17]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:BLOCK[3183:17]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:BLOCK[3179:24]:BLOCK[3180:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:BLOCK[3179:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:LOOP[3192:8]:BLOCK[3193:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:BLOCK[3178:17]:LOOP[3192:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3174:8]:BLOCK[3174:46]:BLOCK[3178:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3199:15]:BLOCK[3199:60]:BLOCK[3200:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3204:17]:BLOCK[3204:50]:BLOCK[3205:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3204:17]:BLOCK[3204:50]:LOOP[3207:6]:BLOCK[3207:79]:BLOCK[3209:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3204:17]:BLOCK[3204:50]:LOOP[3207:6]:BLOCK[3207:79]:BLOCK[3210:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3204:17]:BLOCK[3204:50]:LOOP[3207:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3216:18]:BLOCK[3216:46]:BLOCK[3217:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3216:18]:BLOCK[3216:46]:LOOP[3219:6]:BLOCK[3220:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3216:18]:BLOCK[3216:46]:LOOP[3219:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3224:10]:BLOCK[3224:55]:BLOCK[3225:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3224:10]:BLOCK[3224:55]:LOOP[3227:6]:BLOCK[3227:50]:BLOCK[3229:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3224:10]:BLOCK[3224:55]:LOOP[3227:6]:BLOCK[3227:50]:BLOCK[3230:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3224:10]:BLOCK[3224:55]:LOOP[3227:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3235:12]:BLOCK[3235:59]:BLOCK[3236:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3060:12]:FUNCTION[3235:12]:BLOCK[3235:59]:BLOCK[3237:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3243:19]:BLOCK[3243:48]:LOOP[3244:6]:BLOCK[3244:64]:BLOCK[3245:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3243:19]:BLOCK[3243:48]:LOOP[3244:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3250:18]:BLOCK[3250:47]:LOOP[3251:6]:BLOCK[3251:64]:BLOCK[3252:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3250:18]:BLOCK[3250:47]:LOOP[3251:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3257:18]:BLOCK[3257:47]:LOOP[3259:6]:BLOCK[3260:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3257:18]:BLOCK[3257:47]:LOOP[3259:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3288:16]:BLOCK[3288:38]:BLOCK[3289:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3288:16]:BLOCK[3288:38]:RETURN[3290:6]:CALL[3290:13]:FUNCTION[3290:37]:BLOCK[3290:55]:BLOCK[3291:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3298:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3299:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3300:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:BLOCK[3309:34]:LOOP[3311:8]:BLOCK[3312:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:BLOCK[3309:34]:LOOP[3311:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:BLOCK[3313:13]:BLOCK[3313:64]:BLOCK[3314:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:BLOCK[3313:13]:BLOCK[3313:64]:LOOP[3318:8]:BLOCK[3318:72]:LOOP[3319:10]:BLOCK[3320:12]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:BLOCK[3313:13]:BLOCK[3313:64]:LOOP[3318:8]:BLOCK[3318:72]:LOOP[3319:10]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:BLOCK[3313:13]:BLOCK[3313:64]:LOOP[3318:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:BLOCK[3313:13]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:BLOCK[3309:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:LOOP[3303:6]:BLOCK[3303:50]:BLOCK[3304:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3297:9]:BLOCK[3297:57]:LOOP[3303:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3328:13]:BLOCK[3328:42]:LOOP[3329:6]:BLOCK[3329:64]:BLOCK[3331:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3328:13]:BLOCK[3328:42]:LOOP[3329:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3337:11]:BLOCK[3337:43]:LOOP[3341:6]:BLOCK[3342:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3337:11]:BLOCK[3337:43]:LOOP[3341:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3347:15]:BLOCK[3347:44]:LOOP[3348:6]:BLOCK[3349:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3347:15]:BLOCK[3347:44]:LOOP[3348:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3353:16]:BLOCK[3353:45]:LOOP[3354:6]:BLOCK[3355:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3353:16]:BLOCK[3353:45]:LOOP[3354:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3359:15]:BLOCK[3359:44]:LOOP[3360:6]:BLOCK[3361:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2895:0]:CALL[2895:0]:OBJECTLIT[2895:24]:OBJECTLIT[3242:11]:FUNCTION[3359:15]:BLOCK[3359:44]:LOOP[3360:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[333:8]:BLOCK[333:39]:LOOP[337:4]:BLOCK[337:30]:BLOCK[338:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[333:8]:BLOCK[333:39]:LOOP[337:4]:BLOCK[337:30]:BLOCK[338:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[333:8]:BLOCK[333:39]:LOOP[337:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[349:7]:BLOCK[349:45]:RETURN[353:4]:CALL[353:11]:FUNCTION[353:30]:BLOCK[353:46]:BLOCK[354:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[409:17]:BLOCK[409:37]:BLOCK[411:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[409:17]:BLOCK[409:37]:RETURN[413:4]:CALL[413:11]:FUNCTION[413:56]:BLOCK[413:77]:BLOCK[414:6]:BLOCK[414:39]:BLOCK[417:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[409:17]:BLOCK[409:37]:RETURN[413:4]:CALL[413:11]:FUNCTION[413:56]:BLOCK[413:77]:BLOCK[414:6]:BLOCK[414:39]:BLOCK[419:8]:BLOCK[419:25]:BLOCK[420:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[409:17]:BLOCK[409:37]:RETURN[413:4]:CALL[413:11]:FUNCTION[413:56]:BLOCK[413:77]:BLOCK[414:6]:BLOCK[414:39]:BLOCK[419:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[409:17]:BLOCK[409:37]:RETURN[413:4]:CALL[413:11]:FUNCTION[413:56]:BLOCK[413:77]:BLOCK[414:6]:BLOCK[414:39]:BLOCK[419:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[409:17]:BLOCK[409:37]:RETURN[413:4]:CALL[413:11]:FUNCTION[413:56]:BLOCK[413:77]:BLOCK[414:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[442:12]:BLOCK[442:23]:BLOCK[444:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[442:12]:BLOCK[442:23]:LOOP[450:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[468:11]:BLOCK[468:37]:BLOCK[473:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[485:10]:BLOCK[485:21]:BLOCK[487:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[492:12]:BLOCK[492:31]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[492:12]:BLOCK[492:31]:TRY[494:4]:BLOCK[494:8]:BLOCK[495:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[332:0]:CALL[332:0]:OBJECTLIT[332:32]:FUNCTION[492:12]:BLOCK[492:31]:TRY[494:4]:CATCH[496:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3456:15]:BLOCK[3456:30]:RETURN[3457:4]:CALL[3457:11]:FUNCTION[3458:6]:BLOCK[3458:32]:BLOCK[3459:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3466:13]:BLOCK[3466:44]:BLOCK[3470:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3466:13]:BLOCK[3466:44]:LOOP[3472:4]:BLOCK[3472:82]:BLOCK[3474:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3466:13]:BLOCK[3466:44]:LOOP[3472:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3513:11]:BLOCK[3513:35]:BLOCK[3517:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3513:11]:BLOCK[3513:35]:BLOCK[3520:4]:BLOCK[3520:16]:BLOCK[3521:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3513:11]:BLOCK[3513:35]:BLOCK[3520:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3451:0]:SETPROP[3451:0]:OBJECTLIT[3451:15]:FUNCTION[3513:11]:BLOCK[3513:35]:BLOCK[3525:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3546:5]:SETPROP[3546:5]:OBJECTLIT[3546:23]:FUNCTION[3547:13]:BLOCK[3547:31]:BLOCK[3549:4]:BLOCK[3549:43]:BLOCK[3551:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3546:5]:SETPROP[3546:5]:OBJECTLIT[3546:23]:FUNCTION[3547:13]:BLOCK[3547:31]:BLOCK[3549:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3546:5]:SETPROP[3546:5]:OBJECTLIT[3546:23]:FUNCTION[3582:12]:BLOCK[3582:30]:TRY[3584:4]:BLOCK[3584:8]:BLOCK[3586:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3546:5]:SETPROP[3546:5]:OBJECTLIT[3546:23]:FUNCTION[3582:12]:BLOCK[3582:30]:TRY[3584:4]:CATCH[3589:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3615:9]:BLOCK[3615:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3615:9]:BLOCK[3615:34]:SWITCH[3616:4]:CASE[3617:6]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3615:9]:BLOCK[3615:34]:SWITCH[3616:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3625:17]:BLOCK[3625:42]:BLOCK[3626:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3625:17]:BLOCK[3625:42]:BLOCK[3626:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3625:17]:BLOCK[3625:42]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3630:12]:BLOCK[3630:37]:BLOCK[3631:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3630:12]:BLOCK[3630:37]:BLOCK[3631:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3630:12]:BLOCK[3630:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3635:10]:BLOCK[3635:35]:BLOCK[3636:4]:BLOCK[3639:9]:LOOP[3641:6]:BLOCK[3641:64]:BLOCK[3644:8]:BLOCK[3644:20]:BLOCK[3645:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3635:10]:BLOCK[3635:35]:BLOCK[3636:4]:BLOCK[3639:9]:LOOP[3641:6]:BLOCK[3641:64]:BLOCK[3644:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3635:10]:BLOCK[3635:35]:BLOCK[3636:4]:BLOCK[3639:9]:LOOP[3641:6]:BLOCK[3641:64]:BLOCK[3644:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3635:10]:BLOCK[3635:35]:BLOCK[3636:4]:BLOCK[3639:9]:LOOP[3641:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3635:10]:BLOCK[3635:35]:BLOCK[3636:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3635:10]:BLOCK[3635:35]:BLOCK[3636:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3635:10]:BLOCK[3635:35]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3660:14]:BLOCK[3660:32]:BLOCK[3662:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3660:14]:BLOCK[3660:32]:LOOP[3664:4]:BLOCK[3664:50]:BLOCK[3666:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3614:5]:SETPROP[3614:5]:OBJECTLIT[3614:27]:FUNCTION[3660:14]:BLOCK[3660:32]:LOOP[3664:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3679:0]:SETPROP[3679:0]:CALL[3679:25]:OBJECTLIT[3679:58]:FUNCTION[3680:14]:BLOCK[3680:61]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3679:0]:SETPROP[3679:0]:CALL[3679:25]:OBJECTLIT[3679:58]:FUNCTION[3686:11]:BLOCK[3686:22]:BLOCK[3688:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3679:0]:SETPROP[3679:0]:CALL[3679:25]:OBJECTLIT[3679:58]:FUNCTION[3686:11]:BLOCK[3686:22]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3711:14]:BLOCK[3711:42]:BLOCK[3716:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3711:14]:BLOCK[3711:42]:BLOCK[3716:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3711:14]:BLOCK[3711:42]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3722:18]:BLOCK[3722:29]:BLOCK[3724:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3722:18]:BLOCK[3722:29]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3730:25]:BLOCK[3730:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3734:20]:BLOCK[3734:38]:BLOCK[3735:4]:BLOCK[3735:22]:SWITCH[3736:6]:CASE[3737:8]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3734:20]:BLOCK[3734:38]:BLOCK[3735:4]:BLOCK[3735:22]:SWITCH[3736:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3734:20]:BLOCK[3734:38]:BLOCK[3735:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3710:0]:SETPROP[3710:0]:CALL[3710:25]:OBJECTLIT[3710:38]:FUNCTION[3734:20]:BLOCK[3734:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3762:0]:CALL[3762:0]:OBJECTLIT[3762:21]:FUNCTION[3780:17]:BLOCK[3780:33]:SWITCH[3782:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:BLOCK[3794:2]:BLOCK[3800:9]:BLOCK[3800:39]:EXPR_VOID[3801:4]:SETNAME[3801:4]:FUNCTION[3801:15]:BLOCK[3801:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:BLOCK[3794:2]:BLOCK[3800:9]:BLOCK[3800:39]:EXPR_VOID[3801:4]:SETNAME[3801:4]:FUNCTION[3801:15]:BLOCK[3801:37]:SWITCH[3802:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:BLOCK[3794:2]:BLOCK[3800:9]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:BLOCK[3794:2]:BLOCK[3800:9]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:BLOCK[3794:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:BLOCK[3794:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:RETURN[3815:2]:OBJECTLIT[3815:9]:FUNCTION[3825:17]:BLOCK[3825:45]:BLOCK[3827:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3791:0]:SETPROP[3791:0]:CALL[3791:17]:FUNCTION[3791:17]:BLOCK[3791:28]:RETURN[3815:2]:OBJECTLIT[3815:9]:FUNCTION[3844:10]:BLOCK[3844:26]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3853:0]:SETPROP[3853:0]:CALL[3853:16]:FUNCTION[3853:16]:BLOCK[3853:27]:BLOCK[3859:2]:BLOCK[3859:28]:EXPR_VOID[3860:4]:CALL[3860:4]:OBJECTLIT[3860:27]:FUNCTION[3861:23]:BLOCK[3861:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3853:0]:SETPROP[3853:0]:CALL[3853:16]:FUNCTION[3853:16]:BLOCK[3853:27]:BLOCK[3859:2]:BLOCK[3859:28]:EXPR_VOID[3860:4]:CALL[3860:4]:OBJECTLIT[3860:27]:FUNCTION[3862:23]:BLOCK[3862:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3853:0]:SETPROP[3853:0]:CALL[3853:16]:FUNCTION[3853:16]:BLOCK[3853:27]:BLOCK[3859:2]:BLOCK[3859:28]:RETURN[3866:4]:FUNCTION[3866:11]:BLOCK[3866:27]:BLOCK[3867:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3853:0]:SETPROP[3853:0]:CALL[3853:16]:FUNCTION[3853:16]:BLOCK[3853:27]:BLOCK[3859:2]:BLOCK[3859:28]:RETURN[3866:4]:FUNCTION[3866:11]:BLOCK[3866:27]:BLOCK[3868:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3853:0]:SETPROP[3853:0]:CALL[3853:16]:FUNCTION[3853:16]:BLOCK[3853:27]:BLOCK[3859:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3853:0]:SETPROP[3853:0]:CALL[3853:16]:FUNCTION[3853:16]:BLOCK[3853:27]:BLOCK[3859:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3853:0]:SETPROP[3853:0]:CALL[3853:16]:FUNCTION[3853:16]:BLOCK[3853:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:BLOCK[3947:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3891:2]:BLOCK[3891:31]:BLOCK[3892:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3897:2]:BLOCK[3897:38]:BLOCK[3898:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3911:2]:BLOCK[3911:54]:BLOCK[3914:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3911:2]:BLOCK[3911:54]:VAR[3916:4]:NAME[3916:8]:FUNCTION[3916:18]:BLOCK[3916:34]:BLOCK[3917:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3911:2]:BLOCK[3911:54]:VAR[3916:4]:NAME[3916:8]:FUNCTION[3916:18]:BLOCK[3916:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3935:2]:BLOCK[3935:50]:BLOCK[3937:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3935:2]:BLOCK[3935:50]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:BLOCK[3943:6]:EXPR_VOID[3942:13]:SETNAME[3942:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:BLOCK[3943:6]:LOCAL_BLOCK[3943:6]:LOOP[3943:6]:BLOCK[3944:8]:EXPR_VOID[3943:15]:SETNAME[3943:15]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:BLOCK[3943:6]:LOCAL_BLOCK[3943:6]:LOOP[3943:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:BLOCK[3943:6]:LOCAL_BLOCK[3943:6]:LOOP[3943:6]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:BLOCK[3943:6]:LOCAL_BLOCK[3943:6]:LOOP[3943:6]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:BLOCK[3943:6]:LOCAL_BLOCK[3943:6]:LOOP[3943:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:LOCAL_BLOCK[3942:4]:LOOP[3942:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:FUNCTION[3941:2]:BLOCK[3941:26]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3952:13]:BLOCK[3952:51]:BLOCK[3957:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3952:13]:BLOCK[3952:51]:BLOCK[3959:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3952:13]:BLOCK[3952:51]:BLOCK[3959:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3972:6]:BLOCK[3972:33]:EXPR_VOID[3973:8]:CALL[3973:8]:FUNCTION[3973:52]:BLOCK[3973:70]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3972:6]:BLOCK[3978:13]:BLOCK[3978:29]:EXPR_VOID[3979:8]:CALL[3979:8]:FUNCTION[3979:44]:BLOCK[3979:64]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3972:6]:BLOCK[3978:13]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3972:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3972:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3986:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3988:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3968:19]:BLOCK[3968:57]:BLOCK[3988:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3999:10]:BLOCK[3999:45]:BLOCK[4001:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3999:10]:BLOCK[3999:45]:BLOCK[4004:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3999:10]:BLOCK[3999:45]:BLOCK[4004:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3999:10]:BLOCK[3999:45]:BLOCK[4015:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[3888:0]:CALL[3888:0]:CALL[3888:22]:FUNCTION[3888:22]:BLOCK[3888:33]:RETURN[3951:2]:OBJECTLIT[3951:9]:FUNCTION[3999:10]:BLOCK[3999:45]:BLOCK[4015:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:BLOCK[4053:33]:BLOCK[4054:4]:BLOCK[4054:34]:EXPR_VOID[4055:6]:SETNAME[4055:6]:CALL[4055:14]:FUNCTION[4055:33]:BLOCK[4055:44]:BLOCK[4056:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:BLOCK[4053:33]:BLOCK[4054:4]:BLOCK[4054:34]:EXPR_VOID[4055:6]:SETNAME[4055:6]:CALL[4055:14]:FUNCTION[4055:33]:BLOCK[4055:44]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:BLOCK[4053:33]:BLOCK[4054:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:BLOCK[4053:33]:BLOCK[4054:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:BLOCK[4067:9]:EXPR_VOID[4069:4]:SETPROP[4069:4]:FUNCTION[4069:51]:BLOCK[4069:62]:BLOCK[4070:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:BLOCK[4067:9]:EXPR_VOID[4069:4]:SETPROP[4069:4]:FUNCTION[4069:51]:BLOCK[4069:62]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:BLOCK[4053:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:FUNCTION[4046:2]:BLOCK[4046:36]:BLOCK[4047:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:FUNCTION[4046:2]:BLOCK[4046:36]:BLOCK[4048:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:FUNCTION[4046:2]:BLOCK[4046:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4040:1]:CALL[4040:1]:FUNCTION[4040:1]:BLOCK[4040:12]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4230:8]:SETPROP[4230:8]:OBJECTLIT[4230:31]:FUNCTION[4231:14]:BLOCK[4231:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4230:8]:SETPROP[4230:8]:OBJECTLIT[4230:31]:FUNCTION[4235:9]:BLOCK[4235:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4230:8]:SETPROP[4230:8]:OBJECTLIT[4230:31]:FUNCTION[4241:7]:BLOCK[4241:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4230:8]:SETPROP[4230:8]:OBJECTLIT[4230:31]:FUNCTION[4245:7]:BLOCK[4245:32]:BLOCK[4246:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4230:8]:SETPROP[4230:8]:OBJECTLIT[4230:31]:FUNCTION[4245:7]:BLOCK[4245:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4230:8]:SETPROP[4230:8]:OBJECTLIT[4230:31]:FUNCTION[4250:10]:BLOCK[4250:38]:BLOCK[4251:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[4230:8]:SETPROP[4230:8]:OBJECTLIT[4230:31]:FUNCTION[4250:10]:BLOCK[4250:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[535:17]:SETPROP[535:17]:FUNCTION[535:43]:BLOCK[535:65]:BLOCK[536:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[73:0]:SETPROP[73:0]:OBJECTLIT[73:16]:FUNCTION[74:14]:BLOCK[74:31]:BLOCK[78:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[73:0]:SETPROP[73:0]:OBJECTLIT[73:16]:FUNCTION[74:14]:BLOCK[74:31]:LOOP[81:4]:BLOCK[81:65]:BLOCK[83:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[73:0]:SETPROP[73:0]:OBJECTLIT[73:16]:FUNCTION[74:14]:BLOCK[74:31]:LOOP[81:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[830:0]:CALL[830:0]:OBJECTLIT[830:31]:FUNCTION[831:9]:BLOCK[831:28]:LOOP[832:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[830:0]:CALL[830:0]:OBJECTLIT[830:31]:FUNCTION[831:9]:BLOCK[831:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[830:0]:CALL[830:0]:OBJECTLIT[830:31]:FUNCTION[877:8]:BLOCK[877:25]:RETURN[878:4]:CALL[878:11]:FUNCTION[878:27]:BLOCK[878:57]:BLOCK[879:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[830:0]:CALL[830:0]:OBJECTLIT[830:31]:FUNCTION[903:10]:BLOCK[903:21]:EXPR_VOID[905:4]:CALL[905:4]:FUNCTION[905:14]:BLOCK[905:31]:BLOCK[907:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[830:0]:CALL[830:0]:OBJECTLIT[830:31]:FUNCTION[903:10]:BLOCK[903:21]:EXPR_VOID[905:4]:CALL[905:4]:FUNCTION[905:14]:BLOCK[905:31]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[979:0]:CALL[979:0]:FUNCTION[979:32]:BLOCK[979:48]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:FUNCTION[1489:0]:BLOCK[1489:20]:BLOCK[1490:2]:BLOCK[1490:28]:LOOP[1491:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:FUNCTION[1489:0]:BLOCK[1489:20]:BLOCK[1490:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:FUNCTION[1489:0]:BLOCK[1489:20]:BLOCK[1495:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:FUNCTION[805:0]:BLOCK[805:22]:BLOCK[806:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:FUNCTION[805:0]:BLOCK[805:22]:BLOCK[807:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:FUNCTION[805:0]:BLOCK[805:22]:LOOP[809:2]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:FUNCTION[934:0]:BLOCK[934:20]:BLOCK[935:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[1081:0]:NAME[1081:4]:CALL[1081:18]:OBJECTLIT[1081:43]:FUNCTION[1082:14]:BLOCK[1082:46]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[1081:0]:NAME[1081:4]:CALL[1081:18]:OBJECTLIT[1081:43]:FUNCTION[1088:9]:BLOCK[1088:28]:LOOP[1090:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[1081:0]:NAME[1081:4]:CALL[1081:18]:OBJECTLIT[1081:43]:FUNCTION[1088:9]:BLOCK[1088:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[1081:0]:NAME[1081:4]:CALL[1081:18]:OBJECTLIT[1081:43]:FUNCTION[1096:11]:BLOCK[1096:27]:BLOCK[1097:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[1081:0]:NAME[1081:4]:CALL[1081:18]:OBJECTLIT[1081:43]:FUNCTION[1096:11]:BLOCK[1096:27]:BLOCK[1099:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[260:0]:NAME[260:4]:OBJECTLIT[260:10]:FUNCTION[261:9]:BLOCK[261:20]:LOOP[264:4]:BLOCK[264:64]:TRY[266:6]:CATCH[269:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[260:0]:NAME[260:4]:OBJECTLIT[260:10]:FUNCTION[261:9]:BLOCK[261:20]:LOOP[264:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2763:14]:BLOCK[2763:35]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2768:18]:BLOCK[2768:29]:BLOCK[2769:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2768:18]:BLOCK[2768:29]:BLOCK[2774:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2768:18]:BLOCK[2768:29]:BLOCK[2780:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:BLOCK[2787:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:BLOCK[2793:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:LOOP[2801:4]:BLOCK[2801:43]:LOCAL_BLOCK[2803:6]:LOOP[2803:6]:BLOCK[2803:24]:BLOCK[2803:24]:BLOCK[2805:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:LOOP[2801:4]:BLOCK[2801:43]:LOCAL_BLOCK[2803:6]:LOOP[2803:6]:BLOCK[2803:24]:EXPR_VOID[2803:15]:SETNAME[2803:15]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:LOOP[2801:4]:BLOCK[2801:43]:LOCAL_BLOCK[2803:6]:LOOP[2803:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:LOOP[2801:4]:BLOCK[2801:43]:LOCAL_BLOCK[2803:6]:LOOP[2803:6]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:LOOP[2801:4]:BLOCK[2801:43]:LOCAL_BLOCK[2803:6]:LOOP[2803:6]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:LOOP[2801:4]:BLOCK[2801:43]:LOCAL_BLOCK[2803:6]:LOOP[2803:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:LOOP[2801:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2786:18]:BLOCK[2786:29]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:BLOCK[2823:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:LOOP[2828:4]:BLOCK[2828:43]:LOCAL_BLOCK[2830:6]:LOOP[2830:6]:BLOCK[2830:24]:BLOCK[2830:24]:BLOCK[2831:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:LOOP[2828:4]:BLOCK[2828:43]:LOCAL_BLOCK[2830:6]:LOOP[2830:6]:BLOCK[2830:24]:EXPR_VOID[2830:15]:SETNAME[2830:15]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:LOOP[2828:4]:BLOCK[2828:43]:LOCAL_BLOCK[2830:6]:LOOP[2830:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:LOOP[2828:4]:BLOCK[2828:43]:LOCAL_BLOCK[2830:6]:LOOP[2830:6]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:LOOP[2828:4]:BLOCK[2828:43]:LOCAL_BLOCK[2830:6]:LOOP[2830:6]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:LOOP[2828:4]:BLOCK[2828:43]:LOCAL_BLOCK[2830:6]:LOOP[2830:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:LOOP[2828:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2819:23]:BLOCK[2819:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2844:16]:BLOCK[2844:31]:BLOCK[2846:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:BLOCK[2858:24]:BLOCK[2858:24]:BLOCK[2860:8]:BLOCK[2860:28]:BLOCK[2863:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:BLOCK[2858:24]:BLOCK[2858:24]:BLOCK[2860:8]:BLOCK[2860:28]:BLOCK[2863:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:BLOCK[2858:24]:BLOCK[2858:24]:BLOCK[2860:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:BLOCK[2858:24]:EXPR_VOID[2858:15]:SETNAME[2858:15]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:BLOCK[2856:44]:LOCAL_BLOCK[2858:6]:LOOP[2858:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2856:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2876:4]:BLOCK[2876:56]:BLOCK[2878:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2762:0]:NAME[2762:4]:CALL[2762:15]:OBJECTLIT[2762:28]:FUNCTION[2850:9]:BLOCK[2850:27]:LOOP[2876:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[284:0]:NAME[284:4]:CALL[284:25]:OBJECTLIT[284:38]:FUNCTION[285:14]:BLOCK[285:44]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[284:0]:NAME[284:4]:CALL[284:25]:OBJECTLIT[284:38]:FUNCTION[293:20]:BLOCK[293:31]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[284:0]:NAME[284:4]:CALL[284:25]:OBJECTLIT[284:38]:FUNCTION[297:11]:BLOCK[297:22]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[284:0]:NAME[284:4]:CALL[284:25]:OBJECTLIT[284:38]:FUNCTION[301:8]:BLOCK[301:19]:BLOCK[302:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[284:0]:NAME[284:4]:CALL[284:25]:OBJECTLIT[284:38]:FUNCTION[301:8]:BLOCK[301:19]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[284:0]:NAME[284:4]:CALL[284:25]:OBJECTLIT[284:38]:FUNCTION[307:16]:BLOCK[307:27]:BLOCK[308:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[284:0]:NAME[284:4]:CALL[284:25]:OBJECTLIT[284:38]:FUNCTION[307:16]:BLOCK[307:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:BLOCK[3427:4]:BLOCK[3428:9]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:BLOCK[3427:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:BLOCK[3427:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:VAR[3431:4]:NAME[3431:8]:CALL[3431:15]:FUNCTION[3431:36]:BLOCK[3431:62]:BLOCK[3432:6]:BLOCK[3432:45]:BLOCK[3434:8]:BLOCK[3435:84]:BLOCK[3436:10]:BLOCK[3436:29]:BLOCK[3438:12]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:VAR[3431:4]:NAME[3431:8]:CALL[3431:15]:FUNCTION[3431:36]:BLOCK[3431:62]:BLOCK[3432:6]:BLOCK[3432:45]:BLOCK[3434:8]:BLOCK[3435:84]:BLOCK[3436:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:VAR[3431:4]:NAME[3431:8]:CALL[3431:15]:FUNCTION[3431:36]:BLOCK[3431:62]:BLOCK[3432:6]:BLOCK[3432:45]:BLOCK[3434:8]:BLOCK[3435:84]:BLOCK[3436:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:VAR[3431:4]:NAME[3431:8]:CALL[3431:15]:FUNCTION[3431:36]:BLOCK[3431:62]:BLOCK[3432:6]:BLOCK[3432:45]:BLOCK[3434:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[3420:0]:NAME[3420:4]:OBJECTLIT[3420:11]:FUNCTION[3426:21]:BLOCK[3426:49]:VAR[3431:4]:NAME[3431:8]:CALL[3431:15]:FUNCTION[3431:36]:BLOCK[3431:62]:BLOCK[3432:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[40:0]:NAME[40:4]:OBJECTLIT[40:12]:FUNCTION[41:10]:BLOCK[41:21]:BLOCK[43:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[40:0]:NAME[40:4]:OBJECTLIT[40:12]:FUNCTION[41:10]:BLOCK[41:21]:BLOCK[54:4]:BLOCK[54:16]:VAR[55:6]:NAME[55:10]:FUNCTION[55:21]:BLOCK[55:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[40:0]:NAME[40:4]:OBJECTLIT[40:12]:FUNCTION[41:10]:BLOCK[41:21]:BLOCK[54:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[40:0]:NAME[40:4]:OBJECTLIT[40:12]:FUNCTION[41:10]:BLOCK[41:21]:BLOCK[64:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[40:0]:NAME[40:4]:OBJECTLIT[40:12]:FUNCTION[41:10]:BLOCK[41:21]:FUNCTION[46:4]:BLOCK[46:21]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[40:0]:NAME[40:4]:OBJECTLIT[40:12]:FUNCTION[41:10]:BLOCK[41:21]:LOOP[61:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[4107:0]:NAME[4107:4]:OBJECTLIT[4107:15]:FUNCTION[4115:11]:BLOCK[4115:22]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[4107:0]:NAME[4107:4]:OBJECTLIT[4107:15]:FUNCTION[4127:10]:BLOCK[4127:34]:BLOCK[4128:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[4107:0]:NAME[4107:4]:OBJECTLIT[4107:15]:FUNCTION[4154:11]:BLOCK[4154:35]:BLOCK[4155:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[4107:0]:NAME[4107:4]:OBJECTLIT[4107:15]:FUNCTION[4154:11]:BLOCK[4154:35]:BLOCK[4156:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[4107:0]:NAME[4107:4]:OBJECTLIT[4107:15]:FUNCTION[4154:11]:BLOCK[4154:35]:BLOCK[4159:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[4107:0]:NAME[4107:4]:OBJECTLIT[4107:15]:FUNCTION[4154:11]:BLOCK[4154:35]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[550:0]:NAME[550:4]:CALL[550:15]:OBJECTLIT[550:28]:FUNCTION[551:14]:BLOCK[551:42]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[550:0]:NAME[550:4]:CALL[550:15]:OBJECTLIT[550:28]:FUNCTION[556:12]:BLOCK[556:29]:BLOCK[557:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[550:0]:NAME[550:4]:CALL[550:15]:OBJECTLIT[550:28]:FUNCTION[556:12]:BLOCK[556:29]:RETURN[560:4]:CALL[560:11]:CALL[560:44]:GETPROP[580:6]:FUNCTION[560:44]:BLOCK[560:60]:BLOCK[561:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[550:0]:NAME[550:4]:CALL[550:15]:OBJECTLIT[550:28]:FUNCTION[556:12]:BLOCK[556:29]:RETURN[560:4]:CALL[560:11]:CALL[560:44]:GETPROP[580:6]:FUNCTION[560:44]:BLOCK[560:60]:BLOCK[564:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[550:0]:NAME[550:4]:CALL[550:15]:OBJECTLIT[550:28]:FUNCTION[556:12]:BLOCK[556:29]:RETURN[560:4]:CALL[560:11]:CALL[560:44]:GETPROP[580:6]:FUNCTION[560:44]:BLOCK[560:60]:BLOCK[569:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[550:0]:NAME[550:4]:CALL[550:15]:OBJECTLIT[550:28]:FUNCTION[556:12]:BLOCK[556:29]:RETURN[560:4]:CALL[560:11]:CALL[560:44]:GETPROP[580:6]:FUNCTION[560:44]:BLOCK[560:60]:LOOP[571:6]:BLOCK[571:28]:BLOCK[574:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[550:0]:NAME[550:4]:CALL[550:15]:OBJECTLIT[550:28]:FUNCTION[556:12]:BLOCK[556:29]:RETURN[560:4]:CALL[560:11]:CALL[560:44]:GETPROP[580:6]:FUNCTION[560:44]:BLOCK[560:60]:LOOP[571:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[588:8]:BLOCK[588:36]:TRY[591:4]:BLOCK[591:8]:EXPR_VOID[592:6]:CALL[592:6]:FUNCTION[592:17]:BLOCK[592:33]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[588:8]:BLOCK[588:36]:TRY[591:4]:CATCH[595:6]:BLOCK[596:6]:BLOCK[596:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[588:8]:BLOCK[588:36]:TRY[591:4]:CATCH[595:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[601:13]:BLOCK[601:49]:LOOP[604:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[609:7]:BLOCK[609:35]:EXPR_VOID[612:4]:CALL[612:4]:FUNCTION[612:14]:BLOCK[612:37]:BLOCK[614:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[609:7]:BLOCK[609:35]:EXPR_VOID[612:4]:CALL[612:4]:FUNCTION[612:14]:BLOCK[612:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[619:7]:BLOCK[619:35]:EXPR_VOID[622:4]:CALL[622:4]:FUNCTION[622:14]:BLOCK[622:37]:BLOCK[623:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[619:7]:BLOCK[619:35]:EXPR_VOID[622:4]:CALL[622:4]:FUNCTION[622:14]:BLOCK[622:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[629:11]:BLOCK[629:39]:EXPR_VOID[632:4]:CALL[632:4]:FUNCTION[632:14]:BLOCK[632:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[638:10]:BLOCK[638:38]:EXPR_VOID[641:4]:CALL[641:4]:FUNCTION[641:14]:BLOCK[641:37]:BLOCK[642:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[638:10]:BLOCK[638:38]:EXPR_VOID[641:4]:CALL[641:4]:FUNCTION[641:14]:BLOCK[641:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[650:11]:BLOCK[650:39]:EXPR_VOID[653:4]:CALL[653:4]:FUNCTION[653:14]:BLOCK[653:37]:BLOCK[654:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[650:11]:BLOCK[650:39]:EXPR_VOID[653:4]:CALL[653:4]:FUNCTION[653:14]:BLOCK[653:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[660:8]:BLOCK[660:44]:BLOCK[664:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[660:8]:BLOCK[660:44]:EXPR_VOID[667:4]:CALL[667:4]:FUNCTION[667:14]:BLOCK[667:37]:BLOCK[668:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[660:8]:BLOCK[660:44]:EXPR_VOID[667:4]:CALL[667:4]:FUNCTION[667:14]:BLOCK[667:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[674:11]:BLOCK[674:28]:BLOCK[675:4]:BLOCK[676:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[674:11]:BLOCK[674:28]:BLOCK[675:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[674:11]:BLOCK[674:28]:EXPR_VOID[679:4]:CALL[679:4]:FUNCTION[679:14]:BLOCK[679:30]:BLOCK[680:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[674:11]:BLOCK[674:28]:EXPR_VOID[679:4]:CALL[679:4]:FUNCTION[679:14]:BLOCK[679:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[688:14]:BLOCK[688:41]:RETURN[690:4]:CALL[690:11]:FUNCTION[690:34]:BLOCK[690:50]:LOOP[691:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[696:10]:BLOCK[696:44]:EXPR_VOID[698:4]:CALL[698:4]:FUNCTION[698:14]:BLOCK[698:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[711:7]:BLOCK[711:35]:EXPR_VOID[714:4]:CALL[714:4]:FUNCTION[714:14]:BLOCK[714:37]:BLOCK[716:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[711:7]:BLOCK[711:35]:EXPR_VOID[714:4]:CALL[714:4]:FUNCTION[714:14]:BLOCK[714:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[722:7]:BLOCK[722:35]:EXPR_VOID[725:4]:CALL[725:4]:FUNCTION[725:14]:BLOCK[725:37]:BLOCK[727:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[722:7]:BLOCK[722:35]:EXPR_VOID[725:4]:CALL[725:4]:FUNCTION[725:14]:BLOCK[725:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[733:13]:BLOCK[733:41]:EXPR_VOID[736:4]:CALL[736:4]:FUNCTION[736:14]:BLOCK[736:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[743:9]:BLOCK[743:28]:EXPR_VOID[745:4]:CALL[745:4]:FUNCTION[745:14]:BLOCK[745:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[751:10]:BLOCK[751:38]:EXPR_VOID[754:4]:CALL[754:4]:FUNCTION[754:14]:BLOCK[754:37]:BLOCK[755:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[751:10]:BLOCK[751:38]:EXPR_VOID[754:4]:CALL[754:4]:FUNCTION[754:14]:BLOCK[754:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[587:0]:NAME[587:4]:OBJECTLIT[587:17]:FUNCTION[775:7]:BLOCK[775:18]:BLOCK[777:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[8:0]:NAME[8:4]:OBJECTLIT[8:16]:FUNCTION[31:17]:BLOCK[31:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:FUNCTION[988:2]:BLOCK[988:35]:BLOCK[989:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[1051:19]:BLOCK[1051:30]:RETURN[1052:6]:CALL[1052:13]:GETPROP[1060:9]:CALL[1052:18]:FUNCTION[1052:22]:BLOCK[1052:37]:BLOCK[1055:8]:BLOCK[1055:49]:BLOCK[1056:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[1051:19]:BLOCK[1051:30]:RETURN[1052:6]:CALL[1052:13]:GETPROP[1060:9]:CALL[1052:18]:FUNCTION[1052:22]:BLOCK[1052:37]:BLOCK[1055:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[994:16]:BLOCK[994:33]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[998:11]:BLOCK[998:30]:LOCAL_BLOCK[999:6]:LOOP[999:6]:BLOCK[999:36]:EXPR_VOID[999:15]:SETNAME[999:15]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[998:11]:BLOCK[998:30]:LOCAL_BLOCK[999:6]:LOOP[999:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[998:11]:BLOCK[998:30]:LOCAL_BLOCK[999:6]:LOOP[999:6]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[998:11]:BLOCK[998:30]:LOCAL_BLOCK[999:6]:LOOP[999:6]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[998:11]:BLOCK[998:30]:LOCAL_BLOCK[999:6]:LOOP[999:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[986:0]:NAME[986:4]:CALL[986:11]:CALL[986:37]:FUNCTION[986:37]:BLOCK[986:48]:RETURN[993:2]:OBJECTLIT[993:9]:FUNCTION[998:11]:BLOCK[998:30]:RETURN[0:0]:RETURN

<SCRIPT>/*  Prototype JavaScript framework, version 1.6.0.1
 *  (c) 2005-2007 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://www.prototypejs.org/
 *
 *--------------------------------------------------------------------------*/

<VAR>var <NAME>Prototype = <OBJECTLIT>{
  <OBJLITNAME>Version</OBJLITNAME>: <STRING>'1.6.0.1'</STRING>,

  <OBJLITNAME>Browser</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>IE</OBJLITNAME>:     !!(<NOT><NOT><AND><GETPROP><NAME>window</NAME>.<STRING>attachEvent</STRING></GETPROP> &amp;&amp; !<NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT>)</AND></NOT></NOT>,
    <OBJLITNAME>Opera</OBJLITNAME>:  !!<NOT><NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT></NOT>,
    <OBJLITNAME>WebKit</OBJLITNAME>: <GT><CALL><NAME>navigator</NAME>.<GETPROP><STRING>userAgent</STRING></GETPROP>.<GETPROP><STRING>indexOf</STRING></GETPROP>(<STRING>'AppleWebKit/'</STRING>)</CALL> &gt; -<NUMBER>1</NUMBER></GT>,
    <OBJLITNAME>Gecko</OBJLITNAME>:  <AND><GT><CALL><NAME>navigator</NAME>.<GETPROP><STRING>userAgent</STRING></GETPROP>.<GETPROP><STRING>indexOf</STRING></GETPROP>(<STRING>'Gecko'</STRING>)</CALL> &gt; -<NUMBER>1</NUMBER></GT> &amp;&amp; <EQ><CALL><NAME>navigator</NAME>.<GETPROP><STRING>userAgent</STRING></GETPROP>.<GETPROP><STRING>indexOf</STRING></GETPROP>(<STRING>'KHTML'</STRING>)</CALL> == -<NUMBER>1</NUMBER></EQ></AND>,
    <OBJLITNAME>MobileSafari</OBJLITNAME>: !!<NOT><NOT><CALL><NAME>navigator</NAME>.<GETPROP><STRING>userAgent</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/Apple.*Mobile.*Safari/</REGEXP>)</CALL></NOT></NOT>
  }</OBJECTLIT>,

  <OBJLITNAME>BrowserFeatures</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>XPath</OBJLITNAME>: !!<NOT><NOT><GETPROP><NAME>document</NAME>.<STRING>evaluate</STRING></GETPROP></NOT></NOT>,
    <OBJLITNAME>ElementExtensions</OBJLITNAME>: !!<NOT><NOT><GETPROP><NAME>window</NAME>.<STRING>HTMLElement</STRING></GETPROP></NOT></NOT>,
    <OBJLITNAME>SpecificElementExtensions</OBJLITNAME>:
      <AND><GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING></CALL></REF_SPECIAL>).__proto__</GET_REF> &amp;&amp;
      <SHNE><GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING></CALL></REF_SPECIAL>).__proto__</GET_REF> !==
        <GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'form'</STRING></CALL></REF_SPECIAL>).__proto__</GET_REF></SHNE></AND>
  }</OBJECTLIT>,

  <OBJLITNAME>ScriptFragment</OBJLITNAME>: <STRING>'&lt;script[^&gt;]*&gt;([\\S\\s]*?)&lt;\/script&gt;'</STRING>,
  <OBJLITNAME>JSONFilter</OBJLITNAME>: <REGEXP>/^\/\*-secure-([\s\S]*)\*\/\s*$/</REGEXP>,

  <OBJLITNAME>emptyFunction</OBJLITNAME>: <FUNCTION>function() <BLOCK>{</BLOCK> }</FUNCTION>,
  <OBJLITNAME>K</OBJLITNAME>: <FUNCTION>function(<PARAMETER>x</PARAMETER>) <BLOCK>{ <RETURN>return <NAME>x</NAME></RETURN></BLOCK> }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

<BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>MobileSafari</STRING></GETPROP></IFNE>)
  <NAME>Prototype</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>SpecificElementExtensions</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_RESULT>;</BLOCK>


/* Based on Alex Arnell's inheritance implementation. */
<VAR>var <NAME>Class = <OBJECTLIT>{
  <OBJLITNAME>create</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>parent = <NULL>null</NULL></NAME>, <NAME>properties = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETELEM><NAME>properties</NAME>[<NUMBER>0</NUMBER>]</GETELEM>)</CALL></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>parent</BINDNAME> = <CALL><NAME>properties</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>

    <FUNCTION>function <FUNCNAME>klass</FUNCNAME>() <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>initialize</STRING></GETPROP>.<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, <NAME>arguments</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>

    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>klass</NAME>, <GETPROP><NAME>Class</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>klass</NAME>.<STRING>superclass</STRING> = <NAME>parent</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>klass</NAME>.<STRING>subclasses</STRING> = <ARRAYLIT>[]</ARRAYLIT></SETPROP></EXPR_VOID>;

    <BLOCK>if (<IFNE><NAME>parent</NAME></IFNE>) <BLOCK>{
      <VAR>var <NAME>subclass = <FUNCTION>function() <BLOCK>{</BLOCK> }</FUNCTION></NAME></VAR>;
      <EXPR_VOID><SETPROP><NAME>subclass</NAME>.<STRING>prototype</STRING> = <GETPROP><NAME>parent</NAME>.<STRING>prototype</STRING></GETPROP></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><NAME>klass</NAME>.<STRING>prototype</STRING> = new <NEW><NAME>subclass</NAME></NEW></SETPROP></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>parent</NAME>.<GETPROP><STRING>subclasses</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>klass</NAME>)</CALL></EXPR_VOID>;
    }</BLOCK></BLOCK>

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <GETPROP><NAME>properties</NAME>.<STRING>length</STRING></GETPROP></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>klass</NAME>.<GETPROP><STRING>addMethods</STRING></GETPROP>(<GETELEM><NAME>properties</NAME>[<NAME>i</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;

    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>klass</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>initialize</STRING></GETPROP></NOT></IFNE>)
      <NAME>klass</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>initialize</STRING> = <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></SETPROP></EXPR_VOID>;</BLOCK>

    <NAME>klass</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>constructor</STRING> = <NAME>klass</NAME></SETPROP></EXPR_VOID>;

    <RETURN>return <NAME>klass</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

<EXPR_RESULT><SETPROP><NAME>Class</NAME>.<STRING>Methods</STRING> = <OBJECTLIT>{
  <OBJLITNAME>addMethods</OBJLITNAME>: <FUNCTION>function(<PARAMETER>source</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>ancestor   = <AND><GETPROP><THIS>this</THIS>.<STRING>superclass</STRING></GETPROP> &amp;&amp; <GETPROP><THIS>this</THIS>.<GETPROP><STRING>superclass</STRING></GETPROP>.<STRING>prototype</STRING></GETPROP></AND></NAME></VAR>;
    <VAR>var <NAME>properties = <CALL><NAME>Object</NAME>.<GETPROP><STRING>keys</STRING></GETPROP>(<NAME>source</NAME>)</CALL></NAME></VAR>;

    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Object</NAME>.<CALL><GETPROP><STRING>keys</STRING></GETPROP>(<OBJECTLIT>{ <OBJLITNAME>toString</OBJLITNAME>: <TRUE>true</TRUE> }</OBJECTLIT></CALL>).<STRING>length</STRING></GETPROP></NOT></IFNE>)
      <EXPR_VOID><CALL><NAME>properties</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<STRING>"toString"</STRING>, <STRING>"valueOf"</STRING>)</CALL></EXPR_VOID>;</BLOCK>

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>properties</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>property = <GETELEM><NAME>properties</NAME>[<NAME>i</NAME>]</GETELEM></NAME>, <NAME>value = <GETELEM><NAME>source</NAME>[<NAME>property</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><AND><NAME>ancestor</NAME> &amp;&amp; <AND><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<NAME>value</NAME>)</CALL> &amp;&amp;
          <EQ><CALL><NAME>value</NAME>.<CALL><GETPROP><STRING>argumentNames</STRING></GETPROP></CALL>().<GETPROP><STRING>first</STRING></GETPROP>()</CALL> == <STRING>"$super"</STRING></EQ></AND></AND></IFNE>) <BLOCK>{
        <VAR>var <NAME>method = <NAME>value</NAME></NAME>, <NAME>value = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>((<CALL><CALL><FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
          <RETURN>return <FUNCTION>function() <BLOCK>{ <RETURN>return <CALL><GETELEM><NAME>ancestor</NAME>[<NAME>m</NAME></GETELEM>].<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, <NAME>arguments</NAME>)</CALL></RETURN></BLOCK> }</FUNCTION></RETURN>;</BLOCK>
        }</FUNCTION>)(<NAME>property</NAME></CALL>).<GETPROP><STRING>wrap</STRING></GETPROP>(<NAME>method</NAME>)</CALL>, <OBJECTLIT>{
          <OBJLITNAME>valueOf</OBJLITNAME>:  <FUNCTION>function() <BLOCK>{ <RETURN>return <NAME>method</NAME></RETURN></BLOCK> }</FUNCTION>,
          <OBJLITNAME>toString</OBJLITNAME>: <FUNCTION>function() <BLOCK>{ <RETURN>return <CALL><NAME>method</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></RETURN></BLOCK> }</FUNCTION>
        }</OBJECTLIT>)</CALL></NAME></VAR>;
      }</BLOCK></BLOCK>
      <THIS>this</THIS>.<EXPR_VOID><SETELEM><GETPROP><STRING>prototype</STRING></GETPROP>[<NAME>property</NAME>] = <NAME>value</NAME></SETELEM></EXPR_VOID>;
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<VAR>var <NAME>Abstract = <OBJECTLIT>{ }</OBJECTLIT></NAME></VAR>;

<EXPR_RESULT><SETPROP><NAME>Object</NAME>.<STRING>extend</STRING> = <FUNCTION>function(<PARAMETER>destination</PARAMETER>, <PARAMETER>source</PARAMETER>) <BLOCK>{
  <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>source</NAME></ENUM_INIT_KEYS>)
    <TARGET><BLOCK><EXPR_VOID><SETELEM><NAME></TARGET>destination</NAME>[<NAME>property</NAME>] = <GETELEM><NAME>source</NAME>[<NAME>property</NAME>]<GOTO><TARGET></TARGET></GETELEM></SETELEM></EXPR_VOID></BLOCK></GOTO></LOOP>;</LOCAL_BLOCK>
  <RETURN>return <NAME>destination</NAME></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Object</NAME>, <OBJECTLIT>{
  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <TRY>try <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>object</NAME>)</CALL></IFNE>) <RETURN>return <STRING>'undefined'</STRING></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><SHEQ><NAME>object</NAME> === <NULL>null</NULL></SHEQ></IFNE>) <RETURN>return <STRING>'null'</STRING></RETURN>;</BLOCK>
      <RETURN>return <HOOK><GETPROP><NAME>object</NAME>.<STRING>inspect</STRING></GETPROP> ? <CALL><NAME>object</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL> : <CALL><NAME>object</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></HOOK></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><BLOCK>if (<IFNE><INSTANCEOF><NAME>e</NAME> instanceof <NAME>RangeError</NAME></INSTANCEOF></IFNE>) <RETURN>return <STRING>'...'</STRING></RETURN>;</BLOCK>
      <THROW>throw <NAME>e</NAME></THROW></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toJSON</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>type = typeof <TYPEOFNAME>object</TYPEOFNAME></NAME></VAR>;
    <SWITCH>switch (<NAME>type</NAME>) {
      <CASE>case <STRING>'undefined'</STRING></CASE>:
      <CASE>case <STRING>'function'</STRING></CASE>:
      <CASE>case <STRING>'unknown'</STRING>: <BLOCK><RETURN>return</RETURN></BLOCK></CASE>;
      <CASE>case <STRING>'boolean'</STRING>: <BLOCK><RETURN>return <CALL><NAME>object</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></RETURN></BLOCK></CASE>;
    }</SWITCH>

    <BLOCK>if (<IFNE><SHEQ><NAME>object</NAME> === <NULL>null</NULL></SHEQ></IFNE>) <RETURN>return <STRING>'null'</STRING></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><GETPROP><NAME>object</NAME>.<STRING>toJSON</STRING></GETPROP></IFNE>) <RETURN>return <CALL><NAME>object</NAME>.<GETPROP><STRING>toJSON</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>object</NAME>)</CALL></IFNE>) <RETURN>return</RETURN>;</BLOCK>

    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>object</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <VAR>var <NAME>value = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toJSON</STRING></GETPROP>(<GETELEM><NAME>object</NAME>[<NAME>property</NAME>]</GETELEM>)</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>value</NAME>)</CALL></NOT></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><CALL><NAME>property</NAME>.<GETPROP><STRING>toJSON</STRING></GETPROP>()</CALL> + <STRING>': '</STRING></ADD> + <NAME>value</NAME></ADD>)</CALL></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>

    <RETURN>return <ADD><ADD><STRING>'{'</STRING> + <CALL><NAME>results</NAME>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>', '</STRING>)</CALL></ADD> + <STRING>'}'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toQueryString</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$H</NAME>(<NAME>object</NAME></CALL>).<GETPROP><STRING>toQueryString</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toHTML</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <HOOK><AND><NAME>object</NAME> &amp;&amp; <GETPROP><NAME>object</NAME>.<STRING>toHTML</STRING></GETPROP></AND> ? <CALL><NAME>object</NAME>.<GETPROP><STRING>toHTML</STRING></GETPROP>()</CALL> : <CALL><NAME>String</NAME>.<GETPROP><STRING>interpret</STRING></GETPROP>(<NAME>object</NAME>)</CALL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>keys</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>keys = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>object</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><EXPR_VOID><CALL><NAME></TARGET>keys</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>property</NAME>)<GOTO><TARGET></TARGET></CALL></EXPR_VOID></BLOCK></GOTO></LOOP>;</LOCAL_BLOCK>
    <RETURN>return <NAME>keys</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>values</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>values = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>object</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><EXPR_VOID><CALL><NAME></TARGET>values</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><NAME>object</NAME>[<NAME>property</NAME>]</GETELEM>)<GOTO><TARGET></TARGET></CALL></EXPR_VOID></BLOCK></GOTO></LOOP>;</LOCAL_BLOCK>
    <RETURN>return <NAME>values</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clone</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<OBJECTLIT>{ }</OBJECTLIT>, <NAME>object</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <AND><NAME>object</NAME> &amp;&amp; <EQ><GETPROP><NAME>object</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isArray</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <AND><NAME>object</NAME> &amp;&amp; <SHEQ><GETPROP><NAME>object</NAME>.<STRING>constructor</STRING></GETPROP> === <NAME>Array</NAME></SHEQ></AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isHash</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <INSTANCEOF><NAME>object</NAME> instanceof <NAME>Hash</NAME></INSTANCEOF></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isFunction</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return typeof <EQ><TYPEOFNAME>object</TYPEOFNAME> == <STRING>"function"</STRING></EQ></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isString</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return typeof <EQ><TYPEOFNAME>object</TYPEOFNAME> == <STRING>"string"</STRING></EQ></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isNumber</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return typeof <EQ><TYPEOFNAME>object</TYPEOFNAME> == <STRING>"number"</STRING></EQ></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isUndefined</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return typeof <EQ><TYPEOFNAME>object</TYPEOFNAME> == <STRING>"undefined"</STRING></EQ></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Function</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>argumentNames</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>names = <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>toString</STRING></GETPROP></CALL>().<GETELEM><CALL><GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^[\s\(]*function[^(]*\((.*?)\)/</REGEXP></CALL>)[<NUMBER>1</NUMBER></GETELEM>].<CALL><GETPROP><STRING>split</STRING></GETPROP>(<STRING>","</STRING></CALL>).<GETPROP><STRING>invoke</STRING></GETPROP>(<STRING>"strip"</STRING>)</CALL></NAME></VAR>;
    <RETURN>return <HOOK><AND><EQ><GETPROP><NAME>names</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ> &amp;&amp; !<NOT><GETELEM><NAME>names</NAME>[<NUMBER>0</NUMBER>]</GETELEM></NOT></AND> ? <ARRAYLIT>[]</ARRAYLIT> : <NAME>names</NAME></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>bind</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><AND><LT><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> &lt; <NUMBER>2</NUMBER></LT> &amp;&amp; <CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<GETELEM><NAME>arguments</NAME>[<NUMBER>0</NUMBER>]</GETELEM>)</CALL></AND></IFNE>) <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
    <VAR>var <NAME>__method = <THIS>this</THIS></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>object = <CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>__method</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>object</NAME>, <CALL><NAME>args</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></RETURN></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>bindAsEventListener</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>__method = <THIS>this</THIS></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>object = <CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>__method</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>object</NAME>, [<CALL><ARRAYLIT><OR><NAME>event</NAME> || <GETPROP><NAME>window</NAME>.<STRING>event</STRING></GETPROP></OR></ARRAYLIT>].<GETPROP><STRING>concat</STRING></GETPROP>(<NAME>args</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></RETURN></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>curry</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NOT></IFNE>) <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
    <VAR>var <NAME>__method = <THIS>this</THIS></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>__method</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, <CALL><NAME>args</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></RETURN></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>delay</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>__method = <THIS>this</THIS></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>timeout = <MUL><CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL> * <NUMBER>1000</NUMBER></MUL></NAME></VAR>;
    <RETURN>return <CALL><NAME>window</NAME>.<GETPROP><STRING>setTimeout</STRING></GETPROP>(<FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>__method</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>__method</NAME>, <NAME>args</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>, <NAME>timeout</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>wrap</OBJLITNAME>: <FUNCTION>function(<PARAMETER>wrapper</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>__method = <THIS>this</THIS></NAME></VAR>;
    <RETURN>return <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>wrapper</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, [<CALL><ARRAYLIT><CALL><NAME>__method</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL></ARRAYLIT>].<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></RETURN></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>methodize</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>_methodized</STRING></GETPROP></IFNE>) <RETURN>return <GETPROP><THIS>this</THIS>.<STRING>_methodized</STRING></GETPROP></RETURN>;</BLOCK>
    <VAR>var <NAME>__method = <THIS>this</THIS></NAME></VAR>;
    <RETURN>return <SETPROP><THIS>this</THIS>.<STRING>_methodized</STRING> = <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>__method</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<NULL>null</NULL>, [<CALL><ARRAYLIT><THIS>this</THIS></ARRAYLIT>].<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></SETPROP></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<NAME>Function</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>defer</STRING> = <CALL><NAME>Function</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<GETPROP><STRING>delay</STRING></GETPROP>.<GETPROP><STRING>curry</STRING></GETPROP>(<NUMBER>0.01</NUMBER>)</CALL></SETPROP></EXPR_RESULT>;

<NAME>Date</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>toJSON</STRING> = <FUNCTION>function() <BLOCK>{
  <RETURN>return <ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><STRING>'"'</STRING> + <CALL><THIS>this</THIS>.<GETPROP><STRING>getUTCFullYear</STRING></GETPROP>()</CALL></ADD> + <STRING>'-'</STRING></ADD> +
    (<CALL><ADD><CALL><THIS>this</THIS>.<GETPROP><STRING>getUTCMonth</STRING></GETPROP>()</CALL> + <NUMBER>1</NUMBER></ADD>).<GETPROP><STRING>toPaddedString</STRING></GETPROP>(<NUMBER>2</NUMBER>)</CALL></ADD> + <STRING>'-'</STRING></ADD> +
    <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>getUTCDate</STRING></GETPROP></CALL>().<GETPROP><STRING>toPaddedString</STRING></GETPROP>(<NUMBER>2</NUMBER>)</CALL></ADD> + <STRING>'T'</STRING></ADD> +
    <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>getUTCHours</STRING></GETPROP></CALL>().<GETPROP><STRING>toPaddedString</STRING></GETPROP>(<NUMBER>2</NUMBER>)</CALL></ADD> + <STRING>':'</STRING></ADD> +
    <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>getUTCMinutes</STRING></GETPROP></CALL>().<GETPROP><STRING>toPaddedString</STRING></GETPROP>(<NUMBER>2</NUMBER>)</CALL></ADD> + <STRING>':'</STRING></ADD> +
    <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>getUTCSeconds</STRING></GETPROP></CALL>().<GETPROP><STRING>toPaddedString</STRING></GETPROP>(<NUMBER>2</NUMBER>)</CALL></ADD> + <STRING>'Z"'</STRING></ADD></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<VAR>var <NAME>Try = <OBJECTLIT>{
  <OBJLITNAME>these</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>returnValue</NAME></VAR>;

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>lambda = <GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM></NAME></VAR>;
      <TRY>try <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>returnValue</BINDNAME> = <CALL><NAME>lambda</NAME>()</CALL></SETNAME></EXPR_VOID>;
        <BREAK>break</BREAK>;
      }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH> }</TRY>
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <RETURN>return <NAME>returnValue</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

<NAME>RegExp</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>match</STRING> = <GETPROP><NAME>RegExp</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>test</STRING></GETPROP></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>RegExp</NAME>.<STRING>escape</STRING> = <FUNCTION>function(<PARAMETER>str</PARAMETER>) <BLOCK>{
  <RETURN>return <CALL><CALL><NAME>String</NAME>(<NAME>str</NAME></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/([.*+?^=!:${}()|[\]\/\\])/g</REGEXP>, <STRING>'\\$1'</STRING>)</CALL></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<VAR>var <NAME>PeriodicalExecuter = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>callback</PARAMETER>, <PARAMETER>frequency</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>callback</STRING> = <NAME>callback</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>frequency</STRING> = <NAME>frequency</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>registerCallback</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>registerCallback</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>timer</STRING> = <CALL><NAME>setInterval</NAME>(<CALL><THIS>this</THIS>.<GETPROP><STRING>onTimerEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>, <MUL><GETPROP><THIS>this</THIS>.<STRING>frequency</STRING></GETPROP> * <NUMBER>1000</NUMBER></MUL>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>execute</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>callback</STRING></GETPROP>(<THIS>this</THIS>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stop</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><THIS>this</THIS>.<STRING>timer</STRING></GETPROP></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><NAME>clearInterval</NAME>(<GETPROP><THIS>this</THIS>.<STRING>timer</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>timer</STRING> = <NULL>null</NULL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onTimerEvent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING></GETPROP></NOT></IFNE>) <BLOCK>{
      <TRY>try <BLOCK>{
        <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
        <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>execute</STRING></GETPROP>()</CALL></EXPR_VOID>;
      }</BLOCK> <FINALLY>finally <BLOCK>{
        <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;
      }</BLOCK></FINALLY></TRY>
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></NAME></VAR>;
<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>String</NAME>, <OBJECTLIT>{
  <OBJLITNAME>interpret</OBJLITNAME>: <FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
    <RETURN>return <HOOK><EQ><NAME>value</NAME> == <NULL>null</NULL></EQ> ? <STRING>''</STRING> : <CALL><NAME>String</NAME>(<NAME>value</NAME>)</CALL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,
  <OBJLITNAME>specialChar</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>'</OBJLITNAME>\b': <STRING>'\\b'</STRING>,
    <OBJLITNAME>'</OBJLITNAME>\t': <STRING>'\\t'</STRING>,
    <OBJLITNAME>'</OBJLITNAME>\n': <STRING>'\\n'</STRING>,
    <OBJLITNAME>'</OBJLITNAME>\f': <STRING>'\\f'</STRING>,
    <OBJLITNAME>'</OBJLITNAME>\r': <STRING>'\\r'</STRING>,
    <OBJLITNAME>'</OBJLITNAME>\\': <STRING>'\\\\'</STRING>
  }</OBJECTLIT>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>String</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>gsub</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>, <PARAMETER>replacement</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>result = <STRING>''</STRING></NAME>, <NAME>source = <THIS>this</THIS></NAME>, <NAME>match</NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>replacement</BINDNAME> = <CALL><NAME>arguments</NAME>.<GETPROP><STRING>callee</STRING></GETPROP>.<GETPROP><STRING>prepareReplacement</STRING></GETPROP>(<NAME>replacement</NAME>)</CALL></SETNAME></EXPR_VOID>;

    <LOOP>while (<TARGET><IFEQ><GT><GETPROP><NAME></TARGET>source</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>0</NUMBER></GT></IFEQ>) <TARGET><BLOCK></TARGET>{
      <BLOCK>if (<IFNE><SETNAME><BINDNAME>match</BINDNAME> = <CALL><NAME>source</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>pattern</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <CALL><NAME>source</NAME>.<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>0</NUMBER>, <GETPROP><NAME>match</NAME>.<STRING>index</STRING></GETPROP>)</CALL></ADD></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <CALL><NAME>String</NAME>.<GETPROP><STRING>interpret</STRING></GETPROP>(<CALL><NAME>replacement</NAME>(<NAME>match</NAME>)</CALL>)</CALL></ADD></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME>source</BINDNAME>  = <CALL><NAME>source</NAME>.<GETPROP><STRING>slice</STRING></GETPROP>(<ADD><GETPROP><NAME>match</NAME>.<STRING>index</STRING></GETPROP> + <GETPROP><GETELEM><NAME>match</NAME>[<NUMBER>0</NUMBER></GETELEM>].<STRING>length</STRING></GETPROP></ADD>)</CALL></SETNAME></EXPR_VOID>;
      }</BLOCK> else <BLOCK>{
        <EXPR_VOID><COMMA><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <NAME>source</NAME></ADD></SETNAME>, <SETNAME><BINDNAME>source</BINDNAME> = <STRING>''</STRING></SETNAME></COMMA></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>sub</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>, <PARAMETER>replacement</PARAMETER>, <PARAMETER>count</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>replacement</BINDNAME> = <CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>.<GETPROP><STRING>prepareReplacement</STRING></GETPROP>(<NAME>replacement</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>count</BINDNAME> = <HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>count</NAME>)</CALL> ? <NUMBER>1</NUMBER> : <NAME>count</NAME></HOOK></SETNAME></EXPR_VOID>;

    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>(<NAME>pattern</NAME>, <FUNCTION>function(<PARAMETER>match</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><LT>--<DEC><NAME>count</NAME></DEC> &lt; <NUMBER>0</NUMBER></LT></IFNE>) <RETURN>return <GETELEM><NAME>match</NAME>[<NUMBER>0</NUMBER>]</GETELEM></RETURN>;</BLOCK>
      <RETURN>return <CALL><NAME>replacement</NAME>(<NAME>match</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>scan</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>, <PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>(<NAME>pattern</NAME>, <NAME>iterator</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <CALL><NAME>String</NAME>(<THIS>this</THIS>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>truncate</OBJLITNAME>: <FUNCTION>function(<PARAMETER>length</PARAMETER>, <PARAMETER>truncation</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>length</BINDNAME> = <OR><NAME>length</NAME> || <NUMBER>30</NUMBER></OR></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>truncation</BINDNAME> = <HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>truncation</NAME>)</CALL> ? <STRING>'...'</STRING> : <NAME>truncation</NAME></HOOK></SETNAME></EXPR_VOID>;
    <RETURN>return <HOOK><GT><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> &gt; <NAME>length</NAME></GT> ?
      <ADD><CALL><THIS>this</THIS>.<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>0</NUMBER>, <SUB><NAME>length</NAME> - <GETPROP><NAME>truncation</NAME>.<STRING>length</STRING></GETPROP></SUB>)</CALL> + <NAME>truncation</NAME></ADD> : <CALL><NAME>String</NAME>(<THIS>this</THIS>)</CALL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>strip</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/^\s+/</REGEXP>, <STRING>''</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/\s+$/</REGEXP>, <STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stripTags</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&lt;\/?[^&gt;]+&gt;/gi</REGEXP>, <STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stripScripts</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>replace</STRING></GETPROP>(new <NEW><NAME>RegExp</NAME>(<GETPROP><NAME>Prototype</NAME>.<STRING>ScriptFragment</STRING></GETPROP>, <STRING>'img'</STRING>)</NEW>, <STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>extractScripts</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>matchAll = new <NEW><NAME>RegExp</NAME>(<GETPROP><NAME>Prototype</NAME>.<STRING>ScriptFragment</STRING></GETPROP>, <STRING>'img'</STRING>)</NEW></NAME></VAR>;
    <VAR>var <NAME>matchOne = new <NEW><NAME>RegExp</NAME>(<GETPROP><NAME>Prototype</NAME>.<STRING>ScriptFragment</STRING></GETPROP>, <STRING>'im'</STRING>)</NEW></NAME></VAR>;
    <RETURN>return (<CALL><OR><CALL><THIS>this</THIS>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>matchAll</NAME>)</CALL> || <ARRAYLIT>[]</ARRAYLIT></OR>).<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>scriptTag</PARAMETER>) <BLOCK>{
      <RETURN>return (<GETELEM><OR><CALL><NAME>scriptTag</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>matchOne</NAME>)</CALL> || [<ARRAYLIT><STRING>''</STRING>, <STRING>''</STRING>]</ARRAYLIT></OR>)[<NUMBER>1</NUMBER>]</GETELEM></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evalScripts</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>extractScripts</STRING></GETPROP></CALL>().<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>script</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>eval</NAME>(<NAME>script</NAME>)</CALL></RETURN></BLOCK> }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>escapeHTML</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>self = <GETPROP><NAME>arguments</NAME>.<STRING>callee</STRING></GETPROP></NAME></VAR>;
    <NAME>self</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>text</STRING></GETPROP>.<STRING>data</STRING> = <THIS>this</THIS></SETPROP></EXPR_VOID>;
    <RETURN>return <GETPROP><NAME>self</NAME>.<GETPROP><STRING>div</STRING></GETPROP>.<STRING>innerHTML</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>unescapeHTML</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>div = new <NEW><NAME>Element</NAME>(<STRING>'div'</STRING>)</NEW></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>stripTags</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <RETURN>return <HOOK><GETELEM><NAME>div</NAME>.<GETPROP><STRING>childNodes</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> ? (<HOOK><GT><GETPROP><NAME>div</NAME>.<GETPROP><STRING>childNodes</STRING></GETPROP>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>1</NUMBER></GT> ?
      <CALL><CALL><NAME>$A</NAME>(<GETPROP><NAME>div</NAME>.<STRING>childNodes</STRING></GETPROP></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<STRING>''</STRING>, <FUNCTION>function(<PARAMETER>memo</PARAMETER>, <PARAMETER>node</PARAMETER>) <BLOCK>{ <RETURN>return <ADD><NAME>memo</NAME>+<GETPROP><NAME>node</NAME>.<STRING>nodeValue</STRING></GETPROP></ADD></RETURN></BLOCK> }</FUNCTION>)</CALL> :
      <GETPROP><NAME>div</NAME>.<GETELEM><GETPROP><STRING>childNodes</STRING></GETPROP>[<NUMBER>0</NUMBER></GETELEM>].<STRING>nodeValue</STRING></GETPROP>)</HOOK> : <STRING>''</STRING></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toQueryParams</OBJLITNAME>: <FUNCTION>function(<PARAMETER>separator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>match = <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>strip</STRING></GETPROP></CALL>().<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/([^?#]*)(#.*)?$/</REGEXP>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>match</NAME></NOT></IFNE>) <RETURN>return <OBJECTLIT>{ }</OBJECTLIT></RETURN>;</BLOCK>

    <RETURN>return <CALL><GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER></GETELEM>].<CALL><GETPROP><STRING>split</STRING></GETPROP>(<OR><NAME>separator</NAME> || <STRING>'&amp;'</STRING></OR></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<OBJECTLIT>{ }</OBJECTLIT>, <FUNCTION>function(<PARAMETER>hash</PARAMETER>, <PARAMETER>pair</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><GETELEM>(<SETNAME><BINDNAME>pair</BINDNAME> = <CALL><NAME>pair</NAME>.<GETPROP><STRING>split</STRING></GETPROP>(<STRING>'='</STRING>)</CALL></SETNAME>)[<NUMBER>0</NUMBER>]</GETELEM></IFNE>) <BLOCK>{
        <VAR>var <NAME>key = <CALL><NAME>decodeURIComponent</NAME>(<CALL><NAME>pair</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL>)</CALL></NAME></VAR>;
        <VAR>var <NAME>value = <HOOK><GT><GETPROP><NAME>pair</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>1</NUMBER></GT> ? <CALL><NAME>pair</NAME>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>'='</STRING>)</CALL> : <GETELEM><NAME>pair</NAME>[<NUMBER>0</NUMBER>]</GETELEM></HOOK></NAME></VAR>;
        <BLOCK>if (<IFNE><NE><NAME>value</NAME> != <NAME>undefined</NAME></NE></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <CALL><NAME>decodeURIComponent</NAME>(<NAME>value</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>

        <BLOCK>if (<IFNE><IN><NAME>key</NAME> in <NAME>hash</NAME></IN></IFNE>) <BLOCK>{
          <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Object</NAME>.<GETPROP><STRING>isArray</STRING></GETPROP>(<GETELEM><NAME>hash</NAME>[<NAME>key</NAME>]</GETELEM>)</CALL></NOT></IFNE>) <EXPR_VOID><SETELEM><NAME>hash</NAME>[<NAME>key</NAME>] = [<ARRAYLIT><GETELEM><NAME>hash</NAME>[<NAME>key</NAME>]</GETELEM>]</ARRAYLIT></SETELEM></EXPR_VOID>;</BLOCK>
          <EXPR_VOID><CALL><GETELEM><NAME>hash</NAME>[<NAME>key</NAME></GETELEM>].<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;
        }</BLOCK>
        else <EXPR_VOID><SETELEM><NAME>hash</NAME>[<NAME>key</NAME>] = <NAME>value<GOTO></NAME></SETELEM></EXPR_VOID></GOTO>;</BLOCK>
      }</BLOCK></BLOCK>
      <RETURN>return <NAME>hash</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toArray</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>split</STRING></GETPROP>(<STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>succ</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><CALL><THIS>this</THIS>.<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>0</NUMBER>, <SUB><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB>)</CALL> +
      <CALL><NAME>String</NAME>.<GETPROP><STRING>fromCharCode</STRING></GETPROP>(<ADD><CALL><THIS>this</THIS>.<GETPROP><STRING>charCodeAt</STRING></GETPROP>(<SUB><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB>)</CALL> + <NUMBER>1</NUMBER></ADD>)</CALL></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>times</OBJLITNAME>: <FUNCTION>function(<PARAMETER>count</PARAMETER>) <BLOCK>{
    <RETURN>return <HOOK><LT><NAME>count</NAME> &lt; <NUMBER>1</NUMBER></LT> ? <STRING>''</STRING> : new <CALL><NEW><NAME>Array</NAME>(<ADD><NAME>count</NAME> + <NUMBER>1</NUMBER></ADD></NEW>).<GETPROP><STRING>join</STRING></GETPROP>(<THIS>this</THIS>)</CALL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>camelize</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>parts = <CALL><THIS>this</THIS>.<GETPROP><STRING>split</STRING></GETPROP>(<STRING>'-'</STRING>)</CALL></NAME>, <NAME>len = <GETPROP><NAME>parts</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><EQ><NAME>len</NAME> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER>]</GETELEM></RETURN>;</BLOCK>

    <VAR>var <NAME>camelized = <HOOK><EQ><CALL><THIS>this</THIS>.<GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER>)</CALL> == <STRING>'-'</STRING></EQ>
      ? <ADD><CALL><GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER></GETELEM>].<CALL><GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER></CALL>).<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> + <CALL><GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER></GETELEM>].<GETPROP><STRING>substring</STRING></GETPROP>(<NUMBER>1</NUMBER>)</CALL></ADD>
      : <GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER>]</GETELEM></HOOK></NAME></VAR>;

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>1</NUMBER></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>len</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><SETNAME><BINDNAME><ADD><NAME></TARGET>camelized</NAME></BINDNAME> += <ADD><CALL><GETELEM><NAME>parts</NAME>[<NAME>i</NAME></GETELEM>].<CALL><GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER></CALL>).<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> + <CALL><GETELEM><NAME>parts</NAME>[<NAME>i</NAME></GETELEM>].<GETPROP><STRING>substring</STRING></GETPROP>(<NUMBER>1</NUMBER>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></ADD></ADD></SETNAME></EXPR_VOID></GOTO></LOOP>;

    <RETURN>return <NAME>camelized</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>capitalize</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER></CALL>).<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>substring</STRING></GETPROP>(<NUMBER>1</NUMBER></CALL>).<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>underscore</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/::/</REGEXP>, <STRING>'/'</STRING></CALL>).<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/([A-Z]+)([A-Z][a-z])/</REGEXP>,<STRING>'#{1}_#{2}'</STRING></CALL>).<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/([a-z\d])([A-Z])/</REGEXP>,<STRING>'#{1}_#{2}'</STRING></CALL>).<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/-/</REGEXP>,<STRING>'_'</STRING></CALL>).<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>dasherize</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/_/</REGEXP>,<STRING>'-'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>useDoubleQuotes</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>escapedString = <CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/[\x00-\x1f\\]/</REGEXP>, <FUNCTION>function(<PARAMETER>match</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>character = <GETELEM><NAME>String</NAME>.<GETPROP><STRING>specialChar</STRING></GETPROP>[<GETELEM><NAME>match</NAME>[<NUMBER>0</NUMBER>]</GETELEM>]</GETELEM></NAME></VAR>;
      <RETURN>return <HOOK><NAME>character</NAME> ? <NAME>character</NAME> : <ADD><STRING>'\\u00'</STRING> + <CALL><GETELEM><NAME>match</NAME>[<NUMBER>0</NUMBER></GETELEM>].<CALL><GETPROP><STRING>charCodeAt</STRING></GETPROP></CALL>().<GETPROP><STRING>toPaddedString</STRING></GETPROP>(<NUMBER>2</NUMBER>, <NUMBER>16</NUMBER>)</CALL></ADD></HOOK></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NAME>useDoubleQuotes</NAME></IFNE>) <RETURN>return <ADD><ADD><STRING>'"'</STRING> + <CALL><NAME>escapedString</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/"/g</REGEXP>, <STRING>'\\"'</STRING>)</CALL></ADD> + <STRING>'"'</STRING></ADD></RETURN>;</BLOCK>
    <RETURN>return <ADD><ADD><STRING>"'"</STRING> + <CALL><NAME>escapedString</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/'/g</REGEXP>, <STRING>'\\\''</STRING>)</CALL></ADD> + <STRING>"'"</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>inspect</STRING></GETPROP>(<TRUE>true</TRUE>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>unfilterJSON</OBJLITNAME>: <FUNCTION>function(<PARAMETER>filter</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>sub</STRING></GETPROP>(<OR><NAME>filter</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>JSONFilter</STRING></GETPROP></OR>, <STRING>'#{1}'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>str = <THIS>this</THIS></NAME></VAR>;
    <BLOCK>if (<IFNE><CALL><NAME>str</NAME>.<GETPROP><STRING>blank</STRING></GETPROP>()</CALL></IFNE>) <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
    <EXPR_VOID><SETNAME><BINDNAME>str</BINDNAME> = <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/\\./g</REGEXP>, <STRING>'@'</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/"[^"\\\n\r]*"/g</REGEXP>, <STRING>''</STRING>)</CALL></SETNAME></EXPR_VOID>;
    <RETURN>return (<CALL><REGEXP>/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/</REGEXP>).<GETPROP><STRING>test</STRING></GETPROP>(<NAME>str</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evalJSON</OBJLITNAME>: <FUNCTION>function(<PARAMETER>sanitize</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>json = <CALL><THIS>this</THIS>.<GETPROP><STRING>unfilterJSON</STRING></GETPROP>()</CALL></NAME></VAR>;
    <TRY>try <BLOCK>{
      <BLOCK>if (<IFNE><OR>!<NOT><NAME>sanitize</NAME></NOT> || <CALL><NAME>json</NAME>.<GETPROP><STRING>isJSON</STRING></GETPROP>()</CALL></OR></IFNE>) <RETURN>return <CALL><NAME>eval</NAME>(<ADD><ADD><STRING>'('</STRING> + <NAME>json</NAME></ADD> + <STRING>')'</STRING></ADD>)</CALL></RETURN>;</BLOCK>
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH> }</TRY>
    <THROW>throw new <NEW><NAME>SyntaxError</NAME>(<ADD><STRING>'Badly formed JSON string: '</STRING> + <CALL><THIS>this</THIS>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD>)</NEW></THROW>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>include</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>) <BLOCK>{
    <RETURN>return <GT><CALL><THIS>this</THIS>.<GETPROP><STRING>indexOf</STRING></GETPROP>(<NAME>pattern</NAME>)</CALL> &gt; -<NUMBER>1</NUMBER></GT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>startsWith</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>) <BLOCK>{
    <RETURN>return <SHEQ><CALL><THIS>this</THIS>.<GETPROP><STRING>indexOf</STRING></GETPROP>(<NAME>pattern</NAME>)</CALL> === <NUMBER>0</NUMBER></SHEQ></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>endsWith</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>d = <SUB><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> - <GETPROP><NAME>pattern</NAME>.<STRING>length</STRING></GETPROP></SUB></NAME></VAR>;
    <RETURN>return <AND><GE><NAME>d</NAME> &gt;= <NUMBER>0</NUMBER></GE> &amp;&amp; <SHEQ><CALL><THIS>this</THIS>.<GETPROP><STRING>lastIndexOf</STRING></GETPROP>(<NAME>pattern</NAME>)</CALL> === <NAME>d</NAME></SHEQ></AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>empty</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <EQ><THIS>this</THIS> == <STRING>''</STRING></EQ></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>blank</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><REGEXP>/^\s*$/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<THIS>this</THIS>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>interpolate</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>, <PARAMETER>pattern</PARAMETER>) <BLOCK>{
    <RETURN>return new <CALL><NEW><NAME>Template</NAME>(<THIS>this</THIS>, <NAME>pattern</NAME></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>object</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<BLOCK>if (<IFNE><OR><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>WebKit</STRING></GETPROP> || <GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP></OR></IFNE>) <EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>String</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>escapeHTML</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&amp;/g</REGEXP>,<STRING>'&amp;amp;'</STRING></CALL>).<CALL><GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&lt;/g</REGEXP>,<STRING>'&amp;lt;'</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&gt;/g</REGEXP>,<STRING>'&amp;gt;'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,
  <OBJLITNAME>unescapeHTML</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&amp;amp;/g</REGEXP>,<STRING>'&amp;'</STRING></CALL>).<CALL><GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&amp;lt;/g</REGEXP>,<STRING>'&lt;'</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&amp;gt;/g</REGEXP>,<STRING>'&gt;'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;</BLOCK>

<NAME>String</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<EXPR_RESULT><SETPROP><GETPROP><STRING>gsub</STRING></GETPROP>.<STRING>prepareReplacement</STRING> = <FUNCTION>function(<PARAMETER>replacement</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<NAME>replacement</NAME>)</CALL></IFNE>) <RETURN>return <NAME>replacement</NAME></RETURN>;</BLOCK>
  <VAR>var <NAME>template = new <NEW><NAME>Template</NAME>(<NAME>replacement</NAME>)</NEW></NAME></VAR>;
  <RETURN>return <FUNCTION>function(<PARAMETER>match</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>template</NAME>.<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>match</NAME>)</CALL></RETURN></BLOCK> }</FUNCTION></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<NAME>String</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>parseQuery</STRING> = <GETPROP><NAME>String</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>toQueryParams</STRING></GETPROP></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>String</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>escapeHTML</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>div</OBJLITNAME>:  <CALL><NAME>document</NAME>.<GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING>)</CALL>,
  <OBJLITNAME>text</OBJLITNAME>: <CALL><NAME>document</NAME>.<GETPROP><STRING>createTextNode</STRING></GETPROP>(<STRING>''</STRING>)</CALL>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

with (<BLOCK><ENTERWITH><GETPROP><NAME>String</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>escapeHTML</STRING></GETPROP></ENTERWITH>) <WITH><EXPR_RESULT><CALL><NAME>div</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>text</NAME>)</CALL></EXPR_RESULT></WITH></BLOCK>;

<VAR>var <NAME>Template = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>template</PARAMETER>, <PARAMETER>pattern</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>template</STRING> = <CALL><NAME>template</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>pattern</STRING> = <OR><NAME>pattern</NAME> || <GETPROP><NAME>Template</NAME>.<STRING>Pattern</STRING></GETPROP></OR></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evaluate</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETPROP><NAME>object</NAME>.<STRING>toTemplateReplacements</STRING></GETPROP>)</CALL></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>object</BINDNAME> = <CALL><NAME>object</NAME>.<GETPROP><STRING>toTemplateReplacements</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>

    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>template</STRING></GETPROP>.<GETPROP><STRING>gsub</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>pattern</STRING></GETPROP>, <CALL><FUNCTION>function(<PARAMETER>match</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ><NAME>object</NAME> == <NULL>null</NULL></EQ></IFNE>) <RETURN>return <STRING>''</STRING></RETURN>;</BLOCK>

      <VAR>var <NAME>before = <OR><GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER>]</GETELEM> || <STRING>''</STRING></OR></NAME></VAR>;
      <BLOCK>if (<IFNE><EQ><NAME>before</NAME> == <STRING>'\\'</STRING></EQ></IFNE>) <RETURN>return <GETELEM><NAME>match</NAME>[<NUMBER>2</NUMBER>]</GETELEM></RETURN>;</BLOCK>

      <VAR>var <NAME>ctx = <NAME>object</NAME></NAME>, <NAME>expr = <GETELEM><NAME>match</NAME>[<NUMBER>3</NUMBER>]</GETELEM></NAME></VAR>;
      <VAR>var <NAME>pattern = <REGEXP>/^([^.[]+|\[((?:.*?[^\\])?)\])(\.|\[|$)/</REGEXP></NAME></VAR>;
      <EXPR_VOID><SETNAME><BINDNAME>match</BINDNAME> = <CALL><NAME>pattern</NAME>.<GETPROP><STRING>exec</STRING></GETPROP>(<NAME>expr</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><EQ><NAME>match</NAME> == <NULL>null</NULL></EQ></IFNE>) <RETURN>return <NAME>before</NAME></RETURN>;</BLOCK>

      <LOOP>while (<TARGET><IFEQ><NE><NAME></TARGET>match</NAME> != <NULL>null</NULL></NE></IFEQ>) <TARGET><BLOCK></TARGET>{
        <VAR>var <NAME>comp = <HOOK><CALL><GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER></GETELEM>].<GETPROP><STRING>startsWith</STRING></GETPROP>(<STRING>'['</STRING>)</CALL> ? <CALL><GETELEM><NAME>match</NAME>[<NUMBER>2</NUMBER></GETELEM>].<GETPROP><STRING>gsub</STRING></GETPROP>(<STRING>'\\\\]'</STRING>, <STRING>']'</STRING>)</CALL> : <GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER>]</GETELEM></HOOK></NAME></VAR>;
        <EXPR_VOID><SETNAME><BINDNAME>ctx</BINDNAME> = <GETELEM><NAME>ctx</NAME>[<NAME>comp</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
        <BLOCK>if (<IFNE><OR><EQ><NULL>null</NULL> == <NAME>ctx</NAME></EQ> || <EQ><STRING>''</STRING> == <GETELEM><NAME>match</NAME>[<NUMBER>3</NUMBER>]</GETELEM></EQ></OR></IFNE>) <BREAK>break</BREAK>;</BLOCK>
        <EXPR_VOID><SETNAME><BINDNAME>expr</BINDNAME> = <CALL><NAME>expr</NAME>.<GETPROP><STRING>substring</STRING></GETPROP>(<HOOK><EQ><STRING>'['</STRING> == <GETELEM><NAME>match</NAME>[<NUMBER>3</NUMBER>]</GETELEM></EQ> ? <GETPROP><GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER></GETELEM>].<STRING>length</STRING></GETPROP> : <GETPROP><GETELEM><NAME>match</NAME>[<NUMBER>0</NUMBER></GETELEM>].<STRING>length</STRING></GETPROP></HOOK>)</CALL></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME>match</BINDNAME> = <CALL><NAME>pattern</NAME>.<GETPROP><STRING>exec</STRING></GETPROP>(<NAME>expr</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>

      <RETURN>return <ADD><NAME>before</NAME> + <CALL><NAME>String</NAME>.<GETPROP><STRING>interpret</STRING></GETPROP>(<NAME>ctx</NAME>)</CALL></ADD></RETURN>;</BLOCK>
    }</FUNCTION>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></NAME></VAR>;
<EXPR_RESULT><SETPROP><NAME>Template</NAME>.<STRING>Pattern</STRING> = <REGEXP>/(^|.|\r|\n)(#\{(.*?)\})/</REGEXP></SETPROP></EXPR_RESULT>;

<VAR>var <NAME>$break = <OBJECTLIT>{ }</OBJECTLIT></NAME></VAR>;

<VAR>var <NAME>Enumerable = <OBJECTLIT>{
  <OBJLITNAME>each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>index = <NUMBER>0</NUMBER></NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <TRY>try <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>_each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <INC><NAME>index</NAME></INC>++)</CALL></EXPR_VOID>;</BLOCK>
      }</FUNCTION>)</CALL></EXPR_VOID>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><BLOCK>if (<IFNE><NE><NAME>e</NAME> != <NAME>$break</NAME></NE></IFNE>) <THROW>throw <NAME>e</NAME></THROW>;</BLOCK></BLOCK></CATCH>
    }</TRY>
    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>eachSlice</OBJLITNAME>: <FUNCTION>function(<PARAMETER>number</PARAMETER>, <PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>index = -<NEG><NAME>number</NAME></NEG></NAME>, <NAME>slices = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>array = <CALL><THIS>this</THIS>.<GETPROP><STRING>toArray</STRING></GETPROP>()</CALL></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><LT></TARGET>(<SETNAME><BINDNAME><ADD><NAME>index</NAME></BINDNAME> += <NAME>number</NAME></ADD>)</SETNAME> &lt; <GETPROP><NAME>array</NAME>.<STRING>length</STRING></GETPROP></LT></IFEQ>)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>slices</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>array</NAME>.<GETPROP><STRING>slice</STRING></GETPROP>(<NAME>index</NAME>, <ADD><NAME>index</NAME>+<NAME>number</NAME></ADD>)</CALL>)<GOTO><TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
    <RETURN>return <CALL><NAME>slices</NAME>.<GETPROP><STRING>collect</STRING></GETPROP>(<NAME>iterator</NAME>, <NAME>context</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>all</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>result = <TRUE>true</TRUE></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <AND><NAME>result</NAME> &amp;&amp; !!<NOT><NOT><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></NOT></NOT></AND></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><NOT>!<NAME>result</NAME></NOT></IFNE>) <THROW>throw <NAME>$break</NAME></THROW>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>any</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>result = <FALSE>false</FALSE></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><SETNAME><BINDNAME>result</BINDNAME> = !!<NOT><NOT><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></NOT></NOT></SETNAME></IFNE>)
        <THROW>throw <NAME>$break</NAME></THROW>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>collect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>detect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>result</NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <NAME>value</NAME></SETNAME></EXPR_VOID>;
        <THROW>throw <NAME>$break</NAME></THROW>;
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findAll</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>grep</OBJLITNAME>: <FUNCTION>function(<PARAMETER>filter</PARAMETER>, <PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;

    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>filter</NAME>)</CALL></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>filter</BINDNAME> = new <NEW><NAME>RegExp</NAME>(<NAME>filter</NAME>)</NEW></SETNAME></EXPR_VOID>;</BLOCK>

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>filter</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>value</NAME>)</CALL></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>include</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>indexOf</STRING></GETPROP>)</CALL></IFNE>)
      <BLOCK>if (<IFNE><NE><CALL><THIS>this</THIS>.<GETPROP><STRING>indexOf</STRING></GETPROP>(<NAME>object</NAME>)</CALL> != -<NUMBER>1</NUMBER></NE></IFNE>) <RETURN>return <TRUE>true</TRUE></RETURN>;</BLOCK></BLOCK>

    <VAR>var <NAME>found = <FALSE>false</FALSE></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ><NAME>value</NAME> == <NAME>object</NAME></EQ></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>found</BINDNAME> = <TRUE>true</TRUE></SETNAME></EXPR_VOID>;
        <THROW>throw <NAME>$break</NAME></THROW>;
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>found</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inGroupsOf</OBJLITNAME>: <FUNCTION>function(<PARAMETER>number</PARAMETER>, <PARAMETER>fillWith</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>fillWith</BINDNAME> = <HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>fillWith</NAME>)</CALL> ? <NULL>null</NULL> : <NAME>fillWith</NAME></HOOK></SETNAME></EXPR_VOID>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>eachSlice</STRING></GETPROP>(<NAME>number</NAME>, <FUNCTION>function(<PARAMETER>slice</PARAMETER>) <BLOCK>{
      <LOOP>while(<TARGET><IFEQ><LT><GETPROP><NAME></TARGET>slice</NAME>.<STRING>length</STRING></GETPROP> &lt; <NAME>number</NAME></LT></IFEQ>) <TARGET><EXPR_VOID><CALL><NAME></TARGET>slice</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>fillWith</NAME>)<GOTO><TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
      <RETURN>return <NAME>slice</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inject</OBJLITNAME>: <FUNCTION>function(<PARAMETER>memo</PARAMETER>, <PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>memo</BINDNAME> = <CALL><NAME>iterator</NAME>(<NAME>memo</NAME>, <NAME>value</NAME>, <NAME>index</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>memo</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>invoke</OBJLITNAME>: <FUNCTION>function(<PARAMETER>method</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>args = <CALL><CALL><NAME>$A</NAME>(<NAME>arguments</NAME></CALL>).<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>1</NUMBER>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><GETELEM><NAME>value</NAME>[<NAME>method</NAME></GETELEM>].<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>value</NAME>, <NAME>args</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>max</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>result</NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><OR><EQ><NAME>result</NAME> == <NULL>null</NULL></EQ> || <GE><NAME>value</NAME> &gt;= <NAME>result</NAME></GE></OR></IFNE>)
        <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <NAME>value</NAME></SETNAME></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>min</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>result</NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><OR><EQ><NAME>result</NAME> == <NULL>null</NULL></EQ> || <LT><NAME>value</NAME> &lt; <NAME>result</NAME></LT></OR></IFNE>)
        <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <NAME>value</NAME></SETNAME></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>partition</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <HOOK><NAME>iterator</NAME> ? <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL> : <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>trues = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>falses = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      (<EXPR_VOID><CALL><HOOK><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL> ?
        <NAME>trues</NAME> : <NAME>falses</NAME></HOOK>).<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return [<ARRAYLIT><NAME>trues</NAME>, <NAME>falses</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>pluck</OBJLITNAME>: <FUNCTION>function(<PARAMETER>property</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><NAME>value</NAME>[<NAME>property</NAME>]</GETELEM>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>reject</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><NOT>!<CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></NOT></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>sortBy</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>, <PARAMETER>context</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>iterator</NAME>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>context</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <RETURN>return <OBJECTLIT>{<OBJLITNAME>value</OBJLITNAME>: <NAME>value</NAME>, <OBJLITNAME>criteria</OBJLITNAME>: <CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL>}</OBJECTLIT></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<CALL><GETPROP><STRING>sort</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>left</PARAMETER>, <PARAMETER>right</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>a = <GETPROP><NAME>left</NAME>.<STRING>criteria</STRING></GETPROP></NAME>, <NAME>b = <GETPROP><NAME>right</NAME>.<STRING>criteria</STRING></GETPROP></NAME></VAR>;
      <RETURN>return <HOOK><LT><NAME>a</NAME> &lt; <NAME>b</NAME></LT> ? -<NUMBER>1</NUMBER> : <HOOK><GT><NAME>a</NAME> &gt; <NAME>b</NAME></GT> ? <NUMBER>1</NUMBER> : <NUMBER>0</NUMBER></HOOK></HOOK></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<GETPROP><STRING>pluck</STRING></GETPROP>(<STRING>'value'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toArray</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>map</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>zip</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>iterator = <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<CALL><NAME>args</NAME>.<GETPROP><STRING>last</STRING></GETPROP>()</CALL>)</CALL></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>args</NAME>.<GETPROP><STRING>pop</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>

    <VAR>var <NAME>collections = [<CALL><ARRAYLIT><THIS>this</THIS></ARRAYLIT>].<CALL><GETPROP><STRING>concat</STRING></GETPROP>(<NAME>args</NAME></CALL>).<GETPROP><STRING>map</STRING></GETPROP>(<NAME>$A</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>iterator</NAME>(<CALL><NAME>collections</NAME>.<GETPROP><STRING>pluck</STRING></GETPROP>(<NAME>index</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>size</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<CALL><GETPROP><STRING>toArray</STRING></GETPROP></CALL>().<STRING>length</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><ADD><STRING>'#&lt;Enumerable:'</STRING> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>toArray</STRING></GETPROP></CALL>().<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>'&gt;'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Enumerable</NAME>, <OBJECTLIT>{
  <OBJLITNAME>map</OBJLITNAME>:     <GETPROP><NAME>Enumerable</NAME>.<STRING>collect</STRING></GETPROP>,
  <OBJLITNAME>find</OBJLITNAME>:    <GETPROP><NAME>Enumerable</NAME>.<STRING>detect</STRING></GETPROP>,
  <OBJLITNAME>select</OBJLITNAME>:  <GETPROP><NAME>Enumerable</NAME>.<STRING>findAll</STRING></GETPROP>,
  <OBJLITNAME>filter</OBJLITNAME>:  <GETPROP><NAME>Enumerable</NAME>.<STRING>findAll</STRING></GETPROP>,
  <OBJLITNAME>member</OBJLITNAME>:  <GETPROP><NAME>Enumerable</NAME>.<STRING>include</STRING></GETPROP>,
  <OBJLITNAME>entries</OBJLITNAME>: <GETPROP><NAME>Enumerable</NAME>.<STRING>toArray</STRING></GETPROP>,
  <OBJLITNAME>every</OBJLITNAME>:   <GETPROP><NAME>Enumerable</NAME>.<STRING>all</STRING></GETPROP>,
  <OBJLITNAME>some</OBJLITNAME>:    <GETPROP><NAME>Enumerable</NAME>.<STRING>any</STRING></GETPROP>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;
<FUNCTION>function <FUNCNAME>$A</FUNCNAME>(<PARAMETER>iterable</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><NOT>!<NAME>iterable</NAME></NOT></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
  <BLOCK>if (<IFNE><GETPROP><NAME>iterable</NAME>.<STRING>toArray</STRING></GETPROP></IFNE>) <RETURN>return <CALL><NAME>iterable</NAME>.<GETPROP><STRING>toArray</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  <VAR>var <NAME>length = <GETPROP><NAME>iterable</NAME>.<STRING>length</STRING></GETPROP></NAME>, <NAME>results = new <NEW><NAME>Array</NAME>(<NAME>length</NAME>)</NEW></NAME></VAR>;
  <LOOP>while (<TARGET><IFEQ><DEC><NAME></TARGET>length</NAME>--</DEC></IFEQ>) <TARGET><EXPR_VOID><SETELEM><NAME></TARGET>results</NAME>[<NAME>length</NAME>] = <GETELEM><NAME>iterable</NAME>[<NAME>length</NAME>]<GOTO><TARGET></TARGET></GETELEM></SETELEM></EXPR_VOID></GOTO></LOOP>;
  <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
}</FUNCTION>

<BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>WebKit</STRING></GETPROP></IFNE>) <BLOCK>{
  <FUNCTION>function <FUNCNAME>$A</FUNCNAME>(<PARAMETER>iterable</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<NAME>iterable</NAME></NOT></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><AND>!(<NOT><AND><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<NAME>iterable</NAME>)</CALL> &amp;&amp; <EQ><NAME>iterable</NAME> == <STRING>'[object NodeList]'</STRING></EQ>)</AND></NOT> &amp;&amp;
        <GETPROP><NAME>iterable</NAME>.<STRING>toArray</STRING></GETPROP></AND></IFNE>) <RETURN>return <CALL><NAME>iterable</NAME>.<GETPROP><STRING>toArray</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
    <VAR>var <NAME>length = <GETPROP><NAME>iterable</NAME>.<STRING>length</STRING></GETPROP></NAME>, <NAME>results = new <NEW><NAME>Array</NAME>(<NAME>length</NAME>)</NEW></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><DEC><NAME></TARGET>length</NAME>--</DEC></IFEQ>) <TARGET><EXPR_VOID><SETELEM><NAME></TARGET>results</NAME>[<NAME>length</NAME>] = <GETELEM><NAME>iterable</NAME>[<NAME>length</NAME>]<GOTO><TARGET></TARGET></GETELEM></SETELEM></EXPR_VOID></GOTO></LOOP>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</BLOCK></BLOCK>

<EXPR_RESULT><SETPROP><NAME>Array</NAME>.<STRING>from</STRING> = <NAME>$A</NAME></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Array</NAME>.<STRING>prototype</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>_reverse</STRING></GETPROP></NOT></IFNE>) <NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>_reverse</STRING> = <GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>reverse</STRING></GETPROP></SETPROP></EXPR_RESULT>;</BLOCK>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Array</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>iterator</NAME>(<GETELEM><THIS>this</THIS>[<NAME>i</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clear</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>length</STRING> = <NUMBER>0</NUMBER></SETPROP></EXPR_VOID>;
    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>first</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETELEM><THIS>this</THIS>[<NUMBER>0</NUMBER>]</GETELEM></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>last</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETELEM><THIS>this</THIS>[<SUB><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB>]</GETELEM></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>compact</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>select</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <NE><NAME>value</NAME> != <NULL>null</NULL></NE></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>flatten</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>, <FUNCTION>function(<PARAMETER>array</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>array</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isArray</STRING></GETPROP>(<NAME>value</NAME>)</CALL> ?
        <CALL><NAME>value</NAME>.<GETPROP><STRING>flatten</STRING></GETPROP>()</CALL> : [<ARRAYLIT><NAME>value</NAME>]</ARRAYLIT></HOOK>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>without</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>values = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>select</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return !<NOT><CALL><NAME>values</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>value</NAME>)</CALL></NOT></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>reverse</OBJLITNAME>: <FUNCTION>function(<PARAMETER>inline</PARAMETER>) <BLOCK>{
    <RETURN>return (<CALL><HOOK><SHNE><NAME>inline</NAME> !== <FALSE>false</FALSE></SHNE> ? <THIS>this</THIS> : <CALL><THIS>this</THIS>.<GETPROP><STRING>toArray</STRING></GETPROP>()</CALL></HOOK>).<GETPROP><STRING>_reverse</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>reduce</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <HOOK><GT><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>1</NUMBER></GT> ? <THIS>this</THIS> : <GETELEM><THIS>this</THIS>[<NUMBER>0</NUMBER>]</GETELEM></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>uniq</OBJLITNAME>: <FUNCTION>function(<PARAMETER>sorted</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>, <FUNCTION>function(<PARAMETER>array</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><OR><EQ><NUMBER>0</NUMBER> == <NAME>index</NAME></EQ> || (<HOOK><NAME>sorted</NAME> ? <NE><CALL><NAME>array</NAME>.<GETPROP><STRING>last</STRING></GETPROP>()</CALL> != <NAME>value</NAME></NE> : !<NOT><CALL><NAME>array</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>value</NAME>)</CALL></NOT>)</HOOK></OR></IFNE>)
        <EXPR_VOID><CALL><NAME>array</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK>
      <RETURN>return <NAME>array</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>intersect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>array</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>uniq</STRING></GETPROP></CALL>().<GETPROP><STRING>findAll</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>item</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>array</NAME>.<GETPROP><STRING>detect</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{ <RETURN>return <SHEQ><NAME>item</NAME> === <NAME>value</NAME></SHEQ></RETURN></BLOCK> }</FUNCTION>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clone</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><ARRAYLIT>[]</ARRAYLIT>.<GETPROP><STRING>concat</STRING></GETPROP>(<THIS>this</THIS>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>size</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><ADD><STRING>'['</STRING> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<GETPROP><NAME>Object</NAME>.<STRING>inspect</STRING></GETPROP></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>', '</STRING>)</CALL></ADD> + <STRING>']'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>value = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toJSON</STRING></GETPROP>(<NAME>object</NAME>)</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>value</NAME>)</CALL></NOT></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <ADD><ADD><STRING>'['</STRING> + <CALL><NAME>results</NAME>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>', '</STRING>)</CALL></ADD> + <STRING>']'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

// use native browser JS 1.6 implementation if available
<BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>forEach</STRING></GETPROP>)</CALL></IFNE>)
  <NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>_each</STRING> = <GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>forEach</STRING></GETPROP></SETPROP></EXPR_RESULT>;</BLOCK>

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>indexOf</STRING></GETPROP></NOT></IFNE>) <NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>indexOf</STRING> = <FUNCTION>function(<PARAMETER>item</PARAMETER>, <PARAMETER>i</PARAMETER>) <BLOCK>{
  <EXPR_VOID><OR><NAME>i</NAME> || (<SETNAME><BINDNAME>i</BINDNAME> = <NUMBER>0</NUMBER>)</SETNAME></OR></EXPR_VOID>;
  <VAR>var <NAME>length = <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></NAME></VAR>;
  <BLOCK>if (<IFNE><LT><NAME>i</NAME> &lt; <NUMBER>0</NUMBER></LT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME> = <ADD><NAME>length</NAME> + <NAME>i</NAME></ADD></SETNAME></EXPR_VOID>;</BLOCK>
  <LOOP>for (; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
    <TARGET><BLOCK></TARGET>if (<IFNE><SHEQ><GETELEM><THIS>this</THIS>[<NAME>i</NAME>]</GETELEM> === <NAME>item</NAME></SHEQ></IFNE>) <RETURN>return <NAME>i<GOTO><TARGET><TARGET></TARGET></TARGET></NAME></RETURN></GOTO>;</BLOCK></LOOP>
  <RETURN>return -<NUMBER>1</NUMBER></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;</BLOCK>

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>lastIndexOf</STRING></GETPROP></NOT></IFNE>) <NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>lastIndexOf</STRING> = <FUNCTION>function(<PARAMETER>item</PARAMETER>, <PARAMETER>i</PARAMETER>) <BLOCK>{
  <EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME> = <HOOK><CALL><NAME>isNaN</NAME>(<NAME>i</NAME>)</CALL> ? <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> : (<ADD><HOOK><LT><NAME>i</NAME> &lt; <NUMBER>0</NUMBER></LT> ? <ADD><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> + <NAME>i</NAME></ADD> : <NAME>i</NAME>)</HOOK> + <NUMBER>1</NUMBER></ADD></HOOK></SETNAME></EXPR_VOID>;
  <VAR>var <NAME>n = <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>0</NUMBER>, <NAME>i</NAME></CALL>).<CALL><GETPROP><STRING>reverse</STRING></GETPROP></CALL>().<GETPROP><STRING>indexOf</STRING></GETPROP>(<NAME>item</NAME>)</CALL></NAME></VAR>;
  <RETURN>return (<HOOK><LT><NAME>n</NAME> &lt; <NUMBER>0</NUMBER>)</LT> ? <NAME>n</NAME> : <SUB><SUB><NAME>i</NAME> - <NAME>n</NAME></SUB> - <NUMBER>1</NUMBER></SUB></HOOK></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;</BLOCK>

<NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>toArray</STRING> = <GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>clone</STRING></GETPROP></SETPROP></EXPR_RESULT>;

<FUNCTION>function <FUNCNAME>$w</FUNCNAME>(<PARAMETER>string</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>string</NAME>)</CALL></NOT></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
  <EXPR_VOID><SETNAME><BINDNAME>string</BINDNAME> = <CALL><NAME>string</NAME>.<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
  <RETURN>return <HOOK><NAME>string</NAME> ? <CALL><NAME>string</NAME>.<GETPROP><STRING>split</STRING></GETPROP>(<REGEXP>/\s+/</REGEXP>)</CALL> : <ARRAYLIT>[]</ARRAYLIT></HOOK></RETURN>;</BLOCK>
}</FUNCTION>

<BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>Opera</STRING></GETPROP></IFNE>)<BLOCK>{
  <NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>concat</STRING> = <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>array = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><EXPR_VOID><CALL><NAME></TARGET>array</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><THIS>this</THIS>[<NAME>i</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isArray</STRING></GETPROP>(<GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL></IFNE>) <BLOCK>{
        <LOOP>for <VAR>(var <NAME>j = <NUMBER>0</NUMBER></NAME>, <NAME>arrayLength = <GETPROP><GETELEM><NAME>arguments</NAME>[<NAME>i</NAME></GETELEM>].<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>j</NAME> &lt; <NAME>arrayLength</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>j</NAME></INC></EXPR_VOID>++)
          <TARGET><EXPR_VOID><CALL><NAME></TARGET>array</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><GETELEM><NAME>arguments</NAME>[<NAME>i</NAME></GETELEM>][<NAME>j</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
      }</BLOCK> else <BLOCK>{
        <EXPR_VOID><CALL><NAME>array</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
    <RETURN>return <NAME>array</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>
<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Number</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>toColorPart</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>toPaddedString</STRING></GETPROP>(<NUMBER>2</NUMBER>, <NUMBER>16</NUMBER>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>succ</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><THIS>this</THIS> + <NUMBER>1</NUMBER></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>times</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$R</NAME>(<NUMBER>0</NUMBER>, <THIS>this</THIS>, <TRUE>true</TRUE></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<NAME>iterator</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toPaddedString</OBJLITNAME>: <FUNCTION>function(<PARAMETER>length</PARAMETER>, <PARAMETER>radix</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>string = <CALL><THIS>this</THIS>.<GETPROP><STRING>toString</STRING></GETPROP>(<OR><NAME>radix</NAME> || <NUMBER>10</NUMBER></OR>)</CALL></NAME></VAR>;
    <RETURN>return <ADD><CALL><STRING>'0'</STRING>.<GETPROP><STRING>times</STRING></GETPROP>(<SUB><NAME>length</NAME> - <GETPROP><NAME>string</NAME>.<STRING>length</STRING></GETPROP></SUB>)</CALL> + <NAME>string</NAME></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <HOOK><CALL><NAME>isFinite</NAME>(<THIS>this</THIS>)</CALL> ? <CALL><THIS>this</THIS>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL> : <STRING>'null'</STRING></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><CALL><NAME>$w</NAME>(<STRING>'abs round ceil floor'</STRING></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>method</PARAMETER>)<BLOCK>{
  <NAME>Number</NAME>.<EXPR_VOID><SETELEM><GETPROP><STRING>prototype</STRING></GETPROP>[<NAME>method</NAME>] = <CALL><GETELEM><NAME>Math</NAME>[<NAME>method</NAME></GETELEM>].<GETPROP><STRING>methodize</STRING></GETPROP>()</CALL></SETELEM></EXPR_VOID>;</BLOCK>
}</FUNCTION>)</CALL></EXPR_RESULT>;
<FUNCTION>function <FUNCNAME>$H</FUNCNAME>(<PARAMETER>object</PARAMETER>) <BLOCK>{
  <RETURN>return new <NEW><NAME>Hash</NAME>(<NAME>object</NAME>)</NEW></RETURN>;</BLOCK>
}</FUNCTION>;

<VAR>var <NAME>Hash = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<NAME>Enumerable</NAME>, (<CALL><FUNCTION>function() <BLOCK>{

  <FUNCTION>function <FUNCNAME>toQueryPair</FUNCNAME>(<PARAMETER>key</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>value</NAME>)</CALL></IFNE>) <RETURN>return <NAME>key</NAME></RETURN>;</BLOCK>
    <RETURN>return <ADD><ADD><NAME>key</NAME> + <STRING>'='</STRING></ADD> + <CALL><NAME>encodeURIComponent</NAME>(<CALL><NAME>String</NAME>.<GETPROP><STRING>interpret</STRING></GETPROP>(<NAME>value</NAME>)</CALL>)</CALL></ADD></RETURN>;</BLOCK>
  }</FUNCTION>

  <RETURN>return <OBJECTLIT>{
    <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>_object</STRING> = <HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isHash</STRING></GETPROP>(<NAME>object</NAME>)</CALL> ? <CALL><NAME>object</NAME>.<GETPROP><STRING>toObject</STRING></GETPROP>()</CALL> : <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<NAME>object</NAME>)</CALL></HOOK></SETPROP></EXPR_VOID>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
      <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>key</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><GETPROP><THIS>this</THIS>.<STRING>_object</STRING></GETPROP></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
        <VAR>var <NAME>value = <GETELEM><THIS>this</THIS>.<GETPROP><STRING>_object</STRING></GETPROP>[<NAME>key</NAME>]</GETELEM></NAME>, <NAME>pair = [<ARRAYLIT><NAME>key</NAME>, <NAME>value</NAME>]</ARRAYLIT></NAME></VAR>;
        <EXPR_VOID><SETPROP><NAME>pair</NAME>.<STRING>key</STRING> = <NAME>key</NAME></SETPROP></EXPR_VOID>;
        <EXPR_VOID><SETPROP><NAME>pair</NAME>.<STRING>value</STRING> = <NAME>value</NAME></SETPROP></EXPR_VOID>;
        <EXPR_VOID><CALL><NAME>iterator</NAME>(<NAME>pair</NAME>)</CALL></EXPR_VOID>;
      <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK></BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>set</OBJLITNAME>: <FUNCTION>function(<PARAMETER>key</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <THIS>this</THIS>.<SETELEM><GETPROP><STRING>_object</STRING></GETPROP>[<NAME>key</NAME>] = <NAME>value</NAME></SETELEM></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>get</OBJLITNAME>: <FUNCTION>function(<PARAMETER>key</PARAMETER>) <BLOCK>{
      <RETURN>return <GETELEM><THIS>this</THIS>.<GETPROP><STRING>_object</STRING></GETPROP>[<NAME>key</NAME>]</GETELEM></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>unset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>key</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>value = <GETELEM><THIS>this</THIS>.<GETPROP><STRING>_object</STRING></GETPROP>[<NAME>key</NAME>]</GETELEM></NAME></VAR>;
      delete <THIS>this</THIS>.<EXPR_VOID><DELPROP><GETPROP><STRING>_object</STRING></GETPROP>[<NAME>key</NAME></DELPROP></EXPR_VOID>];
      <RETURN>return <NAME>value</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>toObject</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>_object</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>keys</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>pluck</STRING></GETPROP>(<STRING>'key'</STRING>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>values</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>pluck</STRING></GETPROP>(<STRING>'value'</STRING>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>index</OBJLITNAME>: <FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>match = <CALL><THIS>this</THIS>.<GETPROP><STRING>detect</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{
        <RETURN>return <SHEQ><GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP> === <NAME>value</NAME></SHEQ></RETURN>;</BLOCK>
      }</FUNCTION>)</CALL></NAME></VAR>;
      <RETURN>return <AND><NAME>match</NAME> &amp;&amp; <GETPROP><NAME>match</NAME>.<STRING>key</STRING></GETPROP></AND></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>merge</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>clone</STRING></GETPROP></CALL>().<GETPROP><STRING>update</STRING></GETPROP>(<NAME>object</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>update</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
      <RETURN>return new <CALL><NEW><NAME>Hash</NAME>(<NAME>object</NAME></NEW>).<GETPROP><STRING>inject</STRING></GETPROP>(<THIS>this</THIS>, <FUNCTION>function(<PARAMETER>result</PARAMETER>, <PARAMETER>pair</PARAMETER>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>result</NAME>.<GETPROP><STRING>set</STRING></GETPROP>(<GETPROP><NAME>pair</NAME>.<STRING>key</STRING></GETPROP>, <GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP>)</CALL></EXPR_VOID>;
        <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
      }</FUNCTION>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>toQueryString</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{
        <VAR>var <NAME>key = <CALL><NAME>encodeURIComponent</NAME>(<GETPROP><NAME>pair</NAME>.<STRING>key</STRING></GETPROP>)</CALL></NAME>, <NAME>values = <GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP></NAME></VAR>;

        <BLOCK>if (<IFNE><AND><NAME>values</NAME> &amp;&amp; typeof <EQ><TYPEOFNAME>values</TYPEOFNAME> == <STRING>'object'</STRING></EQ></AND></IFNE>) <BLOCK>{
          <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isArray</STRING></GETPROP>(<NAME>values</NAME>)</CALL></IFNE>)
            <RETURN>return <CALL><NAME>values</NAME>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<CALL><NAME>toQueryPair</NAME>.<GETPROP><STRING>curry</STRING></GETPROP>(<NAME>key</NAME>)</CALL></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>'&amp;'</STRING>)</CALL></RETURN>;</BLOCK>
        }</BLOCK></BLOCK>
        <RETURN>return <CALL><NAME>toQueryPair</NAME>(<NAME>key</NAME>, <NAME>values</NAME>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>'&amp;'</STRING>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      <RETURN>return <ADD><ADD><STRING>'#&lt;Hash:{'</STRING> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{
        <RETURN>return <CALL><NAME>pair</NAME>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<GETPROP><NAME>Object</NAME>.<STRING>inspect</STRING></GETPROP></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>': '</STRING>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>', '</STRING>)</CALL></ADD> + <STRING>'}&gt;'</STRING></ADD></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>toJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>Object</NAME>.<GETPROP><STRING>toJSON</STRING></GETPROP>(<CALL><THIS>this</THIS>.<GETPROP><STRING>toObject</STRING></GETPROP>()</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>clone</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      <RETURN>return new <NEW><NAME>Hash</NAME>(<THIS>this</THIS>)</NEW></RETURN>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT></RETURN></BLOCK>
}</FUNCTION>)()</CALL>)</CALL></NAME></VAR>;

<NAME>Hash</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>toTemplateReplacements</STRING> = <GETPROP><NAME>Hash</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>toObject</STRING></GETPROP></SETPROP></EXPR_RESULT>;
<EXPR_RESULT><SETPROP><NAME>Hash</NAME>.<STRING>from</STRING> = <NAME>$H</NAME></SETPROP></EXPR_RESULT>;
<VAR>var <NAME>ObjectRange = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<NAME>Enumerable</NAME>, <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>start</PARAMETER>, <PARAMETER>end</PARAMETER>, <PARAMETER>exclusive</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>start</STRING> = <NAME>start</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>end</STRING> = <NAME>end</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>exclusive</STRING> = <NAME>exclusive</NAME></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>value = <GETPROP><THIS>this</THIS>.<STRING>start</STRING></GETPROP></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><CALL><THIS></TARGET>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>value</NAME>)</CALL></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><CALL><NAME>iterator</NAME>(<NAME>value</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <CALL><NAME>value</NAME>.<GETPROP><STRING>succ</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>include</OBJLITNAME>: <FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><LT><NAME>value</NAME> &lt; <GETPROP><THIS>this</THIS>.<STRING>start</STRING></GETPROP></LT></IFNE>)
      <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>exclusive</STRING></GETPROP></IFNE>)
      <RETURN>return <LT><NAME>value</NAME> &lt; <GETPROP><THIS>this</THIS>.<STRING>end</STRING></GETPROP></LT></RETURN>;</BLOCK>
    <RETURN>return <LE><NAME>value</NAME> &lt;= <GETPROP><THIS>this</THIS>.<STRING>end</STRING></GETPROP></LE></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></NAME></VAR>;

<VAR>var <NAME>$R = <FUNCTION>function(<PARAMETER>start</PARAMETER>, <PARAMETER>end</PARAMETER>, <PARAMETER>exclusive</PARAMETER>) <BLOCK>{
  <RETURN>return new <NEW><NAME>ObjectRange</NAME>(<NAME>start</NAME>, <NAME>end</NAME>, <NAME>exclusive</NAME>)</NEW></RETURN>;</BLOCK>
}</FUNCTION></NAME></VAR>;

<VAR>var <NAME>Ajax = <OBJECTLIT>{
  <OBJLITNAME>getTransport</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <OR><CALL><NAME>Try</NAME>.<GETPROP><STRING>these</STRING></GETPROP>(
      <FUNCTION>function() <BLOCK>{<RETURN>return new <NEW><NAME>XMLHttpRequest</NAME>()</NEW></RETURN></BLOCK>}</FUNCTION>,
      <FUNCTION>function() <BLOCK>{<RETURN>return new <NEW><NAME>ActiveXObject</NAME>(<STRING>'Msxml2.XMLHTTP'</STRING>)</NEW></RETURN></BLOCK>}</FUNCTION>,
      <FUNCTION>function() <BLOCK>{<RETURN>return new <NEW><NAME>ActiveXObject</NAME>(<STRING>'Microsoft.XMLHTTP'</STRING>)</NEW></RETURN></BLOCK>}</FUNCTION>
    )</CALL> || <FALSE>false</FALSE></OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>activeRequestCount</OBJLITNAME>: <NUMBER>0</NUMBER>
}</OBJECTLIT></NAME></VAR>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Responders</STRING> = <OBJECTLIT>{
  <OBJLITNAME>responders</OBJLITNAME>: <ARRAYLIT>[]</ARRAYLIT>,

  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>responders</STRING></GETPROP>.<GETPROP><STRING>_each</STRING></GETPROP>(<NAME>iterator</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>register</OBJLITNAME>: <FUNCTION>function(<PARAMETER>responder</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<CALL><THIS>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>responder</NAME>)</CALL></NOT></IFNE>)
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>responders</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>responder</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>unregister</OBJLITNAME>: <FUNCTION>function(<PARAMETER>responder</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>responders</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>responders</STRING></GETPROP>.<GETPROP><STRING>without</STRING></GETPROP>(<NAME>responder</NAME>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>dispatch</OBJLITNAME>: <FUNCTION>function(<PARAMETER>callback</PARAMETER>, <PARAMETER>request</PARAMETER>, <PARAMETER>transport</PARAMETER>, <PARAMETER>json</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>responder</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETELEM><NAME>responder</NAME>[<NAME>callback</NAME>]</GETELEM>)</CALL></IFNE>) <BLOCK>{
        <TRY>try <BLOCK>{
          <EXPR_VOID><CALL><GETELEM><NAME>responder</NAME>[<NAME>callback</NAME></GETELEM>].<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>responder</NAME>, [<ARRAYLIT><NAME>request</NAME>, <NAME>transport</NAME>, <NAME>json</NAME>]</ARRAYLIT>)</CALL></EXPR_VOID>;
        }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH> }</TRY>
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Ajax</NAME>.<STRING>Responders</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>register</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>onCreate</OBJLITNAME>:   <FUNCTION>function() <BLOCK>{ <EXPR_VOID><INC><GETPROP><NAME>Ajax</NAME>.<STRING>activeRequestCount</STRING></GETPROP></INC></EXPR_VOID>++</BLOCK> }</FUNCTION>,
  <OBJLITNAME>onComplete</OBJLITNAME>: <FUNCTION>function() <BLOCK>{ <EXPR_VOID><DEC><GETPROP><NAME>Ajax</NAME>.<STRING>activeRequestCount</STRING></GETPROP></DEC></EXPR_VOID>--</BLOCK> }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Base</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>options</STRING> = <OBJECTLIT>{
      <OBJLITNAME>method</OBJLITNAME>:       <STRING>'post'</STRING>,
      <OBJLITNAME>asynchronous</OBJLITNAME>: <TRUE>true</TRUE>,
      <OBJLITNAME>contentType</OBJLITNAME>:  <STRING>'application/x-www-form-urlencoded'</STRING>,
      <OBJLITNAME>encoding</OBJLITNAME>:     <STRING>'UTF-8'</STRING>,
      <OBJLITNAME>parameters</OBJLITNAME>:   <STRING>''</STRING>,
      <OBJLITNAME>evalJSON</OBJLITNAME>:     <TRUE>true</TRUE>,
      <OBJLITNAME>evalJS</OBJLITNAME>:       <TRUE>true</TRUE>
    }</OBJECTLIT></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>options</STRING></GETPROP>, <OR><NAME>options</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR>)</CALL></EXPR_VOID>;

    <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>method</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<GETPROP><STRING>method</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;

    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING></GETPROP>)</CALL></IFNE>)
      <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<GETPROP><STRING>parameters</STRING></GETPROP>.<GETPROP><STRING>toQueryParams</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    else <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isHash</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING></GETPROP>)</CALL></IFNE>)
      <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<GETPROP><STRING>parameters</STRING></GETPROP>.<GETPROP><STRING>toObject</STRING></GETPROP>()<GOTO></CALL></SETPROP></EXPR_VOID></GOTO>;</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Request</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<GETPROP><NAME>Ajax</NAME>.<STRING>Base</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>_complete</OBJLITNAME>: <FALSE>false</FALSE>,

  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>$super</PARAMETER>, <PARAMETER>url</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>$super</NAME>(<NAME>options</NAME>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>transport</STRING> = <CALL><NAME>Ajax</NAME>.<GETPROP><STRING>getTransport</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>request</STRING></GETPROP>(<NAME>url</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>request</OBJLITNAME>: <FUNCTION>function(<PARAMETER>url</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>url</STRING> = <NAME>url</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>method</STRING> = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>method</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <VAR>var <NAME>params = <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING></GETPROP>)</CALL></NAME></VAR>;

    <BLOCK>if (<IFNE><NOT>![<CALL><ARRAYLIT><STRING>'get'</STRING>, <STRING>'post'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP>)</CALL></NOT></IFNE>) <BLOCK>{
      // simulate other verbs over post
      <EXPR_VOID><SETELEM><NAME>params</NAME>[<STRING>'_method'</STRING>] = <GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP></SETELEM></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>method</STRING> = <STRING>'post'</STRING></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK>

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>parameters</STRING> = <NAME>params</NAME></SETPROP></EXPR_VOID>;

    <BLOCK>if (<IFNE><SETNAME><BINDNAME>params</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toQueryString</STRING></GETPROP>(<NAME>params</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
      // when GET, append parameters to URL
      <BLOCK>if (<IFNE><EQ><GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP> == <STRING>'get'<EXPR_VOID><SETPROP_OP></STRING></EQ></IFNE>)
        <THIS>this</THIS>.<STRING>url</STRING> += (<ADD><HOOK><CALL><THIS>this</THIS>.<GETPROP><STRING>url</STRING></GETPROP>.<GETPROP><STRING>include</STRING></GETPROP>(<STRING>'?'</STRING>)</CALL> ? <STRING>'&amp;'</STRING> : <STRING>'?'</STRING>)</HOOK> + <NAME>params</NAME></ADD></SETPROP_OP></EXPR_VOID>;
      else <BLOCK>if (<IFNE><CALL><REGEXP>/Konqueror|Safari|KHTML/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL></IFNE>)
        <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>params</NAME></BINDNAME> += <STRING>'&amp;_='<GOTO></STRING></ADD></SETNAME></EXPR_VOID></GOTO>;</BLOCK></BLOCK>
    }</BLOCK></BLOCK>

    <TRY>try <BLOCK>{
      <VAR>var <NAME>response = new <NEW><GETPROP><NAME>Ajax</NAME>.<STRING>Response</STRING></GETPROP>(<THIS>this</THIS>)</NEW></NAME></VAR>;
      <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>onCreate</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<GETPROP><STRING>onCreate</STRING></GETPROP>(<NAME>response</NAME>)</CALL></EXPR_VOID>;</BLOCK>
      <EXPR_VOID><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>dispatch</STRING></GETPROP>(<STRING>'onCreate'</STRING>, <THIS>this</THIS>, <NAME>response</NAME>)</CALL></EXPR_VOID>;

      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>open</STRING></GETPROP>(<CALL><THIS>this</THIS>.<GETPROP><STRING>method</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL>, <GETPROP><THIS>this</THIS>.<STRING>url</STRING></GETPROP>,
        <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>asynchronous</STRING></GETPROP>)</CALL></EXPR_VOID>;

      <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>asynchronous</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>respondToReadyState</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS></CALL>).<GETPROP><STRING>defer</STRING></GETPROP>(<NUMBER>1</NUMBER>)</CALL></EXPR_VOID>;</BLOCK>

      <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>transport</STRING></GETPROP>.<STRING>onreadystatechange</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>onStateChange</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL></SETPROP></EXPR_VOID>;
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>setRequestHeaders</STRING></GETPROP>()</CALL></EXPR_VOID>;

      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>body</STRING> = <HOOK><EQ><GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP> == <STRING>'post'</STRING></EQ> ? (<OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>postBody</STRING></GETPROP> || <NAME>params</NAME>)</OR> : <NULL>null</NULL></HOOK></SETPROP></EXPR_VOID>;
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>send</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>body</STRING></GETPROP>)</CALL></EXPR_VOID>;

      /* Force Firefox to handle ready state 4 for synchronous requests */
      <BLOCK>if (<IFNE><AND>!<NOT><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>asynchronous</STRING></GETPROP></NOT> &amp;&amp; <GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>overrideMimeType</STRING></GETPROP></AND></IFNE>)
        <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>onStateChange</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>

    }</BLOCK>
    <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onStateChange</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>readyState = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>readyState</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><AND><GT><NAME>readyState</NAME> &gt; <NUMBER>1</NUMBER></GT> &amp;&amp; !((<NOT><AND><EQ><NAME>readyState</NAME> == <NUMBER>4</NUMBER>)</EQ> &amp;&amp; <GETPROP><THIS>this</THIS>.<STRING>_complete</STRING></GETPROP>)</AND></NOT></AND></IFNE>)
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>respondToReadyState</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>readyState</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>setRequestHeaders</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>headers = <OBJECTLIT>{
      <OBJLITNAME>'X-Requested-Wit</OBJLITNAME>h': <STRING>'XMLHttpRequest'</STRING>,
      <OBJLITNAME>'X-Prototype-Versio</OBJLITNAME>n': <GETPROP><NAME>Prototype</NAME>.<STRING>Version</STRING></GETPROP>,
      <OBJLITNAME>'Accep</OBJLITNAME>t': <STRING>'text/javascript, text/html, application/xml, text/xml, */*'</STRING>
    }</OBJECTLIT></NAME></VAR>;

    <BLOCK>if (<IFNE><EQ><GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP> == <STRING>'post'</STRING></EQ></IFNE>) <BLOCK>{
      <EXPR_VOID><SETELEM><NAME>headers</NAME>[<STRING>'Content-type'</STRING>] = <ADD><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>contentType</STRING></GETPROP> +
        (<HOOK><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>encoding</STRING></GETPROP> ? <ADD><STRING>'; charset='</STRING> + <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>encoding</STRING></GETPROP></ADD> : <STRING>''</STRING>)</HOOK></ADD></SETELEM></EXPR_VOID>;

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      <BLOCK>if (<IFNE><AND><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>overrideMimeType</STRING></GETPROP> &amp;&amp;
          (<LT><GETELEM><OR><CALL><NAME>navigator</NAME>.<GETPROP><STRING>userAgent</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/Gecko\/(\d{4})/</REGEXP>)</CALL> || [<ARRAYLIT><NUMBER>0</NUMBER>,<NUMBER>2005</NUMBER>]</ARRAYLIT></OR>)[<NUMBER>1</NUMBER>]</GETELEM> &lt; <NUMBER>2005</NUMBER></LT></AND></IFNE>)
            <EXPR_VOID><SETELEM><NAME>headers</NAME>[<STRING>'Connection'</STRING>] = <STRING>'close'</STRING></SETELEM></EXPR_VOID>;</BLOCK>
    }</BLOCK></BLOCK>

    // user-defined headers
    <BLOCK>if (<IFNE><EQ>typeof <TYPEOF><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>requestHeaders</STRING></GETPROP></TYPEOF> == <STRING>'object'</STRING></EQ></IFNE>) <BLOCK>{
      <VAR>var <NAME>extras = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>requestHeaders</STRING></GETPROP></NAME></VAR>;

      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETPROP><NAME>extras</NAME>.<STRING>push</STRING></GETPROP>)</CALL></IFNE>)
        <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>extras</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>i</NAME></BINDNAME> += <NUMBER>2</NUMBER></ADD></SETNAME></EXPR_VOID>)
          <TARGET><EXPR_VOID><SETELEM><NAME></TARGET>headers</NAME>[<GETELEM><NAME>extras</NAME>[<NAME>i</NAME>]</GETELEM>] = <GETELEM><NAME>extras</NAME>[<ADD><NAME>i</NAME>+<NUMBER>1</NUMBER></ADD>]<GOTO><TARGET><TARGET></TARGET></TARGET></GETELEM></SETELEM></EXPR_VOID></GOTO></LOOP>;
      else
        <EXPR_VOID><CALL><CALL><NAME>$H</NAME>(<NAME>extras</NAME></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{ <EXPR_VOID><SETELEM><NAME>headers</NAME>[<GETPROP><NAME>pair</NAME>.<STRING>key</STRING></GETPROP>] = <GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP></SETELEM></EXPR_VOID></BLOCK> }</FUNCTION>)<GOTO></CALL></EXPR_VOID></GOTO>;</BLOCK>
    }</BLOCK></BLOCK>

    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>headers</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><EXPR_VOID><CALL><THIS></TARGET>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>setRequestHeader</STRING></GETPROP>(<NAME>name</NAME>, <GETELEM><NAME>headers</NAME>[<NAME>name</NAME>]</GETELEM>)<GOTO><TARGET></TARGET></CALL></EXPR_VOID></BLOCK></GOTO></LOOP>;</LOCAL_BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>success</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>status = <CALL><THIS>this</THIS>.<GETPROP><STRING>getStatus</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return !<OR><NOT><NAME>status</NAME></NOT> || (<AND><GE><NAME>status</NAME> &gt;= <NUMBER>200</NUMBER></GE> &amp;&amp; <LT><NAME>status</NAME> &lt; <NUMBER>300</NUMBER></LT>)</AND></OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getStatus</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <TRY>try <BLOCK>{
      <RETURN>return <OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>status</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) { <BLOCK><RETURN>return <NUMBER>0</NUMBER></RETURN></BLOCK></CATCH> }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>respondToReadyState</OBJLITNAME>: <FUNCTION>function(<PARAMETER>readyState</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>state = <GETELEM><NAME>Ajax</NAME>.<GETPROP><STRING>Request</STRING></GETPROP>.<GETPROP><STRING>Events</STRING></GETPROP>[<NAME>readyState</NAME>]</GETELEM></NAME>, <NAME>response = new <NEW><GETPROP><NAME>Ajax</NAME>.<STRING>Response</STRING></GETPROP>(<THIS>this</THIS>)</NEW></NAME></VAR>;

    <BLOCK>if (<IFNE><EQ><NAME>state</NAME> == <STRING>'Complete'</STRING></EQ></IFNE>) <BLOCK>{
      <TRY>try <BLOCK>{
        <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>_complete</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
        (<EXPR_VOID><CALL><OR><GETELEM><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>[<ADD><STRING>'on'</STRING> + <GETPROP><NAME>response</NAME>.<STRING>status</STRING></GETPROP></ADD>]</GETELEM>
         || <OR><GETELEM><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>[<ADD><STRING>'on'</STRING> + (<HOOK><CALL><THIS>this</THIS>.<GETPROP><STRING>success</STRING></GETPROP>()</CALL> ? <STRING>'Success'</STRING> : <STRING>'Failure'</STRING>)</HOOK></ADD>]</GETELEM>
         || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR></OR>)(<NAME>response</NAME>, <GETPROP><NAME>response</NAME>.<STRING>headerJSON</STRING></GETPROP>)</CALL></EXPR_VOID>;
      }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
        <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
      }</TRY>

      <VAR>var <NAME>contentType = <CALL><NAME>response</NAME>.<GETPROP><STRING>getHeader</STRING></GETPROP>(<STRING>'Content-type'</STRING>)</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><OR><EQ><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>evalJS</STRING></GETPROP> == <STRING>'force'</STRING></EQ>
          || (<AND><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>evalJS</STRING></GETPROP> &amp;&amp; <AND><NAME>contentType</NAME>
          &amp;&amp; <CALL><NAME>contentType</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^\s*(text|application)\/(x-)?(java|ecma)script(;.*)?\s*$/i</REGEXP>)</CALL></AND>)</AND></OR></IFNE>)
        <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>evalResponse</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
    }</BLOCK></BLOCK>

    <TRY>try <BLOCK>{
      (<EXPR_VOID><CALL><OR><GETELEM><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>[<ADD><STRING>'on'</STRING> + <NAME>state</NAME></ADD>]</GETELEM> || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR>)(<NAME>response</NAME>, <GETPROP><NAME>response</NAME>.<STRING>headerJSON</STRING></GETPROP>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>dispatch</STRING></GETPROP>(<ADD><STRING>'on'</STRING> + <NAME>state</NAME></ADD>, <THIS>this</THIS>, <NAME>response</NAME>, <GETPROP><NAME>response</NAME>.<STRING>headerJSON</STRING></GETPROP>)</CALL></EXPR_VOID>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY>

    <BLOCK>if (<IFNE><EQ><NAME>state</NAME> == <STRING>'Complete'</STRING></EQ></IFNE>) <BLOCK>{
      // avoid memory leak in MSIE: clean up
      <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>transport</STRING></GETPROP>.<STRING>onreadystatechange</STRING> = <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getHeader</OBJLITNAME>: <FUNCTION>function(<PARAMETER>name</PARAMETER>) <BLOCK>{
    <TRY>try <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>getResponseHeader</STRING></GETPROP>(<NAME>name</NAME>)</CALL></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) { <BLOCK><RETURN>return <NULL>null</NULL></RETURN></BLOCK></CATCH> }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evalResponse</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <TRY>try <BLOCK>{
      <RETURN>return <CALL><NAME>eval</NAME>((<CALL><OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>responseText</STRING></GETPROP> || <STRING>''</STRING></OR>).<GETPROP><STRING>unfilterJSON</STRING></GETPROP>()</CALL>)</CALL></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>dispatchException</OBJLITNAME>: <FUNCTION>function(<PARAMETER>exception</PARAMETER>) <BLOCK>{
    (<EXPR_VOID><CALL><OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>onException</STRING></GETPROP> || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR>)(<THIS>this</THIS>, <NAME>exception</NAME>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>dispatch</STRING></GETPROP>(<STRING>'onException'</STRING>, <THIS>this</THIS>, <NAME>exception</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<NAME>Ajax</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Request</STRING></GETPROP>.<STRING>Events</STRING> =
  [<ARRAYLIT><STRING>'Uninitialized'</STRING>, <STRING>'Loading'</STRING>, <STRING>'Loaded'</STRING>, <STRING>'Interactive'</STRING>, <STRING>'Complete'</STRING>]</ARRAYLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Response</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>request</PARAMETER>)<BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>request</STRING> = <NAME>request</NAME></SETPROP></EXPR_VOID>;
    <VAR>var <NAME>transport  = <SETPROP><THIS>this</THIS>.<STRING>transport</STRING>  = <GETPROP><NAME>request</NAME>.<STRING>transport</STRING></GETPROP></SETPROP></NAME>,
        <NAME>readyState = <SETPROP><THIS>this</THIS>.<STRING>readyState</STRING> = <GETPROP><NAME>transport</NAME>.<STRING>readyState</STRING></GETPROP></SETPROP></NAME></VAR>;

    <BLOCK>if(<IFNE><OR>(<AND><GT><NAME>readyState</NAME> &gt; <NUMBER>2</NUMBER></GT> &amp;&amp; !<NOT><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP></NOT>)</AND> || <EQ><NAME>readyState</NAME> == <NUMBER>4</NUMBER></EQ></OR></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>status</STRING>       = <CALL><THIS>this</THIS>.<GETPROP><STRING>getStatus</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>statusText</STRING>   = <CALL><THIS>this</THIS>.<GETPROP><STRING>getStatusText</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>responseText</STRING> = <CALL><NAME>String</NAME>.<GETPROP><STRING>interpret</STRING></GETPROP>(<GETPROP><NAME>transport</NAME>.<STRING>responseText</STRING></GETPROP>)</CALL></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>headerJSON</STRING>   = <CALL><THIS>this</THIS>.<GETPROP><STRING>_getHeaderJSON</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK>

    <BLOCK>if(<IFNE><EQ><NAME>readyState</NAME> == <NUMBER>4</NUMBER></EQ></IFNE>) <BLOCK>{
      <VAR>var <NAME>xml = <GETPROP><NAME>transport</NAME>.<STRING>responseXML</STRING></GETPROP></NAME></VAR>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>responseXML</STRING>  = <HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>xml</NAME>)</CALL> ? <NULL>null</NULL> : <NAME>xml</NAME></HOOK></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>responseJSON</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>_getResponseJSON</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>status</OBJLITNAME>:      <NUMBER>0</NUMBER>,
  <OBJLITNAME>statusText</OBJLITNAME>: <STRING>''</STRING>,

  <OBJLITNAME>getStatus</OBJLITNAME>: <GETPROP><NAME>Ajax</NAME>.<GETPROP><STRING>Request</STRING></GETPROP>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>getStatus</STRING></GETPROP>,

  <OBJLITNAME>getStatusText</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <TRY>try <BLOCK>{
      <RETURN>return <OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>statusText</STRING></GETPROP> || <STRING>''</STRING></OR></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) { <BLOCK><RETURN>return <STRING>''</STRING></RETURN></BLOCK></CATCH> }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getHeader</OBJLITNAME>: <GETPROP><NAME>Ajax</NAME>.<GETPROP><STRING>Request</STRING></GETPROP>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>getHeader</STRING></GETPROP>,

  <OBJLITNAME>getAllHeaders</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <TRY>try <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>getAllResponseHeaders</STRING></GETPROP>()</CALL></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) { <BLOCK><RETURN>return <NULL>null</NULL></RETURN></BLOCK></CATCH> }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getResponseHeader</OBJLITNAME>: <FUNCTION>function(<PARAMETER>name</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>getResponseHeader</STRING></GETPROP>(<NAME>name</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getAllResponseHeaders</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>getAllResponseHeaders</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>_getHeaderJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>json = <CALL><THIS>this</THIS>.<GETPROP><STRING>getHeader</STRING></GETPROP>(<STRING>'X-JSON'</STRING>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>json</NAME></NOT></IFNE>) <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK>
    <EXPR_VOID><SETNAME><BINDNAME>json</BINDNAME> = <CALL><NAME>decodeURIComponent</NAME>(<CALL><NAME>escape</NAME>(<NAME>json</NAME>)</CALL>)</CALL></SETNAME></EXPR_VOID>;
    <TRY>try <BLOCK>{
      <RETURN>return <CALL><NAME>json</NAME>.<GETPROP><STRING>evalJSON</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>request</STRING></GETPROP>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>sanitizeJSON</STRING></GETPROP>)</CALL></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>request</STRING></GETPROP>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>_getResponseJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>options = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>request</STRING></GETPROP>.<STRING>options</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><OR>!<NOT><GETPROP><NAME>options</NAME>.<STRING>evalJSON</STRING></GETPROP></NOT> || (<OR><AND><NE><GETPROP><NAME>options</NAME>.<STRING>evalJSON</STRING></GETPROP> != <STRING>'force'</STRING></NE> &amp;&amp;
      !(<NOT><CALL><OR><CALL><THIS>this</THIS>.<GETPROP><STRING>getHeader</STRING></GETPROP>(<STRING>'Content-type'</STRING>)</CALL> || <STRING>''</STRING></OR>).<GETPROP><STRING>include</STRING></GETPROP>(<STRING>'application/json'</STRING>)</CALL></NOT>)</AND> ||
        <CALL><THIS>this</THIS>.<GETPROP><STRING>responseText</STRING></GETPROP>.<GETPROP><STRING>blank</STRING></GETPROP>()</CALL></OR></OR></IFNE>)
          <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK>
    <TRY>try <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>responseText</STRING></GETPROP>.<GETPROP><STRING>evalJSON</STRING></GETPROP>(<GETPROP><NAME>options</NAME>.<STRING>sanitizeJSON</STRING></GETPROP>)</CALL></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>request</STRING></GETPROP>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Updater</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<GETPROP><NAME>Ajax</NAME>.<STRING>Request</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>$super</PARAMETER>, <PARAMETER>container</PARAMETER>, <PARAMETER>url</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>container</STRING> = <OBJECTLIT>{
      <OBJLITNAME>success</OBJLITNAME>: (<OR><GETPROP><NAME>container</NAME>.<STRING>success</STRING></GETPROP> || <NAME>container</NAME>)</OR>,
      <OBJLITNAME>failure</OBJLITNAME>: (<OR><GETPROP><NAME>container</NAME>.<STRING>failure</STRING></GETPROP> || (<HOOK><GETPROP><NAME>container</NAME>.<STRING>success</STRING></GETPROP> ? <NULL>null</NULL> : <NAME>container</NAME>)</HOOK>)</OR>
    }</OBJECTLIT></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETNAME><BINDNAME>options</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<NAME>options</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>onComplete = <GETPROP><NAME>options</NAME>.<STRING>onComplete</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>options</NAME>.<STRING>onComplete</STRING> = (<CALL><FUNCTION>function(<PARAMETER>response</PARAMETER>, <PARAMETER>json</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>updateContent</STRING></GETPROP>(<GETPROP><NAME>response</NAME>.<STRING>responseText</STRING></GETPROP>)</CALL></EXPR_VOID>;
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<NAME>onComplete</NAME>)</CALL></IFNE>) <EXPR_VOID><CALL><NAME>onComplete</NAME>(<NAME>response</NAME>, <NAME>json</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>).<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL></SETPROP></EXPR_VOID>;

    <EXPR_VOID><CALL><NAME>$super</NAME>(<NAME>url</NAME>, <NAME>options</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>updateContent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>responseText</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>receiver = <GETELEM><THIS>this</THIS>.<GETPROP><STRING>container</STRING></GETPROP>[<HOOK><CALL><THIS>this</THIS>.<GETPROP><STRING>success</STRING></GETPROP>()</CALL> ? <STRING>'success'</STRING> : <STRING>'failure'</STRING></HOOK>]</GETELEM></NAME>,
        <NAME>options = <GETPROP><THIS>this</THIS>.<STRING>options</STRING></GETPROP></NAME></VAR>;

    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>options</NAME>.<STRING>evalScripts</STRING></GETPROP></NOT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>responseText</BINDNAME> = <CALL><NAME>responseText</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>

    <BLOCK>if (<IFNE><SETNAME><BINDNAME>receiver</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>receiver</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
      <BLOCK>if (<IFNE><GETPROP><NAME>options</NAME>.<STRING>insertion</STRING></GETPROP></IFNE>) <BLOCK>{
        <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<GETPROP><NAME>options</NAME>.<STRING>insertion</STRING></GETPROP>)</CALL></IFNE>) <BLOCK>{
          <VAR>var <NAME>insertion = <OBJECTLIT>{ }</OBJECTLIT></NAME></VAR>; <EXPR_VOID><SETELEM><NAME>insertion</NAME>[<GETPROP><NAME>options</NAME>.<STRING>insertion</STRING></GETPROP>] = <NAME>responseText</NAME></SETELEM></EXPR_VOID>;
          <EXPR_VOID><CALL><NAME>receiver</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>insertion</NAME>)</CALL></EXPR_VOID>;
        }</BLOCK>
        else <EXPR_VOID><CALL><NAME>options</NAME>.<GETPROP><STRING>insertion</STRING></GETPROP>(<NAME>receiver</NAME>, <NAME>responseText</NAME>)<GOTO></CALL></EXPR_VOID></GOTO>;</BLOCK>
      }</BLOCK>
      else <EXPR_VOID><CALL><NAME>receiver</NAME>.<GETPROP><STRING>update</STRING></GETPROP>(<NAME>responseText</NAME>)<GOTO></CALL></EXPR_VOID></GOTO>;</BLOCK>
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>PeriodicalUpdater</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<GETPROP><NAME>Ajax</NAME>.<STRING>Base</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>$super</PARAMETER>, <PARAMETER>container</PARAMETER>, <PARAMETER>url</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>$super</NAME>(<NAME>options</NAME>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>onComplete</STRING> = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING></GETPROP></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>frequency</STRING> = (<OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>frequency</STRING></GETPROP> || <NUMBER>2</NUMBER>)</OR></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>decay</STRING> = (<OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>decay</STRING></GETPROP> || <NUMBER>1</NUMBER>)</OR></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>updater</STRING> = <OBJECTLIT>{ }</OBJECTLIT></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>container</STRING> = <NAME>container</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>url</STRING> = <NAME>url</NAME></SETPROP></EXPR_VOID>;

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>start</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>start</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>updateComplete</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>onTimerEvent</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stop</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <THIS>this</THIS>.<GETPROP><STRING>updater</STRING></GETPROP>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING> = <NAME>undefined</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>clearTimeout</NAME>(<GETPROP><THIS>this</THIS>.<STRING>timer</STRING></GETPROP>)</CALL></EXPR_VOID>;
    (<EXPR_VOID><CALL><OR><GETPROP><THIS>this</THIS>.<STRING>onComplete</STRING></GETPROP> || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR>).<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, <NAME>arguments</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>updateComplete</OBJLITNAME>: <FUNCTION>function(<PARAMETER>response</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>decay</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>decay</STRING> = (<HOOK><EQ><GETPROP><NAME>response</NAME>.<STRING>responseText</STRING></GETPROP> == <GETPROP><THIS>this</THIS>.<STRING>lastText</STRING></GETPROP></EQ> ?
        <MUL><GETPROP><THIS>this</THIS>.<STRING>decay</STRING></GETPROP> * <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>decay</STRING></GETPROP></MUL> : <NUMBER>1</NUMBER>)</HOOK></SETPROP></EXPR_VOID>;

      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastText</STRING> = <GETPROP><NAME>response</NAME>.<STRING>responseText</STRING></GETPROP></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK>
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>timer</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>onTimerEvent</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS></CALL>).<GETPROP><STRING>delay</STRING></GETPROP>(<MUL><GETPROP><THIS>this</THIS>.<STRING>decay</STRING></GETPROP> * <GETPROP><THIS>this</THIS>.<STRING>frequency</STRING></GETPROP></MUL>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onTimerEvent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>updater</STRING> = new <NEW><GETPROP><NAME>Ajax</NAME>.<STRING>Updater</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>container</STRING></GETPROP>, <GETPROP><THIS>this</THIS>.<STRING>url</STRING></GETPROP>, <GETPROP><THIS>this</THIS>.<STRING>options</STRING></GETPROP>)</NEW></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;
<FUNCTION>function <FUNCNAME>$</FUNCNAME>(<PARAMETER>element</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><GT><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>1</NUMBER></GT></IFNE>) <BLOCK>{
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>elements = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>length = <GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>$</NAME>(<GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
    <RETURN>return <NAME>elements</NAME></RETURN>;
  }</BLOCK></BLOCK>
  <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>element</NAME>)</CALL></IFNE>)
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>document</NAME>.<GETPROP><STRING>getElementById</STRING></GETPROP>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
  <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
}</FUNCTION>

<BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>XPath</STRING></GETPROP></IFNE>) <BLOCK>{
  <EXPR_RESULT><SETPROP><NAME>document</NAME>.<STRING>_getElementsByXPath</STRING> = <FUNCTION>function(<PARAMETER>expression</PARAMETER>, <PARAMETER>parentElement</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <VAR>var <NAME>query = <CALL><NAME>document</NAME>.<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>expression</NAME>, <OR><CALL><NAME>$</NAME>(<NAME>parentElement</NAME>)</CALL> || <NAME>document</NAME></OR>,
      <NULL>null</NULL>, <GETPROP><NAME>XPathResult</NAME>.<STRING>ORDERED_NODE_SNAPSHOT_TYPE</STRING></GETPROP>, <NULL>null</NULL>)</CALL></NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>query</NAME>.<STRING>snapshotLength</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<CALL><NAME>query</NAME>.<GETPROP><STRING>snapshotItem</STRING></GETPROP>(<NAME>i</NAME>)</CALL>)</CALL>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>

/*--------------------------------------------------------------------------*/

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>window</NAME>.<STRING>Node</STRING></GETPROP></NOT></IFNE>) <VAR>var <NAME>Node = <OBJECTLIT>{ }</OBJECTLIT></NAME></VAR>;</BLOCK>

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Node</NAME>.<STRING>ELEMENT_NODE</STRING></GETPROP></NOT></IFNE>) <BLOCK>{
  // DOM level 2 ECMAScript Language Binding
  <EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Node</NAME>, <OBJECTLIT>{
    <OBJLITNAME>ELEMENT_NODE</OBJLITNAME>: <NUMBER>1</NUMBER>,
    <OBJLITNAME>ATTRIBUTE_NODE</OBJLITNAME>: <NUMBER>2</NUMBER>,
    <OBJLITNAME>TEXT_NODE</OBJLITNAME>: <NUMBER>3</NUMBER>,
    <OBJLITNAME>CDATA_SECTION_NODE</OBJLITNAME>: <NUMBER>4</NUMBER>,
    <OBJLITNAME>ENTITY_REFERENCE_NODE</OBJLITNAME>: <NUMBER>5</NUMBER>,
    <OBJLITNAME>ENTITY_NODE</OBJLITNAME>: <NUMBER>6</NUMBER>,
    <OBJLITNAME>PROCESSING_INSTRUCTION_NODE</OBJLITNAME>: <NUMBER>7</NUMBER>,
    <OBJLITNAME>COMMENT_NODE</OBJLITNAME>: <NUMBER>8</NUMBER>,
    <OBJLITNAME>DOCUMENT_NODE</OBJLITNAME>: <NUMBER>9</NUMBER>,
    <OBJLITNAME>DOCUMENT_TYPE_NODE</OBJLITNAME>: <NUMBER>10</NUMBER>,
    <OBJLITNAME>DOCUMENT_FRAGMENT_NODE</OBJLITNAME>: <NUMBER>11</NUMBER>,
    <OBJLITNAME>NOTATION_NODE</OBJLITNAME>: <NUMBER>12</NUMBER>
  }</OBJECTLIT>)</CALL></EXPR_RESULT>;
}</BLOCK></BLOCK>

(<EXPR_RESULT><CALL><FUNCTION>function() <BLOCK>{
  <VAR>var <NAME>element = <GETPROP><THIS>this</THIS>.<STRING>Element</STRING></GETPROP></NAME></VAR>;
  <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>Element</STRING> = <FUNCTION>function(<PARAMETER>tagName</PARAMETER>, <PARAMETER>attributes</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>attributes</BINDNAME> = <OR><NAME>attributes</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>tagName</BINDNAME> = <CALL><NAME>tagName</NAME>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>cache = <GETPROP><NAME>Element</NAME>.<STRING>cache</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><AND><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP> &amp;&amp; <GETPROP><NAME>attributes</NAME>.<STRING>name</STRING></GETPROP></AND></IFNE>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>tagName</BINDNAME> = <ADD><ADD><ADD><ADD><STRING>'&lt;'</STRING> + <NAME>tagName</NAME></ADD> + <STRING>' name="'</STRING></ADD> + <GETPROP><NAME>attributes</NAME>.<STRING>name</STRING></GETPROP></ADD> + <STRING>'"&gt;'</STRING></ADD></SETNAME></EXPR_VOID>;
      delete <EXPR_VOID><DELPROP><NAME>attributes</NAME>.<STRING>name</STRING></DELPROP></EXPR_VOID>;
      <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>writeAttribute</STRING></GETPROP>(<CALL><NAME>document</NAME>.<GETPROP><STRING>createElement</STRING></GETPROP>(<NAME>tagName</NAME>)</CALL>, <NAME>attributes</NAME>)</CALL></RETURN>;
    }</BLOCK></BLOCK>
    <BLOCK>if (<IFNE><NOT>!<GETELEM><NAME>cache</NAME>[<NAME>tagName</NAME>]</GETELEM></NOT></IFNE>) <EXPR_VOID><SETELEM><NAME>cache</NAME>[<NAME>tagName</NAME>] = <CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<CALL><NAME>document</NAME>.<GETPROP><STRING>createElement</STRING></GETPROP>(<NAME>tagName</NAME>)</CALL>)</CALL></SETELEM></EXPR_VOID>;</BLOCK>
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>writeAttribute</STRING></GETPROP>(<CALL><GETELEM><NAME>cache</NAME>[<NAME>tagName</NAME></GETELEM>].<GETPROP><STRING>cloneNode</STRING></GETPROP>(<FALSE>false</FALSE>)</CALL>, <NAME>attributes</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_VOID>;
  <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>Element</STRING></GETPROP>, <OR><NAME>element</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR>)</CALL></EXPR_VOID>;</BLOCK>
}</FUNCTION>).<GETPROP><STRING>call</STRING></GETPROP>(<NAME>window</NAME>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>cache</STRING> = <OBJECTLIT>{ }</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>Methods</STRING> = <OBJECTLIT>{
  <OBJLITNAME>visible</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <NE><GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>style</STRING></GETPROP>.<STRING>display</STRING></GETPROP> != <STRING>'none'</STRING></NE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toggle</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><GETELEM><NAME>Element</NAME>[<HOOK><CALL><NAME>Element</NAME>.<GETPROP><STRING>visible</STRING></GETPROP>(<NAME>element</NAME>)</CALL> ? <STRING>'hide'</STRING> : <STRING>'show'</STRING></HOOK></GETELEM>](<NAME>element</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>hide</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>display</STRING> = <STRING>'none'</STRING></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>show</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>display</STRING> = <STRING>''</STRING></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>remove</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>update</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><AND><NAME>content</NAME> &amp;&amp; <GETPROP><NAME>content</NAME>.<STRING>toElement</STRING></GETPROP></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>content</NAME>.<GETPROP><STRING>toElement</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>content</NAME>)</CALL></IFNE>) <RETURN>return <CALL><NAME>element</NAME>.<CALL><GETPROP><STRING>update</STRING></GETPROP></CALL>().<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>content</NAME>)</CALL></RETURN>;</BLOCK>
    <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toHTML</STRING></GETPROP>(<NAME>content</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>innerHTML</STRING> = <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>content</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<NAME>content</NAME></CALL>).<GETPROP><STRING>defer</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>replace</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><AND><NAME>content</NAME> &amp;&amp; <GETPROP><NAME>content</NAME>.<STRING>toElement</STRING></GETPROP></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>content</NAME>.<GETPROP><STRING>toElement</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    else <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>content</NAME>)</CALL></NOT></IFNE>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toHTML</STRING></GETPROP>(<NAME>content</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <VAR>var <NAME>range = <CALL><NAME>element</NAME>.<GETPROP><STRING>ownerDocument</STRING></GETPROP>.<GETPROP><STRING>createRange</STRING></GETPROP>()</CALL></NAME></VAR>;
      <EXPR_VOID><CALL><NAME>range</NAME>.<GETPROP><STRING>selectNode</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>content</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<NAME>content</NAME></CALL>).<GETPROP><STRING>defer</STRING></GETPROP>()</CALL></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>range</NAME>.<GETPROP><STRING>createContextualFragment</STRING></GETPROP>(<CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL>)</CALL></SETNAME></EXPR_VOID>;
    <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
    <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>replaceChild</STRING></GETPROP>(<NAME>content</NAME>, <NAME>element</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>compileMatcher</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><CALL><THIS>this</THIS>.<GETPROP><STRING>shouldUseXPath</STRING></GETPROP>()</CALL></IFNE>)
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>compileXPathMatcher</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>

    <VAR>var <NAME>e = <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></NAME>, <NAME>ps = <GETPROP><NAME>Selector</NAME>.<STRING>patterns</STRING></GETPROP></NAME>, <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME>,
        <NAME>c = <GETPROP><NAME>Selector</NAME>.<STRING>criteria</STRING></GETPROP></NAME>, <NAME>le</NAME>, <NAME>p</NAME>, <NAME>m</NAME></VAR>;

    <BLOCK>if (<IFNE><GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>_cache</STRING></GETPROP>[<NAME>e</NAME>]</GETELEM></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>matcher</STRING> = <GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>_cache</STRING></GETPROP>[<NAME>e</NAME>]</GETELEM></SETPROP></EXPR_VOID>;
      <RETURN>return</RETURN>;
    }</BLOCK></BLOCK>

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>matcher</STRING> = [<ARRAYLIT><STRING>"this.matcher = function(root) {"</STRING>,
                    <STRING>"var r = root, h = Selector.handlers, c = false, n;"</STRING>]</ARRAYLIT></SETPROP></EXPR_VOID>;

    <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>e</NAME> &amp;&amp; <AND><NE><NAME>le</NAME> != <NAME>e</NAME></NE> &amp;&amp; (<CALL><REGEXP>/\S/</REGEXP>).<GETPROP><STRING>test</STRING></GETPROP>(<NAME>e</NAME>)</CALL></AND></AND></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>le</BINDNAME> = <NAME>e</NAME></SETNAME></EXPR_VOID>;
      <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>ps</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
        <EXPR_VOID><SETNAME><BINDNAME>p</BINDNAME> = <GETELEM><NAME>ps</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
        <BLOCK>if (<IFNE><SETNAME><BINDNAME>m</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>p</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
          <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETELEM><NAME>c</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL> ? <CALL><GETELEM><NAME>c</NAME>[<NAME>i</NAME></GETELEM>](<NAME>m</NAME>)</CALL> :
    	      new <CALL><NEW><NAME>Template</NAME>(<GETELEM><NAME>c</NAME>[<NAME>i</NAME>]</GETELEM></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></HOOK>)</CALL></EXPR_VOID>;
          <EXPR_VOID><SETNAME><BINDNAME>e</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<GETELEM><NAME>m</NAME>[<NUMBER>0</NUMBER>]</GETELEM>, <STRING>''</STRING>)</CALL></SETNAME></EXPR_VOID>;
          <BREAK>break</BREAK>;
        }</BLOCK></BLOCK>
      <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<STRING>"return h.unique(n);\n}"</STRING>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>eval</NAME>(<CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>'\n'</STRING>)</CALL>)</CALL></EXPR_VOID>;
    <NAME>Selector</NAME>.<EXPR_VOID><SETELEM><GETPROP><STRING>_cache</STRING></GETPROP>[<GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP>] = <GETPROP><THIS>this</THIS>.<STRING>matcher</STRING></GETPROP></SETELEM></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,
  <OBJLITNAME>removeClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>className</STRING> = <CALL><NAME>element</NAME>.<GETPROP><STRING>className</STRING></GETPROP>.<CALL><GETPROP><STRING>replace</STRING></GETPROP>(
      new <NEW><NAME>RegExp</NAME>(<ADD><ADD><STRING>"(^|\\s+)"</STRING> + <NAME>className</NAME></ADD> + <STRING>"(\\s+|$)"</STRING></ADD>)</NEW>, <STRING>' '</STRING></CALL>).<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  
  <OBJLITNAME>insert</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>insertions</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;

    <BLOCK>if (<IFNE><OR><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>insertions</NAME>)</CALL> || <OR><CALL><NAME>Object</NAME>.<GETPROP><STRING>isNumber</STRING></GETPROP>(<NAME>insertions</NAME>)</CALL> ||
        <OR><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>insertions</NAME>)</CALL> || (<AND><NAME>insertions</NAME> &amp;&amp; (<OR><GETPROP><NAME>insertions</NAME>.<STRING>toElement</STRING></GETPROP> || <GETPROP><NAME>insertions</NAME>.<STRING>toHTML</STRING></GETPROP>)</OR>)</AND></OR></OR></OR></IFNE>)
          <EXPR_VOID><SETNAME><BINDNAME>insertions</BINDNAME> = <OBJECTLIT>{<OBJLITNAME>bottom</OBJLITNAME>:<NAME>insertions</NAME>}</OBJECTLIT></SETNAME></EXPR_VOID>;</BLOCK>

    <VAR>var <NAME>content</NAME>, <NAME>t</NAME>, <NAME>range</NAME></VAR>;

    <LOCAL_BLOCK><LOOP>for (<EXPR_VOID><SETNAME><BINDNAME>position</BINDNAME></SETNAME></EXPR_VOID> in <ENUM_INIT_KEYS><NAME>insertions</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME>  = <GETELEM><NAME>insertions</NAME>[<NAME>position</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>position</BINDNAME> = <CALL><NAME>position</NAME>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>t</BINDNAME> = <GETELEM><NAME>Element</NAME>.<GETPROP><STRING>_insertionTranslations</STRING></GETPROP>[<NAME>position</NAME>]</GETELEM></SETNAME></EXPR_VOID>;

      <BLOCK>if (<IFNE><AND><NAME>content</NAME> &amp;&amp; <GETPROP><NAME>content</NAME>.<STRING>toElement</STRING></GETPROP></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>content</NAME>.<GETPROP><STRING>toElement</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>content</NAME>)</CALL></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>t</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>element</NAME>, <NAME>content</NAME>)</CALL></EXPR_VOID>;
        <CONTINUE>continue</CONTINUE>;
      }</BLOCK></BLOCK>

      <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toHTML</STRING></GETPROP>(<NAME>content</NAME>)</CALL></SETNAME></EXPR_VOID>;

      <EXPR_VOID><SETNAME><BINDNAME>range</BINDNAME> = <CALL><NAME>element</NAME>.<GETPROP><STRING>ownerDocument</STRING></GETPROP>.<GETPROP><STRING>createRange</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>t</NAME>.<GETPROP><STRING>initializeRange</STRING></GETPROP>(<NAME>element</NAME>, <NAME>range</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>t</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>element</NAME>, <CALL><NAME>range</NAME>.<GETPROP><STRING>createContextualFragment</STRING></GETPROP>(<CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL>)</CALL>)</CALL></EXPR_VOID>;

      <EXPR_VOID><CALL><NAME>content</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<NAME>content</NAME></CALL>).<GETPROP><STRING>defer</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>

    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>wrap</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>wrapper</PARAMETER>, <PARAMETER>attributes</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>wrapper</NAME>)</CALL></IFNE>)
      <EXPR_VOID><CALL><CALL><NAME>$</NAME>(<NAME>wrapper</NAME></CALL>).<GETPROP><STRING>writeAttribute</STRING></GETPROP>(<OR><NAME>attributes</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR>)</CALL></EXPR_VOID>;
    else <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>wrapper</NAME>)</CALL></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>wrapper</BINDNAME> = new <NEW><NAME>Element</NAME>(<NAME>wrapper</NAME>, <NAME>attributes</NAME>)</NEW></SETNAME></EXPR_VOID>;
    else <EXPR_VOID><SETNAME><BINDNAME>wrapper</BINDNAME> = new <NEW><NAME>Element</NAME>(<STRING>'div'</STRING>, <NAME>wrapper</NAME>)<GOTO><GOTO></NEW></SETNAME></EXPR_VOID></GOTO></GOTO>;</BLOCK></BLOCK>
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP></IFNE>)
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>replaceChild</STRING></GETPROP>(<NAME>wrapper</NAME>, <NAME>element</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    <EXPR_VOID><CALL><NAME>wrapper</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>wrapper</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>result = <ADD><STRING>'&lt;'</STRING> + <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></ADD></NAME></VAR>;
    <EXPR_VOID><CALL><CALL><NAME>$H</NAME>(<OBJECTLIT>{<OBJLITNAME>'i</OBJLITNAME>d': <STRING>'id'</STRING>, <OBJLITNAME>'classNam</OBJLITNAME>e': <STRING>'class'</STRING>}</OBJECTLIT></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>property = <CALL><NAME>pair</NAME>.<GETPROP><STRING>first</STRING></GETPROP>()</CALL></NAME>, <NAME>attribute = <CALL><NAME>pair</NAME>.<GETPROP><STRING>last</STRING></GETPROP>()</CALL></NAME></VAR>;
      <VAR>var <NAME>value = (<CALL><OR><GETELEM><NAME>element</NAME>[<NAME>property</NAME>]</GETELEM> || <STRING>''</STRING></OR>).<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NAME>value</NAME></IFNE>) <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <ADD><ADD><ADD><STRING>' '</STRING> + <NAME>attribute</NAME></ADD> + <STRING>'='</STRING></ADD> + <CALL><NAME>value</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>(<TRUE>true</TRUE>)</CALL></ADD></ADD></SETNAME></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <ADD><NAME>result</NAME> + <STRING>'&gt;'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>recursivelyCollect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>property</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>elements = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETELEM><NAME>element</NAME>[<NAME>property</NAME>]</GETELEM></SETNAME></IFEQ>)
      <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>)
        <EXPR_VOID><CALL><NAME>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>element</NAME>)</CALL>)<GOTO><TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
    <RETURN>return <NAME>elements</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>ancestors</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>recursivelyCollect</STRING></GETPROP>(<STRING>'parentNode'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>descendants</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getElementsBySelector</STRING></GETPROP>(<STRING>"*"</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>firstDescendant</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>firstChild</STRING></GETPROP></SETNAME></EXPR_VOID>;
    <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>element</NAME> &amp;&amp; <NE><GETPROP><NAME>element</NAME>.<STRING>nodeType</STRING></GETPROP> != <NUMBER>1</NUMBER></NE></AND></IFEQ>) <TARGET><EXPR_VOID><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>nextSibling<GOTO><TARGET></TARGET></STRING></GETPROP></SETNAME></EXPR_VOID></GOTO></LOOP>;
    <RETURN>return <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>immediateDescendants</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>firstChild</STRING></GETPROP>)</SETNAME></NOT></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
    <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>element</NAME> &amp;&amp; <NE><GETPROP><NAME>element</NAME>.<STRING>nodeType</STRING></GETPROP> != <NUMBER>1</NUMBER></NE></AND></IFEQ>) <TARGET><EXPR_VOID><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>nextSibling<GOTO><TARGET></TARGET></STRING></GETPROP></SETNAME></EXPR_VOID></GOTO></LOOP>;
    <BLOCK>if (<IFNE><NAME>element</NAME></IFNE>) <RETURN>return [<CALL><ARRAYLIT><NAME>element</NAME></ARRAYLIT>].<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>nextSiblings</STRING></GETPROP>()</CALL>)</CALL></RETURN>;</BLOCK>
    <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>previousSiblings</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>recursivelyCollect</STRING></GETPROP>(<STRING>'previousSibling'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>nextSiblings</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>recursivelyCollect</STRING></GETPROP>(<STRING>'nextSibling'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>siblings</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <RETURN>return <CALL><NAME>element</NAME>.<CALL><GETPROP><STRING>previousSiblings</STRING></GETPROP></CALL>().<CALL><GETPROP><STRING>reverse</STRING></GETPROP></CALL>().<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>element</NAME>.<GETPROP><STRING>nextSiblings</STRING></GETPROP>()</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>match</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>selector</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>selector</NAME>)</CALL></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>selector</BINDNAME> = new <NEW><NAME>Selector</NAME>(<NAME>selector</NAME>)</NEW></SETNAME></EXPR_VOID>;</BLOCK>
    <RETURN>return <CALL><NAME>selector</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>up</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <CALL><NAME>$</NAME>(<GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
    <VAR>var <NAME>ancestors = <CALL><NAME>element</NAME>.<GETPROP><STRING>ancestors</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <HOOK><NAME>expression</NAME> ? <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<NAME>ancestors</NAME>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL> :
      <GETELEM><NAME>ancestors</NAME>[<OR><NAME>index</NAME> || <NUMBER>0</NUMBER></OR>]</GETELEM></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>down</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>firstDescendant</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
    <VAR>var <NAME>descendants = <CALL><NAME>element</NAME>.<GETPROP><STRING>descendants</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <HOOK><NAME>expression</NAME> ? <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<NAME>descendants</NAME>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL> :
      <GETELEM><NAME>descendants</NAME>[<OR><NAME>index</NAME> || <NUMBER>0</NUMBER></OR>]</GETELEM></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>previous</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <CALL><NAME>$</NAME>(<CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>previousElementSibling</STRING></GETPROP>(<NAME>element</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
    <VAR>var <NAME>previousSiblings = <CALL><NAME>element</NAME>.<GETPROP><STRING>previousSiblings</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <HOOK><NAME>expression</NAME> ? <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<NAME>previousSiblings</NAME>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL> :
      <GETELEM><NAME>previousSiblings</NAME>[<OR><NAME>index</NAME> || <NUMBER>0</NUMBER></OR>]</GETELEM></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>next</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <CALL><NAME>$</NAME>(<CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>nextElementSibling</STRING></GETPROP>(<NAME>element</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
    <VAR>var <NAME>nextSiblings = <CALL><NAME>element</NAME>.<GETPROP><STRING>nextSiblings</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <HOOK><NAME>expression</NAME> ? <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<NAME>nextSiblings</NAME>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL> :
      <GETELEM><NAME>nextSiblings</NAME>[<OR><NAME>index</NAME> || <NUMBER>0</NUMBER></OR>]</GETELEM></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>select</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>element = <CALL><NAME>$</NAME>(<CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findChildElements</STRING></GETPROP>(<NAME>element</NAME>, <NAME>args</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>adjacent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>element = <CALL><NAME>$</NAME>(<CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><NAME>Selector</NAME>.<CALL><GETPROP><STRING>findChildElements</STRING></GETPROP>(<GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP>, <NAME>args</NAME></CALL>).<GETPROP><STRING>without</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>identify</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>id = <CALL><NAME>element</NAME>.<GETPROP><STRING>readAttribute</STRING></GETPROP>(<STRING>'id'</STRING>)</CALL></NAME>, <NAME>self = <GETPROP><NAME>arguments</NAME>.<STRING>callee</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><NAME>id</NAME></IFNE>) <RETURN>return <NAME>id</NAME></RETURN>;</BLOCK>
    <LOOP>do <TARGET><BLOCK></TARGET>{ <EXPR_VOID><SETNAME><BINDNAME>id</BINDNAME> = <ADD><STRING>'anonymous_element_'</STRING> + <INC><GETPROP><NAME>self</NAME>.<STRING>counter</STRING></GETPROP></INC></ADD></SETNAME></EXPR_VOID>++ }</BLOCK> while (<TARGET><IFEQ><CALL><NAME></TARGET>$</NAME>(<NAME>id</NAME>)<TARGET></TARGET></CALL></IFEQ></LOOP>);
    <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>writeAttribute</STRING></GETPROP>(<STRING>'id'</STRING>, <NAME>id</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>id</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>readAttribute</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>name</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP></IFNE>) <BLOCK>{
      <VAR>var <NAME>t = <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<STRING>read</STRING></GETPROP></NAME></VAR>;
      <BLOCK>if (<IFNE><GETELEM><NAME>t</NAME>.<GETPROP><STRING>values</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></IFNE>) <RETURN>return <CALL><NAME>t</NAME>.<GETELEM><GETPROP><STRING>values</STRING></GETPROP>[<NAME>name</NAME></GETELEM>](<NAME>element</NAME>, <NAME>name</NAME>)</CALL></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><GETELEM><NAME>t</NAME>.<GETPROP><STRING>names</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME> = <GETELEM><NAME>t</NAME>.<GETPROP><STRING>names</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></SETNAME></EXPR_VOID>;</BLOCK>
      <BLOCK>if (<IFNE><CALL><NAME>name</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<STRING>':'</STRING>)</CALL></IFNE>) <BLOCK>{
        <RETURN>return (!<HOOK><OR><NOT><GETPROP><NAME>element</NAME>.<STRING>attributes</STRING></GETPROP></NOT> || !<NOT><GETELEM><NAME>element</NAME>.<GETPROP><STRING>attributes</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></NOT>)</OR> ? <NULL>null</NULL> :
         <GETPROP><NAME>element</NAME>.<GETELEM><GETPROP><STRING>attributes</STRING></GETPROP>[<NAME>name</NAME></GETELEM>].<STRING>value</STRING></GETPROP></HOOK></RETURN>;
      }</BLOCK></BLOCK>
    }</BLOCK></BLOCK>
    <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>getAttribute</STRING></GETPROP>(<NAME>name</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>writeAttribute</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>name</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>attributes = <OBJECTLIT>{ }</OBJECTLIT></NAME>, <NAME>t = <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<STRING>write</STRING></GETPROP></NAME></VAR>;

    <BLOCK>if (<IFNE><EQ>typeof <TYPEOFNAME>name</TYPEOFNAME> == <STRING>'object'</STRING></EQ></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>attributes</BINDNAME> = <NAME>name</NAME></SETNAME></EXPR_VOID>;
    else <EXPR_VOID><SETELEM><NAME>attributes</NAME>[<NAME>name</NAME>] = <HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>value</NAME>)</CALL> ? <TRUE>true</TRUE> : <NAME>value<GOTO></NAME></HOOK></SETELEM></EXPR_VOID></GOTO>;</BLOCK>

    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>attr</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>attributes</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME> = <OR><GETELEM><NAME>t</NAME>.<GETPROP><STRING>names</STRING></GETPROP>[<NAME>attr</NAME>]</GETELEM> || <NAME>attr</NAME></OR></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <GETELEM><NAME>attributes</NAME>[<NAME>attr</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><GETELEM><NAME>t</NAME>.<GETPROP><STRING>values</STRING></GETPROP>[<NAME>attr</NAME>]</GETELEM></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME> = <CALL><NAME>t</NAME>.<GETELEM><GETPROP><STRING>values</STRING></GETPROP>[<NAME>attr</NAME></GETELEM>](<NAME>element</NAME>, <NAME>value</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <BLOCK>if (<IFNE><OR><SHEQ><NAME>value</NAME> === <FALSE>false</FALSE></SHEQ> || <SHEQ><NAME>value</NAME> === <NULL>null</NULL></SHEQ></OR></IFNE>)
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeAttribute</STRING></GETPROP>(<NAME>name</NAME>)</CALL></EXPR_VOID>;
      else <BLOCK>if (<IFNE><SHEQ><NAME>value</NAME> === <TRUE>true</TRUE></SHEQ></IFNE>)
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>setAttribute</STRING></GETPROP>(<NAME>name</NAME>, <NAME>name</NAME>)</CALL></EXPR_VOID>;
      else <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>setAttribute</STRING></GETPROP>(<NAME>name</NAME>, <NAME>value</NAME>)<GOTO><GOTO></CALL></EXPR_VOID></GOTO></GOTO>;</BLOCK></BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getHeight</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<CALL><GETPROP><STRING>getDimensions</STRING></GETPROP></CALL>().<STRING>height</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getWidth</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<CALL><GETPROP><STRING>getDimensions</STRING></GETPROP></CALL>().<STRING>width</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>classNames</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return new <NEW><GETPROP><NAME>Element</NAME>.<STRING>ClassNames</STRING></GETPROP>(<NAME>element</NAME>)</NEW></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>hasClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <VAR>var <NAME>elementClassName = <GETPROP><NAME>element</NAME>.<STRING>className</STRING></GETPROP></NAME></VAR>;
    <RETURN>return (<AND><GT><GETPROP><NAME>elementClassName</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>0</NUMBER></GT> &amp;&amp; (<OR><EQ><NAME>elementClassName</NAME> == <NAME>className</NAME></EQ> ||
      new <CALL><NEW><NAME>RegExp</NAME>(<ADD><ADD><STRING>"(^|\\s)"</STRING> + <NAME>className</NAME></ADD> + <STRING>"(\\s|$)"</STRING></ADD></NEW>).<GETPROP><STRING>test</STRING></GETPROP>(<NAME>elementClassName</NAME>)</CALL>)</OR>)</AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>addClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><NOT>!<CALL><NAME>element</NAME>.<GETPROP><STRING>hasClassName</STRING></GETPROP>(<NAME>className</NAME>)<EXPR_VOID><SETPROP_OP></CALL></NOT></IFNE>)
      <NAME>element</NAME>.<STRING>className</STRING> += (<ADD><HOOK><GETPROP><NAME>element</NAME>.<STRING>className</STRING></GETPROP> ? <STRING>' '</STRING> : <STRING>''</STRING>)</HOOK> + <NAME>className</NAME></ADD></SETPROP_OP></EXPR_VOID>;</BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>removeClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>className</STRING> = <CALL><NAME>element</NAME>.<GETPROP><STRING>className</STRING></GETPROP>.<CALL><GETPROP><STRING>replace</STRING></GETPROP>(
      new <NEW><NAME>RegExp</NAME>(<ADD><ADD><STRING>"(^|\\s+)"</STRING> + <NAME>className</NAME></ADD> + <STRING>"(\\s+|$)"</STRING></ADD>)</NEW>, <STRING>' '</STRING></CALL>).<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toggleClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <RETURN>return <CALL><GETELEM><NAME>element</NAME>[<HOOK><CALL><NAME>element</NAME>.<GETPROP><STRING>hasClassName</STRING></GETPROP>(<NAME>className</NAME>)</CALL> ?
      <STRING>'removeClassName'</STRING> : <STRING>'addClassName'</STRING></HOOK></GETELEM>](<NAME>className</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  // removes whitespace-only text node children
  <OBJLITNAME>cleanWhitespace</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>node = <GETPROP><NAME>element</NAME>.<STRING>firstChild</STRING></GETPROP></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><NAME></TARGET>node</NAME></IFEQ>) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>nextNode = <GETPROP><NAME>node</NAME>.<STRING>nextSibling</STRING></GETPROP></NAME></VAR>;
      <BLOCK>if (<IFNE><AND><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>3</NUMBER></EQ> &amp;&amp; !<NOT><CALL><REGEXP>/\S/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>node</NAME>.<STRING>nodeValue</STRING></GETPROP>)</CALL></NOT></AND></IFNE>)
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;</BLOCK>
      <EXPR_VOID><SETNAME><BINDNAME>node</BINDNAME> = <NAME>nextNode</NAME></SETNAME></EXPR_VOID>;
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>empty</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>innerHTML</STRING></GETPROP>.<GETPROP><STRING>blank</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>descendantOf</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>ancestor</PARAMETER>) <BLOCK>{
    <EXPR_VOID><COMMA><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME>, <SETNAME><BINDNAME>ancestor</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>ancestor</NAME>)</CALL></SETNAME></COMMA></EXPR_VOID>;
    <VAR>var <NAME>originalAncestor = <NAME>ancestor</NAME></NAME></VAR>;

    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>compareDocumentPosition</STRING></GETPROP></IFNE>)
      <RETURN>return (<SHEQ><BITAND><CALL><NAME>element</NAME>.<GETPROP><STRING>compareDocumentPosition</STRING></GETPROP>(<NAME>ancestor</NAME>)</CALL> &amp; <NUMBER>8</NUMBER>)</BITAND> === <NUMBER>8</NUMBER></SHEQ></RETURN>;</BLOCK>

    <BLOCK>if (<IFNE><AND><GETPROP><NAME>element</NAME>.<STRING>sourceIndex</STRING></GETPROP> &amp;&amp; !<NOT><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>Opera</STRING></GETPROP></NOT></AND></IFNE>) <BLOCK>{
      <VAR>var <NAME>e = <GETPROP><NAME>element</NAME>.<STRING>sourceIndex</STRING></GETPROP></NAME>, <NAME>a = <GETPROP><NAME>ancestor</NAME>.<STRING>sourceIndex</STRING></GETPROP></NAME>,
       <NAME>nextAncestor = <GETPROP><NAME>ancestor</NAME>.<STRING>nextSibling</STRING></GETPROP></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<NAME>nextAncestor</NAME></NOT></IFNE>) <BLOCK>{
        <LOOP>do <TARGET><BLOCK></TARGET>{ <EXPR_VOID><SETNAME><BINDNAME>ancestor</BINDNAME> = <GETPROP><NAME>ancestor</NAME>.<STRING>parentNode</STRING></GETPROP></SETNAME></EXPR_VOID>; }</BLOCK>
        while (<TARGET><IFEQ><AND></TARGET>!(<NOT><SETNAME><BINDNAME>nextAncestor</BINDNAME> = <GETPROP><NAME>ancestor</NAME>.<STRING>nextSibling</STRING></GETPROP>)</SETNAME></NOT> &amp;&amp; <GETPROP><NAME>ancestor</NAME>.<STRING>parentNode<TARGET></TARGET></STRING></GETPROP></AND></IFEQ></LOOP>);
      }</BLOCK></BLOCK>
      <BLOCK>if (<IFNE><NAME>nextAncestor</NAME></IFNE>) <RETURN>return (<AND><GT><NAME>e</NAME> &gt; <NAME>a</NAME></GT> &amp;&amp; <LT><NAME>e</NAME> &lt; <GETPROP><NAME>nextAncestor</NAME>.<STRING>sourceIndex</STRING></GETPROP></LT>)</AND></RETURN>;</BLOCK>
    }</BLOCK></BLOCK>

    <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP></SETNAME></IFEQ>)
      <TARGET><BLOCK></TARGET>if (<IFNE><EQ><NAME>element</NAME> == <NAME>originalAncestor</NAME></EQ></IFNE>) <RETURN>return <TRUE>true<GOTO><TARGET></TARGET></TRUE></RETURN></GOTO>;</BLOCK></LOOP>
    <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>scrollTo</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>pos = <CALL><NAME>element</NAME>.<GETPROP><STRING>cumulativeOffset</STRING></GETPROP>()</CALL></NAME></VAR>;
    <EXPR_VOID><CALL><NAME>window</NAME>.<GETPROP><STRING>scrollTo</STRING></GETPROP>(<GETELEM><NAME>pos</NAME>[<NUMBER>0</NUMBER>]</GETELEM>, <GETELEM><NAME>pos</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getStyle</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>style</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>style</BINDNAME> = <HOOK><EQ><NAME>style</NAME> == <STRING>'float'</STRING></EQ> ? <STRING>'cssFloat'</STRING> : <CALL><NAME>style</NAME>.<GETPROP><STRING>camelize</STRING></GETPROP>()</CALL></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>value = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>[<NAME>style</NAME>]</GETELEM></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>value</NAME></NOT></IFNE>) <BLOCK>{
      <VAR>var <NAME>css = <CALL><NAME>document</NAME>.<GETPROP><STRING>defaultView</STRING></GETPROP>.<GETPROP><STRING>getComputedStyle</STRING></GETPROP>(<NAME>element</NAME>, <NULL>null</NULL>)</CALL></NAME></VAR>;
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <HOOK><NAME>css</NAME> ? <GETELEM><NAME>css</NAME>[<NAME>style</NAME>]</GETELEM> : <NULL>null</NULL></HOOK></SETNAME></EXPR_VOID>;
    }</BLOCK></BLOCK>
    <BLOCK>if (<IFNE><EQ><NAME>style</NAME> == <STRING>'opacity'</STRING></EQ></IFNE>) <RETURN>return <HOOK><NAME>value</NAME> ? <CALL><NAME>parseFloat</NAME>(<NAME>value</NAME>)</CALL> : <NUMBER>1.0</NUMBER></HOOK></RETURN>;</BLOCK>
    <RETURN>return <HOOK><EQ><NAME>value</NAME> == <STRING>'auto'</STRING></EQ> ? <NULL>null</NULL> : <NAME>value</NAME></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getOpacity</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'opacity'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>setStyle</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>styles</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>elementStyle = <GETPROP><NAME>element</NAME>.<STRING>style</STRING></GETPROP></NAME>, <NAME>match</NAME></VAR>;
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>styles</NAME>)</CALL></IFNE>) <BLOCK><EXPR_VOID><SETPROP_OP>{
      <NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>cssText</STRING> += <ADD><STRING>';'</STRING> + <NAME>styles</NAME></ADD></SETPROP_OP></EXPR_VOID>;
      <RETURN>return <HOOK><CALL><NAME>styles</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<STRING>'opacity'</STRING>)</CALL> ?
        <CALL><NAME>element</NAME>.<GETPROP><STRING>setOpacity</STRING></GETPROP>(<GETELEM><NAME>styles</NAME>.<CALL><GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/opacity:\s*(\d?\.?\d*)/</REGEXP></CALL>)[<NUMBER>1</NUMBER>]</GETELEM>)</CALL> : <NAME>element</NAME></HOOK></RETURN>;
    }</BLOCK></BLOCK>
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>styles</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><BLOCK></TARGET>if (<IFNE><EQ><NAME>property</NAME> == <STRING>'opacity'</STRING></EQ></IFNE>) <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>setOpacity</STRING></GETPROP>(<GETELEM><NAME>styles</NAME>[<NAME>property</NAME>]</GETELEM>)</CALL></EXPR_VOID>;
      else
        <EXPR_VOID><SETELEM><NAME>elementStyle</NAME>[(<HOOK><OR><EQ><NAME>property</NAME> == <STRING>'float'</STRING></EQ> || <EQ><NAME>property</NAME> == <STRING>'cssFloat'</STRING></EQ>)</OR> ?
          (<HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<GETPROP><NAME>elementStyle</NAME>.<STRING>styleFloat</STRING></GETPROP>)</CALL> ? <STRING>'cssFloat'</STRING> : <STRING>'styleFloat'</STRING>)</HOOK> :
            <NAME>property</NAME></HOOK>] = <GETELEM><NAME>styles</NAME>[<NAME>property</NAME>]<GOTO><GOTO><TARGET></TARGET></GETELEM></SETELEM></EXPR_VOID></GOTO></GOTO>;</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>

    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>setOpacity</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>opacity</STRING> = (<HOOK><OR><EQ><NAME>value</NAME> == <NUMBER>1</NUMBER></EQ> || <SHEQ><NAME>value</NAME> === <STRING>''</STRING></SHEQ>)</OR> ? <STRING>''</STRING> :
      (<HOOK><LT><NAME>value</NAME> &lt; <NUMBER>0.00001</NUMBER>)</LT> ? <NUMBER>0</NUMBER> : <NAME>value</NAME></HOOK></HOOK></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getDimensions</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>display = <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'display'</STRING>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><AND><NE><NAME>display</NAME> != <STRING>'none'</STRING></NE> &amp;&amp; <NE><NAME>display</NAME> != <NULL>null</NULL></NE></AND></IFNE>) // Safari bug
      <RETURN>return <OBJECTLIT>{<OBJLITNAME>width</OBJLITNAME>: <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP>, <OBJLITNAME>height</OBJLITNAME>: <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP>}</OBJECTLIT></RETURN>;</BLOCK>

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    <VAR>var <NAME>els = <GETPROP><NAME>element</NAME>.<STRING>style</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalVisibility = <GETPROP><NAME>els</NAME>.<STRING>visibility</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalPosition = <GETPROP><NAME>els</NAME>.<STRING>position</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalDisplay = <GETPROP><NAME>els</NAME>.<STRING>display</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>visibility</STRING> = <STRING>'hidden'</STRING></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>position</STRING> = <STRING>'absolute'</STRING></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>display</STRING> = <STRING>'block'</STRING></SETPROP></EXPR_VOID>;
    <VAR>var <NAME>originalWidth = <GETPROP><NAME>element</NAME>.<STRING>clientWidth</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalHeight = <GETPROP><NAME>element</NAME>.<STRING>clientHeight</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>display</STRING> = <NAME>originalDisplay</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>position</STRING> = <NAME>originalPosition</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>visibility</STRING> = <NAME>originalVisibility</NAME></SETPROP></EXPR_VOID>;
    <RETURN>return <OBJECTLIT>{<OBJLITNAME>width</OBJLITNAME>: <NAME>originalWidth</NAME>, <OBJLITNAME>height</OBJLITNAME>: <NAME>originalHeight</NAME>}</OBJECTLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>makePositioned</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>pos = <CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><OR><EQ><NAME>pos</NAME> == <STRING>'static'</STRING></EQ> || !<NOT><NAME>pos</NAME></NOT></OR></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_madePositioned</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
      <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> = <STRING>'relative'</STRING></SETPROP></EXPR_VOID>;
      // Opera returns the offset relative to the positioning context, when an
      // element is position relative but top and left have not been defined
      <BLOCK>if (<IFNE><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></IFNE>) <BLOCK>{
        <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING> = <NUMBER>0</NUMBER></SETPROP></EXPR_VOID>;
        <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING> = <NUMBER>0</NUMBER></SETPROP></EXPR_VOID>;
      }</BLOCK></BLOCK>
    }</BLOCK></BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>undoPositioned</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>_madePositioned</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_madePositioned</STRING> = <NAME>undefined</NAME></SETPROP></EXPR_VOID>;
      <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>bottom</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>right</STRING> = <STRING>''</STRING></SETPROP></SETPROP></SETPROP></SETPROP></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>makeClipping</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_overflow</STRING> = <OR><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'overflow'</STRING>)</CALL> || <STRING>'auto'</STRING></OR></SETPROP></EXPR_VOID>;
    <BLOCK>if (<IFNE><SHNE><GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP> !== <STRING>'hidden'</STRING></SHNE></IFNE>)
      <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>overflow</STRING> = <STRING>'hidden'</STRING></SETPROP></EXPR_VOID>;</BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>undoClipping</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP></NOT></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>overflow</STRING> = <HOOK><EQ><GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP> == <STRING>'auto'</STRING></EQ> ? <STRING>''</STRING> : <GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP></HOOK></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_overflow</STRING> = <NULL>null</NULL></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>cumulativeOffset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></SETNAME></EXPR_VOID>;
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></TARGET></NAME></IFEQ></LOOP>);
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>_returnOffset</STRING></GETPROP>(<NAME>valueL</NAME>, <NAME>valueT</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>positionedOffset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><NAME>element</NAME></IFNE>) <BLOCK>{
        <BLOCK>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP> == <STRING>'BODY'</STRING></EQ></IFNE>) <BREAK>break</BREAK>;</BLOCK>
        <VAR>var <NAME>p = <CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><OR><EQ><NAME>p</NAME> == <STRING>'relative'</STRING></EQ> || <EQ><NAME>p</NAME> == <STRING>'absolute'</STRING></EQ></OR></IFNE>) <BREAK>break</BREAK>;</BLOCK>
      }</BLOCK></BLOCK>
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></TARGET></NAME></IFEQ></LOOP>);
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>_returnOffset</STRING></GETPROP>(<NAME>valueL</NAME>, <NAME>valueT</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>absolutize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'position'</STRING>)</CALL> == <STRING>'absolute'</STRING></EQ></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    // Position.prepare(); // To be done manually by Scripty when it needs it.

    <VAR>var <NAME>offsets = <CALL><NAME>element</NAME>.<GETPROP><STRING>positionedOffset</STRING></GETPROP>()</CALL></NAME></VAR>;
    <VAR>var <NAME>top     = <GETELEM><NAME>offsets</NAME>[<NUMBER>1</NUMBER>]</GETELEM></NAME></VAR>;
    <VAR>var <NAME>left    = <GETELEM><NAME>offsets</NAME>[<NUMBER>0</NUMBER>]</GETELEM></NAME></VAR>;
    <VAR>var <NAME>width   = <GETPROP><NAME>element</NAME>.<STRING>clientWidth</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>height  = <GETPROP><NAME>element</NAME>.<STRING>clientHeight</STRING></GETPROP></NAME></VAR>;

    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalLeft</STRING>   = <SUB><NAME>left</NAME> - <CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR>)</CALL></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalTop</STRING>    = <SUB><NAME>top</NAME>  - <CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING></GETPROP> || <NUMBER>0</NUMBER></OR>)</CALL></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalWidth</STRING>  = <GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalHeight</STRING> = <GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING></GETPROP></SETPROP></EXPR_VOID>;

    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> = <STRING>'absolute'</STRING></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING>    = <ADD><NAME>top</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING>   = <ADD><NAME>left</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING>  = <ADD><NAME>width</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING> = <ADD><NAME>height</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>relativize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'position'</STRING>)</CALL> == <STRING>'relative'</STRING></EQ></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    // Position.prepare(); // To be done manually by Scripty when it needs it.

    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> = <STRING>'relative'</STRING></SETPROP></EXPR_VOID>;
    <VAR>var <NAME>top  = <SUB><CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR>)</CALL> - (<OR><GETPROP><NAME>element</NAME>.<STRING>_originalTop</STRING></GETPROP> || <NUMBER>0</NUMBER>)</OR></SUB></NAME></VAR>;
    <VAR>var <NAME>left = <SUB><CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING></GETPROP> || <NUMBER>0</NUMBER></OR>)</CALL> - (<OR><GETPROP><NAME>element</NAME>.<STRING>_originalLeft</STRING></GETPROP> || <NUMBER>0</NUMBER>)</OR></SUB></NAME></VAR>;

    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING>    = <ADD><NAME>top</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING>   = <ADD><NAME>left</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING> = <GETPROP><NAME>element</NAME>.<STRING>_originalHeight</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING>  = <GETPROP><NAME>element</NAME>.<STRING>_originalWidth</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>cumulativeScrollOffset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>scrollTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>scrollLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP></SETNAME></EXPR_VOID>;
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></TARGET></NAME></IFEQ></LOOP>);
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>_returnOffset</STRING></GETPROP>(<NAME>valueL</NAME>, <NAME>valueT</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getOffsetParent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></IFNE>) <RETURN>return <CALL><NAME>$</NAME>(<GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><EQ><NAME>element</NAME> == <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ></IFNE>) <RETURN>return <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>

    <LOOP>while (<TARGET><IFEQ><AND></TARGET>(<SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP>)</SETNAME> &amp;&amp; <NE><NAME>element</NAME> != <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></NE></AND></IFEQ>)
      <TARGET><BLOCK></TARGET>if (<IFNE><NE><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> != <STRING>'static'</STRING></NE></IFNE>)
        <RETURN>return <CALL><NAME>$</NAME>(<NAME>element</NAME>)<GOTO><TARGET></TARGET></CALL></RETURN></GOTO>;</BLOCK></LOOP>

    <RETURN>return <CALL><NAME>$</NAME>(<GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>viewportOffset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>forElement</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;

    <VAR>var <NAME>element = <NAME>forElement</NAME></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;

      // Safari fix
      <BLOCK>if (<IFNE><AND><EQ><GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP> == <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ> &amp;&amp;
        <EQ><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> == <STRING>'absolute'</STRING></EQ></AND></IFNE>) <BREAK>break</BREAK>;</BLOCK>

    }</BLOCK> while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent<TARGET></TARGET></STRING></GETPROP></SETNAME></IFEQ></LOOP>);

    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <NAME>forElement</NAME></SETNAME></EXPR_VOID>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <BLOCK>if (<IFNE><OR>!<NOT><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>Opera</STRING></GETPROP></NOT> || <EQ><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP> == <STRING>'BODY'</STRING></EQ></OR></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME><SUB><NAME>valueT</NAME></BINDNAME> -= <OR><GETPROP><NAME>element</NAME>.<STRING>scrollTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></SUB></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME><SUB><NAME>valueL</NAME></BINDNAME> -= <OR><GETPROP><NAME>element</NAME>.<STRING>scrollLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></SUB></SETNAME></EXPR_VOID>;
      }</BLOCK></BLOCK>
    }</BLOCK> while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode<TARGET></TARGET></STRING></GETPROP></SETNAME></IFEQ></LOOP>);

    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>_returnOffset</STRING></GETPROP>(<NAME>valueL</NAME>, <NAME>valueT</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clonePosition</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>source</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>options = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<OBJECTLIT>{
      <OBJLITNAME>setLeft</OBJLITNAME>:    <TRUE>true</TRUE>,
      <OBJLITNAME>setTop</OBJLITNAME>:     <TRUE>true</TRUE>,
      <OBJLITNAME>setWidth</OBJLITNAME>:   <TRUE>true</TRUE>,
      <OBJLITNAME>setHeight</OBJLITNAME>:  <TRUE>true</TRUE>,
      <OBJLITNAME>offsetTop</OBJLITNAME>:  <NUMBER>0</NUMBER>,
      <OBJLITNAME>offsetLeft</OBJLITNAME>: <NUMBER>0</NUMBER>
    }</OBJECTLIT>, <OR><GETELEM><NAME>arguments</NAME>[<NUMBER>2</NUMBER>]</GETELEM> || <OBJECTLIT>{ }</OBJECTLIT></OR>)</CALL></NAME></VAR>;

    // find page position of source
    <EXPR_VOID><SETNAME><BINDNAME>source</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>source</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>p = <CALL><NAME>source</NAME>.<GETPROP><STRING>viewportOffset</STRING></GETPROP>()</CALL></NAME></VAR>;

    // find coordinate system to use
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>delta = [<ARRAYLIT><NUMBER>0</NUMBER>, <NUMBER>0</NUMBER>]</ARRAYLIT></NAME></VAR>;
    <VAR>var <NAME>parent = <NULL>null</NULL></NAME></VAR>;
    // delta [0,0] will do fine with position: fixed elements,
    // position:absolute needs offsetParent deltas
    <BLOCK>if (<IFNE><EQ><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> == <STRING>'absolute'</STRING></EQ></IFNE>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>parent</BINDNAME> = <CALL><NAME>element</NAME>.<GETPROP><STRING>getOffsetParent</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>delta</BINDNAME> = <CALL><NAME>parent</NAME>.<GETPROP><STRING>viewportOffset</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    }</BLOCK></BLOCK>

    // correct by body offsets (fixes Safari)
    <BLOCK>if (<IFNE><EQ><NAME>parent</NAME> == <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ></IFNE>) <BLOCK><EXPR_VOID><SETELEM_OP>{
      <NAME>delta</NAME>[<NUMBER>0</NUMBER>] -= <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>offsetLeft<EXPR_VOID><SETELEM_OP></STRING></GETPROP></SETELEM_OP></EXPR_VOID>;
      <NAME>delta</NAME>[<NUMBER>1</NUMBER>] -= <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>offsetTop</STRING></GETPROP></SETELEM_OP></EXPR_VOID>;
    }</BLOCK></BLOCK>

    // set position
    <BLOCK>if (<IFNE><GETPROP><NAME>options</NAME>.<STRING>setLeft</STRING></GETPROP></IFNE>)   <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING>  = (<ADD><ADD><SUB><GETELEM><NAME>p</NAME>[<NUMBER>0</NUMBER>]</GETELEM> - <GETELEM><NAME>delta</NAME>[<NUMBER>0</NUMBER>]</GETELEM></SUB> + <GETPROP><NAME>options</NAME>.<STRING>offsetLeft</STRING></GETPROP>)</ADD> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><GETPROP><NAME>options</NAME>.<STRING>setTop</STRING></GETPROP></IFNE>)    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING>   = (<ADD><ADD><SUB><GETELEM><NAME>p</NAME>[<NUMBER>1</NUMBER>]</GETELEM> - <GETELEM><NAME>delta</NAME>[<NUMBER>1</NUMBER>]</GETELEM></SUB> + <GETPROP><NAME>options</NAME>.<STRING>offsetTop</STRING></GETPROP>)</ADD> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><GETPROP><NAME>options</NAME>.<STRING>setWidth</STRING></GETPROP></IFNE>)  <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING> = <ADD><GETPROP><NAME>source</NAME>.<STRING>offsetWidth</STRING></GETPROP> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><GETPROP><NAME>options</NAME>.<STRING>setHeight</STRING></GETPROP></IFNE>) <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING> = <ADD><GETPROP><NAME>source</NAME>.<STRING>offsetHeight</STRING></GETPROP> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<EXPR_RESULT><SETPROP><GETPROP><STRING>identify</STRING></GETPROP>.<STRING>counter</STRING> = <NUMBER>1</NUMBER></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>getElementsBySelector</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>select</STRING></GETPROP>,
  <OBJLITNAME>childElements</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>immediateDescendants</STRING></GETPROP>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>_attributeTranslations</STRING> = <OBJECTLIT>{
  <OBJLITNAME>write</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>names</OBJLITNAME>: <OBJECTLIT>{
      <OBJLITNAME>className</OBJLITNAME>: <STRING>'class'</STRING>,
      <OBJLITNAME>htmlFor</OBJLITNAME>:   <STRING>'for'</STRING>
    }</OBJECTLIT>,
    <OBJLITNAME>values</OBJLITNAME>: <OBJECTLIT>{ }</OBJECTLIT>
  }</OBJECTLIT>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;


<BLOCK>if (<IFNE><OR>!<NOT><GETPROP><NAME>document</NAME>.<STRING>createRange</STRING></GETPROP></NOT> || <GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>Opera</STRING></GETPROP></OR></IFNE>) <BLOCK>{
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>insert</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>insertions</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;

    <BLOCK>if (<IFNE><OR><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>insertions</NAME>)</CALL> || <OR><CALL><NAME>Object</NAME>.<GETPROP><STRING>isNumber</STRING></GETPROP>(<NAME>insertions</NAME>)</CALL> ||
        <OR><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>insertions</NAME>)</CALL> || (<AND><NAME>insertions</NAME> &amp;&amp; (<OR><GETPROP><NAME>insertions</NAME>.<STRING>toElement</STRING></GETPROP> || <GETPROP><NAME>insertions</NAME>.<STRING>toHTML</STRING></GETPROP>)</OR>)</AND></OR></OR></OR></IFNE>)
          <EXPR_VOID><SETNAME><BINDNAME>insertions</BINDNAME> = <OBJECTLIT>{ <OBJLITNAME>bottom</OBJLITNAME>: <NAME>insertions</NAME> }</OBJECTLIT></SETNAME></EXPR_VOID>;</BLOCK>

    <VAR>var <NAME>t = <GETPROP><NAME>Element</NAME>.<STRING>_insertionTranslations</STRING></GETPROP></NAME>, <NAME>content</NAME>, <NAME>position</NAME>, <NAME>pos</NAME>, <NAME>tagName</NAME></VAR>;

    <LOCAL_BLOCK><LOOP>for (<EXPR_VOID><SETNAME><BINDNAME>position</BINDNAME></SETNAME></EXPR_VOID> in <ENUM_INIT_KEYS><NAME>insertions</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME>  = <GETELEM><NAME>insertions</NAME>[<NAME>position</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>position</BINDNAME> = <CALL><NAME>position</NAME>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>pos</BINDNAME>      = <GETELEM><NAME>t</NAME>[<NAME>position</NAME>]</GETELEM></SETNAME></EXPR_VOID>;

      <BLOCK>if (<IFNE><AND><NAME>content</NAME> &amp;&amp; <GETPROP><NAME>content</NAME>.<STRING>toElement</STRING></GETPROP></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>content</NAME>.<GETPROP><STRING>toElement</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>content</NAME>)</CALL></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>pos</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>element</NAME>, <NAME>content</NAME>)</CALL></EXPR_VOID>;
        <CONTINUE>continue</CONTINUE>;
      }</BLOCK></BLOCK>

      <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toHTML</STRING></GETPROP>(<NAME>content</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>tagName</BINDNAME> = ((<CALL><HOOK><OR><EQ><NAME>position</NAME> == <STRING>'before'</STRING></EQ> || <EQ><NAME>position</NAME> == <STRING>'after'</STRING></EQ>)</OR>
        ? <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP> : <NAME>element</NAME></HOOK>).<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;

      <BLOCK>if (<IFNE><GETELEM><NAME>t</NAME>.<GETPROP><STRING>tags</STRING></GETPROP>[<NAME>tagName</NAME>]</GETELEM></IFNE>) <BLOCK>{
        <VAR>var <NAME>fragments = <CALL><NAME>Element</NAME>.<GETPROP><STRING>_getContentFromAnonymousElement</STRING></GETPROP>(<NAME>tagName</NAME>, <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL>)</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><OR><EQ><NAME>position</NAME> == <STRING>'top'</STRING></EQ> || <EQ><NAME>position</NAME> == <STRING>'after'</STRING></EQ></OR></IFNE>) <EXPR_VOID><CALL><NAME>fragments</NAME>.<GETPROP><STRING>reverse</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
        <EXPR_VOID><CALL><NAME>fragments</NAME>.<GETPROP><STRING>each</STRING></GETPROP>(<CALL><NAME>pos</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>.<GETPROP><STRING>curry</STRING></GETPROP>(<NAME>element</NAME>)</CALL>)</CALL></EXPR_VOID>;
      }</BLOCK>
      else <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>insertAdjacentHTML</STRING></GETPROP>(<GETPROP><NAME>pos</NAME>.<STRING>adjacency</STRING></GETPROP>, <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL>)<GOTO></CALL></EXPR_VOID></GOTO>;</BLOCK>

      <EXPR_VOID><CALL><NAME>content</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<NAME>content</NAME></CALL>).<GETPROP><STRING>defer</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>

    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>

<BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>Opera</STRING></GETPROP></IFNE>) <BLOCK>{
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>getStyle</STRING> = <CALL><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>getStyle</STRING></GETPROP>.<GETPROP><STRING>wrap</STRING></GETPROP>(
    <FUNCTION>function(<PARAMETER>proceed</PARAMETER>, <PARAMETER>element</PARAMETER>, <PARAMETER>style</PARAMETER>) <BLOCK>{
      <SWITCH>switch (<NAME>style</NAME>) {
        <CASE>case <STRING>'left'</STRING></CASE>: <CASE>case <STRING>'top'</STRING></CASE>: <CASE>case <STRING>'right'</STRING></CASE>: <CASE>case <STRING>'bottom'</STRING>:
          <BLOCK><BLOCK>if (<IFNE><SHEQ><CALL><NAME>proceed</NAME>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> === <STRING>'static'</STRING></SHEQ></IFNE>) <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK></BLOCK></CASE>
        <CASE>case <STRING>'height'</STRING></CASE>: <CASE>case <STRING>'width'</STRING>:
          // returns '0px' for hidden elements; we want it to return null
          <BLOCK><BLOCK>if (<IFNE><NOT>!<CALL><NAME>Element</NAME>.<GETPROP><STRING>visible</STRING></GETPROP>(<NAME>element</NAME>)</CALL></NOT></IFNE>) <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK>

          // returns the border-box dimensions rather than the content-box
          // dimensions, so we subtract padding and borders from the value
          <VAR>var <NAME>dim = <CALL><NAME>parseInt</NAME>(<CALL><NAME>proceed</NAME>(<NAME>element</NAME>, <NAME>style</NAME>)</CALL>, <NUMBER>10</NUMBER>)</CALL></NAME></VAR>;

          <BLOCK>if (<IFNE><SHNE><NAME>dim</NAME> !== <GETELEM><NAME>element</NAME>[<ADD><STRING>'offset'</STRING> + <CALL><NAME>style</NAME>.<GETPROP><STRING>capitalize</STRING></GETPROP>()</CALL></ADD>]</GETELEM></SHNE></IFNE>)
            <RETURN>return <ADD><NAME>dim</NAME> + <STRING>'px'</STRING></ADD></RETURN>;</BLOCK>

          <VAR>var <NAME>properties</NAME></VAR>;
          <BLOCK>if (<IFNE><SHEQ><NAME>style</NAME> === <STRING>'height'</STRING></SHEQ></IFNE>) <BLOCK>{
            <EXPR_VOID><SETNAME><BINDNAME>properties</BINDNAME> = [<ARRAYLIT><STRING>'border-top-width'</STRING>, <STRING>'padding-top'</STRING>,
             <STRING>'padding-bottom'</STRING>, <STRING>'border-bottom-width'</STRING>]</ARRAYLIT></SETNAME></EXPR_VOID>;
          }</BLOCK>
          else <BLOCK>{
            <EXPR_VOID><SETNAME><BINDNAME>properties</BINDNAME> = [<ARRAYLIT><STRING>'border-left-width'</STRING>, <STRING>'padding-left'</STRING>,
             <STRING>'padding-right'</STRING>, <STRING>'border-right-width'</STRING>]</ARRAYLIT></SETNAME></EXPR_VOID>;
          <GOTO></GOTO>}</BLOCK></BLOCK>
          <RETURN>return <ADD><CALL><NAME>properties</NAME>.<GETPROP><STRING>inject</STRING></GETPROP>(<NAME>dim</NAME>, <FUNCTION>function(<PARAMETER>memo</PARAMETER>, <PARAMETER>property</PARAMETER>) <BLOCK>{
            <VAR>var <NAME>val = <CALL><NAME>proceed</NAME>(<NAME>element</NAME>, <NAME>property</NAME>)</CALL></NAME></VAR>;
            <RETURN>return <HOOK><SHEQ><NAME>val</NAME> === <NULL>null</NULL></SHEQ> ? <NAME>memo</NAME> : <SUB><NAME>memo</NAME> - <CALL><NAME>parseInt</NAME>(<NAME>val</NAME>, <NUMBER>10</NUMBER>)</CALL></SUB></HOOK></RETURN>;</BLOCK>
          }</FUNCTION>)</CALL> + <STRING>'px'</STRING></ADD></RETURN></BLOCK></CASE>;
        <DEFAULT>default: <BLOCK><RETURN>return <CALL><NAME>proceed</NAME>(<NAME>element</NAME>, <NAME>style</NAME>)</CALL></RETURN></BLOCK></DEFAULT>;
      }</SWITCH></BLOCK>
    }</FUNCTION>
  )</CALL></SETPROP></EXPR_RESULT>;

  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>readAttribute</STRING> = <CALL><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>readAttribute</STRING></GETPROP>.<GETPROP><STRING>wrap</STRING></GETPROP>(
    <FUNCTION>function(<PARAMETER>proceed</PARAMETER>, <PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><SHEQ><NAME>attribute</NAME> === <STRING>'title'</STRING></SHEQ></IFNE>) <RETURN>return <GETPROP><NAME>element</NAME>.<STRING>title</STRING></GETPROP></RETURN>;</BLOCK>
      <RETURN>return <CALL><NAME>proceed</NAME>(<NAME>element</NAME>, <NAME>attribute</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>
  )</CALL></SETPROP></EXPR_RESULT>;
}</BLOCK>

else <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP></IFNE>) <BLOCK>{
  <EXPR_RESULT><CALL><CALL><NAME>$w</NAME>(<STRING>'positionedOffset getOffsetParent viewportOffset'</STRING></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>method</PARAMETER>) <BLOCK>{
    <NAME>Element</NAME>.<EXPR_VOID><SETELEM><GETPROP><STRING>Methods</STRING></GETPROP>[<NAME>method</NAME>] = <CALL><NAME>Element</NAME>.<GETELEM><GETPROP><STRING>Methods</STRING></GETPROP>[<NAME>method</NAME></GETELEM>].<GETPROP><STRING>wrap</STRING></GETPROP>(
      <FUNCTION>function(<PARAMETER>proceed</PARAMETER>, <PARAMETER>element</PARAMETER>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
        <VAR>var <NAME>position = <CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'position'</STRING>)</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><NE><NAME>position</NAME> != <STRING>'static'</STRING></NE></IFNE>) <RETURN>return <CALL><NAME>proceed</NAME>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>setStyle</STRING></GETPROP>(<OBJECTLIT>{ <OBJLITNAME>position</OBJLITNAME>: <STRING>'relative'</STRING> }</OBJECTLIT>)</CALL></EXPR_VOID>;
        <VAR>var <NAME>value = <CALL><NAME>proceed</NAME>(<NAME>element</NAME>)</CALL></NAME></VAR>;
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>setStyle</STRING></GETPROP>(<OBJECTLIT>{ <OBJLITNAME>position</OBJLITNAME>: <NAME>position</NAME> }</OBJECTLIT>)</CALL></EXPR_VOID>;
        <RETURN>return <NAME>value</NAME></RETURN>;</BLOCK>
      }</FUNCTION>
    )</CALL></SETELEM></EXPR_VOID>;</BLOCK>
  }</FUNCTION>)</CALL></EXPR_RESULT>;

  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>getStyle</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>style</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>style</BINDNAME> = (<HOOK><OR><EQ><NAME>style</NAME> == <STRING>'float'</STRING></EQ> || <EQ><NAME>style</NAME> == <STRING>'cssFloat'</STRING></EQ>)</OR> ? <STRING>'styleFloat'</STRING> : <CALL><NAME>style</NAME>.<GETPROP><STRING>camelize</STRING></GETPROP>()</CALL></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>value = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>[<NAME>style</NAME>]</GETELEM></NAME></VAR>;
    <BLOCK>if (<IFNE><AND>!<NOT><NAME>value</NAME></NOT> &amp;&amp; <GETPROP><NAME>element</NAME>.<STRING>currentStyle</STRING></GETPROP></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>currentStyle</STRING></GETPROP>[<NAME>style</NAME>]</GETELEM></SETNAME></EXPR_VOID>;</BLOCK>

    <BLOCK>if (<IFNE><EQ><NAME>style</NAME> == <STRING>'opacity'</STRING></EQ></IFNE>) <BLOCK>{
      <BLOCK>if (<IFNE><SETNAME><BINDNAME>value</BINDNAME> = (<CALL><OR><CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'filter'</STRING>)</CALL> || <STRING>''</STRING></OR>).<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/alpha\(opacity=(.*)\)/</REGEXP>)</CALL></SETNAME></IFNE>)
        <BLOCK>if (<IFNE><GETELEM><NAME>value</NAME>[<NUMBER>1</NUMBER>]</GETELEM></IFNE>) <RETURN>return <DIV><CALL><NAME>parseFloat</NAME>(<GETELEM><NAME>value</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL> / <NUMBER>100</NUMBER></DIV></RETURN>;</BLOCK></BLOCK>
      <RETURN>return <NUMBER>1.0</NUMBER></RETURN>;
    }</BLOCK></BLOCK>

    <BLOCK>if (<IFNE><EQ><NAME>value</NAME> == <STRING>'auto'</STRING></EQ></IFNE>) <BLOCK>{
      <BLOCK>if (<IFNE><AND>(<OR><EQ><NAME>style</NAME> == <STRING>'width'</STRING></EQ> || <EQ><NAME>style</NAME> == <STRING>'height'</STRING></EQ>)</OR> &amp;&amp; (<NE><CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'display'</STRING>)</CALL> != <STRING>'none'</STRING>)</NE></AND></IFNE>)
        <RETURN>return <ADD><GETELEM><NAME>element</NAME>[<ADD><STRING>'offset'</STRING> + <CALL><NAME>style</NAME>.<GETPROP><STRING>capitalize</STRING></GETPROP>()</CALL></ADD>]</GETELEM> + <STRING>'px'</STRING></ADD></RETURN>;</BLOCK>
      <RETURN>return <NULL>null</NULL></RETURN>;
    }</BLOCK></BLOCK>
    <RETURN>return <NAME>value</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;

  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>setOpacity</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <FUNCTION>function <FUNCNAME>stripAlpha</FUNCNAME>(<PARAMETER>filter</PARAMETER>)<BLOCK>{
      <RETURN>return <CALL><NAME>filter</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/alpha\([^\)]*\)/gi</REGEXP>,<STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>currentStyle = <GETPROP><NAME>element</NAME>.<STRING>currentStyle</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><OR>(<AND><NAME>currentStyle</NAME> &amp;&amp; !<NOT><GETPROP><NAME>currentStyle</NAME>.<STRING>hasLayout</STRING></GETPROP></NOT>)</AND> ||
      (!<AND><NOT><NAME>currentStyle</NAME></NOT> &amp;&amp; <EQ><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>zoom</STRING></GETPROP> == <STRING>'normal'</STRING></EQ>)</AND></OR></IFNE>)
        <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>zoom</STRING> = <NUMBER>1</NUMBER></SETPROP></EXPR_VOID>;</BLOCK>

    <VAR>var <NAME>filter = <CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'filter'</STRING>)</CALL></NAME>, <NAME>style = <GETPROP><NAME>element</NAME>.<STRING>style</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><OR><EQ><NAME>value</NAME> == <NUMBER>1</NUMBER></EQ> || <SHEQ><NAME>value</NAME> === <STRING>''</STRING></SHEQ></OR></IFNE>) <BLOCK>{
      (<EXPR_VOID><HOOK><SETNAME><BINDNAME>filter</BINDNAME> = <CALL><NAME>stripAlpha</NAME>(<NAME>filter</NAME>)</CALL>)</SETNAME> ?
        <SETPROP><NAME>style</NAME>.<STRING>filter</STRING> = <NAME>filter</NAME></SETPROP> : <CALL><NAME>style</NAME>.<GETPROP><STRING>removeAttribute</STRING></GETPROP>(<STRING>'filter'</STRING>)</CALL></HOOK></EXPR_VOID>;
      <RETURN>return <NAME>element</NAME></RETURN>;
    }</BLOCK> else <BLOCK>if (<IFNE><LT><NAME>value</NAME> &lt; <NUMBER>0.00001</NUMBER></LT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <NUMBER>0<GOTO></NUMBER></SETNAME></EXPR_VOID></GOTO>;</BLOCK></BLOCK>
    <EXPR_VOID><SETPROP><NAME>style</NAME>.<STRING>filter</STRING> = <ADD><ADD><ADD><CALL><NAME>stripAlpha</NAME>(<NAME>filter</NAME>)</CALL> +
      <STRING>'alpha(opacity='</STRING></ADD> + (<MUL><NAME>value</NAME> * <NUMBER>100</NUMBER>)</MUL></ADD> + <STRING>')'</STRING></ADD></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;

  <EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>_attributeTranslations</STRING> = <OBJECTLIT>{
    <OBJLITNAME>read</OBJLITNAME>: <OBJECTLIT>{
      <OBJLITNAME>names</OBJLITNAME>: <OBJECTLIT>{
        <OBJLITNAME>'clas</OBJLITNAME>s': <STRING>'className'</STRING>,
        <OBJLITNAME>'fo</OBJLITNAME>r':   <STRING>'htmlFor'</STRING>
      }</OBJECTLIT>,
      <OBJLITNAME>values</OBJLITNAME>: <OBJECTLIT>{
        <OBJLITNAME>_getAttr</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
          <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>getAttribute</STRING></GETPROP>(<NAME>attribute</NAME>, <NUMBER>2</NUMBER>)</CALL></RETURN>;</BLOCK>
        }</FUNCTION>,
        <OBJLITNAME>_getAttrNode</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
          <VAR>var <NAME>node = <CALL><NAME>element</NAME>.<GETPROP><STRING>getAttributeNode</STRING></GETPROP>(<NAME>attribute</NAME>)</CALL></NAME></VAR>;
          <RETURN>return <HOOK><NAME>node</NAME> ? <GETPROP><NAME>node</NAME>.<STRING>value</STRING></GETPROP> : <STRING>""</STRING></HOOK></RETURN>;</BLOCK>
        }</FUNCTION>,
        <OBJLITNAME>_getEv</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
          <EXPR_VOID><SETNAME><BINDNAME>attribute</BINDNAME> = <CALL><NAME>element</NAME>.<GETPROP><STRING>getAttribute</STRING></GETPROP>(<NAME>attribute</NAME>)</CALL></SETNAME></EXPR_VOID>;
          <RETURN>return <HOOK><NAME>attribute</NAME> ? <CALL><NAME>attribute</NAME>.<CALL><GETPROP><STRING>toString</STRING></GETPROP></CALL>().<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>23</NUMBER>, -<NUMBER>2</NUMBER>)</CALL> : <NULL>null</NULL></HOOK></RETURN>;</BLOCK>
        }</FUNCTION>,
        <OBJLITNAME>_flag</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
          <RETURN>return <HOOK><CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<NAME>attribute</NAME>)</CALL> ? <NAME>attribute</NAME> : <NULL>null</NULL></HOOK></RETURN>;</BLOCK>
        }</FUNCTION>,
        <OBJLITNAME>style</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
          <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<GETPROP><STRING>cssText</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
        }</FUNCTION>,
        <OBJLITNAME>title</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
          <RETURN>return <GETPROP><NAME>element</NAME>.<STRING>title</STRING></GETPROP></RETURN>;</BLOCK>
        }</FUNCTION>
      }</OBJECTLIT>
    }</OBJECTLIT>
  }</OBJECTLIT></SETPROP></EXPR_RESULT>;

  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<STRING>write</STRING> = <OBJECTLIT>{
    <OBJLITNAME>names</OBJLITNAME>: <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>read</STRING></GETPROP>.<STRING>names</STRING></GETPROP>)</CALL>,
    <OBJLITNAME>values</OBJLITNAME>: <OBJECTLIT>{
      <OBJLITNAME>checked</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
        <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>checked</STRING> = !!<NOT><NOT><NAME>value</NAME></NOT></NOT></SETPROP></EXPR_VOID>;</BLOCK>
      }</FUNCTION>,

      <OBJLITNAME>style</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
        <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>cssText</STRING> = <HOOK><NAME>value</NAME> ? <NAME>value</NAME> : <STRING>''</STRING></HOOK></SETPROP></EXPR_VOID>;</BLOCK>
      }</FUNCTION>
    }</OBJECTLIT>
  }</OBJECTLIT></SETPROP></EXPR_RESULT>;

  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<STRING>has</STRING> = <OBJECTLIT>{}</OBJECTLIT></SETPROP></EXPR_RESULT>;

  <EXPR_RESULT><CALL><CALL><NAME>$w</NAME>(<STRING>'colSpan rowSpan vAlign dateTime accessKey tabIndex '</STRING></CALL> +
      'encType maxLength readOnly longDesc').<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>attr</PARAMETER>) <BLOCK>{
    <NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>write</STRING></GETPROP>.<EXPR_VOID><SETELEM><GETPROP><STRING>names</STRING></GETPROP>[<CALL><NAME>attr</NAME>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>] = <NAME>attr</NAME></SETELEM></EXPR_VOID>;
    <NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<EXPR_VOID><SETELEM><GETPROP><STRING>has</STRING></GETPROP>[<CALL><NAME>attr</NAME>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>] = <NAME>attr</NAME></SETELEM></EXPR_VOID>;</BLOCK>
  }</FUNCTION>)</CALL></EXPR_RESULT>;

  (<EXPR_RESULT><CALL><FUNCTION>function(<PARAMETER>v</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>v</NAME>, <OBJECTLIT>{
      <OBJLITNAME>href</OBJLITNAME>:        <GETPROP><NAME>v</NAME>.<STRING>_getAttr</STRING></GETPROP>,
      <OBJLITNAME>src</OBJLITNAME>:         <GETPROP><NAME>v</NAME>.<STRING>_getAttr</STRING></GETPROP>,
      <OBJLITNAME>type</OBJLITNAME>:        <GETPROP><NAME>v</NAME>.<STRING>_getAttr</STRING></GETPROP>,
      <OBJLITNAME>action</OBJLITNAME>:      <GETPROP><NAME>v</NAME>.<STRING>_getAttrNode</STRING></GETPROP>,
      <OBJLITNAME>disabled</OBJLITNAME>:    <GETPROP><NAME>v</NAME>.<STRING>_flag</STRING></GETPROP>,
      <OBJLITNAME>checked</OBJLITNAME>:     <GETPROP><NAME>v</NAME>.<STRING>_flag</STRING></GETPROP>,
      <OBJLITNAME>readonly</OBJLITNAME>:    <GETPROP><NAME>v</NAME>.<STRING>_flag</STRING></GETPROP>,
      <OBJLITNAME>multiple</OBJLITNAME>:    <GETPROP><NAME>v</NAME>.<STRING>_flag</STRING></GETPROP>,
      <OBJLITNAME>onload</OBJLITNAME>:      <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onunload</OBJLITNAME>:    <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onclick</OBJLITNAME>:     <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>ondblclick</OBJLITNAME>:  <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onmousedown</OBJLITNAME>: <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onmouseup</OBJLITNAME>:   <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onmouseover</OBJLITNAME>: <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onmousemove</OBJLITNAME>: <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onmouseout</OBJLITNAME>:  <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onfocus</OBJLITNAME>:     <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onblur</OBJLITNAME>:      <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onkeypress</OBJLITNAME>:  <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onkeydown</OBJLITNAME>:   <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onkeyup</OBJLITNAME>:     <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onsubmit</OBJLITNAME>:    <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onreset</OBJLITNAME>:     <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onselect</OBJLITNAME>:    <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>,
      <OBJLITNAME>onchange</OBJLITNAME>:    <GETPROP><NAME>v</NAME>.<STRING>_getEv</STRING></GETPROP>
    }</OBJECTLIT>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>)(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>read</STRING></GETPROP>.<STRING>values</STRING></GETPROP>)</CALL></EXPR_RESULT>;
}</BLOCK>

else <BLOCK>if (<IFNE><AND><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>Gecko</STRING></GETPROP> &amp;&amp; <CALL><REGEXP>/rv:1\.8\.0/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL></AND></IFNE>) <BLOCK>{
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>setOpacity</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>opacity</STRING> = (<HOOK><EQ><NAME>value</NAME> == <NUMBER>1</NUMBER>)</EQ> ? <NUMBER>0.999999</NUMBER> :
      (<HOOK><SHEQ><NAME>value</NAME> === <STRING>''</STRING>)</SHEQ> ? <STRING>''</STRING> : (<HOOK><LT><NAME>value</NAME> &lt; <NUMBER>0.00001</NUMBER>)</LT> ? <NUMBER>0</NUMBER> : <NAME>value</NAME></HOOK></HOOK></HOOK></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK>

else <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>WebKit</STRING></GETPROP></IFNE>) <BLOCK>{
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>setOpacity</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>opacity</STRING> = (<HOOK><OR><EQ><NAME>value</NAME> == <NUMBER>1</NUMBER></EQ> || <SHEQ><NAME>value</NAME> === <STRING>''</STRING></SHEQ>)</OR> ? <STRING>''</STRING> :
      (<HOOK><LT><NAME>value</NAME> &lt; <NUMBER>0.00001</NUMBER>)</LT> ? <NUMBER>0</NUMBER> : <NAME>value</NAME></HOOK></HOOK></SETPROP></EXPR_VOID>;

    <BLOCK>if (<IFNE><EQ><NAME>value</NAME> == <NUMBER>1</NUMBER></EQ></IFNE>)
      <BLOCK>if(<IFNE><AND><EQ><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP> == <STRING>'IMG'</STRING></EQ> &amp;&amp; <GETPROP><NAME>element</NAME>.<STRING>width</STRING></GETPROP></AND></IFNE>) <BLOCK>{
        <EXPR_VOID><INC><GETPROP><NAME>element</NAME>.<STRING>width</STRING></GETPROP></INC></EXPR_VOID>++; <EXPR_VOID><DEC><GETPROP><NAME>element</NAME>.<STRING>width</STRING></GETPROP></DEC></EXPR_VOID>--;
      }</BLOCK> else <TRY>try <BLOCK>{
        <VAR>var <NAME>n = <CALL><NAME>document</NAME>.<GETPROP><STRING>createTextNode</STRING></GETPROP>(<STRING>' '</STRING>)</CALL></NAME></VAR>;
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>n</NAME>)</CALL></EXPR_VOID>;
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>n</NAME>)</CALL></EXPR_VOID>;
      }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH> <GOTO></GOTO>}</TRY></BLOCK></BLOCK>

    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;

  // Safari returns margins on body which is incorrect if the child is absolutely
  // positioned.  For performance reasons, redefine Element#cumulativeOffset for
  // KHTML/WebKit only.
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>cumulativeOffset</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP> == <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ></IFNE>)
        <BLOCK>if (<IFNE><EQ><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> == <STRING>'absolute'</STRING></EQ></IFNE>) <BREAK>break</BREAK>;</BLOCK></BLOCK>

      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></SETNAME></EXPR_VOID>;
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></TARGET></NAME></IFEQ></LOOP>);

    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>_returnOffset</STRING></GETPROP>(<NAME>valueL</NAME>, <NAME>valueT</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
<GOTO><GOTO><GOTO></GOTO></GOTO></GOTO>}</BLOCK></BLOCK></BLOCK></BLOCK></BLOCK>

<BLOCK>if (<IFNE><OR><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP> || <GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>Opera</STRING></GETPROP></OR></IFNE>) <BLOCK>{
  // IE and Opera are missing .innerHTML support for TABLE-related and SELECT elements
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>update</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;

    <BLOCK>if (<IFNE><AND><NAME>content</NAME> &amp;&amp; <GETPROP><NAME>content</NAME>.<STRING>toElement</STRING></GETPROP></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>content</NAME>.<GETPROP><STRING>toElement</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>content</NAME>)</CALL></IFNE>) <RETURN>return <CALL><NAME>element</NAME>.<CALL><GETPROP><STRING>update</STRING></GETPROP></CALL>().<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>content</NAME>)</CALL></RETURN>;</BLOCK>

    <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toHTML</STRING></GETPROP>(<NAME>content</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>tagName = <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></NAME></VAR>;

    <BLOCK>if (<IFNE><IN><NAME>tagName</NAME> in <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_insertionTranslations</STRING></GETPROP>.<STRING>tags</STRING></GETPROP></IN></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><CALL><NAME>$A</NAME>(<GETPROP><NAME>element</NAME>.<STRING>childNodes</STRING></GETPROP></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>node</PARAMETER>) <BLOCK>{ <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID></BLOCK> }</FUNCTION>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>Element</NAME>.<CALL><GETPROP><STRING>_getContentFromAnonymousElement</STRING></GETPROP>(<NAME>tagName</NAME>, <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></CALL>)
        .<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>node</PARAMETER>) <BLOCK>{ <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID></BLOCK> }</FUNCTION>)</CALL></EXPR_VOID>;
    }</BLOCK>
    else <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>innerHTML</STRING> = <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()<GOTO></CALL></SETPROP></EXPR_VOID></GOTO>;</BLOCK>

    <EXPR_VOID><CALL><NAME>content</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<NAME>content</NAME></CALL>).<GETPROP><STRING>defer</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>

<BLOCK>if (<IFNE><GETPROP><NAME>document</NAME>.<CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING></CALL>).<STRING>outerHTML</STRING></GETPROP></IFNE>) <BLOCK>{
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>replace</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;

    <BLOCK>if (<IFNE><AND><NAME>content</NAME> &amp;&amp; <GETPROP><NAME>content</NAME>.<STRING>toElement</STRING></GETPROP></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>content</NAME>.<GETPROP><STRING>toElement</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isElement</STRING></GETPROP>(<NAME>content</NAME>)</CALL></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>replaceChild</STRING></GETPROP>(<NAME>content</NAME>, <NAME>element</NAME>)</CALL></EXPR_VOID>;
      <RETURN>return <NAME>element</NAME></RETURN>;
    }</BLOCK></BLOCK>

    <EXPR_VOID><SETNAME><BINDNAME>content</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>toHTML</STRING></GETPROP>(<NAME>content</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>parent = <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP></NAME>, <NAME>tagName = <CALL><NAME>parent</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></NAME></VAR>;

    <BLOCK>if (<IFNE><GETELEM><NAME>Element</NAME>.<GETPROP><STRING>_insertionTranslations</STRING></GETPROP>.<GETPROP><STRING>tags</STRING></GETPROP>[<NAME>tagName</NAME>]</GETELEM></IFNE>) <BLOCK>{
      <VAR>var <NAME>nextSibling = <CALL><NAME>element</NAME>.<GETPROP><STRING>next</STRING></GETPROP>()</CALL></NAME></VAR>;
      <VAR>var <NAME>fragments = <CALL><NAME>Element</NAME>.<GETPROP><STRING>_getContentFromAnonymousElement</STRING></GETPROP>(<NAME>tagName</NAME>, <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL>)</CALL></NAME></VAR>;
      <EXPR_VOID><CALL><NAME>parent</NAME>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;
      <BLOCK>if (<IFNE><NAME>nextSibling</NAME></IFNE>)
        <EXPR_VOID><CALL><NAME>fragments</NAME>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>node</PARAMETER>) <BLOCK>{ <EXPR_VOID><CALL><NAME>parent</NAME>.<GETPROP><STRING>insertBefore</STRING></GETPROP>(<NAME>node</NAME>, <NAME>nextSibling</NAME>)</CALL></EXPR_VOID></BLOCK> }</FUNCTION>)</CALL></EXPR_VOID>;
      else
        <EXPR_VOID><CALL><NAME>fragments</NAME>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>node</PARAMETER>) <BLOCK>{ <EXPR_VOID><CALL><NAME>parent</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID></BLOCK> }</FUNCTION>)<GOTO></CALL></EXPR_VOID></GOTO>;</BLOCK>
    }</BLOCK>
    else <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>outerHTML</STRING> = <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()<GOTO></CALL></SETPROP></EXPR_VOID></GOTO>;</BLOCK>

    <EXPR_VOID><CALL><NAME>content</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>.<CALL><GETPROP><STRING>bind</STRING></GETPROP>(<NAME>content</NAME></CALL>).<GETPROP><STRING>defer</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>_returnOffset</STRING> = <FUNCTION>function(<PARAMETER>l</PARAMETER>, <PARAMETER>t</PARAMETER>) <BLOCK>{
  <VAR>var <NAME>result = [<ARRAYLIT><NAME>l</NAME>, <NAME>t</NAME>]</ARRAYLIT></NAME></VAR>;
  <EXPR_VOID><SETPROP><NAME>result</NAME>.<STRING>left</STRING> = <NAME>l</NAME></SETPROP></EXPR_VOID>;
  <EXPR_VOID><SETPROP><NAME>result</NAME>.<STRING>top</STRING> = <NAME>t</NAME></SETPROP></EXPR_VOID>;
  <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>_getContentFromAnonymousElement</STRING> = <FUNCTION>function(<PARAMETER>tagName</PARAMETER>, <PARAMETER>html</PARAMETER>) <BLOCK>{
  <VAR>var <NAME>div = new <NEW><NAME>Element</NAME>(<STRING>'div'</STRING>)</NEW></NAME>, <NAME>t = <GETELEM><NAME>Element</NAME>.<GETPROP><STRING>_insertionTranslations</STRING></GETPROP>.<GETPROP><STRING>tags</STRING></GETPROP>[<NAME>tagName</NAME>]</GETELEM></NAME></VAR>;
  <EXPR_VOID><SETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING> = <ADD><ADD><GETELEM><NAME>t</NAME>[<NUMBER>0</NUMBER>]</GETELEM> + <NAME>html</NAME></ADD> + <GETELEM><NAME>t</NAME>[<NUMBER>1</NUMBER>]</GETELEM></ADD></SETPROP></EXPR_VOID>;
  <EXPR_VOID><CALL><GETELEM><NAME>t</NAME>[<NUMBER>2</NUMBER></GETELEM>].<GETPROP><STRING>times</STRING></GETPROP>(<FUNCTION>function() <BLOCK>{ <EXPR_VOID><SETNAME><BINDNAME>div</BINDNAME> = <GETPROP><NAME>div</NAME>.<STRING>firstChild</STRING></GETPROP></SETNAME></EXPR_VOID></BLOCK> }</FUNCTION>)</CALL></EXPR_VOID>;
  <RETURN>return <CALL><NAME>$A</NAME>(<GETPROP><NAME>div</NAME>.<STRING>childNodes</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>_insertionTranslations</STRING> = <OBJECTLIT>{
  <OBJLITNAME>before</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>adjacency</OBJLITNAME>: <STRING>'beforeBegin'</STRING>,
    <OBJLITNAME>insert</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>node</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>insertBefore</STRING></GETPROP>(<NAME>node</NAME>, <NAME>element</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>initializeRange</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>range</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>range</NAME>.<GETPROP><STRING>setStartBefore</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>,
  <OBJLITNAME>top</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>adjacency</OBJLITNAME>: <STRING>'afterBegin'</STRING>,
    <OBJLITNAME>insert</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>node</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>insertBefore</STRING></GETPROP>(<NAME>node</NAME>, <GETPROP><NAME>element</NAME>.<STRING>firstChild</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>initializeRange</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>range</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>range</NAME>.<GETPROP><STRING>selectNodeContents</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>range</NAME>.<GETPROP><STRING>collapse</STRING></GETPROP>(<TRUE>true</TRUE>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>,
  <OBJLITNAME>bottom</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>adjacency</OBJLITNAME>: <STRING>'beforeEnd'</STRING>,
    <OBJLITNAME>insert</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>node</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>,
  <OBJLITNAME>after</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>adjacency</OBJLITNAME>: <STRING>'afterEnd'</STRING>,
    <OBJLITNAME>insert</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>node</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>insertBefore</STRING></GETPROP>(<NAME>node</NAME>, <GETPROP><NAME>element</NAME>.<STRING>nextSibling</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>initializeRange</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>range</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>range</NAME>.<GETPROP><STRING>setStartAfter</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>,
  <OBJLITNAME>tags</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>TABLE</OBJLITNAME>:  [<ARRAYLIT><STRING>'&lt;table&gt;'</STRING>,                <STRING>'&lt;/table&gt;'</STRING>,                   <NUMBER>1</NUMBER>]</ARRAYLIT>,
    <OBJLITNAME>TBODY</OBJLITNAME>:  [<ARRAYLIT><STRING>'&lt;table&gt;&lt;tbody&gt;'</STRING>,         <STRING>'&lt;/tbody&gt;&lt;/table&gt;'</STRING>,           <NUMBER>2</NUMBER>]</ARRAYLIT>,
    <OBJLITNAME>TR</OBJLITNAME>:     [<ARRAYLIT><STRING>'&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;'</STRING>,     <STRING>'&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</STRING>,      <NUMBER>3</NUMBER>]</ARRAYLIT>,
    <OBJLITNAME>TD</OBJLITNAME>:     [<ARRAYLIT><STRING>'&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;'</STRING>, <STRING>'&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</STRING>, <NUMBER>4</NUMBER>]</ARRAYLIT>,
    <OBJLITNAME>SELECT</OBJLITNAME>: [<ARRAYLIT><STRING>'&lt;select&gt;'</STRING>,               <STRING>'&lt;/select&gt;'</STRING>,                  <NUMBER>1</NUMBER>]</ARRAYLIT>
  }</OBJECTLIT>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

(<EXPR_RESULT><CALL><FUNCTION>function() <BLOCK>{
  <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>bottom</STRING></GETPROP>.<STRING>initializeRange</STRING> = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>top</STRING></GETPROP>.<STRING>initializeRange</STRING></GETPROP></SETPROP></EXPR_VOID>;
  <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>tags</STRING></GETPROP>, <OBJECTLIT>{
    <OBJLITNAME>THEAD</OBJLITNAME>: <GETPROP><THIS>this</THIS>.<GETPROP><STRING>tags</STRING></GETPROP>.<STRING>TBODY</STRING></GETPROP>,
    <OBJLITNAME>TFOOT</OBJLITNAME>: <GETPROP><THIS>this</THIS>.<GETPROP><STRING>tags</STRING></GETPROP>.<STRING>TBODY</STRING></GETPROP>,
    <OBJLITNAME>TH</OBJLITNAME>:    <GETPROP><THIS>this</THIS>.<GETPROP><STRING>tags</STRING></GETPROP>.<STRING>TD</STRING></GETPROP>
  }</OBJECTLIT>)</CALL></EXPR_VOID>;</BLOCK>
}</FUNCTION>).<GETPROP><STRING>call</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>_insertionTranslations</STRING></GETPROP>)</CALL></EXPR_RESULT>;

<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>Simulated</STRING> = <OBJECTLIT>{
  <OBJLITNAME>hasAttribute</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>attribute</BINDNAME> = <OR><GETELEM><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>has</STRING></GETPROP>[<NAME>attribute</NAME>]</GETELEM> || <NAME>attribute</NAME></OR></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>node = <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getAttributeNode</STRING></GETPROP>(<NAME>attribute</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <AND><NAME>node</NAME> &amp;&amp; <GETPROP><NAME>node</NAME>.<STRING>specified</STRING></GETPROP></AND></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>ByTag</STRING> = <OBJECTLIT>{ }</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Element</NAME>, <GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_RESULT>;

<BLOCK>if (<IFNE><AND>!<NOT><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>ElementExtensions</STRING></GETPROP></NOT> &amp;&amp;
    <GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING></CALL></REF_SPECIAL>).__proto__</GET_REF></AND></IFNE>) <BLOCK>{
  <EXPR_RESULT><SETPROP><NAME>window</NAME>.<STRING>HTMLElement</STRING> = <OBJECTLIT>{ }</OBJECTLIT></SETPROP></EXPR_RESULT>;
  <NAME>window</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>HTMLElement</STRING></GETPROP>.<STRING>prototype</STRING> = <GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING></CALL></REF_SPECIAL>).__proto__</GET_REF></SETPROP></EXPR_RESULT>;
  <NAME>Prototype</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>ElementExtensions</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>extend</STRING> = (<CALL><FUNCTION>function() <BLOCK>{
  <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>SpecificElementExtensions</STRING></GETPROP></IFNE>)
    <RETURN>return <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></RETURN>;</BLOCK>

  <VAR>var <NAME>Methods = <OBJECTLIT>{ }</OBJECTLIT></NAME>, <NAME>ByTag = <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>ByTag</STRING></GETPROP></NAME></VAR>;

  <VAR>var <NAME>extend = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><OR>!<NOT><NAME>element</NAME></NOT> || <OR><GETPROP><NAME>element</NAME>.<STRING>_extendedByPrototype</STRING></GETPROP> ||
        <OR><NE><GETPROP><NAME>element</NAME>.<STRING>nodeType</STRING></GETPROP> != <NUMBER>1</NUMBER></NE> || <EQ><NAME>element</NAME> == <NAME>window</NAME></EQ></OR></OR></OR></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>

    <VAR>var <NAME>methods = <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<NAME>Methods</NAME>)</CALL></NAME>,
      <NAME>tagName = <GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP></NAME>, <NAME>property</NAME>, <NAME>value</NAME></VAR>;

    // extend methods for specific tags
    <BLOCK>if (<IFNE><GETELEM><NAME>ByTag</NAME>[<NAME>tagName</NAME>]</GETELEM></IFNE>) <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>methods</NAME>, <GETELEM><NAME>ByTag</NAME>[<NAME>tagName</NAME>]</GETELEM>)</CALL></EXPR_VOID>;</BLOCK>

    <LOCAL_BLOCK><LOOP>for (<EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></EXPR_VOID> in <ENUM_INIT_KEYS><NAME>methods</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <GETELEM><NAME>methods</NAME>[<NAME>property</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><AND><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<NAME>value</NAME>)</CALL> &amp;&amp; !(<NOT><IN><NAME>property</NAME> in <NAME>element</NAME>)</IN></NOT></AND></IFNE>)
        <EXPR_VOID><SETELEM><NAME>element</NAME>[<NAME>property</NAME>] = <CALL><NAME>value</NAME>.<GETPROP><STRING>methodize</STRING></GETPROP>()</CALL></SETELEM></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>

    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_extendedByPrototype</STRING> = <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>

  }</FUNCTION>, <OBJECTLIT>{
    <OBJLITNAME>refresh</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
      // extend methods for all tags (Safari doesn't need this)
      <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>ElementExtensions</STRING></GETPROP></NOT></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Methods</NAME>, <GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_VOID>;
        <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Methods</NAME>, <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>Simulated</STRING></GETPROP>)</CALL></EXPR_VOID>;
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>)</CALL></NAME></VAR>;

  <EXPR_VOID><CALL><NAME>extend</NAME>.<GETPROP><STRING>refresh</STRING></GETPROP>()</CALL></EXPR_VOID>;
  <RETURN>return <NAME>extend</NAME></RETURN>;</BLOCK>
}</FUNCTION>)()</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>hasAttribute</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>hasAttribute</STRING></GETPROP></IFNE>) <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<NAME>attribute</NAME>)</CALL></RETURN>;</BLOCK>
  <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>Simulated</STRING></GETPROP>.<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<NAME>element</NAME>, <NAME>attribute</NAME>)</CALL></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>addMethods</STRING> = <FUNCTION>function(<PARAMETER>methods</PARAMETER>) <BLOCK>{
  <VAR>var <NAME>F = <GETPROP><NAME>Prototype</NAME>.<STRING>BrowserFeatures</STRING></GETPROP></NAME>, <NAME>T = <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>ByTag</STRING></GETPROP></NAME></VAR>;

  <BLOCK>if (<IFNE><NOT>!<NAME>methods</NAME></NOT></IFNE>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Form</NAME>, <GETPROP><NAME>Form</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Form</NAME>.<STRING>Element</STRING></GETPROP>, <GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>ByTag</STRING></GETPROP>, <OBJECTLIT>{
      <OBJLITNAME>"FOR</OBJLITNAME>M":     <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><NAME>Form</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL>,
      <OBJLITNAME>"INPU</OBJLITNAME>T":    <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING></GETPROP>)</CALL>,
      <OBJLITNAME>"SELEC</OBJLITNAME>T":   <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING></GETPROP>)</CALL>,
      <OBJLITNAME>"TEXTARE</OBJLITNAME>A": <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING></GETPROP>)</CALL>
    }</OBJECTLIT>)</CALL></EXPR_VOID>;
  }</BLOCK></BLOCK>

  <BLOCK>if (<IFNE><EQ><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>2</NUMBER></EQ></IFNE>) <BLOCK>{
    <VAR>var <NAME>tagName = <NAME>methods</NAME></NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>methods</BINDNAME> = <GETELEM><NAME>arguments</NAME>[<NUMBER>1</NUMBER>]</GETELEM></SETNAME></EXPR_VOID>;
  }</BLOCK></BLOCK>

  <BLOCK>if (<IFNE><NOT>!<NAME>tagName</NAME></NOT></IFNE>) <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>, <OR><NAME>methods</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR>)</CALL></EXPR_VOID>;
  else <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isArray</STRING></GETPROP>(<NAME>tagName</NAME>)</CALL></IFNE>) <EXPR_VOID><CALL><NAME>tagName</NAME>.<GETPROP><STRING>each</STRING></GETPROP>(<NAME>extend</NAME>)</CALL></EXPR_VOID>;
    else <EXPR_VOID><CALL><NAME>extend</NAME>(<NAME>tagName</NAME>)<GOTO></CALL></EXPR_VOID></GOTO>;</BLOCK>
  <GOTO></GOTO>}</BLOCK></BLOCK>

  <FUNCTION>function <FUNCNAME>extend</FUNCNAME>(<PARAMETER>tagName</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>tagName</BINDNAME> = <CALL><NAME>tagName</NAME>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><NOT>!<GETELEM><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>ByTag</STRING></GETPROP>[<NAME>tagName</NAME>]</GETELEM></NOT></IFNE>)
      <NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<EXPR_VOID><SETELEM><GETPROP><STRING>ByTag</STRING></GETPROP>[<NAME>tagName</NAME>] = <OBJECTLIT>{ }</OBJECTLIT></SETELEM></EXPR_VOID>;</BLOCK>
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETELEM><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>ByTag</STRING></GETPROP>[<NAME>tagName</NAME>]</GETELEM>, <NAME>methods</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>copy</FUNCNAME>(<PARAMETER>methods</PARAMETER>, <PARAMETER>destination</PARAMETER>, <PARAMETER>onlyIfAbsent</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>onlyIfAbsent</BINDNAME> = <OR><NAME>onlyIfAbsent</NAME> || <FALSE>false</FALSE></OR></SETNAME></EXPR_VOID>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>methods</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <VAR>var <NAME>value = <GETELEM><NAME>methods</NAME>[<NAME>property</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<NAME>value</NAME>)</CALL></NOT></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>
      <BLOCK>if (<IFNE><OR>!<NOT><NAME>onlyIfAbsent</NAME></NOT> || !(<NOT><IN><NAME>property</NAME> in <NAME>destination</NAME>)</IN></NOT></OR></IFNE>)
        <EXPR_VOID><SETELEM><NAME>destination</NAME>[<NAME>property</NAME>] = <CALL><NAME>value</NAME>.<GETPROP><STRING>methodize</STRING></GETPROP>()</CALL></SETELEM></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK></BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>findDOMClass</FUNCNAME>(<PARAMETER>tagName</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>klass</NAME></VAR>;
    <VAR>var <NAME>trans = <OBJECTLIT>{
      <OBJLITNAME>"OPTGROU</OBJLITNAME>P": <STRING>"OptGroup"</STRING>, <OBJLITNAME>"TEXTARE</OBJLITNAME>A": <STRING>"TextArea"</STRING>, <OBJLITNAME>"</OBJLITNAME>P": <STRING>"Paragraph"</STRING>,
      <OBJLITNAME>"FIELDSE</OBJLITNAME>T": <STRING>"FieldSet"</STRING>, <OBJLITNAME>"U</OBJLITNAME>L": <STRING>"UList"</STRING>, <OBJLITNAME>"O</OBJLITNAME>L": <STRING>"OList"</STRING>, <OBJLITNAME>"D</OBJLITNAME>L": <STRING>"DList"</STRING>,
      <OBJLITNAME>"DI</OBJLITNAME>R": <STRING>"Directory"</STRING>, <OBJLITNAME>"H</OBJLITNAME>1": <STRING>"Heading"</STRING>, <OBJLITNAME>"H</OBJLITNAME>2": <STRING>"Heading"</STRING>, <OBJLITNAME>"H</OBJLITNAME>3": <STRING>"Heading"</STRING>,
      <OBJLITNAME>"H</OBJLITNAME>4": <STRING>"Heading"</STRING>, <OBJLITNAME>"H</OBJLITNAME>5": <STRING>"Heading"</STRING>, <OBJLITNAME>"H</OBJLITNAME>6": <STRING>"Heading"</STRING>, <OBJLITNAME>"</OBJLITNAME>Q": <STRING>"Quote"</STRING>,
      <OBJLITNAME>"IN</OBJLITNAME>S": <STRING>"Mod"</STRING>, <OBJLITNAME>"DE</OBJLITNAME>L": <STRING>"Mod"</STRING>, <OBJLITNAME>"</OBJLITNAME>A": <STRING>"Anchor"</STRING>, <OBJLITNAME>"IM</OBJLITNAME>G": <STRING>"Image"</STRING>, <OBJLITNAME>"CAPTIO</OBJLITNAME>N":
      <STRING>"TableCaption"</STRING>, <OBJLITNAME>"CO</OBJLITNAME>L": <STRING>"TableCol"</STRING>, <OBJLITNAME>"COLGROU</OBJLITNAME>P": <STRING>"TableCol"</STRING>, <OBJLITNAME>"THEA</OBJLITNAME>D":
      <STRING>"TableSection"</STRING>, <OBJLITNAME>"TFOO</OBJLITNAME>T": <STRING>"TableSection"</STRING>, <OBJLITNAME>"TBOD</OBJLITNAME>Y": <STRING>"TableSection"</STRING>, <OBJLITNAME>"T</OBJLITNAME>R":
      <STRING>"TableRow"</STRING>, <OBJLITNAME>"T</OBJLITNAME>H": <STRING>"TableCell"</STRING>, <OBJLITNAME>"T</OBJLITNAME>D": <STRING>"TableCell"</STRING>, <OBJLITNAME>"FRAMESE</OBJLITNAME>T":
      <STRING>"FrameSet"</STRING>, <OBJLITNAME>"IFRAM</OBJLITNAME>E": <STRING>"IFrame"</STRING>
    }</OBJECTLIT></NAME></VAR>;
    <BLOCK>if (<IFNE><GETELEM><NAME>trans</NAME>[<NAME>tagName</NAME>]</GETELEM></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>klass</BINDNAME> = <ADD><ADD><STRING>'HTML'</STRING> + <GETELEM><NAME>trans</NAME>[<NAME>tagName</NAME>]</GETELEM></ADD> + <STRING>'Element'</STRING></ADD></SETNAME></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><GETELEM><NAME>window</NAME>[<NAME>klass</NAME>]</GETELEM></IFNE>) <RETURN>return <GETELEM><NAME>window</NAME>[<NAME>klass</NAME>]</GETELEM></RETURN>;</BLOCK>
    <EXPR_VOID><SETNAME><BINDNAME>klass</BINDNAME> = <ADD><ADD><STRING>'HTML'</STRING> + <NAME>tagName</NAME></ADD> + <STRING>'Element'</STRING></ADD></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETELEM><NAME>window</NAME>[<NAME>klass</NAME>]</GETELEM></IFNE>) <RETURN>return <GETELEM><NAME>window</NAME>[<NAME>klass</NAME>]</GETELEM></RETURN>;</BLOCK>
    <EXPR_VOID><SETNAME><BINDNAME>klass</BINDNAME> = <ADD><ADD><STRING>'HTML'</STRING> + <CALL><NAME>tagName</NAME>.<GETPROP><STRING>capitalize</STRING></GETPROP>()</CALL></ADD> + <STRING>'Element'</STRING></ADD></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETELEM><NAME>window</NAME>[<NAME>klass</NAME>]</GETELEM></IFNE>) <RETURN>return <GETELEM><NAME>window</NAME>[<NAME>klass</NAME>]</GETELEM></RETURN>;</BLOCK>

    <EXPR_VOID><SETELEM><NAME>window</NAME>[<NAME>klass</NAME>] = <OBJECTLIT>{ }</OBJECTLIT></SETELEM></EXPR_VOID>;
    <EXPR_VOID><SETPROP><GETELEM><NAME>window</NAME>[<NAME>klass</NAME></GETELEM>].<STRING>prototype</STRING> = <GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<NAME>tagName</NAME></CALL></REF_SPECIAL>).__proto__</GET_REF></SETPROP></EXPR_VOID>;
    <RETURN>return <GETELEM><NAME>window</NAME>[<NAME>klass</NAME>]</GETELEM></RETURN>;</BLOCK>
  }</FUNCTION>

  <BLOCK>if (<IFNE><GETPROP><NAME>F</NAME>.<STRING>ElementExtensions</STRING></GETPROP></IFNE>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>copy</NAME>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>, <GETPROP><NAME>HTMLElement</NAME>.<STRING>prototype</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>copy</NAME>(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>Simulated</STRING></GETPROP>, <GETPROP><NAME>HTMLElement</NAME>.<STRING>prototype</STRING></GETPROP>, <TRUE>true</TRUE>)</CALL></EXPR_VOID>;
  }</BLOCK></BLOCK>

  <BLOCK>if (<IFNE><GETPROP><NAME>F</NAME>.<STRING>SpecificElementExtensions</STRING></GETPROP></IFNE>) <BLOCK>{
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>tag</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>ByTag</STRING></GETPROP></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <VAR>var <NAME>klass = <CALL><NAME>findDOMClass</NAME>(<NAME>tag</NAME>)</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>klass</NAME>)</CALL></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>
      <EXPR_VOID><CALL><NAME>copy</NAME>(<GETELEM><NAME>T</NAME>[<NAME>tag</NAME>]</GETELEM>, <GETPROP><NAME>klass</NAME>.<STRING>prototype</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
  }</BLOCK></BLOCK>

  <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Element</NAME>, <GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_VOID>;
  delete <EXPR_VOID><DELPROP><NAME>Element</NAME>.<STRING>ByTag</STRING></DELPROP></EXPR_VOID>;

  <BLOCK>if (<IFNE><GETPROP><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>.<STRING>refresh</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>.<GETPROP><STRING>refresh</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  <EXPR_VOID><SETPROP><NAME>Element</NAME>.<STRING>cache</STRING> = <OBJECTLIT>{ }</OBJECTLIT></SETPROP></EXPR_VOID>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>document</NAME>.<STRING>viewport</STRING> = <OBJECTLIT>{
  <OBJLITNAME>getDimensions</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>dimensions = <OBJECTLIT>{ }</OBJECTLIT></NAME></VAR>;
    <VAR>var <NAME>B = <GETPROP><NAME>Prototype</NAME>.<STRING>Browser</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><CALL><CALL><NAME>$w</NAME>(<STRING>'width height'</STRING></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>d</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>D = <CALL><NAME>d</NAME>.<GETPROP><STRING>capitalize</STRING></GETPROP>()</CALL></NAME></VAR>;
      <EXPR_VOID><SETELEM><NAME>dimensions</NAME>[<NAME>d</NAME>] = (<HOOK><AND><GETPROP><NAME>B</NAME>.<STRING>WebKit</STRING></GETPROP> &amp;&amp; !<NOT><GETPROP><NAME>document</NAME>.<STRING>evaluate</STRING></GETPROP></NOT>)</AND> ? <GETELEM><NAME>self</NAME>[<ADD><STRING>'inner'</STRING> + <NAME>D</NAME></ADD>]</GETELEM> :
        (<HOOK><GETPROP><NAME>B</NAME>.<STRING>Opera</STRING>)</GETPROP> ? <GETELEM><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>[<ADD><STRING>'client'</STRING> + <NAME>D</NAME></ADD>]</GETELEM> : <GETELEM><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>[<ADD><STRING>'client'</STRING> + <NAME>D</NAME></ADD>]</GETELEM></HOOK></HOOK></SETELEM></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>dimensions</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getWidth</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<CALL><GETPROP><STRING>getDimensions</STRING></GETPROP></CALL>().<STRING>width</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getHeight</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<CALL><GETPROP><STRING>getDimensions</STRING></GETPROP></CALL>().<STRING>height</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getScrollOffsets</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>_returnOffset</STRING></GETPROP>(
      <OR><GETPROP><NAME>window</NAME>.<STRING>pageXOffset</STRING></GETPROP> || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP> || <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP></OR></OR>,
      <OR><GETPROP><NAME>window</NAME>.<STRING>pageYOffset</STRING></GETPROP> || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP> || <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP></OR></OR>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;
/* Portions of the Selector class are derived from Jack Slocum’s DomQuery,
 * part of YUI-Ext version 0.40, distributed under the terms of an MIT-style
 * license.  Please see http://www.yui-ext.com/ for more information. */

<VAR>var <NAME>Selector = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>expression</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>expression</STRING> = <CALL><NAME>expression</NAME>.<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>compileMatcher</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>shouldUseXPath</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>XPath</STRING></GETPROP></NOT></IFNE>) <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>

    <VAR>var <NAME>e = <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></NAME></VAR>;

    // Safari 3 chokes on :*-of-type and :empty
    <BLOCK>if (<IFNE><AND><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>WebKit</STRING></GETPROP> &amp;&amp;
     (<OR><CALL><NAME>e</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<STRING>"-of-type"</STRING>)</CALL> || <CALL><NAME>e</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<STRING>":empty"</STRING>)</CALL>)</OR></AND></IFNE>)
      <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>

    // XPath can't do namespaced attributes, nor can it read
    // the "checked" property from DOM nodes
    <BLOCK>if (<IFNE><CALL>(<REGEXP>/(\[[\w-]*?:|:checked)/</REGEXP>).<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP>)</CALL></IFNE>)
      <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>

    <RETURN>return <TRUE>true</TRUE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>compileMatcher</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><CALL><THIS>this</THIS>.<GETPROP><STRING>shouldUseXPath</STRING></GETPROP>()</CALL></IFNE>)
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>compileXPathMatcher</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>

    <VAR>var <NAME>e = <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></NAME>, <NAME>ps = <GETPROP><NAME>Selector</NAME>.<STRING>patterns</STRING></GETPROP></NAME>, <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME>,
        <NAME>c = <GETPROP><NAME>Selector</NAME>.<STRING>criteria</STRING></GETPROP></NAME>, <NAME>le</NAME>, <NAME>p</NAME>, <NAME>m</NAME></VAR>;

    <BLOCK>if (<IFNE><GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>_cache</STRING></GETPROP>[<NAME>e</NAME>]</GETELEM></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>matcher</STRING> = <GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>_cache</STRING></GETPROP>[<NAME>e</NAME>]</GETELEM></SETPROP></EXPR_VOID>;
      <RETURN>return</RETURN>;
    }</BLOCK></BLOCK>

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>matcher</STRING> = [<ARRAYLIT><STRING>"this.matcher = function(root) {"</STRING>,
                    <STRING>"var r = root, h = Selector.handlers, c = false, n;"</STRING>]</ARRAYLIT></SETPROP></EXPR_VOID>;

    <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>e</NAME> &amp;&amp; <AND><NE><NAME>le</NAME> != <NAME>e</NAME></NE> &amp;&amp; (<CALL><REGEXP>/\S/</REGEXP>).<GETPROP><STRING>test</STRING></GETPROP>(<NAME>e</NAME>)</CALL></AND></AND></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>le</BINDNAME> = <NAME>e</NAME></SETNAME></EXPR_VOID>;
      <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>ps</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
        <EXPR_VOID><SETNAME><BINDNAME>p</BINDNAME> = <GETELEM><NAME>ps</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
        <BLOCK>if (<IFNE><SETNAME><BINDNAME>m</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>p</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
          <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETELEM><NAME>c</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL> ? <CALL><GETELEM><NAME>c</NAME>[<NAME>i</NAME></GETELEM>](<NAME>m</NAME>)</CALL> :
    	      new <CALL><NEW><NAME>Template</NAME>(<GETELEM><NAME>c</NAME>[<NAME>i</NAME>]</GETELEM></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></HOOK>)</CALL></EXPR_VOID>;
          <EXPR_VOID><SETNAME><BINDNAME>e</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<GETELEM><NAME>m</NAME>[<NUMBER>0</NUMBER>]</GETELEM>, <STRING>''</STRING>)</CALL></SETNAME></EXPR_VOID>;
          <BREAK>break</BREAK>;
        }</BLOCK></BLOCK>
      <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<STRING>"return h.unique(n);\n}"</STRING>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>eval</NAME>(<CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>'\n'</STRING>)</CALL>)</CALL></EXPR_VOID>;
    <NAME>Selector</NAME>.<EXPR_VOID><SETELEM><GETPROP><STRING>_cache</STRING></GETPROP>[<GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP>] = <GETPROP><THIS>this</THIS>.<STRING>matcher</STRING></GETPROP></SETELEM></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>compileXPathMatcher</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>e = <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></NAME>, <NAME>ps = <GETPROP><NAME>Selector</NAME>.<STRING>patterns</STRING></GETPROP></NAME>,
        <NAME>x = <GETPROP><NAME>Selector</NAME>.<STRING>xpath</STRING></GETPROP></NAME>, <NAME>le</NAME>, <NAME>m</NAME></VAR>;

    <BLOCK>if (<IFNE><GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>_cache</STRING></GETPROP>[<NAME>e</NAME>]</GETELEM></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>xpath</STRING> = <GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>_cache</STRING></GETPROP>[<NAME>e</NAME>]</GETELEM></SETPROP></EXPR_VOID>; <RETURN>return</RETURN>;
    }</BLOCK></BLOCK>

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>matcher</STRING> = [<ARRAYLIT><STRING>'.//*'</STRING>]</ARRAYLIT></SETPROP></EXPR_VOID>;
    <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>e</NAME> &amp;&amp; <AND><NE><NAME>le</NAME> != <NAME>e</NAME></NE> &amp;&amp; (<CALL><REGEXP>/\S/</REGEXP>).<GETPROP><STRING>test</STRING></GETPROP>(<NAME>e</NAME>)</CALL></AND></AND></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>le</BINDNAME> = <NAME>e</NAME></SETNAME></EXPR_VOID>;
      <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>ps</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
        <BLOCK>if (<IFNE><SETNAME><BINDNAME>m</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<GETELEM><NAME>ps</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL></SETNAME></IFNE>) <BLOCK>{
          <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETELEM><NAME>x</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL> ? <CALL><GETELEM><NAME>x</NAME>[<NAME>i</NAME></GETELEM>](<NAME>m</NAME>)</CALL> :
            new <CALL><NEW><NAME>Template</NAME>(<GETELEM><NAME>x</NAME>[<NAME>i</NAME>]</GETELEM></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></HOOK>)</CALL></EXPR_VOID>;
          <EXPR_VOID><SETNAME><BINDNAME>e</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<GETELEM><NAME>m</NAME>[<NUMBER>0</NUMBER>]</GETELEM>, <STRING>''</STRING>)</CALL></SETNAME></EXPR_VOID>;
          <BREAK>break</BREAK>;
        }</BLOCK></BLOCK>
      <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>xpath</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>''</STRING>)</CALL></SETPROP></EXPR_VOID>;
    <NAME>Selector</NAME>.<EXPR_VOID><SETELEM><GETPROP><STRING>_cache</STRING></GETPROP>[<GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP>] = <GETPROP><THIS>this</THIS>.<STRING>xpath</STRING></GETPROP></SETELEM></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>root</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>root</BINDNAME> = <OR><NAME>root</NAME> || <NAME>document</NAME></OR></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>xpath</STRING></GETPROP></IFNE>) <RETURN>return <CALL><NAME>document</NAME>.<GETPROP><STRING>_getElementsByXPath</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>xpath</STRING></GETPROP>, <NAME>root</NAME>)</CALL></RETURN>;</BLOCK>
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>matcher</STRING></GETPROP>(<NAME>root</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>match</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>tokens</STRING> = <ARRAYLIT>[]</ARRAYLIT></SETPROP></EXPR_VOID>;

    <VAR>var <NAME>e = <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></NAME>, <NAME>ps = <GETPROP><NAME>Selector</NAME>.<STRING>patterns</STRING></GETPROP></NAME>, <NAME>as = <GETPROP><NAME>Selector</NAME>.<STRING>assertions</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>le</NAME>, <NAME>p</NAME>, <NAME>m</NAME></VAR>;

    <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>e</NAME> &amp;&amp; <AND><SHNE><NAME>le</NAME> !== <NAME>e</NAME></SHNE> &amp;&amp; (<CALL><REGEXP>/\S/</REGEXP>).<GETPROP><STRING>test</STRING></GETPROP>(<NAME>e</NAME>)</CALL></AND></AND></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>le</BINDNAME> = <NAME>e</NAME></SETNAME></EXPR_VOID>;
      <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>ps</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
        <EXPR_VOID><SETNAME><BINDNAME>p</BINDNAME> = <GETELEM><NAME>ps</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
        <BLOCK>if (<IFNE><SETNAME><BINDNAME>m</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>p</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
          // use the Selector.assertions methods unless the selector
          // is too complex.
          <BLOCK>if (<IFNE><GETELEM><NAME>as</NAME>[<NAME>i</NAME>]</GETELEM></IFNE>) <BLOCK>{
            <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>tokens</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>([<ARRAYLIT><NAME>i</NAME>, <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<NAME>m</NAME>)</CALL>]</ARRAYLIT>)</CALL></EXPR_VOID>;
            <EXPR_VOID><SETNAME><BINDNAME>e</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<GETELEM><NAME>m</NAME>[<NUMBER>0</NUMBER>]</GETELEM>, <STRING>''</STRING>)</CALL></SETNAME></EXPR_VOID>;
          }</BLOCK> else <BLOCK>{
            // reluctantly do a document-wide search
            // and look for a match in the array
            <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>findElements</STRING></GETPROP>(<NAME>document</NAME></CALL>).<GETPROP><STRING>include</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN>;
          <GOTO></GOTO>}</BLOCK></BLOCK>
        }</BLOCK></BLOCK>
      <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
    <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <VAR>var <NAME>match = <TRUE>true</TRUE></NAME>, <NAME>name</NAME>, <NAME>matches</NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>token</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>token</BINDNAME> = <GETELEM><THIS>this</THIS>.<GETPROP><STRING>tokens</STRING></GETPROP>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><COMMA><SETNAME><BINDNAME>name</BINDNAME> = <GETELEM><NAME>token</NAME>[<NUMBER>0</NUMBER>]</GETELEM></SETNAME>, <SETNAME><BINDNAME>matches</BINDNAME> = <GETELEM><NAME>token</NAME>[<NUMBER>1</NUMBER>]</GETELEM></SETNAME></COMMA></EXPR_VOID>;
      <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Selector</NAME>.<GETELEM><GETPROP><STRING>assertions</STRING></GETPROP>[<NAME>name</NAME></GETELEM>](<NAME>element</NAME>, <NAME>matches</NAME>)</CALL></NOT></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>match</BINDNAME> = <FALSE>false</FALSE></SETNAME></EXPR_VOID>; <BREAK>break</BREAK>;
      }</BLOCK></BLOCK>
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <RETURN>return <NAME>match</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toString</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><ADD><STRING>"#&lt;Selector:"</STRING> + <CALL><THIS>this</THIS>.<GETPROP><STRING>expression</STRING></GETPROP>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>"&gt;"</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></NAME></VAR>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Selector</NAME>, <OBJECTLIT>{
  <OBJLITNAME>_cache</OBJLITNAME>: <OBJECTLIT>{ }</OBJECTLIT>,

  <OBJLITNAME>xpath</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>descendant</OBJLITNAME>:   <STRING>"//*"</STRING>,
    <OBJLITNAME>child</OBJLITNAME>:        <STRING>"/*"</STRING>,
    <OBJLITNAME>adjacent</OBJLITNAME>:     <STRING>"/following-sibling::*[1]"</STRING>,
    <OBJLITNAME>laterSibling</OBJLITNAME>: <STRING>'/following-sibling::*'</STRING>,
    <OBJLITNAME>tagName</OBJLITNAME>:      <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>]</GETELEM> == <STRING>'*'</STRING></EQ></IFNE>) <RETURN>return <STRING>''</STRING></RETURN>;</BLOCK>
      <RETURN>return <ADD><ADD><ADD><ADD><STRING>"[local-name()='"</STRING> + <CALL><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER></GETELEM>].<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></ADD> +
             <STRING>"' or local-name()='"</STRING></ADD> + <CALL><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER></GETELEM>].<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></ADD> + <STRING>"']"</STRING></ADD></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>className</OBJLITNAME>:    <STRING>"[contains(concat(' ', @class, ' '), ' #{1} ')]"</STRING>,
    <OBJLITNAME>id</OBJLITNAME>:           <STRING>"[@id='#{1}']"</STRING>,
    <OBJLITNAME>attrPresence</OBJLITNAME>: <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>] = <CALL><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER></GETELEM>].<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></SETELEM></EXPR_VOID>;
      <RETURN>return new <CALL><NEW><NAME>Template</NAME>(<STRING>"[@#{1}]"</STRING></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>attr</OBJLITNAME>: <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>] = <CALL><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER></GETELEM>].<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></SETELEM></EXPR_VOID>;
      <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>3</NUMBER>] = <OR><GETELEM><NAME>m</NAME>[<NUMBER>5</NUMBER>]</GETELEM> || <GETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>]</GETELEM></OR></SETELEM></EXPR_VOID>;
      <RETURN>return new <CALL><NEW><NAME>Template</NAME>(<GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETPROP><STRING>operators</STRING></GETPROP>[<GETELEM><NAME>m</NAME>[<NUMBER>2</NUMBER>]</GETELEM>]</GETELEM></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>pseudo</OBJLITNAME>: <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>h = <GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETPROP><STRING>pseudos</STRING></GETPROP>[<GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>]</GETELEM>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<NAME>h</NAME></NOT></IFNE>) <RETURN>return <STRING>''</STRING></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<NAME>h</NAME>)</CALL></IFNE>) <RETURN>return <CALL><NAME>h</NAME>(<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
      <RETURN>return new <CALL><NEW><NAME>Template</NAME>(<GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETPROP><STRING>pseudos</STRING></GETPROP>[<GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>]</GETELEM>]</GETELEM></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>operators</OBJLITNAME>: <OBJECTLIT>{
      <OBJLITNAME>'</OBJLITNAME>=':  <STRING>"[@#{1}='#{3}']"</STRING>,
      <OBJLITNAME>'!</OBJLITNAME>=': <STRING>"[@#{1}!='#{3}']"</STRING>,
      <OBJLITNAME>'^</OBJLITNAME>=': <STRING>"[starts-with(@#{1}, '#{3}')]"</STRING>,
      <OBJLITNAME>'$</OBJLITNAME>=': <STRING>"[substring(@#{1}, (string-length(@#{1}) - string-length('#{3}') + 1))='#{3}']"</STRING>,
      <OBJLITNAME>'*</OBJLITNAME>=': <STRING>"[contains(@#{1}, '#{3}')]"</STRING>,
      <OBJLITNAME>'~</OBJLITNAME>=': <STRING>"[contains(concat(' ', @#{1}, ' '), ' #{3} ')]"</STRING>,
      <OBJLITNAME>'|</OBJLITNAME>=': <STRING>"[contains(concat('-', @#{1}, '-'), '-#{3}-')]"</STRING>
    }</OBJECTLIT>,
    <OBJLITNAME>pseudos</OBJLITNAME>: <OBJECTLIT>{
      <OBJLITNAME>'first-chil</OBJLITNAME>d': <STRING>'[not(preceding-sibling::*)]'</STRING>,
      <OBJLITNAME>'last-chil</OBJLITNAME>d':  <STRING>'[not(following-sibling::*)]'</STRING>,
      <OBJLITNAME>'only-chil</OBJLITNAME>d':  <STRING>'[not(preceding-sibling::* or following-sibling::*)]'</STRING>,
      <OBJLITNAME>'empt</OBJLITNAME>y':       <STRING>"[count(*) = 0 and (count(text()) = 0 or translate(text(), ' \t\r\n', '') = '')]"</STRING>,
      <OBJLITNAME>'checke</OBJLITNAME>d':     <STRING>"[@checked]"</STRING>,
      <OBJLITNAME>'disable</OBJLITNAME>d':    <STRING>"[@disabled]"</STRING>,
      <OBJLITNAME>'enable</OBJLITNAME>d':     <STRING>"[not(@disabled)]"</STRING>,
      <OBJLITNAME>'no</OBJLITNAME>t': <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <VAR>var <NAME>e = <GETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>]</GETELEM></NAME>, <NAME>p = <GETPROP><NAME>Selector</NAME>.<STRING>patterns</STRING></GETPROP></NAME>,
            <NAME>x = <GETPROP><NAME>Selector</NAME>.<STRING>xpath</STRING></GETPROP></NAME>, <NAME>le</NAME>, <NAME>v</NAME></VAR>;

        <VAR>var <NAME>exclusion = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
        <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>e</NAME> &amp;&amp; <AND><NE><NAME>le</NAME> != <NAME>e</NAME></NE> &amp;&amp; (<CALL><REGEXP>/\S/</REGEXP>).<GETPROP><STRING>test</STRING></GETPROP>(<NAME>e</NAME>)</CALL></AND></AND></IFEQ>) <TARGET><BLOCK></TARGET>{
          <EXPR_VOID><SETNAME><BINDNAME>le</BINDNAME> = <NAME>e</NAME></SETNAME></EXPR_VOID>;
          <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>p</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
            <BLOCK>if (<IFNE><SETNAME><BINDNAME>m</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<GETELEM><NAME>p</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL></SETNAME></IFNE>) <BLOCK>{
              <EXPR_VOID><SETNAME><BINDNAME>v</BINDNAME> = <HOOK><CALL><NAME>Object</NAME>.<GETPROP><STRING>isFunction</STRING></GETPROP>(<GETELEM><NAME>x</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL> ? <CALL><GETELEM><NAME>x</NAME>[<NAME>i</NAME></GETELEM>](<NAME>m</NAME>)</CALL> : new <CALL><NEW><NAME>Template</NAME>(<GETELEM><NAME>x</NAME>[<NAME>i</NAME>]</GETELEM></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></HOOK></SETNAME></EXPR_VOID>;
              <EXPR_VOID><CALL><NAME>exclusion</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><STRING>"("</STRING> + <CALL><NAME>v</NAME>.<GETPROP><STRING>substring</STRING></GETPROP>(<NUMBER>1</NUMBER>, <SUB><GETPROP><NAME>v</NAME>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB>)</CALL></ADD> + <STRING>")"</STRING></ADD>)</CALL></EXPR_VOID>;
              <EXPR_VOID><SETNAME><BINDNAME>e</BINDNAME> = <CALL><NAME>e</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<GETELEM><NAME>m</NAME>[<NUMBER>0</NUMBER>]</GETELEM>, <STRING>''</STRING>)</CALL></SETNAME></EXPR_VOID>;
              <BREAK>break</BREAK>;
            }</BLOCK></BLOCK>
          <GOTO><TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
        <GOTO><TARGET></TARGET></GOTO>}</BLOCK></LOOP>
        <RETURN>return <ADD><ADD><STRING>"[not("</STRING> + <CALL><NAME>exclusion</NAME>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>" and "</STRING>)</CALL></ADD> + <STRING>")]"</STRING></ADD></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>'nth-chil</OBJLITNAME>d':      <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<STRING>"(count(./preceding-sibling::*) + 1) "</STRING>, <NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>'nth-last-chil</OBJLITNAME>d': <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<STRING>"(count(./following-sibling::*) + 1) "</STRING>, <NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>'nth-of-typ</OBJLITNAME>e':    <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<STRING>"position() "</STRING>, <NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>'nth-last-of-typ</OBJLITNAME>e': <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<STRING>"(last() + 1 - position()) "</STRING>, <NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>'first-of-typ</OBJLITNAME>e':  <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>] = <STRING>"1"</STRING></SETELEM></EXPR_VOID>; <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETELEM><GETPROP><STRING>pseudos</STRING></GETPROP>[<STRING>'nth-of-type'</STRING></GETELEM>](<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>'last-of-typ</OBJLITNAME>e':   <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>] = <STRING>"1"</STRING></SETELEM></EXPR_VOID>; <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<GETELEM><GETPROP><STRING>pseudos</STRING></GETPROP>[<STRING>'nth-last-of-type'</STRING></GETELEM>](<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>'only-of-typ</OBJLITNAME>e':   <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
        <VAR>var <NAME>p = <GETPROP><NAME>Selector</NAME>.<GETPROP><STRING>xpath</STRING></GETPROP>.<STRING>pseudos</STRING></GETPROP></NAME></VAR>; <RETURN>return <ADD><CALL><GETELEM><NAME>p</NAME>[<STRING>'first-of-type'</STRING></GETELEM>](<NAME>m</NAME>)</CALL> + <CALL><GETELEM><NAME>p</NAME>[<STRING>'last-of-type'</STRING></GETELEM>](<NAME>m</NAME>)</CALL></ADD></RETURN>;</BLOCK>
      }</FUNCTION>,
      <OBJLITNAME>nth</OBJLITNAME>: <FUNCTION>function(<PARAMETER>fragment</PARAMETER>, <PARAMETER>m</PARAMETER>) <BLOCK>{
        <VAR>var <NAME>mm</NAME>, <NAME>formula = <GETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>]</GETELEM></NAME>, <NAME>predicate</NAME></VAR>;
        <BLOCK>if (<IFNE><EQ><NAME>formula</NAME> == <STRING>'even'</STRING></EQ></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>formula</BINDNAME> = <STRING>'2n+0'</STRING></SETNAME></EXPR_VOID>;</BLOCK>
        <BLOCK>if (<IFNE><EQ><NAME>formula</NAME> == <STRING>'odd'</STRING></EQ></IFNE>)  <EXPR_VOID><SETNAME><BINDNAME>formula</BINDNAME> = <STRING>'2n+1'</STRING></SETNAME></EXPR_VOID>;</BLOCK>
        <BLOCK>if (<IFNE><SETNAME><BINDNAME>mm</BINDNAME> = <CALL><NAME>formula</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^(\d+)$/</REGEXP>)</CALL></SETNAME></IFNE>) // digit only
          <RETURN>return <ADD><ADD><ADD><ADD><STRING>'['</STRING> + <NAME>fragment</NAME></ADD> + <STRING>"= "</STRING></ADD> + <GETELEM><NAME>mm</NAME>[<NUMBER>1</NUMBER>]</GETELEM></ADD> + <STRING>']'</STRING></ADD></RETURN>;</BLOCK>
        <BLOCK>if (<IFNE><SETNAME><BINDNAME>mm</BINDNAME> = <CALL><NAME>formula</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^(-?\d*)?n(([+-])(\d+))?/</REGEXP>)</CALL></SETNAME></IFNE>) <BLOCK>{ // an+b
          <BLOCK>if (<IFNE><EQ><GETELEM><NAME>mm</NAME>[<NUMBER>1</NUMBER>]</GETELEM> == <STRING>"-"</STRING></EQ></IFNE>) <EXPR_VOID><SETELEM><NAME>mm</NAME>[<NUMBER>1</NUMBER>] = -<NUMBER>1</NUMBER></SETELEM></EXPR_VOID>;</BLOCK>
          <VAR>var <NAME>a = <HOOK><GETELEM><NAME>mm</NAME>[<NUMBER>1</NUMBER>]</GETELEM> ? <CALL><NAME>Number</NAME>(<GETELEM><NAME>mm</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL> : <NUMBER>1</NUMBER></HOOK></NAME></VAR>;
          <VAR>var <NAME>b = <HOOK><GETELEM><NAME>mm</NAME>[<NUMBER>2</NUMBER>]</GETELEM> ? <CALL><NAME>Number</NAME>(<GETELEM><NAME>mm</NAME>[<NUMBER>2</NUMBER>]</GETELEM>)</CALL> : <NUMBER>0</NUMBER></HOOK></NAME></VAR>;
          <EXPR_VOID><SETNAME><BINDNAME>predicate</BINDNAME> = <STRING>"[((#{fragment} - #{b}) mod #{a} = 0) and "</STRING></SETNAME></EXPR_VOID> +
          "((#{fragment} - #{b}) div #{a} &gt;= 0)]";
          <RETURN>return new <CALL><NEW><NAME>Template</NAME>(<NAME>predicate</NAME></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<OBJECTLIT>{
            <OBJLITNAME>fragment</OBJLITNAME>: <NAME>fragment</NAME>, <OBJLITNAME>a</OBJLITNAME>: <NAME>a</NAME>, <OBJLITNAME>b</OBJLITNAME>: <NAME>b</NAME> }</OBJECTLIT>)</CALL></RETURN>;
        }</BLOCK></BLOCK></BLOCK>
      }</FUNCTION>
    }</OBJECTLIT>
  }</OBJECTLIT>,

  <OBJLITNAME>criteria</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>tagName</OBJLITNAME>:      <STRING>'n = h.tagName(n, r, "#{1}", c);   c = false;'</STRING>,
    <OBJLITNAME>className</OBJLITNAME>:    <STRING>'n = h.className(n, r, "#{1}", c); c = false;'</STRING>,
    <OBJLITNAME>id</OBJLITNAME>:           <STRING>'n = h.id(n, r, "#{1}", c);        c = false;'</STRING>,
    <OBJLITNAME>attrPresence</OBJLITNAME>: <STRING>'n = h.attrPresence(n, r, "#{1}"); c = false;'</STRING>,
    <OBJLITNAME>attr</OBJLITNAME>: <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>3</NUMBER>] = (<OR><GETELEM><NAME>m</NAME>[<NUMBER>5</NUMBER>]</GETELEM> || <GETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>]</GETELEM>)</OR></SETELEM></EXPR_VOID>;
      <RETURN>return new <CALL><NEW><NAME>Template</NAME>(<STRING>'n = h.attr(n, r, "#{1}", "#{3}", "#{2}"); c = false;'</STRING></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>pseudo</OBJLITNAME>: <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><GETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>]</GETELEM></IFNE>) <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER>] = <CALL><GETELEM><NAME>m</NAME>[<NUMBER>6</NUMBER></GETELEM>].<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/"/g</REGEXP>, <STRING>'\\"'</STRING>)</CALL></SETELEM></EXPR_VOID>;</BLOCK>
      <RETURN>return new <CALL><NEW><NAME>Template</NAME>(<STRING>'n = h.pseudo(n, "#{1}", "#{6}", r, c); c = false;'</STRING></NEW>).<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>m</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>descendant</OBJLITNAME>:   <STRING>'c = "descendant";'</STRING>,
    <OBJLITNAME>child</OBJLITNAME>:        <STRING>'c = "child";'</STRING>,
    <OBJLITNAME>adjacent</OBJLITNAME>:     <STRING>'c = "adjacent";'</STRING>,
    <OBJLITNAME>laterSibling</OBJLITNAME>: <STRING>'c = "laterSibling";'</STRING>
  }</OBJECTLIT>,

  <OBJLITNAME>patterns</OBJLITNAME>: <OBJECTLIT>{
    // combinators must be listed first
    // (and descendant needs to be last combinator)
    <OBJLITNAME>laterSibling</OBJLITNAME>: <REGEXP>/^\s*~\s*/</REGEXP>,
    <OBJLITNAME>child</OBJLITNAME>:        <REGEXP>/^\s*&gt;\s*/</REGEXP>,
    <OBJLITNAME>adjacent</OBJLITNAME>:     <REGEXP>/^\s*\+\s*/</REGEXP>,
    <OBJLITNAME>descendant</OBJLITNAME>:   <REGEXP>/^\s/</REGEXP>,

    // selectors follow
    <OBJLITNAME>tagName</OBJLITNAME>:      <REGEXP>/^\s*(\*|[\w\-]+)(\b|$)?/</REGEXP>,
    <OBJLITNAME>id</OBJLITNAME>:           <REGEXP>/^#([\w\-\*]+)(\b|$)/</REGEXP>,
    <OBJLITNAME>className</OBJLITNAME>:    <REGEXP>/^\.([\w\-\*]+)(\b|$)/</REGEXP>,
    <OBJLITNAME>pseudo</OBJLITNAME>:       <REGEXP>/^:((first|last|nth|nth-last|only)(-child|-of-type)|empty|checked|(en|dis)abled|not)(\((.*?)\))?(\b|$|(?=\s)|(?=:))/</REGEXP>,
    <OBJLITNAME>attrPresence</OBJLITNAME>: <REGEXP>/^\[([\w]+)\]/</REGEXP>,
    <OBJLITNAME>attr</OBJLITNAME>:         <REGEXP>/\[((?:[\w-]*:)?[\w-]+)\s*(?:([!^$*~|]?=)\s*((['"])([^\4]*?)\4|([^'"][^\]]*?)))?\]/</REGEXP>
  }</OBJECTLIT>,

  // for Selector.match and Element#match
  <OBJLITNAME>assertions</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>tagName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>matches</PARAMETER>) <BLOCK>{
      <RETURN>return <EQ><CALL><GETELEM><NAME>matches</NAME>[<NUMBER>1</NUMBER></GETELEM>].<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> == <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></EQ></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>className</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>matches</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>hasClassName</STRING></GETPROP>(<NAME>element</NAME>, <GETELEM><NAME>matches</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>id</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>matches</PARAMETER>) <BLOCK>{
      <RETURN>return <SHEQ><GETPROP><NAME>element</NAME>.<STRING>id</STRING></GETPROP> === <GETELEM><NAME>matches</NAME>[<NUMBER>1</NUMBER>]</GETELEM></SHEQ></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>attrPresence</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>matches</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<NAME>element</NAME>, <GETELEM><NAME>matches</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>attr</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>matches</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>nodeValue = <CALL><NAME>Element</NAME>.<GETPROP><STRING>readAttribute</STRING></GETPROP>(<NAME>element</NAME>, <GETELEM><NAME>matches</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL></NAME></VAR>;
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETELEM><GETPROP><STRING>operators</STRING></GETPROP>[<GETELEM><NAME>matches</NAME>[<NUMBER>2</NUMBER>]</GETELEM></GETELEM>](<NAME>nodeValue</NAME>, <GETELEM><NAME>matches</NAME>[<NUMBER>3</NUMBER>]</GETELEM>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>,

  <OBJLITNAME>handlers</OBJLITNAME>: <OBJECTLIT>{
    // UTILITY FUNCTIONS
    // joins two collections
    <OBJLITNAME>concat</OBJLITNAME>: <FUNCTION>function(<PARAMETER>a</PARAMETER>, <PARAMETER>b</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>b</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><EXPR_VOID><CALL><NAME></TARGET>a</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
      <RETURN>return <NAME>a</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    // marks an array of nodes for counting
    <OBJLITNAME>mark</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><EXPR_VOID><SETPROP><NAME></TARGET>node</NAME>.<STRING>_counted</STRING> = <TRUE>true<GOTO><TARGET><TARGET></TARGET></TARGET></TRUE></SETPROP></EXPR_VOID></GOTO></LOOP>;
      <RETURN>return <NAME>nodes</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>unmark</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><EXPR_VOID><SETPROP><NAME></TARGET>node</NAME>.<STRING>_counted</STRING> = <NAME>undefined<GOTO><TARGET><TARGET></TARGET></TARGET></NAME></SETPROP></EXPR_VOID></GOTO></LOOP>;
      <RETURN>return <NAME>nodes</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    // mark each child node with its position (for nth calls)
    // "ofType" flag indicates whether we're indexing for nth-of-type
    // rather than nth-child
    <OBJLITNAME>index</OBJLITNAME>: <FUNCTION>function(<PARAMETER>parentNode</PARAMETER>, <PARAMETER>reverse</PARAMETER>, <PARAMETER>ofType</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>parentNode</NAME>.<STRING>_counted</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
      <BLOCK>if (<IFNE><NAME>reverse</NAME></IFNE>) <BLOCK>{
        <LOOP>for <VAR>(var <NAME>nodes = <GETPROP><NAME>parentNode</NAME>.<STRING>childNodes</STRING></GETPROP></NAME>, <NAME>i = <SUB><GETPROP><NAME>nodes</NAME>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB></NAME>, <NAME>j = <NUMBER>1</NUMBER></NAME></VAR>; <TARGET><IFEQ><GE><NAME></TARGET>i</NAME> &gt;= <NUMBER>0</NUMBER></GE></IFEQ>; <EXPR_VOID><DEC><NAME>i</NAME></DEC></EXPR_VOID>--) <TARGET><BLOCK></TARGET>{
          <VAR>var <NAME>node = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></NAME></VAR>;
          <BLOCK>if (<IFNE><AND><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ> &amp;&amp; (!<OR><NOT><NAME>ofType</NAME></NOT> || <GETPROP><NAME>node</NAME>.<STRING>_counted</STRING></GETPROP>)</OR></AND></IFNE>) <EXPR_VOID><SETPROP><NAME>node</NAME>.<STRING>nodeIndex</STRING> = <INC><NAME>j</NAME></INC></SETPROP></EXPR_VOID>++;</BLOCK>
        <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      }</BLOCK> else <BLOCK>{
        <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>j = <NUMBER>1</NUMBER></NAME>, <NAME>nodes = <GETPROP><NAME>parentNode</NAME>.<STRING>childNodes</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
          <TARGET><BLOCK></TARGET>if (<IFNE><AND><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ> &amp;&amp; (!<OR><NOT><NAME>ofType</NAME></NOT> || <GETPROP><NAME>node</NAME>.<STRING>_counted</STRING></GETPROP>)</OR></AND></IFNE>) <EXPR_VOID><SETPROP><NAME>node</NAME>.<STRING>nodeIndex</STRING> = <INC><NAME>j</NAME></INC></SETPROP></EXPR_VOID>++<GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>;</BLOCK></LOOP>
      <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>,

    // filters out duplicates and extends all nodes
    <OBJLITNAME>unique</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ><GETPROP><NAME>nodes</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>0</NUMBER></EQ></IFNE>) <RETURN>return <NAME>nodes</NAME></RETURN>;</BLOCK>
      <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>n</NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>l = <GETPROP><NAME>nodes</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>l</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><BLOCK></TARGET>if (<IFNE><NOT>!(<GETPROP><SETNAME><BINDNAME>n</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME>).<STRING>_counted</STRING></GETPROP></NOT></IFNE>) <BLOCK>{
          <EXPR_VOID><SETPROP><NAME>n</NAME>.<STRING>_counted</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
          <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>n</NAME>)</CALL>)</CALL></EXPR_VOID>;
        <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></BLOCK></LOOP>
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>unmark</STRING></GETPROP>(<NAME>results</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    // COMBINATOR FUNCTIONS
    <OBJLITNAME>descendant</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><EXPR_VOID><CALL><NAME></TARGET>h</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<NAME>results</NAME>, <CALL><NAME>node</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'*'</STRING>)</CALL>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>child</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <LOOP>for <VAR>(var <NAME>j = <NUMBER>0</NUMBER></NAME>, <NAME>child</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>child</BINDNAME> = <GETELEM><NAME>node</NAME>.<GETPROP><STRING>childNodes</STRING></GETPROP>[<NAME>j</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>j</NAME></INC></EXPR_VOID>++)
          <TARGET><BLOCK></TARGET>if (<IFNE><AND><EQ><GETPROP><NAME>child</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ> &amp;&amp; <NE><GETPROP><NAME>child</NAME>.<STRING>tagName</STRING></GETPROP> != <STRING>'!'</STRING></NE></AND></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>child</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>adjacent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <VAR>var <NAME>next = <CALL><THIS>this</THIS>.<GETPROP><STRING>nextElementSibling</STRING></GETPROP>(<NAME>node</NAME>)</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><NAME>next</NAME></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>next</NAME>)</CALL></EXPR_VOID>;</BLOCK>
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>laterSibling</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><EXPR_VOID><CALL><NAME></TARGET>h</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<NAME>results</NAME>, <CALL><NAME>Element</NAME>.<GETPROP><STRING>nextSiblings</STRING></GETPROP>(<NAME>node</NAME>)</CALL>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>nextElementSibling</OBJLITNAME>: <FUNCTION>function(<PARAMETER>node</PARAMETER>) <BLOCK>{
      <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETPROP><NAME>node</NAME>.<STRING>nextSibling</STRING></GETPROP></SETNAME></IFEQ>)
	      <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <NAME>node<GOTO><TARGET></TARGET></NAME></RETURN></GOTO>;</BLOCK></LOOP>
      <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>previousElementSibling</OBJLITNAME>: <FUNCTION>function(<PARAMETER>node</PARAMETER>) <BLOCK>{
      <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETPROP><NAME>node</NAME>.<STRING>previousSibling</STRING></GETPROP></SETNAME></IFEQ>)
        <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <NAME>node<GOTO><TARGET></TARGET></NAME></RETURN></GOTO>;</BLOCK></LOOP>
      <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK>
    }</FUNCTION>,

    // TOKEN FUNCTIONS
    <OBJLITNAME>tagName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>tagName</PARAMETER>, <PARAMETER>combinator</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>tagName</BINDNAME> = <CALL><NAME>tagName</NAME>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
      <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
      <BLOCK>if (<IFNE><NAME>nodes</NAME></IFNE>) <BLOCK>{
        <BLOCK>if (<IFNE><NAME>combinator</NAME></IFNE>) <BLOCK>{
          // fastlane for ordinary descendant combinators
          <BLOCK>if (<IFNE><EQ><NAME>combinator</NAME> == <STRING>"descendant"</STRING></EQ></IFNE>) <BLOCK>{
            <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
              <TARGET><EXPR_VOID><CALL><NAME></TARGET>h</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<NAME>results</NAME>, <CALL><NAME>node</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<NAME>tagName</NAME>)</CALL>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO></LOOP>;
            <RETURN>return <NAME>results</NAME></RETURN>;
          }</BLOCK> else <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><GETELEM><THIS>this</THIS>[<NAME>combinator</NAME></GETELEM>](<NAME>nodes</NAME>)<GOTO></CALL></SETNAME></EXPR_VOID></GOTO>;</BLOCK>
          <BLOCK>if (<IFNE><EQ><NAME>tagName</NAME> == <STRING>"*"</STRING></EQ></IFNE>) <RETURN>return <NAME>nodes</NAME></RETURN>;</BLOCK>
        }</BLOCK></BLOCK>
        <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
          <TARGET><BLOCK></TARGET>if (<IFNE><EQ><CALL><NAME>node</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> == <NAME>tagName</NAME></EQ></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
        <RETURN>return <NAME>results</NAME></RETURN>;
      }</BLOCK> else <RETURN>return <CALL><NAME>root</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<NAME>tagName</NAME>)<GOTO></CALL></RETURN></GOTO>;</BLOCK></BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>id</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>id</PARAMETER>, <PARAMETER>combinator</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>targetNode = <CALL><NAME>$</NAME>(<NAME>id</NAME>)</CALL></NAME>, <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<NAME>targetNode</NAME></NOT></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><AND>!<NOT><NAME>nodes</NAME></NOT> &amp;&amp; <EQ><NAME>root</NAME> == <NAME>document</NAME></EQ></AND></IFNE>) <RETURN>return [<ARRAYLIT><NAME>targetNode</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><NAME>nodes</NAME></IFNE>) <BLOCK>{
        <BLOCK>if (<IFNE><NAME>combinator</NAME></IFNE>) <BLOCK>{
          <BLOCK>if (<IFNE><EQ><NAME>combinator</NAME> == <STRING>'child'</STRING></EQ></IFNE>) <BLOCK>{
            <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
              <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETPROP><NAME>targetNode</NAME>.<STRING>parentNode</STRING></GETPROP> == <NAME>node</NAME></EQ></IFNE>) <RETURN>return [<ARRAYLIT><NAME>targetNode</NAME>]<GOTO><TARGET><TARGET></TARGET></TARGET></ARRAYLIT></RETURN></GOTO>;</BLOCK></LOOP>
          }</BLOCK> else <BLOCK>if (<IFNE><EQ><NAME>combinator</NAME> == <STRING>'descendant'</STRING></EQ></IFNE>) <BLOCK>{
            <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
              <TARGET><BLOCK></TARGET>if (<IFNE><CALL><NAME>Element</NAME>.<GETPROP><STRING>descendantOf</STRING></GETPROP>(<NAME>targetNode</NAME>, <NAME>node</NAME>)</CALL></IFNE>) <RETURN>return [<ARRAYLIT><NAME>targetNode</NAME>]<GOTO><TARGET><TARGET></TARGET></TARGET></ARRAYLIT></RETURN></GOTO>;</BLOCK></LOOP>
          }</BLOCK> else <BLOCK>if (<IFNE><EQ><NAME>combinator</NAME> == <STRING>'adjacent'</STRING></EQ></IFNE>) <BLOCK>{
            <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
              <TARGET><BLOCK></TARGET>if (<IFNE><EQ><CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>previousElementSibling</STRING></GETPROP>(<NAME>targetNode</NAME>)</CALL> == <NAME>node</NAME></EQ></IFNE>)
                <RETURN>return [<ARRAYLIT><NAME>targetNode</NAME>]<GOTO><TARGET><TARGET></TARGET></TARGET></ARRAYLIT></RETURN></GOTO>;</BLOCK></LOOP>
          }</BLOCK> else <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><GETELEM><NAME>h</NAME>[<NAME>combinator</NAME></GETELEM>](<NAME>nodes</NAME>)<GOTO><GOTO><GOTO></CALL></SETNAME></EXPR_VOID></GOTO></GOTO></GOTO>;</BLOCK></BLOCK></BLOCK>
        }</BLOCK></BLOCK>
        <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
          <TARGET><BLOCK></TARGET>if (<IFNE><EQ><NAME>node</NAME> == <NAME>targetNode</NAME></EQ></IFNE>) <RETURN>return [<ARRAYLIT><NAME>targetNode</NAME>]<GOTO><TARGET><TARGET></TARGET></TARGET></ARRAYLIT></RETURN></GOTO>;</BLOCK></LOOP>
        <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;
      }</BLOCK></BLOCK>
      <RETURN>return (<HOOK><AND><NAME>targetNode</NAME> &amp;&amp; <CALL><NAME>Element</NAME>.<GETPROP><STRING>descendantOf</STRING></GETPROP>(<NAME>targetNode</NAME>, <NAME>root</NAME>)</CALL>)</AND> ? [<ARRAYLIT><NAME>targetNode</NAME>]</ARRAYLIT> : <ARRAYLIT>[]</ARRAYLIT></HOOK></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>className</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>className</PARAMETER>, <PARAMETER>combinator</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><AND><NAME>nodes</NAME> &amp;&amp; <NAME>combinator</NAME></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><GETELEM><THIS>this</THIS>[<NAME>combinator</NAME></GETELEM>](<NAME>nodes</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>byClassName</STRING></GETPROP>(<NAME>nodes</NAME>, <NAME>root</NAME>, <NAME>className</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>byClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><NOT>!<NAME>nodes</NAME></NOT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>descendant</STRING></GETPROP>([<ARRAYLIT><NAME>root</NAME>]</ARRAYLIT>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <VAR>var <NAME>needle = <ADD><ADD><STRING>' '</STRING> + <NAME>className</NAME></ADD> + <STRING>' '</STRING></ADD></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME>, <NAME>nodeClassName</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <EXPR_VOID><SETNAME><BINDNAME>nodeClassName</BINDNAME> = <GETPROP><NAME>node</NAME>.<STRING>className</STRING></GETPROP></SETNAME></EXPR_VOID>;
        <BLOCK>if (<IFNE><EQ><GETPROP><NAME>nodeClassName</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>0</NUMBER></EQ></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>
        <BLOCK>if (<IFNE><OR><EQ><NAME>nodeClassName</NAME> == <NAME>className</NAME></EQ> || (<CALL><ADD><ADD><STRING>' '</STRING> + <NAME>nodeClassName</NAME></ADD> + <STRING>' '</STRING></ADD>).<GETPROP><STRING>include</STRING></GETPROP>(<NAME>needle</NAME>)</CALL></OR></IFNE>)
          <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;</BLOCK>
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>attrPresence</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>attr</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><NOT>!<NAME>nodes</NAME></NOT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><NAME>root</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>"*"</STRING>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><BLOCK></TARGET>if (<IFNE><CALL><NAME>Element</NAME>.<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<NAME>node</NAME>, <NAME>attr</NAME>)</CALL></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>attr</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>attr</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>operator</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><NOT>!<NAME>nodes</NAME></NOT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><NAME>root</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>"*"</STRING>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <VAR>var <NAME>handler = <GETELEM><NAME>Selector</NAME>.<GETPROP><STRING>operators</STRING></GETPROP>[<NAME>operator</NAME>]</GETELEM></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <VAR>var <NAME>nodeValue = <CALL><NAME>Element</NAME>.<GETPROP><STRING>readAttribute</STRING></GETPROP>(<NAME>node</NAME>, <NAME>attr</NAME>)</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><SHEQ><NAME>nodeValue</NAME> === <NULL>null</NULL></SHEQ></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>
        <BLOCK>if (<IFNE><CALL><NAME>handler</NAME>(<NAME>nodeValue</NAME>, <NAME>value</NAME>)</CALL></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;</BLOCK>
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>pseudo</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>name</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>combinator</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><AND><NAME>nodes</NAME> &amp;&amp; <NAME>combinator</NAME></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><GETELEM><THIS>this</THIS>[<NAME>combinator</NAME></GETELEM>](<NAME>nodes</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <BLOCK>if (<IFNE><NOT>!<NAME>nodes</NAME></NOT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>nodes</BINDNAME> = <CALL><NAME>root</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>"*"</STRING>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETELEM><GETPROP><STRING>pseudos</STRING></GETPROP>[<NAME>name</NAME></GETELEM>](<NAME>nodes</NAME>, <NAME>value</NAME>, <NAME>root</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>,

  <OBJLITNAME>pseudos</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>'first-chil</OBJLITNAME>d': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <BLOCK>if (<IFNE><CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>previousElementSibling</STRING></GETPROP>(<NAME>node</NAME>)</CALL></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>
          <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'last-chil</OBJLITNAME>d': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <BLOCK>if (<IFNE><CALL><NAME>Selector</NAME>.<GETPROP><STRING>handlers</STRING></GETPROP>.<GETPROP><STRING>nextElementSibling</STRING></GETPROP>(<NAME>node</NAME>)</CALL></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>
          <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'only-chil</OBJLITNAME>d': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><BLOCK></TARGET>if (<IFNE><AND>!<NOT><CALL><NAME>h</NAME>.<GETPROP><STRING>previousElementSibling</STRING></GETPROP>(<NAME>node</NAME>)</CALL></NOT> &amp;&amp; !<NOT><CALL><NAME>h</NAME>.<GETPROP><STRING>nextElementSibling</STRING></GETPROP>(<NAME>node</NAME>)</CALL></NOT></AND></IFNE>)
          <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'nth-chil</OBJLITNAME>d':        <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<NAME>nodes</NAME>, <NAME>formula</NAME>, <NAME>root</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'nth-last-chil</OBJLITNAME>d':   <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<NAME>nodes</NAME>, <NAME>formula</NAME>, <NAME>root</NAME>, <TRUE>true</TRUE>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'nth-of-typ</OBJLITNAME>e':      <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<NAME>nodes</NAME>, <NAME>formula</NAME>, <NAME>root</NAME>, <FALSE>false</FALSE>, <TRUE>true</TRUE>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'nth-last-of-typ</OBJLITNAME>e': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<NAME>nodes</NAME>, <NAME>formula</NAME>, <NAME>root</NAME>, <TRUE>true</TRUE>, <TRUE>true</TRUE>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'first-of-typ</OBJLITNAME>e':    <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<NAME>nodes</NAME>, <STRING>"1"</STRING>, <NAME>root</NAME>, <FALSE>false</FALSE>, <TRUE>true</TRUE>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'last-of-typ</OBJLITNAME>e':     <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>nth</STRING></GETPROP>(<NAME>nodes</NAME>, <STRING>"1"</STRING>, <NAME>root</NAME>, <TRUE>true</TRUE>, <TRUE>true</TRUE>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,
    <OBJLITNAME>'only-of-typ</OBJLITNAME>e':     <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>p = <GETPROP><NAME>Selector</NAME>.<STRING>pseudos</STRING></GETPROP></NAME></VAR>;
      <RETURN>return <CALL><GETELEM><NAME>p</NAME>[<STRING>'last-of-type'</STRING></GETELEM>](<CALL><GETELEM><NAME>p</NAME>[<STRING>'first-of-type'</STRING></GETELEM>](<NAME>nodes</NAME>, <NAME>formula</NAME>, <NAME>root</NAME>)</CALL>, <NAME>formula</NAME>, <NAME>root</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    // handles the an+b logic
    <OBJLITNAME>getIndices</OBJLITNAME>: <FUNCTION>function(<PARAMETER>a</PARAMETER>, <PARAMETER>b</PARAMETER>, <PARAMETER>total</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ><NAME>a</NAME> == <NUMBER>0</NUMBER></EQ></IFNE>) <RETURN>return <HOOK><GT><NAME>b</NAME> &gt; <NUMBER>0</NUMBER></GT> ? [<ARRAYLIT><NAME>b</NAME>]</ARRAYLIT> : <ARRAYLIT>[]</ARRAYLIT></HOOK></RETURN>;</BLOCK>
      <RETURN>return <CALL><CALL><NAME>$R</NAME>(<NUMBER>1</NUMBER>, <NAME>total</NAME></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>, <FUNCTION>function(<PARAMETER>memo</PARAMETER>, <PARAMETER>i</PARAMETER>) <BLOCK>{
        <BLOCK>if (<IFNE><AND><EQ><NUMBER>0</NUMBER> == (<MOD><SUB><NAME>i</NAME> - <NAME>b</NAME>)</SUB> % <NAME>a</NAME></MOD></EQ> &amp;&amp; (<GE><DIV><SUB><NAME>i</NAME> - <NAME>b</NAME>)</SUB> / <NAME>a</NAME></DIV> &gt;= <NUMBER>0</NUMBER></GE></AND></IFNE>) <EXPR_VOID><CALL><NAME>memo</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>i</NAME>)</CALL></EXPR_VOID>;</BLOCK>
        <RETURN>return <NAME>memo</NAME></RETURN>;</BLOCK>
      }</FUNCTION>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    // handles nth(-last)-child, nth(-last)-of-type, and (first|last)-of-type
    <OBJLITNAME>nth</OBJLITNAME>: <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>formula</PARAMETER>, <PARAMETER>root</PARAMETER>, <PARAMETER>reverse</PARAMETER>, <PARAMETER>ofType</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ><GETPROP><NAME>nodes</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>0</NUMBER></EQ></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><EQ><NAME>formula</NAME> == <STRING>'even'</STRING></EQ></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>formula</BINDNAME> = <STRING>'2n+0'</STRING></SETNAME></EXPR_VOID>;</BLOCK>
      <BLOCK>if (<IFNE><EQ><NAME>formula</NAME> == <STRING>'odd'</STRING></EQ></IFNE>)  <EXPR_VOID><SETNAME><BINDNAME>formula</BINDNAME> = <STRING>'2n+1'</STRING></SETNAME></EXPR_VOID>;</BLOCK>
      <VAR>var <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>indexed = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>m</NAME></VAR>;
      <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>mark</STRING></GETPROP>(<NAME>nodes</NAME>)</CALL></EXPR_VOID>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>node</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<STRING>_counted</STRING></GETPROP></NOT></IFNE>) <BLOCK>{
          <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>index</STRING></GETPROP>(<GETPROP><NAME>node</NAME>.<STRING>parentNode</STRING></GETPROP>, <NAME>reverse</NAME>, <NAME>ofType</NAME>)</CALL></EXPR_VOID>;
          <EXPR_VOID><CALL><NAME>indexed</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETPROP><NAME>node</NAME>.<STRING>parentNode</STRING></GETPROP>)</CALL></EXPR_VOID>;
        }</BLOCK></BLOCK>
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <BLOCK>if (<IFNE><CALL><NAME>formula</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^\d+$/</REGEXP>)</CALL></IFNE>) <BLOCK>{ // just a number
        <EXPR_VOID><SETNAME><BINDNAME>formula</BINDNAME> = <CALL><NAME>Number</NAME>(<NAME>formula</NAME>)</CALL></SETNAME></EXPR_VOID>;
        <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
          <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeIndex</STRING></GETPROP> == <NAME>formula</NAME></EQ></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      }</BLOCK> else <BLOCK>if (<IFNE><SETNAME><BINDNAME>m</BINDNAME> = <CALL><NAME>formula</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^(-?\d*)?n(([+-])(\d+))?/</REGEXP>)</CALL></SETNAME></IFNE>) <BLOCK>{ // an+b
        <BLOCK>if (<IFNE><EQ><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>]</GETELEM> == <STRING>"-"</STRING></EQ></IFNE>) <EXPR_VOID><SETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>] = -<NUMBER>1</NUMBER></SETELEM></EXPR_VOID>;</BLOCK>
        <VAR>var <NAME>a = <HOOK><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>]</GETELEM> ? <CALL><NAME>Number</NAME>(<GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL> : <NUMBER>1</NUMBER></HOOK></NAME></VAR>;
        <VAR>var <NAME>b = <HOOK><GETELEM><NAME>m</NAME>[<NUMBER>2</NUMBER>]</GETELEM> ? <CALL><NAME>Number</NAME>(<GETELEM><NAME>m</NAME>[<NUMBER>2</NUMBER>]</GETELEM>)</CALL> : <NUMBER>0</NUMBER></HOOK></NAME></VAR>;
        <VAR>var <NAME>indices = <CALL><NAME>Selector</NAME>.<GETPROP><STRING>pseudos</STRING></GETPROP>.<GETPROP><STRING>getIndices</STRING></GETPROP>(<NAME>a</NAME>, <NAME>b</NAME>, <GETPROP><NAME>nodes</NAME>.<STRING>length</STRING></GETPROP>)</CALL></NAME></VAR>;
        <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME>, <NAME>l = <GETPROP><NAME>indices</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
          <LOOP>for <VAR>(var <NAME>j = <NUMBER>0</NUMBER></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>j</NAME> &lt; <NAME>l</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>j</NAME></INC></EXPR_VOID>++)
            <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeIndex</STRING></GETPROP> == <GETELEM><NAME>indices</NAME>[<NAME>j</NAME>]</GETELEM></EQ></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
        <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
      <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>unmark</STRING></GETPROP>(<NAME>nodes</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>unmark</STRING></GETPROP>(<NAME>indexed</NAME>)</CALL></EXPR_VOID>;
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>'empt</OBJLITNAME>y': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        // IE treats comments as element nodes
        <BLOCK>if (<IFNE><OR><EQ><GETPROP><NAME>node</NAME>.<STRING>tagName</STRING></GETPROP> == <STRING>'!'</STRING></EQ> || (<AND><GETPROP><NAME>node</NAME>.<STRING>firstChild</STRING></GETPROP> &amp;&amp; !<NOT><CALL><NAME>node</NAME>.<GETPROP><STRING>innerHTML</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^\s*$/</REGEXP>)</CALL></NOT>)</AND></OR></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>'no</OBJLITNAME>t': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>selector</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME>, <NAME>selectorType</NAME>, <NAME>m</NAME></VAR>;
      <VAR>var <NAME>exclusions = new <CALL><NEW><NAME>Selector</NAME>(<NAME>selector</NAME></NEW>).<GETPROP><STRING>findElements</STRING></GETPROP>(<NAME>root</NAME>)</CALL></NAME></VAR>;
      <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>mark</STRING></GETPROP>(<NAME>exclusions</NAME>)</CALL></EXPR_VOID>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><BLOCK></TARGET>if (<IFNE><NOT>!<GETPROP><NAME>node</NAME>.<STRING>_counted</STRING></GETPROP></NOT></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>unmark</STRING></GETPROP>(<NAME>exclusions</NAME>)</CALL></EXPR_VOID>;
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>'enable</OBJLITNAME>d': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><BLOCK></TARGET>if (<IFNE><NOT>!<GETPROP><NAME>node</NAME>.<STRING>disabled</STRING></GETPROP></NOT></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>'disable</OBJLITNAME>d': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><BLOCK></TARGET>if (<IFNE><GETPROP><NAME>node</NAME>.<STRING>disabled</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>'checke</OBJLITNAME>d': <FUNCTION>function(<PARAMETER>nodes</PARAMETER>, <PARAMETER>value</PARAMETER>, <PARAMETER>root</PARAMETER>) <BLOCK>{
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><BLOCK></TARGET>if (<IFNE><GETPROP><NAME>node</NAME>.<STRING>checked</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
      <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT>,

  <OBJLITNAME>operators</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>'</OBJLITNAME>=':  <FUNCTION>function(<PARAMETER>nv</PARAMETER>, <PARAMETER>v</PARAMETER>) <BLOCK>{ <RETURN>return <EQ><NAME>nv</NAME> == <NAME>v</NAME></EQ></RETURN>;</BLOCK> }</FUNCTION>,
    <OBJLITNAME>'!</OBJLITNAME>=': <FUNCTION>function(<PARAMETER>nv</PARAMETER>, <PARAMETER>v</PARAMETER>) <BLOCK>{ <RETURN>return <NE><NAME>nv</NAME> != <NAME>v</NAME></NE></RETURN>;</BLOCK> }</FUNCTION>,
    <OBJLITNAME>'^</OBJLITNAME>=': <FUNCTION>function(<PARAMETER>nv</PARAMETER>, <PARAMETER>v</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>nv</NAME>.<GETPROP><STRING>startsWith</STRING></GETPROP>(<NAME>v</NAME>)</CALL></RETURN>;</BLOCK> }</FUNCTION>,
    <OBJLITNAME>'$</OBJLITNAME>=': <FUNCTION>function(<PARAMETER>nv</PARAMETER>, <PARAMETER>v</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>nv</NAME>.<GETPROP><STRING>endsWith</STRING></GETPROP>(<NAME>v</NAME>)</CALL></RETURN>;</BLOCK> }</FUNCTION>,
    <OBJLITNAME>'*</OBJLITNAME>=': <FUNCTION>function(<PARAMETER>nv</PARAMETER>, <PARAMETER>v</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>nv</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>v</NAME>)</CALL></RETURN>;</BLOCK> }</FUNCTION>,
    <OBJLITNAME>'~</OBJLITNAME>=': <FUNCTION>function(<PARAMETER>nv</PARAMETER>, <PARAMETER>v</PARAMETER>) <BLOCK>{ <RETURN>return (<CALL><ADD><ADD><STRING>' '</STRING> + <NAME>nv</NAME></ADD> + <STRING>' '</STRING></ADD>).<GETPROP><STRING>include</STRING></GETPROP>(<ADD><ADD><STRING>' '</STRING> + <NAME>v</NAME></ADD> + <STRING>' '</STRING></ADD>)</CALL></RETURN>;</BLOCK> }</FUNCTION>,
    <OBJLITNAME>'|</OBJLITNAME>=': <FUNCTION>function(<PARAMETER>nv</PARAMETER>, <PARAMETER>v</PARAMETER>) <BLOCK>{ <RETURN>return (<CALL><ADD><ADD><STRING>'-'</STRING> + <CALL><NAME>nv</NAME>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></ADD> + <STRING>'-'</STRING></ADD>).<GETPROP><STRING>include</STRING></GETPROP>(<ADD><ADD><STRING>'-'</STRING> + <CALL><NAME>v</NAME>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></ADD> + <STRING>'-'</STRING></ADD>)</CALL></RETURN>;</BLOCK> }</FUNCTION>
  }</OBJECTLIT>,

  <OBJLITNAME>matchElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>expression</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>matches = new <CALL><NEW><NAME>Selector</NAME>(<NAME>expression</NAME></NEW>).<GETPROP><STRING>findElements</STRING></GETPROP>()</CALL></NAME>, <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>mark</STRING></GETPROP>(<NAME>matches</NAME>)</CALL></EXPR_VOID>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>element</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETELEM><NAME>elements</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><BLOCK></TARGET>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>_counted</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>element</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
    <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>unmark</STRING></GETPROP>(<NAME>matches</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isNumber</STRING></GETPROP>(<NAME>expression</NAME>)</CALL></IFNE>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>index</BINDNAME> = <NAME>expression</NAME></SETNAME></EXPR_VOID>; <EXPR_VOID><SETNAME><BINDNAME>expression</BINDNAME> = <FALSE>false</FALSE></SETNAME></EXPR_VOID>;
    }</BLOCK></BLOCK>
    <RETURN>return <GETELEM><NAME>Selector</NAME>.<CALL><GETPROP><STRING>matchElements</STRING></GETPROP>(<NAME>elements</NAME>, <OR><NAME>expression</NAME> || <STRING>'*'</STRING></OR></CALL>)[<OR><NAME>index</NAME> || <NUMBER>0</NUMBER></OR>]</GETELEM></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findChildElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expressions</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>exprs = <CALL><NAME>expressions</NAME>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>','</STRING>)</CALL></NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>expressions</BINDNAME> = <ARRAYLIT>[]</ARRAYLIT></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>exprs</NAME>.<GETPROP><STRING>scan</STRING></GETPROP>(<REGEXP>/(([\w#:.~&gt;+()\s-]+|\*|\[.*?\])+)\s*(,|$)/</REGEXP>, <FUNCTION>function(<PARAMETER>m</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>expressions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><GETELEM><NAME>m</NAME>[<NUMBER>1</NUMBER></GETELEM>].<GETPROP><STRING>strip</STRING></GETPROP>()</CALL>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>h = <GETPROP><NAME>Selector</NAME>.<STRING>handlers</STRING></GETPROP></NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>l = <GETPROP><NAME>expressions</NAME>.<STRING>length</STRING></GETPROP></NAME>, <NAME>selector</NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>l</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>selector</BINDNAME> = new <NEW><NAME>Selector</NAME>(<CALL><GETELEM><NAME>expressions</NAME>[<NAME>i</NAME></GETELEM>].<GETPROP><STRING>strip</STRING></GETPROP>()</CALL>)</NEW></SETNAME></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>h</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<NAME>results</NAME>, <CALL><NAME>selector</NAME>.<GETPROP><STRING>findElements</STRING></GETPROP>(<NAME>element</NAME>)</CALL>)</CALL></EXPR_VOID>;
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
    <RETURN>return (<HOOK><GT><NAME>l</NAME> &gt; <NUMBER>1</NUMBER>)</GT> ? <CALL><NAME>h</NAME>.<GETPROP><STRING>unique</STRING></GETPROP>(<NAME>results</NAME>)</CALL> : <NAME>results</NAME></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP></IFNE>) <BLOCK>{
  // IE returns comment nodes on getElementsByTagName("*").
  // Filter them out.
  <NAME>Selector</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>handlers</STRING></GETPROP>.<STRING>concat</STRING> = <FUNCTION>function(<PARAMETER>a</PARAMETER>, <PARAMETER>b</PARAMETER>) <BLOCK>{
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>node</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>node</BINDNAME> = <GETELEM><NAME>b</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><BLOCK></TARGET>if (<IFNE><SHNE><GETPROP><NAME>node</NAME>.<STRING>tagName</STRING></GETPROP> !== <STRING>"!"</STRING></SHNE></IFNE>) <EXPR_VOID><CALL><NAME>a</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>node</NAME>)<GOTO><TARGET><TARGET></TARGET></TARGET></CALL></EXPR_VOID></GOTO>;</BLOCK></LOOP>
    <RETURN>return <NAME>a</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>

<FUNCTION>function <FUNCNAME>$$</FUNCNAME>() <BLOCK>{
  <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findChildElements</STRING></GETPROP>(<NAME>document</NAME>, <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
}</FUNCTION>
<VAR>var <NAME>Form = <OBJECTLIT>{
  <OBJLITNAME>reset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$</NAME>(<NAME>form</NAME></CALL>).<GETPROP><STRING>reset</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>serializeElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NE>typeof <TYPEOFNAME>options</TYPEOFNAME> != <STRING>'object'</STRING></NE></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>options</BINDNAME> = <OBJECTLIT>{ <OBJLITNAME>hash</OBJLITNAME>: !!<NOT><NOT><NAME>options</NAME></NOT></NOT> }</OBJECTLIT></SETNAME></EXPR_VOID>;
    else <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<GETPROP><NAME>options</NAME>.<STRING>hash</STRING></GETPROP>)</CALL></IFNE>) <EXPR_VOID><SETPROP><NAME>options</NAME>.<STRING>hash</STRING> = <TRUE>true<GOTO></TRUE></SETPROP></EXPR_VOID></GOTO>;</BLOCK></BLOCK>
    <VAR>var <NAME>key</NAME>, <NAME>value</NAME>, <NAME>submitted = <FALSE>false</FALSE></NAME>, <NAME>submit = <GETPROP><NAME>options</NAME>.<STRING>submit</STRING></GETPROP></NAME></VAR>;

    <VAR>var <NAME>data = <CALL><NAME>elements</NAME>.<GETPROP><STRING>inject</STRING></GETPROP>(<OBJECTLIT>{ }</OBJECTLIT>, <FUNCTION>function(<PARAMETER>result</PARAMETER>, <PARAMETER>element</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><AND>!<NOT><GETPROP><NAME>element</NAME>.<STRING>disabled</STRING></GETPROP></NOT> &amp;&amp; <GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP></AND></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>key</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP></SETNAME></EXPR_VOID>; <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
        <BLOCK>if (<IFNE><AND><NE><NAME>value</NAME> != <NULL>null</NULL></NE> &amp;&amp; (<OR><NE><GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP> != <STRING>'submit'</STRING></NE> || (!<AND><NOT><NAME>submitted</NAME></NOT> &amp;&amp;
            <AND><SHNE><NAME>submit</NAME> !== <FALSE>false</FALSE></SHNE> &amp;&amp; (!<AND><OR><NOT><NAME>submit</NAME></NOT> || <EQ><NAME>key</NAME> == <NAME>submit</NAME></EQ>)</OR> &amp;&amp; (<SETNAME><BINDNAME>submitted</BINDNAME> = <TRUE>true</TRUE>)</SETNAME></AND></AND>)</AND>)</OR></AND></IFNE>) <BLOCK>{
          <BLOCK>if (<IFNE><IN><NAME>key</NAME> in <NAME>result</NAME></IN></IFNE>) <BLOCK>{
            // a key is already present; construct an array of values
            <BLOCK>if (<IFNE><NOT>!<CALL><NAME>Object</NAME>.<GETPROP><STRING>isArray</STRING></GETPROP>(<GETELEM><NAME>result</NAME>[<NAME>key</NAME>]</GETELEM>)</CALL></NOT></IFNE>) <EXPR_VOID><SETELEM><NAME>result</NAME>[<NAME>key</NAME>] = [<ARRAYLIT><GETELEM><NAME>result</NAME>[<NAME>key</NAME>]</GETELEM>]</ARRAYLIT></SETELEM></EXPR_VOID>;</BLOCK>
            <EXPR_VOID><CALL><GETELEM><NAME>result</NAME>[<NAME>key</NAME></GETELEM>].<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;
          }</BLOCK>
          else <EXPR_VOID><SETELEM><NAME>result</NAME>[<NAME>key</NAME>] = <NAME>value<GOTO></NAME></SETELEM></EXPR_VOID></GOTO>;</BLOCK>
        }</BLOCK></BLOCK>
      }</BLOCK></BLOCK>
      <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></NAME></VAR>;

    <RETURN>return <HOOK><GETPROP><NAME>options</NAME>.<STRING>hash</STRING></GETPROP> ? <NAME>data</NAME> : <CALL><NAME>Object</NAME>.<GETPROP><STRING>toQueryString</STRING></GETPROP>(<NAME>data</NAME>)</CALL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>Methods</STRING> = <OBJECTLIT>{
  <OBJLITNAME>serialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>serializeElements</STRING></GETPROP>(<CALL><NAME>Form</NAME>.<GETPROP><STRING>getElements</STRING></GETPROP>(<NAME>form</NAME>)</CALL>, <NAME>options</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$A</NAME>(<CALL><CALL><NAME>$</NAME>(<NAME>form</NAME></CALL>).<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'*'</STRING>)</CALL></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>,
      <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>child</PARAMETER>) <BLOCK>{
        <BLOCK>if (<IFNE><GETELEM><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>Serializers</STRING></GETPROP>[<CALL><NAME>child</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>]</GETELEM></IFNE>)
          <EXPR_VOID><CALL><NAME>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>child</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
        <RETURN>return <NAME>elements</NAME></RETURN>;</BLOCK>
      }</FUNCTION>
    )</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getInputs</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>, <PARAMETER>typeName</PARAMETER>, <PARAMETER>name</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>inputs = <CALL><NAME>form</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'input'</STRING>)</CALL></NAME></VAR>;

    <BLOCK>if (<IFNE><AND>!<NOT><NAME>typeName</NAME></NOT> &amp;&amp; !<NOT><NAME>name</NAME></NOT></AND></IFNE>) <RETURN>return <CALL><CALL><NAME>$A</NAME>(<NAME>inputs</NAME></CALL>).<GETPROP><STRING>map</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>extend</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>matchingInputs = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>length = <GETPROP><NAME>inputs</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>input = <GETELEM><NAME>inputs</NAME>[<NAME>i</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><OR>(<AND><NAME>typeName</NAME> &amp;&amp; <NE><GETPROP><NAME>input</NAME>.<STRING>type</STRING></GETPROP> != <NAME>typeName</NAME></NE>)</AND> || (<AND><NAME>name</NAME> &amp;&amp; <NE><GETPROP><NAME>input</NAME>.<STRING>name</STRING></GETPROP> != <NAME>name</NAME></NE>)</AND></OR></IFNE>)
        <CONTINUE>continue</CONTINUE>;</BLOCK>
      <EXPR_VOID><CALL><NAME>matchingInputs</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>input</NAME>)</CALL>)</CALL></EXPR_VOID>;
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>

    <RETURN>return <NAME>matchingInputs</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>disable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Form</NAME>.<CALL><GETPROP><STRING>getElements</STRING></GETPROP>(<NAME>form</NAME></CALL>).<GETPROP><STRING>invoke</STRING></GETPROP>(<STRING>'disable'</STRING>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>enable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Form</NAME>.<CALL><GETPROP><STRING>getElements</STRING></GETPROP>(<NAME>form</NAME></CALL>).<GETPROP><STRING>invoke</STRING></GETPROP>(<STRING>'enable'</STRING>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findFirstElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>elements = <CALL><CALL><NAME>$</NAME>(<NAME>form</NAME></CALL>).<CALL><GETPROP><STRING>getElements</STRING></GETPROP></CALL>().<GETPROP><STRING>findAll</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
      <RETURN>return <AND><NE><STRING>'hidden'</STRING> != <GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP></NE> &amp;&amp; !<NOT><GETPROP><NAME>element</NAME>.<STRING>disabled</STRING></GETPROP></NOT></AND></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></NAME></VAR>;
    <VAR>var <NAME>firstByIndex = <CALL><NAME>elements</NAME>.<CALL><GETPROP><STRING>findAll</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
      <RETURN>return <AND><CALL><NAME>element</NAME>.<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<STRING>'tabIndex'</STRING>)</CALL> &amp;&amp; <GE><GETPROP><NAME>element</NAME>.<STRING>tabIndex</STRING></GETPROP> &gt;= <NUMBER>0</NUMBER></GE></AND></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<CALL><GETPROP><STRING>sortBy</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{ <RETURN>return <GETPROP><NAME>element</NAME>.<STRING>tabIndex</STRING></GETPROP></RETURN></BLOCK> }</FUNCTION></CALL>).<GETPROP><STRING>first</STRING></GETPROP>()</CALL></NAME></VAR>;

    <RETURN>return <HOOK><NAME>firstByIndex</NAME> ? <NAME>firstByIndex</NAME> : <CALL><NAME>elements</NAME>.<GETPROP><STRING>find</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
      <RETURN>return [<CALL><ARRAYLIT><STRING>'input'</STRING>, <STRING>'select'</STRING>, <STRING>'textarea'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>focusFirstElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>form</NAME>.<CALL><GETPROP><STRING>findFirstElement</STRING></GETPROP></CALL>().<GETPROP><STRING>activate</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>request</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><COMMA><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME>, <SETNAME><BINDNAME>options</BINDNAME> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<OR><NAME>options</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR>)</CALL></SETNAME></COMMA></EXPR_VOID>;

    <VAR>var <NAME>params = <GETPROP><NAME>options</NAME>.<STRING>parameters</STRING></GETPROP></NAME>, <NAME>action = <OR><CALL><NAME>form</NAME>.<GETPROP><STRING>readAttribute</STRING></GETPROP>(<STRING>'action'</STRING>)</CALL> || <STRING>''</STRING></OR></NAME></VAR>;
    <BLOCK>if (<IFNE><CALL><NAME>action</NAME>.<GETPROP><STRING>blank</STRING></GETPROP>()</CALL></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>action</BINDNAME> = <GETPROP><NAME>window</NAME>.<GETPROP><STRING>location</STRING></GETPROP>.<STRING>href</STRING></GETPROP></SETNAME></EXPR_VOID>;</BLOCK>
    <EXPR_VOID><SETPROP><NAME>options</NAME>.<STRING>parameters</STRING> = <CALL><NAME>form</NAME>.<GETPROP><STRING>serialize</STRING></GETPROP>(<TRUE>true</TRUE>)</CALL></SETPROP></EXPR_VOID>;

    <BLOCK>if (<IFNE><NAME>params</NAME></IFNE>) <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>params</NAME>)</CALL></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>params</BINDNAME> = <CALL><NAME>params</NAME>.<GETPROP><STRING>toQueryParams</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>
      <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>options</NAME>.<STRING>parameters</STRING></GETPROP>, <NAME>params</NAME>)</CALL></EXPR_VOID>;
    }</BLOCK></BLOCK>

    <BLOCK>if (<IFNE><AND><CALL><NAME>form</NAME>.<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<STRING>'method'</STRING>)</CALL> &amp;&amp; !<NOT><GETPROP><NAME>options</NAME>.<STRING>method</STRING></GETPROP></NOT></AND></IFNE>)
      <EXPR_VOID><SETPROP><NAME>options</NAME>.<STRING>method</STRING> = <GETPROP><NAME>form</NAME>.<STRING>method</STRING></GETPROP></SETPROP></EXPR_VOID>;</BLOCK>

    <RETURN>return new <NEW><GETPROP><NAME>Ajax</NAME>.<STRING>Request</STRING></GETPROP>(<NAME>action</NAME>, <NAME>options</NAME>)</NEW></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>Element</STRING> = <OBJECTLIT>{
  <OBJLITNAME>focus</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>focus</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>select</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>select</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING> = <OBJECTLIT>{
  <OBJLITNAME>serialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><AND>!<NOT><GETPROP><NAME>element</NAME>.<STRING>disabled</STRING></GETPROP></NOT> &amp;&amp; <GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP></AND></IFNE>) <BLOCK>{
      <VAR>var <NAME>value = <CALL><NAME>element</NAME>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NE><NAME>value</NAME> != <NAME>undefined</NAME></NE></IFNE>) <BLOCK>{
        <VAR>var <NAME>pair = <OBJECTLIT>{ }</OBJECTLIT></NAME></VAR>;
        <EXPR_VOID><SETELEM><NAME>pair</NAME>[<GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP>] = <NAME>value</NAME></SETELEM></EXPR_VOID>;
        <RETURN>return <CALL><NAME>Object</NAME>.<GETPROP><STRING>toQueryString</STRING></GETPROP>(<NAME>pair</NAME>)</CALL></RETURN>;
      }</BLOCK></BLOCK>
    }</BLOCK></BLOCK>
    <RETURN>return <STRING>''</STRING></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>method = <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETELEM><GETPROP><STRING>Serializers</STRING></GETPROP>[<NAME>method</NAME></GETELEM>](<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>setValue</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>method = <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></NAME></VAR>;
    <EXPR_VOID><CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETELEM><GETPROP><STRING>Serializers</STRING></GETPROP>[<NAME>method</NAME></GETELEM>](<NAME>element</NAME>, <NAME>value</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clear</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>value</STRING> = <STRING>''</STRING></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>present</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <NE><GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>value</STRING></GETPROP> != <STRING>''</STRING></NE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>activate</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <TRY>try <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>focus</STRING></GETPROP>()</CALL></EXPR_VOID>;
      <BLOCK>if (<IFNE><AND><GETPROP><NAME>element</NAME>.<STRING>select</STRING></GETPROP> &amp;&amp; (<OR><NE><CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL> != <STRING>'input'</STRING></NE> ||
          ![<NOT><CALL><ARRAYLIT><STRING>'button'</STRING>, <STRING>'reset'</STRING>, <STRING>'submit'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP>)</CALL></NOT>)</OR></AND></IFNE>)
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>select</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH> }</TRY>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>disable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>blur</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>disabled</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>enable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>disabled</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<VAR>var <NAME>Field = <GETPROP><NAME>Form</NAME>.<STRING>Element</STRING></GETPROP></NAME></VAR>;
<VAR>var <NAME>$F = <GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>getValue</STRING></GETPROP></NAME></VAR>;

/*--------------------------------------------------------------------------*/

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Serializers</STRING> = <OBJECTLIT>{
  <OBJLITNAME>input</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <SWITCH>switch (<CALL><NAME>element</NAME>.<GETPROP><STRING>type</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>) {
      <CASE>case <STRING>'checkbox'</STRING></CASE>:
      <CASE>case <STRING>'radio'</STRING>:
        <BLOCK><RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>Serializers</STRING></GETPROP>.<GETPROP><STRING>inputSelector</STRING></GETPROP>(<NAME>element</NAME>, <NAME>value</NAME>)</CALL></RETURN></BLOCK></CASE>;
      <DEFAULT>default:
        <BLOCK><RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>Serializers</STRING></GETPROP>.<GETPROP><STRING>textarea</STRING></GETPROP>(<NAME>element</NAME>, <NAME>value</NAME>)</CALL></RETURN></BLOCK></DEFAULT>;
    }</SWITCH></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inputSelector</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>value</NAME>)</CALL></IFNE>) <RETURN>return <HOOK><GETPROP><NAME>element</NAME>.<STRING>checked</STRING></GETPROP> ? <GETPROP><NAME>element</NAME>.<STRING>value</STRING></GETPROP> : <NULL>null</NULL></HOOK></RETURN>;
    else <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>checked</STRING> = !!<NOT><NOT><NAME>value<GOTO></NAME></NOT></NOT></SETPROP></EXPR_VOID></GOTO>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>textarea</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>value</NAME>)</CALL></IFNE>) <RETURN>return <GETPROP><NAME>element</NAME>.<STRING>value</STRING></GETPROP></RETURN>;
    else <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>value</STRING> = <NAME>value<GOTO></NAME></SETPROP></EXPR_VOID></GOTO>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>select</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><NAME>Object</NAME>.<GETPROP><STRING>isUndefined</STRING></GETPROP>(<NAME>index</NAME>)</CALL></IFNE>)
      <RETURN>return <CALL><GETELEM><THIS>this</THIS>[<HOOK><EQ><GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP> == <STRING>'select-one'</STRING></EQ> ?
        <STRING>'selectOne'</STRING> : <STRING>'selectMany'</STRING></HOOK></GETELEM>](<NAME>element</NAME>)</CALL></RETURN>;
    else <BLOCK>{
      <VAR>var <NAME>opt</NAME>, <NAME>value</NAME>, <NAME>single = !<NOT><CALL><NAME>Object</NAME>.<GETPROP><STRING>isArray</STRING></GETPROP>(<NAME>index</NAME>)</CALL></NOT></NAME></VAR>;
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>element</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
        <EXPR_VOID><SETNAME><BINDNAME>opt</BINDNAME> = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>options</STRING></GETPROP>[<NAME>i</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <CALL><THIS>this</THIS>.<GETPROP><STRING>optionValue</STRING></GETPROP>(<NAME>opt</NAME>)</CALL></SETNAME></EXPR_VOID>;
        <BLOCK>if (<IFNE><NAME>single</NAME></IFNE>) <BLOCK>{
          <BLOCK>if (<IFNE><EQ><NAME>value</NAME> == <NAME>index</NAME></EQ></IFNE>) <BLOCK>{
            <EXPR_VOID><SETPROP><NAME>opt</NAME>.<STRING>selected</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
            <RETURN>return</RETURN>;
          }</BLOCK></BLOCK>
        }</BLOCK>
        else <EXPR_VOID><SETPROP><NAME>opt</NAME>.<STRING>selected</STRING> = <CALL><NAME>index</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>value</NAME>)<GOTO></CALL></SETPROP></EXPR_VOID></GOTO>;</BLOCK>
      <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
    <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>selectOne</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>index = <GETPROP><NAME>element</NAME>.<STRING>selectedIndex</STRING></GETPROP></NAME></VAR>;
    <RETURN>return <HOOK><GE><NAME>index</NAME> &gt;= <NUMBER>0</NUMBER></GE> ? <CALL><THIS>this</THIS>.<GETPROP><STRING>optionValue</STRING></GETPROP>(<GETELEM><NAME>element</NAME>.<GETPROP><STRING>options</STRING></GETPROP>[<NAME>index</NAME>]</GETELEM>)</CALL> : <NULL>null</NULL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>selectMany</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>values</NAME>, <NAME>length = <GETPROP><NAME>element</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>length</NAME></NOT></IFNE>) <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK>

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>values = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>opt = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>options</STRING></GETPROP>[<NAME>i</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><GETPROP><NAME>opt</NAME>.<STRING>selected</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><NAME>values</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><THIS>this</THIS>.<GETPROP><STRING>optionValue</STRING></GETPROP>(<NAME>opt</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
    <RETURN>return <NAME>values</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>optionValue</OBJLITNAME>: <FUNCTION>function(<PARAMETER>opt</PARAMETER>) <BLOCK>{
    // extend element because hasAttribute may not be native
    <RETURN>return <HOOK><CALL><NAME>Element</NAME>.<CALL><GETPROP><STRING>extend</STRING></GETPROP>(<NAME>opt</NAME></CALL>).<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<STRING>'value'</STRING>)</CALL> ? <GETPROP><NAME>opt</NAME>.<STRING>value</STRING></GETPROP> : <GETPROP><NAME>opt</NAME>.<STRING>text</STRING></GETPROP></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Abstract</NAME>.<STRING>TimedObserver</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<NAME>PeriodicalExecuter</NAME>, <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>$super</PARAMETER>, <PARAMETER>element</PARAMETER>, <PARAMETER>frequency</PARAMETER>, <PARAMETER>callback</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>$super</NAME>(<NAME>callback</NAME>, <NAME>frequency</NAME>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>element</STRING>   = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>execute</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>value = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><HOOK><AND><CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP>)</CALL> &amp;&amp; <CALL><NAME>Object</NAME>.<GETPROP><STRING>isString</STRING></GETPROP>(<NAME>value</NAME>)</CALL></AND> ?
        <NE><GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP> != <NAME>value</NAME></NE> : <NE><CALL><NAME>String</NAME>(<GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP>)</CALL> != <CALL><NAME>String</NAME>(<NAME>value</NAME>)</CALL></NE></HOOK></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>callback</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>, <NAME>value</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <NAME>value</NAME></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Observer</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<GETPROP><NAME>Abstract</NAME>.<STRING>TimedObserver</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>getValue</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>Observer</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<GETPROP><NAME>Abstract</NAME>.<STRING>TimedObserver</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>serialize</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Abstract</NAME>.<STRING>EventObserver</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>callback</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>element</STRING>  = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>callback</STRING> = <NAME>callback</NAME></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL> == <STRING>'form'</STRING></EQ></IFNE>)
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>registerFormCallbacks</STRING></GETPROP>()</CALL></EXPR_VOID>;
    else
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>registerCallback</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)<GOTO></CALL></EXPR_VOID></GOTO>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onElementEvent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>value = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NE><GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP> != <NAME>value</NAME></NE></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>callback</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>, <NAME>value</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <NAME>value</NAME></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>registerFormCallbacks</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><NAME>Form</NAME>.<CALL><GETPROP><STRING>getElements</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>registerCallback</STRING></GETPROP>, <THIS>this</THIS>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>registerCallback</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP></IFNE>) <BLOCK>{
      <SWITCH>switch (<CALL><NAME>element</NAME>.<GETPROP><STRING>type</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>) {
        <CASE>case <STRING>'checkbox'</STRING></CASE>:
        <CASE>case <STRING>'radio'</STRING>:
          <BLOCK><EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>observe</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'click'</STRING>, <CALL><THIS>this</THIS>.<GETPROP><STRING>onElementEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;
          <BREAK>break</BREAK></BLOCK></CASE>;
        <DEFAULT>default:
          <BLOCK><EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>observe</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'change'</STRING>, <CALL><THIS>this</THIS>.<GETPROP><STRING>onElementEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;
          <BREAK>break</BREAK></BLOCK></DEFAULT>;
      }</SWITCH>
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>EventObserver</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<GETPROP><NAME>Abstract</NAME>.<STRING>EventObserver</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>getValue</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>EventObserver</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>(<GETPROP><NAME>Abstract</NAME>.<STRING>EventObserver</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>serialize</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;
<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>window</NAME>.<STRING>Event</STRING></GETPROP></NOT></IFNE>) <VAR>var <NAME>Event = <OBJECTLIT>{ }</OBJECTLIT></NAME></VAR>;</BLOCK>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Event</NAME>, <OBJECTLIT>{
  <OBJLITNAME>KEY_BACKSPACE</OBJLITNAME>: <NUMBER>8</NUMBER>,
  <OBJLITNAME>KEY_TAB</OBJLITNAME>:       <NUMBER>9</NUMBER>,
  <OBJLITNAME>KEY_RETURN</OBJLITNAME>:   <NUMBER>13</NUMBER>,
  <OBJLITNAME>KEY_ESC</OBJLITNAME>:      <NUMBER>27</NUMBER>,
  <OBJLITNAME>KEY_LEFT</OBJLITNAME>:     <NUMBER>37</NUMBER>,
  <OBJLITNAME>KEY_UP</OBJLITNAME>:       <NUMBER>38</NUMBER>,
  <OBJLITNAME>KEY_RIGHT</OBJLITNAME>:    <NUMBER>39</NUMBER>,
  <OBJLITNAME>KEY_DOWN</OBJLITNAME>:     <NUMBER>40</NUMBER>,
  <OBJLITNAME>KEY_DELETE</OBJLITNAME>:   <NUMBER>46</NUMBER>,
  <OBJLITNAME>KEY_HOME</OBJLITNAME>:     <NUMBER>36</NUMBER>,
  <OBJLITNAME>KEY_END</OBJLITNAME>:      <NUMBER>35</NUMBER>,
  <OBJLITNAME>KEY_PAGEUP</OBJLITNAME>:   <NUMBER>33</NUMBER>,
  <OBJLITNAME>KEY_PAGEDOWN</OBJLITNAME>: <NUMBER>34</NUMBER>,
  <OBJLITNAME>KEY_INSERT</OBJLITNAME>:   <NUMBER>45</NUMBER>,

  <OBJLITNAME>cache</OBJLITNAME>: <OBJECTLIT>{ }</OBJECTLIT>,

  <OBJLITNAME>relatedTarget</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>element</NAME></VAR>;
    <SWITCH>switch(<GETPROP><NAME>event</NAME>.<STRING>type</STRING></GETPROP>) {
      <CASE>case <STRING>'mouseover'</STRING>: <BLOCK><EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>event</NAME>.<STRING>fromElement</STRING></GETPROP></SETNAME></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
      <CASE>case <STRING>'mouseout'</STRING>:  <BLOCK><EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>event</NAME>.<STRING>toElement</STRING></GETPROP></SETNAME></EXPR_VOID>;   <BREAK>break</BREAK></BLOCK></CASE>;
      <DEFAULT>default: <BLOCK><RETURN>return <NULL>null</NULL></RETURN></BLOCK></DEFAULT>;
    }</SWITCH>
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Event</NAME>.<STRING>Methods</STRING> = (<CALL><FUNCTION>function() <BLOCK>{
  <VAR>var <NAME>isButton</NAME></VAR>;

  <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP></IFNE>) <BLOCK>{
    <VAR>var <NAME>buttonMap = <OBJECTLIT>{ <OBJLITNAME>0</OBJLITNAME>: <NUMBER>1</NUMBER>, <OBJLITNAME>1</OBJLITNAME>: <NUMBER>4</NUMBER>, <OBJLITNAME>2</OBJLITNAME>: <NUMBER>2</NUMBER> }</OBJECTLIT></NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>isButton</BINDNAME> = <FUNCTION>function(<PARAMETER>event</PARAMETER>, <PARAMETER>code</PARAMETER>) <BLOCK>{
      <RETURN>return <EQ><GETPROP><NAME>event</NAME>.<STRING>button</STRING></GETPROP> == <GETELEM><NAME>buttonMap</NAME>[<NAME>code</NAME>]</GETELEM></EQ></RETURN>;</BLOCK>
    }</FUNCTION></SETNAME></EXPR_VOID>;

  }</BLOCK> else <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>WebKit</STRING></GETPROP></IFNE>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>isButton</BINDNAME> = <FUNCTION>function(<PARAMETER>event</PARAMETER>, <PARAMETER>code</PARAMETER>) <BLOCK>{
      <SWITCH>switch (<NAME>code</NAME>) {
        <CASE>case <NUMBER>0</NUMBER>: <BLOCK><RETURN>return <AND><EQ><GETPROP><NAME>event</NAME>.<STRING>which</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ> &amp;&amp; !<NOT><GETPROP><NAME>event</NAME>.<STRING>metaKey</STRING></GETPROP></NOT></AND></RETURN></BLOCK></CASE>;
        <CASE>case <NUMBER>1</NUMBER>: <BLOCK><RETURN>return <AND><EQ><GETPROP><NAME>event</NAME>.<STRING>which</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ> &amp;&amp; <GETPROP><NAME>event</NAME>.<STRING>metaKey</STRING></GETPROP></AND></RETURN></BLOCK></CASE>;
        <DEFAULT>default: <BLOCK><RETURN>return <FALSE>false</FALSE></RETURN></BLOCK></DEFAULT>;
      }</SWITCH></BLOCK>
    }</FUNCTION></SETNAME></EXPR_VOID>;

  }</BLOCK> else <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>isButton</BINDNAME> = <FUNCTION>function(<PARAMETER>event</PARAMETER>, <PARAMETER>code</PARAMETER>) <BLOCK>{
      <RETURN>return <HOOK><GETPROP><NAME>event</NAME>.<STRING>which</STRING></GETPROP> ? (<SHEQ><GETPROP><NAME>event</NAME>.<STRING>which</STRING></GETPROP> === <ADD><NAME>code</NAME> + <NUMBER>1</NUMBER></ADD>)</SHEQ> : (<SHEQ><GETPROP><NAME>event</NAME>.<STRING>button</STRING></GETPROP> === <NAME>code</NAME>)</SHEQ></HOOK></RETURN>;</BLOCK>
    }</FUNCTION></SETNAME></EXPR_VOID>;
  <GOTO><GOTO></GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>

  <RETURN>return <OBJECTLIT>{
    <OBJLITNAME>isLeftClick</OBJLITNAME>:   <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>isButton</NAME>(<NAME>event</NAME>, <NUMBER>0</NUMBER>)</CALL></RETURN></BLOCK> }</FUNCTION>,
    <OBJLITNAME>isMiddleClick</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>isButton</NAME>(<NAME>event</NAME>, <NUMBER>1</NUMBER>)</CALL></RETURN></BLOCK> }</FUNCTION>,
    <OBJLITNAME>isRightClick</OBJLITNAME>:  <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>isButton</NAME>(<NAME>event</NAME>, <NUMBER>2</NUMBER>)</CALL></RETURN></BLOCK> }</FUNCTION>,

    <OBJLITNAME>element</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>node = <GETPROP><NAME>Event</NAME>.<CALL><GETPROP><STRING>extend</STRING></GETPROP>(<NAME>event</NAME></CALL>).<STRING>target</STRING></GETPROP></NAME></VAR>;
      <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<HOOK><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeType</STRING></GETPROP> == <GETPROP><NAME>Node</NAME>.<STRING>TEXT_NODE</STRING></GETPROP></EQ> ? <GETPROP><NAME>node</NAME>.<STRING>parentNode</STRING></GETPROP> : <NAME>node</NAME></HOOK>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>findElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>, <PARAMETER>expression</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>element = <CALL><NAME>Event</NAME>.<GETPROP><STRING>element</STRING></GETPROP>(<NAME>event</NAME>)</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<NAME>expression</NAME></NOT></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
      <VAR>var <NAME>elements = [<CALL><ARRAYLIT><NAME>element</NAME></ARRAYLIT>].<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>element</NAME>.<GETPROP><STRING>ancestors</STRING></GETPROP>()</CALL>)</CALL></NAME></VAR>;
      <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<NAME>elements</NAME>, <NAME>expression</NAME>, <NUMBER>0</NUMBER>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>pointer</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
      <RETURN>return <OBJECTLIT>{
        <OBJLITNAME>x</OBJLITNAME>: <OR><GETPROP><NAME>event</NAME>.<STRING>pageX</STRING></GETPROP> || (<ADD><GETPROP><NAME>event</NAME>.<STRING>clientX</STRING></GETPROP> +
          (<OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP> || <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP>)</OR>)</ADD></OR>,
        <OBJLITNAME>y</OBJLITNAME>: <OR><GETPROP><NAME>event</NAME>.<STRING>pageY</STRING></GETPROP> || (<ADD><GETPROP><NAME>event</NAME>.<STRING>clientY</STRING></GETPROP> +
          (<OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP> || <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP>)</OR>)</ADD></OR>
      }</OBJECTLIT></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>pointerX</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{ <RETURN>return <GETPROP><NAME>Event</NAME>.<CALL><GETPROP><STRING>pointer</STRING></GETPROP>(<NAME>event</NAME></CALL>).<STRING>x</STRING></GETPROP></RETURN></BLOCK> }</FUNCTION>,
    <OBJLITNAME>pointerY</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{ <RETURN>return <GETPROP><NAME>Event</NAME>.<CALL><GETPROP><STRING>pointer</STRING></GETPROP>(<NAME>event</NAME></CALL>).<STRING>y</STRING></GETPROP></RETURN></BLOCK> }</FUNCTION>,

    <OBJLITNAME>stop</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>event</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>event</NAME>.<GETPROP><STRING>preventDefault</STRING></GETPROP>()</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>event</NAME>.<GETPROP><STRING>stopPropagation</STRING></GETPROP>()</CALL></EXPR_VOID>;
      <EXPR_VOID><SETPROP><NAME>event</NAME>.<STRING>stopped</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT></RETURN>;</BLOCK>
}</FUNCTION>)()</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Event</NAME>.<STRING>extend</STRING> = (<CALL><FUNCTION>function() <BLOCK>{
  <VAR>var <NAME>methods = <CALL><NAME>Object</NAME>.<CALL><GETPROP><STRING>keys</STRING></GETPROP>(<GETPROP><NAME>Event</NAME>.<STRING>Methods</STRING></GETPROP></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<OBJECTLIT>{ }</OBJECTLIT>, <FUNCTION>function(<PARAMETER>m</PARAMETER>, <PARAMETER>name</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETELEM><NAME>m</NAME>[<NAME>name</NAME>] = <CALL><NAME>Event</NAME>.<GETELEM><GETPROP><STRING>Methods</STRING></GETPROP>[<NAME>name</NAME></GETELEM>].<GETPROP><STRING>methodize</STRING></GETPROP>()</CALL></SETELEM></EXPR_VOID>;
    <RETURN>return <NAME>m</NAME></RETURN>;</BLOCK>
  }</FUNCTION>)</CALL></NAME></VAR>;

  <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>IE</STRING></GETPROP></IFNE>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>methods</NAME>, <OBJECTLIT>{
      <OBJLITNAME>stopPropagation</OBJLITNAME>: <FUNCTION>function() <BLOCK>{ <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>cancelBubble</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID></BLOCK> }</FUNCTION>,
      <OBJLITNAME>preventDefault</OBJLITNAME>:  <FUNCTION>function() <BLOCK>{ <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>returnValue</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID></BLOCK> }</FUNCTION>,
      <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{ <RETURN>return <STRING>"[object Event]"</STRING></RETURN></BLOCK> }</FUNCTION>
    }</OBJECTLIT>)</CALL></EXPR_VOID>;

    <RETURN>return <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><NOT>!<NAME>event</NAME></NOT></IFNE>) <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><GETPROP><NAME>event</NAME>.<STRING>_extendedByPrototype</STRING></GETPROP></IFNE>) <RETURN>return <NAME>event</NAME></RETURN>;</BLOCK>

      <EXPR_VOID><SETPROP><NAME>event</NAME>.<STRING>_extendedByPrototype</STRING> = <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></SETPROP></EXPR_VOID>;
      <VAR>var <NAME>pointer = <CALL><NAME>Event</NAME>.<GETPROP><STRING>pointer</STRING></GETPROP>(<NAME>event</NAME>)</CALL></NAME></VAR>;
      <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>event</NAME>, <OBJECTLIT>{
        <OBJLITNAME>target</OBJLITNAME>: <GETPROP><NAME>event</NAME>.<STRING>srcElement</STRING></GETPROP>,
        <OBJLITNAME>relatedTarget</OBJLITNAME>: <CALL><NAME>Event</NAME>.<GETPROP><STRING>relatedTarget</STRING></GETPROP>(<NAME>event</NAME>)</CALL>,
        <OBJLITNAME>pageX</OBJLITNAME>:  <GETPROP><NAME>pointer</NAME>.<STRING>x</STRING></GETPROP>,
        <OBJLITNAME>pageY</OBJLITNAME>:  <GETPROP><NAME>pointer</NAME>.<STRING>y</STRING></GETPROP>
      }</OBJECTLIT>)</CALL></EXPR_VOID>;
      <RETURN>return <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>event</NAME>, <NAME>methods</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></RETURN>;

  }</BLOCK> else <BLOCK>{
    <EXPR_VOID><SETPROP><NAME>Event</NAME>.<STRING>prototype</STRING> = <OR><GETPROP><NAME>Event</NAME>.<STRING>prototype</STRING></GETPROP> || <GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createEvent</STRING></GETPROP>(<STRING>"HTMLEvents"</STRING></CALL></REF_SPECIAL>).__proto__</GET_REF></OR></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Event</NAME>.<STRING>prototype</STRING></GETPROP>, <NAME>methods</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></RETURN>;
  <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
}</FUNCTION>)()</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Event</NAME>, (<CALL><FUNCTION>function() <BLOCK>{
  <VAR>var <NAME>cache = <GETPROP><NAME>Event</NAME>.<STRING>cache</STRING></GETPROP></NAME></VAR>;

  <FUNCTION>function <FUNCNAME>getEventID</FUNCNAME>(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>_eventID</STRING></GETPROP></IFNE>) <RETURN>return <GETPROP><NAME>element</NAME>.<STRING>_eventID</STRING></GETPROP></RETURN>;</BLOCK>
    <NAME>arguments</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>callee</STRING></GETPROP>.<STRING>id</STRING> = <OR><GETPROP><NAME>arguments</NAME>.<GETPROP><STRING>callee</STRING></GETPROP>.<STRING>id</STRING></GETPROP> || <NUMBER>1</NUMBER></OR></SETPROP></EXPR_VOID>;
    <RETURN>return <SETPROP><NAME>element</NAME>.<STRING>_eventID</STRING> = ++<INC><GETPROP><NAME>arguments</NAME>.<GETPROP><STRING>callee</STRING></GETPROP>.<STRING>id</STRING></GETPROP></INC></SETPROP></RETURN>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>getDOMEventName</FUNCNAME>(<PARAMETER>eventName</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><AND><NAME>eventName</NAME> &amp;&amp; <CALL><NAME>eventName</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<STRING>':'</STRING>)</CALL></AND></IFNE>) <RETURN>return <STRING>"dataavailable"</STRING></RETURN>;</BLOCK>
    <RETURN>return <NAME>eventName</NAME></RETURN>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>getCacheForID</FUNCNAME>(<PARAMETER>id</PARAMETER>) <BLOCK>{
    <RETURN>return <SETELEM><NAME>cache</NAME>[<NAME>id</NAME>] = <OR><GETELEM><NAME>cache</NAME>[<NAME>id</NAME>]</GETELEM> || <OBJECTLIT>{ }</OBJECTLIT></OR></SETELEM></RETURN>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>getWrappersForEventName</FUNCNAME>(<PARAMETER>id</PARAMETER>, <PARAMETER>eventName</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>c = <CALL><NAME>getCacheForID</NAME>(<NAME>id</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <SETELEM><NAME>c</NAME>[<NAME>eventName</NAME>] = <OR><GETELEM><NAME>c</NAME>[<NAME>eventName</NAME>]</GETELEM> || <ARRAYLIT>[]</ARRAYLIT></OR></SETELEM></RETURN>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>createWrapper</FUNCNAME>(<PARAMETER>element</PARAMETER>, <PARAMETER>eventName</PARAMETER>, <PARAMETER>handler</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>id = <CALL><NAME>getEventID</NAME>(<NAME>element</NAME>)</CALL></NAME></VAR>;
    <VAR>var <NAME>c = <CALL><NAME>getWrappersForEventName</NAME>(<NAME>id</NAME>, <NAME>eventName</NAME>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><CALL><NAME>c</NAME>.<CALL><GETPROP><STRING>pluck</STRING></GETPROP>(<STRING>"handler"</STRING></CALL>).<GETPROP><STRING>include</STRING></GETPROP>(<NAME>handler</NAME>)</CALL></IFNE>) <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>

    <VAR>var <NAME>wrapper = <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><OR>!<NOT><NAME>Event</NAME></NOT> || !<OR><NOT><GETPROP><NAME>Event</NAME>.<STRING>extend</STRING></GETPROP></NOT> ||
        (<AND><GETPROP><NAME>event</NAME>.<STRING>eventName</STRING></GETPROP> &amp;&amp; <NE><GETPROP><NAME>event</NAME>.<STRING>eventName</STRING></GETPROP> != <NAME>eventName</NAME></NE>)</AND></OR></OR></IFNE>)
          <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>

      <EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>event</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>handler</NAME>.<GETPROP><STRING>call</STRING></GETPROP>(<NAME>element</NAME>, <NAME>event</NAME>)</CALL></EXPR_VOID></BLOCK>
    }</FUNCTION></NAME></VAR>;

    <EXPR_VOID><SETPROP><NAME>wrapper</NAME>.<STRING>handler</STRING> = <NAME>handler</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>c</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>wrapper</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>wrapper</NAME></RETURN>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>findWrapper</FUNCNAME>(<PARAMETER>id</PARAMETER>, <PARAMETER>eventName</PARAMETER>, <PARAMETER>handler</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>c = <CALL><NAME>getWrappersForEventName</NAME>(<NAME>id</NAME>, <NAME>eventName</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><NAME>c</NAME>.<GETPROP><STRING>find</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>wrapper</PARAMETER>) <BLOCK>{ <RETURN>return <EQ><GETPROP><NAME>wrapper</NAME>.<STRING>handler</STRING></GETPROP> == <NAME>handler</NAME></EQ></RETURN></BLOCK> }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>destroyWrapper</FUNCNAME>(<PARAMETER>id</PARAMETER>, <PARAMETER>eventName</PARAMETER>, <PARAMETER>handler</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>c = <CALL><NAME>getCacheForID</NAME>(<NAME>id</NAME>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<GETELEM><NAME>c</NAME>[<NAME>eventName</NAME>]</GETELEM></NOT></IFNE>) <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
    <EXPR_VOID><SETELEM><NAME>c</NAME>[<NAME>eventName</NAME>] = <CALL><GETELEM><NAME>c</NAME>[<NAME>eventName</NAME></GETELEM>].<GETPROP><STRING>without</STRING></GETPROP>(<CALL><NAME>findWrapper</NAME>(<NAME>id</NAME>, <NAME>eventName</NAME>, <NAME>handler</NAME>)</CALL>)</CALL></SETELEM></EXPR_VOID>;</BLOCK>
  }</FUNCTION>

  <FUNCTION>function <FUNCNAME>destroyCache</FUNCNAME>() <BLOCK>{
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>id</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><NAME>cache</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><LOCAL_BLOCK><LOOP></TARGET>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>eventName</BINDNAME></SETNAME></EXPR_VOID></NAME></VAR> in <ENUM_INIT_KEYS><GETELEM><NAME>cache</NAME>[<NAME>id</NAME>]</GETELEM></ENUM_INIT_KEYS>)
        <TARGET><BLOCK><EXPR_VOID><SETELEM><GETELEM><NAME></TARGET>cache</NAME>[<NAME>id</NAME></GETELEM>][<NAME>eventName</NAME>] = <NULL>null<GOTO><GOTO><TARGET><TARGET></TARGET></TARGET></NULL></SETELEM></EXPR_VOID></BLOCK></GOTO></LOOP></GOTO>;</LOCAL_BLOCK></BLOCK></LOOP></LOCAL_BLOCK></BLOCK>
  }</FUNCTION>

  <BLOCK>if (<IFNE><GETPROP><NAME>window</NAME>.<STRING>attachEvent</STRING></GETPROP></IFNE>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>window</NAME>.<GETPROP><STRING>attachEvent</STRING></GETPROP>(<STRING>"onunload"</STRING>, <NAME>destroyCache</NAME>)</CALL></EXPR_VOID>;
  }</BLOCK></BLOCK>

  <RETURN>return <OBJECTLIT>{
    <OBJLITNAME>observe</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>eventName</PARAMETER>, <PARAMETER>handler</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <VAR>var <NAME>name = <CALL><NAME>getDOMEventName</NAME>(<NAME>eventName</NAME>)</CALL></NAME></VAR>;

      <VAR>var <NAME>wrapper = <CALL><NAME>createWrapper</NAME>(<NAME>element</NAME>, <NAME>eventName</NAME>, <NAME>handler</NAME>)</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<NAME>wrapper</NAME></NOT></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>

      <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>addEventListener</STRING></GETPROP></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>addEventListener</STRING></GETPROP>(<NAME>name</NAME>, <NAME>wrapper</NAME>, <FALSE>false</FALSE>)</CALL></EXPR_VOID>;
      }</BLOCK> else <BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>attachEvent</STRING></GETPROP>(<ADD><STRING>"on"</STRING> + <NAME>name</NAME></ADD>, <NAME>wrapper</NAME>)</CALL></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>

      <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>stopObserving</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>eventName</PARAMETER>, <PARAMETER>handler</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <VAR>var <NAME>id = <CALL><NAME>getEventID</NAME>(<NAME>element</NAME>)</CALL></NAME>, <NAME>name = <CALL><NAME>getDOMEventName</NAME>(<NAME>eventName</NAME>)</CALL></NAME></VAR>;

      <BLOCK>if (<IFNE><AND>!<NOT><NAME>handler</NAME></NOT> &amp;&amp; <NAME>eventName</NAME></AND></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><CALL><NAME>getWrappersForEventName</NAME>(<NAME>id</NAME>, <NAME>eventName</NAME></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>wrapper</PARAMETER>) <BLOCK>{
          <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>stopObserving</STRING></GETPROP>(<NAME>eventName</NAME>, <GETPROP><NAME>wrapper</NAME>.<STRING>handler</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
        }</FUNCTION>)</CALL></EXPR_VOID>;
        <RETURN>return <NAME>element</NAME></RETURN>;

      }</BLOCK> else <BLOCK>if (<IFNE><NOT>!<NAME>eventName</NAME></NOT></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>Object</NAME>.<CALL><GETPROP><STRING>keys</STRING></GETPROP>(<CALL><NAME>getCacheForID</NAME>(<NAME>id</NAME>)</CALL></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>eventName</PARAMETER>) <BLOCK>{
          <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>stopObserving</STRING></GETPROP>(<NAME>eventName</NAME>)</CALL></EXPR_VOID>;</BLOCK>
        }</FUNCTION>)</CALL></EXPR_VOID>;
        <RETURN>return <NAME>element</NAME></RETURN>;
      <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>

      <VAR>var <NAME>wrapper = <CALL><NAME>findWrapper</NAME>(<NAME>id</NAME>, <NAME>eventName</NAME>, <NAME>handler</NAME>)</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NOT>!<NAME>wrapper</NAME></NOT></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>

      <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>removeEventListener</STRING></GETPROP></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeEventListener</STRING></GETPROP>(<NAME>name</NAME>, <NAME>wrapper</NAME>, <FALSE>false</FALSE>)</CALL></EXPR_VOID>;
      }</BLOCK> else <BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>detachEvent</STRING></GETPROP>(<ADD><STRING>"on"</STRING> + <NAME>name</NAME></ADD>, <NAME>wrapper</NAME>)</CALL></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>

      <EXPR_VOID><CALL><NAME>destroyWrapper</NAME>(<NAME>id</NAME>, <NAME>eventName</NAME>, <NAME>handler</NAME>)</CALL></EXPR_VOID>;

      <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
    }</FUNCTION>,

    <OBJLITNAME>fire</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>eventName</PARAMETER>, <PARAMETER>memo</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><AND><EQ><NAME>element</NAME> == <NAME>document</NAME></EQ> &amp;&amp; <AND><GETPROP><NAME>document</NAME>.<STRING>createEvent</STRING></GETPROP> &amp;&amp; !<NOT><GETPROP><NAME>element</NAME>.<STRING>dispatchEvent</STRING></GETPROP></NOT></AND></AND></IFNE>)
        <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>document</NAME>.<STRING>documentElement</STRING></GETPROP></SETNAME></EXPR_VOID>;</BLOCK>

      <BLOCK>if (<IFNE><GETPROP><NAME>document</NAME>.<STRING>createEvent</STRING></GETPROP></IFNE>) <BLOCK>{
        <VAR>var <NAME>event = <CALL><NAME>document</NAME>.<GETPROP><STRING>createEvent</STRING></GETPROP>(<STRING>"HTMLEvents"</STRING>)</CALL></NAME></VAR>;
        <EXPR_VOID><CALL><NAME>event</NAME>.<GETPROP><STRING>initEvent</STRING></GETPROP>(<STRING>"dataavailable"</STRING>, <TRUE>true</TRUE>, <TRUE>true</TRUE>)</CALL></EXPR_VOID>;
      }</BLOCK> else <BLOCK>{
        <VAR>var <NAME>event = <CALL><NAME>document</NAME>.<GETPROP><STRING>createEventObject</STRING></GETPROP>()</CALL></NAME></VAR>;
        <EXPR_VOID><SETPROP><NAME>event</NAME>.<STRING>eventType</STRING> = <STRING>"ondataavailable"</STRING></SETPROP></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>

      <EXPR_VOID><SETPROP><NAME>event</NAME>.<STRING>eventName</STRING> = <NAME>eventName</NAME></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><NAME>event</NAME>.<STRING>memo</STRING> = <OR><NAME>memo</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR></SETPROP></EXPR_VOID>;

      <BLOCK>if (<IFNE><GETPROP><NAME>document</NAME>.<STRING>createEvent</STRING></GETPROP></IFNE>) <BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>dispatchEvent</STRING></GETPROP>(<NAME>event</NAME>)</CALL></EXPR_VOID>;
      }</BLOCK> else <BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>fireEvent</STRING></GETPROP>(<GETPROP><NAME>event</NAME>.<STRING>eventType</STRING></GETPROP>, <NAME>event</NAME>)</CALL></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>

      <RETURN>return <CALL><NAME>Event</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>event</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>
  }</OBJECTLIT></RETURN>;</BLOCK>
}</FUNCTION>)()</CALL>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Event</NAME>, <GETPROP><NAME>Event</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Element</NAME>.<GETPROP><STRING>addMethods</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>fire</OBJLITNAME>:          <GETPROP><NAME>Event</NAME>.<STRING>fire</STRING></GETPROP>,
  <OBJLITNAME>observe</OBJLITNAME>:       <GETPROP><NAME>Event</NAME>.<STRING>observe</STRING></GETPROP>,
  <OBJLITNAME>stopObserving</OBJLITNAME>: <GETPROP><NAME>Event</NAME>.<STRING>stopObserving</STRING></GETPROP>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>document</NAME>, <OBJECTLIT>{
  <OBJLITNAME>fire</OBJLITNAME>:          <CALL><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>fire</STRING></GETPROP>.<GETPROP><STRING>methodize</STRING></GETPROP>()</CALL>,
  <OBJLITNAME>observe</OBJLITNAME>:       <CALL><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>observe</STRING></GETPROP>.<GETPROP><STRING>methodize</STRING></GETPROP>()</CALL>,
  <OBJLITNAME>stopObserving</OBJLITNAME>: <CALL><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<GETPROP><STRING>stopObserving</STRING></GETPROP>.<GETPROP><STRING>methodize</STRING></GETPROP>()</CALL>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

(<EXPR_RESULT><CALL><FUNCTION>function() <BLOCK>{
  /* Support for the DOMContentLoaded event is based on work by Dan Webb,
     Matthias Miller, Dean Edwards and John Resig. */

  <VAR>var <NAME>timer</NAME>, <NAME>fired = <FALSE>false</FALSE></NAME></VAR>;

  <FUNCTION>function <FUNCNAME>fireContentLoadedEvent</FUNCNAME>() <BLOCK>{
    <BLOCK>if (<IFNE><NAME>fired</NAME></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><NAME>timer</NAME></IFNE>) <EXPR_VOID><CALL><NAME>window</NAME>.<GETPROP><STRING>clearInterval</STRING></GETPROP>(<NAME>timer</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    <EXPR_VOID><CALL><NAME>document</NAME>.<GETPROP><STRING>fire</STRING></GETPROP>(<STRING>"dom:loaded"</STRING>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>fired</BINDNAME> = <TRUE>true</TRUE></SETNAME></EXPR_VOID>;</BLOCK>
  }</FUNCTION>

  <BLOCK>if (<IFNE><GETPROP><NAME>document</NAME>.<STRING>addEventListener</STRING></GETPROP></IFNE>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>Browser</STRING></GETPROP>.<STRING>WebKit</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>timer</BINDNAME> = <CALL><NAME>window</NAME>.<GETPROP><STRING>setInterval</STRING></GETPROP>(<FUNCTION>function() <BLOCK>{
        <BLOCK>if (<IFNE><CALL><REGEXP>/loaded|complete/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>document</NAME>.<STRING>readyState</STRING></GETPROP>)</CALL></IFNE>)
          <EXPR_VOID><CALL><NAME>fireContentLoadedEvent</NAME>()</CALL></EXPR_VOID>;</BLOCK></BLOCK>
      }</FUNCTION>, <NUMBER>0</NUMBER>)</CALL></SETNAME></EXPR_VOID>;

      <EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>observe</STRING></GETPROP>(<NAME>window</NAME>, <STRING>"load"</STRING>, <NAME>fireContentLoadedEvent</NAME>)</CALL></EXPR_VOID>;

    }</BLOCK> else <BLOCK>{
      <EXPR_VOID><CALL><NAME>document</NAME>.<GETPROP><STRING>addEventListener</STRING></GETPROP>(<STRING>"DOMContentLoaded"</STRING>,
        <NAME>fireContentLoadedEvent</NAME>, <FALSE>false</FALSE>)</CALL></EXPR_VOID>;
    <GOTO></GOTO>}</BLOCK></BLOCK>

  }</BLOCK> else <BLOCK>{
    <EXPR_VOID><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP>(<STRING>"&lt;script id=__onDOMContentLoaded defer src=//:&gt;&lt;\/script&gt;"</STRING>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><CALL><NAME>$</NAME>(<STRING>"__onDOMContentLoaded"</STRING></CALL>).<STRING>onreadystatechange</STRING> = <FUNCTION>function() <BLOCK>{
      <BLOCK>if (<IFNE><EQ><GETPROP><THIS>this</THIS>.<STRING>readyState</STRING></GETPROP> == <STRING>"complete"</STRING></EQ></IFNE>) <BLOCK>{
        <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>onreadystatechange</STRING> = <NULL>null</NULL></SETPROP></EXPR_VOID>;
        <EXPR_VOID><CALL><NAME>fireContentLoadedEvent</NAME>()</CALL></EXPR_VOID>;
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION></SETPROP></EXPR_VOID>;
  <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
}</FUNCTION>)()</CALL></EXPR_RESULT>;
/*------------------------------- DEPRECATED -------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Hash</NAME>.<STRING>toQueryString</STRING> = <GETPROP><NAME>Object</NAME>.<STRING>toQueryString</STRING></GETPROP></SETPROP></EXPR_RESULT>;

<VAR>var <NAME>Toggle = <OBJECTLIT>{ <OBJLITNAME>display</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<STRING>toggle</STRING></GETPROP> }</OBJECTLIT></NAME></VAR>;

<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>childOf</STRING> = <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>descendantOf</STRING></GETPROP></SETPROP></EXPR_RESULT>;

<VAR>var <NAME>Insertion = <OBJECTLIT>{
  <OBJLITNAME>Before</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>element</NAME>, <OBJECTLIT>{<OBJLITNAME>before</OBJLITNAME>:<NAME>content</NAME>}</OBJECTLIT>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>Top</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>element</NAME>, <OBJECTLIT>{<OBJLITNAME>top</OBJLITNAME>:<NAME>content</NAME>}</OBJECTLIT>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>Bottom</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>element</NAME>, <OBJECTLIT>{<OBJLITNAME>bottom</OBJLITNAME>:<NAME>content</NAME>}</OBJECTLIT>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>After</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>insert</STRING></GETPROP>(<NAME>element</NAME>, <OBJECTLIT>{<OBJLITNAME>after</OBJLITNAME>:<NAME>content</NAME>}</OBJECTLIT>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

<VAR>var <NAME>$continue = new <NEW><NAME>Error</NAME>(<STRING>'"throw $continue" is deprecated, use "return" instead'</STRING>)</NEW></NAME></VAR>;

// This should be moved to script.aculo.us; notice the deprecated methods
// further below, that map to the newer Element methods.
<VAR>var <NAME>Position = <OBJECTLIT>{
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  <OBJLITNAME>includeScrollOffsets</OBJLITNAME>: <FALSE>false</FALSE>,

  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  <OBJLITNAME>prepare</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>deltaX</STRING> =  <OR><GETPROP><NAME>window</NAME>.<STRING>pageXOffset</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP>
                || <NUMBER>0</NUMBER></OR></OR></OR></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>deltaY</STRING> =  <OR><GETPROP><NAME>window</NAME>.<STRING>pageYOffset</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP>
                || <NUMBER>0</NUMBER></OR></OR></OR></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  // caches x/y coordinate pair to use with overlap
  <OBJLITNAME>within</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>x</PARAMETER>, <PARAMETER>y</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>includeScrollOffsets</STRING></GETPROP></IFNE>)
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>withinIncludingScrolloffsets</STRING></GETPROP>(<NAME>element</NAME>, <NAME>x</NAME>, <NAME>y</NAME>)</CALL></RETURN>;</BLOCK>
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>xcomp</STRING> = <NAME>x</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>ycomp</STRING> = <NAME>y</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>offset</STRING> = <CALL><NAME>Element</NAME>.<GETPROP><STRING>cumulativeOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;

    <RETURN>return (<AND><GE><NAME>y</NAME> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM></GE> &amp;&amp;
            <AND><LT><NAME>y</NAME> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP></ADD></LT> &amp;&amp;
            <AND><GE><NAME>x</NAME> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM></GE> &amp;&amp;
            <LT><NAME>x</NAME> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP></ADD></LT></AND></AND>)</AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>withinIncludingScrolloffsets</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>x</PARAMETER>, <PARAMETER>y</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>offsetcache = <CALL><NAME>Element</NAME>.<GETPROP><STRING>cumulativeScrollOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></NAME></VAR>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>xcomp</STRING> = <SUB><ADD><NAME>x</NAME> + <GETELEM><NAME>offsetcache</NAME>[<NUMBER>0</NUMBER>]</GETELEM></ADD> - <GETPROP><THIS>this</THIS>.<STRING>deltaX</STRING></GETPROP></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>ycomp</STRING> = <SUB><ADD><NAME>y</NAME> + <GETELEM><NAME>offsetcache</NAME>[<NUMBER>1</NUMBER>]</GETELEM></ADD> - <GETPROP><THIS>this</THIS>.<STRING>deltaY</STRING></GETPROP></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>offset</STRING> = <CALL><NAME>Element</NAME>.<GETPROP><STRING>cumulativeOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;

    <RETURN>return (<AND><GE><GETPROP><THIS>this</THIS>.<STRING>ycomp</STRING></GETPROP> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM></GE> &amp;&amp;
            <AND><LT><GETPROP><THIS>this</THIS>.<STRING>ycomp</STRING></GETPROP> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP></ADD></LT> &amp;&amp;
            <AND><GE><GETPROP><THIS>this</THIS>.<STRING>xcomp</STRING></GETPROP> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM></GE> &amp;&amp;
            <LT><GETPROP><THIS>this</THIS>.<STRING>xcomp</STRING></GETPROP> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP></ADD></LT></AND></AND>)</AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  // within must be called directly before
  <OBJLITNAME>overlap</OBJLITNAME>: <FUNCTION>function(<PARAMETER>mode</PARAMETER>, <PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<NAME>mode</NAME></NOT></IFNE>) <RETURN>return <NUMBER>0</NUMBER></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><EQ><NAME>mode</NAME> == <STRING>'vertical'</STRING></EQ></IFNE>)
      <RETURN>return ((<DIV><SUB><ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP>)</ADD> - <GETPROP><THIS>this</THIS>.<STRING>ycomp</STRING></GETPROP>)</SUB> /
        <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP></DIV></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><EQ><NAME>mode</NAME> == <STRING>'horizontal'</STRING></EQ></IFNE>)
      <RETURN>return ((<DIV><SUB><ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP>)</ADD> - <GETPROP><THIS>this</THIS>.<STRING>xcomp</STRING></GETPROP>)</SUB> /
        <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP></DIV></RETURN>;</BLOCK></BLOCK>
  }</FUNCTION>,

  // Deprecation layer -- use newer Element methods now (1.5.2).

  <OBJLITNAME>cumulativeOffset</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>cumulativeOffset</STRING></GETPROP>,

  <OBJLITNAME>positionedOffset</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>positionedOffset</STRING></GETPROP>,

  <OBJLITNAME>absolutize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>Position</NAME>.<GETPROP><STRING>prepare</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>absolutize</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>relativize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>Position</NAME>.<GETPROP><STRING>prepare</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>relativize</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>realOffset</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>cumulativeScrollOffset</STRING></GETPROP>,

  <OBJLITNAME>offsetParent</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>getOffsetParent</STRING></GETPROP>,

  <OBJLITNAME>page</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>viewportOffset</STRING></GETPROP>,

  <OBJLITNAME>clone</OBJLITNAME>: <FUNCTION>function(<PARAMETER>source</PARAMETER>, <PARAMETER>target</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>options</BINDNAME> = <OR><NAME>options</NAME> || <OBJECTLIT>{ }</OBJECTLIT></OR></SETNAME></EXPR_VOID>;
    <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>clonePosition</STRING></GETPROP>(<NAME>target</NAME>, <NAME>source</NAME>, <NAME>options</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

/*--------------------------------------------------------------------------*/

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>document</NAME>.<STRING>getElementsByClassName</STRING></GETPROP></NOT></IFNE>) <EXPR_RESULT><SETPROP><NAME>document</NAME>.<STRING>getElementsByClassName</STRING> = <CALL><FUNCTION>function(<PARAMETER>instanceMethods</PARAMETER>)<BLOCK>{
  <FUNCTION>function <FUNCNAME>iter</FUNCNAME>(<PARAMETER>name</PARAMETER>) <BLOCK>{
    <RETURN>return <HOOK><CALL><NAME>name</NAME>.<GETPROP><STRING>blank</STRING></GETPROP>()</CALL> ? <NULL>null</NULL> : <ADD><ADD><STRING>"[contains(concat(' ', @class, ' '), ' "</STRING> + <NAME>name</NAME></ADD> + <STRING>" ')]"</STRING></ADD></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>

  <EXPR_VOID><SETPROP><NAME>instanceMethods</NAME>.<STRING>getElementsByClassName</STRING> = <HOOK><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>XPath</STRING></GETPROP> ?
  <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>className</BINDNAME> = <CALL><NAME>className</NAME>.<CALL><GETPROP><STRING>toString</STRING></GETPROP></CALL>().<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>cond = <HOOK><CALL><REGEXP>/\s/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<NAME>className</NAME>)</CALL> ? <CALL><CALL><NAME>$w</NAME>(<NAME>className</NAME></CALL>).<CALL><GETPROP><STRING>map</STRING></GETPROP>(<NAME>iter</NAME></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>''</STRING>)</CALL> : <CALL><NAME>iter</NAME>(<NAME>className</NAME>)</CALL></HOOK></NAME></VAR>;
    <RETURN>return <HOOK><NAME>cond</NAME> ? <CALL><NAME>document</NAME>.<GETPROP><STRING>_getElementsByXPath</STRING></GETPROP>(<ADD><STRING>'.//*'</STRING> + <NAME>cond</NAME></ADD>, <NAME>element</NAME>)</CALL> : <ARRAYLIT>[]</ARRAYLIT></HOOK></RETURN>;</BLOCK>
  }</FUNCTION> : <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>className</BINDNAME> = <CALL><NAME>className</NAME>.<CALL><GETPROP><STRING>toString</STRING></GETPROP></CALL>().<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>elements = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>classNames = (<HOOK><CALL><REGEXP>/\s/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<NAME>className</NAME>)</CALL> ? <CALL><NAME>$w</NAME>(<NAME>className</NAME>)</CALL> : <NULL>null</NULL>)</HOOK></NAME></VAR>;
    <BLOCK>if (<IFNE><AND>!<NOT><NAME>classNames</NAME></NOT> &amp;&amp; !<NOT><NAME>className</NAME></NOT></AND></IFNE>) <RETURN>return <NAME>elements</NAME></RETURN>;</BLOCK>

    <VAR>var <NAME>nodes = <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'*'</STRING>)</CALL></NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>className</BINDNAME> = <ADD><ADD><STRING>' '</STRING> + <NAME>className</NAME></ADD> + <STRING>' '</STRING></ADD></SETNAME></EXPR_VOID>;

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>child</NAME>, <NAME>cn</NAME></VAR>; <TARGET><IFEQ><SETNAME><BINDNAME></TARGET>child</BINDNAME> = <GETELEM><NAME>nodes</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <BLOCK>if (<IFNE><AND><GETPROP><NAME>child</NAME>.<STRING>className</STRING></GETPROP> &amp;&amp; (<AND><SETNAME><BINDNAME>cn</BINDNAME> = <ADD><ADD><STRING>' '</STRING> + <GETPROP><NAME>child</NAME>.<STRING>className</STRING></GETPROP></ADD> + <STRING>' '</STRING></ADD>)</SETNAME> &amp;&amp; (<OR><CALL><NAME>cn</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>className</NAME>)</CALL> ||
          (<AND><NAME>classNames</NAME> &amp;&amp; <CALL><NAME>classNames</NAME>.<GETPROP><STRING>all</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>name</PARAMETER>) <BLOCK>{
            <RETURN>return !<AND><NOT><CALL><NAME>name</NAME>.<CALL><GETPROP><STRING>toString</STRING></GETPROP></CALL>().<GETPROP><STRING>blank</STRING></GETPROP>()</CALL></NOT> &amp;&amp; <CALL><NAME>cn</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<ADD><ADD><STRING>' '</STRING> + <NAME>name</NAME></ADD> + <STRING>' '</STRING></ADD>)</CALL></AND></RETURN>;</BLOCK>
          }</FUNCTION>)</CALL>)</AND>)</OR></AND></AND></IFNE>)
        <EXPR_VOID><CALL><NAME>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>child</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET><TARGET></TARGET></TARGET></GOTO>}</BLOCK></LOOP>
    <RETURN>return <NAME>elements</NAME></RETURN>;</BLOCK>
  }</FUNCTION></HOOK></SETPROP></EXPR_VOID>;

  <RETURN>return <FUNCTION>function(<PARAMETER>className</PARAMETER>, <PARAMETER>parentElement</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<OR><NAME>parentElement</NAME> || <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></OR></CALL>).<GETPROP><STRING>getElementsByClassName</STRING></GETPROP>(<NAME>className</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION></RETURN>;</BLOCK>
}</FUNCTION>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></SETPROP></EXPR_RESULT>;</BLOCK>

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>ClassNames</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>ClassNames</STRING></GETPROP>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>element</STRING> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>className</STRING></GETPROP>.<CALL><GETPROP><STRING>split</STRING></GETPROP>(<REGEXP>/\s+/</REGEXP></CALL>).<CALL><GETPROP><STRING>select</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>name</PARAMETER>) <BLOCK>{
      <RETURN>return <GT><GETPROP><NAME>name</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>0</NUMBER></GT></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<GETPROP><STRING>_each</STRING></GETPROP>(<NAME>iterator</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>set</OBJLITNAME>: <FUNCTION>function(<PARAMETER>className</PARAMETER>) <BLOCK>{
    <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>element</STRING></GETPROP>.<STRING>className</STRING> = <NAME>className</NAME></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>add</OBJLITNAME>: <FUNCTION>function(<PARAMETER>classNameToAdd</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><THIS>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>classNameToAdd</NAME>)</CALL></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>set</STRING></GETPROP>(<CALL><CALL><NAME>$A</NAME>(<THIS>this</THIS></CALL>).<CALL><GETPROP><STRING>concat</STRING></GETPROP>(<NAME>classNameToAdd</NAME></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>' '</STRING>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>remove</OBJLITNAME>: <FUNCTION>function(<PARAMETER>classNameToRemove</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<CALL><THIS>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>classNameToRemove</NAME>)</CALL></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>set</STRING></GETPROP>(<CALL><CALL><NAME>$A</NAME>(<THIS>this</THIS></CALL>).<CALL><GETPROP><STRING>without</STRING></GETPROP>(<NAME>classNameToRemove</NAME></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>' '</STRING>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toString</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$A</NAME>(<THIS>this</THIS></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>' '</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>ClassNames</STRING></GETPROP>.<STRING>prototype</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><CALL><NAME>Element</NAME>.<GETPROP><STRING>addMethods</STRING></GETPROP>()</CALL></EXPR_RESULT>;</SCRIPT>
