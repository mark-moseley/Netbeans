Missing position for node SCRIPT[0:0]:BLOCK[1076:0]:BLOCK[1076:37]:EXPR_RESULT[1077:2]:SETPROP[1077:2]:FUNCTION[1077:33]:BLOCK[1077:69]:LOOP[1081:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[1076:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1105:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:BLOCK[1544:4]:BLOCK[1544:54]:EXPR_VOID[1560:6]:CALL[1560:6]:FUNCTION[1560:34]:BLOCK[1560:48]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:BLOCK[1544:4]:BLOCK[1544:54]:EXPR_VOID[1563:6]:CALL[1563:6]:FUNCTION[1563:18]:BLOCK[1563:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:BLOCK[1544:4]:BLOCK[1544:54]:EXPR_VOID[1565:6]:CALL[1565:6]:FUNCTION[1566:8]:BLOCK[1566:22]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:BLOCK[1544:4]:BLOCK[1544:54]:SWITCH[1546:6]:CASE[1547:8]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:BLOCK[1544:4]:BLOCK[1544:54]:SWITCH[1546:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:BLOCK[1544:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:BLOCK[1544:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:BLOCK[1539:34]:EXPR_RESULT[1540:10]:SETPROP[1540:10]:FUNCTION[1540:27]:BLOCK[1540:51]:EXPR_VOID[1570:4]:CALL[1570:4]:FUNCTION[1570:15]:BLOCK[1570:26]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[1539:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1579:0]:EXPR_RESULT[1580:3]:CALL[1580:3]:FUNCTION[1580:51]:BLOCK[1580:65]:BLOCK[1582:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[1579:0]:EXPR_RESULT[1580:3]:CALL[1580:3]:FUNCTION[1580:51]:BLOCK[1580:65]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:BLOCK[1579:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2176:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2288:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2498:0]:BLOCK[2498:56]:EXPR_RESULT[2499:2]:SETPROP[2499:2]:FUNCTION[2499:30]:BLOCK[2499:48]:LOOP[2501:4]:BLOCK[2501:7]:BLOCK[2504:6]:BLOCK[2505:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2498:0]:BLOCK[2498:56]:EXPR_RESULT[2499:2]:SETPROP[2499:2]:FUNCTION[2499:30]:BLOCK[2499:48]:LOOP[2501:4]:BLOCK[2501:7]:BLOCK[2504:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[2498:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[534:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[616:0]:BLOCK[616:16]:EXPR_RESULT[617:8]:SETPROP[617:8]:FUNCTION[617:27]:BLOCK[617:37]:LOOP[619:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[616:0]:BLOCK[616:16]:EXPR_RESULT[617:8]:SETPROP[617:8]:FUNCTION[617:27]:BLOCK[617:37]:LOOP[620:4]:BLOCK[620:63]:BLOCK[621:6]:BLOCK[621:44]:LOOP[622:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[616:0]:BLOCK[616:16]:EXPR_RESULT[617:8]:SETPROP[617:8]:FUNCTION[617:27]:BLOCK[617:37]:LOOP[620:4]:BLOCK[620:63]:BLOCK[621:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[616:0]:BLOCK[616:16]:EXPR_RESULT[617:8]:SETPROP[617:8]:FUNCTION[617:27]:BLOCK[617:37]:LOOP[620:4]:BLOCK[620:63]:BLOCK[621:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:BLOCK[616:0]:BLOCK[616:16]:EXPR_RESULT[617:8]:SETPROP[617:8]:FUNCTION[617:27]:BLOCK[617:37]:LOOP[620:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:BLOCK[616:0]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1024:5]:SETPROP[1024:5]:CALL[1024:35]:OBJECTLIT[1024:66]:FUNCTION[1025:14]:BLOCK[1025:48]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1024:5]:SETPROP[1024:5]:CALL[1024:35]:OBJECTLIT[1024:66]:FUNCTION[1039:9]:BLOCK[1039:20]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1024:5]:SETPROP[1024:5]:CALL[1024:35]:OBJECTLIT[1024:66]:FUNCTION[1044:8]:BLOCK[1044:19]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1024:5]:SETPROP[1024:5]:CALL[1024:35]:OBJECTLIT[1024:66]:FUNCTION[1050:18]:BLOCK[1050:36]:BLOCK[1051:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1024:5]:SETPROP[1024:5]:CALL[1024:35]:OBJECTLIT[1024:66]:FUNCTION[1050:18]:BLOCK[1050:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1024:5]:SETPROP[1024:5]:CALL[1024:35]:OBJECTLIT[1024:66]:FUNCTION[1061:16]:BLOCK[1061:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1087:0]:SETPROP[1087:0]:FUNCTION[1087:34]:BLOCK[1087:69]:BLOCK[1088:2]:BLOCK[1091:9]:LOOP[1094:4]:BLOCK[1094:63]:BLOCK[1096:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1087:0]:SETPROP[1087:0]:FUNCTION[1087:34]:BLOCK[1087:69]:BLOCK[1088:2]:BLOCK[1091:9]:LOOP[1094:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1087:0]:SETPROP[1087:0]:FUNCTION[1087:34]:BLOCK[1087:69]:BLOCK[1088:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1087:0]:SETPROP[1087:0]:FUNCTION[1087:34]:BLOCK[1087:69]:BLOCK[1088:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1087:0]:SETPROP[1087:0]:FUNCTION[1087:34]:BLOCK[1087:69]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1109:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:BLOCK[1114:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:BLOCK[1116:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:LOCAL_BLOCK[1121:4]:LOOP[1121:4]:BLOCK[1121:34]:BLOCK[1121:34]:BLOCK[1123:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:LOCAL_BLOCK[1121:4]:LOOP[1121:4]:BLOCK[1121:34]:EXPR_VOID[1121:13]:SETNAME[1121:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:LOCAL_BLOCK[1121:4]:LOOP[1121:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:LOCAL_BLOCK[1121:4]:LOOP[1121:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:LOCAL_BLOCK[1121:4]:LOOP[1121:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:BLOCK[1111:66]:LOCAL_BLOCK[1121:4]:LOOP[1121:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1108:0]:SETPROP[1108:0]:FUNCTION[1108:17]:BLOCK[1108:35]:BLOCK[1111:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1167:10]:BLOCK[1167:34]:EXPR_VOID[1170:4]:CALL[1170:4]:FUNCTION[1170:15]:BLOCK[1170:26]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1174:11]:BLOCK[1174:35]:BLOCK[1177:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1174:11]:BLOCK[1174:35]:BLOCK[1177:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1174:11]:BLOCK[1174:35]:EXPR_VOID[1185:4]:CALL[1185:4]:FUNCTION[1185:15]:BLOCK[1185:26]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1189:11]:BLOCK[1189:29]:EXPR_VOID[1192:4]:CALL[1192:4]:FUNCTION[1192:48]:BLOCK[1192:63]:BLOCK[1195:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1189:11]:BLOCK[1189:29]:EXPR_VOID[1192:4]:CALL[1192:4]:FUNCTION[1192:48]:BLOCK[1192:63]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1200:22]:BLOCK[1200:50]:LOOP[1203:4]:BLOCK[1204:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1200:22]:BLOCK[1200:50]:LOOP[1203:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1217:24]:BLOCK[1217:42]:BLOCK[1218:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1217:24]:BLOCK[1217:42]:BLOCK[1220:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1217:24]:BLOCK[1217:42]:LOOP[1219:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1237:9]:BLOCK[1237:37]:BLOCK[1238:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1268:17]:BLOCK[1268:41]:BLOCK[1270:4]:BLOCK[1270:39]:BLOCK[1272:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1268:17]:BLOCK[1268:41]:BLOCK[1270:4]:BLOCK[1270:39]:BLOCK[1273:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1268:17]:BLOCK[1268:41]:BLOCK[1270:4]:BLOCK[1270:39]:BLOCK[1275:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1268:17]:BLOCK[1268:41]:BLOCK[1270:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1292:16]:BLOCK[1292:45]:BLOCK[1293:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1292:16]:BLOCK[1292:45]:BLOCK[1295:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1292:16]:BLOCK[1292:45]:BLOCK[1296:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1302:16]:BLOCK[1302:45]:BLOCK[1303:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1308:19]:BLOCK[1308:48]:BLOCK[1309:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1314:19]:BLOCK[1314:48]:BLOCK[1315:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1331:19]:BLOCK[1331:37]:LOOP[1334:4]:BLOCK[1334:17]:BLOCK[1336:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1331:19]:BLOCK[1331:37]:LOOP[1334:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1347:16]:BLOCK[1347:44]:LOOP[1349:4]:BLOCK[1350:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1347:16]:BLOCK[1347:44]:LOOP[1349:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1363:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1367:4]:BLOCK[1367:16]:BLOCK[1368:6]:BLOCK[1371:13]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1367:4]:BLOCK[1367:16]:BLOCK[1368:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1367:4]:BLOCK[1367:16]:BLOCK[1368:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1367:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1376:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1379:4]:BLOCK[1380:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1379:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1381:4]:BLOCK[1381:27]:BLOCK[1382:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1381:4]:BLOCK[1381:27]:BLOCK[1383:6]:BLOCK[1384:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1381:4]:BLOCK[1381:27]:BLOCK[1383:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1361:12]:BLOCK[1361:37]:BLOCK[1381:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:BLOCK[1395:24]:BLOCK[1398:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:BLOCK[1400:15]:BLOCK[1400:31]:BLOCK[1401:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:BLOCK[1400:15]:BLOCK[1403:15]:BLOCK[1404:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:BLOCK[1400:15]:BLOCK[1403:15]:BLOCK[1405:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:BLOCK[1400:15]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:BLOCK[1400:15]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1394:28]:BLOCK[1395:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:BLOCK[1409:13]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:BLOCK[1392:28]:BLOCK[1394:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:BLOCK[1392:28]:EXPR_VOID[1392:13]:SETNAME[1392:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1390:12]:BLOCK[1390:37]:LOCAL_BLOCK[1392:4]:LOOP[1392:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1415:17]:BLOCK[1415:35]:BLOCK[1418:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1438:18]:BLOCK[1438:36]:BLOCK[1441:4]:BLOCK[1441:33]:BLOCK[1446:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1438:18]:BLOCK[1438:36]:BLOCK[1441:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1454:18]:BLOCK[1454:36]:BLOCK[1456:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1467:16]:BLOCK[1467:34]:BLOCK[1469:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1467:16]:BLOCK[1467:34]:BLOCK[1471:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1140:0]:SETPROP[1140:0]:OBJECTLIT[1140:18]:FUNCTION[1476:16]:BLOCK[1476:34]:BLOCK[1478:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[117:0]:SETPROP[117:0]:OBJECTLIT[117:31]:FUNCTION[118:14]:BLOCK[118:44]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[117:0]:SETPROP[117:0]:OBJECTLIT[117:31]:FUNCTION[126:20]:BLOCK[126:31]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[117:0]:SETPROP[117:0]:OBJECTLIT[117:31]:FUNCTION[130:8]:BLOCK[130:19]:BLOCK[131:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[117:0]:SETPROP[117:0]:OBJECTLIT[117:31]:FUNCTION[130:8]:BLOCK[130:19]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[117:0]:SETPROP[117:0]:OBJECTLIT[117:31]:FUNCTION[136:16]:BLOCK[136:27]:BLOCK[137:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[117:0]:SETPROP[117:0]:OBJECTLIT[117:31]:FUNCTION[136:16]:BLOCK[136:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[152:8]:BLOCK[152:39]:LOOP[156:4]:BLOCK[156:30]:BLOCK[157:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[152:8]:BLOCK[152:39]:LOOP[156:4]:BLOCK[156:30]:BLOCK[157:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[152:8]:BLOCK[152:39]:LOOP[156:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[168:7]:BLOCK[168:45]:RETURN[172:4]:CALL[172:11]:FUNCTION[172:30]:BLOCK[172:46]:BLOCK[173:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[229:17]:BLOCK[229:37]:BLOCK[231:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[229:17]:BLOCK[229:37]:RETURN[233:4]:CALL[233:11]:FUNCTION[233:55]:BLOCK[233:76]:BLOCK[234:6]:BLOCK[234:39]:BLOCK[238:8]:BLOCK[238:38]:BLOCK[239:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[229:17]:BLOCK[229:37]:RETURN[233:4]:CALL[233:11]:FUNCTION[233:55]:BLOCK[233:76]:BLOCK[234:6]:BLOCK[234:39]:BLOCK[238:8]:BLOCK[238:38]:BLOCK[241:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[229:17]:BLOCK[229:37]:RETURN[233:4]:CALL[233:11]:FUNCTION[233:55]:BLOCK[233:76]:BLOCK[234:6]:BLOCK[234:39]:BLOCK[238:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[229:17]:BLOCK[229:37]:RETURN[233:4]:CALL[233:11]:FUNCTION[233:55]:BLOCK[233:76]:BLOCK[234:6]:BLOCK[234:39]:BLOCK[238:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[229:17]:BLOCK[229:37]:RETURN[233:4]:CALL[233:11]:FUNCTION[233:55]:BLOCK[233:76]:BLOCK[234:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[258:12]:BLOCK[258:23]:BLOCK[260:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[258:12]:BLOCK[258:23]:LOOP[266:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[284:11]:BLOCK[284:37]:BLOCK[286:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[284:11]:BLOCK[284:37]:BLOCK[286:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[151:0]:CALL[151:0]:OBJECTLIT[151:32]:FUNCTION[284:11]:BLOCK[284:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:BLOCK[1600:2]:BLOCK[1600:41]:EXPR_VOID[1604:5]:CALL[1604:5]:FUNCTION[1604:68]:BLOCK[1604:84]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:BLOCK[1600:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:FUNCTION[1590:2]:BLOCK[1590:52]:LOCAL_BLOCK[1593:4]:LOOP[1593:4]:BLOCK[1593:34]:BLOCK[1593:34]:BLOCK[1595:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:FUNCTION[1590:2]:BLOCK[1590:52]:LOCAL_BLOCK[1593:4]:LOOP[1593:4]:BLOCK[1593:34]:EXPR_VOID[1593:13]:SETNAME[1593:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:FUNCTION[1590:2]:BLOCK[1590:52]:LOCAL_BLOCK[1593:4]:LOOP[1593:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:FUNCTION[1590:2]:BLOCK[1590:52]:LOCAL_BLOCK[1593:4]:LOOP[1593:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:FUNCTION[1590:2]:BLOCK[1590:52]:LOCAL_BLOCK[1593:4]:LOOP[1593:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:FUNCTION[1590:2]:BLOCK[1590:52]:LOCAL_BLOCK[1593:4]:LOOP[1593:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:FUNCTION[1590:2]:BLOCK[1590:52]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1587:0]:SETPROP[1587:0]:FUNCTION[1587:21]:BLOCK[1587:39]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1616:0]:SETPROP[1616:0]:FUNCTION[1616:21]:BLOCK[1616:41]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:BLOCK[1625:4]:BLOCK[1625:59]:TRY[1626:6]:CATCH[1628:8]:BLOCK[1629:8]:BLOCK[1630:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:BLOCK[1625:4]:BLOCK[1625:59]:TRY[1626:6]:CATCH[1628:8]:BLOCK[1629:8]:BLOCK[1630:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:BLOCK[1625:4]:BLOCK[1625:59]:TRY[1626:6]:CATCH[1628:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:BLOCK[1625:4]:BLOCK[1636:11]:BLOCK[1638:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:BLOCK[1625:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:BLOCK[1625:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:EXPR_VOID[1642:4]:CALL[1642:4]:FUNCTION[1642:15]:BLOCK[1642:26]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1620:9]:SETPROP[1620:9]:OBJECTLIT[1620:31]:FUNCTION[1621:14]:BLOCK[1621:41]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1655:10]:SETPROP[1655:10]:CALL[1655:29]:OBJECTLIT[1655:82]:FUNCTION[1656:19]:BLOCK[1656:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1655:10]:SETPROP[1655:10]:CALL[1655:29]:OBJECTLIT[1655:82]:FUNCTION[1660:17]:BLOCK[1660:37]:EXPR_VOID[1661:4]:CALL[1661:4]:CALL[1661:20]:GETPROP[1663:7]:FUNCTION[1661:20]:BLOCK[1661:39]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1655:10]:SETPROP[1655:10]:CALL[1655:29]:OBJECTLIT[1655:82]:FUNCTION[1660:17]:BLOCK[1660:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1668:10]:SETPROP[1668:10]:CALL[1668:26]:OBJECTLIT[1668:78]:FUNCTION[1669:19]:BLOCK[1669:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1668:10]:SETPROP[1668:10]:CALL[1668:26]:OBJECTLIT[1668:78]:FUNCTION[1674:17]:BLOCK[1674:37]:EXPR_VOID[1675:4]:CALL[1675:4]:CALL[1675:35]:GETPROP[1677:7]:FUNCTION[1675:35]:BLOCK[1675:54]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1668:10]:SETPROP[1668:10]:CALL[1668:26]:OBJECTLIT[1668:78]:FUNCTION[1674:17]:BLOCK[1674:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1682:10]:SETPROP[1682:10]:CALL[1682:29]:OBJECTLIT[1682:80]:FUNCTION[1683:19]:BLOCK[1683:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1682:10]:SETPROP[1682:10]:CALL[1682:29]:OBJECTLIT[1682:80]:FUNCTION[1688:17]:BLOCK[1688:37]:EXPR_VOID[1689:4]:CALL[1689:4]:CALL[1689:20]:GETPROP[1691:7]:FUNCTION[1689:20]:BLOCK[1689:39]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1682:10]:SETPROP[1682:10]:CALL[1682:29]:OBJECTLIT[1682:80]:FUNCTION[1688:17]:BLOCK[1688:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1696:10]:SETPROP[1696:10]:CALL[1696:28]:OBJECTLIT[1696:78]:FUNCTION[1697:19]:BLOCK[1697:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1696:10]:SETPROP[1696:10]:CALL[1696:28]:OBJECTLIT[1696:78]:FUNCTION[1701:17]:BLOCK[1701:37]:EXPR_VOID[1702:4]:CALL[1702:4]:CALL[1702:20]:GETPROP[1705:7]:FUNCTION[1702:20]:BLOCK[1702:39]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1696:10]:SETPROP[1696:10]:CALL[1696:28]:OBJECTLIT[1696:78]:FUNCTION[1701:17]:BLOCK[1701:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1712:8]:SETPROP[1712:8]:OBJECTLIT[1712:31]:FUNCTION[1713:14]:BLOCK[1713:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1712:8]:SETPROP[1712:8]:OBJECTLIT[1712:31]:FUNCTION[1717:9]:BLOCK[1717:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1712:8]:SETPROP[1712:8]:OBJECTLIT[1712:31]:FUNCTION[1723:7]:BLOCK[1723:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1712:8]:SETPROP[1712:8]:OBJECTLIT[1712:31]:FUNCTION[1727:7]:BLOCK[1727:32]:BLOCK[1728:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1712:8]:SETPROP[1712:8]:OBJECTLIT[1712:31]:FUNCTION[1727:7]:BLOCK[1727:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1712:8]:SETPROP[1712:8]:OBJECTLIT[1712:31]:FUNCTION[1732:10]:BLOCK[1732:38]:BLOCK[1733:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1712:8]:SETPROP[1712:8]:OBJECTLIT[1712:31]:FUNCTION[1732:10]:BLOCK[1732:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1745:14]:BLOCK[1745:35]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:BLOCK[1755:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:BLOCK[1764:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:BLOCK[1778:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:FUNCTION[1753:4]:BLOCK[1753:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:LOOP[1758:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:LOOP[1766:4]:BLOCK[1766:68]:SWITCH[1768:6]:CASE[1771:8]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:LOOP[1766:4]:BLOCK[1766:68]:SWITCH[1768:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:LOOP[1766:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1752:19]:BLOCK[1752:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1784:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1786:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1788:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1790:4]:LOOP[1791:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1790:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1793:4]:BLOCK[1793:36]:EXPR_VOID[1794:6]:CALL[1794:6]:FUNCTION[1794:18]:BLOCK[1794:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1793:4]:BLOCK[1793:36]:EXPR_VOID[1794:6]:CALL[1794:6]:FUNCTION[1794:18]:BLOCK[1794:38]:SWITCH[1800:8]:CASE[1807:10]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1793:4]:BLOCK[1793:36]:EXPR_VOID[1794:6]:CALL[1794:6]:FUNCTION[1794:18]:BLOCK[1794:38]:SWITCH[1800:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1781:24]:BLOCK[1781:35]:BLOCK[1793:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1817:18]:BLOCK[1817:29]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1823:16]:BLOCK[1823:32]:BLOCK[1826:4]:BLOCK[1827:6]:BLOCK[1828:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1823:16]:BLOCK[1823:32]:BLOCK[1826:4]:BLOCK[1827:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1823:16]:BLOCK[1823:32]:BLOCK[1826:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1823:16]:BLOCK[1823:32]:LOOP[1834:4]:BLOCK[1835:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1744:0]:SETPROP[1744:0]:OBJECTLIT[1744:21]:FUNCTION[1823:16]:BLOCK[1823:32]:LOOP[1834:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1846:0]:CALL[1846:0]:OBJECTLIT[1846:24]:FUNCTION[1852:15]:BLOCK[1852:53]:BLOCK[1853:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1897:0]:SETPROP[1897:0]:OBJECTLIT[1897:15]:FUNCTION[1902:15]:BLOCK[1902:30]:RETURN[1903:4]:CALL[1903:11]:FUNCTION[1904:6]:BLOCK[1904:32]:BLOCK[1905:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1897:0]:SETPROP[1897:0]:OBJECTLIT[1897:15]:FUNCTION[1912:13]:BLOCK[1912:44]:BLOCK[1916:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1897:0]:SETPROP[1897:0]:OBJECTLIT[1897:15]:FUNCTION[1912:13]:BLOCK[1912:44]:LOOP[1918:4]:BLOCK[1918:82]:BLOCK[1920:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1897:0]:SETPROP[1897:0]:OBJECTLIT[1897:15]:FUNCTION[1912:13]:BLOCK[1912:44]:LOOP[1918:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1897:0]:SETPROP[1897:0]:OBJECTLIT[1897:15]:FUNCTION[1928:11]:BLOCK[1928:26]:EXPR_VOID[1930:4]:CALL[1930:4]:FUNCTION[1930:28]:BLOCK[1930:46]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1897:0]:SETPROP[1897:0]:OBJECTLIT[1897:15]:FUNCTION[1937:10]:BLOCK[1937:25]:EXPR_VOID[1939:4]:CALL[1939:4]:FUNCTION[1939:28]:BLOCK[1939:46]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1975:5]:SETPROP[1975:5]:OBJECTLIT[1975:23]:FUNCTION[1976:13]:BLOCK[1976:31]:BLOCK[1978:4]:BLOCK[1978:43]:BLOCK[1980:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1975:5]:SETPROP[1975:5]:OBJECTLIT[1975:23]:FUNCTION[1976:13]:BLOCK[1976:31]:BLOCK[1978:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[1975:5]:SETPROP[1975:5]:OBJECTLIT[1975:23]:FUNCTION[2004:12]:BLOCK[2004:30]:BLOCK[2007:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2033:5]:SETPROP[2033:5]:OBJECTLIT[2033:27]:FUNCTION[2034:9]:BLOCK[2034:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2033:5]:SETPROP[2033:5]:OBJECTLIT[2033:27]:FUNCTION[2034:9]:BLOCK[2034:27]:SWITCH[2035:4]:CASE[2036:6]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2033:5]:SETPROP[2033:5]:OBJECTLIT[2033:27]:FUNCTION[2034:9]:BLOCK[2034:27]:SWITCH[2035:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2033:5]:SETPROP[2033:5]:OBJECTLIT[2033:27]:FUNCTION[2062:14]:BLOCK[2062:32]:BLOCK[2064:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2033:5]:SETPROP[2033:5]:OBJECTLIT[2033:27]:FUNCTION[2062:14]:BLOCK[2062:32]:LOOP[2066:4]:BLOCK[2066:50]:BLOCK[2068:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2033:5]:SETPROP[2033:5]:OBJECTLIT[2033:27]:FUNCTION[2062:14]:BLOCK[2062:32]:LOOP[2066:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2081:0]:SETPROP[2081:0]:FUNCTION[2081:25]:BLOCK[2081:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2082:9]:SETPROP[2082:9]:OBJECTLIT[2082:35]:FUNCTION[2083:14]:BLOCK[2083:53]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2082:9]:SETPROP[2082:9]:OBJECTLIT[2082:35]:FUNCTION[2092:20]:BLOCK[2092:31]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2082:9]:SETPROP[2082:9]:OBJECTLIT[2082:35]:FUNCTION[2096:16]:BLOCK[2096:27]:BLOCK[2100:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2082:9]:SETPROP[2082:9]:OBJECTLIT[2082:35]:FUNCTION[2096:16]:BLOCK[2096:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2123:0]:SETPROP[2123:0]:FUNCTION[2123:25]:BLOCK[2123:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2125:14]:BLOCK[2125:42]:BLOCK[2130:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2125:14]:BLOCK[2125:42]:BLOCK[2130:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2125:14]:BLOCK[2125:42]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2136:18]:BLOCK[2136:29]:BLOCK[2138:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2136:18]:BLOCK[2136:29]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2144:25]:BLOCK[2144:36]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2148:20]:BLOCK[2148:38]:BLOCK[2149:4]:BLOCK[2149:22]:SWITCH[2150:6]:CASE[2151:8]:BLOCK[0:0]:BLOCK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2148:20]:BLOCK[2148:38]:BLOCK[2149:4]:BLOCK[2149:22]:SWITCH[2150:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2148:20]:BLOCK[2148:38]:BLOCK[2149:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2124:9]:SETPROP[2124:9]:OBJECTLIT[2124:35]:FUNCTION[2148:20]:BLOCK[2148:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2214:8]:BLOCK[2214:24]:BLOCK[2215:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2214:8]:BLOCK[2214:24]:BLOCK[2215:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2214:8]:BLOCK[2214:24]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2226:15]:BLOCK[2226:40]:LOOP[2228:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2236:20]:BLOCK[2236:66]:BLOCK[2237:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2236:20]:BLOCK[2236:66]:BLOCK[2238:4]:BLOCK[2241:11]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2236:20]:BLOCK[2236:66]:BLOCK[2238:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2236:20]:BLOCK[2236:66]:BLOCK[2238:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2236:20]:BLOCK[2236:66]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2247:15]:BLOCK[2247:26]:BLOCK[2248:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2247:15]:BLOCK[2247:26]:LOOP[2249:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2247:15]:BLOCK[2247:26]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2256:11]:BLOCK[2256:57]:BLOCK[2260:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2256:11]:BLOCK[2256:57]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2268:17]:BLOCK[2268:63]:BLOCK[2272:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2268:17]:BLOCK[2268:63]:BLOCK[2277:4]:BLOCK[2279:11]:BLOCK[2279:36]:TRY[2280:6]:CATCH[2282:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2268:17]:BLOCK[2268:63]:BLOCK[2277:4]:BLOCK[2279:11]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2268:17]:BLOCK[2268:63]:BLOCK[2277:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2268:17]:BLOCK[2268:63]:BLOCK[2277:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[2180:0]:CALL[2180:0]:OBJECTLIT[2180:21]:FUNCTION[2268:17]:BLOCK[2268:63]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[293:17]:SETPROP[293:17]:FUNCTION[293:43]:BLOCK[293:65]:BLOCK[294:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[29:0]:SETPROP[29:0]:FUNCTION[29:16]:BLOCK[29:46]:LOCAL_BLOCK[30:2]:LOOP[30:2]:BLOCK[30:31]:EXPR_VOID[30:11]:SETNAME[30:11]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[29:0]:SETPROP[29:0]:FUNCTION[29:16]:BLOCK[29:46]:LOCAL_BLOCK[30:2]:LOOP[30:2]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[29:0]:SETPROP[29:0]:FUNCTION[29:16]:BLOCK[29:46]:LOCAL_BLOCK[30:2]:LOOP[30:2]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[29:0]:SETPROP[29:0]:FUNCTION[29:16]:BLOCK[29:46]:LOCAL_BLOCK[30:2]:LOOP[30:2]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[29:0]:SETPROP[29:0]:FUNCTION[29:16]:BLOCK[29:46]:LOCAL_BLOCK[30:2]:LOOP[30:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[303:0]:SETPROP[303:0]:OBJECTLIT[303:21]:FUNCTION[304:14]:BLOCK[304:42]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[303:0]:SETPROP[303:0]:OBJECTLIT[303:21]:FUNCTION[309:12]:BLOCK[309:29]:RETURN[310:4]:CALL[310:11]:FUNCTION[310:44]:BLOCK[310:60]:BLOCK[312:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[37:11]:BLOCK[37:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[37:11]:BLOCK[37:28]:TRY[38:4]:BLOCK[38:8]:BLOCK[39:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[37:11]:BLOCK[37:28]:TRY[38:4]:BLOCK[38:8]:BLOCK[40:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[37:11]:BLOCK[37:28]:TRY[38:4]:CATCH[42:6]:BLOCK[43:6]:BLOCK[43:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[37:11]:BLOCK[37:28]:TRY[38:4]:CATCH[42:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[48:8]:BLOCK[48:25]:LOCAL_BLOCK[50:4]:LOOP[50:4]:BLOCK[51:6]:EXPR_VOID[50:13]:SETNAME[50:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[48:8]:BLOCK[48:25]:LOCAL_BLOCK[50:4]:LOOP[50:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[48:8]:BLOCK[48:25]:LOCAL_BLOCK[50:4]:LOOP[50:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[48:8]:BLOCK[48:25]:LOCAL_BLOCK[50:4]:LOOP[50:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[48:8]:BLOCK[48:25]:LOCAL_BLOCK[50:4]:LOOP[50:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[55:10]:BLOCK[55:27]:LOCAL_BLOCK[57:4]:LOOP[57:4]:BLOCK[58:6]:EXPR_VOID[57:13]:SETNAME[57:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[55:10]:BLOCK[55:27]:LOCAL_BLOCK[57:4]:LOOP[57:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[55:10]:BLOCK[55:27]:LOCAL_BLOCK[57:4]:LOOP[57:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[55:10]:BLOCK[55:27]:LOCAL_BLOCK[57:4]:LOOP[57:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[36:0]:CALL[36:0]:OBJECTLIT[36:22]:FUNCTION[55:10]:BLOCK[55:27]:LOCAL_BLOCK[57:4]:LOOP[57:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[537:0]:CALL[537:0]:OBJECTLIT[537:31]:FUNCTION[538:9]:BLOCK[538:28]:LOOP[539:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[537:0]:CALL[537:0]:OBJECTLIT[537:31]:FUNCTION[538:9]:BLOCK[538:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[537:0]:CALL[537:0]:OBJECTLIT[537:31]:FUNCTION[576:11]:BLOCK[576:28]:LOOP[577:4]:BLOCK[578:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[537:0]:CALL[537:0]:OBJECTLIT[537:31]:FUNCTION[576:11]:BLOCK[576:28]:LOOP[577:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[635:0]:CALL[635:0]:OBJECTLIT[635:20]:FUNCTION[636:17]:BLOCK[636:31]:EXPR_VOID[639:3]:CALL[639:3]:FUNCTION[639:34]:BLOCK[639:49]:BLOCK[640:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[635:0]:CALL[635:0]:OBJECTLIT[635:20]:FUNCTION[636:17]:BLOCK[636:31]:EXPR_VOID[639:3]:CALL[639:3]:FUNCTION[639:34]:BLOCK[639:49]:BLOCK[642:6]:BLOCK[642:57]:BLOCK[644:8]:BLOCK[645:13]:EXPR_VOID[647:10]:CALL[647:10]:FUNCTION[647:22]:BLOCK[647:38]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[635:0]:CALL[635:0]:OBJECTLIT[635:20]:FUNCTION[636:17]:BLOCK[636:31]:EXPR_VOID[639:3]:CALL[639:3]:FUNCTION[639:34]:BLOCK[639:49]:BLOCK[642:6]:BLOCK[642:57]:BLOCK[644:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[635:0]:CALL[635:0]:OBJECTLIT[635:20]:FUNCTION[636:17]:BLOCK[636:31]:EXPR_VOID[639:3]:CALL[639:3]:FUNCTION[639:34]:BLOCK[639:49]:BLOCK[642:6]:BLOCK[642:57]:BLOCK[644:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[635:0]:CALL[635:0]:OBJECTLIT[635:20]:FUNCTION[636:17]:BLOCK[636:31]:EXPR_VOID[639:3]:CALL[639:3]:FUNCTION[639:34]:BLOCK[639:49]:BLOCK[642:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[635:0]:CALL[635:0]:OBJECTLIT[635:20]:FUNCTION[636:17]:BLOCK[636:31]:EXPR_VOID[639:3]:CALL[639:3]:FUNCTION[639:34]:BLOCK[639:49]:BLOCK[654:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[635:0]:CALL[635:0]:OBJECTLIT[635:20]:FUNCTION[636:17]:BLOCK[636:31]:EXPR_VOID[639:3]:CALL[639:3]:FUNCTION[639:34]:BLOCK[639:49]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[664:9]:BLOCK[664:28]:LOCAL_BLOCK[665:4]:LOOP[665:4]:BLOCK[665:26]:BLOCK[665:26]:BLOCK[667:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[664:9]:BLOCK[664:28]:LOCAL_BLOCK[665:4]:LOOP[665:4]:BLOCK[665:26]:EXPR_VOID[665:13]:SETNAME[665:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[664:9]:BLOCK[664:28]:LOCAL_BLOCK[665:4]:LOOP[665:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[664:9]:BLOCK[664:28]:LOCAL_BLOCK[665:4]:LOOP[665:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[664:9]:BLOCK[664:28]:LOCAL_BLOCK[665:4]:LOOP[665:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[664:9]:BLOCK[664:28]:LOCAL_BLOCK[665:4]:LOOP[665:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[664:9]:BLOCK[664:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[691:10]:BLOCK[691:21]:LOOP[693:4]:BLOCK[693:63]:BLOCK[695:6]:BLOCK[695:30]:BLOCK[696:8]:BLOCK[697:13]:BLOCK[698:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[691:10]:BLOCK[691:21]:LOOP[693:4]:BLOCK[693:63]:BLOCK[695:6]:BLOCK[695:30]:BLOCK[696:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[691:10]:BLOCK[691:21]:LOOP[693:4]:BLOCK[693:63]:BLOCK[695:6]:BLOCK[695:30]:BLOCK[696:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[691:10]:BLOCK[691:21]:LOOP[693:4]:BLOCK[693:63]:BLOCK[695:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[663:0]:CALL[663:0]:OBJECTLIT[663:30]:FUNCTION[691:10]:BLOCK[691:21]:LOOP[693:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[724:0]:CALL[724:0]:OBJECTLIT[724:37]:FUNCTION[725:14]:BLOCK[725:46]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[724:0]:CALL[724:0]:OBJECTLIT[724:37]:FUNCTION[731:9]:BLOCK[731:28]:LOOP[733:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[724:0]:CALL[724:0]:OBJECTLIT[724:37]:FUNCTION[731:9]:BLOCK[731:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[724:0]:CALL[724:0]:OBJECTLIT[724:37]:FUNCTION[739:11]:BLOCK[739:27]:BLOCK[740:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[724:0]:CALL[724:0]:OBJECTLIT[724:37]:FUNCTION[739:11]:BLOCK[739:27]:BLOCK[742:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[767:9]:BLOCK[767:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[771:12]:BLOCK[771:32]:BLOCK[772:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[771:12]:BLOCK[771:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[776:14]:BLOCK[776:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[780:12]:BLOCK[780:57]:EXPR_VOID[781:4]:CALL[781:4]:FUNCTION[781:14]:BLOCK[781:34]:BLOCK[782:6]:BLOCK[782:52]:TRY[783:8]:CATCH[785:10]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[780:12]:BLOCK[780:57]:EXPR_VOID[781:4]:CALL[781:4]:FUNCTION[781:14]:BLOCK[781:34]:BLOCK[782:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[780:12]:BLOCK[780:57]:EXPR_VOID[781:4]:CALL[781:4]:FUNCTION[781:14]:BLOCK[781:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[764:0]:SETPROP[764:0]:OBJECTLIT[764:18]:FUNCTION[780:12]:BLOCK[780:57]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[793:0]:CALL[793:0]:OBJECTLIT[793:25]:FUNCTION[794:12]:BLOCK[794:23]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[793:0]:CALL[793:0]:OBJECTLIT[793:25]:FUNCTION[797:14]:BLOCK[797:25]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[802:0]:SETPROP[802:0]:FUNCTION[802:12]:BLOCK[802:23]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[803:5]:SETPROP[803:5]:OBJECTLIT[803:22]:FUNCTION[804:14]:BLOCK[804:32]:BLOCK[815:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[803:5]:SETPROP[803:5]:OBJECTLIT[803:22]:FUNCTION[804:14]:BLOCK[804:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[81:0]:CALL[81:0]:OBJECTLIT[81:32]:FUNCTION[82:15]:BLOCK[82:26]:BLOCK[84:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[827:14]:BLOCK[827:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:BLOCK[838:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:BLOCK[845:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:BLOCK[848:4]:EXPR_VOID[848:38]:SETPROP_OP[848:38]:ADD[0:0]:ADD
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:BLOCK[848:4]:EXPR_VOID[848:38]:SETPROP_OP[848:38]:ADD[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:BLOCK[848:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:TRY[851:4]:BLOCK[851:8]:BLOCK[857:6]:EXPR_VOID[858:8]:CALL[858:8]:CALL[858:19]:GETPROP[858:62]:FUNCTION[858:19]:BLOCK[858:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:TRY[851:4]:BLOCK[851:8]:BLOCK[857:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:TRY[851:4]:BLOCK[851:8]:BLOCK[868:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[833:11]:BLOCK[833:25]:TRY[851:4]:CATCH[872:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[877:17]:BLOCK[877:28]:BLOCK[879:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[877:17]:BLOCK[877:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:BLOCK[890:4]:BLOCK[890:31]:BLOCK[898:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:BLOCK[890:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:BLOCK[904:4]:BLOCK[904:56]:BLOCK[907:6]:EXPR_VOID[911:8]:CALL[911:8]:FUNCTION[911:24]:BLOCK[911:39]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:BLOCK[904:4]:BLOCK[904:56]:BLOCK[907:6]:LOOP[908:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:BLOCK[904:4]:BLOCK[904:56]:BLOCK[907:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:BLOCK[904:4]:BLOCK[904:56]:BLOCK[907:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:BLOCK[904:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:LOCAL_BLOCK[914:4]:LOOP[914:4]:BLOCK[915:6]:EXPR_VOID[914:13]:SETNAME[914:13]:ENUM_ID[0:0]:ENUM_ID
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:LOCAL_BLOCK[914:4]:LOOP[914:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:LOCAL_BLOCK[914:4]:LOOP[914:4]:IFEQ[0:0]:ENUM_NEXT[0:0]:ENUM_NEXT
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:LOCAL_BLOCK[914:4]:LOOP[914:4]:IFEQ[0:0]:IFEQ
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:LOCAL_BLOCK[914:4]:LOOP[914:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[883:21]:BLOCK[883:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[923:23]:BLOCK[923:44]:BLOCK[927:4]:BLOCK[927:29]:BLOCK[937:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[923:23]:BLOCK[923:44]:BLOCK[927:4]:BLOCK[927:29]:TRY[928:6]:CATCH[933:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[923:23]:BLOCK[923:44]:BLOCK[927:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[923:23]:BLOCK[923:44]:BLOCK[949:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[923:23]:BLOCK[923:44]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[923:23]:BLOCK[923:44]:TRY[942:4]:CATCH[945:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[955:13]:BLOCK[955:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[955:13]:BLOCK[955:28]:TRY[956:4]:CATCH[958:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[961:12]:BLOCK[961:23]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[961:12]:BLOCK[961:23]:TRY[962:4]:CATCH[965:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[968:16]:BLOCK[968:27]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[968:16]:BLOCK[968:27]:TRY[969:4]:CATCH[971:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:EXPR_RESULT[824:5]:SETPROP[824:5]:CALL[824:25]:OBJECTLIT[824:56]:FUNCTION[976:21]:BLOCK[976:41]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[1003:17]:BLOCK[1003:28]:BLOCK[1007:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[1003:17]:BLOCK[1003:28]:BLOCK[1009:4]:BLOCK[1009:32]:BLOCK[1010:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[1003:17]:BLOCK[1003:28]:BLOCK[1009:4]:BLOCK[1009:32]:BLOCK[1010:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[1003:17]:BLOCK[1003:28]:BLOCK[1009:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[1003:17]:BLOCK[1003:28]:BLOCK[1016:4]:BLOCK[1016:24]:BLOCK[1017:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[1003:17]:BLOCK[1003:28]:BLOCK[1016:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[1003:17]:BLOCK[1003:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[985:14]:BLOCK[985:48]:EXPR_VOID[995:9]:SETPROP[995:9]:CALL[995:31]:GETPROP[998:7]:FUNCTION[995:31]:BLOCK[995:58]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:EXPR_RESULT[984:0]:CALL[984:0]:OBJECTLIT[984:77]:FUNCTION[985:14]:BLOCK[985:48]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:FUNCTION[1065:0]:BLOCK[1065:20]:BLOCK[1066:2]:BLOCK[1066:28]:LOOP[1067:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:FUNCTION[1065:0]:BLOCK[1065:20]:BLOCK[1066:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:FUNCTION[1065:0]:BLOCK[1065:20]:BLOCK[1071:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:FUNCTION[718:0]:BLOCK[718:20]:BLOCK[719:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[1872:0]:NAME[1872:4]:OBJECTLIT[1872:11]:FUNCTION[1878:21]:BLOCK[1878:49]:VAR[1879:4]:NAME[1879:8]:CALL[1879:15]:FUNCTION[1879:35]:BLOCK[1879:61]:BLOCK[1880:6]:BLOCK[1880:45]:BLOCK[1882:8]:BLOCK[1882:32]:BLOCK[1883:10]:BLOCK[1883:27]:BLOCK[1884:12]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[1872:0]:NAME[1872:4]:OBJECTLIT[1872:11]:FUNCTION[1878:21]:BLOCK[1878:49]:VAR[1879:4]:NAME[1879:8]:CALL[1879:15]:FUNCTION[1879:35]:BLOCK[1879:61]:BLOCK[1880:6]:BLOCK[1880:45]:BLOCK[1882:8]:BLOCK[1882:32]:BLOCK[1883:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[1872:0]:NAME[1872:4]:OBJECTLIT[1872:11]:FUNCTION[1878:21]:BLOCK[1878:49]:VAR[1879:4]:NAME[1879:8]:CALL[1879:15]:FUNCTION[1879:35]:BLOCK[1879:61]:BLOCK[1880:6]:BLOCK[1880:45]:BLOCK[1882:8]:BLOCK[1882:32]:BLOCK[1883:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[1872:0]:NAME[1872:4]:OBJECTLIT[1872:11]:FUNCTION[1878:21]:BLOCK[1878:49]:VAR[1879:4]:NAME[1879:8]:CALL[1879:15]:FUNCTION[1879:35]:BLOCK[1879:61]:BLOCK[1880:6]:BLOCK[1880:45]:BLOCK[1882:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[1872:0]:NAME[1872:4]:OBJECTLIT[1872:11]:FUNCTION[1878:21]:BLOCK[1878:49]:VAR[1879:4]:NAME[1879:8]:CALL[1879:15]:FUNCTION[1879:35]:BLOCK[1879:61]:BLOCK[1880:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[19:0]:NAME[19:4]:OBJECTLIT[19:12]:FUNCTION[20:10]:BLOCK[20:21]:RETURN[21:4]:FUNCTION[21:11]:BLOCK[21:22]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2298:11]:BLOCK[2298:22]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2329:20]:BLOCK[2329:38]:LOOP[2331:4]:BLOCK[2331:7]:BLOCK[2335:6]:BLOCK[2335:19]:BLOCK[2336:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2329:20]:BLOCK[2329:38]:LOOP[2331:4]:BLOCK[2331:7]:BLOCK[2335:6]:BLOCK[2335:19]:BLOCK[2338:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2329:20]:BLOCK[2329:38]:LOOP[2331:4]:BLOCK[2331:7]:BLOCK[2335:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2344:16]:BLOCK[2344:34]:BLOCK[2345:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2344:16]:BLOCK[2344:34]:BLOCK[2346:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2344:16]:BLOCK[2344:34]:LOOP[2348:4]:BLOCK[2349:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2344:16]:BLOCK[2344:34]:LOOP[2348:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2356:10]:BLOCK[2356:34]:BLOCK[2357:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2383:11]:BLOCK[2383:35]:BLOCK[2384:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2383:11]:BLOCK[2383:35]:BLOCK[2385:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2383:11]:BLOCK[2383:35]:BLOCK[2388:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2383:11]:BLOCK[2383:35]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2393:8]:BLOCK[2393:29]:LOOP[2397:4]:BLOCK[2397:7]:BLOCK[2402:6]:BLOCK[2403:8]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2393:8]:BLOCK[2393:29]:LOOP[2397:4]:BLOCK[2397:7]:BLOCK[2402:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2393:8]:BLOCK[2393:29]:LOOP[2408:4]:BLOCK[2408:7]:BLOCK[2409:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2438:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2444:4]:BLOCK[2444:33]:EXPR_VOID[2444:33]:SETELEM_OP[2444:33]:SUB[0:0]:SUB
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2444:4]:BLOCK[2444:33]:EXPR_VOID[2444:33]:SETELEM_OP[2444:33]:SUB[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2444:4]:BLOCK[2444:33]:EXPR_VOID[2445:42]:SETELEM_OP[2445:42]:SUB[0:0]:SUB
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2444:4]:BLOCK[2444:33]:EXPR_VOID[2445:42]:SETELEM_OP[2445:42]:SUB[0:0]:USE_STACK[0:0]:USE_STACK
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2444:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2450:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2451:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2452:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:BLOCK[2453:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2418:9]:BLOCK[2418:34]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2456:14]:BLOCK[2456:32]:BLOCK[2458:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2456:14]:BLOCK[2456:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2479:14]:BLOCK[2479:32]:BLOCK[2481:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[2290:0]:NAME[2290:4]:OBJECTLIT[2290:15]:FUNCTION[2479:14]:BLOCK[2479:32]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[322:8]:BLOCK[322:27]:TRY[324:4]:BLOCK[324:8]:EXPR_VOID[325:6]:CALL[325:6]:FUNCTION[325:17]:BLOCK[325:33]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[322:8]:BLOCK[322:27]:TRY[324:4]:BLOCK[324:8]:EXPR_VOID[325:6]:CALL[325:6]:FUNCTION[325:17]:BLOCK[325:33]:TRY[326:8]:CATCH[328:10]:BLOCK[329:10]:BLOCK[329:10]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[322:8]:BLOCK[322:27]:TRY[324:4]:BLOCK[324:8]:EXPR_VOID[325:6]:CALL[325:6]:FUNCTION[325:17]:BLOCK[325:33]:TRY[326:8]:CATCH[328:10]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[322:8]:BLOCK[322:27]:TRY[324:4]:CATCH[332:6]:BLOCK[333:6]:BLOCK[333:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[322:8]:BLOCK[322:27]:TRY[324:4]:CATCH[332:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[338:13]:BLOCK[338:40]:LOOP[340:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[345:7]:BLOCK[345:26]:EXPR_VOID[347:4]:CALL[347:4]:FUNCTION[347:14]:BLOCK[347:37]:BLOCK[349:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[345:7]:BLOCK[345:26]:EXPR_VOID[347:4]:CALL[347:4]:FUNCTION[347:14]:BLOCK[347:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[354:7]:BLOCK[354:26]:EXPR_VOID[356:4]:CALL[356:4]:FUNCTION[356:14]:BLOCK[356:37]:BLOCK[357:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[354:7]:BLOCK[354:26]:EXPR_VOID[356:4]:CALL[356:4]:FUNCTION[356:14]:BLOCK[356:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[363:11]:BLOCK[363:30]:EXPR_VOID[365:4]:CALL[365:4]:FUNCTION[365:14]:BLOCK[365:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[371:10]:BLOCK[371:29]:EXPR_VOID[373:4]:CALL[373:4]:FUNCTION[373:14]:BLOCK[373:37]:BLOCK[374:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[371:10]:BLOCK[371:29]:EXPR_VOID[373:4]:CALL[373:4]:FUNCTION[373:14]:BLOCK[373:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[382:11]:BLOCK[382:30]:EXPR_VOID[384:4]:CALL[384:4]:FUNCTION[384:14]:BLOCK[384:37]:BLOCK[385:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[382:11]:BLOCK[382:30]:EXPR_VOID[384:4]:CALL[384:4]:FUNCTION[384:14]:BLOCK[384:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[391:8]:BLOCK[391:36]:EXPR_VOID[393:4]:CALL[393:4]:FUNCTION[393:14]:BLOCK[393:37]:BLOCK[395:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[391:8]:BLOCK[391:36]:EXPR_VOID[393:4]:CALL[393:4]:FUNCTION[393:14]:BLOCK[393:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[401:11]:BLOCK[401:28]:EXPR_VOID[403:4]:CALL[403:4]:FUNCTION[403:14]:BLOCK[403:30]:BLOCK[404:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[401:11]:BLOCK[401:28]:EXPR_VOID[403:4]:CALL[403:4]:FUNCTION[403:14]:BLOCK[403:30]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[412:14]:BLOCK[412:41]:RETURN[414:4]:CALL[414:11]:FUNCTION[414:34]:BLOCK[414:50]:LOOP[415:6]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[420:10]:BLOCK[420:35]:EXPR_VOID[421:4]:CALL[421:4]:FUNCTION[421:14]:BLOCK[421:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[434:7]:BLOCK[434:26]:EXPR_VOID[436:4]:CALL[436:4]:FUNCTION[436:14]:BLOCK[436:37]:BLOCK[438:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[434:7]:BLOCK[434:26]:EXPR_VOID[436:4]:CALL[436:4]:FUNCTION[436:14]:BLOCK[436:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[444:7]:BLOCK[444:26]:EXPR_VOID[446:4]:CALL[446:4]:FUNCTION[446:14]:BLOCK[446:37]:BLOCK[448:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[444:7]:BLOCK[444:26]:EXPR_VOID[446:4]:CALL[446:4]:FUNCTION[446:14]:BLOCK[446:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[454:13]:BLOCK[454:32]:EXPR_VOID[456:4]:CALL[456:4]:FUNCTION[456:14]:BLOCK[456:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[463:9]:BLOCK[463:28]:EXPR_VOID[465:4]:CALL[465:4]:FUNCTION[465:14]:BLOCK[465:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[471:10]:BLOCK[471:29]:EXPR_VOID[473:4]:CALL[473:4]:FUNCTION[473:14]:BLOCK[473:37]:BLOCK[474:6]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[471:10]:BLOCK[471:29]:EXPR_VOID[473:4]:CALL[473:4]:FUNCTION[473:14]:BLOCK[473:37]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[321:0]:NAME[321:4]:OBJECTLIT[321:17]:FUNCTION[493:7]:BLOCK[493:18]:BLOCK[495:4]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[520:0]:NAME[520:4]:SETPROP[520:9]:FUNCTION[520:22]:BLOCK[520:41]:BLOCK[521:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[520:0]:NAME[520:4]:SETPROP[520:9]:FUNCTION[520:22]:BLOCK[520:41]:BLOCK[522:2]:BLOCK[524:9]:LOOP[526:4]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[520:0]:NAME[520:4]:SETPROP[520:9]:FUNCTION[520:22]:BLOCK[520:41]:BLOCK[522:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[520:0]:NAME[520:4]:SETPROP[520:9]:FUNCTION[520:22]:BLOCK[520:41]:BLOCK[522:2]:TARGET[0:0]:TARGET
Missing position for node SCRIPT[0:0]:VAR[520:0]:NAME[520:4]:SETPROP[520:9]:FUNCTION[520:22]:BLOCK[520:41]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[631:0]:NAME[631:4]:FUNCTION[631:11]:BLOCK[631:25]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[8:0]:NAME[8:4]:OBJECTLIT[8:16]:FUNCTION[15:17]:BLOCK[15:28]:RETURN[0:0]:RETURN
Missing position for node SCRIPT[0:0]:VAR[98:0]:NAME[98:4]:OBJECTLIT[98:10]:FUNCTION[99:9]:BLOCK[99:20]:LOOP[102:4]:BLOCK[102:64]:TRY[104:6]:CATCH[107:8]:EMPTY[0:0]:EMPTY
Missing position for node SCRIPT[0:0]:VAR[98:0]:NAME[98:4]:OBJECTLIT[98:10]:FUNCTION[99:9]:BLOCK[99:20]:LOOP[102:4]:EMPTY[0:0]:EMPTY

<SCRIPT>/*  Prototype JavaScript framework, version 1.5.0
 *  (c) 2005-2007 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://prototype.conio.net/
 *
/*--------------------------------------------------------------------------*/

<VAR>var <NAME>Prototype = <OBJECTLIT>{
  <OBJLITNAME>Version</OBJLITNAME>: <STRING>'1.5.0'</STRING>,
  <OBJLITNAME>BrowserFeatures</OBJLITNAME>: <OBJECTLIT>{
    <OBJLITNAME>XPath</OBJLITNAME>: !!<NOT><NOT><GETPROP><NAME>document</NAME>.<STRING>evaluate</STRING></GETPROP></NOT></NOT>
  }</OBJECTLIT>,

  <OBJLITNAME>ScriptFragment</OBJLITNAME>: <STRING>'(?:&lt;script.*?&gt;)((\n|\r|.)*?)(?:&lt;\/script&gt;)'</STRING>,
  <OBJLITNAME>emptyFunction</OBJLITNAME>: <FUNCTION>function() <BLOCK>{</BLOCK>}</FUNCTION>,
  <OBJLITNAME>K</OBJLITNAME>: <FUNCTION>function(<PARAMETER>x</PARAMETER>) <BLOCK>{ <RETURN>return <NAME>x</NAME></RETURN></BLOCK> }</FUNCTION>
}</OBJECTLIT></NAME></VAR>

<VAR>var <NAME>Class = <OBJECTLIT>{
  <OBJLITNAME>create</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <FUNCTION>function() <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>initialize</STRING></GETPROP>.<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, <NAME>arguments</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION></RETURN></BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>

<VAR>var <NAME>Abstract = new <NEW><NAME>Object</NAME>()</NEW></NAME></VAR>;

<EXPR_RESULT><SETPROP><NAME>Object</NAME>.<STRING>extend</STRING> = <FUNCTION>function(<PARAMETER>destination</PARAMETER>, <PARAMETER>source</PARAMETER>) <BLOCK>{
  <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><NAME>source</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
    <EXPR_VOID><SETELEM><NAME>destination</NAME>[<NAME>property</NAME>] = <GETELEM><NAME>source</NAME>[<NAME>property</NAME>]</GETELEM></SETELEM></EXPR_VOID>;
  <GOTO><TARGET></GOTO></TARGET>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
  <RETURN>return <NAME>destination</NAME></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Object</NAME>, <OBJECTLIT>{
  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <TRY>try <BLOCK>{
      <BLOCK>if (<IFNE><SHEQ><NAME>object</NAME> === <NAME>undefined</NAME></SHEQ></IFNE>) <RETURN>return <STRING>'undefined'</STRING></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><SHEQ><NAME>object</NAME> === <NULL>null</NULL></SHEQ></IFNE>) <RETURN>return <STRING>'null'</STRING></RETURN>;</BLOCK>
      <RETURN>return <HOOK><GETPROP><NAME>object</NAME>.<STRING>inspect</STRING></GETPROP> ? <CALL><NAME>object</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL> : <CALL><NAME>object</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></HOOK></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><BLOCK>if (<IFNE><INSTANCEOF><NAME>e</NAME> instanceof <NAME>RangeError</NAME></INSTANCEOF></IFNE>) <RETURN>return <STRING>'...'</STRING></RETURN>;</BLOCK>
      <THROW>throw <NAME>e</NAME></THROW></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>keys</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>keys = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><NAME>object</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><EXPR_VOID><CALL><NAME></TARGET>keys</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>property</NAME>)<GOTO><TARGET></CALL></EXPR_VOID></GOTO></BLOCK></TARGET></LOOP>;</LOCAL_BLOCK>
    <RETURN>return <NAME>keys</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>values</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>values = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><NAME>object</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><EXPR_VOID><CALL><NAME></TARGET>values</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><NAME>object</NAME>[<NAME>property</NAME>]</GETELEM>)<GOTO><TARGET></CALL></EXPR_VOID></GOTO></BLOCK></TARGET></LOOP>;</LOCAL_BLOCK>
    <RETURN>return <NAME>values</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clone</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<OBJECTLIT>{}</OBJECTLIT>, <NAME>object</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<NAME>Function</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>bind</STRING> = <FUNCTION>function() <BLOCK>{
  <VAR>var <NAME>__method = <THIS>this</THIS></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>object = <CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL></NAME></VAR>;
  <RETURN>return <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>__method</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>object</NAME>, <CALL><NAME>args</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION></RETURN></BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>

<NAME>Function</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>bindAsEventListener</STRING> = <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
  <VAR>var <NAME>__method = <THIS>this</THIS></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>object = <CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL></NAME></VAR>;
  <RETURN>return <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>__method</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>object</NAME>, [( <CALL><ARRAYLIT><OR><NAME>event</NAME> || <GETPROP><NAME>window</NAME>.<STRING>event</STRING></GETPROP>)</OR></ARRAYLIT>].<CALL><GETPROP><STRING>concat</STRING></GETPROP>(<NAME>args</NAME></CALL>).<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION></RETURN></BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Number</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>toColorPart</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>digits = <CALL><THIS>this</THIS>.<GETPROP><STRING>toString</STRING></GETPROP>(<NUMBER>16</NUMBER>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><LT><THIS>this</THIS> &lt; <NUMBER>16</NUMBER></LT></IFNE>) <RETURN>return <ADD><STRING>'0'</STRING> + <NAME>digits</NAME></ADD></RETURN>;</BLOCK>
    <RETURN>return <NAME>digits</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>succ</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><THIS>this</THIS> + <NUMBER>1</NUMBER></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>times</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$R</NAME>(<NUMBER>0</NUMBER>, <THIS>this</THIS>, <TRUE>true</TRUE></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<NAME>iterator</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<VAR>var <NAME>Try = <OBJECTLIT>{
  <OBJLITNAME>these</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>returnValue</NAME></VAR>;

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>lambda = <GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM></NAME></VAR>;
      <TRY>try <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>returnValue</BINDNAME> = <CALL><NAME>lambda</NAME>()</CALL></SETNAME></EXPR_VOID>;
        <BREAK>break</BREAK>;
      }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH>}</TRY>
    <GOTO><TARGET><TARGET></GOTO></TARGET></TARGET>}</BLOCK></LOOP>

    <RETURN>return <NAME>returnValue</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>

/*--------------------------------------------------------------------------*/

<VAR>var <NAME>PeriodicalExecuter = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></NAME></VAR>;
<EXPR_RESULT><SETPROP><NAME>PeriodicalExecuter</NAME>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>callback</PARAMETER>, <PARAMETER>frequency</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>callback</STRING> = <NAME>callback</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>frequency</STRING> = <NAME>frequency</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>registerCallback</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>registerCallback</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>timer</STRING> = <CALL><NAME>setInterval</NAME>(<CALL><THIS>this</THIS>.<GETPROP><STRING>onTimerEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>, <MUL><GETPROP><THIS>this</THIS>.<STRING>frequency</STRING></GETPROP> * <NUMBER>1000</NUMBER></MUL>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stop</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><THIS>this</THIS>.<STRING>timer</STRING></GETPROP></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><NAME>clearInterval</NAME>(<GETPROP><THIS>this</THIS>.<STRING>timer</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>timer</STRING> = <NULL>null</NULL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onTimerEvent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING></GETPROP></NOT></IFNE>) <BLOCK>{
      <TRY>try <BLOCK>{
        <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
        <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>callback</STRING></GETPROP>(<THIS>this</THIS>)</CALL></EXPR_VOID>;
      }</BLOCK> <FINALLY>finally <BLOCK>{
        <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>currentlyExecuting</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;
      }</BLOCK></FINALLY></TRY>
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>
<EXPR_RESULT><SETPROP><NAME>String</NAME>.<STRING>interpret</STRING> = <FUNCTION>function(<PARAMETER>value</PARAMETER>)<BLOCK>{
  <RETURN>return <HOOK><EQ><NAME>value</NAME> == <NULL>null</NULL></EQ> ? <STRING>''</STRING> : <CALL><NAME>String</NAME>(<NAME>value</NAME>)</CALL></HOOK></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>String</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>gsub</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>, <PARAMETER>replacement</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>result = <STRING>''</STRING></NAME>, <NAME>source = <THIS>this</THIS></NAME>, <NAME>match</NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>replacement</BINDNAME> = <CALL><NAME>arguments</NAME>.<GETPROP><STRING>callee</STRING></GETPROP>.<GETPROP><STRING>prepareReplacement</STRING></GETPROP>(<NAME>replacement</NAME>)</CALL></SETNAME></EXPR_VOID>;

    <LOOP>while (<TARGET><IFEQ><GT><GETPROP><NAME></TARGET>source</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>0</NUMBER></GT></IFEQ>) <TARGET><BLOCK></TARGET>{
      <BLOCK>if (<IFNE><SETNAME><BINDNAME>match</BINDNAME> = <CALL><NAME>source</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>pattern</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <CALL><NAME>source</NAME>.<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>0</NUMBER>, <GETPROP><NAME>match</NAME>.<STRING>index</STRING></GETPROP>)</CALL></ADD></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <CALL><NAME>String</NAME>.<GETPROP><STRING>interpret</STRING></GETPROP>(<CALL><NAME>replacement</NAME>(<NAME>match</NAME>)</CALL>)</CALL></ADD></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME>source</BINDNAME>  = <CALL><NAME>source</NAME>.<GETPROP><STRING>slice</STRING></GETPROP>(<ADD><GETPROP><NAME>match</NAME>.<STRING>index</STRING></GETPROP> + <GETPROP><GETELEM><NAME>match</NAME>[<NUMBER>0</NUMBER></GETELEM>].<STRING>length</STRING></GETPROP></ADD>)</CALL></SETNAME></EXPR_VOID>;
      }</BLOCK> else <BLOCK>{
        <EXPR_VOID><COMMA><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <NAME>source</NAME></ADD></SETNAME>, <SETNAME><BINDNAME>source</BINDNAME> = <STRING>''</STRING></SETNAME></COMMA></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></LOOP>
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>sub</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>, <PARAMETER>replacement</PARAMETER>, <PARAMETER>count</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>replacement</BINDNAME> = <CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>.<GETPROP><STRING>prepareReplacement</STRING></GETPROP>(<NAME>replacement</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>count</BINDNAME> = <HOOK><SHEQ><NAME>count</NAME> === <NAME>undefined</NAME></SHEQ> ? <NUMBER>1</NUMBER> : <NAME>count</NAME></HOOK></SETNAME></EXPR_VOID>;

    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>(<NAME>pattern</NAME>, <FUNCTION>function(<PARAMETER>match</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><LT>--<DEC><NAME>count</NAME></DEC> &lt; <NUMBER>0</NUMBER></LT></IFNE>) <RETURN>return <GETELEM><NAME>match</NAME>[<NUMBER>0</NUMBER>]</GETELEM></RETURN>;</BLOCK>
      <RETURN>return <CALL><NAME>replacement</NAME>(<NAME>match</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>scan</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>, <PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>(<NAME>pattern</NAME>, <NAME>iterator</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>truncate</OBJLITNAME>: <FUNCTION>function(<PARAMETER>length</PARAMETER>, <PARAMETER>truncation</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>length</BINDNAME> = <OR><NAME>length</NAME> || <NUMBER>30</NUMBER></OR></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>truncation</BINDNAME> = <HOOK><SHEQ><NAME>truncation</NAME> === <NAME>undefined</NAME></SHEQ> ? <STRING>'...'</STRING> : <NAME>truncation</NAME></HOOK></SETNAME></EXPR_VOID>;
    <RETURN>return <HOOK><GT><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> &gt; <NAME>length</NAME></GT> ?
      <ADD><CALL><THIS>this</THIS>.<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>0</NUMBER>, <SUB><NAME>length</NAME> - <GETPROP><NAME>truncation</NAME>.<STRING>length</STRING></GETPROP></SUB>)</CALL> + <NAME>truncation</NAME></ADD> : <THIS>this</THIS></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>strip</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/^\s+/</REGEXP>, <STRING>''</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/\s+$/</REGEXP>, <STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stripTags</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/&lt;\/?[^&gt;]+&gt;/gi</REGEXP>, <STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stripScripts</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>replace</STRING></GETPROP>(new <NEW><NAME>RegExp</NAME>(<GETPROP><NAME>Prototype</NAME>.<STRING>ScriptFragment</STRING></GETPROP>, <STRING>'img'</STRING>)</NEW>, <STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>extractScripts</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>matchAll = new <NEW><NAME>RegExp</NAME>(<GETPROP><NAME>Prototype</NAME>.<STRING>ScriptFragment</STRING></GETPROP>, <STRING>'img'</STRING>)</NEW></NAME></VAR>;
    <VAR>var <NAME>matchOne = new <NEW><NAME>RegExp</NAME>(<GETPROP><NAME>Prototype</NAME>.<STRING>ScriptFragment</STRING></GETPROP>, <STRING>'im'</STRING>)</NEW></NAME></VAR>;
    <RETURN>return (<CALL><OR><CALL><THIS>this</THIS>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>matchAll</NAME>)</CALL> || <ARRAYLIT>[]</ARRAYLIT></OR>).<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>scriptTag</PARAMETER>) <BLOCK>{
      <RETURN>return (<GETELEM><OR><CALL><NAME>scriptTag</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>matchOne</NAME>)</CALL> || [<ARRAYLIT><STRING>''</STRING>, <STRING>''</STRING>]</ARRAYLIT></OR>)[<NUMBER>1</NUMBER>]</GETELEM></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evalScripts</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>extractScripts</STRING></GETPROP></CALL>().<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>script</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>eval</NAME>(<NAME>script</NAME>)</CALL></RETURN></BLOCK> }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>escapeHTML</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>div = <CALL><NAME>document</NAME>.<GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING>)</CALL></NAME></VAR>;
    <VAR>var <NAME>text = <CALL><NAME>document</NAME>.<GETPROP><STRING>createTextNode</STRING></GETPROP>(<THIS>this</THIS>)</CALL></NAME></VAR>;
    <EXPR_VOID><CALL><NAME>div</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>text</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <GETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>unescapeHTML</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>div = <CALL><NAME>document</NAME>.<GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING>)</CALL></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>stripTags</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <RETURN>return <HOOK><GETELEM><NAME>div</NAME>.<GETPROP><STRING>childNodes</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> ? (<HOOK><GT><GETPROP><NAME>div</NAME>.<GETPROP><STRING>childNodes</STRING></GETPROP>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>1</NUMBER></GT> ?
      <CALL><CALL><NAME>$A</NAME>(<GETPROP><NAME>div</NAME>.<STRING>childNodes</STRING></GETPROP></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<STRING>''</STRING>,<FUNCTION>function(<PARAMETER>memo</PARAMETER>,<PARAMETER>node</PARAMETER>)<BLOCK>{ <RETURN>return <ADD><NAME>memo</NAME>+<GETPROP><NAME>node</NAME>.<STRING>nodeValue</STRING></GETPROP></ADD></RETURN></BLOCK> }</FUNCTION>)</CALL> :
      <GETPROP><NAME>div</NAME>.<GETELEM><GETPROP><STRING>childNodes</STRING></GETPROP>[<NUMBER>0</NUMBER></GETELEM>].<STRING>nodeValue</STRING></GETPROP>)</HOOK> : <STRING>''</STRING></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toQueryParams</OBJLITNAME>: <FUNCTION>function(<PARAMETER>separator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>match = <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>strip</STRING></GETPROP></CALL>().<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/([^?#]*)(#.*)?$/</REGEXP>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>match</NAME></NOT></IFNE>) <RETURN>return <OBJECTLIT>{}</OBJECTLIT></RETURN>;</BLOCK>

    <RETURN>return <CALL><GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER></GETELEM>].<CALL><GETPROP><STRING>split</STRING></GETPROP>(<OR><NAME>separator</NAME> || <STRING>'&amp;'</STRING></OR></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<OBJECTLIT>{}</OBJECTLIT>, <FUNCTION>function(<PARAMETER>hash</PARAMETER>, <PARAMETER>pair</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><GETELEM>(<SETNAME><BINDNAME>pair</BINDNAME> = <CALL><NAME>pair</NAME>.<GETPROP><STRING>split</STRING></GETPROP>(<STRING>'='</STRING>)</CALL></SETNAME>)[<NUMBER>0</NUMBER>]</GETELEM></IFNE>) <BLOCK>{
        <VAR>var <NAME>name = <CALL><NAME>decodeURIComponent</NAME>(<GETELEM><NAME>pair</NAME>[<NUMBER>0</NUMBER>]</GETELEM>)</CALL></NAME></VAR>;
        <VAR>var <NAME>value = <HOOK><GETELEM><NAME>pair</NAME>[<NUMBER>1</NUMBER>]</GETELEM> ? <CALL><NAME>decodeURIComponent</NAME>(<GETELEM><NAME>pair</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL> : <NAME>undefined</NAME></HOOK></NAME></VAR>;

        <BLOCK>if (<IFNE><SHNE><GETELEM><NAME>hash</NAME>[<NAME>name</NAME>]</GETELEM> !== <NAME>undefined</NAME></SHNE></IFNE>) <BLOCK>{
          <BLOCK>if (<IFNE><NE><GETPROP><GETELEM><NAME>hash</NAME>[<NAME>name</NAME></GETELEM>].<STRING>constructor</STRING></GETPROP> != <NAME>Array</NAME></NE></IFNE>)
            <EXPR_VOID><SETELEM><NAME>hash</NAME>[<NAME>name</NAME>] = [<ARRAYLIT><GETELEM><NAME>hash</NAME>[<NAME>name</NAME>]</GETELEM>]</ARRAYLIT></SETELEM></EXPR_VOID>;</BLOCK>
          <BLOCK>if (<IFNE><NAME>value</NAME></IFNE>) <EXPR_VOID><CALL><GETELEM><NAME>hash</NAME>[<NAME>name</NAME></GETELEM>].<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK>
        }</BLOCK>
        else <EXPR_VOID><SETELEM><NAME>hash</NAME>[<NAME>name</NAME>] = <NAME>value<GOTO></NAME></SETELEM></GOTO></EXPR_VOID>;</BLOCK>
      }</BLOCK></BLOCK>
      <RETURN>return <NAME>hash</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toArray</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>split</STRING></GETPROP>(<STRING>''</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>succ</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><CALL><THIS>this</THIS>.<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>0</NUMBER>, <SUB><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB>)</CALL> +
      <CALL><NAME>String</NAME>.<GETPROP><STRING>fromCharCode</STRING></GETPROP>(<ADD><CALL><THIS>this</THIS>.<GETPROP><STRING>charCodeAt</STRING></GETPROP>(<SUB><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB>)</CALL> + <NUMBER>1</NUMBER></ADD>)</CALL></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>camelize</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>parts = <CALL><THIS>this</THIS>.<GETPROP><STRING>split</STRING></GETPROP>(<STRING>'-'</STRING>)</CALL></NAME>, <NAME>len = <GETPROP><NAME>parts</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><EQ><NAME>len</NAME> == <NUMBER>1</NUMBER></EQ></IFNE>) <RETURN>return <GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER>]</GETELEM></RETURN>;</BLOCK>

    <VAR>var <NAME>camelized = <HOOK><EQ><CALL><THIS>this</THIS>.<GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER>)</CALL> == <STRING>'-'</STRING></EQ>
      ? <ADD><CALL><GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER></GETELEM>].<CALL><GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER></CALL>).<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> + <CALL><GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER></GETELEM>].<GETPROP><STRING>substring</STRING></GETPROP>(<NUMBER>1</NUMBER>)</CALL></ADD>
      : <GETELEM><NAME>parts</NAME>[<NUMBER>0</NUMBER>]</GETELEM></HOOK></NAME></VAR>;

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>1</NUMBER></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>len</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><SETNAME><BINDNAME><ADD><NAME></TARGET>camelized</NAME></BINDNAME> += <ADD><CALL><GETELEM><NAME>parts</NAME>[<NAME>i</NAME></GETELEM>].<CALL><GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER></CALL>).<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> + <CALL><GETELEM><NAME>parts</NAME>[<NAME>i</NAME></GETELEM>].<GETPROP><STRING>substring</STRING></GETPROP>(<NUMBER>1</NUMBER>)<GOTO><TARGET><TARGET></CALL></ADD></ADD></SETNAME></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;

    <RETURN>return <NAME>camelized</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>capitalize</OBJLITNAME>: <FUNCTION>function()<BLOCK>{
    <RETURN>return <ADD><CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>charAt</STRING></GETPROP>(<NUMBER>0</NUMBER></CALL>).<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>substring</STRING></GETPROP>(<NUMBER>1</NUMBER></CALL>).<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>underscore</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/::/</REGEXP>, <STRING>'/'</STRING></CALL>).<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/([A-Z]+)([A-Z][a-z])/</REGEXP>,<STRING>'#{1}_#{2}'</STRING></CALL>).<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/([a-z\d])([A-Z])/</REGEXP>,<STRING>'#{1}_#{2}'</STRING></CALL>).<CALL><GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/-/</REGEXP>,<STRING>'_'</STRING></CALL>).<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>dasherize</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>gsub</STRING></GETPROP>(<REGEXP>/_/</REGEXP>,<STRING>'-'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>useDoubleQuotes</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>escapedString = <CALL><THIS>this</THIS>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/\\/g</REGEXP>, <STRING>'\\\\'</STRING>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NAME>useDoubleQuotes</NAME></IFNE>)
      <RETURN>return <ADD><ADD><STRING>'"'</STRING> + <CALL><NAME>escapedString</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/"/g</REGEXP>, <STRING>'\\"'</STRING>)</CALL></ADD> + <STRING>'"'</STRING></ADD></RETURN>;
    else
      <RETURN>return <ADD><ADD><STRING>"'"</STRING> + <CALL><NAME>escapedString</NAME>.<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/'/g</REGEXP>, <STRING>'\\\''</STRING>)</CALL></ADD> + <STRING>"'"<GOTO></STRING></ADD></GOTO></RETURN>;</BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<NAME>String</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<EXPR_RESULT><SETPROP><GETPROP><STRING>gsub</STRING></GETPROP>.<STRING>prepareReplacement</STRING> = <FUNCTION>function(<PARAMETER>replacement</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><EQ>typeof <TYPEOFNAME>replacement</TYPEOFNAME> == <STRING>'function'</STRING></EQ></IFNE>) <RETURN>return <NAME>replacement</NAME></RETURN>;</BLOCK>
  <VAR>var <NAME>template = new <NEW><NAME>Template</NAME>(<NAME>replacement</NAME>)</NEW></NAME></VAR>;
  <RETURN>return <FUNCTION>function(<PARAMETER>match</PARAMETER>) <BLOCK>{ <RETURN>return <CALL><NAME>template</NAME>.<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>match</NAME>)</CALL></RETURN></BLOCK> }</FUNCTION></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>

<NAME>String</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>parseQuery</STRING> = <GETPROP><NAME>String</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>toQueryParams</STRING></GETPROP></SETPROP></EXPR_RESULT>;

<VAR>var <NAME>Template = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></NAME></VAR>;
<EXPR_RESULT><SETPROP><NAME>Template</NAME>.<STRING>Pattern</STRING> = <REGEXP>/(^|.|\r|\n)(#\{(.*?)\})/</REGEXP></SETPROP></EXPR_RESULT>;
<EXPR_RESULT><SETPROP><NAME>Template</NAME>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>template</PARAMETER>, <PARAMETER>pattern</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>template</STRING> = <CALL><NAME>template</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>pattern</STRING>  = <OR><NAME>pattern</NAME> || <GETPROP><NAME>Template</NAME>.<STRING>Pattern</STRING></GETPROP></OR></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evaluate</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>template</STRING></GETPROP>.<GETPROP><STRING>gsub</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>pattern</STRING></GETPROP>, <FUNCTION>function(<PARAMETER>match</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>before = <GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><EQ><NAME>before</NAME> == <STRING>'\\'</STRING></EQ></IFNE>) <RETURN>return <GETELEM><NAME>match</NAME>[<NUMBER>2</NUMBER>]</GETELEM></RETURN>;</BLOCK>
      <RETURN>return <ADD><NAME>before</NAME> + <CALL><NAME>String</NAME>.<GETPROP><STRING>interpret</STRING></GETPROP>(<GETELEM><NAME>object</NAME>[<GETELEM><NAME>match</NAME>[<NUMBER>3</NUMBER>]</GETELEM>]</GETELEM>)</CALL></ADD></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<VAR>var <NAME>$break    = new <NEW><NAME>Object</NAME>()</NEW></NAME></VAR>;
<VAR>var <NAME>$continue = new <NEW><NAME>Object</NAME>()</NEW></NAME></VAR>;

<VAR>var <NAME>Enumerable = <OBJECTLIT>{
  <OBJLITNAME>each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>index = <NUMBER>0</NUMBER></NAME></VAR>;
    <TRY>try <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>_each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
        <TRY>try <BLOCK>{
          <EXPR_VOID><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <INC><NAME>index</NAME></INC>++)</CALL></EXPR_VOID>;
        }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
          <BLOCK><BLOCK>if (<IFNE><NE><NAME>e</NAME> != <NAME>$continue</NAME></NE></IFNE>) <THROW>throw <NAME>e</NAME></THROW>;</BLOCK></BLOCK></CATCH>
        }</TRY></BLOCK>
      }</FUNCTION>)</CALL></EXPR_VOID>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><BLOCK>if (<IFNE><NE><NAME>e</NAME> != <NAME>$break</NAME></NE></IFNE>) <THROW>throw <NAME>e</NAME></THROW>;</BLOCK></BLOCK></CATCH>
    }</TRY>
    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>eachSlice</OBJLITNAME>: <FUNCTION>function(<PARAMETER>number</PARAMETER>, <PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>index = -<NEG><NAME>number</NAME></NEG></NAME>, <NAME>slices = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>array = <CALL><THIS>this</THIS>.<GETPROP><STRING>toArray</STRING></GETPROP>()</CALL></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><LT></TARGET>(<SETNAME><BINDNAME><ADD><NAME>index</NAME></BINDNAME> += <NAME>number</NAME></ADD>)</SETNAME> &lt; <GETPROP><NAME>array</NAME>.<STRING>length</STRING></GETPROP></LT></IFEQ>)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>slices</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>array</NAME>.<GETPROP><STRING>slice</STRING></GETPROP>(<NAME>index</NAME>, <ADD><NAME>index</NAME>+<NAME>number</NAME></ADD>)</CALL>)<GOTO><TARGET></CALL></GOTO></EXPR_VOID></TARGET></LOOP>;
    <RETURN>return <CALL><NAME>slices</NAME>.<GETPROP><STRING>map</STRING></GETPROP>(<NAME>iterator</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>all</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>result = <TRUE>true</TRUE></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <AND><NAME>result</NAME> &amp;&amp; !!(<NOT><NOT><CALL><OR><NAME>iterator</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></OR>)(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></NOT></NOT></AND></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><NOT>!<NAME>result</NAME></NOT></IFNE>) <THROW>throw <NAME>$break</NAME></THROW>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>any</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>result = <FALSE>false</FALSE></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><SETNAME><BINDNAME>result</BINDNAME> = !!(<NOT><NOT><CALL><OR><NAME>iterator</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></OR>)(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></NOT></NOT></SETNAME></IFNE>)
        <THROW>throw <NAME>$break</NAME></THROW>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>collect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>((<CALL><OR><NAME>iterator</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></OR>)(<NAME>value</NAME>, <NAME>index</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>detect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>result</NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <NAME>value</NAME></SETNAME></EXPR_VOID>;
        <THROW>throw <NAME>$break</NAME></THROW>;
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findAll</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>grep</OBJLITNAME>: <FUNCTION>function(<PARAMETER>pattern</PARAMETER>, <PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>stringValue = <CALL><NAME>value</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><CALL><NAME>stringValue</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>pattern</NAME>)</CALL></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>((<CALL><OR><NAME>iterator</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></OR>)(<NAME>value</NAME>, <NAME>index</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>include</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>found = <FALSE>false</FALSE></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ><NAME>value</NAME> == <NAME>object</NAME></EQ></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>found</BINDNAME> = <TRUE>true</TRUE></SETNAME></EXPR_VOID>;
        <THROW>throw <NAME>$break</NAME></THROW>;
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>found</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inGroupsOf</OBJLITNAME>: <FUNCTION>function(<PARAMETER>number</PARAMETER>, <PARAMETER>fillWith</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>fillWith</BINDNAME> = <HOOK><SHEQ><NAME>fillWith</NAME> === <NAME>undefined</NAME></SHEQ> ? <NULL>null</NULL> : <NAME>fillWith</NAME></HOOK></SETNAME></EXPR_VOID>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>eachSlice</STRING></GETPROP>(<NAME>number</NAME>, <FUNCTION>function(<PARAMETER>slice</PARAMETER>) <BLOCK>{
      <LOOP>while(<TARGET><IFEQ><LT><GETPROP><NAME></TARGET>slice</NAME>.<STRING>length</STRING></GETPROP> &lt; <NAME>number</NAME></LT></IFEQ>) <TARGET><EXPR_VOID><CALL><NAME></TARGET>slice</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>fillWith</NAME>)<GOTO><TARGET></CALL></GOTO></EXPR_VOID></TARGET></LOOP>;
      <RETURN>return <NAME>slice</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inject</OBJLITNAME>: <FUNCTION>function(<PARAMETER>memo</PARAMETER>, <PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>memo</BINDNAME> = <CALL><NAME>iterator</NAME>(<NAME>memo</NAME>, <NAME>value</NAME>, <NAME>index</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>memo</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>invoke</OBJLITNAME>: <FUNCTION>function(<PARAMETER>method</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>args = <CALL><CALL><NAME>$A</NAME>(<NAME>arguments</NAME></CALL>).<GETPROP><STRING>slice</STRING></GETPROP>(<NUMBER>1</NUMBER>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><GETELEM><NAME>value</NAME>[<NAME>method</NAME></GETELEM>].<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>value</NAME>, <NAME>args</NAME>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>max</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>result</NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = (<CALL><OR><NAME>iterator</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></OR>)(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><OR><EQ><NAME>result</NAME> == <NAME>undefined</NAME></EQ> || <GE><NAME>value</NAME> &gt;= <NAME>result</NAME></GE></OR></IFNE>)
        <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <NAME>value</NAME></SETNAME></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>min</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>result</NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = (<CALL><OR><NAME>iterator</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></OR>)(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><OR><EQ><NAME>result</NAME> == <NAME>undefined</NAME></EQ> || <LT><NAME>value</NAME> &lt; <NAME>result</NAME></LT></OR></IFNE>)
        <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <NAME>value</NAME></SETNAME></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>partition</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>trues = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>falses = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      ((<EXPR_VOID><CALL><HOOK><CALL><OR><NAME>iterator</NAME> || <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></OR>)(<NAME>value</NAME>, <NAME>index</NAME>)</CALL> ?
        <NAME>trues</NAME> : <NAME>falses</NAME></HOOK>).<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return [<ARRAYLIT><NAME>trues</NAME>, <NAME>falses</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>pluck</OBJLITNAME>: <FUNCTION>function(<PARAMETER>property</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><NAME>value</NAME>[<NAME>property</NAME>]</GETELEM>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>reject</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><NOT>!<CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL></NOT></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>sortBy</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <RETURN>return <OBJECTLIT>{<OBJLITNAME>value</OBJLITNAME>: <NAME>value</NAME>, <OBJLITNAME>criteria</OBJLITNAME>: <CALL><NAME>iterator</NAME>(<NAME>value</NAME>, <NAME>index</NAME>)</CALL>}</OBJECTLIT></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<CALL><GETPROP><STRING>sort</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>left</PARAMETER>, <PARAMETER>right</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>a = <GETPROP><NAME>left</NAME>.<STRING>criteria</STRING></GETPROP></NAME>, <NAME>b = <GETPROP><NAME>right</NAME>.<STRING>criteria</STRING></GETPROP></NAME></VAR>;
      <RETURN>return <HOOK><LT><NAME>a</NAME> &lt; <NAME>b</NAME></LT> ? -<NUMBER>1</NUMBER> : <HOOK><GT><NAME>a</NAME> &gt; <NAME>b</NAME></GT> ? <NUMBER>1</NUMBER> : <NUMBER>0</NUMBER></HOOK></HOOK></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<GETPROP><STRING>pluck</STRING></GETPROP>(<STRING>'value'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toArray</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>map</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>zip</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>iterator = <GETPROP><NAME>Prototype</NAME>.<STRING>K</STRING></GETPROP></NAME>, <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><EQ>typeof <TYPEOF><CALL><NAME>args</NAME>.<GETPROP><STRING>last</STRING></GETPROP>()</CALL></TYPEOF> == <STRING>'function'</STRING></EQ></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>iterator</BINDNAME> = <CALL><NAME>args</NAME>.<GETPROP><STRING>pop</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>

    <VAR>var <NAME>collections = [<CALL><ARRAYLIT><THIS>this</THIS></ARRAYLIT>].<CALL><GETPROP><STRING>concat</STRING></GETPROP>(<NAME>args</NAME></CALL>).<GETPROP><STRING>map</STRING></GETPROP>(<NAME>$A</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>iterator</NAME>(<CALL><NAME>collections</NAME>.<GETPROP><STRING>pluck</STRING></GETPROP>(<NAME>index</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>size</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<CALL><GETPROP><STRING>toArray</STRING></GETPROP></CALL>().<STRING>length</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><ADD><STRING>'#&lt;Enumerable:'</STRING> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>toArray</STRING></GETPROP></CALL>().<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>'&gt;'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Enumerable</NAME>, <OBJECTLIT>{
  <OBJLITNAME>map</OBJLITNAME>:     <GETPROP><NAME>Enumerable</NAME>.<STRING>collect</STRING></GETPROP>,
  <OBJLITNAME>find</OBJLITNAME>:    <GETPROP><NAME>Enumerable</NAME>.<STRING>detect</STRING></GETPROP>,
  <OBJLITNAME>select</OBJLITNAME>:  <GETPROP><NAME>Enumerable</NAME>.<STRING>findAll</STRING></GETPROP>,
  <OBJLITNAME>member</OBJLITNAME>:  <GETPROP><NAME>Enumerable</NAME>.<STRING>include</STRING></GETPROP>,
  <OBJLITNAME>entries</OBJLITNAME>: <GETPROP><NAME>Enumerable</NAME>.<STRING>toArray</STRING></GETPROP>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;
<VAR>var <NAME>$A = <SETPROP><NAME>Array</NAME>.<STRING>from</STRING> = <FUNCTION>function(<PARAMETER>iterable</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><NOT>!<NAME>iterable</NAME></NOT></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
  <BLOCK>if (<IFNE><GETPROP><NAME>iterable</NAME>.<STRING>toArray</STRING></GETPROP></IFNE>) <BLOCK>{
    <RETURN>return <CALL><NAME>iterable</NAME>.<GETPROP><STRING>toArray</STRING></GETPROP>()</CALL></RETURN>;
  }</BLOCK> else <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>iterable</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><NAME>iterable</NAME>[<NAME>i</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></CALL></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;
    <RETURN>return <NAME>results</NAME></RETURN>;
  <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
}</FUNCTION></SETPROP></NAME></VAR>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Array</NAME>.<STRING>prototype</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>_reverse</STRING></GETPROP></NOT></IFNE>)
  <NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>_reverse</STRING> = <GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>reverse</STRING></GETPROP></SETPROP></EXPR_RESULT>;</BLOCK>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Array</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>iterator</NAME>(<GETELEM><THIS>this</THIS>[<NAME>i</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></CALL></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clear</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>length</STRING> = <NUMBER>0</NUMBER></SETPROP></EXPR_VOID>;
    <RETURN>return <THIS>this</THIS></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>first</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETELEM><THIS>this</THIS>[<NUMBER>0</NUMBER>]</GETELEM></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>last</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETELEM><THIS>this</THIS>[<SUB><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> - <NUMBER>1</NUMBER></SUB>]</GETELEM></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>compact</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>select</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <NE><NAME>value</NAME> != <NULL>null</NULL></NE></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>flatten</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>, <FUNCTION>function(<PARAMETER>array</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>array</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<HOOK><AND><NAME>value</NAME> &amp;&amp; <EQ><GETPROP><NAME>value</NAME>.<STRING>constructor</STRING></GETPROP> == <NAME>Array</NAME></EQ></AND> ?
        <CALL><NAME>value</NAME>.<GETPROP><STRING>flatten</STRING></GETPROP>()</CALL> : [<ARRAYLIT><NAME>value</NAME>]</ARRAYLIT></HOOK>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>without</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>values = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>select</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return !<NOT><CALL><NAME>values</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>value</NAME>)</CALL></NOT></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>indexOf</OBJLITNAME>: <FUNCTION>function(<PARAMETER>object</PARAMETER>) <BLOCK>{
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETELEM><THIS>this</THIS>[<NAME>i</NAME>]</GETELEM> == <NAME>object</NAME></EQ></IFNE>) <RETURN>return <NAME>i<GOTO><TARGET><TARGET></NAME></RETURN></GOTO></TARGET></TARGET>;</BLOCK></LOOP>
    <RETURN>return -<NUMBER>1</NUMBER></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>reverse</OBJLITNAME>: <FUNCTION>function(<PARAMETER>inline</PARAMETER>) <BLOCK>{
    <RETURN>return (<CALL><HOOK><SHNE><NAME>inline</NAME> !== <FALSE>false</FALSE></SHNE> ? <THIS>this</THIS> : <CALL><THIS>this</THIS>.<GETPROP><STRING>toArray</STRING></GETPROP>()</CALL></HOOK>).<GETPROP><STRING>_reverse</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>reduce</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <HOOK><GT><GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>1</NUMBER></GT> ? <THIS>this</THIS> : <GETELEM><THIS>this</THIS>[<NUMBER>0</NUMBER>]</GETELEM></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>uniq</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>, <FUNCTION>function(<PARAMETER>array</PARAMETER>, <PARAMETER>value</PARAMETER>) <BLOCK>{
      <RETURN>return <HOOK><CALL><NAME>array</NAME>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>value</NAME>)</CALL> ? <NAME>array</NAME> : <CALL><NAME>array</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>([<ARRAYLIT><NAME>value</NAME>]</ARRAYLIT>)</CALL></HOOK></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clone</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><ARRAYLIT>[]</ARRAYLIT>.<GETPROP><STRING>concat</STRING></GETPROP>(<THIS>this</THIS>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>size</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><ADD><STRING>'['</STRING> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<GETPROP><NAME>Object</NAME>.<STRING>inspect</STRING></GETPROP></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>', '</STRING>)</CALL></ADD> + <STRING>']'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>toArray</STRING> = <GETPROP><NAME>Array</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>clone</STRING></GETPROP></SETPROP></EXPR_RESULT>;

<FUNCTION>function <FUNCNAME>$w</FUNCNAME>(<PARAMETER>string</PARAMETER>)<BLOCK>{
  <EXPR_VOID><SETNAME><BINDNAME>string</BINDNAME> = <CALL><NAME>string</NAME>.<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
  <RETURN>return <HOOK><NAME>string</NAME> ? <CALL><NAME>string</NAME>.<GETPROP><STRING>split</STRING></GETPROP>(<REGEXP>/\s+/</REGEXP>)</CALL> : <ARRAYLIT>[]</ARRAYLIT></HOOK></RETURN>;</BLOCK>
}</FUNCTION>

<BLOCK>if(<IFNE><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></IFNE>)<BLOCK>{
  <NAME>Array</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>prototype</STRING></GETPROP>.<STRING>concat</STRING> = <FUNCTION>function()<BLOCK>{
    <VAR>var <NAME>array = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOOP>for<VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><THIS>this</THIS>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><EXPR_VOID><CALL><NAME></TARGET>array</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><THIS>this</THIS>[<NAME>i</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></CALL></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;
    <LOOP>for<VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <BLOCK>if(<IFNE><EQ><GETPROP><GETELEM><NAME>arguments</NAME>[<NAME>i</NAME></GETELEM>].<STRING>constructor</STRING></GETPROP> == <NAME>Array</NAME></EQ></IFNE>) <BLOCK>{
        <LOOP>for<VAR>(var <NAME>j = <NUMBER>0</NUMBER></NAME>, <NAME>arrayLength = <GETPROP><GETELEM><NAME>arguments</NAME>[<NAME>i</NAME></GETELEM>].<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>j</NAME> &lt; <NAME>arrayLength</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>j</NAME></INC></EXPR_VOID>++)
          <TARGET><EXPR_VOID><CALL><NAME></TARGET>array</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><GETELEM><NAME>arguments</NAME>[<NAME>i</NAME></GETELEM>][<NAME>j</NAME>]</GETELEM>)<GOTO><TARGET><TARGET></CALL></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;
      }</BLOCK> else <BLOCK>{
        <EXPR_VOID><CALL><NAME>array</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK>
    <GOTO><TARGET><TARGET></GOTO></TARGET></TARGET>}</BLOCK></LOOP>
    <RETURN>return <NAME>array</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>
}</BLOCK></BLOCK>
<VAR>var <NAME>Hash = <FUNCTION>function(<PARAMETER>obj</PARAMETER>) <BLOCK>{
  <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<THIS>this</THIS>, <OR><NAME>obj</NAME> || <OBJECTLIT>{}</OBJECTLIT></OR>)</CALL></EXPR_VOID>;</BLOCK>
}</FUNCTION></NAME></VAR>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Hash</NAME>, <OBJECTLIT>{
  <OBJLITNAME>toQueryString</OBJLITNAME>: <FUNCTION>function(<PARAMETER>obj</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>parts = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;

	  <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>prototype</STRING></GETPROP>.<GETPROP><STRING>_each</STRING></GETPROP>.<GETPROP><STRING>call</STRING></GETPROP>(<NAME>obj</NAME>, <FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>pair</NAME>.<STRING>key</STRING></GETPROP></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>

      <BLOCK>if (<IFNE><AND><GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP> &amp;&amp; <EQ><GETPROP><NAME>pair</NAME>.<GETPROP><STRING>value</STRING></GETPROP>.<STRING>constructor</STRING></GETPROP> == <NAME>Array</NAME></EQ></AND></IFNE>) <BLOCK>{
        <VAR>var <NAME>values = <CALL><NAME>pair</NAME>.<GETPROP><STRING>value</STRING></GETPROP>.<GETPROP><STRING>compact</STRING></GETPROP>()</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><LT><GETPROP><NAME>values</NAME>.<STRING>length</STRING></GETPROP> &lt; <NUMBER>2</NUMBER></LT></IFNE>) <EXPR_VOID><SETPROP><NAME>pair</NAME>.<STRING>value</STRING> = <CALL><NAME>values</NAME>.<GETPROP><STRING>reduce</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
        else <BLOCK>{
        	<EXPR_VOID><SETNAME><BINDNAME>key</BINDNAME> = <CALL><NAME>encodeURIComponent</NAME>(<GETPROP><NAME>pair</NAME>.<STRING>key</STRING></GETPROP>)</CALL></SETNAME></EXPR_VOID>;
          <EXPR_VOID><CALL><NAME>values</NAME>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
            <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <HOOK><NE><NAME>value</NAME> != <NAME>undefined</NAME></NE> ? <CALL><NAME>encodeURIComponent</NAME>(<NAME>value</NAME>)</CALL> : <STRING>''</STRING></HOOK></SETNAME></EXPR_VOID>;
            <EXPR_VOID><CALL><NAME>parts</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><NAME>key</NAME> + <STRING>'='</STRING></ADD> + <CALL><NAME>encodeURIComponent</NAME>(<NAME>value</NAME>)</CALL></ADD>)</CALL></EXPR_VOID>;</BLOCK>
          }</FUNCTION>)</CALL></EXPR_VOID>;
          <RETURN>return</RETURN>;
        <GOTO></GOTO>}</BLOCK></BLOCK>
      }</BLOCK></BLOCK>
      <BLOCK>if (<IFNE><EQ><GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP> == <NAME>undefined</NAME></EQ></IFNE>) <EXPR_VOID><SETELEM><NAME>pair</NAME>[<NUMBER>1</NUMBER>] = <STRING>''</STRING></SETELEM></EXPR_VOID>;</BLOCK>
      <EXPR_VOID><CALL><NAME>parts</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>pair</NAME>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<NAME>encodeURIComponent</NAME></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>'='</STRING>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
	  }</FUNCTION>)</CALL></EXPR_VOID>;

    <RETURN>return <CALL><NAME>parts</NAME>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>'&amp;'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Hash</NAME>.<STRING>prototype</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;
<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Hash</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>key</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><THIS>this</THIS></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <VAR>var <NAME>value = <GETELEM><THIS>this</THIS>[<NAME>key</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><AND><NAME>value</NAME> &amp;&amp; <EQ><NAME>value</NAME> == <GETELEM><NAME>Hash</NAME>.<GETPROP><STRING>prototype</STRING></GETPROP>[<NAME>key</NAME>]</GETELEM></EQ></AND></IFNE>) <CONTINUE>continue</CONTINUE>;</BLOCK>

      <VAR>var <NAME>pair = [<ARRAYLIT><NAME>key</NAME>, <NAME>value</NAME>]</ARRAYLIT></NAME></VAR>;
      <EXPR_VOID><SETPROP><NAME>pair</NAME>.<STRING>key</STRING> = <NAME>key</NAME></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><NAME>pair</NAME>.<STRING>value</STRING> = <NAME>value</NAME></SETPROP></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>iterator</NAME>(<NAME>pair</NAME>)</CALL></EXPR_VOID>;
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>keys</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>pluck</STRING></GETPROP>(<STRING>'key'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>values</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>pluck</STRING></GETPROP>(<STRING>'value'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>merge</OBJLITNAME>: <FUNCTION>function(<PARAMETER>hash</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$H</NAME>(<NAME>hash</NAME></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<THIS>this</THIS>, <FUNCTION>function(<PARAMETER>mergedHash</PARAMETER>, <PARAMETER>pair</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETELEM><NAME>mergedHash</NAME>[<GETPROP><NAME>pair</NAME>.<STRING>key</STRING></GETPROP>] = <GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP></SETELEM></EXPR_VOID>;
      <RETURN>return <NAME>mergedHash</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>remove</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>result</NAME></VAR>;
    <LOOP>for<VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>value = <GETELEM><THIS>this</THIS>[<GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><SHNE><NAME>value</NAME> !== <NAME>undefined</NAME></SHNE></IFNE>)<BLOCK>{
        <BLOCK>if (<IFNE><SHEQ><NAME>result</NAME> === <NAME>undefined</NAME></SHEQ></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = <NAME>value</NAME></SETNAME></EXPR_VOID>;
        else <BLOCK>{
          <BLOCK>if (<IFNE><NE><GETPROP><NAME>result</NAME>.<STRING>constructor</STRING></GETPROP> != <NAME>Array</NAME></NE></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>result</BINDNAME> = [<ARRAYLIT><NAME>result</NAME>]</ARRAYLIT></SETNAME></EXPR_VOID>;</BLOCK>
          <EXPR_VOID><CALL><NAME>result</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>
        <GOTO></GOTO>}</BLOCK></BLOCK>
      }</BLOCK></BLOCK>
      delete <EXPR_VOID><DELPROP><THIS>this</THIS>[<GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM></DELPROP></EXPR_VOID>];
    <GOTO><TARGET><TARGET></GOTO></TARGET></TARGET>}</BLOCK></LOOP>
    <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toQueryString</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Hash</NAME>.<GETPROP><STRING>toQueryString</STRING></GETPROP>(<THIS>this</THIS>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <ADD><ADD><STRING>'#&lt;Hash:{'</STRING> + <CALL><THIS>this</THIS>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>pair</NAME>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<GETPROP><NAME>Object</NAME>.<STRING>inspect</STRING></GETPROP></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>': '</STRING>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>', '</STRING>)</CALL></ADD> + <STRING>'}&gt;'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<FUNCTION>function <FUNCNAME>$H</FUNCNAME>(<PARAMETER>object</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><AND><NAME>object</NAME> &amp;&amp; <EQ><GETPROP><NAME>object</NAME>.<STRING>constructor</STRING></GETPROP> == <NAME>Hash</NAME></EQ></AND></IFNE>) <RETURN>return <NAME>object</NAME></RETURN>;</BLOCK>
  <RETURN>return new <NEW><NAME>Hash</NAME>(<NAME>object</NAME>)</NEW></RETURN>;</BLOCK>
}</FUNCTION>;
<EXPR_RESULT><SETNAME><BINDNAME>ObjectRange</BINDNAME> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETNAME></EXPR_RESULT>;
<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>ObjectRange</NAME>.<STRING>prototype</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;
<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>ObjectRange</NAME>.<STRING>prototype</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>start</PARAMETER>, <PARAMETER>end</PARAMETER>, <PARAMETER>exclusive</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>start</STRING> = <NAME>start</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>end</STRING> = <NAME>end</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>exclusive</STRING> = <NAME>exclusive</NAME></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>value = <GETPROP><THIS>this</THIS>.<STRING>start</STRING></GETPROP></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><CALL><THIS></TARGET>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>value</NAME>)</CALL></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><CALL><NAME>iterator</NAME>(<NAME>value</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <CALL><NAME>value</NAME>.<GETPROP><STRING>succ</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></LOOP></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>include</OBJLITNAME>: <FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><LT><NAME>value</NAME> &lt; <GETPROP><THIS>this</THIS>.<STRING>start</STRING></GETPROP></LT></IFNE>)
      <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>exclusive</STRING></GETPROP></IFNE>)
      <RETURN>return <LT><NAME>value</NAME> &lt; <GETPROP><THIS>this</THIS>.<STRING>end</STRING></GETPROP></LT></RETURN>;</BLOCK>
    <RETURN>return <LE><NAME>value</NAME> &lt;= <GETPROP><THIS>this</THIS>.<STRING>end</STRING></GETPROP></LE></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<VAR>var <NAME>$R = <FUNCTION>function(<PARAMETER>start</PARAMETER>, <PARAMETER>end</PARAMETER>, <PARAMETER>exclusive</PARAMETER>) <BLOCK>{
  <RETURN>return new <NEW><NAME>ObjectRange</NAME>(<NAME>start</NAME>, <NAME>end</NAME>, <NAME>exclusive</NAME>)</NEW></RETURN>;</BLOCK>
}</FUNCTION></NAME></VAR>

<VAR>var <NAME>Ajax = <OBJECTLIT>{
  <OBJLITNAME>getTransport</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <OR><CALL><NAME>Try</NAME>.<GETPROP><STRING>these</STRING></GETPROP>(
      <FUNCTION>function() <BLOCK>{<RETURN>return new <NEW><NAME>XMLHttpRequest</NAME>()</NEW></RETURN></BLOCK>}</FUNCTION>,
      <FUNCTION>function() <BLOCK>{<RETURN>return new <NEW><NAME>ActiveXObject</NAME>(<STRING>'Msxml2.XMLHTTP'</STRING>)</NEW></RETURN></BLOCK>}</FUNCTION>,
      <FUNCTION>function() <BLOCK>{<RETURN>return new <NEW><NAME>ActiveXObject</NAME>(<STRING>'Microsoft.XMLHTTP'</STRING>)</NEW></RETURN></BLOCK>}</FUNCTION>
    )</CALL> || <FALSE>false</FALSE></OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>activeRequestCount</OBJLITNAME>: <NUMBER>0</NUMBER>
}</OBJECTLIT></NAME></VAR>

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Responders</STRING> = <OBJECTLIT>{
  <OBJLITNAME>responders</OBJLITNAME>: <ARRAYLIT>[]</ARRAYLIT>,

  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>responders</STRING></GETPROP>.<GETPROP><STRING>_each</STRING></GETPROP>(<NAME>iterator</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>register</OBJLITNAME>: <FUNCTION>function(<PARAMETER>responder</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<CALL><THIS>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>responder</NAME>)</CALL></NOT></IFNE>)
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>responders</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>responder</NAME>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>unregister</OBJLITNAME>: <FUNCTION>function(<PARAMETER>responder</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>responders</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>responders</STRING></GETPROP>.<GETPROP><STRING>without</STRING></GETPROP>(<NAME>responder</NAME>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>dispatch</OBJLITNAME>: <FUNCTION>function(<PARAMETER>callback</PARAMETER>, <PARAMETER>request</PARAMETER>, <PARAMETER>transport</PARAMETER>, <PARAMETER>json</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>responder</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><EQ>typeof <TYPEOF><GETELEM><NAME>responder</NAME>[<NAME>callback</NAME>]</GETELEM></TYPEOF> == <STRING>'function'</STRING></EQ></IFNE>) <BLOCK>{
        <TRY>try <BLOCK>{
          <EXPR_VOID><CALL><GETELEM><NAME>responder</NAME>[<NAME>callback</NAME></GETELEM>].<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>responder</NAME>, [<ARRAYLIT><NAME>request</NAME>, <NAME>transport</NAME>, <NAME>json</NAME>]</ARRAYLIT>)</CALL></EXPR_VOID>;
        }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH>}</TRY>
      }</BLOCK></BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Ajax</NAME>.<STRING>Responders</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>register</STRING></GETPROP>(<OBJECTLIT>{
  <OBJLITNAME>onCreate</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><INC><GETPROP><NAME>Ajax</NAME>.<STRING>activeRequestCount</STRING></GETPROP></INC></EXPR_VOID>++;</BLOCK>
  }</FUNCTION>,
  <OBJLITNAME>onComplete</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><DEC><GETPROP><NAME>Ajax</NAME>.<STRING>activeRequestCount</STRING></GETPROP></DEC></EXPR_VOID>--;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Base</STRING> = <FUNCTION>function() <BLOCK>{</BLOCK>}</FUNCTION></SETPROP></EXPR_RESULT>;
<NAME>Ajax</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Base</STRING></GETPROP>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>setOptions</OBJLITNAME>: <FUNCTION>function(<PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>options</STRING> = <OBJECTLIT>{
      <OBJLITNAME>method</OBJLITNAME>:       <STRING>'post'</STRING>,
      <OBJLITNAME>asynchronous</OBJLITNAME>: <TRUE>true</TRUE>,
      <OBJLITNAME>contentType</OBJLITNAME>:  <STRING>'application/x-www-form-urlencoded'</STRING>,
      <OBJLITNAME>encoding</OBJLITNAME>:     <STRING>'UTF-8'</STRING>,
      <OBJLITNAME>parameters</OBJLITNAME>:   <STRING>''</STRING>
    }</OBJECTLIT></SETPROP></EXPR_VOID>
    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>options</STRING></GETPROP>, <OR><NAME>options</NAME> || <OBJECTLIT>{}</OBJECTLIT></OR>)</CALL></EXPR_VOID>;

    <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>method</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<GETPROP><STRING>method</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ>typeof <TYPEOF><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING></GETPROP></TYPEOF> == <STRING>'string'</STRING></EQ></IFNE>)
      <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<GETPROP><STRING>parameters</STRING></GETPROP>.<GETPROP><STRING>toQueryParams</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Request</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Ajax</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Request</STRING></GETPROP>.<STRING>Events</STRING> =
  [<ARRAYLIT><STRING>'Uninitialized'</STRING>, <STRING>'Loading'</STRING>, <STRING>'Loaded'</STRING>, <STRING>'Interactive'</STRING>, <STRING>'Complete'</STRING>]</ARRAYLIT></SETPROP></EXPR_RESULT>;

<NAME>Ajax</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Request</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Ajax</NAME>.<STRING>Base</STRING></GETPROP>()</NEW>, <OBJECTLIT>{
  <OBJLITNAME>_complete</OBJLITNAME>: <FALSE>false</FALSE>,

  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>url</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>transport</STRING> = <CALL><NAME>Ajax</NAME>.<GETPROP><STRING>getTransport</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>setOptions</STRING></GETPROP>(<NAME>options</NAME>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>request</STRING></GETPROP>(<NAME>url</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>request</OBJLITNAME>: <FUNCTION>function(<PARAMETER>url</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>url</STRING> = <NAME>url</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>method</STRING> = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>method</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <VAR>var <NAME>params = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>parameters</STRING></GETPROP></NAME></VAR>;

    <BLOCK>if (<IFNE><NOT>![<CALL><ARRAYLIT><STRING>'get'</STRING>, <STRING>'post'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP>)</CALL></NOT></IFNE>) <BLOCK>{
      // simulate other verbs over post
      <EXPR_VOID><SETELEM><NAME>params</NAME>[<STRING>'_method'</STRING>] = <GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP></SETELEM></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>method</STRING> = <STRING>'post'</STRING></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK>

    <EXPR_VOID><SETNAME><BINDNAME>params</BINDNAME> = <CALL><NAME>Hash</NAME>.<GETPROP><STRING>toQueryString</STRING></GETPROP>(<NAME>params</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><AND><NAME>params</NAME> &amp;&amp; <CALL><REGEXP>/Konqueror|Safari|KHTML/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL></AND></IFNE>) <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>params</NAME></BINDNAME> += <STRING>'&amp;_='</STRING></ADD></SETNAME></EXPR_VOID></BLOCK>

    // when GET, append parameters to URL
    <BLOCK>if (<IFNE><AND><EQ><GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP> == <STRING>'get'</STRING></EQ> &amp;&amp; <NAME>params<EXPR_VOID><SETPROP_OP></NAME></AND></IFNE>)
      <THIS>this</THIS>.<STRING>url</STRING> += (<ADD><HOOK><GT><CALL><THIS>this</THIS>.<GETPROP><STRING>url</STRING></GETPROP>.<GETPROP><STRING>indexOf</STRING></GETPROP>(<STRING>'?'</STRING>)</CALL> &gt; -<NUMBER>1</NUMBER></GT> ? <STRING>'&amp;'</STRING> : <STRING>'?'</STRING>)</HOOK> + <NAME>params</NAME></ADD></SETPROP_OP></EXPR_VOID>;</BLOCK>

    <TRY>try <BLOCK>{
      <EXPR_VOID><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>dispatch</STRING></GETPROP>(<STRING>'onCreate'</STRING>, <THIS>this</THIS>, <GETPROP><THIS>this</THIS>.<STRING>transport</STRING></GETPROP>)</CALL></EXPR_VOID>;

      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>open</STRING></GETPROP>(<CALL><THIS>this</THIS>.<GETPROP><STRING>method</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL>, <GETPROP><THIS>this</THIS>.<STRING>url</STRING></GETPROP>,
        <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>asynchronous</STRING></GETPROP>)</CALL></EXPR_VOID>;

      <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>asynchronous</STRING></GETPROP></IFNE>)
        <EXPR_VOID><CALL><NAME>setTimeout</NAME>(<CALL><FUNCTION>function() <BLOCK>{ <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>respondToReadyState</STRING></GETPROP>(<NUMBER>1</NUMBER>)</CALL></EXPR_VOID></BLOCK> }</FUNCTION>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>, <NUMBER>10</NUMBER>)</CALL></EXPR_VOID>;</BLOCK>

      <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>transport</STRING></GETPROP>.<STRING>onreadystatechange</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>onStateChange</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL></SETPROP></EXPR_VOID>;
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>setRequestHeaders</STRING></GETPROP>()</CALL></EXPR_VOID>;

      <VAR>var <NAME>body = <HOOK><EQ><GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP> == <STRING>'post'</STRING></EQ> ? (<OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>postBody</STRING></GETPROP> || <NAME>params</NAME>)</OR> : <NULL>null</NULL></HOOK></NAME></VAR>;

      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>send</STRING></GETPROP>(<NAME>body</NAME>)</CALL></EXPR_VOID>;

      /* Force Firefox to handle ready state 4 for synchronous requests */
      <BLOCK>if (<IFNE><AND>!<NOT><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>asynchronous</STRING></GETPROP></NOT> &amp;&amp; <GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>overrideMimeType</STRING></GETPROP></AND></IFNE>)
        <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>onStateChange</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>

    }</BLOCK>
    <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onStateChange</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>readyState = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>readyState</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><AND><GT><NAME>readyState</NAME> &gt; <NUMBER>1</NUMBER></GT> &amp;&amp; !((<NOT><AND><EQ><NAME>readyState</NAME> == <NUMBER>4</NUMBER>)</EQ> &amp;&amp; <GETPROP><THIS>this</THIS>.<STRING>_complete</STRING></GETPROP>)</AND></NOT></AND></IFNE>)
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>respondToReadyState</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>readyState</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>setRequestHeaders</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>headers = <OBJECTLIT>{
      <OBJLITNAME>'X-Requested-Wit</OBJLITNAME>h': <STRING>'XMLHttpRequest'</STRING>,
      <OBJLITNAME>'X-Prototype-Versio</OBJLITNAME>n': <GETPROP><NAME>Prototype</NAME>.<STRING>Version</STRING></GETPROP>,
      <OBJLITNAME>'Accep</OBJLITNAME>t': <STRING>'text/javascript, text/html, application/xml, text/xml, */*'</STRING>
    }</OBJECTLIT></NAME></VAR>;

    <BLOCK>if (<IFNE><EQ><GETPROP><THIS>this</THIS>.<STRING>method</STRING></GETPROP> == <STRING>'post'</STRING></EQ></IFNE>) <BLOCK>{
      <EXPR_VOID><SETELEM><NAME>headers</NAME>[<STRING>'Content-type'</STRING>] = <ADD><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>contentType</STRING></GETPROP> +
        (<HOOK><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>encoding</STRING></GETPROP> ? <ADD><STRING>'; charset='</STRING> + <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>encoding</STRING></GETPROP></ADD> : <STRING>''</STRING>)</HOOK></ADD></SETELEM></EXPR_VOID>;

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      <BLOCK>if (<IFNE><AND><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>overrideMimeType</STRING></GETPROP> &amp;&amp;
          (<LT><GETELEM><OR><CALL><NAME>navigator</NAME>.<GETPROP><STRING>userAgent</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/Gecko\/(\d{4})/</REGEXP>)</CALL> || [<ARRAYLIT><NUMBER>0</NUMBER>,<NUMBER>2005</NUMBER>]</ARRAYLIT></OR>)[<NUMBER>1</NUMBER>]</GETELEM> &lt; <NUMBER>2005</NUMBER></LT></AND></IFNE>)
            <EXPR_VOID><SETELEM><NAME>headers</NAME>[<STRING>'Connection'</STRING>] = <STRING>'close'</STRING></SETELEM></EXPR_VOID>;</BLOCK>
    }</BLOCK></BLOCK>

    // user-defined headers
    <BLOCK>if (<IFNE><EQ>typeof <TYPEOF><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>requestHeaders</STRING></GETPROP></TYPEOF> == <STRING>'object'</STRING></EQ></IFNE>) <BLOCK>{
      <VAR>var <NAME>extras = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>requestHeaders</STRING></GETPROP></NAME></VAR>;

      <BLOCK>if (<IFNE><EQ>typeof <TYPEOF><GETPROP><NAME>extras</NAME>.<STRING>push</STRING></GETPROP></TYPEOF> == <STRING>'function'</STRING></EQ></IFNE>)
        <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>extras</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>i</NAME></BINDNAME> += <NUMBER>2</NUMBER></ADD></SETNAME></EXPR_VOID>)
          <TARGET><EXPR_VOID><SETELEM><NAME></TARGET>headers</NAME>[<GETELEM><NAME>extras</NAME>[<NAME>i</NAME>]</GETELEM>] = <GETELEM><NAME>extras</NAME>[<ADD><NAME>i</NAME>+<NUMBER>1</NUMBER></ADD>]<GOTO><TARGET><TARGET></GETELEM></SETELEM></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;
      else
        <EXPR_VOID><CALL><CALL><NAME>$H</NAME>(<NAME>extras</NAME></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{ <EXPR_VOID><SETELEM><NAME>headers</NAME>[<GETPROP><NAME>pair</NAME>.<STRING>key</STRING></GETPROP>] = <GETPROP><NAME>pair</NAME>.<STRING>value</STRING></GETPROP></SETELEM></EXPR_VOID></BLOCK> }</FUNCTION>)<GOTO></CALL></GOTO></EXPR_VOID>;</BLOCK>
    }</BLOCK></BLOCK>

    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><NAME>headers</NAME></ENUM_INIT_KEYS>)
      <TARGET><BLOCK><EXPR_VOID><CALL><THIS></TARGET>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>setRequestHeader</STRING></GETPROP>(<NAME>name</NAME>, <GETELEM><NAME>headers</NAME>[<NAME>name</NAME>]</GETELEM>)<GOTO><TARGET></CALL></EXPR_VOID></GOTO></BLOCK></TARGET></LOOP>;</LOCAL_BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>success</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return !<OR><NOT><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>status</STRING></GETPROP></NOT>
        || (<AND><GE><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>status</STRING></GETPROP> &gt;= <NUMBER>200</NUMBER></GE> &amp;&amp; <LT><GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>status</STRING></GETPROP> &lt; <NUMBER>300</NUMBER></LT>)</AND></OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>respondToReadyState</OBJLITNAME>: <FUNCTION>function(<PARAMETER>readyState</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>state = <GETELEM><NAME>Ajax</NAME>.<GETPROP><STRING>Request</STRING></GETPROP>.<GETPROP><STRING>Events</STRING></GETPROP>[<NAME>readyState</NAME>]</GETELEM></NAME></VAR>;
    <VAR>var <NAME>transport = <GETPROP><THIS>this</THIS>.<STRING>transport</STRING></GETPROP></NAME>, <NAME>json = <CALL><THIS>this</THIS>.<GETPROP><STRING>evalJSON</STRING></GETPROP>()</CALL></NAME></VAR>;

    <BLOCK>if (<IFNE><EQ><NAME>state</NAME> == <STRING>'Complete'</STRING></EQ></IFNE>) <BLOCK>{
      <TRY>try <BLOCK>{
        <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>_complete</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
        (<EXPR_VOID><CALL><OR><GETELEM><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>[<ADD><STRING>'on'</STRING> + <GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>status</STRING></GETPROP></ADD>]</GETELEM>
         || <OR><GETELEM><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>[<ADD><STRING>'on'</STRING> + (<HOOK><CALL><THIS>this</THIS>.<GETPROP><STRING>success</STRING></GETPROP>()</CALL> ? <STRING>'Success'</STRING> : <STRING>'Failure'</STRING>)</HOOK></ADD>]</GETELEM>
         || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR></OR>)(<NAME>transport</NAME>, <NAME>json</NAME>)</CALL></EXPR_VOID>;
      }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
        <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
      }</TRY>

      <BLOCK>if (<IFNE><CALL>(<OR><CALL><THIS>this</THIS>.<GETPROP><STRING>getHeader</STRING></GETPROP>(<STRING>'Content-type'</STRING>)</CALL> || <STRING>'text/javascript'</STRING></OR>).<CALL><GETPROP><STRING>strip</STRING></GETPROP></CALL>().
        <GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^(text|application)\/(x-)?(java|ecma)script(;.*)?$/i</REGEXP>)</CALL></IFNE>)
          <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>evalResponse</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
    }</BLOCK></BLOCK>

    <TRY>try <BLOCK>{
      (<EXPR_VOID><CALL><OR><GETELEM><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>[<ADD><STRING>'on'</STRING> + <NAME>state</NAME></ADD>]</GETELEM> || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR>)(<NAME>transport</NAME>, <NAME>json</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>dispatch</STRING></GETPROP>(<ADD><STRING>'on'</STRING> + <NAME>state</NAME></ADD>, <THIS>this</THIS>, <NAME>transport</NAME>, <NAME>json</NAME>)</CALL></EXPR_VOID>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY>

    <BLOCK>if (<IFNE><EQ><NAME>state</NAME> == <STRING>'Complete'</STRING></EQ></IFNE>) <BLOCK>{
      // avoid memory leak in MSIE: clean up
      <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>transport</STRING></GETPROP>.<STRING>onreadystatechange</STRING> = <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getHeader</OBJLITNAME>: <FUNCTION>function(<PARAMETER>name</PARAMETER>) <BLOCK>{
    <TRY>try <BLOCK>{
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<GETPROP><STRING>getResponseHeader</STRING></GETPROP>(<NAME>name</NAME>)</CALL></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) { <BLOCK><RETURN>return <NULL>null</NULL></RETURN></BLOCK></CATCH> }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evalJSON</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <TRY>try <BLOCK>{
      <VAR>var <NAME>json = <CALL><THIS>this</THIS>.<GETPROP><STRING>getHeader</STRING></GETPROP>(<STRING>'X-JSON'</STRING>)</CALL></NAME></VAR>;
      <RETURN>return <HOOK><NAME>json</NAME> ? <CALL><NAME>eval</NAME>(<ADD><ADD><STRING>'('</STRING> + <NAME>json</NAME></ADD> + <STRING>')'</STRING></ADD>)</CALL> : <NULL>null</NULL></HOOK></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) { <BLOCK><RETURN>return <NULL>null</NULL></RETURN></BLOCK></CATCH> }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>evalResponse</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <TRY>try <BLOCK>{
      <RETURN>return <CALL><NAME>eval</NAME>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>responseText</STRING></GETPROP>)</CALL></RETURN>;
    }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
      <BLOCK><EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>dispatchException</STRING></GETPROP>(<NAME>e</NAME>)</CALL></EXPR_VOID></BLOCK>;</CATCH>
    }</TRY></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>dispatchException</OBJLITNAME>: <FUNCTION>function(<PARAMETER>exception</PARAMETER>) <BLOCK>{
    (<EXPR_VOID><CALL><OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>onException</STRING></GETPROP> || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR>)(<THIS>this</THIS>, <NAME>exception</NAME>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>Ajax</NAME>.<GETPROP><STRING>Responders</STRING></GETPROP>.<GETPROP><STRING>dispatch</STRING></GETPROP>(<STRING>'onException'</STRING>, <THIS>this</THIS>, <NAME>exception</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>Updater</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Ajax</NAME>.<GETPROP><STRING>Updater</STRING></GETPROP>.<STRING>prototype</STRING></GETPROP>, <GETPROP><NAME>Ajax</NAME>.<GETPROP><STRING>Request</STRING></GETPROP>.<STRING>prototype</STRING></GETPROP>)</CALL>, <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>container</PARAMETER>, <PARAMETER>url</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>container</STRING> = <OBJECTLIT>{
      <OBJLITNAME>success</OBJLITNAME>: (<OR><GETPROP><NAME>container</NAME>.<STRING>success</STRING></GETPROP> || <NAME>container</NAME>)</OR>,
      <OBJLITNAME>failure</OBJLITNAME>: (<OR><GETPROP><NAME>container</NAME>.<STRING>failure</STRING></GETPROP> || (<HOOK><GETPROP><NAME>container</NAME>.<STRING>success</STRING></GETPROP> ? <NULL>null</NULL> : <NAME>container</NAME>)</HOOK>)</OR>
    }</OBJECTLIT></SETPROP></EXPR_VOID>

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>transport</STRING> = <CALL><NAME>Ajax</NAME>.<GETPROP><STRING>getTransport</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>setOptions</STRING></GETPROP>(<NAME>options</NAME>)</CALL></EXPR_VOID>;

    <VAR>var <NAME>onComplete = <OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING></GETPROP> || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR></NAME></VAR>;
    <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING> = (<CALL><FUNCTION>function(<PARAMETER>transport</PARAMETER>, <PARAMETER>param</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>updateContent</STRING></GETPROP>()</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>onComplete</NAME>(<NAME>transport</NAME>, <NAME>param</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>).<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL></SETPROP></EXPR_VOID>;

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>request</STRING></GETPROP>(<NAME>url</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>updateContent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>receiver = <GETELEM><THIS>this</THIS>.<GETPROP><STRING>container</STRING></GETPROP>[<HOOK><CALL><THIS>this</THIS>.<GETPROP><STRING>success</STRING></GETPROP>()</CALL> ? <STRING>'success'</STRING> : <STRING>'failure'</STRING></HOOK>]</GETELEM></NAME></VAR>;
    <VAR>var <NAME>response = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>transport</STRING></GETPROP>.<STRING>responseText</STRING></GETPROP></NAME></VAR>;

    <BLOCK>if (<IFNE><NOT>!<GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>evalScripts</STRING></GETPROP></NOT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>response</BINDNAME> = <CALL><NAME>response</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;</BLOCK>

    <BLOCK>if (<IFNE><SETNAME><BINDNAME>receiver</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>receiver</NAME>)</CALL></SETNAME></IFNE>) <BLOCK>{
      <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>insertion</STRING></GETPROP></IFNE>)
        new <EXPR_VOID><NEW><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>insertion</STRING></GETPROP>(<NAME>receiver</NAME>, <NAME>response</NAME>)</NEW></EXPR_VOID>;
      else
        <EXPR_VOID><CALL><NAME>receiver</NAME>.<GETPROP><STRING>update</STRING></GETPROP>(<NAME>response</NAME>)<GOTO></CALL></GOTO></EXPR_VOID>;</BLOCK>
    }</BLOCK></BLOCK>

    <BLOCK>if (<IFNE><CALL><THIS>this</THIS>.<GETPROP><STRING>success</STRING></GETPROP>()</CALL></IFNE>) <BLOCK>{
      <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>onComplete</STRING></GETPROP></IFNE>)
        <EXPR_VOID><CALL><NAME>setTimeout</NAME>(<CALL><THIS>this</THIS>.<GETPROP><STRING>onComplete</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>, <NUMBER>10</NUMBER>)</CALL></EXPR_VOID>;</BLOCK>
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Ajax</NAME>.<STRING>PeriodicalUpdater</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Ajax</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>PeriodicalUpdater</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Ajax</NAME>.<STRING>Base</STRING></GETPROP>()</NEW>, <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>container</PARAMETER>, <PARAMETER>url</PARAMETER>, <PARAMETER>options</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>setOptions</STRING></GETPROP>(<NAME>options</NAME>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>onComplete</STRING> = <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING></GETPROP></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>frequency</STRING> = (<OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>frequency</STRING></GETPROP> || <NUMBER>2</NUMBER>)</OR></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>decay</STRING> = (<OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>decay</STRING></GETPROP> || <NUMBER>1</NUMBER>)</OR></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>updater</STRING> = <OBJECTLIT>{}</OBJECTLIT></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>container</STRING> = <NAME>container</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>url</STRING> = <NAME>url</NAME></SETPROP></EXPR_VOID>;

    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>start</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>start</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>updateComplete</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>onTimerEvent</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stop</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <THIS>this</THIS>.<GETPROP><STRING>updater</STRING></GETPROP>.<EXPR_VOID><SETPROP><GETPROP><STRING>options</STRING></GETPROP>.<STRING>onComplete</STRING> = <NAME>undefined</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>clearTimeout</NAME>(<GETPROP><THIS>this</THIS>.<STRING>timer</STRING></GETPROP>)</CALL></EXPR_VOID>;
    (<EXPR_VOID><CALL><OR><GETPROP><THIS>this</THIS>.<STRING>onComplete</STRING></GETPROP> || <GETPROP><NAME>Prototype</NAME>.<STRING>emptyFunction</STRING></GETPROP></OR>).<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, <NAME>arguments</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>updateComplete</OBJLITNAME>: <FUNCTION>function(<PARAMETER>request</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>decay</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>decay</STRING> = (<HOOK><EQ><GETPROP><NAME>request</NAME>.<STRING>responseText</STRING></GETPROP> == <GETPROP><THIS>this</THIS>.<STRING>lastText</STRING></GETPROP></EQ> ?
        <MUL><GETPROP><THIS>this</THIS>.<STRING>decay</STRING></GETPROP> * <GETPROP><THIS>this</THIS>.<GETPROP><STRING>options</STRING></GETPROP>.<STRING>decay</STRING></GETPROP></MUL> : <NUMBER>1</NUMBER>)</HOOK></SETPROP></EXPR_VOID>;

      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastText</STRING> = <GETPROP><NAME>request</NAME>.<STRING>responseText</STRING></GETPROP></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK>
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>timer</STRING> = <CALL><NAME>setTimeout</NAME>(<CALL><THIS>this</THIS>.<GETPROP><STRING>onTimerEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>,
      <MUL><MUL><GETPROP><THIS>this</THIS>.<STRING>decay</STRING></GETPROP> * <GETPROP><THIS>this</THIS>.<STRING>frequency</STRING></GETPROP></MUL> * <NUMBER>1000</NUMBER></MUL>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onTimerEvent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>updater</STRING> = new <NEW><GETPROP><NAME>Ajax</NAME>.<STRING>Updater</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>container</STRING></GETPROP>, <GETPROP><THIS>this</THIS>.<STRING>url</STRING></GETPROP>, <GETPROP><THIS>this</THIS>.<STRING>options</STRING></GETPROP>)</NEW></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;
<FUNCTION>function <FUNCNAME>$</FUNCNAME>(<PARAMETER>element</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><GT><GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>1</NUMBER></GT></IFNE>) <BLOCK>{
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>elements = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>length = <GETPROP><NAME>arguments</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>$</NAME>(<GETELEM><NAME>arguments</NAME>[<NAME>i</NAME>]</GETELEM>)</CALL>)<GOTO><TARGET><TARGET></CALL></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;
    <RETURN>return <NAME>elements</NAME></RETURN>;
  }</BLOCK></BLOCK>
  <BLOCK>if (<IFNE><EQ>typeof <TYPEOFNAME>element</TYPEOFNAME> == <STRING>'string'</STRING></EQ></IFNE>)
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>document</NAME>.<GETPROP><STRING>getElementById</STRING></GETPROP>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;</BLOCK>
  <RETURN>return <CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
}</FUNCTION>

<BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>XPath</STRING></GETPROP></IFNE>) <BLOCK>{
  <EXPR_RESULT><SETPROP><NAME>document</NAME>.<STRING>_getElementsByXPath</STRING> = <FUNCTION>function(<PARAMETER>expression</PARAMETER>, <PARAMETER>parentElement</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <VAR>var <NAME>query = <CALL><NAME>document</NAME>.<GETPROP><STRING>evaluate</STRING></GETPROP>(<NAME>expression</NAME>, <OR><CALL><NAME>$</NAME>(<NAME>parentElement</NAME>)</CALL> || <NAME>document</NAME></OR>,
      <NULL>null</NULL>, <GETPROP><NAME>XPathResult</NAME>.<STRING>ORDERED_NODE_SNAPSHOT_TYPE</STRING></GETPROP>, <NULL>null</NULL>)</CALL></NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>query</NAME>.<STRING>snapshotLength</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><EXPR_VOID><CALL><NAME></TARGET>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>query</NAME>.<GETPROP><STRING>snapshotItem</STRING></GETPROP>(<NAME>i</NAME>)</CALL>)<GOTO><TARGET><TARGET></CALL></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;
    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>;
}</BLOCK></BLOCK>

<EXPR_RESULT><SETPROP><NAME>document</NAME>.<STRING>getElementsByClassName</STRING> = <FUNCTION>function(<PARAMETER>className</PARAMETER>, <PARAMETER>parentElement</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><GETPROP><NAME>Prototype</NAME>.<GETPROP><STRING>BrowserFeatures</STRING></GETPROP>.<STRING>XPath</STRING></GETPROP></IFNE>) <BLOCK>{
    <VAR>var <NAME>q = <ADD><ADD><STRING>".//*[contains(concat(' ', @class, ' '), ' "</STRING> + <NAME>className</NAME></ADD> + <STRING>" ')]"</STRING></ADD></NAME></VAR>;
    <RETURN>return <CALL><NAME>document</NAME>.<GETPROP><STRING>_getElementsByXPath</STRING></GETPROP>(<NAME>q</NAME>, <NAME>parentElement</NAME>)</CALL></RETURN>;
  }</BLOCK> else <BLOCK>{
    <VAR>var <NAME>children = (<CALL><OR><CALL><NAME>$</NAME>(<NAME>parentElement</NAME>)</CALL> || <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></OR>).<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'*'</STRING>)</CALL></NAME></VAR>;
    <VAR>var <NAME>elements = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>child</NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>children</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME>child</BINDNAME> = <GETELEM><NAME>children</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><CALL><NAME>Element</NAME>.<GETPROP><STRING>hasClassName</STRING></GETPROP>(<NAME>child</NAME>, <NAME>className</NAME>)</CALL></IFNE>)
        <EXPR_VOID><CALL><NAME>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>child</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET><TARGET></GOTO></TARGET></TARGET>}</BLOCK></LOOP>
    <RETURN>return <NAME>elements</NAME></RETURN>;
  <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>window</NAME>.<STRING>Element</STRING></GETPROP></NOT></IFNE>)
  <VAR>var <NAME>Element = new <NEW><NAME>Object</NAME>()</NEW></NAME></VAR>;</BLOCK>

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>extend</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
  <BLOCK>if (<IFNE><OR>!<NOT><NAME>element</NAME></NOT> || <OR><NAME>_nativeExtensions</NAME> || <EQ><GETPROP><NAME>element</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>3</NUMBER></EQ></OR></OR></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>

  <BLOCK>if (<IFNE><AND>!<NOT><GETPROP><NAME>element</NAME>.<STRING>_extended</STRING></GETPROP></NOT> &amp;&amp; <AND><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP> &amp;&amp; <NE><NAME>element</NAME> != <NAME>window</NAME></NE></AND></AND></IFNE>) <BLOCK>{
    <VAR>var <NAME>methods = <CALL><NAME>Object</NAME>.<GETPROP><STRING>clone</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></NAME>, <NAME>cache = <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>.<STRING>cache</STRING></GETPROP></NAME></VAR>;

    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP> == <STRING>'FORM'</STRING></EQ></IFNE>)
      <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>methods</NAME>, <GETPROP><NAME>Form</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><CALL>[<ARRAYLIT><STRING>'INPUT'</STRING>, <STRING>'TEXTAREA'</STRING>, <STRING>'SELECT'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP>)</CALL></IFNE>)
      <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>methods</NAME>, <GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>

    <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>methods</NAME>, <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>Simulated</STRING></GETPROP>)</CALL></EXPR_VOID>;

    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><NAME>methods</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <VAR>var <NAME>value = <GETELEM><NAME>methods</NAME>[<NAME>property</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><AND>typeof <EQ><TYPEOFNAME>value</TYPEOFNAME> == <STRING>'function'</STRING></EQ> &amp;&amp; !(<NOT><IN><NAME>property</NAME> in <NAME>element</NAME>)</IN></NOT></AND></IFNE>)
        <EXPR_VOID><SETELEM><NAME>element</NAME>[<NAME>property</NAME>] = <CALL><NAME>cache</NAME>.<GETPROP><STRING>findOrStore</STRING></GETPROP>(<NAME>value</NAME>)</CALL></SETELEM></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
  }</BLOCK></BLOCK>

  <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_extended</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
  <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>;

<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>extend</STRING></GETPROP>.<STRING>cache</STRING> = <OBJECTLIT>{
  <OBJLITNAME>findOrStore</OBJLITNAME>: <FUNCTION>function(<PARAMETER>value</PARAMETER>) <BLOCK>{
    <RETURN>return <SETELEM><THIS>this</THIS>[<NAME>value</NAME>] = <OR><GETELEM><THIS>this</THIS>[<NAME>value</NAME>]</GETELEM> || <FUNCTION>function() <BLOCK>{
      <RETURN>return <CALL><NAME>value</NAME>.<GETPROP><STRING>apply</STRING></GETPROP>(<NULL>null</NULL>, [<CALL><ARRAYLIT><THIS>this</THIS></ARRAYLIT>].<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></OR></SETELEM></RETURN></BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>Methods</STRING> = <OBJECTLIT>{
  <OBJLITNAME>visible</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <NE><GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>style</STRING></GETPROP>.<STRING>display</STRING></GETPROP> != <STRING>'none'</STRING></NE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toggle</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><GETELEM><NAME>Element</NAME>[<HOOK><CALL><NAME>Element</NAME>.<GETPROP><STRING>visible</STRING></GETPROP>(<NAME>element</NAME>)</CALL> ? <STRING>'hide'</STRING> : <STRING>'show'</STRING></HOOK></GETELEM>](<NAME>element</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>hide</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>display</STRING> = <STRING>'none'</STRING></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>show</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>display</STRING> = <STRING>''</STRING></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>remove</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>update</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>html</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>html</BINDNAME> = typeof <HOOK><EQ><TYPEOFNAME>html</TYPEOFNAME> == <STRING>'undefined'</STRING></EQ> ? <STRING>''</STRING> : <CALL><NAME>html</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></HOOK></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>innerHTML</STRING> = <CALL><NAME>html</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>setTimeout</NAME>(<FUNCTION>function() <BLOCK>{<EXPR_VOID><CALL><NAME>html</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>()</CALL></EXPR_VOID></BLOCK>}</FUNCTION>, <NUMBER>10</NUMBER>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>replace</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>html</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>html</BINDNAME> = typeof <HOOK><EQ><TYPEOFNAME>html</TYPEOFNAME> == <STRING>'undefined'</STRING></EQ> ? <STRING>''</STRING> : <CALL><NAME>html</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></HOOK></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>outerHTML</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>outerHTML</STRING> = <CALL><NAME>html</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    }</BLOCK> else <BLOCK>{
      <VAR>var <NAME>range = <CALL><NAME>element</NAME>.<GETPROP><STRING>ownerDocument</STRING></GETPROP>.<GETPROP><STRING>createRange</STRING></GETPROP>()</CALL></NAME></VAR>;
      <EXPR_VOID><CALL><NAME>range</NAME>.<GETPROP><STRING>selectNodeContents</STRING></GETPROP>(<NAME>element</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>replaceChild</STRING></GETPROP>(
        <CALL><NAME>range</NAME>.<GETPROP><STRING>createContextualFragment</STRING></GETPROP>(<CALL><NAME>html</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL>)</CALL>, <NAME>element</NAME>)</CALL></EXPR_VOID>;
    <GOTO></GOTO>}</BLOCK></BLOCK>
    <EXPR_VOID><CALL><NAME>setTimeout</NAME>(<FUNCTION>function() <BLOCK>{<EXPR_VOID><CALL><NAME>html</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>()</CALL></EXPR_VOID></BLOCK>}</FUNCTION>, <NUMBER>10</NUMBER>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inspect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>result = <ADD><STRING>'&lt;'</STRING> + <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></ADD></NAME></VAR>;
    <EXPR_VOID><CALL><CALL><NAME>$H</NAME>(<OBJECTLIT>{<OBJLITNAME>'i</OBJLITNAME>d': <STRING>'id'</STRING>, <OBJLITNAME>'classNam</OBJLITNAME>e': <STRING>'class'</STRING>}</OBJECTLIT></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>pair</PARAMETER>) <BLOCK>{
      <VAR>var <NAME>property = <CALL><NAME>pair</NAME>.<GETPROP><STRING>first</STRING></GETPROP>()</CALL></NAME>, <NAME>attribute = <CALL><NAME>pair</NAME>.<GETPROP><STRING>last</STRING></GETPROP>()</CALL></NAME></VAR>;
      <VAR>var <NAME>value = (<CALL><OR><GETELEM><NAME>element</NAME>[<NAME>property</NAME>]</GETELEM> || <STRING>''</STRING></OR>).<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NAME>value</NAME></IFNE>) <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>result</NAME></BINDNAME> += <ADD><ADD><ADD><STRING>' '</STRING> + <NAME>attribute</NAME></ADD> + <STRING>'='</STRING></ADD> + <CALL><NAME>value</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>(<TRUE>true</TRUE>)</CALL></ADD></ADD></SETNAME></EXPR_VOID>;</BLOCK></BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <ADD><NAME>result</NAME> + <STRING>'&gt;'</STRING></ADD></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>recursivelyCollect</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>property</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>elements = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETELEM><NAME>element</NAME>[<NAME>property</NAME>]</GETELEM></SETNAME></IFEQ>)
      <TARGET><BLOCK></TARGET>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>1</NUMBER></EQ></IFNE>)
        <EXPR_VOID><CALL><NAME>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>element</NAME>)</CALL>)<GOTO><TARGET></CALL></EXPR_VOID></GOTO></TARGET>;</BLOCK></LOOP>
    <RETURN>return <NAME>elements</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>ancestors</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>recursivelyCollect</STRING></GETPROP>(<STRING>'parentNode'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>descendants</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>$A</NAME>(<CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'*'</STRING>)</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>immediateDescendants</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>firstChild</STRING></GETPROP>)</SETNAME></NOT></IFNE>) <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
    <LOOP>while (<TARGET><IFEQ><AND><NAME></TARGET>element</NAME> &amp;&amp; <NE><GETPROP><NAME>element</NAME>.<STRING>nodeType</STRING></GETPROP> != <NUMBER>1</NUMBER></NE></AND></IFEQ>) <TARGET><EXPR_VOID><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>nextSibling<GOTO><TARGET></STRING></GETPROP></SETNAME></GOTO></EXPR_VOID></TARGET></LOOP>;
    <BLOCK>if (<IFNE><NAME>element</NAME></IFNE>) <RETURN>return [<CALL><ARRAYLIT><NAME>element</NAME></ARRAYLIT>].<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>nextSiblings</STRING></GETPROP>()</CALL>)</CALL></RETURN>;</BLOCK>
    <RETURN>return <ARRAYLIT>[]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>previousSiblings</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>recursivelyCollect</STRING></GETPROP>(<STRING>'previousSibling'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>nextSiblings</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>recursivelyCollect</STRING></GETPROP>(<STRING>'nextSibling'</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>siblings</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <RETURN>return <CALL><NAME>element</NAME>.<CALL><GETPROP><STRING>previousSiblings</STRING></GETPROP></CALL>().<CALL><GETPROP><STRING>reverse</STRING></GETPROP></CALL>().<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>element</NAME>.<GETPROP><STRING>nextSiblings</STRING></GETPROP>()</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>match</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>selector</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><EQ>typeof <TYPEOFNAME>selector</TYPEOFNAME> == <STRING>'string'</STRING></EQ></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>selector</BINDNAME> = new <NEW><NAME>Selector</NAME>(<NAME>selector</NAME>)</NEW></SETNAME></EXPR_VOID>;</BLOCK>
    <RETURN>return <CALL><NAME>selector</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>up</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>ancestors</STRING></GETPROP>()</CALL>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>down</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>descendants</STRING></GETPROP>()</CALL>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>previous</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>previousSiblings</STRING></GETPROP>()</CALL>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>next</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findElement</STRING></GETPROP>(<CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>nextSiblings</STRING></GETPROP>()</CALL>, <NAME>expression</NAME>, <NAME>index</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getElementsBySelector</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>args = <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL></NAME>, <NAME>element = <CALL><NAME>$</NAME>(<CALL><NAME>args</NAME>.<GETPROP><STRING>shift</STRING></GETPROP>()</CALL>)</CALL></NAME></VAR>;
    <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findChildElements</STRING></GETPROP>(<NAME>element</NAME>, <NAME>args</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getElementsByClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>document</NAME>.<GETPROP><STRING>getElementsByClassName</STRING></GETPROP>(<NAME>className</NAME>, <NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>readAttribute</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>name</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><AND><GETPROP><NAME>document</NAME>.<STRING>all</STRING></GETPROP> &amp;&amp; !<NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT></AND></IFNE>) <BLOCK>{
      <VAR>var <NAME>t = <GETPROP><NAME>Element</NAME>.<STRING>_attributeTranslations</STRING></GETPROP></NAME></VAR>;
      <BLOCK>if (<IFNE><GETELEM><NAME>t</NAME>.<GETPROP><STRING>values</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></IFNE>) <RETURN>return <CALL><NAME>t</NAME>.<GETELEM><GETPROP><STRING>values</STRING></GETPROP>[<NAME>name</NAME></GETELEM>](<NAME>element</NAME>, <NAME>name</NAME>)</CALL></RETURN>;</BLOCK>
      <BLOCK>if (<IFNE><GETELEM><NAME>t</NAME>.<GETPROP><STRING>names</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></IFNE>)  <EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME> = <GETELEM><NAME>t</NAME>.<GETPROP><STRING>names</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></SETNAME></EXPR_VOID>;</BLOCK>
      <VAR>var <NAME>attribute = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>attributes</STRING></GETPROP>[<NAME>name</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if(<IFNE><NAME>attribute</NAME></IFNE>) <RETURN>return <GETPROP><NAME>attribute</NAME>.<STRING>nodeValue</STRING></GETPROP></RETURN>;</BLOCK>
    }</BLOCK></BLOCK>
    <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>getAttribute</STRING></GETPROP>(<NAME>name</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getHeight</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<CALL><GETPROP><STRING>getDimensions</STRING></GETPROP></CALL>().<STRING>height</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getWidth</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<CALL><GETPROP><STRING>getDimensions</STRING></GETPROP></CALL>().<STRING>width</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>classNames</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return new <NEW><GETPROP><NAME>Element</NAME>.<STRING>ClassNames</STRING></GETPROP>(<NAME>element</NAME>)</NEW></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>hasClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <VAR>var <NAME>elementClassName = <GETPROP><NAME>element</NAME>.<STRING>className</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>elementClassName</NAME>.<STRING>length</STRING></GETPROP> == <NUMBER>0</NUMBER></EQ></IFNE>) <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><OR><EQ><NAME>elementClassName</NAME> == <NAME>className</NAME></EQ> ||
        <CALL><NAME>elementClassName</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(new <NEW><NAME>RegExp</NAME>(<ADD><ADD><STRING>"(^|\\s)"</STRING> + <NAME>className</NAME></ADD> + <STRING>"(\\s|$)"</STRING></ADD>)</NEW>)</CALL></OR></IFNE>)
      <RETURN>return <TRUE>true</TRUE></RETURN>;</BLOCK>
    <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>addClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><NAME>Element</NAME>.<CALL><GETPROP><STRING>classNames</STRING></GETPROP>(<NAME>element</NAME></CALL>).<GETPROP><STRING>add</STRING></GETPROP>(<NAME>className</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>removeClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><NAME>Element</NAME>.<CALL><GETPROP><STRING>classNames</STRING></GETPROP>(<NAME>element</NAME></CALL>).<GETPROP><STRING>remove</STRING></GETPROP>(<NAME>className</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toggleClassName</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>className</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!(<SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL>)</SETNAME></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><NAME>Element</NAME>.<GETELEM><CALL><GETPROP><STRING>classNames</STRING></GETPROP>(<NAME>element</NAME></CALL>)[<HOOK><CALL><NAME>element</NAME>.<GETPROP><STRING>hasClassName</STRING></GETPROP>(<NAME>className</NAME>)</CALL> ? <STRING>'remove'</STRING> : <STRING>'add'</STRING></HOOK></GETELEM>](<NAME>className</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>observe</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>observe</STRING></GETPROP>.<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>Event</NAME>, <NAME>arguments</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <CALL><CALL><NAME>$A</NAME>(<NAME>arguments</NAME></CALL>).<GETPROP><STRING>first</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stopObserving</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>stopObserving</STRING></GETPROP>.<GETPROP><STRING>apply</STRING></GETPROP>(<NAME>Event</NAME>, <NAME>arguments</NAME>)</CALL></EXPR_VOID>;
    <RETURN>return <CALL><CALL><NAME>$A</NAME>(<NAME>arguments</NAME></CALL>).<GETPROP><STRING>first</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  // removes whitespace-only text node children
  <OBJLITNAME>cleanWhitespace</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>node = <GETPROP><NAME>element</NAME>.<STRING>firstChild</STRING></GETPROP></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><NAME></TARGET>node</NAME></IFEQ>) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>nextNode = <GETPROP><NAME>node</NAME>.<STRING>nextSibling</STRING></GETPROP></NAME></VAR>;
      <BLOCK>if (<IFNE><AND><EQ><GETPROP><NAME>node</NAME>.<STRING>nodeType</STRING></GETPROP> == <NUMBER>3</NUMBER></EQ> &amp;&amp; !<NOT><CALL><REGEXP>/\S/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>node</NAME>.<STRING>nodeValue</STRING></GETPROP>)</CALL></NOT></AND></IFNE>)
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID>;</BLOCK>
      <EXPR_VOID><SETNAME><BINDNAME>node</BINDNAME> = <NAME>nextNode</NAME></SETNAME></EXPR_VOID>;
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></LOOP>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>empty</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>innerHTML</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^\s*$/</REGEXP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>descendantOf</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>ancestor</PARAMETER>) <BLOCK>{
    <EXPR_VOID><COMMA><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME>, <SETNAME><BINDNAME>ancestor</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>ancestor</NAME>)</CALL></SETNAME></COMMA></EXPR_VOID>;
    <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP></SETNAME></IFEQ>)
      <TARGET><BLOCK></TARGET>if (<IFNE><EQ><NAME>element</NAME> == <NAME>ancestor</NAME></EQ></IFNE>) <RETURN>return <TRUE>true<GOTO><TARGET></TRUE></RETURN></GOTO></TARGET>;</BLOCK></LOOP>
    <RETURN>return <FALSE>false</FALSE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>scrollTo</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>pos = <CALL><NAME>Position</NAME>.<GETPROP><STRING>cumulativeOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></NAME></VAR>;
    <EXPR_VOID><CALL><NAME>window</NAME>.<GETPROP><STRING>scrollTo</STRING></GETPROP>(<GETELEM><NAME>pos</NAME>[<NUMBER>0</NUMBER>]</GETELEM>, <GETELEM><NAME>pos</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getStyle</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>style</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><CALL>[<ARRAYLIT><STRING>'float'</STRING>,<STRING>'cssFloat'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<NAME>style</NAME>)</CALL></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>style</BINDNAME> = (typeof <HOOK><NE><TYPEOF><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>styleFloat</STRING></GETPROP></TYPEOF> != <STRING>'undefined'</STRING></NE> ? <STRING>'styleFloat'</STRING> : <STRING>'cssFloat'</STRING>)</HOOK></SETNAME></EXPR_VOID>;</BLOCK>
    <EXPR_VOID><SETNAME><BINDNAME>style</BINDNAME> = <CALL><NAME>style</NAME>.<GETPROP><STRING>camelize</STRING></GETPROP>()</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>value = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>[<NAME>style</NAME>]</GETELEM></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>value</NAME></NOT></IFNE>) <BLOCK>{
      <BLOCK>if (<IFNE><AND><GETPROP><NAME>document</NAME>.<STRING>defaultView</STRING></GETPROP> &amp;&amp; <GETPROP><NAME>document</NAME>.<GETPROP><STRING>defaultView</STRING></GETPROP>.<STRING>getComputedStyle</STRING></GETPROP></AND></IFNE>) <BLOCK>{
        <VAR>var <NAME>css = <CALL><NAME>document</NAME>.<GETPROP><STRING>defaultView</STRING></GETPROP>.<GETPROP><STRING>getComputedStyle</STRING></GETPROP>(<NAME>element</NAME>, <NULL>null</NULL>)</CALL></NAME></VAR>;
        <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <HOOK><NAME>css</NAME> ? <GETELEM><NAME>css</NAME>[<NAME>style</NAME>]</GETELEM> : <NULL>null</NULL></HOOK></SETNAME></EXPR_VOID>;
      }</BLOCK> else <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>currentStyle</STRING></GETPROP></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>currentStyle</STRING></GETPROP>[<NAME>style</NAME>]</GETELEM></SETNAME></EXPR_VOID>;
      <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
    }</BLOCK></BLOCK>

    <BLOCK>if(<IFNE><AND>(<EQ><NAME>value</NAME> == <STRING>'auto'</STRING>)</EQ> &amp;&amp; [<AND><CALL><ARRAYLIT><STRING>'width'</STRING>,<STRING>'height'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<NAME>style</NAME>)</CALL> &amp;&amp; (<NE><CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'display'</STRING>)</CALL> != <STRING>'none'</STRING>)</NE></AND></AND></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <ADD><GETELEM><NAME>element</NAME>[<ADD><STRING>'offset'</STRING>+<CALL><NAME>style</NAME>.<GETPROP><STRING>capitalize</STRING></GETPROP>()</CALL></ADD>]</GETELEM> + <STRING>'px'</STRING></ADD></SETNAME></EXPR_VOID>;</BLOCK>

    <BLOCK>if (<IFNE><AND><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP> &amp;&amp; [<CALL><ARRAYLIT><STRING>'left'</STRING>, <STRING>'top'</STRING>, <STRING>'right'</STRING>, <STRING>'bottom'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<NAME>style</NAME>)</CALL></AND></IFNE>)
      <BLOCK>if (<IFNE><EQ><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> == <STRING>'static'</STRING></EQ></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <STRING>'auto'</STRING></SETNAME></EXPR_VOID>;</BLOCK></BLOCK>
    <BLOCK>if(<IFNE><EQ><NAME>style</NAME> == <STRING>'opacity'</STRING></EQ></IFNE>) <BLOCK>{
      <BLOCK>if(<IFNE><NAME>value</NAME></IFNE>) <RETURN>return <CALL><NAME>parseFloat</NAME>(<NAME>value</NAME>)</CALL></RETURN>;</BLOCK>
      <BLOCK>if(<IFNE><SETNAME><BINDNAME>value</BINDNAME> = (<CALL><OR><CALL><NAME>element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'filter'</STRING>)</CALL> || <STRING>''</STRING></OR>).<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/alpha\(opacity=(.*)\)/</REGEXP>)</CALL></SETNAME></IFNE>)
        <BLOCK>if(<IFNE><GETELEM><NAME>value</NAME>[<NUMBER>1</NUMBER>]</GETELEM></IFNE>) <RETURN>return <DIV><CALL><NAME>parseFloat</NAME>(<GETELEM><NAME>value</NAME>[<NUMBER>1</NUMBER>]</GETELEM>)</CALL> / <NUMBER>100</NUMBER></DIV></RETURN>;</BLOCK></BLOCK>
      <RETURN>return <NUMBER>1.0</NUMBER></RETURN>;
    }</BLOCK></BLOCK>
    <RETURN>return <HOOK><EQ><NAME>value</NAME> == <STRING>'auto'</STRING></EQ> ? <NULL>null</NULL> : <NAME>value</NAME></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>setStyle</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>style</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><NAME>style</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <VAR>var <NAME>value = <GETELEM><NAME>style</NAME>[<NAME>name</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if(<IFNE><EQ><NAME>name</NAME> == <STRING>'opacity'</STRING></EQ></IFNE>) <BLOCK>{
        <BLOCK>if (<IFNE><EQ><NAME>value</NAME> == <NUMBER>1</NUMBER></EQ></IFNE>) <BLOCK>{
          <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = (<HOOK><AND><CALL><REGEXP>/Gecko/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL> &amp;&amp;
            !<NOT><CALL><REGEXP>/Konqueror|Safari|KHTML/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL></NOT>)</AND> ? <NUMBER>0.999999</NUMBER> : <NUMBER>1.0</NUMBER></HOOK></SETNAME></EXPR_VOID>;
          <BLOCK>if(<IFNE><AND><CALL><REGEXP>/MSIE/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL> &amp;&amp; !<NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT></AND></IFNE>)
            <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>filter</STRING> = <CALL><NAME>element</NAME>.<CALL><GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'filter'</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/alpha\([^\)]*\)/gi</REGEXP>,<STRING>''</STRING>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
        }</BLOCK> else <BLOCK>if(<IFNE><EQ><NAME>value</NAME> == <STRING>''</STRING></EQ></IFNE>) <BLOCK>{
          <BLOCK>if(<IFNE><AND><CALL><REGEXP>/MSIE/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL> &amp;&amp; !<NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT></AND></IFNE>)
            <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>filter</STRING> = <CALL><NAME>element</NAME>.<CALL><GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'filter'</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/alpha\([^\)]*\)/gi</REGEXP>,<STRING>''</STRING>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
        }</BLOCK> else <BLOCK>{
          <BLOCK>if(<IFNE><LT><NAME>value</NAME> &lt; <NUMBER>0.00001</NUMBER></LT></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>value</BINDNAME> = <NUMBER>0</NUMBER></SETNAME></EXPR_VOID>;</BLOCK>
          <BLOCK>if(<IFNE><AND><CALL><REGEXP>/MSIE/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL> &amp;&amp; !<NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT></AND></IFNE>)
            <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>filter</STRING> = <ADD><ADD><ADD><CALL><NAME>element</NAME>.<CALL><GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'filter'</STRING></CALL>).<GETPROP><STRING>replace</STRING></GETPROP>(<REGEXP>/alpha\([^\)]*\)/gi</REGEXP>,<STRING>''</STRING>)</CALL> +
              <STRING>'alpha(opacity='</STRING></ADD>+<MUL><NAME>value</NAME>*<NUMBER>100</NUMBER></MUL></ADD>+<STRING>')'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
        <GOTO><GOTO></GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
      }</BLOCK> else <BLOCK>if(<IFNE><CALL>[<ARRAYLIT><STRING>'float'</STRING>,<STRING>'cssFloat'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<NAME>name</NAME>)</CALL></IFNE>) <EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME> = (typeof <HOOK><NE><TYPEOF><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>styleFloat</STRING></GETPROP></TYPEOF> != <STRING>'undefined'</STRING>)</NE> ? <STRING>'styleFloat'</STRING> : <STRING>'cssFloat'<GOTO></STRING></HOOK></SETNAME></EXPR_VOID></GOTO>;</BLOCK></BLOCK>
      <NAME>element</NAME>.<EXPR_VOID><SETELEM><GETPROP><STRING>style</STRING></GETPROP>[<CALL><NAME>name</NAME>.<GETPROP><STRING>camelize</STRING></GETPROP>()</CALL>] = <NAME>value</NAME></SETELEM></EXPR_VOID>;
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getDimensions</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>display = <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getStyle</STRING></GETPROP>(<STRING>'display'</STRING>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><AND><NE><NAME>display</NAME> != <STRING>'none'</STRING></NE> &amp;&amp; <NE><NAME>display</NAME> != <NULL>null</NULL></NE></AND></IFNE>) // Safari bug
      <RETURN>return <OBJECTLIT>{<OBJLITNAME>width</OBJLITNAME>: <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP>, <OBJLITNAME>height</OBJLITNAME>: <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP>}</OBJECTLIT></RETURN>;</BLOCK>

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    <VAR>var <NAME>els = <GETPROP><NAME>element</NAME>.<STRING>style</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalVisibility = <GETPROP><NAME>els</NAME>.<STRING>visibility</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalPosition = <GETPROP><NAME>els</NAME>.<STRING>position</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalDisplay = <GETPROP><NAME>els</NAME>.<STRING>display</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>visibility</STRING> = <STRING>'hidden'</STRING></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>position</STRING> = <STRING>'absolute'</STRING></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>display</STRING> = <STRING>'block'</STRING></SETPROP></EXPR_VOID>;
    <VAR>var <NAME>originalWidth = <GETPROP><NAME>element</NAME>.<STRING>clientWidth</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>originalHeight = <GETPROP><NAME>element</NAME>.<STRING>clientHeight</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>display</STRING> = <NAME>originalDisplay</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>position</STRING> = <NAME>originalPosition</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>els</NAME>.<STRING>visibility</STRING> = <NAME>originalVisibility</NAME></SETPROP></EXPR_VOID>;
    <RETURN>return <OBJECTLIT>{<OBJLITNAME>width</OBJLITNAME>: <NAME>originalWidth</NAME>, <OBJLITNAME>height</OBJLITNAME>: <NAME>originalHeight</NAME>}</OBJECTLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>makePositioned</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>pos = <CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><OR><EQ><NAME>pos</NAME> == <STRING>'static'</STRING></EQ> || !<NOT><NAME>pos</NAME></NOT></OR></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_madePositioned</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
      <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> = <STRING>'relative'</STRING></SETPROP></EXPR_VOID>;
      // Opera returns the offset relative to the positioning context, when an
      // element is position relative but top and left have not been defined
      <BLOCK>if (<IFNE><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></IFNE>) <BLOCK>{
        <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING> = <NUMBER>0</NUMBER></SETPROP></EXPR_VOID>;
        <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING> = <NUMBER>0</NUMBER></SETPROP></EXPR_VOID>;
      }</BLOCK></BLOCK>
    }</BLOCK></BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>undoPositioned</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>_madePositioned</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_madePositioned</STRING> = <NAME>undefined</NAME></SETPROP></EXPR_VOID>;
      <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>bottom</STRING> =
        <NAME>element</NAME>.<SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>right</STRING> = <STRING>''</STRING></SETPROP></SETPROP></SETPROP></SETPROP></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>makeClipping</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_overflow</STRING> = <OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>overflow</STRING></GETPROP> || <STRING>'auto'</STRING></OR></SETPROP></EXPR_VOID>;
    <BLOCK>if (<IFNE><NE>(<OR><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'overflow'</STRING>)</CALL> || <STRING>'visible'</STRING>)</OR> != <STRING>'hidden'</STRING></NE></IFNE>)
      <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>overflow</STRING> = <STRING>'hidden'</STRING></SETPROP></EXPR_VOID>;</BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>undoClipping</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP></NOT></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>overflow</STRING> = <HOOK><EQ><GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP> == <STRING>'auto'</STRING></EQ> ? <STRING>''</STRING> : <GETPROP><NAME>element</NAME>.<STRING>_overflow</STRING></GETPROP></HOOK></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_overflow</STRING> = <NULL>null</NULL></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>, <OBJECTLIT>{<OBJLITNAME>childOf</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>descendantOf</STRING></GETPROP>}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>_attributeTranslations</STRING> = <OBJECTLIT>{}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<STRING>names</STRING> = <OBJECTLIT>{
  <OBJLITNAME>colspan</OBJLITNAME>:   <STRING>"colSpan"</STRING>,
  <OBJLITNAME>rowspan</OBJLITNAME>:   <STRING>"rowSpan"</STRING>,
  <OBJLITNAME>valign</OBJLITNAME>:    <STRING>"vAlign"</STRING>,
  <OBJLITNAME>datetime</OBJLITNAME>:  <STRING>"dateTime"</STRING>,
  <OBJLITNAME>accesskey</OBJLITNAME>: <STRING>"accessKey"</STRING>,
  <OBJLITNAME>tabindex</OBJLITNAME>:  <STRING>"tabIndex"</STRING>,
  <OBJLITNAME>enctype</OBJLITNAME>:   <STRING>"encType"</STRING>,
  <OBJLITNAME>maxlength</OBJLITNAME>: <STRING>"maxLength"</STRING>,
  <OBJLITNAME>readonly</OBJLITNAME>:  <STRING>"readOnly"</STRING>,
  <OBJLITNAME>longdesc</OBJLITNAME>:  <STRING>"longDesc"</STRING>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<STRING>values</STRING> = <OBJECTLIT>{
  <OBJLITNAME>_getAttr</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>getAttribute</STRING></GETPROP>(<NAME>attribute</NAME>, <NUMBER>2</NUMBER>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>_flag</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
    <RETURN>return <HOOK><CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<NAME>attribute</NAME>)</CALL> ? <NAME>attribute</NAME> : <NULL>null</NULL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>style</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<GETPROP><STRING>cssText</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>title</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>node = <CALL><NAME>element</NAME>.<GETPROP><STRING>getAttributeNode</STRING></GETPROP>(<STRING>'title'</STRING>)</CALL></NAME></VAR>;
    <RETURN>return <HOOK><GETPROP><NAME>node</NAME>.<STRING>specified</STRING></GETPROP> ? <GETPROP><NAME>node</NAME>.<STRING>nodeValue</STRING></GETPROP> : <NULL>null</NULL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<STRING>values</STRING></GETPROP>, <OBJECTLIT>{
  <OBJLITNAME>href</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>values</STRING></GETPROP>.<STRING>_getAttr</STRING></GETPROP>,
  <OBJLITNAME>src</OBJLITNAME>:  <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>values</STRING></GETPROP>.<STRING>_getAttr</STRING></GETPROP>,
  <OBJLITNAME>disabled</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>values</STRING></GETPROP>.<STRING>_flag</STRING></GETPROP>,
  <OBJLITNAME>checked</OBJLITNAME>:  <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>values</STRING></GETPROP>.<STRING>_flag</STRING></GETPROP>,
  <OBJLITNAME>readonly</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>values</STRING></GETPROP>.<STRING>_flag</STRING></GETPROP>,
  <OBJLITNAME>multiple</OBJLITNAME>: <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>_attributeTranslations</STRING></GETPROP>.<GETPROP><STRING>values</STRING></GETPROP>.<STRING>_flag</STRING></GETPROP>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>Simulated</STRING> = <OBJECTLIT>{
  <OBJLITNAME>hasAttribute</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>attribute</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>t = <GETPROP><NAME>Element</NAME>.<STRING>_attributeTranslations</STRING></GETPROP></NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>attribute</BINDNAME> = <OR><GETELEM><NAME>t</NAME>.<GETPROP><STRING>names</STRING></GETPROP>[<NAME>attribute</NAME>]</GETELEM> || <NAME>attribute</NAME></OR></SETNAME></EXPR_VOID>;
    <RETURN>return <GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<CALL><GETPROP><STRING>getAttributeNode</STRING></GETPROP>(<NAME>attribute</NAME></CALL>).<STRING>specified</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

// IE is missing .innerHTML support for TABLE-related elements
<BLOCK>if (<IFNE><AND><GETPROP><NAME>document</NAME>.<STRING>all</STRING></GETPROP> &amp;&amp; !<NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT></AND></IFNE>)<BLOCK>{
  <NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>update</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>html</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>html</BINDNAME> = typeof <HOOK><EQ><TYPEOFNAME>html</TYPEOFNAME> == <STRING>'undefined'</STRING></EQ> ? <STRING>''</STRING> : <CALL><NAME>html</NAME>.<GETPROP><STRING>toString</STRING></GETPROP>()</CALL></HOOK></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>tagName = <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><CALL>[<ARRAYLIT><STRING>'THEAD'</STRING>,<STRING>'TBODY'</STRING>,<STRING>'TR'</STRING>,<STRING>'TD'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<NAME>tagName</NAME>)</CALL></IFNE>) <BLOCK>{
      <VAR>var <NAME>div = <CALL><NAME>document</NAME>.<GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING>)</CALL></NAME></VAR>;
      <SWITCH>switch (<NAME>tagName</NAME>) {
        <CASE>case <STRING>'THEAD'</STRING></CASE>:
        <CASE>case <STRING>'TBODY'</STRING>:
          <BLOCK><EXPR_VOID><SETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING> = <ADD><ADD><STRING>'&lt;table&gt;&lt;tbody&gt;'</STRING> +  <CALL><NAME>html</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></ADD> + <STRING>'&lt;/tbody&gt;&lt;/table&gt;'</STRING></ADD></SETPROP></EXPR_VOID>;
          <EXPR_VOID><SETNAME><BINDNAME>depth</BINDNAME> = <NUMBER>2</NUMBER></SETNAME></EXPR_VOID>;
          <BREAK>break</BREAK></BLOCK></CASE>;
        <CASE>case <STRING>'TR'</STRING>:
          <BLOCK><EXPR_VOID><SETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING> = <ADD><ADD><STRING>'&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;'</STRING> +  <CALL><NAME>html</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></ADD> + <STRING>'&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</STRING></ADD></SETPROP></EXPR_VOID>;
          <EXPR_VOID><SETNAME><BINDNAME>depth</BINDNAME> = <NUMBER>3</NUMBER></SETNAME></EXPR_VOID>;
          <BREAK>break</BREAK></BLOCK></CASE>;
        <CASE>case <STRING>'TD'</STRING>:
          <BLOCK><EXPR_VOID><SETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING> = <ADD><ADD><STRING>'&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;'</STRING> +  <CALL><NAME>html</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></ADD> + <STRING>'&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</STRING></ADD></SETPROP></EXPR_VOID>;
          <EXPR_VOID><SETNAME><BINDNAME>depth</BINDNAME> = <NUMBER>4</NUMBER></SETNAME></EXPR_VOID></BLOCK></CASE>;
      }</SWITCH>
      <EXPR_VOID><CALL><CALL><NAME>$A</NAME>(<GETPROP><NAME>element</NAME>.<STRING>childNodes</STRING></GETPROP></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>node</PARAMETER>)<BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID></BLOCK>
      }</FUNCTION>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>depth</NAME>.<GETPROP><STRING>times</STRING></GETPROP>(<FUNCTION>function()<BLOCK>{ <EXPR_VOID><SETNAME><BINDNAME>div</BINDNAME> = <GETPROP><NAME>div</NAME>.<STRING>firstChild</STRING></GETPROP></SETNAME></EXPR_VOID></BLOCK> }</FUNCTION>)</CALL></EXPR_VOID>;

      <EXPR_VOID><CALL><CALL><NAME>$A</NAME>(<GETPROP><NAME>div</NAME>.<STRING>childNodes</STRING></GETPROP></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(
        <FUNCTION>function(<PARAMETER>node</PARAMETER>)<BLOCK>{ <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>node</NAME>)</CALL></EXPR_VOID></BLOCK> }</FUNCTION>)</CALL></EXPR_VOID>;
    }</BLOCK> else <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>innerHTML</STRING> = <CALL><NAME>html</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <GOTO></GOTO>}</BLOCK></BLOCK>
    <EXPR_VOID><CALL><NAME>setTimeout</NAME>(<FUNCTION>function() <BLOCK>{<EXPR_VOID><CALL><NAME>html</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>()</CALL></EXPR_VOID></BLOCK>}</FUNCTION>, <NUMBER>10</NUMBER>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>
}</BLOCK></BLOCK>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Element</NAME>, <GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_RESULT>;

<VAR>var <NAME>_nativeExtensions = <FALSE>false</FALSE></NAME></VAR>;

<BLOCK>if(<IFNE><CALL><REGEXP>/Konqueror|Safari|KHTML/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL></IFNE>)
  [<EXPR_RESULT><CALL><ARRAYLIT><STRING>''</STRING>, <STRING>'Form'</STRING>, <STRING>'Input'</STRING>, <STRING>'TextArea'</STRING>, <STRING>'Select'</STRING></ARRAYLIT>].<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>tag</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>className = <ADD><ADD><STRING>'HTML'</STRING> + <NAME>tag</NAME></ADD> + <STRING>'Element'</STRING></ADD></NAME></VAR>;
    <BLOCK>if(<IFNE><GETELEM><NAME>window</NAME>[<NAME>className</NAME>]</GETELEM></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <VAR>var <NAME>klass = <SETELEM><NAME>window</NAME>[<NAME>className</NAME>] = <OBJECTLIT>{}</OBJECTLIT></SETELEM></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>klass</NAME>.<STRING>prototype</STRING> = <GET_REF><NAME>document</NAME>.<REF_SPECIAL><CALL><GETPROP><STRING>createElement</STRING></GETPROP>(<HOOK><NAME>tag</NAME> ? <CALL><NAME>tag</NAME>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL> : <STRING>'div'</STRING></HOOK></CALL></REF_SPECIAL>).__proto__</GET_REF></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>)</CALL></EXPR_RESULT>;</BLOCK>

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>addMethods</STRING> = <FUNCTION>function(<PARAMETER>methods</PARAMETER>) <BLOCK>{
  <EXPR_VOID><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>, <OR><NAME>methods</NAME> || <OBJECTLIT>{}</OBJECTLIT></OR>)</CALL></EXPR_VOID>;

  <FUNCTION>function <FUNCNAME>copy</FUNCNAME>(<PARAMETER>methods</PARAMETER>, <PARAMETER>destination</PARAMETER>, <PARAMETER>onlyIfAbsent</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>onlyIfAbsent</BINDNAME> = <OR><NAME>onlyIfAbsent</NAME> || <FALSE>false</FALSE></OR></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>cache = <GETPROP><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>.<STRING>cache</STRING></GETPROP></NAME></VAR>;
    <LOCAL_BLOCK><LOOP>for <VAR>(var <NAME><EXPR_VOID><SETNAME><BINDNAME>property</BINDNAME></SETNAME></NAME></EXPR_VOID></VAR> in <ENUM_INIT_KEYS><NAME>methods</NAME></ENUM_INIT_KEYS>) <TARGET><BLOCK><BLOCK></TARGET>{
      <VAR>var <NAME>value = <GETELEM><NAME>methods</NAME>[<NAME>property</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><OR>!<NOT><NAME>onlyIfAbsent</NAME></NOT> || !(<NOT><IN><NAME>property</NAME> in <NAME>destination</NAME>)</IN></NOT></OR></IFNE>)
        <EXPR_VOID><SETELEM><NAME>destination</NAME>[<NAME>property</NAME>] = <CALL><NAME>cache</NAME>.<GETPROP><STRING>findOrStore</STRING></GETPROP>(<NAME>value</NAME>)</CALL></SETELEM></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK></BLOCK>
  }</FUNCTION>

  <BLOCK>if (<IFNE><NE>typeof <TYPEOFNAME>HTMLElement</TYPEOFNAME> != <STRING>'undefined'</STRING></NE></IFNE>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>copy</NAME>(<GETPROP><NAME>Element</NAME>.<STRING>Methods</STRING></GETPROP>, <GETPROP><NAME>HTMLElement</NAME>.<STRING>prototype</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>copy</NAME>(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>Methods</STRING></GETPROP>.<STRING>Simulated</STRING></GETPROP>, <GETPROP><NAME>HTMLElement</NAME>.<STRING>prototype</STRING></GETPROP>, <TRUE>true</TRUE>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>copy</NAME>(<GETPROP><NAME>Form</NAME>.<STRING>Methods</STRING></GETPROP>, <GETPROP><NAME>HTMLFormElement</NAME>.<STRING>prototype</STRING></GETPROP>)</CALL></EXPR_VOID>;
    [<EXPR_VOID><CALL><ARRAYLIT><NAME>HTMLInputElement</NAME>, <NAME>HTMLTextAreaElement</NAME>, <NAME>HTMLSelectElement</NAME></ARRAYLIT>].<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>klass</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>copy</NAME>(<GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING></GETPROP>, <GETPROP><NAME>klass</NAME>.<STRING>prototype</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>_nativeExtensions</BINDNAME> = <TRUE>true</TRUE></SETNAME></EXPR_VOID>;
  }</BLOCK></BLOCK></BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>

<VAR>var <NAME>Toggle = new <NEW><NAME>Object</NAME>()</NEW></NAME></VAR>;
<EXPR_RESULT><SETPROP><NAME>Toggle</NAME>.<STRING>display</STRING> = <GETPROP><NAME>Element</NAME>.<STRING>toggle</STRING></GETPROP></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Abstract</NAME>.<STRING>Insertion</STRING> = <FUNCTION>function(<PARAMETER>adjacency</PARAMETER>) <BLOCK>{
  <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>adjacency</STRING> = <NAME>adjacency</NAME></SETPROP></EXPR_VOID>;</BLOCK>
}</FUNCTION></SETPROP></EXPR_RESULT>

<NAME>Abstract</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Insertion</STRING></GETPROP>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>content</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>element</STRING> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>content</STRING> = <CALL><NAME>content</NAME>.<GETPROP><STRING>stripScripts</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;

    <BLOCK>if (<IFNE><AND><GETPROP><THIS>this</THIS>.<STRING>adjacency</STRING></GETPROP> &amp;&amp; <GETPROP><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<STRING>insertAdjacentHTML</STRING></GETPROP></AND></IFNE>) <BLOCK>{
      <TRY>try <BLOCK>{
        <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>insertAdjacentHTML</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>adjacency</STRING></GETPROP>, <GETPROP><THIS>this</THIS>.<STRING>content</STRING></GETPROP>)</CALL></EXPR_VOID>;
      }</BLOCK> <CATCH>catch (<NAME>e</NAME>) {
        <BLOCK><VAR>var <NAME>tagName = <CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><CALL>[<ARRAYLIT><STRING>'TBODY'</STRING>, <STRING>'TR'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<NAME>tagName</NAME>)</CALL></IFNE>) <BLOCK>{
          <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>insertContent</STRING></GETPROP>(<CALL><THIS>this</THIS>.<GETPROP><STRING>contentFromAnonymousTable</STRING></GETPROP>()</CALL>)</CALL></EXPR_VOID>;
        }</BLOCK> else <BLOCK>{
          <THROW>throw <NAME>e</NAME></THROW>;
        <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK></CATCH>
      }</TRY>
    }</BLOCK> else <BLOCK>{
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>range</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>ownerDocument</STRING></GETPROP>.<GETPROP><STRING>createRange</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
      <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>initializeRange</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>initializeRange</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>insertContent</STRING></GETPROP>([<ARRAYLIT><CALL><THIS>this</THIS>.<GETPROP><STRING>range</STRING></GETPROP>.<GETPROP><STRING>createContextualFragment</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>content</STRING></GETPROP>)</CALL>]</ARRAYLIT>)</CALL></EXPR_VOID>;
    <GOTO></GOTO>}</BLOCK></BLOCK>

    <EXPR_VOID><CALL><NAME>setTimeout</NAME>(<FUNCTION>function() <BLOCK>{<EXPR_VOID><CALL><NAME>content</NAME>.<GETPROP><STRING>evalScripts</STRING></GETPROP>()</CALL></EXPR_VOID></BLOCK>}</FUNCTION>, <NUMBER>10</NUMBER>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>contentFromAnonymousTable</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>div = <CALL><NAME>document</NAME>.<GETPROP><STRING>createElement</STRING></GETPROP>(<STRING>'div'</STRING>)</CALL></NAME></VAR>;
    <EXPR_VOID><SETPROP><NAME>div</NAME>.<STRING>innerHTML</STRING> = <ADD><ADD><STRING>'&lt;table&gt;&lt;tbody&gt;'</STRING> + <GETPROP><THIS>this</THIS>.<STRING>content</STRING></GETPROP></ADD> + <STRING>'&lt;/tbody&gt;&lt;/table&gt;'</STRING></ADD></SETPROP></EXPR_VOID>;
    <RETURN>return <CALL><NAME>$A</NAME>(<GETPROP><NAME>div</NAME>.<GETELEM><GETPROP><STRING>childNodes</STRING></GETPROP>[<NUMBER>0</NUMBER></GETELEM>].<GETELEM><GETPROP><STRING>childNodes</STRING></GETPROP>[<NUMBER>0</NUMBER></GETELEM>].<STRING>childNodes</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<VAR>var <NAME>Insertion = new <NEW><NAME>Object</NAME>()</NEW></NAME></VAR>;

<EXPR_RESULT><SETPROP><NAME>Insertion</NAME>.<STRING>Before</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Insertion</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Before</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>Insertion</STRING></GETPROP>(<STRING>'beforeBegin'</STRING>)</NEW>, <OBJECTLIT>{
  <OBJLITNAME>initializeRange</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>range</STRING></GETPROP>.<GETPROP><STRING>setStartBefore</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>insertContent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>fragments</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>fragments</NAME>.<GETPROP><STRING>each</STRING></GETPROP>((<CALL><FUNCTION>function(<PARAMETER>fragment</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>insertBefore</STRING></GETPROP>(<NAME>fragment</NAME>, <GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>).<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Insertion</NAME>.<STRING>Top</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Insertion</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Top</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>Insertion</STRING></GETPROP>(<STRING>'afterBegin'</STRING>)</NEW>, <OBJECTLIT>{
  <OBJLITNAME>initializeRange</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>range</STRING></GETPROP>.<GETPROP><STRING>selectNodeContents</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>range</STRING></GETPROP>.<GETPROP><STRING>collapse</STRING></GETPROP>(<TRUE>true</TRUE>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>insertContent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>fragments</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>fragments</NAME>.<CALL><GETPROP><STRING>reverse</STRING></GETPROP>(<FALSE>false</FALSE></CALL>).<GETPROP><STRING>each</STRING></GETPROP>((<CALL><FUNCTION>function(<PARAMETER>fragment</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>insertBefore</STRING></GETPROP>(<NAME>fragment</NAME>, <GETPROP><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<STRING>firstChild</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>).<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Insertion</NAME>.<STRING>Bottom</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Insertion</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Bottom</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>Insertion</STRING></GETPROP>(<STRING>'beforeEnd'</STRING>)</NEW>, <OBJECTLIT>{
  <OBJLITNAME>initializeRange</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>range</STRING></GETPROP>.<GETPROP><STRING>selectNodeContents</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>range</STRING></GETPROP>.<GETPROP><STRING>collapse</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>insertContent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>fragments</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>fragments</NAME>.<GETPROP><STRING>each</STRING></GETPROP>((<CALL><FUNCTION>function(<PARAMETER>fragment</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>appendChild</STRING></GETPROP>(<NAME>fragment</NAME>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>).<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Insertion</NAME>.<STRING>After</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Insertion</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>After</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>Insertion</STRING></GETPROP>(<STRING>'afterEnd'</STRING>)</NEW>, <OBJECTLIT>{
  <OBJLITNAME>initializeRange</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>range</STRING></GETPROP>.<GETPROP><STRING>setStartAfter</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>insertContent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>fragments</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><NAME>fragments</NAME>.<GETPROP><STRING>each</STRING></GETPROP>((<CALL><FUNCTION>function(<PARAMETER>fragment</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>parentNode</STRING></GETPROP>.<GETPROP><STRING>insertBefore</STRING></GETPROP>(<NAME>fragment</NAME>,
        <GETPROP><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<STRING>nextSibling</STRING></GETPROP>)</CALL></EXPR_VOID>;</BLOCK>
    }</FUNCTION>).<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Element</NAME>.<STRING>ClassNames</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Element</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>ClassNames</STRING></GETPROP>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>element</STRING> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>_each</OBJLITNAME>: <FUNCTION>function(<PARAMETER>iterator</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>className</STRING></GETPROP>.<CALL><GETPROP><STRING>split</STRING></GETPROP>(<REGEXP>/\s+/</REGEXP></CALL>).<CALL><GETPROP><STRING>select</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>name</PARAMETER>) <BLOCK>{
      <RETURN>return <GT><GETPROP><NAME>name</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>0</NUMBER></GT></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<GETPROP><STRING>_each</STRING></GETPROP>(<NAME>iterator</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>set</OBJLITNAME>: <FUNCTION>function(<PARAMETER>className</PARAMETER>) <BLOCK>{
    <THIS>this</THIS>.<EXPR_VOID><SETPROP><GETPROP><STRING>element</STRING></GETPROP>.<STRING>className</STRING> = <NAME>className</NAME></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>add</OBJLITNAME>: <FUNCTION>function(<PARAMETER>classNameToAdd</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><CALL><THIS>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>classNameToAdd</NAME>)</CALL></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>set</STRING></GETPROP>(<CALL><CALL><NAME>$A</NAME>(<THIS>this</THIS></CALL>).<CALL><GETPROP><STRING>concat</STRING></GETPROP>(<NAME>classNameToAdd</NAME></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>' '</STRING>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>remove</OBJLITNAME>: <FUNCTION>function(<PARAMETER>classNameToRemove</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<CALL><THIS>this</THIS>.<GETPROP><STRING>include</STRING></GETPROP>(<NAME>classNameToRemove</NAME>)</CALL></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>set</STRING></GETPROP>(<CALL><CALL><NAME>$A</NAME>(<THIS>this</THIS></CALL>).<CALL><GETPROP><STRING>without</STRING></GETPROP>(<NAME>classNameToRemove</NAME></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>' '</STRING>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toString</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$A</NAME>(<THIS>this</THIS></CALL>).<GETPROP><STRING>join</STRING></GETPROP>(<STRING>' '</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<GETPROP><STRING>ClassNames</STRING></GETPROP>.<STRING>prototype</STRING></GETPROP>, <NAME>Enumerable</NAME>)</CALL></EXPR_RESULT>;
<VAR>var <NAME>Selector = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></NAME></VAR>;
<EXPR_RESULT><SETPROP><NAME>Selector</NAME>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>expression</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>params</STRING> = <OBJECTLIT>{<OBJLITNAME>classNames</OBJLITNAME>: <ARRAYLIT>[]</ARRAYLIT>}</OBJECTLIT></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>expression</STRING> = <CALL><NAME>expression</NAME>.<CALL><GETPROP><STRING>toString</STRING></GETPROP></CALL>().<GETPROP><STRING>strip</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>parseExpression</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>compileMatcher</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>parseExpression</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <FUNCTION>function <FUNCNAME>abort</FUNCNAME>(<PARAMETER>message</PARAMETER>) <BLOCK>{ <THROW>throw <ADD><STRING>'Parse error in selector: '</STRING> + <NAME>message</NAME></ADD></THROW>;</BLOCK> }</FUNCTION>

    <BLOCK>if (<IFNE><EQ><GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP> == <STRING>''</STRING></EQ></IFNE>)  <EXPR_VOID><CALL><NAME>abort</NAME>(<STRING>'empty expression'</STRING>)</CALL></EXPR_VOID>;</BLOCK>

    <VAR>var <NAME>params = <GETPROP><THIS>this</THIS>.<STRING>params</STRING></GETPROP></NAME>, <NAME>expr = <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></NAME>, <NAME>match</NAME>, <NAME>modifier</NAME>, <NAME>clause</NAME>, <NAME>rest</NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>match</BINDNAME> = <CALL><NAME>expr</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^(.*)\[([a-z0-9_:-]+?)(?:([~\|!]?=)(?:"([^"]*)"|([^\]\s]*)))?\]$/i</REGEXP>)</CALL></SETNAME></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETPROP><NAME>params</NAME>.<STRING>attributes</STRING> = <OR><GETPROP><NAME>params</NAME>.<STRING>attributes</STRING></GETPROP> || <ARRAYLIT>[]</ARRAYLIT></OR></SETPROP></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>params</NAME>.<GETPROP><STRING>attributes</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<OBJECTLIT>{<OBJLITNAME>name</OBJLITNAME>: <GETELEM><NAME>match</NAME>[<NUMBER>2</NUMBER>]</GETELEM>, <OBJLITNAME>operator</OBJLITNAME>: <GETELEM><NAME>match</NAME>[<NUMBER>3</NUMBER>]</GETELEM>, <OBJLITNAME>value</OBJLITNAME>: <OR><GETELEM><NAME>match</NAME>[<NUMBER>4</NUMBER>]</GETELEM> || <OR><GETELEM><NAME>match</NAME>[<NUMBER>5</NUMBER>]</GETELEM> || <STRING>''</STRING></OR></OR>}</OBJECTLIT>)</CALL></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>expr</BINDNAME> = <GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER>]</GETELEM></SETNAME></EXPR_VOID>;
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></LOOP>

    <BLOCK>if (<IFNE><EQ><NAME>expr</NAME> == <STRING>'*'</STRING></EQ></IFNE>) <RETURN>return <THIS>this</THIS>.<SETPROP><GETPROP><STRING>params</STRING></GETPROP>.<STRING>wildcard</STRING> = <TRUE>true</TRUE></SETPROP></RETURN>;</BLOCK>

    <LOOP>while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>match</BINDNAME> = <CALL><NAME>expr</NAME>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/^([^a-z0-9_-])?([a-z0-9_-]+)(.*)/i</REGEXP>)</CALL></SETNAME></IFEQ>) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><COMMA><COMMA><SETNAME><BINDNAME>modifier</BINDNAME> = <GETELEM><NAME>match</NAME>[<NUMBER>1</NUMBER>]</GETELEM></SETNAME>, <SETNAME><BINDNAME>clause</BINDNAME> = <GETELEM><NAME>match</NAME>[<NUMBER>2</NUMBER>]</GETELEM></SETNAME></COMMA>, <SETNAME><BINDNAME>rest</BINDNAME> = <GETELEM><NAME>match</NAME>[<NUMBER>3</NUMBER>]</GETELEM></SETNAME></COMMA></EXPR_VOID>;
      <SWITCH>switch (<NAME>modifier</NAME>) {
        <CASE>case <STRING>'#'</STRING>:       <BLOCK><EXPR_VOID><SETPROP><NAME>params</NAME>.<STRING>id</STRING> = <NAME>clause</NAME></SETPROP></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
        <CASE>case <STRING>'.'</STRING>:       <BLOCK><EXPR_VOID><CALL><NAME>params</NAME>.<GETPROP><STRING>classNames</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>(<NAME>clause</NAME>)</CALL></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
        <CASE>case <STRING>''</STRING></CASE>:
        <CASE>case <NAME>undefined</NAME>: <BLOCK><EXPR_VOID><SETPROP><NAME>params</NAME>.<STRING>tagName</STRING> = <CALL><NAME>clause</NAME>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
        <DEFAULT>default:        <BLOCK><EXPR_VOID><CALL><NAME>abort</NAME>(<CALL><NAME>expr</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL>)</CALL></EXPR_VOID></BLOCK></DEFAULT>;
      }</SWITCH>
      <EXPR_VOID><SETNAME><BINDNAME>expr</BINDNAME> = <NAME>rest</NAME></SETNAME></EXPR_VOID>;
    <GOTO><TARGET></GOTO></TARGET>}</BLOCK></LOOP>

    <BLOCK>if (<IFNE><GT><GETPROP><NAME>expr</NAME>.<STRING>length</STRING></GETPROP> &gt; <NUMBER>0</NUMBER></GT></IFNE>) <EXPR_VOID><CALL><NAME>abort</NAME>(<CALL><NAME>expr</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL>)</CALL></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>buildMatchExpression</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>params = <GETPROP><THIS>this</THIS>.<STRING>params</STRING></GETPROP></NAME>, <NAME>conditions = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>clause</NAME></VAR>;

    <BLOCK>if (<IFNE><GETPROP><NAME>params</NAME>.<STRING>wildcard</STRING></GETPROP></IFNE>)
      <EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<STRING>'true'</STRING>)</CALL></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><SETNAME><BINDNAME>clause</BINDNAME> = <GETPROP><NAME>params</NAME>.<STRING>id</STRING></GETPROP></SETNAME></IFNE>)
      <EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><STRING>'element.readAttribute("id") == '</STRING> + <CALL><NAME>clause</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD>)</CALL></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><SETNAME><BINDNAME>clause</BINDNAME> = <GETPROP><NAME>params</NAME>.<STRING>tagName</STRING></GETPROP></SETNAME></IFNE>)
      <EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><STRING>'element.tagName.toUpperCase() == '</STRING> + <CALL><NAME>clause</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD>)</CALL></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><GT>(<GETPROP><SETNAME><BINDNAME>clause</BINDNAME> = <GETPROP><NAME>params</NAME>.<STRING>classNames</STRING></GETPROP></SETNAME>).<STRING>length</STRING></GETPROP> &gt; <NUMBER>0</NUMBER></GT></IFNE>)
      <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>clause</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
        <TARGET><EXPR_VOID><CALL><NAME></TARGET>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><STRING>'element.hasClassName('</STRING> + <CALL><GETELEM><NAME>clause</NAME>[<NAME>i</NAME></GETELEM>].<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>')'</STRING></ADD>)<GOTO><TARGET><TARGET></CALL></GOTO></EXPR_VOID></TARGET></TARGET></LOOP>;</BLOCK>
    <BLOCK>if (<IFNE><SETNAME><BINDNAME>clause</BINDNAME> = <GETPROP><NAME>params</NAME>.<STRING>attributes</STRING></GETPROP></SETNAME></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>clause</NAME>.<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>attribute</PARAMETER>) <BLOCK>{
        <VAR>var <NAME>value = <ADD><ADD><STRING>'element.readAttribute('</STRING> + <CALL><NAME>attribute</NAME>.<GETPROP><STRING>name</STRING></GETPROP>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>')'</STRING></ADD></NAME></VAR>;
        <VAR>var <NAME>splitValueBy = <FUNCTION>function(<PARAMETER>delimiter</PARAMETER>) <BLOCK>{
          <RETURN>return <ADD><ADD><ADD><ADD><ADD><NAME>value</NAME> + <STRING>' &amp;&amp; '</STRING></ADD> + <NAME>value</NAME></ADD> + <STRING>'.split('</STRING></ADD> + <CALL><NAME>delimiter</NAME>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>')'</STRING></ADD></RETURN>;</BLOCK>
        }</FUNCTION></NAME></VAR>

        <SWITCH>switch (<GETPROP><NAME>attribute</NAME>.<STRING>operator</STRING></GETPROP>) {
          <CASE>case <STRING>'='</STRING>:       <BLOCK><EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><NAME>value</NAME> + <STRING>' == '</STRING></ADD> + <CALL><NAME>attribute</NAME>.<GETPROP><STRING>value</STRING></GETPROP>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD>)</CALL></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
          <CASE>case <STRING>'~='</STRING>:      <BLOCK><EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><ADD><CALL><NAME>splitValueBy</NAME>(<STRING>' '</STRING>)</CALL> + <STRING>'.include('</STRING></ADD> + <CALL><NAME>attribute</NAME>.<GETPROP><STRING>value</STRING></GETPROP>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>')'</STRING></ADD>)</CALL></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
          <CASE>case <STRING>'|='</STRING>:      <BLOCK><EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(
                            <ADD><ADD><CALL><NAME>splitValueBy</NAME>(<STRING>'-'</STRING>)</CALL> + <STRING>'.first().toUpperCase() == '</STRING></ADD> + <CALL><NAME>attribute</NAME>.<GETPROP><STRING>value</STRING></GETPROP>.<CALL><GETPROP><STRING>toUpperCase</STRING></GETPROP></CALL>().<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD>
                          )</CALL></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
          <CASE>case <STRING>'!='</STRING>:      <BLOCK><EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><NAME>value</NAME> + <STRING>' != '</STRING></ADD> + <CALL><NAME>attribute</NAME>.<GETPROP><STRING>value</STRING></GETPROP>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD>)</CALL></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
          <CASE>case <STRING>''</STRING></CASE>:
          <CASE>case <NAME>undefined</NAME>: <BLOCK><EXPR_VOID><CALL><NAME>conditions</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<ADD><ADD><STRING>'element.hasAttribute('</STRING> + <CALL><NAME>attribute</NAME>.<GETPROP><STRING>name</STRING></GETPROP>.<GETPROP><STRING>inspect</STRING></GETPROP>()</CALL></ADD> + <STRING>')'</STRING></ADD>)</CALL></EXPR_VOID>; <BREAK>break</BREAK></BLOCK></CASE>;
          <DEFAULT>default:        <BLOCK><THROW>throw <ADD><ADD><STRING>'Unknown operator '</STRING> + <GETPROP><NAME>attribute</NAME>.<STRING>operator</STRING></GETPROP></ADD> + <STRING>' in selector'</STRING></ADD></THROW></BLOCK></DEFAULT>;
        }</SWITCH></BLOCK>
      }</FUNCTION>)</CALL></EXPR_VOID>;
    }</BLOCK></BLOCK>

    <RETURN>return <CALL><NAME>conditions</NAME>.<GETPROP><STRING>join</STRING></GETPROP>(<STRING>' &amp;&amp; '</STRING>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>compileMatcher</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>match</STRING> = new <NEW><NAME>Function</NAME>(<STRING>'element'</STRING>, <ADD><STRING>'if (!element.tagName) return false; \
      element = $(element); \
      return '</STRING> + <CALL><THIS>this</THIS>.<GETPROP><STRING>buildMatchExpression</STRING></GETPROP>()</CALL></ADD>)</NEW></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>scope</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>element</NAME></VAR>;

    <BLOCK>if (<IFNE><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<GETPROP><THIS>this</THIS>.<GETPROP><STRING>params</STRING></GETPROP>.<STRING>id</STRING></GETPROP>)</CALL></SETNAME></IFNE>)
      <BLOCK>if (<IFNE><CALL><THIS>this</THIS>.<GETPROP><STRING>match</STRING></GETPROP>(<NAME>element</NAME>)</CALL></IFNE>)
        <BLOCK>if (<IFNE><OR>!<NOT><NAME>scope</NAME></NOT> || <CALL><NAME>Element</NAME>.<GETPROP><STRING>childOf</STRING></GETPROP>(<NAME>element</NAME>, <NAME>scope</NAME>)</CALL></OR></IFNE>)
          <RETURN>return [<ARRAYLIT><NAME>element</NAME>]</ARRAYLIT></RETURN>;</BLOCK></BLOCK></BLOCK>

    <EXPR_VOID><SETNAME><BINDNAME>scope</BINDNAME> = (<CALL><OR><NAME>scope</NAME> || <NAME>document</NAME></OR>).<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<OR><GETPROP><THIS>this</THIS>.<GETPROP><STRING>params</STRING></GETPROP>.<STRING>tagName</STRING></GETPROP> || <STRING>'*'</STRING></OR>)</CALL></SETNAME></EXPR_VOID>;

    <VAR>var <NAME>results = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>;
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>scope</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++)
      <TARGET><BLOCK></TARGET>if (<IFNE><CALL><THIS>this</THIS>.<GETPROP><STRING>match</STRING></GETPROP>(<SETNAME><BINDNAME>element</BINDNAME> = <GETELEM><NAME>scope</NAME>[<NAME>i</NAME>]</GETELEM></SETNAME>)</CALL></IFNE>)
        <EXPR_VOID><CALL><NAME>results</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>element</NAME>)</CALL>)<GOTO><TARGET><TARGET></CALL></EXPR_VOID></GOTO></TARGET></TARGET>;</BLOCK></LOOP>

    <RETURN>return <NAME>results</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>toString</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <GETPROP><THIS>this</THIS>.<STRING>expression</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Selector</NAME>, <OBJECTLIT>{
  <OBJLITNAME>matchElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>expression</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>selector = new <NEW><NAME>Selector</NAME>(<NAME>expression</NAME>)</NEW></NAME></VAR>;
    <RETURN>return <CALL><NAME>elements</NAME>.<CALL><GETPROP><STRING>select</STRING></GETPROP>(<CALL><NAME>selector</NAME>.<GETPROP><STRING>match</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<NAME>selector</NAME>)</CALL></CALL>).<GETPROP><STRING>map</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>extend</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>expression</PARAMETER>, <PARAMETER>index</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><EQ>typeof <TYPEOFNAME>expression</TYPEOFNAME> == <STRING>'number'</STRING></EQ></IFNE>) <EXPR_VOID><COMMA><SETNAME><BINDNAME>index</BINDNAME> = <NAME>expression</NAME></SETNAME>, <SETNAME><BINDNAME>expression</BINDNAME> = <FALSE>false</FALSE></SETNAME></COMMA></EXPR_VOID>;</BLOCK>
    <RETURN>return <GETELEM><NAME>Selector</NAME>.<CALL><GETPROP><STRING>matchElements</STRING></GETPROP>(<NAME>elements</NAME>, <OR><NAME>expression</NAME> || <STRING>'*'</STRING></OR></CALL>)[<OR><NAME>index</NAME> || <NUMBER>0</NUMBER></OR>]</GETELEM></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findChildElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>expressions</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>expressions</NAME>.<CALL><GETPROP><STRING>map</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>expression</PARAMETER>) <BLOCK>{
      <RETURN>return <CALL><NAME>expression</NAME>.<CALL><GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/[^\s"]+(?:"[^"]*"[^\s"]+)*/g</REGEXP></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>([<ARRAYLIT><NULL>null</NULL>]</ARRAYLIT>, <FUNCTION>function(<PARAMETER>results</PARAMETER>, <PARAMETER>expr</PARAMETER>) <BLOCK>{
        <VAR>var <NAME>selector = new <NEW><NAME>Selector</NAME>(<NAME>expr</NAME>)</NEW></NAME></VAR>;
        <RETURN>return <CALL><NAME>results</NAME>.<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>, <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>result</PARAMETER>) <BLOCK>{
          <RETURN>return <CALL><NAME>elements</NAME>.<GETPROP><STRING>concat</STRING></GETPROP>(<CALL><NAME>selector</NAME>.<GETPROP><STRING>findElements</STRING></GETPROP>(<OR><NAME>result</NAME> || <NAME>element</NAME></OR>)</CALL>)</CALL></RETURN>;</BLOCK>
        }</FUNCTION>)</CALL></RETURN>;</BLOCK>
      }</FUNCTION>)</CALL></RETURN>;</BLOCK>
    }</FUNCTION></CALL>).<GETPROP><STRING>flatten</STRING></GETPROP>()</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

<FUNCTION>function <FUNCNAME>$$</FUNCNAME>() <BLOCK>{
  <RETURN>return <CALL><NAME>Selector</NAME>.<GETPROP><STRING>findChildElements</STRING></GETPROP>(<NAME>document</NAME>, <CALL><NAME>$A</NAME>(<NAME>arguments</NAME>)</CALL>)</CALL></RETURN>;</BLOCK>
}</FUNCTION>
<VAR>var <NAME>Form = <OBJECTLIT>{
  <OBJLITNAME>reset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$</NAME>(<NAME>form</NAME></CALL>).<GETPROP><STRING>reset</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>serializeElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>getHash</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>data = <CALL><NAME>elements</NAME>.<GETPROP><STRING>inject</STRING></GETPROP>(<OBJECTLIT>{}</OBJECTLIT>, <FUNCTION>function(<PARAMETER>result</PARAMETER>, <PARAMETER>element</PARAMETER>) <BLOCK>{
      <BLOCK>if (<IFNE><AND>!<NOT><GETPROP><NAME>element</NAME>.<STRING>disabled</STRING></GETPROP></NOT> &amp;&amp; <GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP></AND></IFNE>) <BLOCK>{
        <VAR>var <NAME>key = <GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP></NAME>, <NAME>value = <CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><NE><NAME>value</NAME> != <NAME>undefined</NAME></NE></IFNE>) <BLOCK>{
          <BLOCK>if (<IFNE><GETELEM><NAME>result</NAME>[<NAME>key</NAME>]</GETELEM></IFNE>) <BLOCK>{
            <BLOCK>if (<IFNE><NE><GETPROP><GETELEM><NAME>result</NAME>[<NAME>key</NAME></GETELEM>].<STRING>constructor</STRING></GETPROP> != <NAME>Array</NAME></NE></IFNE>) <EXPR_VOID><SETELEM><NAME>result</NAME>[<NAME>key</NAME>] = [<ARRAYLIT><GETELEM><NAME>result</NAME>[<NAME>key</NAME>]</GETELEM>]</ARRAYLIT></SETELEM></EXPR_VOID>;</BLOCK>
            <EXPR_VOID><CALL><GETELEM><NAME>result</NAME>[<NAME>key</NAME></GETELEM>].<GETPROP><STRING>push</STRING></GETPROP>(<NAME>value</NAME>)</CALL></EXPR_VOID>;
          }</BLOCK>
          else <EXPR_VOID><SETELEM><NAME>result</NAME>[<NAME>key</NAME>] = <NAME>value<GOTO></NAME></SETELEM></GOTO></EXPR_VOID>;</BLOCK>
        }</BLOCK></BLOCK>
      }</BLOCK></BLOCK>
      <RETURN>return <NAME>result</NAME></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></NAME></VAR>;

    <RETURN>return <HOOK><NAME>getHash</NAME> ? <NAME>data</NAME> : <CALL><NAME>Hash</NAME>.<GETPROP><STRING>toQueryString</STRING></GETPROP>(<NAME>data</NAME>)</CALL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>;

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>Methods</STRING> = <OBJECTLIT>{
  <OBJLITNAME>serialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>, <PARAMETER>getHash</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>serializeElements</STRING></GETPROP>(<CALL><NAME>Form</NAME>.<GETPROP><STRING>getElements</STRING></GETPROP>(<NAME>form</NAME>)</CALL>, <NAME>getHash</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getElements</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$A</NAME>(<CALL><CALL><NAME>$</NAME>(<NAME>form</NAME></CALL>).<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'*'</STRING>)</CALL></CALL>).<GETPROP><STRING>inject</STRING></GETPROP>(<ARRAYLIT>[]</ARRAYLIT>,
      <FUNCTION>function(<PARAMETER>elements</PARAMETER>, <PARAMETER>child</PARAMETER>) <BLOCK>{
        <BLOCK>if (<IFNE><GETELEM><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>Serializers</STRING></GETPROP>[<CALL><NAME>child</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>]</GETELEM></IFNE>)
          <EXPR_VOID><CALL><NAME>elements</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>child</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
        <RETURN>return <NAME>elements</NAME></RETURN>;</BLOCK>
      }</FUNCTION>
    )</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getInputs</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>, <PARAMETER>typeName</PARAMETER>, <PARAMETER>name</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>inputs = <CALL><NAME>form</NAME>.<GETPROP><STRING>getElementsByTagName</STRING></GETPROP>(<STRING>'input'</STRING>)</CALL></NAME></VAR>;

    <BLOCK>if (<IFNE><AND>!<NOT><NAME>typeName</NAME></NOT> &amp;&amp; !<NOT><NAME>name</NAME></NOT></AND></IFNE>) <RETURN>return <CALL><CALL><NAME>$A</NAME>(<NAME>inputs</NAME></CALL>).<GETPROP><STRING>map</STRING></GETPROP>(<GETPROP><NAME>Element</NAME>.<STRING>extend</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>matchingInputs = <ARRAYLIT>[]</ARRAYLIT></NAME>, <NAME>length = <GETPROP><NAME>inputs</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>input = <GETELEM><NAME>inputs</NAME>[<NAME>i</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><OR>(<AND><NAME>typeName</NAME> &amp;&amp; <NE><GETPROP><NAME>input</NAME>.<STRING>type</STRING></GETPROP> != <NAME>typeName</NAME></NE>)</AND> || (<AND><NAME>name</NAME> &amp;&amp; <NE><GETPROP><NAME>input</NAME>.<STRING>name</STRING></GETPROP> != <NAME>name</NAME></NE>)</AND></OR></IFNE>)
        <CONTINUE>continue</CONTINUE>;</BLOCK>
      <EXPR_VOID><CALL><NAME>matchingInputs</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><NAME>Element</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>input</NAME>)</CALL>)</CALL></EXPR_VOID>;
    <GOTO><TARGET><TARGET></GOTO></TARGET></TARGET>}</BLOCK></LOOP>

    <RETURN>return <NAME>matchingInputs</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>disable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>form</NAME>.<CALL><GETPROP><STRING>getElements</STRING></GETPROP></CALL>().<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>blur</STRING></GETPROP>()</CALL></EXPR_VOID>;
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>disabled</STRING> = <STRING>'true'</STRING></SETPROP></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>enable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>form</NAME>.<CALL><GETPROP><STRING>getElements</STRING></GETPROP></CALL>().<GETPROP><STRING>each</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>disabled</STRING> = <STRING>''</STRING></SETPROP></EXPR_VOID>;</BLOCK>
    }</FUNCTION>)</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>findFirstElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><CALL><NAME>$</NAME>(<NAME>form</NAME></CALL>).<CALL><GETPROP><STRING>getElements</STRING></GETPROP></CALL>().<GETPROP><STRING>find</STRING></GETPROP>(<FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
      <RETURN>return <AND><NE><GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP> != <STRING>'hidden'</STRING></NE> &amp;&amp; !<AND><NOT><GETPROP><NAME>element</NAME>.<STRING>disabled</STRING></GETPROP></NOT> &amp;&amp;
        [<CALL><ARRAYLIT><STRING>'input'</STRING>, <STRING>'select'</STRING>, <STRING>'textarea'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>)</CALL></AND></AND></RETURN>;</BLOCK>
    }</FUNCTION>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>focusFirstElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>form</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>form</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>form</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>form</NAME>.<CALL><GETPROP><STRING>findFirstElement</STRING></GETPROP></CALL>().<GETPROP><STRING>activate</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>form</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Form</NAME>, <GETPROP><NAME>Form</NAME>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>Element</STRING> = <OBJECTLIT>{
  <OBJLITNAME>focus</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>focus</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>select</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><CALL><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<GETPROP><STRING>select</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING> = <OBJECTLIT>{
  <OBJLITNAME>serialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><AND>!<NOT><GETPROP><NAME>element</NAME>.<STRING>disabled</STRING></GETPROP></NOT> &amp;&amp; <GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP></AND></IFNE>) <BLOCK>{
      <VAR>var <NAME>value = <CALL><NAME>element</NAME>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></NAME></VAR>;
      <BLOCK>if (<IFNE><NE><NAME>value</NAME> != <NAME>undefined</NAME></NE></IFNE>) <BLOCK>{
        <VAR>var <NAME>pair = <OBJECTLIT>{}</OBJECTLIT></NAME></VAR>;
        <EXPR_VOID><SETELEM><NAME>pair</NAME>[<GETPROP><NAME>element</NAME>.<STRING>name</STRING></GETPROP>] = <NAME>value</NAME></SETELEM></EXPR_VOID>;
        <RETURN>return <CALL><NAME>Hash</NAME>.<GETPROP><STRING>toQueryString</STRING></GETPROP>(<NAME>pair</NAME>)</CALL></RETURN>;
      }</BLOCK></BLOCK>
    }</BLOCK></BLOCK>
    <RETURN>return <STRING>''</STRING></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>method = <CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL></NAME></VAR>;
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETELEM><GETPROP><STRING>Serializers</STRING></GETPROP>[<NAME>method</NAME></GETELEM>](<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clear</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>value</STRING> = <STRING>''</STRING></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>present</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <NE><GETPROP><CALL><NAME>$</NAME>(<NAME>element</NAME></CALL>).<STRING>value</STRING></GETPROP> != <STRING>''</STRING></NE></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>activate</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>focus</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <BLOCK>if (<IFNE><AND><GETPROP><NAME>element</NAME>.<STRING>select</STRING></GETPROP> &amp;&amp; ( <OR><NE><CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL> != <STRING>'input'</STRING></NE> ||
      ![<NOT><CALL><ARRAYLIT><STRING>'button'</STRING>, <STRING>'reset'</STRING>, <STRING>'submit'</STRING></ARRAYLIT>].<GETPROP><STRING>include</STRING></GETPROP>(<GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP>)</CALL></NOT> )</OR></AND></IFNE> )
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>select</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>disable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>disabled</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>enable</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>blur</STRING></GETPROP>()</CALL></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>disabled</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<GETPROP><NAME>Form</NAME>.<STRING>Element</STRING></GETPROP>, <GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Methods</STRING></GETPROP>)</CALL></EXPR_RESULT>;
<VAR>var <NAME>Field = <GETPROP><NAME>Form</NAME>.<STRING>Element</STRING></GETPROP></NAME></VAR>;
<VAR>var <NAME>$F = <GETPROP><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<STRING>getValue</STRING></GETPROP></NAME></VAR>;

/*--------------------------------------------------------------------------*/

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Serializers</STRING> = <OBJECTLIT>{
  <OBJLITNAME>input</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <SWITCH>switch (<CALL><NAME>element</NAME>.<GETPROP><STRING>type</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>) {
      <CASE>case <STRING>'checkbox'</STRING></CASE>:
      <CASE>case <STRING>'radio'</STRING>:
        <BLOCK><RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>Serializers</STRING></GETPROP>.<GETPROP><STRING>inputSelector</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN></BLOCK></CASE>;
      <DEFAULT>default:
        <BLOCK><RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>Serializers</STRING></GETPROP>.<GETPROP><STRING>textarea</STRING></GETPROP>(<NAME>element</NAME>)</CALL></RETURN></BLOCK></DEFAULT>;
    }</SWITCH></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>inputSelector</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <HOOK><GETPROP><NAME>element</NAME>.<STRING>checked</STRING></GETPROP> ? <GETPROP><NAME>element</NAME>.<STRING>value</STRING></GETPROP> : <NULL>null</NULL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>textarea</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <GETPROP><NAME>element</NAME>.<STRING>value</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>select</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <RETURN>return <CALL><GETELEM><THIS>this</THIS>[<HOOK><EQ><GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP> == <STRING>'select-one'</STRING></EQ> ?
      <STRING>'selectOne'</STRING> : <STRING>'selectMany'</STRING></HOOK></GETELEM>](<NAME>element</NAME>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>selectOne</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>index = <GETPROP><NAME>element</NAME>.<STRING>selectedIndex</STRING></GETPROP></NAME></VAR>;
    <RETURN>return <HOOK><GE><NAME>index</NAME> &gt;= <NUMBER>0</NUMBER></GE> ? <CALL><THIS>this</THIS>.<GETPROP><STRING>optionValue</STRING></GETPROP>(<GETELEM><NAME>element</NAME>.<GETPROP><STRING>options</STRING></GETPROP>[<NAME>index</NAME>]</GETELEM>)</CALL> : <NULL>null</NULL></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>selectMany</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>values</NAME>, <NAME>length = <GETPROP><NAME>element</NAME>.<STRING>length</STRING></GETPROP></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>length</NAME></NOT></IFNE>) <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK>

    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>values = <ARRAYLIT>[]</ARRAYLIT></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <VAR>var <NAME>opt = <GETELEM><NAME>element</NAME>.<GETPROP><STRING>options</STRING></GETPROP>[<NAME>i</NAME>]</GETELEM></NAME></VAR>;
      <BLOCK>if (<IFNE><GETPROP><NAME>opt</NAME>.<STRING>selected</STRING></GETPROP></IFNE>) <EXPR_VOID><CALL><NAME>values</NAME>.<GETPROP><STRING>push</STRING></GETPROP>(<CALL><THIS>this</THIS>.<GETPROP><STRING>optionValue</STRING></GETPROP>(<NAME>opt</NAME>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
    <GOTO><TARGET><TARGET></GOTO></TARGET></TARGET>}</BLOCK></LOOP>
    <RETURN>return <NAME>values</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>optionValue</OBJLITNAME>: <FUNCTION>function(<PARAMETER>opt</PARAMETER>) <BLOCK>{
    // extend element because hasAttribute may not be native
    <RETURN>return <HOOK><CALL><NAME>Element</NAME>.<CALL><GETPROP><STRING>extend</STRING></GETPROP>(<NAME>opt</NAME></CALL>).<GETPROP><STRING>hasAttribute</STRING></GETPROP>(<STRING>'value'</STRING>)</CALL> ? <GETPROP><NAME>opt</NAME>.<STRING>value</STRING></GETPROP> : <GETPROP><NAME>opt</NAME>.<STRING>text</STRING></GETPROP></HOOK></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Abstract</NAME>.<STRING>TimedObserver</STRING> = <FUNCTION>function() <BLOCK>{</BLOCK>}</FUNCTION></SETPROP></EXPR_RESULT>
<NAME>Abstract</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>TimedObserver</STRING></GETPROP>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>frequency</PARAMETER>, <PARAMETER>callback</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>frequency</STRING> = <NAME>frequency</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>element</STRING>   = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>callback</STRING>  = <NAME>callback</NAME></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>registerCallback</STRING></GETPROP>()</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>registerCallback</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><NAME>setInterval</NAME>(<CALL><THIS>this</THIS>.<GETPROP><STRING>onTimerEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>, <MUL><GETPROP><THIS>this</THIS>.<STRING>frequency</STRING></GETPROP> * <NUMBER>1000</NUMBER></MUL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onTimerEvent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>value = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></NAME></VAR>;
    <VAR>var <NAME>changed = (<HOOK><AND><EQ><STRING>'string'</STRING> == typeof <TYPEOF><GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP></TYPEOF></EQ> &amp;&amp; <EQ><STRING>'string'</STRING> == typeof <TYPEOFNAME>value</TYPEOFNAME></EQ></AND>
      ? <NE><GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP> != <NAME>value</NAME></NE> : <NE><CALL><NAME>String</NAME>(<GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP>)</CALL> != <CALL><NAME>String</NAME>(<NAME>value</NAME>)</CALL></NE>)</HOOK></NAME></VAR>;
    <BLOCK>if (<IFNE><NAME>changed</NAME></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>callback</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>, <NAME>value</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <NAME>value</NAME></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>Observer</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Observer</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>TimedObserver</STRING></GETPROP>()</NEW>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>getValue</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>Observer</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Observer</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>TimedObserver</STRING></GETPROP>()</NEW>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>serialize</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

/*--------------------------------------------------------------------------*/

<EXPR_RESULT><SETPROP><NAME>Abstract</NAME>.<STRING>EventObserver</STRING> = <FUNCTION>function() <BLOCK>{</BLOCK>}</FUNCTION></SETPROP></EXPR_RESULT>
<NAME>Abstract</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>EventObserver</STRING></GETPROP>.<STRING>prototype</STRING> = <OBJECTLIT>{
  <OBJLITNAME>initialize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>callback</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>element</STRING>  = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>callback</STRING> = <NAME>callback</NAME></SETPROP></EXPR_VOID>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></SETPROP></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><CALL><THIS>this</THIS>.<GETPROP><STRING>element</STRING></GETPROP>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL> == <STRING>'form'</STRING></EQ></IFNE>)
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>registerFormCallbacks</STRING></GETPROP>()</CALL></EXPR_VOID>;
    else
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>registerCallback</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)<GOTO></CALL></GOTO></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>onElementEvent</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <VAR>var <NAME>value = <CALL><THIS>this</THIS>.<GETPROP><STRING>getValue</STRING></GETPROP>()</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NE><GETPROP><THIS>this</THIS>.<STRING>lastValue</STRING></GETPROP> != <NAME>value</NAME></NE></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>callback</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>, <NAME>value</NAME>)</CALL></EXPR_VOID>;
      <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>lastValue</STRING> = <NAME>value</NAME></SETPROP></EXPR_VOID>;
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>registerFormCallbacks</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><CALL><NAME>Form</NAME>.<CALL><GETPROP><STRING>getElements</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP></CALL>).<GETPROP><STRING>each</STRING></GETPROP>(<CALL><THIS>this</THIS>.<GETPROP><STRING>registerCallback</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>registerCallback</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>type</STRING></GETPROP></IFNE>) <BLOCK>{
      <SWITCH>switch (<CALL><NAME>element</NAME>.<GETPROP><STRING>type</STRING></GETPROP>.<GETPROP><STRING>toLowerCase</STRING></GETPROP>()</CALL>) {
        <CASE>case <STRING>'checkbox'</STRING></CASE>:
        <CASE>case <STRING>'radio'</STRING>:
          <BLOCK><EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>observe</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'click'</STRING>, <CALL><THIS>this</THIS>.<GETPROP><STRING>onElementEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;
          <BREAK>break</BREAK></BLOCK></CASE>;
        <DEFAULT>default:
          <BLOCK><EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>observe</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'change'</STRING>, <CALL><THIS>this</THIS>.<GETPROP><STRING>onElementEvent</STRING></GETPROP>.<GETPROP><STRING>bind</STRING></GETPROP>(<THIS>this</THIS>)</CALL>)</CALL></EXPR_VOID>;
          <BREAK>break</BREAK></BLOCK></DEFAULT>;
      }</SWITCH>
    }</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT></SETPROP></EXPR_RESULT>

<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>Element</STRING></GETPROP>.<STRING>EventObserver</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<EXPR_RESULT><SETPROP><GETPROP><STRING>EventObserver</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>EventObserver</STRING></GETPROP>()</NEW>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>Element</STRING></GETPROP>.<GETPROP><STRING>getValue</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;

<EXPR_RESULT><SETPROP><NAME>Form</NAME>.<STRING>EventObserver</STRING> = <CALL><NAME>Class</NAME>.<GETPROP><STRING>create</STRING></GETPROP>()</CALL></SETPROP></EXPR_RESULT>;
<NAME>Form</NAME>.<EXPR_RESULT><SETPROP><GETPROP><STRING>EventObserver</STRING></GETPROP>.<STRING>prototype</STRING> = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(new <NEW><GETPROP><NAME>Abstract</NAME>.<STRING>EventObserver</STRING></GETPROP>()</NEW>, <OBJECTLIT>{
  <OBJLITNAME>getValue</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <RETURN>return <CALL><NAME>Form</NAME>.<GETPROP><STRING>serialize</STRING></GETPROP>(<GETPROP><THIS>this</THIS>.<STRING>element</STRING></GETPROP>)</CALL></RETURN>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></SETPROP></EXPR_RESULT>;
<BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>window</NAME>.<STRING>Event</STRING></GETPROP></NOT></IFNE>) <BLOCK>{
  <VAR>var <NAME>Event = new <NEW><NAME>Object</NAME>()</NEW></NAME></VAR>;
}</BLOCK></BLOCK>

<EXPR_RESULT><CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<NAME>Event</NAME>, <OBJECTLIT>{
  <OBJLITNAME>KEY_BACKSPACE</OBJLITNAME>: <NUMBER>8</NUMBER>,
  <OBJLITNAME>KEY_TAB</OBJLITNAME>:       <NUMBER>9</NUMBER>,
  <OBJLITNAME>KEY_RETURN</OBJLITNAME>:   <NUMBER>13</NUMBER>,
  <OBJLITNAME>KEY_ESC</OBJLITNAME>:      <NUMBER>27</NUMBER>,
  <OBJLITNAME>KEY_LEFT</OBJLITNAME>:     <NUMBER>37</NUMBER>,
  <OBJLITNAME>KEY_UP</OBJLITNAME>:       <NUMBER>38</NUMBER>,
  <OBJLITNAME>KEY_RIGHT</OBJLITNAME>:    <NUMBER>39</NUMBER>,
  <OBJLITNAME>KEY_DOWN</OBJLITNAME>:     <NUMBER>40</NUMBER>,
  <OBJLITNAME>KEY_DELETE</OBJLITNAME>:   <NUMBER>46</NUMBER>,
  <OBJLITNAME>KEY_HOME</OBJLITNAME>:     <NUMBER>36</NUMBER>,
  <OBJLITNAME>KEY_END</OBJLITNAME>:      <NUMBER>35</NUMBER>,
  <OBJLITNAME>KEY_PAGEUP</OBJLITNAME>:   <NUMBER>33</NUMBER>,
  <OBJLITNAME>KEY_PAGEDOWN</OBJLITNAME>: <NUMBER>34</NUMBER>,

  <OBJLITNAME>element</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
    <RETURN>return <OR><GETPROP><NAME>event</NAME>.<STRING>target</STRING></GETPROP> || <GETPROP><NAME>event</NAME>.<STRING>srcElement</STRING></GETPROP></OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>isLeftClick</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
    <RETURN>return (((<OR><AND><GETPROP><NAME>event</NAME>.<STRING>which</STRING>)</GETPROP> &amp;&amp; (<EQ><GETPROP><NAME>event</NAME>.<STRING>which</STRING></GETPROP> == <NUMBER>1</NUMBER>)</EQ>)</AND> ||
            ((<AND><GETPROP><NAME>event</NAME>.<STRING>button</STRING>)</GETPROP> &amp;&amp; (<EQ><GETPROP><NAME>event</NAME>.<STRING>button</STRING></GETPROP> == <NUMBER>1</NUMBER>)</EQ>)</AND>)</OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>pointerX</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
    <RETURN>return <OR><GETPROP><NAME>event</NAME>.<STRING>pageX</STRING></GETPROP> || (<ADD><GETPROP><NAME>event</NAME>.<STRING>clientX</STRING></GETPROP> +
      (<OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP> || <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP>)</OR>)</ADD></OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>pointerY</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
    <RETURN>return <OR><GETPROP><NAME>event</NAME>.<STRING>pageY</STRING></GETPROP> || (<ADD><GETPROP><NAME>event</NAME>.<STRING>clientY</STRING></GETPROP> +
      (<OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP> || <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP>)</OR>)</ADD></OR></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stop</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><NAME>event</NAME>.<STRING>preventDefault</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>event</NAME>.<GETPROP><STRING>preventDefault</STRING></GETPROP>()</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>event</NAME>.<GETPROP><STRING>stopPropagation</STRING></GETPROP>()</CALL></EXPR_VOID>;
    }</BLOCK> else <BLOCK>{
      <EXPR_VOID><SETPROP><NAME>event</NAME>.<STRING>returnValue</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;
      <EXPR_VOID><SETPROP><NAME>event</NAME>.<STRING>cancelBubble</STRING> = <TRUE>true</TRUE></SETPROP></EXPR_VOID>;
    <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  // find the first node with the given tagName, starting from the
  // node the event was triggered on; traverses the DOM upwards
  <OBJLITNAME>findElement</OBJLITNAME>: <FUNCTION>function(<PARAMETER>event</PARAMETER>, <PARAMETER>tagName</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>element = <CALL><NAME>Event</NAME>.<GETPROP><STRING>element</STRING></GETPROP>(<NAME>event</NAME>)</CALL></NAME></VAR>;
    <LOOP>while (<TARGET><IFEQ><AND><GETPROP><NAME></TARGET>element</NAME>.<STRING>parentNode</STRING></GETPROP> &amp;&amp; (!<OR><NOT><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP></NOT> ||
        (<NE><CALL><NAME>element</NAME>.<GETPROP><STRING>tagName</STRING></GETPROP>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL> != <CALL><NAME>tagName</NAME>.<GETPROP><STRING>toUpperCase</STRING></GETPROP>()</CALL>)</NE>)</OR></AND></IFEQ>)
      <TARGET><EXPR_VOID><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode<GOTO><TARGET></STRING></GETPROP></SETNAME></GOTO></EXPR_VOID></TARGET></LOOP>;
    <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>observers</OBJLITNAME>: <FALSE>false</FALSE>,

  <OBJLITNAME>_observeAndCache</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>name</PARAMETER>, <PARAMETER>observer</PARAMETER>, <PARAMETER>useCapture</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><THIS>this</THIS>.<STRING>observers</STRING></GETPROP></NOT></IFNE>) <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>observers</STRING> = <ARRAYLIT>[]</ARRAYLIT></SETPROP></EXPR_VOID>;</BLOCK>
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>addEventListener</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>observers</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>([<ARRAYLIT><NAME>element</NAME>, <NAME>name</NAME>, <NAME>observer</NAME>, <NAME>useCapture</NAME>]</ARRAYLIT>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>addEventListener</STRING></GETPROP>(<NAME>name</NAME>, <NAME>observer</NAME>, <NAME>useCapture</NAME>)</CALL></EXPR_VOID>;
    }</BLOCK> else <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>attachEvent</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><THIS>this</THIS>.<GETPROP><STRING>observers</STRING></GETPROP>.<GETPROP><STRING>push</STRING></GETPROP>([<ARRAYLIT><NAME>element</NAME>, <NAME>name</NAME>, <NAME>observer</NAME>, <NAME>useCapture</NAME>]</ARRAYLIT>)</CALL></EXPR_VOID>;
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>attachEvent</STRING></GETPROP>(<ADD><STRING>'on'</STRING> + <NAME>name</NAME></ADD>, <NAME>observer</NAME>)</CALL></EXPR_VOID>;
    <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>unloadCache</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<GETPROP><NAME>Event</NAME>.<STRING>observers</STRING></GETPROP></NOT></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <LOOP>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>length = <GETPROP><NAME>Event</NAME>.<GETPROP><STRING>observers</STRING></GETPROP>.<STRING>length</STRING></GETPROP></NAME></VAR>; <TARGET><IFEQ><LT><NAME></TARGET>i</NAME> &lt; <NAME>length</NAME></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>stopObserving</STRING></GETPROP>.<GETPROP><STRING>apply</STRING></GETPROP>(<THIS>this</THIS>, <GETELEM><NAME>Event</NAME>.<GETPROP><STRING>observers</STRING></GETPROP>[<NAME>i</NAME>]</GETELEM>)</CALL></EXPR_VOID>;
      <NAME>Event</NAME>.<EXPR_VOID><SETELEM><GETELEM><GETPROP><STRING>observers</STRING></GETPROP>[<NAME>i</NAME></GETELEM>][<NUMBER>0</NUMBER>] = <NULL>null</NULL></SETELEM></EXPR_VOID>;
    <GOTO><TARGET><TARGET></GOTO></TARGET></TARGET>}</BLOCK></LOOP>
    <EXPR_VOID><SETPROP><NAME>Event</NAME>.<STRING>observers</STRING> = <FALSE>false</FALSE></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>observe</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>name</PARAMETER>, <PARAMETER>observer</PARAMETER>, <PARAMETER>useCapture</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>useCapture</BINDNAME> = <OR><NAME>useCapture</NAME> || <FALSE>false</FALSE></OR></SETNAME></EXPR_VOID>;

    <BLOCK>if (<IFNE><AND><EQ><NAME>name</NAME> == <STRING>'keypress'</STRING></EQ> &amp;&amp;
        (<OR><CALL><NAME>navigator</NAME>.<GETPROP><STRING>appVersion</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/Konqueror|Safari|KHTML/</REGEXP>)</CALL>
        || <GETPROP><NAME>element</NAME>.<STRING>attachEvent</STRING></GETPROP>)</OR></AND></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME> = <STRING>'keydown'</STRING></SETNAME></EXPR_VOID>;</BLOCK>

    <EXPR_VOID><CALL><NAME>Event</NAME>.<GETPROP><STRING>_observeAndCache</STRING></GETPROP>(<NAME>element</NAME>, <NAME>name</NAME>, <NAME>observer</NAME>, <NAME>useCapture</NAME>)</CALL></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>stopObserving</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>name</PARAMETER>, <PARAMETER>observer</PARAMETER>, <PARAMETER>useCapture</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME>useCapture</BINDNAME> = <OR><NAME>useCapture</NAME> || <FALSE>false</FALSE></OR></SETNAME></EXPR_VOID>;

    <BLOCK>if (<IFNE><AND><EQ><NAME>name</NAME> == <STRING>'keypress'</STRING></EQ> &amp;&amp;
        (<OR><CALL><NAME>navigator</NAME>.<GETPROP><STRING>appVersion</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/Konqueror|Safari|KHTML/</REGEXP>)</CALL>
        || <GETPROP><NAME>element</NAME>.<STRING>detachEvent</STRING></GETPROP>)</OR></AND></IFNE>)
      <EXPR_VOID><SETNAME><BINDNAME>name</BINDNAME> = <STRING>'keydown'</STRING></SETNAME></EXPR_VOID>;</BLOCK>

    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>removeEventListener</STRING></GETPROP></IFNE>) <BLOCK>{
      <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>removeEventListener</STRING></GETPROP>(<NAME>name</NAME>, <NAME>observer</NAME>, <NAME>useCapture</NAME>)</CALL></EXPR_VOID>;
    }</BLOCK> else <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>detachEvent</STRING></GETPROP></IFNE>) <BLOCK>{
      <TRY>try <BLOCK>{
        <EXPR_VOID><CALL><NAME>element</NAME>.<GETPROP><STRING>detachEvent</STRING></GETPROP>(<ADD><STRING>'on'</STRING> + <NAME>name</NAME></ADD>, <NAME>observer</NAME>)</CALL></EXPR_VOID>;
      }</BLOCK> <CATCH>catch (<NAME>e</NAME>) <BLOCK>{</BLOCK></CATCH>}</TRY>
    <GOTO></GOTO>}</BLOCK></BLOCK></BLOCK></BLOCK>
  }</FUNCTION>
}</OBJECTLIT>)</CALL></EXPR_RESULT>;

/* prevent memory leaks in IE */
<BLOCK>if (<IFNE><CALL><NAME>navigator</NAME>.<GETPROP><STRING>appVersion</STRING></GETPROP>.<GETPROP><STRING>match</STRING></GETPROP>(<REGEXP>/\bMSIE\b/</REGEXP>)</CALL></IFNE>)
  <EXPR_RESULT><CALL><NAME>Event</NAME>.<GETPROP><STRING>observe</STRING></GETPROP>(<NAME>window</NAME>, <STRING>'unload'</STRING>, <GETPROP><NAME>Event</NAME>.<STRING>unloadCache</STRING></GETPROP>, <FALSE>false</FALSE>)</CALL></EXPR_RESULT>;</BLOCK>
<VAR>var <NAME>Position = <OBJECTLIT>{
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  <OBJLITNAME>includeScrollOffsets</OBJLITNAME>: <FALSE>false</FALSE>,

  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  <OBJLITNAME>prepare</OBJLITNAME>: <FUNCTION>function() <BLOCK>{
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>deltaX</STRING> =  <OR><GETPROP><NAME>window</NAME>.<STRING>pageXOffset</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollLeft</STRING></GETPROP>
                || <NUMBER>0</NUMBER></OR></OR></OR></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>deltaY</STRING> =  <OR><GETPROP><NAME>window</NAME>.<STRING>pageYOffset</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>documentElement</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP>
                || <OR><GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>scrollTop</STRING></GETPROP>
                || <NUMBER>0</NUMBER></OR></OR></OR></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>realOffset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>scrollTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>scrollLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP></SETNAME></EXPR_VOID>;
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></NAME></IFEQ></TARGET></LOOP>);
    <RETURN>return [<ARRAYLIT><NAME>valueL</NAME>, <NAME>valueT</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>cumulativeOffset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></SETNAME></EXPR_VOID>;
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></NAME></IFEQ></TARGET></LOOP>);
    <RETURN>return [<ARRAYLIT><NAME>valueL</NAME>, <NAME>valueT</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>positionedOffset</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><NAME>element</NAME></IFNE>) <BLOCK>{
        <BLOCK>if(<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP>==<STRING>'BODY'</STRING></EQ></IFNE>) <BREAK>break</BREAK>;</BLOCK>
        <VAR>var <NAME>p = <CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL></NAME></VAR>;
        <BLOCK>if (<IFNE><OR><EQ><NAME>p</NAME> == <STRING>'relative'</STRING></EQ> || <EQ><NAME>p</NAME> == <STRING>'absolute'</STRING></EQ></OR></IFNE>) <BREAK>break</BREAK>;</BLOCK>
      }</BLOCK></BLOCK>
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></NAME></IFEQ></TARGET></LOOP>);
    <RETURN>return [<ARRAYLIT><NAME>valueL</NAME>, <NAME>valueT</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>offsetParent</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></IFNE>) <RETURN>return <GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><EQ><NAME>element</NAME> == <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ></IFNE>) <RETURN>return <NAME>element</NAME></RETURN>;</BLOCK>

    <LOOP>while (<TARGET><IFEQ><AND></TARGET>(<SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode</STRING></GETPROP>)</SETNAME> &amp;&amp; <NE><NAME>element</NAME> != <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></NE></AND></IFEQ>)
      <TARGET><BLOCK></TARGET>if (<IFNE><NE><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> != <STRING>'static'</STRING></NE></IFNE>)
        <RETURN>return <NAME>element<GOTO><TARGET></NAME></RETURN></GOTO></TARGET>;</BLOCK></LOOP>

    <RETURN>return <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></RETURN>;</BLOCK>
  }</FUNCTION>,

  // caches x/y coordinate pair to use with overlap
  <OBJLITNAME>within</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>x</PARAMETER>, <PARAMETER>y</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><GETPROP><THIS>this</THIS>.<STRING>includeScrollOffsets</STRING></GETPROP></IFNE>)
      <RETURN>return <CALL><THIS>this</THIS>.<GETPROP><STRING>withinIncludingScrolloffsets</STRING></GETPROP>(<NAME>element</NAME>, <NAME>x</NAME>, <NAME>y</NAME>)</CALL></RETURN>;</BLOCK>
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>xcomp</STRING> = <NAME>x</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>ycomp</STRING> = <NAME>y</NAME></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>offset</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>cumulativeOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;

    <RETURN>return (<AND><GE><NAME>y</NAME> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM></GE> &amp;&amp;
            <AND><LT><NAME>y</NAME> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP></ADD></LT> &amp;&amp;
            <AND><GE><NAME>x</NAME> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM></GE> &amp;&amp;
            <LT><NAME>x</NAME> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP></ADD></LT></AND></AND>)</AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>withinIncludingScrolloffsets</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>, <PARAMETER>x</PARAMETER>, <PARAMETER>y</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>offsetcache = <CALL><THIS>this</THIS>.<GETPROP><STRING>realOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></NAME></VAR>;

    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>xcomp</STRING> = <SUB><ADD><NAME>x</NAME> + <GETELEM><NAME>offsetcache</NAME>[<NUMBER>0</NUMBER>]</GETELEM></ADD> - <GETPROP><THIS>this</THIS>.<STRING>deltaX</STRING></GETPROP></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>ycomp</STRING> = <SUB><ADD><NAME>y</NAME> + <GETELEM><NAME>offsetcache</NAME>[<NUMBER>1</NUMBER>]</GETELEM></ADD> - <GETPROP><THIS>this</THIS>.<STRING>deltaY</STRING></GETPROP></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><THIS>this</THIS>.<STRING>offset</STRING> = <CALL><THIS>this</THIS>.<GETPROP><STRING>cumulativeOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></SETPROP></EXPR_VOID>;

    <RETURN>return (<AND><GE><GETPROP><THIS>this</THIS>.<STRING>ycomp</STRING></GETPROP> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM></GE> &amp;&amp;
            <AND><LT><GETPROP><THIS>this</THIS>.<STRING>ycomp</STRING></GETPROP> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP></ADD></LT> &amp;&amp;
            <AND><GE><GETPROP><THIS>this</THIS>.<STRING>xcomp</STRING></GETPROP> &gt;= <GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM></GE> &amp;&amp;
            <LT><GETPROP><THIS>this</THIS>.<STRING>xcomp</STRING></GETPROP> &lt;  <ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP></ADD></LT></AND></AND>)</AND></RETURN>;</BLOCK>
  }</FUNCTION>,

  // within must be called directly before
  <OBJLITNAME>overlap</OBJLITNAME>: <FUNCTION>function(<PARAMETER>mode</PARAMETER>, <PARAMETER>element</PARAMETER>) <BLOCK>{
    <BLOCK>if (<IFNE><NOT>!<NAME>mode</NAME></NOT></IFNE>) <RETURN>return <NUMBER>0</NUMBER></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><EQ><NAME>mode</NAME> == <STRING>'vertical'</STRING></EQ></IFNE>)
      <RETURN>return ((<DIV><SUB><ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>1</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP>)</ADD> - <GETPROP><THIS>this</THIS>.<STRING>ycomp</STRING></GETPROP>)</SUB> /
        <GETPROP><NAME>element</NAME>.<STRING>offsetHeight</STRING></GETPROP></DIV></RETURN>;</BLOCK>
    <BLOCK>if (<IFNE><EQ><NAME>mode</NAME> == <STRING>'horizontal'</STRING></EQ></IFNE>)
      <RETURN>return ((<DIV><SUB><ADD><GETELEM><THIS>this</THIS>.<GETPROP><STRING>offset</STRING></GETPROP>[<NUMBER>0</NUMBER>]</GETELEM> + <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP>)</ADD> - <GETPROP><THIS>this</THIS>.<STRING>xcomp</STRING></GETPROP>)</SUB> /
        <GETPROP><NAME>element</NAME>.<STRING>offsetWidth</STRING></GETPROP></DIV></RETURN>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>page</OBJLITNAME>: <FUNCTION>function(<PARAMETER>forElement</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;

    <VAR>var <NAME>element = <NAME>forElement</NAME></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;

      // Safari fix
      <BLOCK>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP>==<GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ></IFNE>)
        <BLOCK>if (<IFNE><EQ><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>,<STRING>'position'</STRING>)</CALL>==<STRING>'absolute'</STRING></EQ></IFNE>) <BREAK>break</BREAK>;</BLOCK></BLOCK>

    }</BLOCK> while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent<TARGET></STRING></GETPROP></SETNAME></IFEQ></TARGET></LOOP>);

    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <NAME>forElement</NAME></SETNAME></EXPR_VOID>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <BLOCK>if (<IFNE><OR>!<NOT><GETPROP><NAME>window</NAME>.<STRING>opera</STRING></GETPROP></NOT> || <EQ><GETPROP><NAME>element</NAME>.<STRING>tagName</STRING></GETPROP>==<STRING>'BODY'</STRING></EQ></OR></IFNE>) <BLOCK>{
        <EXPR_VOID><SETNAME><BINDNAME><SUB><NAME>valueT</NAME></BINDNAME> -= <OR><GETPROP><NAME>element</NAME>.<STRING>scrollTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></SUB></SETNAME></EXPR_VOID>;
        <EXPR_VOID><SETNAME><BINDNAME><SUB><NAME>valueL</NAME></BINDNAME> -= <OR><GETPROP><NAME>element</NAME>.<STRING>scrollLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></SUB></SETNAME></EXPR_VOID>;
      }</BLOCK></BLOCK>
    }</BLOCK> while (<TARGET><IFEQ><SETNAME><BINDNAME></TARGET>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>parentNode<TARGET></STRING></GETPROP></SETNAME></IFEQ></TARGET></LOOP>);

    <RETURN>return [<ARRAYLIT><NAME>valueL</NAME>, <NAME>valueT</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>clone</OBJLITNAME>: <FUNCTION>function(<PARAMETER>source</PARAMETER>, <PARAMETER>target</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>options = <CALL><NAME>Object</NAME>.<GETPROP><STRING>extend</STRING></GETPROP>(<OBJECTLIT>{
      <OBJLITNAME>setLeft</OBJLITNAME>:    <TRUE>true</TRUE>,
      <OBJLITNAME>setTop</OBJLITNAME>:     <TRUE>true</TRUE>,
      <OBJLITNAME>setWidth</OBJLITNAME>:   <TRUE>true</TRUE>,
      <OBJLITNAME>setHeight</OBJLITNAME>:  <TRUE>true</TRUE>,
      <OBJLITNAME>offsetTop</OBJLITNAME>:  <NUMBER>0</NUMBER>,
      <OBJLITNAME>offsetLeft</OBJLITNAME>: <NUMBER>0</NUMBER>
    }</OBJECTLIT>, <OR><GETELEM><NAME>arguments</NAME>[<NUMBER>2</NUMBER>]</GETELEM> || <OBJECTLIT>{}</OBJECTLIT></OR>)</CALL></NAME></VAR>

    // find page position of source
    <EXPR_VOID><SETNAME><BINDNAME>source</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>source</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>p = <CALL><NAME>Position</NAME>.<GETPROP><STRING>page</STRING></GETPROP>(<NAME>source</NAME>)</CALL></NAME></VAR>;

    // find coordinate system to use
    <EXPR_VOID><SETNAME><BINDNAME>target</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>target</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <VAR>var <NAME>delta = [<ARRAYLIT><NUMBER>0</NUMBER>, <NUMBER>0</NUMBER>]</ARRAYLIT></NAME></VAR>;
    <VAR>var <NAME>parent = <NULL>null</NULL></NAME></VAR>;
    // delta [0,0] will do fine with position: fixed elements,
    // position:absolute needs offsetParent deltas
    <BLOCK>if (<IFNE><EQ><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>target</NAME>,<STRING>'position'</STRING>)</CALL> == <STRING>'absolute'</STRING></EQ></IFNE>) <BLOCK>{
      <EXPR_VOID><SETNAME><BINDNAME>parent</BINDNAME> = <CALL><NAME>Position</NAME>.<GETPROP><STRING>offsetParent</STRING></GETPROP>(<NAME>target</NAME>)</CALL></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME>delta</BINDNAME> = <CALL><NAME>Position</NAME>.<GETPROP><STRING>page</STRING></GETPROP>(<NAME>parent</NAME>)</CALL></SETNAME></EXPR_VOID>;
    }</BLOCK></BLOCK>

    // correct by body offsets (fixes Safari)
    <BLOCK>if (<IFNE><EQ><NAME>parent</NAME> == <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ></IFNE>) <BLOCK><EXPR_VOID><SETELEM_OP>{
      <NAME>delta</NAME>[<NUMBER>0</NUMBER>] -= <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>offsetLeft<EXPR_VOID><SETELEM_OP></STRING></GETPROP></SETELEM_OP></EXPR_VOID>;
      <NAME>delta</NAME>[<NUMBER>1</NUMBER>] -= <GETPROP><NAME>document</NAME>.<GETPROP><STRING>body</STRING></GETPROP>.<STRING>offsetTop</STRING></GETPROP></SETELEM_OP></EXPR_VOID>;
    }</BLOCK></BLOCK>

    // set position
    <BLOCK>if(<IFNE><GETPROP><NAME>options</NAME>.<STRING>setLeft</STRING></GETPROP></IFNE>)   <NAME>target</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING>  = (<ADD><ADD><SUB><GETELEM><NAME>p</NAME>[<NUMBER>0</NUMBER>]</GETELEM> - <GETELEM><NAME>delta</NAME>[<NUMBER>0</NUMBER>]</GETELEM></SUB> + <GETPROP><NAME>options</NAME>.<STRING>offsetLeft</STRING></GETPROP>)</ADD> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
    <BLOCK>if(<IFNE><GETPROP><NAME>options</NAME>.<STRING>setTop</STRING></GETPROP></IFNE>)    <NAME>target</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING>   = (<ADD><ADD><SUB><GETELEM><NAME>p</NAME>[<NUMBER>1</NUMBER>]</GETELEM> - <GETELEM><NAME>delta</NAME>[<NUMBER>1</NUMBER>]</GETELEM></SUB> + <GETPROP><NAME>options</NAME>.<STRING>offsetTop</STRING></GETPROP>)</ADD> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
    <BLOCK>if(<IFNE><GETPROP><NAME>options</NAME>.<STRING>setWidth</STRING></GETPROP></IFNE>)  <NAME>target</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING> = <ADD><GETPROP><NAME>source</NAME>.<STRING>offsetWidth</STRING></GETPROP> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
    <BLOCK>if(<IFNE><GETPROP><NAME>options</NAME>.<STRING>setHeight</STRING></GETPROP></IFNE>) <NAME>target</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING> = <ADD><GETPROP><NAME>source</NAME>.<STRING>offsetHeight</STRING></GETPROP> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK></BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>absolutize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING></GETPROP> == <STRING>'absolute'</STRING></EQ></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><NAME>Position</NAME>.<GETPROP><STRING>prepare</STRING></GETPROP>()</CALL></EXPR_VOID>;

    <VAR>var <NAME>offsets = <CALL><NAME>Position</NAME>.<GETPROP><STRING>positionedOffset</STRING></GETPROP>(<NAME>element</NAME>)</CALL></NAME></VAR>;
    <VAR>var <NAME>top     = <GETELEM><NAME>offsets</NAME>[<NUMBER>1</NUMBER>]</GETELEM></NAME></VAR>;
    <VAR>var <NAME>left    = <GETELEM><NAME>offsets</NAME>[<NUMBER>0</NUMBER>]</GETELEM></NAME></VAR>;
    <VAR>var <NAME>width   = <GETPROP><NAME>element</NAME>.<STRING>clientWidth</STRING></GETPROP></NAME></VAR>;
    <VAR>var <NAME>height  = <GETPROP><NAME>element</NAME>.<STRING>clientHeight</STRING></GETPROP></NAME></VAR>;

    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalLeft</STRING>   = <SUB><NAME>left</NAME> - <CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR>)</CALL></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalTop</STRING>    = <SUB><NAME>top</NAME>  - <CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING></GETPROP> || <NUMBER>0</NUMBER></OR>)</CALL></SUB></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalWidth</STRING>  = <GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <EXPR_VOID><SETPROP><NAME>element</NAME>.<STRING>_originalHeight</STRING> = <GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING></GETPROP></SETPROP></EXPR_VOID>;

    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> = <STRING>'absolute'</STRING></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING>    = <ADD><NAME>top</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING>   = <ADD><NAME>left</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING>  = <ADD><NAME>width</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING> = <ADD><NAME>height</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>,

  <OBJLITNAME>relativize</OBJLITNAME>: <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <CALL><NAME>$</NAME>(<NAME>element</NAME>)</CALL></SETNAME></EXPR_VOID>;
    <BLOCK>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING></GETPROP> == <STRING>'relative'</STRING></EQ></IFNE>) <RETURN>return</RETURN>;</BLOCK>
    <EXPR_VOID><CALL><NAME>Position</NAME>.<GETPROP><STRING>prepare</STRING></GETPROP>()</CALL></EXPR_VOID>;

    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>position</STRING> = <STRING>'relative'</STRING></SETPROP></EXPR_VOID>;
    <VAR>var <NAME>top  = <SUB><CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR>)</CALL> - (<OR><GETPROP><NAME>element</NAME>.<STRING>_originalTop</STRING></GETPROP> || <NUMBER>0</NUMBER>)</OR></SUB></NAME></VAR>;
    <VAR>var <NAME>left = <SUB><CALL><NAME>parseFloat</NAME>(<OR><GETPROP><NAME>element</NAME>.<GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING></GETPROP> || <NUMBER>0</NUMBER></OR>)</CALL> - (<OR><GETPROP><NAME>element</NAME>.<STRING>_originalLeft</STRING></GETPROP> || <NUMBER>0</NUMBER>)</OR></SUB></NAME></VAR>;

    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>top</STRING>    = <ADD><NAME>top</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>left</STRING>   = <ADD><NAME>left</NAME> + <STRING>'px'</STRING></ADD></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>height</STRING> = <GETPROP><NAME>element</NAME>.<STRING>_originalHeight</STRING></GETPROP></SETPROP></EXPR_VOID>;
    <NAME>element</NAME>.<EXPR_VOID><SETPROP><GETPROP><STRING>style</STRING></GETPROP>.<STRING>width</STRING>  = <GETPROP><NAME>element</NAME>.<STRING>_originalWidth</STRING></GETPROP></SETPROP></EXPR_VOID>;</BLOCK>
  }</FUNCTION>
}</OBJECTLIT></NAME></VAR>

// Safari returns margins on body which is incorrect if the child is absolutely
// positioned.  For performance reasons, redefine Position.cumulativeOffset for
// KHTML/WebKit only.
<BLOCK>if (<IFNE><CALL><REGEXP>/Konqueror|Safari|KHTML/</REGEXP>.<GETPROP><STRING>test</STRING></GETPROP>(<GETPROP><NAME>navigator</NAME>.<STRING>userAgent</STRING></GETPROP>)</CALL></IFNE>) <BLOCK>{
  <EXPR_RESULT><SETPROP><NAME>Position</NAME>.<STRING>cumulativeOffset</STRING> = <FUNCTION>function(<PARAMETER>element</PARAMETER>) <BLOCK>{
    <VAR>var <NAME>valueT = <NUMBER>0</NUMBER></NAME>, <NAME>valueL = <NUMBER>0</NUMBER></NAME></VAR>;
    <LOOP>do <TARGET><BLOCK></TARGET>{
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueT</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetTop</STRING></GETPROP>  || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>valueL</NAME></BINDNAME> += <OR><GETPROP><NAME>element</NAME>.<STRING>offsetLeft</STRING></GETPROP> || <NUMBER>0</NUMBER></OR></ADD></SETNAME></EXPR_VOID>;
      <BLOCK>if (<IFNE><EQ><GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP> == <GETPROP><NAME>document</NAME>.<STRING>body</STRING></GETPROP></EQ></IFNE>)
        <BLOCK>if (<IFNE><EQ><CALL><NAME>Element</NAME>.<GETPROP><STRING>getStyle</STRING></GETPROP>(<NAME>element</NAME>, <STRING>'position'</STRING>)</CALL> == <STRING>'absolute'</STRING></EQ></IFNE>) <BREAK>break</BREAK>;</BLOCK></BLOCK>

      <EXPR_VOID><SETNAME><BINDNAME>element</BINDNAME> = <GETPROP><NAME>element</NAME>.<STRING>offsetParent</STRING></GETPROP></SETNAME></EXPR_VOID>;
    }</BLOCK> while (<TARGET><IFEQ><NAME></TARGET>element<TARGET></NAME></IFEQ></TARGET></LOOP>);

    <RETURN>return [<ARRAYLIT><NAME>valueL</NAME>, <NAME>valueT</NAME>]</ARRAYLIT></RETURN>;</BLOCK>
  }</FUNCTION></SETPROP></EXPR_RESULT>
}</BLOCK></BLOCK>

<EXPR_RESULT><CALL><NAME>Element</NAME>.<GETPROP><STRING>addMethods</STRING></GETPROP>()</CALL></EXPR_RESULT>;</SCRIPT>
