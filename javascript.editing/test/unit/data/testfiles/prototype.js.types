/*  Prototype JavaScript framework, version 1.5.0
 *  (c) 2005-2007 Sam Stephenson
 *
 *  Prototype is freely distributable under the terms of an MIT-style license.
 *  For details, see the Prototype web site: http://prototype.conio.net/
 *
/*--------------------------------------------------------------------------*/

var Prototype = {
  Version: <String>'1.5.0'</String>,
  BrowserFeatures: {
    XPath: !!<HTMLDocument.evaluate><HTMLDocument>document</HTMLDocument>.evaluate</HTMLDocument.evaluate>
  },

  ScriptFragment: <String>'(?:&lt;script.*?&gt;)((\n|\r|.)*?)(?:&lt;\/script&gt;)'</String>,
  emptyFunction: <Function>function() {}</Function>,
  K: <Function>function(x) { return x }</Function>
}

var Class = {
  create: <Function>function() {
    return <Function>function() {
      this.initialize.apply(this, arguments);
    }</Function>
  }</Function>
}

var <Object>Abstract = <Object>new Object()</Object></Object>;

Object.<String>extend</String> = <Function>function(destination, source) {
  for (var property in source) {
    destination[property] = source[property];
  }
  return destination;
}</Function>

<Object.extend>Object.<Object.extend>extend</Object.extend>(Object, {
  inspect: <Function>function(object) {
    try {
      if (object === undefined) return <String>'undefined'</String>;
      if (object === null) return <String>'null'</String>;
      return <object.inspect>object.inspect</object.inspect> ? <object.inspect>object.<object.inspect>inspect</object.inspect>()</object.inspect> : <object.toString>object.<object.toString>toString</object.toString>()</object.toString>;
    } catch (e) {
      if (e instanceof RangeError) return <String>'...'</String>;
      throw e;
    }
  }</Function>,

  keys: <Function>function(object) {
    var <Array>keys = <Array>[]</Array></Array>;
    for (var property in object)
      <Array.push><Array>keys</Array>.<Array.push>push</Array.push>(property)</Array.push>;
    return <Array>keys</Array>;
  }</Function>,

  values: <Function>function(object) {
    var <Array>values = <Array>[]</Array></Array>;
    for (var property in object)
      <Array.push><Array>values</Array>.<Array.push>push</Array.push>(object[property])</Array.push>;
    return <Array>values</Array>;
  }</Function>,

  clone: <Function>function(object) {
    return <Object.extend>Object.<Object.extend>extend</Object.extend>({}, object)</Object.extend>;
  }</Function>
})</Object.extend>;

Function.<Function.prototype>prototype</Function.prototype>.<String>bind</String> = <Function>function() {
  var __method = this, args = <$A>$A(arguments)</$A>, object = <args.shift>args.<args.shift>shift</args.shift>()</args.shift>;
  return <Function>function() {
    return <__method.apply>__method.<__method.apply>apply</__method.apply>(object, <args.concat>args.<args.concat>concat</args.concat>(<$A>$A(arguments)</$A>)</args.concat>)</__method.apply>;
  }</Function>
}</Function>

Function.<Function.prototype>prototype</Function.prototype>.<String>bindAsEventListener</String> = <Function>function(object) {
  var __method = this, args = <$A>$A(arguments)</$A>, object = <args.shift>args.<args.shift>shift</args.shift>()</args.shift>;
  return <Function>function(<Event>event</Event>) {
    return <__method.apply>__method.<__method.apply>apply</__method.apply>(object, [( <Array><Event>event</Event> || <Window.event><Window>window</Window>.event</Window.event>)</Array>].<Array.concat><Array.concat>concat</Array.concat>(args</Array.concat>).concat(<$A>$A(arguments)</$A>))</__method.apply>;
  }</Function>
}</Function>

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Number.prototype>Number.prototype</Number.prototype>, {
  toColorPart: <Function>function() {
    var digits = this.toString(<Number>16</Number>);
    if (<Boolean>this &lt; <Number>16</Number></Boolean>) return <String>'0'</String> + digits;
    return digits;
  }</Function>,

  succ: <Function>function() {
    return this + <Number>1</Number>;
  }</Function>,

  times: <Function>function(iterator) {
    <$R>$R(<Number>0</Number>, this, <Boolean>true</Boolean></$R>).each(iterator);
    return this;
  }</Function>
})</Object.extend>;

var Try = {
  these: <Function>function() {
    var returnValue;

    for (var <Number>i = <Number>0</Number></Number>, length = <arguments.length>arguments.length</arguments.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) {
      var lambda = arguments[<Number>i</Number>];
      try {
        returnValue = <lambda>lambda()</lambda>;
        break;
      } catch (e) {}
    }

    return returnValue;
  }</Function>
}

/*--------------------------------------------------------------------------*/

var <Function>PeriodicalExecuter = <Class.create>Class.<Function>create</Function>()</Class.create></Function>;
<Function>PeriodicalExecuter</Function>.<String>prototype</String> = {
  initialize: <Function>function(callback, frequency) {
    this.<String>callback</String> = callback;
    this.<String>frequency</String> = frequency;
    this.<String>currentlyExecuting</String> = <Boolean>false</Boolean>;

    this.registerCallback();
  }</Function>,

  registerCallback: <Function>function() {
    this.<String>timer</String> = <setInterval>setInterval(this.onTimerEvent.bind(this), this.frequency * <Number>1000</Number>)</setInterval>;
  }</Function>,

  stop: <Function>function() {
    if (!this.timer) return;
    <clearInterval>clearInterval(this.timer)</clearInterval>;
    this.<String>timer</String> = null;
  }</Function>,

  onTimerEvent: <Function>function() {
    if (!this.currentlyExecuting) {
      try {
        this.<String>currentlyExecuting</String> = <Boolean>true</Boolean>;
        this.callback(this);
      } finally {
        this.<String>currentlyExecuting</String> = <Boolean>false</Boolean>;
      }
    }
  }</Function>
}
String.<String>interpret</String> = <Function>function(value){
  return <Boolean>value == null</Boolean> ? <String>''</String> : <String>String(value)</String>;
}</Function>

<Object.extend>Object.<Object.extend>extend</Object.extend>(<String.prototype>String.prototype</String.prototype>, {
  gsub: <Function>function(pattern, replacement) {
    var <String>result = <String>''</String></String>, source = this, match;
    replacement = <arguments.callee.prepareReplacement>arguments.<arguments.callee>callee</arguments.callee>.<arguments.callee.prepareReplacement>prepareReplacement</arguments.callee.prepareReplacement>(replacement)</arguments.callee.prepareReplacement>;

    while (<Boolean><String.length><String>source</String>.length</String.length> &gt; <Number>0</Number></Boolean>) {
      if (match = <source.match>source.<source.match>match</source.match>(pattern)</source.match>) {
        result += <source.slice>source.<source.slice>slice</source.slice>(<Number>0</Number>, <match.index>match.index</match.index>)</source.slice>;
        result += <String.interpret>String.<String.interpret>interpret</String.interpret>(<replacement>replacement(match)</replacement>)</String.interpret>;
        source  = <source.slice>source.<source.slice>slice</source.slice>(<match.index>match.index</match.index> + match[<Number>0</Number>].length)</source.slice>;
      } else {
        result += source, <String>source</String> = <String>''</String>;
      }
    }
    return result;
  }</Function>,

  sub: <Function>function(pattern, replacement, count) {
    replacement = this.gsub.prepareReplacement(replacement);
    count = count === undefined ? <Number>1</Number> : count;

    return this.gsub(pattern, <Function>function(match) {
      if (<Boolean>--count &lt; <Number>0</Number></Boolean>) return match[<Number>0</Number>];
      return <replacement>replacement(match)</replacement>;
    }</Function>);
  }</Function>,

  scan: <Function>function(pattern, iterator) {
    this.gsub(pattern, iterator);
    return this;
  }</Function>,

  truncate: <Function>function(length, truncation) {
    length = length || <Number>30</Number>;
    truncation = truncation === undefined ? <String>'...'</String> : truncation;
    return <Boolean>this.length &gt; length</Boolean> ?
      this.slice(<Number>0</Number>, length - <truncation.length>truncation.length</truncation.length>) + truncation : this;
  }</Function>,

  strip: <Function>function() {
    return this.replace(<RegExp>/^\s+/</RegExp>, <String>''</String>).replace(<RegExp>/\s+$/</RegExp>, <String>''</String>);
  }</Function>,

  stripTags: <Function>function() {
    return this.replace(<RegExp>/&lt;\/?[^&gt;]+&gt;/gi</RegExp>, <String>''</String>);
  }</Function>,

  stripScripts: <Function>function() {
    return this.replace(<RegExp>new RegExp(<String>Prototype.ScriptFragment</String>, <String>'img'</String>)</RegExp>, <String>''</String>);
  }</Function>,

  extractScripts: <Function>function() {
    var <RegExp>matchAll = <RegExp>new RegExp(<String>Prototype.ScriptFragment</String>, <String>'img'</String>)</RegExp></RegExp>;
    var <RegExp>matchOne = <RegExp>new RegExp(<String>Prototype.ScriptFragment</String>, <String>'im'</String>)</RegExp></RegExp>;
    return (this.match(<RegExp>matchAll</RegExp>) || <Array>[]</Array>).map(<Function>function(scriptTag) {
      return (<scriptTag.match>scriptTag.<scriptTag.match>match</scriptTag.match>(matchOne)</scriptTag.match> || [<Array><String>''</String>, <String>''</String>]</Array>)[<Number>1</Number>];
    }</Function>);
  }</Function>,

  evalScripts: <Function>function() {
    return this.extractScripts().map(<Function>function(script) { return <eval>eval(script)</eval> }</Function>);
  }</Function>,

  escapeHTML: <Function>function() {
    var div = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>'div'</String>)</HTMLDocument.createElement>;
    var text = <HTMLDocument.createTextNode><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createTextNode>createTextNode</HTMLDocument.createTextNode>(this)</HTMLDocument.createTextNode>;
    <div.appendChild>div.<div.appendChild>appendChild</div.appendChild>(text)</div.appendChild>;
    return <div.innerHTML>div.innerHTML</div.innerHTML>;
  }</Function>,

  unescapeHTML: <Function>function() {
    var div = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>'div'</String>)</HTMLDocument.createElement>;
    div.<String>innerHTML</String> = this.stripTags();
    return div.<div.childNodes>childNodes</div.childNodes>[<Number>0</Number>] ? (<Boolean><div.childNodes.length>div.<div.childNodes>childNodes</div.childNodes>.length</div.childNodes.length> &gt; <Number>1</Number></Boolean> ?
      <$A>$A(<div.childNodes>div.childNodes</div.childNodes></$A>).inject(<String>''</String>,<Function>function(memo,node){ return memo+<node.nodeValue>node.nodeValue</node.nodeValue> }</Function>) :
      div.<div.childNodes>childNodes</div.childNodes>[<Number>0</Number>].nodeValue) : <String>''</String>;
  }</Function>,

  toQueryParams: <Function>function(separator) {
    var match = this.strip().match(<RegExp>/([^?#]*)(#.*)?$/</RegExp>);
    if (!match) return {};

    return match[<Number>1</Number>].split(separator || <String>'&amp;'</String>).inject({}, <Function>function(<Hash>hash</Hash>, pair) {
      if ((pair = <pair.split>pair.<pair.split>split</pair.split>(<String>'='</String>)</pair.split>)[<Number>0</Number>]) {
        var name = <decodeURIComponent>decodeURIComponent(pair[<Number>0</Number>])</decodeURIComponent>;
        var value = pair[<Number>1</Number>] ? <decodeURIComponent>decodeURIComponent(pair[<Number>1</Number>])</decodeURIComponent> : undefined;

        if (<Hash>hash</Hash>[name] !== undefined) {
          if (<Boolean><Hash>hash</Hash>[name].constructor != Array</Boolean>)
            <Hash>hash</Hash>[name] = [<Array><Hash>hash</Hash>[name]]</Array>;
          if (value) <Hash>hash</Hash>[name].push(value);
        }
        else <Hash>hash</Hash>[name] = value;
      }
      return <Hash>hash</Hash>;
    }</Function>);
  }</Function>,

  toArray: <Function>function() {
    return this.split(<String>''</String>);
  }</Function>,

  succ: <Function>function() {
    return this.slice(<Number>0</Number>, this.length - <Number>1</Number>) +
      <String.fromCharCode>String.<String.fromCharCode>fromCharCode</String.fromCharCode>(this.charCodeAt(this.length - <Number>1</Number>) + <Number>1</Number>)</String.fromCharCode>;
  }</Function>,

  camelize: <Function>function() {
    var parts = this.split(<String>'-'</String>), len = <parts.length>parts.length</parts.length>;
    if (<Boolean>len == <Number>1</Number></Boolean>) return parts[<Number>0</Number>];

    var camelized = <Boolean>this.charAt(<Number>0</Number>) == <String>'-'</String></Boolean>
      ? parts[<Number>0</Number>].charAt(<Number>0</Number>).toUpperCase() + parts[<Number>0</Number>].substring(<Number>1</Number>)
      : parts[<Number>0</Number>];

    for (var <Number>i = <Number>1</Number></Number>; <Boolean><Number>i</Number> &lt; len</Boolean>; <Number>i</Number>++)
      camelized += parts[<Number>i</Number>].charAt(<Number>0</Number>).toUpperCase() + parts[<Number>i</Number>].substring(<Number>1</Number>);

    return camelized;
  }</Function>,

  capitalize: <Function>function(){
    return this.charAt(<Number>0</Number>).toUpperCase() + this.substring(<Number>1</Number>).toLowerCase();
  }</Function>,

  underscore: <Function>function() {
    return this.gsub(<RegExp>/::/</RegExp>, <String>'/'</String>).gsub(<RegExp>/([A-Z]+)([A-Z][a-z])/</RegExp>,<String>'#{1}_#{2}'</String>).gsub(<RegExp>/([a-z\d])([A-Z])/</RegExp>,<String>'#{1}_#{2}'</String>).gsub(<RegExp>/-/</RegExp>,<String>'_'</String>).toLowerCase();
  }</Function>,

  dasherize: <Function>function() {
    return this.gsub(<RegExp>/_/</RegExp>,<String>'-'</String>);
  }</Function>,

  inspect: <Function>function(useDoubleQuotes) {
    var escapedString = this.replace(<RegExp>/\\/g</RegExp>, <String>'\\\\'</String>);
    if (useDoubleQuotes)
      return <String>'"'</String> + <escapedString.replace>escapedString.<escapedString.replace>replace</escapedString.replace>(<RegExp>/"/g</RegExp>, <String>'\\"'</String>)</escapedString.replace> + <String>'"'</String>;
    else
      return <String>"'"</String> + <escapedString.replace>escapedString.<escapedString.replace>replace</escapedString.replace>(<RegExp>/'/g</RegExp>, <String>'\\\''</String>)</escapedString.replace> + <String>"'"</String>;
  }</Function>
})</Object.extend>;

String.<String.prototype>prototype</String.prototype>.<String.prototype.gsub>gsub</String.prototype.gsub>.<String>prepareReplacement</String> = <Function>function(replacement) {
  if (<Boolean>typeof replacement == <String>'function'</String></Boolean>) return replacement;
  var <Template>template = <Template>new Template(replacement)</Template></Template>;
  return <Function>function(match) { return <template.evaluate>template.<template.evaluate>evaluate</template.evaluate>(match)</template.evaluate> }</Function>;
}</Function>

String.<String.prototype>prototype</String.prototype>.<String>parseQuery</String> = <String.prototype.toQueryParams>String.<String.prototype>prototype</String.prototype>.toQueryParams</String.prototype.toQueryParams>;

var <Function>Template = <Class.create>Class.<Function>create</Function>()</Class.create></Function>;
<Function>Template</Function>.<String>Pattern</String> = <RegExp>/(^|.|\r|\n)(#\{(.*?)\})/</RegExp>;
<Function>Template</Function>.<String>prototype</String> = {
  initialize: <Function>function(template, pattern) {
    this.<String>template</String> = <template.toString>template.<template.toString>toString</template.toString>()</template.toString>;
    this.<String>pattern</String>  = pattern || <Boolean>Template.Pattern</Boolean>;
  }</Function>,

  evaluate: <Function>function(object) {
    return this.template.gsub(this.pattern, <Function>function(match) {
      var before = match[<Number>1</Number>];
      if (<Boolean>before == <String>'\\'</String></Boolean>) return match[<Number>2</Number>];
      return before + <String.interpret>String.<String.interpret>interpret</String.interpret>(object[match[<Number>3</Number>]])</String.interpret>;
    }</Function>);
  }</Function>
}

var <Object>$break    = <Object>new Object()</Object></Object>;
var <Object>$continue = <Object>new Object()</Object></Object>;

var Enumerable = {
  each: <Function>function(iterator) {
    var <Number>index = <Number>0</Number></Number>;
    try {
      this._each(<Function>function(value) {
        try {
          <iterator>iterator(value, index++)</iterator>;
        } catch (e) {
          if (<Boolean>e != $continue</Boolean>) throw e;
        }
      }</Function>);
    } catch (e) {
      if (<Boolean>e != $break</Boolean>) throw e;
    }
    return this;
  }</Function>,

  eachSlice: <Function>function(number, iterator) {
    var index = -number, slices = <Array>[]</Array>, array = this.toArray();
    while (<Boolean>(index += number) &lt; <array.length>array.length</array.length></Boolean>)
      <slices.push>slices.<slices.push>push</slices.push>(<array.slice>array.<array.slice>slice</array.slice>(index, index+number)</array.slice>)</slices.push>;
    return <slices.map>slices.<slices.map>map</slices.map>(iterator)</slices.map>;
  }</Function>,

  all: <Function>function(iterator) {
    var <Boolean>result = <Boolean>true</Boolean></Boolean>;
    this.each(<Function>function(value, index) {
      result = result &amp;&amp; !!(iterator || <Prototype>Prototype.K</Prototype>)(value, index);
      if (!result) throw $break;
    }</Function>);
    return result;
  }</Function>,

  any: <Function>function(iterator) {
    var <Boolean>result = <Boolean>false</Boolean></Boolean>;
    this.each(<Function>function(value, index) {
      if (result = !!(iterator || <Prototype>Prototype.K</Prototype>)(value, index))
        throw $break;
    }</Function>);
    return result;
  }</Function>,

  collect: <Function>function(iterator) {
    var <Array>results = <Array>[]</Array></Array>;
    this.each(<Function>function(value, index) {
      <results.push>results.<results.push>push</results.push>((iterator || <Prototype>Prototype.K</Prototype>)(value, index))</results.push>;
    }</Function>);
    return <Array>results</Array>;
  }</Function>,

  detect: <Function>function(iterator) {
    var result;
    this.each(<Function>function(value, index) {
      if (<iterator>iterator(value, index)</iterator>) {
        result = value;
        throw $break;
      }
    }</Function>);
    return result;
  }</Function>,

  findAll: <Function>function(iterator) {
    var <Array>results = <Array>[]</Array></Array>;
    this.each(<Function>function(value, index) {
      if (<iterator>iterator(value, index)</iterator>)
        <results.push>results.<results.push>push</results.push>(value)</results.push>;
    }</Function>);
    return <Array>results</Array>;
  }</Function>,

  grep: <Function>function(pattern, iterator) {
    var <Array>results = <Array>[]</Array></Array>;
    this.each(<Function>function(value, index) {
      var stringValue = <value.toString>value.<value.toString>toString</value.toString>()</value.toString>;
      if (<stringValue.match>stringValue.<stringValue.match>match</stringValue.match>(pattern)</stringValue.match>)
        <results.push>results.<results.push>push</results.push>((iterator || <Prototype>Prototype.K</Prototype>)(value, index))</results.push>;
    }</Function>)
    return <Array>results</Array>;
  }</Function>,

  include: <Function>function(object) {
    var <Boolean>found = <Boolean>false</Boolean></Boolean>;
    this.each(<Function>function(value) {
      if (<Boolean>value == object</Boolean>) {
        <Boolean>found</Boolean> = <Boolean>true</Boolean>;
        throw $break;
      }
    }</Function>);
    return <Boolean>found</Boolean>;
  }</Function>,

  inGroupsOf: <Function>function(number, fillWith) {
    fillWith = fillWith === undefined ? null : fillWith;
    return this.eachSlice(number, <Function>function(slice) {
      while(<Boolean><slice.length>slice.length</slice.length> &lt; number</Boolean>) <slice.push>slice.<slice.push>push</slice.push>(fillWith)</slice.push>;
      return slice;
    }</Function>);
  }</Function>,

  inject: <Function>function(memo, iterator) {
    this.each(<Function>function(value, index) {
      memo = <iterator>iterator(memo, value, index)</iterator>;
    }</Function>);
    return memo;
  }</Function>,

  invoke: <Function>function(method) {
    var args = <$A>$A(arguments</$A>).slice(<Number>1</Number>);
    return this.map(<Function>function(value) {
      return value[method].apply(value, args);
    }</Function>);
  }</Function>,

  max: <Function>function(iterator) {
    var result;
    this.each(<Function>function(value, index) {
      value = (iterator || <Prototype>Prototype.K</Prototype>)(value, index);
      if (<Boolean>result == undefined</Boolean> || <Boolean>value &gt;= result</Boolean>)
        result = value;
    }</Function>);
    return result;
  }</Function>,

  min: <Function>function(iterator) {
    var result;
    this.each(<Function>function(value, index) {
      value = (iterator || <Prototype>Prototype.K</Prototype>)(value, index);
      if (<Boolean>result == undefined</Boolean> || <Boolean>value &lt; result</Boolean>)
        result = value;
    }</Function>);
    return result;
  }</Function>,

  partition: <Function>function(iterator) {
    var <Array>trues = <Array>[]</Array></Array>, falses = <Array>[]</Array>;
    this.each(<Function>function(value, index) {
      ((iterator || <Prototype>Prototype.K</Prototype>)(value, index) ?
        trues : falses).push(value);
    }</Function>);
    return [<Array><Array>trues</Array>, falses]</Array>;
  }</Function>,

  pluck: <Function>function(property) {
    var <Array>results = <Array>[]</Array></Array>;
    this.each(<Function>function(value, index) {
      <results.push>results.<results.push>push</results.push>(value[property])</results.push>;
    }</Function>);
    return <Array>results</Array>;
  }</Function>,

  reject: <Function>function(iterator) {
    var <Array>results = <Array>[]</Array></Array>;
    this.each(<Function>function(value, index) {
      if (!<iterator>iterator(value, index)</iterator>)
        <results.push>results.<results.push>push</results.push>(value)</results.push>;
    }</Function>);
    return <Array>results</Array>;
  }</Function>,

  sortBy: <Function>function(iterator) {
    return this.map(<Function>function(value, index) {
      return {value: value, criteria: <iterator>iterator(value, index)</iterator>};
    }</Function>).sort(<Function>function(left, right) {
      var <left.criteria>a = <left.criteria>left.criteria</left.criteria></left.criteria>, b = <right.criteria>right.criteria</right.criteria>;
      return <Boolean><left.criteria>a</left.criteria> &lt; b</Boolean> ? -<Number>1</Number> : <Boolean><left.criteria>a</left.criteria> &gt; b</Boolean> ? <Number>1</Number> : <Number>0</Number>;
    }</Function>).pluck(<String>'value'</String>);
  }</Function>,

  toArray: <Function>function() {
    return this.map();
  }</Function>,

  zip: <Function>function() {
    var <Prototype>iterator = <Prototype>Prototype.K</Prototype></Prototype>, args = <$A>$A(arguments)</$A>;
    if (<Boolean>typeof <args.last>args.<args.last>last</args.last>()</args.last> == <String>'function'</String></Boolean>)
      iterator = <args.pop>args.<args.pop>pop</args.pop>()</args.pop>;

    var collections = [<Array>this</Array>].<Array.concat><Array.concat>concat</Array.concat>(args</Array.concat>).map($A);
    return this.map(<Function>function(value, index) {
      return <iterator>iterator(<collections.pluck>collections.<collections.pluck>pluck</collections.pluck>(index)</collections.pluck>)</iterator>;
    }</Function>);
  }</Function>,

  size: <Function>function() {
    return this.toArray().length;
  }</Function>,

  inspect: <Function>function() {
    return <String>'#&lt;Enumerable:'</String> + this.toArray().inspect() + <String>'&gt;'</String>;
  }</Function>
}

<Object.extend>Object.<Object.extend>extend</Object.extend>(Enumerable, {
  map:     <Enumerable.collect>Enumerable.collect</Enumerable.collect>,
  find:    <Enumerable.detect>Enumerable.detect</Enumerable.detect>,
  select:  <Enumerable.findAll>Enumerable.findAll</Enumerable.findAll>,
  member:  <Enumerable.include>Enumerable.include</Enumerable.include>,
  entries: <Enumerable.toArray>Enumerable.toArray</Enumerable.toArray>
})</Object.extend>;
var $A = Array.<String>from</String> = <Function>function(iterable) {
  if (!iterable) return <Array>[]</Array>;
  if (<iterable.toArray>iterable.toArray</iterable.toArray>) {
    return <iterable.toArray>iterable.<iterable.toArray>toArray</iterable.toArray>()</iterable.toArray>;
  } else {
    var <Array>results = <Array>[]</Array></Array>;
    for (var <Number>i = <Number>0</Number></Number>, length = <iterable.length>iterable.length</iterable.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++)
      <Array.push><Array>results</Array>.<Array.push>push</Array.push>(iterable[<Number>i</Number>])</Array.push>;
    return <Array>results</Array>;
  }
}</Function>

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Array.prototype>Array.prototype</Array.prototype>, Enumerable)</Object.extend>;

if (!<Array.prototype._reverse>Array.<Array.prototype>prototype</Array.prototype>._reverse</Array.prototype._reverse>)
  Array.<Array.prototype>prototype</Array.prototype>.<String>_reverse</String> = <Array.prototype.reverse>Array.<Array.prototype>prototype</Array.prototype>.reverse</Array.prototype.reverse>;

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Array.prototype>Array.prototype</Array.prototype>, {
  _each: <Function>function(iterator) {
    for (var <Number>i = <Number>0</Number></Number>, length = this.length; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++)
      <iterator>iterator(this[<Number>i</Number>])</iterator>;
  }</Function>,

  clear: <Function>function() {
    this.<String>length</String> = <Number>0</Number>;
    return this;
  }</Function>,

  first: <Function>function() {
    return this[<Number>0</Number>];
  }</Function>,

  last: <Function>function() {
    return this[this.length - <Number>1</Number>];
  }</Function>,

  compact: <Function>function() {
    return this.select(<Function>function(value) {
      return <Boolean>value != null</Boolean>;
    }</Function>);
  }</Function>,

  flatten: <Function>function() {
    return this.inject(<Array>[]</Array>, <Function>function(array, value) {
      return <array.concat>array.<array.concat>concat</array.concat>(value &amp;&amp; <Boolean><value.constructor>value.constructor</value.constructor> == Array</Boolean> ?
        <value.flatten>value.<value.flatten>flatten</value.flatten>()</value.flatten> : [<Array>value]</Array>)</array.concat>;
    }</Function>);
  }</Function>,

  without: <Function>function() {
    var values = <$A>$A(arguments)</$A>;
    return this.select(<Function>function(value) {
      return !<values.include>values.<values.include>include</values.include>(value)</values.include>;
    }</Function>);
  }</Function>,

  indexOf: <Function>function(object) {
    for (var <Number>i = <Number>0</Number></Number>, length = this.length; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++)
      if (<Boolean>this[<Number>i</Number>] == object</Boolean>) return <Number>i</Number>;
    return -<Number>1</Number>;
  }</Function>,

  reverse: <Function>function(inline) {
    return (inline !== <Boolean>false</Boolean> ? this : this.toArray())._reverse();
  }</Function>,

  reduce: <Function>function() {
    return <Boolean>this.length &gt; <Number>1</Number></Boolean> ? this : this[<Number>0</Number>];
  }</Function>,

  uniq: <Function>function() {
    return this.inject(<Array>[]</Array>, <Function>function(array, value) {
      return <array.include>array.<array.include>include</array.include>(value)</array.include> ? array : <array.concat>array.<array.concat>concat</array.concat>([<Array>value]</Array>)</array.concat>;
    }</Function>);
  }</Function>,

  clone: <Function>function() {
    return <Array.concat><Array>[]</Array>.<Array.concat>concat</Array.concat>(this)</Array.concat>;
  }</Function>,

  size: <Function>function() {
    return this.length;
  }</Function>,

  inspect: <Function>function() {
    return <String>'['</String> + this.map(<Object.inspect>Object.inspect</Object.inspect>).join(<String>', '</String>) + <String>']'</String>;
  }</Function>
})</Object.extend>;

Array.<Array.prototype>prototype</Array.prototype>.<String>toArray</String> = <Array.prototype.clone>Array.<Array.prototype>prototype</Array.prototype>.clone</Array.prototype.clone>;

<Function>function $w(string){
  string = <string.strip>string.<string.strip>strip</string.strip>()</string.strip>;
  return string ? <string.split>string.<string.split>split</string.split>(<RegExp>/\s+/</RegExp>)</string.split> : <Array>[]</Array>;
}</Function>

if(<Window.opera><Window>window</Window>.opera</Window.opera>){
  Array.<Array.prototype>prototype</Array.prototype>.<String>concat</String> = <Function>function(){
    var <Array>array = <Array>[]</Array></Array>;
    for(var <Number>i = <Number>0</Number></Number>, length = this.length; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) <Array.push><Array>array</Array>.<Array.push>push</Array.push>(this[<Number>i</Number>])</Array.push>;
    for(var <Number>i = <Number>0</Number></Number>, length = <arguments.length>arguments.length</arguments.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) {
      if(<Boolean>arguments[<Number>i</Number>].constructor == Array</Boolean>) {
        for(var <Number>j = <Number>0</Number></Number>, arrayLength = arguments[<Number>i</Number>].length; <Boolean><Number>j</Number> &lt; arrayLength</Boolean>; <Number>j</Number>++)
          <Array.push><Array>array</Array>.<Array.push>push</Array.push>(arguments[<Number>i</Number>][<Number>j</Number>])</Array.push>;
      } else {
        <Array.push><Array>array</Array>.<Array.push>push</Array.push>(arguments[<Number>i</Number>])</Array.push>;
      }
    }
    return <Array>array</Array>;
  }</Function>
}
var <Function>Hash = <Function>function(obj) {
  <Object.extend>Object.<Object.extend>extend</Object.extend>(this, obj || {})</Object.extend>;
}</Function></Function>;

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Function>Hash</Function>, {
  toQueryString: <Function>function(obj) {
    var <Array>parts = <Array>[]</Array></Array>;

	  this.prototype._each.call(obj, <Function>function(pair) {
      if (!<pair.key>pair.key</pair.key>) return;

      if (<pair.value>pair.value</pair.value> &amp;&amp; <Boolean><pair.value.constructor>pair.<pair.value>value</pair.value>.constructor</pair.value.constructor> == Array</Boolean>) {
        var values = <pair.value.compact>pair.<pair.value>value</pair.value>.<pair.value.compact>compact</pair.value.compact>()</pair.value.compact>;
        if (<Boolean><values.length>values.length</values.length> &lt; <Number>2</Number></Boolean>) pair.<String>value</String> = <values.reduce>values.<values.reduce>reduce</values.reduce>()</values.reduce>;
        else {
        	key = <encodeURIComponent>encodeURIComponent(<pair.key>pair.key</pair.key>)</encodeURIComponent>;
          <values.each>values.<values.each>each</values.each>(<Function>function(value) {
            value = <Boolean>value != undefined</Boolean> ? <encodeURIComponent>encodeURIComponent(value)</encodeURIComponent> : <String>''</String>;
            <parts.push>parts.<parts.push>push</parts.push>(key + <String>'='</String> + <encodeURIComponent>encodeURIComponent(value)</encodeURIComponent>)</parts.push>;
          }</Function>)</values.each>;
          return;
        }
      }
      if (<Boolean><pair.value>pair.value</pair.value> == undefined</Boolean>) pair[<Number>1</Number>] = <String>''</String>;
      <parts.push>parts.<parts.push>push</parts.push>(pair.<pair.map><pair.map>map</pair.map>(encodeURIComponent</pair.map>).join(<String>'='</String>))</parts.push>;
	  }</Function>);

    return <Array.join><Array>parts</Array>.<Array.join>join</Array.join>(<String>'&amp;'</String>)</Array.join>;
  }</Function>
})</Object.extend>;

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Function.prototype><Function>Hash</Function>.prototype</Function.prototype>, Enumerable)</Object.extend>;
<Object.extend>Object.<Object.extend>extend</Object.extend>(<Function.prototype><Function>Hash</Function>.prototype</Function.prototype>, {
  _each: <Function>function(iterator) {
    for (var key in this) {
      var value = this[key];
      if (value &amp;&amp; <Boolean>value == <Hash>Hash</Hash>.<Hash.prototype>prototype</Hash.prototype>[key]</Boolean>) continue;

      var <Array>pair = [<Array>key, value]</Array></Array>;
      <Array>pair</Array>.<String>key</String> = key;
      <Array>pair</Array>.<String>value</String> = value;
      <iterator>iterator(<Array>pair</Array>)</iterator>;
    }
  }</Function>,

  <Array>keys</Array>: <Function>function() {
    return this.pluck(<String>'key'</String>);
  }</Function>,

  values: <Function>function() {
    return this.pluck(<String>'value'</String>);
  }</Function>,

  merge: <Function>function(<Hash>hash</Hash>) {
    return <$H>$H(<Hash>hash</Hash></$H>).inject(this, <Function>function(mergedHash, pair) {
      mergedHash[<pair.key>pair.key</pair.key>] = <pair.value>pair.value</pair.value>;
      return mergedHash;
    }</Function>);
  }</Function>,

  remove: <Function>function() {
    var result;
    for(var <Number>i = <Number>0</Number></Number>, length = <arguments.length>arguments.length</arguments.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) {
      var value = this[arguments[<Number>i</Number>]];
      if (value !== undefined){
        if (result === undefined) result = value;
        else {
          if (<Boolean><result.constructor>result.constructor</result.constructor> != Array</Boolean>) <Array>result</Array> = [<Array><Array>result</Array>]</Array>;
          <Array.push><Array>result</Array>.<Array.push>push</Array.push>(value)</Array.push>
        }
      }
      delete this[arguments[<Number>i</Number>]];
    }
    return <Array>result</Array>;
  }</Function>,

  toQueryString: <Function>function() {
    return <Hash.toQueryString><Hash>Hash</Hash>.<Hash.toQueryString>toQueryString</Hash.toQueryString>(this)</Hash.toQueryString>;
  }</Function>,

  inspect: <Function>function() {
    return <String>'#&lt;Hash:{'</String> + this.map(<Function>function(pair) {
      return pair.<pair.map><pair.map>map</pair.map>(<Object.inspect>Object.inspect</Object.inspect></pair.map>).join(<String>': '</String>);
    }</Function>).join(<String>', '</String>) + <String>'}&gt;'</String>;
  }</Function>
})</Object.extend>;

<Function>function $H(object) {
  if (object &amp;&amp; <Boolean><object.constructor>object.constructor</object.constructor> == <Hash>Hash</Hash></Boolean>) return object;
  return <Hash>new <Hash>Hash</Hash>(object)</Hash>;
}</Function>;
<Function>ObjectRange</Function> = <Class.create>Class.<Function>create</Function>()</Class.create>;
<Object.extend>Object.<Object.extend>extend</Object.extend>(<Function.prototype><Function>ObjectRange</Function>.prototype</Function.prototype>, Enumerable)</Object.extend>;
<Object.extend>Object.<Object.extend>extend</Object.extend>(<Function.prototype><Function>ObjectRange</Function>.prototype</Function.prototype>, {
  initialize: <Function>function(start, end, exclusive) {
    this.<String>start</String> = start;
    this.<String>end</String> = end;
    this.<String>exclusive</String> = exclusive;
  }</Function>,

  _each: <Function>function(iterator) {
    var value = this.start;
    while (this.include(value)) {
      <iterator>iterator(value)</iterator>;
      value = <value.succ>value.<value.succ>succ</value.succ>()</value.succ>;
    }
  }</Function>,

  include: <Function>function(value) {
    if (<Boolean>value &lt; this.start</Boolean>)
      return <Boolean>false</Boolean>;
    if (this.exclusive)
      return <Boolean>value &lt; this.end</Boolean>;
    return <Boolean>value &lt;= this.end</Boolean>;
  }</Function>
})</Object.extend>;

var <Function>$R = <Function>function(start, end, exclusive) {
  return <ObjectRange>new ObjectRange(start, end, exclusive)</ObjectRange>;
}</Function></Function>

var Ajax = {
  getTransport: <Function>function() {
    return <Try.these>Try.<Try.these>these</Try.these>(
      <Function>function() {return <XMLHttpRequest>new XMLHttpRequest()</XMLHttpRequest>}</Function>,
      <Function>function() {return <ActiveXObject>new ActiveXObject(<String>'Msxml2.XMLHTTP'</String>)</ActiveXObject>}</Function>,
      <Function>function() {return <ActiveXObject>new ActiveXObject(<String>'Microsoft.XMLHTTP'</String>)</ActiveXObject>}</Function>
    )</Try.these> || <Boolean>false</Boolean>;
  }</Function>,

  activeRequestCount: <Number>0</Number>
}

Ajax.<String>Responders</String> = {
  responders: <Array>[]</Array>,

  _each: <Function>function(iterator) {
    this.responders._each(iterator);
  }</Function>,

  register: <Function>function(responder) {
    if (!this.include(responder))
      this.responders.push(responder);
  }</Function>,

  unregister: <Function>function(responder) {
    this.<String>responders</String> = this.responders.without(responder);
  }</Function>,

  dispatch: <Function>function(callback, request, transport, json) {
    this.each(<Function>function(responder) {
      if (<Boolean>typeof responder[callback] == <String>'function'</String></Boolean>) {
        try {
          responder[callback].apply(responder, [<Array>request, transport, json]</Array>);
        } catch (e) {}
      }
    }</Function>);
  }</Function>
};

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Ajax.Responders>Ajax.Responders</Ajax.Responders>, Enumerable)</Object.extend>;

<Ajax.Responders.register>Ajax.<Ajax.Responders>Responders</Ajax.Responders>.<void>register</void>({
  onCreate: <Function>function() {
    <Number>Ajax.activeRequestCount</Number>++;
  }</Function>,
  onComplete: <Function>function() {
    <Number>Ajax.activeRequestCount</Number>--;
  }</Function>
})</Ajax.Responders.register>;

Ajax.<String>Base</String> = <Function>function() {}</Function>;
Ajax.<Ajax.Base>Base</Ajax.Base>.<String>prototype</String> = {
  setOptions: <Function>function(options) {
    this.<String>options</String> = {
      method:       <String>'post'</String>,
      asynchronous: <Boolean>true</Boolean>,
      contentType:  <String>'application/x-www-form-urlencoded'</String>,
      encoding:     <String>'UTF-8'</String>,
      parameters:   <String>''</String>
    }
    <Object.extend>Object.<Object.extend>extend</Object.extend>(this.options, options || {})</Object.extend>;

    this.options.<String>method</String> = this.options.method.toLowerCase();
    if (<Boolean>typeof this.options.parameters == <String>'string'</String></Boolean>)
      this.options.<String>parameters</String> = this.options.parameters.toQueryParams();
  }</Function>
}

Ajax.<String>Request</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
Ajax.<Ajax.Request>Request</Ajax.Request>.<String>Events</String> =
  [<Array><String>'Uninitialized'</String>, <String>'Loading'</String>, <String>'Loaded'</String>, <String>'Interactive'</String>, <String>'Complete'</String>]</Array>;

Ajax.<Ajax.Request>Request</Ajax.Request>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Ajax.Base>new <Ajax.Base>Ajax.Base</Ajax.Base>()</Ajax.Base>, {
  _complete: <Boolean>false</Boolean>,

  initialize: <Function>function(url, options) {
    this.<String>transport</String> = <Ajax.getTransport>Ajax.<Boolean>getTransport</Boolean>()</Ajax.getTransport>;
    this.setOptions(options);
    this.request(url);
  }</Function>,

  request: <Function>function(url) {
    this.<String>url</String> = url;
    this.<String>method</String> = this.options.method;
    var params = this.options.parameters;

    if (![<Array.include><Array><String>'get'</String>, <String>'post'</String></Array>].<Array.include>include</Array.include>(this.method)</Array.include>) {
      // simulate other verbs over post
      params[<String>'_method'</String>] = this.method;
      this.<String>method</String> = <String>'post'</String>;
    }

    params = <Hash.toQueryString><Hash>Hash</Hash>.<Hash.toQueryString>toQueryString</Hash.toQueryString>(params)</Hash.toQueryString>;
    if (params &amp;&amp; <RegExp.test><RegExp>/Konqueror|Safari|KHTML/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>) params += <String>'&amp;_='</String>

    // when GET, append parameters to URL
    if (<Boolean>this.method == <String>'get'</String></Boolean> &amp;&amp; params)
      this.<String>url</String> += (<Boolean>this.url.indexOf(<String>'?'</String>) &gt; -<Number>1</Number></Boolean> ? <String>'&amp;'</String> : <String>'?'</String>) + params;

    try {
      <Ajax.Responders.dispatch>Ajax.<Ajax.Responders>Responders</Ajax.Responders>.<void>dispatch</void>(<String>'onCreate'</String>, this, this.transport)</Ajax.Responders.dispatch>;

      this.transport.open(this.method.toUpperCase(), this.url,
        this.options.asynchronous);

      if (this.options.asynchronous)
        <setTimeout>setTimeout(<Function.bind><Function>function() { this.respondToReadyState(<Number>1</Number>) }</Function>.<Function>bind</Function>(this)</Function.bind>, <Number>10</Number>)</setTimeout>;

      this.transport.<String>onreadystatechange</String> = this.onStateChange.bind(this);
      this.setRequestHeaders();

      var body = <Boolean>this.method == <String>'post'</String></Boolean> ? (this.options.postBody || params) : null;

      this.transport.send(body);

      /* Force Firefox to handle ready state 4 for synchronous requests */
      if (!this.options.asynchronous &amp;&amp; this.transport.overrideMimeType)
        this.onStateChange();

    }
    catch (e) {
      this.dispatchException(e);
    }
  }</Function>,

  onStateChange: <Function>function() {
    var readyState = this.transport.readyState;
    if (<Boolean>readyState &gt; <Number>1</Number></Boolean> &amp;&amp; !((<Boolean>readyState == <Number>4</Number>)</Boolean> &amp;&amp; this._complete))
      this.respondToReadyState(this.transport.readyState);
  }</Function>,

  setRequestHeaders: <Function>function() {
    var headers = {
      'X-Requested-With': <String>'XMLHttpRequest'</String>,
      'X-Prototype-Version': <String>Prototype.Version</String>,
      'Accept': <String>'text/javascript, text/html, application/xml, text/xml, */*'</String>
    };

    if (<Boolean>this.method == <String>'post'</String></Boolean>) {
      headers[<String>'Content-type'</String>] = this.options.contentType +
        (this.options.encoding ? <String>'; charset='</String> + this.options.encoding : <String>''</String>);

      /* Force "Connection: close" for older Mozilla browsers to work
       * around a bug where XMLHttpRequest sends an incorrect
       * Content-length header. See Mozilla Bugzilla #246651.
       */
      if (this.transport.overrideMimeType &amp;&amp;
          (<Boolean><Navigator.userAgent.match><Navigator>navigator</Navigator>.<Navigator.userAgent>userAgent</Navigator.userAgent>.<Navigator.userAgent.match>match</Navigator.userAgent.match>(<RegExp>/Gecko\/(\d{4})/</RegExp>)</Navigator.userAgent.match> || [<Array><Number>0</Number>,<Number>2005</Number>]</Array>)[<Number>1</Number>] &lt; <Number>2005</Number></Boolean>)
            headers[<String>'Connection'</String>] = <String>'close'</String>;
    }

    // user-defined headers
    if (<Boolean>typeof this.options.requestHeaders == <String>'object'</String></Boolean>) {
      var extras = this.options.requestHeaders;

      if (<Boolean>typeof <extras.push>extras.push</extras.push> == <String>'function'</String></Boolean>)
        for (var <Number>i = <Number>0</Number></Number>, length = <extras.length>extras.length</extras.length>; <Boolean>i &lt; length</Boolean>; i += <Number>2</Number>)
          headers[extras[<Number>i</Number>]] = extras[<Number>i</Number>+<Number>1</Number>];
      else
        <$H>$H(extras</$H>).each(<Function>function(pair) { headers[<pair.key>pair.key</pair.key>] = <pair.value>pair.value</pair.value> }</Function>);
    }

    for (var name in headers)
      this.transport.setRequestHeader(name, headers[name]);
  }</Function>,

  success: <Function>function() {
    return !this.transport.status
        || (<Boolean>this.transport.status &gt;= <Number>200</Number></Boolean> &amp;&amp; <Boolean>this.transport.status &lt; <Number>300</Number></Boolean>);
  }</Function>,

  respondToReadyState: <Function>function(readyState) {
    var state = Ajax.<Ajax.Request>Request</Ajax.Request>.<Ajax.Request.Events>Events</Ajax.Request.Events>[readyState];
    var transport = this.transport, json = this.evalJSON();

    if (<Boolean>state == <String>'Complete'</String></Boolean>) {
      try {
        this.<String>_complete</String> = <Boolean>true</Boolean>;
        (this.options[<String>'on'</String> + this.transport.status]
         || this.options[<String>'on'</String> + (this.success() ? <String>'Success'</String> : <String>'Failure'</String>)]
         || <void>Prototype.emptyFunction</void>)(transport, json);
      } catch (e) {
        this.dispatchException(e);
      }

      if ((this.getHeader(<String>'Content-type'</String>) || <String>'text/javascript'</String>).strip().
        match(<RegExp>/^(text|application)\/(x-)?(java|ecma)script(;.*)?$/i</RegExp>))
          this.evalResponse();
    }

    try {
      (this.options[<String>'on'</String> + state] || <void>Prototype.emptyFunction</void>)(transport, json);
      <Ajax.Responders.dispatch>Ajax.<Ajax.Responders>Responders</Ajax.Responders>.<void>dispatch</void>(<String>'on'</String> + state, this, transport, json)</Ajax.Responders.dispatch>;
    } catch (e) {
      this.dispatchException(e);
    }

    if (<Boolean>state == <String>'Complete'</String></Boolean>) {
      // avoid memory leak in MSIE: clean up
      this.transport.<String>onreadystatechange</String> = <void>Prototype.emptyFunction</void>;
    }
  }</Function>,

  getHeader: <Function>function(name) {
    try {
      return this.transport.getResponseHeader(name);
    } catch (e) { return null }
  }</Function>,

  evalJSON: <Function>function() {
    try {
      var json = this.getHeader(<String>'X-JSON'</String>);
      return json ? <eval>eval(<String>'('</String> + json + <String>')'</String>)</eval> : null;
    } catch (e) { return null }
  }</Function>,

  evalResponse: <Function>function() {
    try {
      return <eval>eval(this.transport.responseText)</eval>;
    } catch (e) {
      this.dispatchException(e);
    }
  }</Function>,

  dispatchException: <Function>function(exception) {
    (this.options.onException || <void>Prototype.emptyFunction</void>)(this, exception);
    <Ajax.Responders.dispatch>Ajax.<Ajax.Responders>Responders</Ajax.Responders>.<void>dispatch</void>(<String>'onException'</String>, this, exception)</Ajax.Responders.dispatch>;
  }</Function>
})</Object.extend>;

Ajax.<String>Updater</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Object.extend>Object.<Object.extend>extend</Object.extend>(<Ajax.Updater.prototype>Ajax.<Ajax.Updater>Updater</Ajax.Updater>.prototype</Ajax.Updater.prototype>, <Ajax.Request.prototype>Ajax.<Ajax.Request>Request</Ajax.Request>.prototype</Ajax.Request.prototype>)</Object.extend>, {
  initialize: <Function>function(container, url, options) {
    this.<String>container</String> = {
      success: (<Boolean>container.success</Boolean> || container),
      failure: (<Boolean>container.failure</Boolean> || (<Boolean>container.success</Boolean> ? null : container))
    }

    this.<String>transport</String> = <Ajax.getTransport>Ajax.<Boolean>getTransport</Boolean>()</Ajax.getTransport>;
    this.setOptions(options);

    var onComplete = this.options.onComplete || <void>Prototype.emptyFunction</void>;
    this.options.<String>onComplete</String> = (<Function.bind><Function>function(transport, param) {
      this.updateContent();
      <onComplete>onComplete(transport, param)</onComplete>;
    }</Function>).<Function>bind</Function>(this)</Function.bind>;

    this.request(url);
  }</Function>,

  updateContent: <Function>function() {
    var receiver = this.container[this.success() ? <String>'success'</String> : <String>'failure'</String>];
    var response = this.transport.responseText;

    if (!this.options.evalScripts) response = <response.stripScripts>response.<response.stripScripts>stripScripts</response.stripScripts>()</response.stripScripts>;

    if (<Element>receiver</Element> = <$>$(<Element>receiver</Element>)</$>) {
      if (this.options.insertion)
        new this.options.insertion(<Element>receiver</Element>, response);
      else
        <Element.update><Element>receiver</Element>.<Element.update>update</Element.update>(response)</Element.update>;
    }

    if (this.success()) {
      if (this.onComplete)
        <setTimeout>setTimeout(this.onComplete.bind(this), <Number>10</Number>)</setTimeout>;
    }
  }</Function>
})</Object.extend>;

Ajax.<String>PeriodicalUpdater</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
Ajax.<Ajax.PeriodicalUpdater>PeriodicalUpdater</Ajax.PeriodicalUpdater>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Ajax.Base>new <Ajax.Base>Ajax.Base</Ajax.Base>()</Ajax.Base>, {
  initialize: <Function>function(container, url, options) {
    this.setOptions(options);
    this.<String>onComplete</String> = this.options.onComplete;

    this.<String>frequency</String> = (this.options.frequency || <Number>2</Number>);
    this.<String>decay</String> = (this.options.decay || <Number>1</Number>);

    this.<String>updater</String> = {};
    this.<String>container</String> = container;
    this.<String>url</String> = url;

    this.start();
  }</Function>,

  start: <Function>function() {
    this.options.<String>onComplete</String> = this.updateComplete.bind(this);
    this.onTimerEvent();
  }</Function>,

  stop: <Function>function() {
    this.updater.options.<String>onComplete</String> = undefined;
    <clearTimeout>clearTimeout(this.timer)</clearTimeout>;
    (this.onComplete || <void>Prototype.emptyFunction</void>).apply(this, arguments);
  }</Function>,

  updateComplete: <Function>function(request) {
    if (this.options.decay) {
      this.<String>decay</String> = (<Boolean><request.responseText>request.responseText</request.responseText> == this.lastText</Boolean> ?
        this.decay * this.options.decay : <Number>1</Number>);

      this.<String>lastText</String> = <request.responseText>request.responseText</request.responseText>;
    }
    this.<String>timer</String> = <setTimeout>setTimeout(this.onTimerEvent.bind(this),
      this.decay * this.frequency * <Number>1000</Number>)</setTimeout>;
  }</Function>,

  onTimerEvent: <Function>function() {
    this.<String>updater</String> = <Ajax.Updater>new <Ajax.Updater>Ajax.Updater</Ajax.Updater>(this.container, this.url, this.options)</Ajax.Updater>;
  }</Function>
})</Object.extend>;
<Function>function $(<HTMLElement>element</HTMLElement>) {
  if (<Boolean><arguments.length>arguments.length</arguments.length> &gt; <Number>1</Number></Boolean>) {
    for (var <Number>i = <Number>0</Number></Number>, elements = <Array>[]</Array>, length = <arguments.length>arguments.length</arguments.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++)
      <elements.push>elements.<elements.push>push</elements.push>(<$>$(arguments[<Number>i</Number>])</$>)</elements.push>;
    return elements;
  }
  if (<Boolean>typeof element == <String>'string'</String></Boolean>)
    <HTMLElement>element</HTMLElement> = <HTMLDocument.getElementById><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementById>getElementById</HTMLDocument.getElementById>(<HTMLElement>element</HTMLElement>)</HTMLDocument.getElementById>;
  return <Element.extend>Element.<Element.extend>extend</Element.extend>(<HTMLElement>element</HTMLElement>)</Element.extend>;
}</Function>

if (<Prototype.BrowserFeatures.XPath>Prototype.<Prototype.BrowserFeatures>BrowserFeatures</Prototype.BrowserFeatures>.XPath</Prototype.BrowserFeatures.XPath>) {
  <HTMLDocument>document</HTMLDocument>.<String>_getElementsByXPath</String> = <Function>function(expression, parentElement) {
    var <Array>results = <Array>[]</Array></Array>;
    var query = <HTMLDocument.evaluate><HTMLDocument>document</HTMLDocument>.<HTMLDocument.evaluate>evaluate</HTMLDocument.evaluate>(expression, <$>$(parentElement)</$> || <HTMLDocument>document</HTMLDocument>,
      null, <XPathResult.ORDERED_NODE_SNAPSHOT_TYPE>XPathResult.ORDERED_NODE_SNAPSHOT_TYPE</XPathResult.ORDERED_NODE_SNAPSHOT_TYPE>, null)</HTMLDocument.evaluate>;
    for (var <Number>i = <Number>0</Number></Number>, length = <query.snapshotLength>query.snapshotLength</query.snapshotLength>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++)
      <Array.push><Array>results</Array>.<Array.push>push</Array.push>(<query.snapshotItem>query.<query.snapshotItem>snapshotItem</query.snapshotItem>(<Number>i</Number>)</query.snapshotItem>)</Array.push>;
    return <Array>results</Array>;
  }</Function>;
}

<HTMLDocument>document</HTMLDocument>.<String>getElementsByClassName</String> = <Function>function(className, parentElement) {
  if (<Prototype.BrowserFeatures.XPath>Prototype.<Prototype.BrowserFeatures>BrowserFeatures</Prototype.BrowserFeatures>.XPath</Prototype.BrowserFeatures.XPath>) {
    var q = <String>".//*[contains(concat(' ', @class, ' '), ' "</String> + className + <String>" ')]"</String>;
    return <HTMLDocument._getElementsByXPath><HTMLDocument>document</HTMLDocument>.<HTMLDocument._getElementsByXPath>_getElementsByXPath</HTMLDocument._getElementsByXPath>(q, parentElement)</HTMLDocument._getElementsByXPath>;
  } else {
    var children = (<$>$(parentElement)</$> || <HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body>).getElementsByTagName(<String>'*'</String>);
    var <Array>elements = <Array>[]</Array></Array>, child;
    for (var <Number>i = <Number>0</Number></Number>, length = <children.length>children.length</children.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) {
      child = children[<Number>i</Number>];
      if (<Element.hasClassName>Element.<void|Boolean>hasClassName</void|Boolean>(child, className)</Element.hasClassName>)
        <Array.push><Array>elements</Array>.<Array.push>push</Array.push>(<Element.extend>Element.<Element.extend>extend</Element.extend>(child)</Element.extend>)</Array.push>;
    }
    return <Array>elements</Array>;
  }
}</Function>;

/*--------------------------------------------------------------------------*/

if (!<Window.Element><Window>window</Window>.Element</Window.Element>)
  var <Object>Element = <Object>new Object()</Object></Object>;

<Object>Element</Object>.<String>extend</String> = <Function>function(<HTMLElement>element</HTMLElement>) {
  if (!<HTMLElement>element</HTMLElement> || _nativeExtensions || <Boolean><HTMLElement.nodeType><HTMLElement>element</HTMLElement>.nodeType</HTMLElement.nodeType> == <Number>3</Number></Boolean>) return <HTMLElement>element</HTMLElement>;

  if (!<HTMLElement._extended><HTMLElement>element</HTMLElement>._extended</HTMLElement._extended> &amp;&amp; <HTMLElement.tagName><HTMLElement>element</HTMLElement>.tagName</HTMLElement.tagName> &amp;&amp; <Boolean><HTMLElement>element</HTMLElement> != <Window>window</Window></Boolean>) {
    var methods = <Object.clone>Object.<Object.clone>clone</Object.clone>(<Element.Methods>Element.Methods</Element.Methods>)</Object.clone>, cache = <Element.extend.cache>Element.<Element.extend>extend</Element.extend>.cache</Element.extend.cache>;

    if (<Boolean><HTMLElement.tagName><HTMLElement>element</HTMLElement>.tagName</HTMLElement.tagName> == <String>'FORM'</String></Boolean>)
      <Object.extend>Object.<Object.extend>extend</Object.extend>(methods, <Form.Methods>Form.Methods</Form.Methods>)</Object.extend>;
    if (<Array.include>[<Array><String>'INPUT'</String>, <String>'TEXTAREA'</String>, <String>'SELECT'</String></Array>].<Array.include>include</Array.include>(<HTMLElement.tagName><HTMLElement>element</HTMLElement>.tagName</HTMLElement.tagName>)</Array.include>)
      <Object.extend>Object.<Object.extend>extend</Object.extend>(methods, <Form.Element.Methods>Form.<Form.Element>Element</Form.Element>.Methods</Form.Element.Methods>)</Object.extend>;

    <Object.extend>Object.<Object.extend>extend</Object.extend>(methods, <Element.Methods.Simulated>Element.<Element.Methods>Methods</Element.Methods>.Simulated</Element.Methods.Simulated>)</Object.extend>;

    for (var property in methods) {
      var value = methods[property];
      if (typeof <Boolean>value == <String>'function'</String></Boolean> &amp;&amp; !(property in <HTMLElement>element</HTMLElement>))
        <HTMLElement>element</HTMLElement>[property] = <cache.findOrStore>cache.<cache.findOrStore>findOrStore</cache.findOrStore>(value)</cache.findOrStore>;
    }
  }

  <HTMLElement>element</HTMLElement>.<String>_extended</String> = <Boolean>true</Boolean>;
  return <HTMLElement>element</HTMLElement>;
}</Function>;

<Object>Element</Object>.<Object.extend>extend</Object.extend>.<String>cache</String> = {
  findOrStore: <Function>function(value) {
    return this[value] = this[value] || <Function>function() {
      return <value.apply>value.<value.apply>apply</value.apply>(null, [<Array.concat><Array>this</Array>].<Array.concat>concat</Array.concat>(<$A>$A(arguments)</$A>)</Array.concat>)</value.apply>;
    }</Function>
  }</Function>
};

<Object>Element</Object>.<String>Methods</String> = {
  visible: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <Boolean><Element.style.display><$>$(<HTMLElement>element</HTMLElement></$>).<Element.style>style</Element.style>.display</Element.style.display> != <String>'none'</String></Boolean>;
  }</Function>,

  toggle: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    <element>Element[<Element.visible>Element.<Boolean>visible</Boolean>(<Element>element</Element>)</Element.visible> ? <String>'hide'</String> : <String>'show'</String>](<Element>element</Element>)</element>;
    return <Element>element</Element>;
  }</Function>,

  hide: <Function>function(<HTMLElement>element</HTMLElement>) {
    <$>$(<HTMLElement>element</HTMLElement></$>).<Element.style>style</Element.style>.<String>display</String> = <String>'none'</String>;
    return <HTMLElement>element</HTMLElement>;
  }</Function>,

  show: <Function>function(<HTMLElement>element</HTMLElement>) {
    <$>$(<HTMLElement>element</HTMLElement></$>).<Element.style>style</Element.style>.<String>display</String> = <String>''</String>;
    return <HTMLElement>element</HTMLElement>;
  }</Function>,

  remove: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    <Element.parentNode.removeChild><Element>element</Element>.<Element.parentNode>parentNode</Element.parentNode>.<Element.parentNode.removeChild>removeChild</Element.parentNode.removeChild>(<Element>element</Element>)</Element.parentNode.removeChild>;
    return <Element>element</Element>;
  }</Function>,

  update: <Function>function(<HTMLElement>element</HTMLElement>, html) {
    html = typeof <Boolean>html == <String>'undefined'</String></Boolean> ? <String>''</String> : <html.toString>html.<html.toString>toString</html.toString>()</html.toString>;
    <$>$(<HTMLElement>element</HTMLElement></$>).<String>innerHTML</String> = <html.stripScripts>html.<html.stripScripts>stripScripts</html.stripScripts>()</html.stripScripts>;
    <setTimeout>setTimeout(<Function>function() {<html.evalScripts>html.<html.evalScripts>evalScripts</html.evalScripts>()</html.evalScripts>}</Function>, <Number>10</Number>)</setTimeout>;
    return <HTMLElement>element</HTMLElement>;
  }</Function>,

  replace: <Function>function(<HTMLElement>element</HTMLElement>, html) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    html = typeof <Boolean>html == <String>'undefined'</String></Boolean> ? <String>''</String> : <html.toString>html.<html.toString>toString</html.toString>()</html.toString>;
    if (<Element.outerHTML><Element>element</Element>.outerHTML</Element.outerHTML>) {
      <Element>element</Element>.<String>outerHTML</String> = <html.stripScripts>html.<html.stripScripts>stripScripts</html.stripScripts>()</html.stripScripts>;
    } else {
      var range = <Element.ownerDocument.createRange><Element>element</Element>.<Element.ownerDocument>ownerDocument</Element.ownerDocument>.<Element.ownerDocument.createRange>createRange</Element.ownerDocument.createRange>()</Element.ownerDocument.createRange>;
      <range.selectNodeContents>range.<range.selectNodeContents>selectNodeContents</range.selectNodeContents>(<Element>element</Element>)</range.selectNodeContents>;
      <Element.parentNode.replaceChild><Element>element</Element>.<Element.parentNode>parentNode</Element.parentNode>.<Element.parentNode.replaceChild>replaceChild</Element.parentNode.replaceChild>(
        <range.createContextualFragment>range.<range.createContextualFragment>createContextualFragment</range.createContextualFragment>(<html.stripScripts>html.<html.stripScripts>stripScripts</html.stripScripts>()</html.stripScripts>)</range.createContextualFragment>, <Element>element</Element>)</Element.parentNode.replaceChild>;
    }
    <setTimeout>setTimeout(<Function>function() {<html.evalScripts>html.<html.evalScripts>evalScripts</html.evalScripts>()</html.evalScripts>}</Function>, <Number>10</Number>)</setTimeout>;
    return <Element>element</Element>;
  }</Function>,

  inspect: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    var result = <String>'&lt;'</String> + <Element.tagName.toLowerCase><Element>element</Element>.<Element.tagName>tagName</Element.tagName>.<Element.tagName.toLowerCase>toLowerCase</Element.tagName.toLowerCase>()</Element.tagName.toLowerCase>;
    <$H>$H({'id': <String>'id'</String>, 'className': <String>'class'</String>}</$H>).each(<Function>function(pair) {
      var property = <pair.first>pair.<pair.first>first</pair.first>()</pair.first>, attribute = <pair.last>pair.<pair.last>last</pair.last>()</pair.last>;
      var value = (<HTMLElement>element</HTMLElement>[property] || <String>''</String>).toString();
      if (value) result += <String>' '</String> + attribute + <String>'='</String> + <value.inspect>value.<value.inspect>inspect</value.inspect>(<Boolean>true</Boolean>)</value.inspect>;
    }</Function>);
    return result + <String>'&gt;'</String>;
  }</Function>,

  recursivelyCollect: <Function>function(<HTMLElement>element</HTMLElement>, property) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    var <Array>elements = <Array>[]</Array></Array>;
    while (<HTMLElement>element</HTMLElement> = <HTMLElement>element</HTMLElement>[property])
      if (<Boolean><Element.nodeType><Element>element</Element>.nodeType</Element.nodeType> == <Number>1</Number></Boolean>)
        <Array.push><Array>elements</Array>.<Array.push>push</Array.push>(<Element.extend>Element.<Element.extend>extend</Element.extend>(<Element>element</Element>)</Element.extend>)</Array.push>;
    return <Array>elements</Array>;
  }</Function>,

  ancestors: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <Element.recursivelyCollect><$>$(<HTMLElement>element</HTMLElement></$>).<Element.recursivelyCollect>recursivelyCollect</Element.recursivelyCollect>(<String>'parentNode'</String>)</Element.recursivelyCollect>;
  }</Function>,

  descendants: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <$A>$A(<Element.getElementsByTagName><$>$(<HTMLElement>element</HTMLElement></$>).<Element.getElementsByTagName>getElementsByTagName</Element.getElementsByTagName>(<String>'*'</String>)</Element.getElementsByTagName>)</$A>;
  }</Function>,

  immediateDescendants: <Function>function(<HTMLElement>element</HTMLElement>) {
    if (!(<Element.firstChild>element</Element.firstChild> = <Element.firstChild><$>$(<Element.firstChild>element</Element.firstChild></$>).firstChild</Element.firstChild>)) return <Array>[]</Array>;
    while (<Element.firstChild.nextSibling>element</Element.firstChild.nextSibling> &amp;&amp; <Boolean><Element.firstChild.nextSibling.nodeType><Element.firstChild.nextSibling>element</Element.firstChild.nextSibling>.nodeType</Element.firstChild.nextSibling.nodeType> != <Number>1</Number></Boolean>) <Element.firstChild.nextSibling>element</Element.firstChild.nextSibling> = <Element.firstChild.nextSibling.nextSibling><Element.firstChild.nextSibling>element</Element.firstChild.nextSibling>.nextSibling</Element.firstChild.nextSibling.nextSibling>;
    if (<Element.firstChild.nextSibling>element</Element.firstChild.nextSibling>) return [<Array.concat><Array><Element.firstChild.nextSibling>element</Element.firstChild.nextSibling></Array>].<Array.concat>concat</Array.concat>(<Element.nextSiblings><$>$(<Element.firstChild.nextSibling>element</Element.firstChild.nextSibling></$>).<Element.nextSiblings>nextSiblings</Element.nextSiblings>()</Element.nextSiblings>)</Array.concat>;
    return <Array>[]</Array>;
  }</Function>,

  previousSiblings: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <Element.recursivelyCollect><$>$(<HTMLElement>element</HTMLElement></$>).<Element.recursivelyCollect>recursivelyCollect</Element.recursivelyCollect>(<String>'previousSibling'</String>)</Element.recursivelyCollect>;
  }</Function>,

  nextSiblings: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <Element.recursivelyCollect><$>$(<HTMLElement>element</HTMLElement></$>).<Element.recursivelyCollect>recursivelyCollect</Element.recursivelyCollect>(<String>'nextSibling'</String>)</Element.recursivelyCollect>;
  }</Function>,

  siblings: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    return <Element>element</Element>.<Element.previousSiblings><Element.previousSiblings>previousSiblings</Element.previousSiblings></Element.previousSiblings>().reverse().concat(<Element.nextSiblings><Element>element</Element>.<Element.nextSiblings>nextSiblings</Element.nextSiblings>()</Element.nextSiblings>);
  }</Function>,

  match: <Function>function(<HTMLElement>element</HTMLElement>, selector) {
    if (<Boolean>typeof selector == <String>'string'</String></Boolean>)
      <Selector>selector</Selector> = <Selector>new Selector(<Selector>selector</Selector>)</Selector>;
    return <Selector.match><Selector>selector</Selector>.<Selector.match>match</Selector.match>(<$>$(<HTMLElement>element</HTMLElement>)</$>)</Selector.match>;
  }</Function>,

  up: <Function>function(<HTMLElement>element</HTMLElement>, expression, index) {
    return <Selector.findElement>Selector.<Selector.findElement>findElement</Selector.findElement>(<Element.ancestors><$>$(<HTMLElement>element</HTMLElement></$>).<Element.ancestors>ancestors</Element.ancestors>()</Element.ancestors>, expression, index)</Selector.findElement>;
  }</Function>,

  down: <Function>function(<HTMLElement>element</HTMLElement>, expression, index) {
    return <Selector.findElement>Selector.<Selector.findElement>findElement</Selector.findElement>(<Element.descendants><$>$(<HTMLElement>element</HTMLElement></$>).<Element.descendants>descendants</Element.descendants>()</Element.descendants>, expression, index)</Selector.findElement>;
  }</Function>,

  previous: <Function>function(<HTMLElement>element</HTMLElement>, expression, index) {
    return <Selector.findElement>Selector.<Selector.findElement>findElement</Selector.findElement>(<Element.previousSiblings><$>$(<HTMLElement>element</HTMLElement></$>).<Element.previousSiblings>previousSiblings</Element.previousSiblings>()</Element.previousSiblings>, expression, index)</Selector.findElement>;
  }</Function>,

  next: <Function>function(<HTMLElement>element</HTMLElement>, expression, index) {
    return <Selector.findElement>Selector.<Selector.findElement>findElement</Selector.findElement>(<Element.nextSiblings><$>$(<HTMLElement>element</HTMLElement></$>).<Element.nextSiblings>nextSiblings</Element.nextSiblings>()</Element.nextSiblings>, expression, index)</Selector.findElement>;
  }</Function>,

  getElementsBySelector: <Function>function() {
    var args = <$A>$A(arguments)</$A>, <HTMLElement>element = <$>$(<args.shift>args.<args.shift>shift</args.shift>()</args.shift>)</$></HTMLElement>;
    return <Selector.findChildElements>Selector.<Selector.findChildElements>findChildElements</Selector.findChildElements>(<HTMLElement>element</HTMLElement>, args)</Selector.findChildElements>;
  }</Function>,

  getElementsByClassName: <Function>function(<HTMLElement>element</HTMLElement>, className) {
    return <HTMLDocument.getElementsByClassName><HTMLDocument>document</HTMLDocument>.<HTMLDocument.getElementsByClassName>getElementsByClassName</HTMLDocument.getElementsByClassName>(className, <HTMLElement>element</HTMLElement>)</HTMLDocument.getElementsByClassName>;
  }</Function>,

  readAttribute: <Function>function(<HTMLElement>element</HTMLElement>, name) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (<HTMLDocument.all><HTMLDocument>document</HTMLDocument>.all</HTMLDocument.all> &amp;&amp; !<Window.opera><Window>window</Window>.opera</Window.opera>) {
      var <Element._attributeTranslations>t = <Element._attributeTranslations>Element._attributeTranslations</Element._attributeTranslations></Element._attributeTranslations>;
      if (<Element._attributeTranslations>t</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>[name]) return <element><Element._attributeTranslations>t</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>[name](<Element>element</Element>, name)</element>;
      if (<Element._attributeTranslations>t</Element._attributeTranslations>.<Element._attributeTranslations.names>names</Element._attributeTranslations.names>[name])  name = <Element._attributeTranslations>t</Element._attributeTranslations>.<Element._attributeTranslations.names>names</Element._attributeTranslations.names>[name];
      var attribute = <Element>element</Element>.<Element.attributes>attributes</Element.attributes>[name];
      if(attribute) return <attribute.nodeValue>attribute.nodeValue</attribute.nodeValue>;
    }
    return <Element.getAttribute><Element>element</Element>.<Element.getAttribute>getAttribute</Element.getAttribute>(name)</Element.getAttribute>;
  }</Function>,

  getHeight: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <$>$(<HTMLElement>element</HTMLElement></$>).<Element.getDimensions><Element.getDimensions>getDimensions</Element.getDimensions></Element.getDimensions>().height;
  }</Function>,

  getWidth: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <$>$(<HTMLElement>element</HTMLElement></$>).<Element.getDimensions><Element.getDimensions>getDimensions</Element.getDimensions></Element.getDimensions>().width;
  }</Function>,

  classNames: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <Element.ClassNames>new <Element.ClassNames>Element.ClassNames</Element.ClassNames>(<HTMLElement>element</HTMLElement>)</Element.ClassNames>;
  }</Function>,

  hasClassName: <Function>function(<HTMLElement>element</HTMLElement>, className) {
    if (!(<Element>element</Element> = <$>$(<Element>element</Element>)</$>)) return;
    var <Element.className>elementClassName = <Element.className><Element>element</Element>.className</Element.className></Element.className>;
    if (<Boolean><Element.className.length><Element.className>elementClassName</Element.className>.length</Element.className.length> == <Number>0</Number></Boolean>) return <Boolean>false</Boolean>;
    if (<Boolean><Element.className>elementClassName</Element.className> == className</Boolean> ||
        <Element.className.match><Element.className>elementClassName</Element.className>.<Element.className.match>match</Element.className.match>(<RegExp>new RegExp(<String>"(^|\\s)"</String> + className + <String>"(\\s|$)"</String>)</RegExp>)</Element.className.match>)
      return <Boolean>true</Boolean>;
    return <Boolean>false</Boolean>;
  }</Function>,

  addClassName: <Function>function(<HTMLElement>element</HTMLElement>, className) {
    if (!(<Element>element</Element> = <$>$(<Element>element</Element>)</$>)) return;
    <Element.ClassNames.add>Element.<Element.classNames><Element.ClassNames>classNames</Element.ClassNames>(<Element>element</Element></Element.classNames>).<void>add</void>(className)</Element.ClassNames.add>;
    return <Element>element</Element>;
  }</Function>,

  removeClassName: <Function>function(<HTMLElement>element</HTMLElement>, className) {
    if (!(<Element>element</Element> = <$>$(<Element>element</Element>)</$>)) return;
    <Element.ClassNames.remove>Element.<Element.classNames><Element.ClassNames>classNames</Element.ClassNames>(<Element>element</Element></Element.classNames>).<void>remove</void>(className)</Element.ClassNames.remove>;
    return <Element>element</Element>;
  }</Function>,

  toggleClassName: <Function>function(<HTMLElement>element</HTMLElement>, className) {
    if (!(<Element>element</Element> = <$>$(<Element>element</Element>)</$>)) return;
    <className>Element.<Element.classNames><Element.ClassNames>classNames</Element.ClassNames>(<Element>element</Element></Element.classNames>)[<Element.hasClassName><Element>element</Element>.<void|Boolean>hasClassName</void|Boolean>(className)</Element.hasClassName> ? <String>'remove'</String> : <String>'add'</String>](className)</className>;
    return <Element>element</Element>;
  }</Function>,

  observe: <Function>function() {
    <Event.observe.apply>Event.<Event.observe>observe</Event.observe>.<Event.observe.apply>apply</Event.observe.apply>(Event, arguments)</Event.observe.apply>;
    return <$A>$A(arguments</$A>).first();
  }</Function>,

  stopObserving: <Function>function() {
    <Event.stopObserving.apply>Event.<Event.stopObserving>stopObserving</Event.stopObserving>.<Event.stopObserving.apply>apply</Event.stopObserving.apply>(Event, arguments)</Event.stopObserving.apply>;
    return <$A>$A(arguments</$A>).first();
  }</Function>,

  // removes whitespace-only text node children
  cleanWhitespace: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    var <Element.firstChild>node = <Element.firstChild><Element>element</Element>.firstChild</Element.firstChild></Element.firstChild>;
    while (<Element.firstChild.nextSibling>node</Element.firstChild.nextSibling>) {
      var <Element.firstChild.nextSibling>nextNode = <Element.firstChild.nextSibling><Element.firstChild>node</Element.firstChild>.nextSibling</Element.firstChild.nextSibling></Element.firstChild.nextSibling>;
      if (<Boolean><Element.firstChild.nodeType><Element.firstChild>node</Element.firstChild>.nodeType</Element.firstChild.nodeType> == <Number>3</Number></Boolean> &amp;&amp; !<RegExp.test><RegExp>/\S/</RegExp>.<RegExp.test>test</RegExp.test>(<Element.firstChild.nodeValue><Element.firstChild>node</Element.firstChild>.nodeValue</Element.firstChild.nodeValue>)</RegExp.test>)
        <Element.removeChild><Element>element</Element>.<Element.removeChild>removeChild</Element.removeChild>(<Element.firstChild>node</Element.firstChild>)</Element.removeChild>;
      <Element.firstChild.nextSibling>node</Element.firstChild.nextSibling> = <Element.firstChild.nextSibling>nextNode</Element.firstChild.nextSibling>;
    }
    return <Element>element</Element>;
  }</Function>,

  empty: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <Element.innerHTML.match><$>$(<HTMLElement>element</HTMLElement></$>).<Element.innerHTML>innerHTML</Element.innerHTML>.<Element.innerHTML.match>match</Element.innerHTML.match>(<RegExp>/^\s*$/</RegExp>)</Element.innerHTML.match>;
  }</Function>,

  descendantOf: <Function>function(<HTMLElement>element</HTMLElement>, ancestor) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>, <Element>ancestor</Element> = <$>$(<Element>ancestor</Element>)</$>;
    while (<Element.parentNode>element</Element.parentNode> = <Element.parentNode.parentNode><Element.parentNode>element</Element.parentNode>.parentNode</Element.parentNode.parentNode>)
      if (<Boolean><Element>element</Element> == <Element>ancestor</Element></Boolean>) return <Boolean>true</Boolean>;
    return <Boolean>false</Boolean>;
  }</Function>,

  scrollTo: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    var <Array>pos = <Position.cumulativeOffset>Position.<Array>cumulativeOffset</Array>(<Element>element</Element>)</Position.cumulativeOffset></Array>;
    <Window.scrollTo><Window>window</Window>.<Window.scrollTo>scrollTo</Window.scrollTo>(<Array>pos</Array>[<Number>0</Number>], <Array>pos</Array>[<Number>1</Number>])</Window.scrollTo>;
    return <Element>element</Element>;
  }</Function>,

  getStyle: <Function>function(<HTMLElement>element</HTMLElement>, <Style>style</Style>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (<Array.include>[<Array><String>'float'</String>,<String>'cssFloat'</String></Array>].<Array.include>include</Array.include>(<Style>style</Style>)</Array.include>)
      <Style>style</Style> = (typeof <Boolean><Element.style.styleFloat><Element>element</Element>.<Element.style>style</Element.style>.styleFloat</Element.style.styleFloat> != <String>'undefined'</String></Boolean> ? <String>'styleFloat'</String> : <String>'cssFloat'</String>);
    <Style>style</Style> = <Style.camelize><Style>style</Style>.<Style.camelize>camelize</Style.camelize>()</Style.camelize>;
    var value = <Element>element</Element>.<Element.style>style</Element.style>[<Style>style</Style>];
    if (!value) {
      if (<HTMLDocument.defaultView><HTMLDocument>document</HTMLDocument>.defaultView</HTMLDocument.defaultView> &amp;&amp; <HTMLDocument.defaultView.getComputedStyle><HTMLDocument>document</HTMLDocument>.<HTMLDocument.defaultView>defaultView</HTMLDocument.defaultView>.getComputedStyle</HTMLDocument.defaultView.getComputedStyle>) {
        var css = <HTMLDocument.defaultView.getComputedStyle><HTMLDocument>document</HTMLDocument>.<HTMLDocument.defaultView>defaultView</HTMLDocument.defaultView>.<HTMLDocument.defaultView.getComputedStyle>getComputedStyle</HTMLDocument.defaultView.getComputedStyle>(<Element>element</Element>, null)</HTMLDocument.defaultView.getComputedStyle>;
        value = css ? css[<Style>style</Style>] : null;
      } else if (<Element.currentStyle><Element>element</Element>.currentStyle</Element.currentStyle>) {
        value = <Element>element</Element>.<Element.currentStyle>currentStyle</Element.currentStyle>[<Style>style</Style>];
      }
    }

    if((<Boolean>value == <String>'auto'</String>)</Boolean> &amp;&amp; [<Array.include><Array><String>'width'</String>,<String>'height'</String></Array>].<Array.include>include</Array.include>(<Style>style</Style>)</Array.include> &amp;&amp; (<Boolean><Element.getStyle><Element>element</Element>.<Element.getStyle>getStyle</Element.getStyle>(<String>'display'</String>)</Element.getStyle> != <String>'none'</String>)</Boolean>)
      value = <Element>element</Element>[<String>'offset'</String>+<Style.capitalize><Style>style</Style>.<Style.capitalize>capitalize</Style.capitalize>()</Style.capitalize>] + <String>'px'</String>;

    if (<Window.opera><Window>window</Window>.opera</Window.opera> &amp;&amp; [<Array.include><Array><String>'left'</String>, <String>'top'</String>, <String>'right'</String>, <String>'bottom'</String></Array>].<Array.include>include</Array.include>(<Style>style</Style>)</Array.include>)
      if (<Boolean><Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<Element>element</Element>, <String>'position'</String>)</Element.getStyle> == <String>'static'</String></Boolean>) <String>value</String> = <String>'auto'</String>;
    if(<Boolean><Style>style</Style> == <String>'opacity'</String></Boolean>) {
      if(<String>value</String>) return <parseFloat>parseFloat(<String>value</String>)</parseFloat>;
      if(value = (<Element.getStyle><Element>element</Element>.<Element.getStyle>getStyle</Element.getStyle>(<String>'filter'</String>)</Element.getStyle> || <String>''</String>).match(<RegExp>/alpha\(opacity=(.*)\)/</RegExp>))
        if(value[<Number>1</Number>]) return <parseFloat>parseFloat(value[<Number>1</Number>])</parseFloat> / <Number>100</Number>;
      return <Number>1.0</Number>;
    }
    return <Boolean>value == <String>'auto'</String></Boolean> ? null : value;
  }</Function>,

  setStyle: <Function>function(<HTMLElement>element</HTMLElement>, <Style>style</Style>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    for (var name in <Style>style</Style>) {
      var value = <Style>style</Style>[name];
      if(<Boolean>name == <String>'opacity'</String></Boolean>) {
        if (<Boolean>value == <Number>1</Number></Boolean>) {
          value = (<RegExp.test><RegExp>/Gecko/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test> &amp;&amp;
            !<RegExp.test><RegExp>/Konqueror|Safari|KHTML/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>) ? <Number>0.999999</Number> : <Number>1.0</Number>;
          if(<RegExp.test><RegExp>/MSIE/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test> &amp;&amp; !<Window.opera><Window>window</Window>.opera</Window.opera>)
            <Element>element</Element>.<Element.style>style</Element.style>.<String>filter</String> = <Element>element</Element>.<Element.getStyle><Element.getStyle>getStyle</Element.getStyle>(<String>'filter'</String></Element.getStyle>).replace(<RegExp>/alpha\([^\)]*\)/gi</RegExp>,<String>''</String>);
        } else if(<Boolean>value == <String>''</String></Boolean>) {
          if(<RegExp.test><RegExp>/MSIE/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test> &amp;&amp; !<Window.opera><Window>window</Window>.opera</Window.opera>)
            <Element>element</Element>.<Element.style>style</Element.style>.<String>filter</String> = <Element>element</Element>.<Element.getStyle><Element.getStyle>getStyle</Element.getStyle>(<String>'filter'</String></Element.getStyle>).replace(<RegExp>/alpha\([^\)]*\)/gi</RegExp>,<String>''</String>);
        } else {
          if(<Boolean>value &lt; <Number>0.00001</Number></Boolean>) <Number>value</Number> = <Number>0</Number>;
          if(<RegExp.test><RegExp>/MSIE/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test> &amp;&amp; !<Window.opera><Window>window</Window>.opera</Window.opera>)
            <Element>element</Element>.<Element.style>style</Element.style>.<String>filter</String> = <Element>element</Element>.<Element.getStyle><Element.getStyle>getStyle</Element.getStyle>(<String>'filter'</String></Element.getStyle>).replace(<RegExp>/alpha\([^\)]*\)/gi</RegExp>,<String>''</String>) +
              <String>'alpha(opacity='</String>+<Number>value</Number>*<Number>100</Number>+<String>')'</String>;
        }
      } else if(<Array.include>[<Array><String>'float'</String>,<String>'cssFloat'</String></Array>].<Array.include>include</Array.include>(name)</Array.include>) name = (typeof <Boolean><Element.style.styleFloat><Element>element</Element>.<Element.style>style</Element.style>.styleFloat</Element.style.styleFloat> != <String>'undefined'</String>)</Boolean> ? <String>'styleFloat'</String> : <String>'cssFloat'</String>;
      <Element>element</Element>.<Element.style>style</Element.style>[<name.camelize>name.<name.camelize>camelize</name.camelize>()</name.camelize>] = <Number>value</Number>;
    }
    return <Element>element</Element>;
  }</Function>,

  getDimensions: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    var display = <Element.getStyle><$>$(<Element>element</Element></$>).<Element.getStyle>getStyle</Element.getStyle>(<String>'display'</String>)</Element.getStyle>;
    if (<Boolean>display != <String>'none'</String></Boolean> &amp;&amp; <Boolean>display != null</Boolean>) // Safari bug
      return {width: <Element.offsetWidth><Element>element</Element>.offsetWidth</Element.offsetWidth>, height: <Element.offsetHeight><Element>element</Element>.offsetHeight</Element.offsetHeight>};

    // All *Width and *Height properties give 0 on elements with display none,
    // so enable the element temporarily
    var <Element.style>els = <Element.style><Element>element</Element>.style</Element.style></Element.style>;
    var <Element.style.visibility>originalVisibility = <Element.style.visibility><Element.style>els</Element.style>.visibility</Element.style.visibility></Element.style.visibility>;
    var <Element.style.position>originalPosition = <Element.style.position><Element.style>els</Element.style>.position</Element.style.position></Element.style.position>;
    var <Element.style.display>originalDisplay = <Element.style.display><Element.style>els</Element.style>.display</Element.style.display></Element.style.display>;
    <Element.style>els</Element.style>.<String>visibility</String> = <String>'hidden'</String>;
    <Element.style>els</Element.style>.<String>position</String> = <String>'absolute'</String>;
    <Element.style>els</Element.style>.<String>display</String> = <String>'block'</String>;
    var <Element.clientWidth>originalWidth = <Element.clientWidth><Element>element</Element>.clientWidth</Element.clientWidth></Element.clientWidth>;
    var <Element.clientHeight>originalHeight = <Element.clientHeight><Element>element</Element>.clientHeight</Element.clientHeight></Element.clientHeight>;
    <Element.style>els</Element.style>.<String>display</String> = <Element.style.display>originalDisplay</Element.style.display>;
    <Element.style>els</Element.style>.<String>position</String> = <Element.style.position>originalPosition</Element.style.position>;
    <Element.style>els</Element.style>.<String>visibility</String> = <Element.style.visibility>originalVisibility</Element.style.visibility>;
    return {width: <Element.clientWidth>originalWidth</Element.clientWidth>, height: <Element.clientHeight>originalHeight</Element.clientHeight>};
  }</Function>,

  makePositioned: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    var pos = <Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<Element>element</Element>, <String>'position'</String>)</Element.getStyle>;
    if (<Boolean>pos == <String>'static'</String></Boolean> || !pos) {
      <Element>element</Element>.<String>_madePositioned</String> = <Boolean>true</Boolean>;
      <Element>element</Element>.<Element.style>style</Element.style>.<String>position</String> = <String>'relative'</String>;
      // Opera returns the offset relative to the positioning context, when an
      // element is position relative but top and left have not been defined
      if (<Window.opera><Window>window</Window>.opera</Window.opera>) {
        <Element>element</Element>.<Element.style>style</Element.style>.<String>top</String> = <Number>0</Number>;
        <Element>element</Element>.<Element.style>style</Element.style>.<String>left</String> = <Number>0</Number>;
      }
    }
    return <Element>element</Element>;
  }</Function>,

  undoPositioned: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (<Element._madePositioned><Element>element</Element>._madePositioned</Element._madePositioned>) {
      <Element>element</Element>.<String>_madePositioned</String> = undefined;
      <Element>element</Element>.<Element.style>style</Element.style>.<String>position</String> =
        <Element>element</Element>.<Element.style>style</Element.style>.<String>top</String> =
        <Element>element</Element>.<Element.style>style</Element.style>.<String>left</String> =
        <Element>element</Element>.<Element.style>style</Element.style>.<String>bottom</String> =
        <Element>element</Element>.<Element.style>style</Element.style>.<String>right</String> = <String>''</String>;
    }
    return <Element>element</Element>;
  }</Function>,

  makeClipping: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (<Element._overflow><Element>element</Element>._overflow</Element._overflow>) return <Element>element</Element>;
    <Element>element</Element>.<String>_overflow</String> = <Element.style.overflow><Element>element</Element>.<Element.style>style</Element.style>.overflow</Element.style.overflow> || <String>'auto'</String>;
    if (<Boolean>(<Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<Element>element</Element>, <String>'overflow'</String>)</Element.getStyle> || <String>'visible'</String>) != <String>'hidden'</String></Boolean>)
      <Element>element</Element>.<Element.style>style</Element.style>.<String>overflow</String> = <String>'hidden'</String>;
    return <Element>element</Element>;
  }</Function>,

  undoClipping: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (!<Element._overflow><Element>element</Element>._overflow</Element._overflow>) return <Element>element</Element>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>overflow</String> = <Boolean><Element._overflow><Element>element</Element>._overflow</Element._overflow> == <String>'auto'</String></Boolean> ? <String>''</String> : <Element._overflow><Element>element</Element>._overflow</Element._overflow>;
    <Element>element</Element>.<String>_overflow</String> = null;
    return <Element>element</Element>;
  }</Function>
};

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Element.Methods><Object>Element</Object>.Methods</Element.Methods>, {childOf: <Element.Methods.descendantOf><Object>Element</Object>.<Element.Methods>Methods</Element.Methods>.descendantOf</Element.Methods.descendantOf>})</Object.extend>;

<Object>Element</Object>.<String>_attributeTranslations</String> = {};

<Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.<String>names</String> = {
  colspan:   <String>"colSpan"</String>,
  rowspan:   <String>"rowSpan"</String>,
  valign:    <String>"vAlign"</String>,
  datetime:  <String>"dateTime"</String>,
  accesskey: <String>"accessKey"</String>,
  tabindex:  <String>"tabIndex"</String>,
  enctype:   <String>"encType"</String>,
  maxlength: <String>"maxLength"</String>,
  readonly:  <String>"readOnly"</String>,
  longdesc:  <String>"longDesc"</String>
};

<Object>Element</Object>.<Object._attributeTranslations>_attributeTranslations</Object._attributeTranslations>.<String>values</String> = {
  _getAttr: <Function>function(<HTMLElement>element</HTMLElement>, attribute) {
    return <HTMLElement.getAttribute><HTMLElement>element</HTMLElement>.<HTMLElement.getAttribute>getAttribute</HTMLElement.getAttribute>(attribute, <Number>2</Number>)</HTMLElement.getAttribute>;
  }</Function>,

  _flag: <Function>function(<HTMLElement>element</HTMLElement>, attribute) {
    return <Element.hasAttribute><$>$(<HTMLElement>element</HTMLElement></$>).<Element.hasAttribute>hasAttribute</Element.hasAttribute>(attribute)</Element.hasAttribute> ? attribute : null;
  }</Function>,

  <Style>style</Style>: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <HTMLElement.style.cssText.toLowerCase><HTMLElement>element</HTMLElement>.<HTMLElement.style>style</HTMLElement.style>.<HTMLElement.style.cssText>cssText</HTMLElement.style.cssText>.<HTMLElement.style.cssText.toLowerCase>toLowerCase</HTMLElement.style.cssText.toLowerCase>()</HTMLElement.style.cssText.toLowerCase>;
  }</Function>,

  title: <Function>function(<HTMLElement>element</HTMLElement>) {
    var node = <HTMLElement.getAttributeNode><HTMLElement>element</HTMLElement>.<HTMLElement.getAttributeNode>getAttributeNode</HTMLElement.getAttributeNode>(<String>'title'</String>)</HTMLElement.getAttributeNode>;
    return <node.specified>node.specified</node.specified> ? <node.nodeValue>node.nodeValue</node.nodeValue> : null;
  }</Function>
};

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Element._attributeTranslations.values><Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.values</Element._attributeTranslations.values>, {
  href: <Element._attributeTranslations.values._getAttr><Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>._getAttr</Element._attributeTranslations.values._getAttr>,
  src:  <Element._attributeTranslations.values._getAttr><Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>._getAttr</Element._attributeTranslations.values._getAttr>,
  disabled: <Element._attributeTranslations.values._flag><Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>._flag</Element._attributeTranslations.values._flag>,
  checked:  <Element._attributeTranslations.values._flag><Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>._flag</Element._attributeTranslations.values._flag>,
  readonly: <Element._attributeTranslations.values._flag><Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>._flag</Element._attributeTranslations.values._flag>,
  multiple: <Element._attributeTranslations.values._flag><Object>Element</Object>.<Element._attributeTranslations>_attributeTranslations</Element._attributeTranslations>.<Element._attributeTranslations.values>values</Element._attributeTranslations.values>._flag</Element._attributeTranslations.values._flag>
})</Object.extend>;

<Object>Element</Object>.<Object.Methods>Methods</Object.Methods>.<String>Simulated</String> = {
  hasAttribute: <Function>function(<HTMLElement>element</HTMLElement>, attribute) {
    var <Element._attributeTranslations>t = <Element._attributeTranslations>Element._attributeTranslations</Element._attributeTranslations></Element._attributeTranslations>;
    attribute = <Element._attributeTranslations>t</Element._attributeTranslations>.<Element._attributeTranslations.names>names</Element._attributeTranslations.names>[attribute] || attribute;
    return <$>$(<HTMLElement>element</HTMLElement></$>).<Element.getAttributeNode><Element.getAttributeNode>getAttributeNode</Element.getAttributeNode>(attribute</Element.getAttributeNode>).specified;
  }</Function>
};

// IE is missing .innerHTML support for TABLE-related elements
if (<HTMLDocument.all><HTMLDocument>document</HTMLDocument>.all</HTMLDocument.all> &amp;&amp; !<Window.opera><Window>window</Window>.opera</Window.opera>){
  <Object>Element</Object>.<Object.Methods>Methods</Object.Methods>.<String>update</String> = <Function>function(<HTMLElement>element</HTMLElement>, html) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    html = typeof <Boolean>html == <String>'undefined'</String></Boolean> ? <String>''</String> : <html.toString>html.<html.toString>toString</html.toString>()</html.toString>;
    var tagName = <Element.tagName.toUpperCase><Element>element</Element>.<Element.tagName>tagName</Element.tagName>.<Element.tagName.toUpperCase>toUpperCase</Element.tagName.toUpperCase>()</Element.tagName.toUpperCase>;
    if (<Array.include>[<Array><String>'THEAD'</String>,<String>'TBODY'</String>,<String>'TR'</String>,<String>'TD'</String></Array>].<Array.include>include</Array.include>(tagName)</Array.include>) {
      var div = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>'div'</String>)</HTMLDocument.createElement>;
      switch (tagName) {
        case <String>'THEAD'</String>:
        case <String>'TBODY'</String>:
          div.<String>innerHTML</String> = <String>'&lt;table&gt;&lt;tbody&gt;'</String> +  <html.stripScripts>html.<html.stripScripts>stripScripts</html.stripScripts>()</html.stripScripts> + <String>'&lt;/tbody&gt;&lt;/table&gt;'</String>;
          <Number>depth</Number> = <Number>2</Number>;
          break;
        case <String>'TR'</String>:
          div.<String>innerHTML</String> = <String>'&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;'</String> +  <html.stripScripts>html.<html.stripScripts>stripScripts</html.stripScripts>()</html.stripScripts> + <String>'&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</String>;
          <Number>depth</Number> = <Number>3</Number>;
          break;
        case <String>'TD'</String>:
          div.<String>innerHTML</String> = <String>'&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;'</String> +  <html.stripScripts>html.<html.stripScripts>stripScripts</html.stripScripts>()</html.stripScripts> + <String>'&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;'</String>;
          <Number>depth</Number> = <Number>4</Number>;
      }
      <$A>$A(<Element.childNodes><Element>element</Element>.childNodes</Element.childNodes></$A>).each(<Function>function(node){
        <HTMLElement.removeChild><HTMLElement>element</HTMLElement>.<HTMLElement.removeChild>removeChild</HTMLElement.removeChild>(node)</HTMLElement.removeChild>
      }</Function>);
      <Number.times><Number>depth</Number>.<Number.times>times</Number.times>(<Function>function(){ <div.firstChild>div</div.firstChild> = <div.firstChild.firstChild><div.firstChild>div</div.firstChild>.firstChild</div.firstChild.firstChild> }</Function>)</Number.times>;

      <$A>$A(<div.firstChild.childNodes><div.firstChild>div</div.firstChild>.childNodes</div.firstChild.childNodes></$A>).each(
        <Function>function(node){ <HTMLElement.appendChild><HTMLElement>element</HTMLElement>.<HTMLElement.appendChild>appendChild</HTMLElement.appendChild>(node)</HTMLElement.appendChild> }</Function>);
    } else {
      <Element>element</Element>.<String>innerHTML</String> = <html.stripScripts>html.<html.stripScripts>stripScripts</html.stripScripts>()</html.stripScripts>;
    }
    <setTimeout>setTimeout(<Function>function() {<html.evalScripts>html.<html.evalScripts>evalScripts</html.evalScripts>()</html.evalScripts>}</Function>, <Number>10</Number>)</setTimeout>;
    return <Element>element</Element>;
  }</Function>
};

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Object>Element</Object>, <Object.Methods><Object>Element</Object>.Methods</Object.Methods>)</Object.extend>;

var <Boolean>_nativeExtensions = <Boolean>false</Boolean></Boolean>;

if(<RegExp.test><RegExp>/Konqueror|Safari|KHTML/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>)
  [<Array.each><Array><String>''</String>, <String>'Form'</String>, <String>'Input'</String>, <String>'TextArea'</String>, <String>'Select'</String></Array>].<Array.each>each</Array.each>(<Function>function(tag) {
    var className = <String>'HTML'</String> + tag + <String>'Element'</String>;
    if(<Window>window</Window>[className]) return;
    var klass = <Window>window</Window>[className] = {};
    klass.<String>prototype</String> = <HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement><HTMLDocument.createElement>createElement</HTMLDocument.createElement>(tag ? <tag.toLowerCase>tag.<tag.toLowerCase>toLowerCase</tag.toLowerCase>()</tag.toLowerCase> : <String>'div'</String></HTMLDocument.createElement>).__proto__;
  }</Function>)</Array.each>;

<Object>Element</Object>.<String>addMethods</String> = <Function>function(methods) {
  <Object.extend>Object.<Object.extend>extend</Object.extend>(<Element.Methods>Element.Methods</Element.Methods>, methods || {})</Object.extend>;

  <Function>function <void>copy</void>(methods, destination, onlyIfAbsent) {
    onlyIfAbsent = onlyIfAbsent || <Boolean>false</Boolean>;
    var <Element.extend.cache>cache = <Element.extend.cache>Element.<Element.extend>extend</Element.extend>.cache</Element.extend.cache></Element.extend.cache>;
    for (var property in methods) {
      var value = methods[property];
      if (!onlyIfAbsent || !(property in destination))
        destination[property] = <Element.extend.cache.findOrStore><Element.extend.cache>cache</Element.extend.cache>.<Element.extend.cache.findOrStore>findOrStore</Element.extend.cache.findOrStore>(value)</Element.extend.cache.findOrStore>;
    }
  }</Function>

  if (<Boolean>typeof HTMLElement != <String>'undefined'</String></Boolean>) {
    <copy><void>copy</void>(<Element.Methods>Element.Methods</Element.Methods>, <HTMLElement.prototype>HTMLElement.prototype</HTMLElement.prototype>)</copy>;
    <copy><void>copy</void>(<Element.Methods.Simulated>Element.<Element.Methods>Methods</Element.Methods>.Simulated</Element.Methods.Simulated>, <HTMLElement.prototype>HTMLElement.prototype</HTMLElement.prototype>, <Boolean>true</Boolean>)</copy>;
    <copy><void>copy</void>(<Form.Methods>Form.Methods</Form.Methods>, <HTMLFormElement.prototype>HTMLFormElement.prototype</HTMLFormElement.prototype>)</copy>;
    [<Array.each><Array>HTMLInputElement, HTMLTextAreaElement, HTMLSelectElement</Array>].<Array.each>each</Array.each>(<Function>function(klass) {
      <copy><void>copy</void>(<Form.Element.Methods>Form.<Form.Element>Element</Form.Element>.Methods</Form.Element.Methods>, <klass.prototype>klass.prototype</klass.prototype>)</copy>;
    }</Function>)</Array.each>;
    <Boolean>_nativeExtensions</Boolean> = <Boolean>true</Boolean>;
  }
}</Function>

var <Object>Toggle = <Object>new Object()</Object></Object>;
<Object>Toggle</Object>.<String>display</String> = <Object.toggle><Object>Element</Object>.toggle</Object.toggle>;

/*--------------------------------------------------------------------------*/

<Object>Abstract</Object>.<String>Insertion</String> = <Function>function(adjacency) {
  this.<String>adjacency</String> = adjacency;
}</Function>

<Object>Abstract</Object>.<Object.Insertion>Insertion</Object.Insertion>.<String>prototype</String> = {
  initialize: <Function>function(<HTMLElement>element</HTMLElement>, content) {
    this.<String>element</String> = <$>$(<HTMLElement>element</HTMLElement>)</$>;
    this.<String>content</String> = <content.stripScripts>content.<content.stripScripts>stripScripts</content.stripScripts>()</content.stripScripts>;

    if (this.adjacency &amp;&amp; this.element.insertAdjacentHTML) {
      try {
        this.element.insertAdjacentHTML(this.adjacency, this.content);
      } catch (e) {
        var tagName = this.element.tagName.toUpperCase();
        if (<Array.include>[<Array><String>'TBODY'</String>, <String>'TR'</String></Array>].<Array.include>include</Array.include>(tagName)</Array.include>) {
          this.insertContent(this.contentFromAnonymousTable());
        } else {
          throw e;
        }
      }
    } else {
      this.<String>range</String> = this.element.ownerDocument.createRange();
      if (this.initializeRange) this.initializeRange();
      this.insertContent([<Array>this.range.createContextualFragment(this.content)]</Array>);
    }

    <setTimeout>setTimeout(<Function>function() {<content.evalScripts>content.<content.evalScripts>evalScripts</content.evalScripts>()</content.evalScripts>}</Function>, <Number>10</Number>)</setTimeout>;
  }</Function>,

  contentFromAnonymousTable: <Function>function() {
    var div = <HTMLDocument.createElement><HTMLDocument>document</HTMLDocument>.<HTMLDocument.createElement>createElement</HTMLDocument.createElement>(<String>'div'</String>)</HTMLDocument.createElement>;
    div.<String>innerHTML</String> = <String>'&lt;table&gt;&lt;tbody&gt;'</String> + this.content + <String>'&lt;/tbody&gt;&lt;/table&gt;'</String>;
    return <$A>$A(div.<div.childNodes>childNodes</div.childNodes>[<Number>0</Number>].childNodes[<Number>0</Number>].childNodes)</$A>;
  }</Function>
}

var <Object>Insertion = <Object>new Object()</Object></Object>;

<Object>Insertion</Object>.<String>Before</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
<Object>Insertion</Object>.<Object.Before>Before</Object.Before>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Object.Insertion>new <Object.Insertion><Object>Abstract</Object>.Insertion</Object.Insertion>(<String>'beforeBegin'</String>)</Object.Insertion>, {
  initializeRange: <Function>function() {
    this.range.setStartBefore(this.element);
  }</Function>,

  insertContent: <Function>function(fragments) {
    <fragments.each>fragments.<fragments.each>each</fragments.each>((<Function.bind><Function>function(fragment) {
      this.element.parentNode.insertBefore(fragment, this.element);
    }</Function>).<Function>bind</Function>(this)</Function.bind>)</fragments.each>;
  }</Function>
})</Object.extend>;

<Object>Insertion</Object>.<String>Top</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
<Object>Insertion</Object>.<Object.Top>Top</Object.Top>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Object.Insertion>new <Object.Insertion><Object>Abstract</Object>.Insertion</Object.Insertion>(<String>'afterBegin'</String>)</Object.Insertion>, {
  initializeRange: <Function>function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(<Boolean>true</Boolean>);
  }</Function>,

  insertContent: <Function>function(fragments) {
    fragments.<fragments.reverse><fragments.reverse>reverse</fragments.reverse>(<Boolean>false</Boolean></fragments.reverse>).each((<Function.bind><Function>function(fragment) {
      this.element.insertBefore(fragment, this.element.firstChild);
    }</Function>).<Function>bind</Function>(this)</Function.bind>);
  }</Function>
})</Object.extend>;

<Object>Insertion</Object>.<String>Bottom</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
<Object>Insertion</Object>.<Object.Bottom>Bottom</Object.Bottom>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Object.Insertion>new <Object.Insertion><Object>Abstract</Object>.Insertion</Object.Insertion>(<String>'beforeEnd'</String>)</Object.Insertion>, {
  initializeRange: <Function>function() {
    this.range.selectNodeContents(this.element);
    this.range.collapse(this.element);
  }</Function>,

  insertContent: <Function>function(fragments) {
    <fragments.each>fragments.<fragments.each>each</fragments.each>((<Function.bind><Function>function(fragment) {
      this.element.appendChild(fragment);
    }</Function>).<Function>bind</Function>(this)</Function.bind>)</fragments.each>;
  }</Function>
})</Object.extend>;

<Object>Insertion</Object>.<String>After</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
<Object>Insertion</Object>.<Object.After>After</Object.After>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Object.Insertion>new <Object.Insertion><Object>Abstract</Object>.Insertion</Object.Insertion>(<String>'afterEnd'</String>)</Object.Insertion>, {
  initializeRange: <Function>function() {
    this.range.setStartAfter(this.element);
  }</Function>,

  insertContent: <Function>function(fragments) {
    <fragments.each>fragments.<fragments.each>each</fragments.each>((<Function.bind><Function>function(fragment) {
      this.element.parentNode.insertBefore(fragment,
        this.element.nextSibling);
    }</Function>).<Function>bind</Function>(this)</Function.bind>)</fragments.each>;
  }</Function>
})</Object.extend>;

/*--------------------------------------------------------------------------*/

<Object>Element</Object>.<String>ClassNames</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
<Object>Element</Object>.<Object.ClassNames>ClassNames</Object.ClassNames>.<String>prototype</String> = {
  initialize: <Function>function(<HTMLElement>element</HTMLElement>) {
    this.<String>element</String> = <$>$(<HTMLElement>element</HTMLElement>)</$>;
  }</Function>,

  _each: <Function>function(iterator) {
    this.element.className.split(<RegExp>/\s+/</RegExp>).select(<Function>function(name) {
      return <Boolean><name.length>name.length</name.length> &gt; <Number>0</Number></Boolean>;
    }</Function>)._each(iterator);
  }</Function>,

  set: <Function>function(className) {
    this.element.<String>className</String> = className;
  }</Function>,

  add: <Function>function(classNameToAdd) {
    if (this.include(classNameToAdd)) return;
    this.set(<$A>$A(this</$A>).concat(classNameToAdd).join(<String>' '</String>));
  }</Function>,

  remove: <Function>function(classNameToRemove) {
    if (!this.include(classNameToRemove)) return;
    this.set(<$A>$A(this</$A>).without(classNameToRemove).join(<String>' '</String>));
  }</Function>,

  toString: <Function>function() {
    return <$A>$A(this</$A>).join(<String>' '</String>);
  }</Function>
};

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Object.ClassNames.prototype><Object>Element</Object>.<Object.ClassNames>ClassNames</Object.ClassNames>.prototype</Object.ClassNames.prototype>, Enumerable)</Object.extend>;
var <Function>Selector = <Class.create>Class.<Function>create</Function>()</Class.create></Function>;
<Function>Selector</Function>.<String>prototype</String> = {
  initialize: <Function>function(expression) {
    this.<String>params</String> = {classNames: <Array>[]</Array>};
    this.<String>expression</String> = expression.<expression.toString><expression.toString>toString</expression.toString></expression.toString>().strip();
    this.parseExpression();
    this.compileMatcher();
  }</Function>,

  parseExpression: <Function>function() {
    <Function>function <void>abort</void>(message) { throw <String>'Parse error in selector: '</String> + message; }</Function>

    if (<Boolean>this.expression == <String>''</String></Boolean>)  <abort><void>abort</void>(<String>'empty expression'</String>)</abort>;

    var params = this.params, expr = this.expression, match, modifier, clause, rest;
    while (match = <expr.match>expr.<expr.match>match</expr.match>(<RegExp>/^(.*)\[([a-z0-9_:-]+?)(?:([~\|!]?=)(?:"([^"]*)"|([^\]\s]*)))?\]$/i</RegExp>)</expr.match>) {
      params.<String>attributes</String> = <params.attributes>params.attributes</params.attributes> || <Array>[]</Array>;
      <params.attributes.push>params.<params.attributes>attributes</params.attributes>.<params.attributes.push>push</params.attributes.push>({name: match[<Number>2</Number>], operator: match[<Number>3</Number>], value: match[<Number>4</Number>] || match[<Number>5</Number>] || <String>''</String>})</params.attributes.push>;
      expr = match[<Number>1</Number>];
    }

    if (<Boolean>expr == <String>'*'</String></Boolean>) return this.params.<String>wildcard</String> = <Boolean>true</Boolean>;

    while (match = <expr.match>expr.<expr.match>match</expr.match>(<RegExp>/^([^a-z0-9_-])?([a-z0-9_-]+)(.*)/i</RegExp>)</expr.match>) {
      modifier = match[<Number>1</Number>], clause = match[<Number>2</Number>], rest = match[<Number>3</Number>];
      switch (modifier) {
        case <String>'#'</String>:       params.<String>id</String> = clause; break;
        case <String>'.'</String>:       <Array.push>params.<Array>classNames</Array>.<Array.push>push</Array.push>(clause)</Array.push>; break;
        case <String>''</String>:
        case undefined: params.<String>tagName</String> = <clause.toUpperCase>clause.<clause.toUpperCase>toUpperCase</clause.toUpperCase>()</clause.toUpperCase>; break;
        default:        <abort><void>abort</void>(<expr.inspect>expr.<expr.inspect>inspect</expr.inspect>()</expr.inspect>)</abort>;
      }
      expr = rest;
    }

    if (<Boolean><expr.length>expr.length</expr.length> &gt; <Number>0</Number></Boolean>) <abort><void>abort</void>(<expr.inspect>expr.<expr.inspect>inspect</expr.inspect>()</expr.inspect>)</abort>;
  }</Function>,

  buildMatchExpression: <Function>function() {
    var params = this.params, conditions = <Array>[]</Array>, clause;

    if (<params.wildcard>params.wildcard</params.wildcard>)
      <conditions.push>conditions.<conditions.push>push</conditions.push>(<String>'true'</String>)</conditions.push>;
    if (<params.id>clause</params.id> = <params.id>params.id</params.id>)
      <conditions.push>conditions.<conditions.push>push</conditions.push>(<String>'element.readAttribute("id") == '</String> + <params.id.inspect><params.id>clause</params.id>.<params.id.inspect>inspect</params.id.inspect>()</params.id.inspect>)</conditions.push>;
    if (<params.tagName>clause</params.tagName> = <params.tagName>params.tagName</params.tagName>)
      <conditions.push>conditions.<conditions.push>push</conditions.push>(<String>'element.tagName.toUpperCase() == '</String> + <params.tagName.inspect><params.tagName>clause</params.tagName>.<params.tagName.inspect>inspect</params.tagName.inspect>()</params.tagName.inspect>)</conditions.push>;
    if (<Boolean>(<Array>clause</Array> = <Array>params.classNames</Array>).length &gt; <Number>0</Number></Boolean>)
      for (var <Number>i = <Number>0</Number></Number>, length = <Array.length><Array>clause</Array>.length</Array.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++)
        <conditions.push>conditions.<conditions.push>push</conditions.push>(<String>'element.hasClassName('</String> + <Array>clause</Array>[<Number>i</Number>].inspect() + <String>')'</String>)</conditions.push>;
    if (<params.attributes>clause</params.attributes> = <params.attributes>params.attributes</params.attributes>) {
      <params.attributes.each><params.attributes>clause</params.attributes>.<params.attributes.each>each</params.attributes.each>(<Function>function(attribute) {
        var value = <String>'element.readAttribute('</String> + <attribute.name.inspect>attribute.<attribute.name>name</attribute.name>.<attribute.name.inspect>inspect</attribute.name.inspect>()</attribute.name.inspect> + <String>')'</String>;
        var <Function>splitValueBy = <Function>function(delimiter) {
          return value + <String>' &amp;&amp; '</String> + value + <String>'.split('</String> + <delimiter.inspect>delimiter.<delimiter.inspect>inspect</delimiter.inspect>()</delimiter.inspect> + <String>')'</String>;
        }</Function></Function>

        switch (<attribute.operator>attribute.operator</attribute.operator>) {
          case <String>'='</String>:       <conditions.push>conditions.<conditions.push>push</conditions.push>(value + <String>' == '</String> + <attribute.value.inspect>attribute.<attribute.value>value</attribute.value>.<attribute.value.inspect>inspect</attribute.value.inspect>()</attribute.value.inspect>)</conditions.push>; break;
          case <String>'~='</String>:      <conditions.push>conditions.<conditions.push>push</conditions.push>(<splitValueBy><Function>splitValueBy</Function>(<String>' '</String>)</splitValueBy> + <String>'.include('</String> + <attribute.value.inspect>attribute.<attribute.value>value</attribute.value>.<attribute.value.inspect>inspect</attribute.value.inspect>()</attribute.value.inspect> + <String>')'</String>)</conditions.push>; break;
          case <String>'|='</String>:      <conditions.push>conditions.<conditions.push>push</conditions.push>(
                            <splitValueBy><Function>splitValueBy</Function>(<String>'-'</String>)</splitValueBy> + <String>'.first().toUpperCase() == '</String> + attribute.<attribute.value>value</attribute.value>.<attribute.value.toUpperCase><attribute.value.toUpperCase>toUpperCase</attribute.value.toUpperCase></attribute.value.toUpperCase>().inspect()
                          )</conditions.push>; break;
          case <String>'!='</String>:      <conditions.push>conditions.<conditions.push>push</conditions.push>(value + <String>' != '</String> + <attribute.value.inspect>attribute.<attribute.value>value</attribute.value>.<attribute.value.inspect>inspect</attribute.value.inspect>()</attribute.value.inspect>)</conditions.push>; break;
          case <String>''</String>:
          case undefined: <conditions.push>conditions.<conditions.push>push</conditions.push>(<String>'element.hasAttribute('</String> + <attribute.name.inspect>attribute.<attribute.name>name</attribute.name>.<attribute.name.inspect>inspect</attribute.name.inspect>()</attribute.name.inspect> + <String>')'</String>)</conditions.push>; break;
          default:        throw <String>'Unknown operator '</String> + <attribute.operator>attribute.operator</attribute.operator> + <String>' in selector'</String>;
        }
      }</Function>)</params.attributes.each>;
    }

    return <conditions.join>conditions.<conditions.join>join</conditions.join>(<String>' &amp;&amp; '</String>)</conditions.join>;
  }</Function>,

  compileMatcher: <Function>function() {
    this.<String>match</String> = <Function>new Function(<String>'element'</String>, <String>'if (!element.tagName) return false; \
      element = $(element); \
      return '</String> + this.buildMatchExpression())</Function>;
  }</Function>,

  findElements: <Function>function(scope) {
    var <HTMLElement>element</HTMLElement>;

    if (<Element>element</Element> = <$>$(this.params.id)</$>)
      if (this.match(<Element>element</Element>))
        if (!scope || <Element.childOf>Element.<Element.childOf>childOf</Element.childOf>(<Element>element</Element>, scope)</Element.childOf>)
          return [<Array><Element>element</Element>]</Array>;

    scope = (scope || <HTMLDocument>document</HTMLDocument>).getElementsByTagName(this.params.tagName || <String>'*'</String>);

    var <Array>results = <Array>[]</Array></Array>;
    for (var <Number>i = <Number>0</Number></Number>, length = <scope.length>scope.length</scope.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++)
      if (this.match(<HTMLElement>element</HTMLElement> = scope[<Number>i</Number>]))
        <Array.push><Array>results</Array>.<Array.push>push</Array.push>(<Element.extend>Element.<Element.extend>extend</Element.extend>(<HTMLElement>element</HTMLElement>)</Element.extend>)</Array.push>;

    return <Array>results</Array>;
  }</Function>,

  toString: <Function>function() {
    return this.expression;
  }</Function>
}

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Function>Selector</Function>, {
  matchElements: <Function>function(elements, expression) {
    var <Selector>selector = <Selector>new Selector(expression)</Selector></Selector>;
    return elements.<elements.select><elements.select>select</elements.select>(<Selector.match.bind><Selector>selector</Selector>.<Selector.match>match</Selector.match>.<Selector.match.bind>bind</Selector.match.bind>(<Selector>selector</Selector>)</Selector.match.bind></elements.select>).map(<Element.extend>Element.extend</Element.extend>);
  }</Function>,

  findElement: <Function>function(elements, expression, index) {
    if (<Boolean>typeof expression == <String>'number'</String></Boolean>) index = expression, <Boolean>expression</Boolean> = <Boolean>false</Boolean>;
    return Selector.<Selector.matchElements><Selector.matchElements>matchElements</Selector.matchElements>(elements, <Boolean>expression</Boolean> || <String>'*'</String></Selector.matchElements>)[index || <Number>0</Number>];
  }</Function>,

  findChildElements: <Function>function(<HTMLElement>element</HTMLElement>, expressions) {
    return expressions.<expressions.map><expressions.map>map</expressions.map>(<Function>function(expression) {
      return expression.<expression.match><expression.match>match</expression.match>(<RegExp>/[^\s"]+(?:"[^"]*"[^\s"]+)*/g</RegExp></expression.match>).inject([<Array>null]</Array>, <Function>function(results, expr) {
        var <Selector>selector = <Selector>new Selector(expr)</Selector></Selector>;
        return <results.inject>results.<results.inject>inject</results.inject>(<Array>[]</Array>, <Function>function(elements, result) {
          return <elements.concat>elements.<elements.concat>concat</elements.concat>(<selector.findElements>selector.<selector.findElements>findElements</selector.findElements>(result || <HTMLElement>element</HTMLElement>)</selector.findElements>)</elements.concat>;
        }</Function>)</results.inject>;
      }</Function>);
    }</Function></expressions.map>).flatten();
  }</Function>
})</Object.extend>;

<Function>function $$() {
  return <Selector.findChildElements>Selector.<Selector.findChildElements>findChildElements</Selector.findChildElements>(<HTMLDocument>document</HTMLDocument>, <$A>$A(arguments)</$A>)</Selector.findChildElements>;
}</Function>
var Form = {
  reset: <Function>function(form) {
    <Element.reset><$>$(form</$>).<Element.reset>reset</Element.reset>()</Element.reset>;
    return form;
  }</Function>,

  serializeElements: <Function>function(elements, getHash) {
    var data = <elements.inject>elements.<elements.inject>inject</elements.inject>({}, <Function>function(result, <HTMLElement>element</HTMLElement>) {
      if (!<HTMLElement.disabled><HTMLElement>element</HTMLElement>.disabled</HTMLElement.disabled> &amp;&amp; <HTMLElement.name><HTMLElement>element</HTMLElement>.name</HTMLElement.name>) {
        var <HTMLElement.name>key = <HTMLElement.name><HTMLElement>element</HTMLElement>.name</HTMLElement.name></HTMLElement.name>, value = <Element.getValue><$>$(<HTMLElement>element</HTMLElement></$>).<Element.getValue>getValue</Element.getValue>()</Element.getValue>;
        if (<Boolean>value != undefined</Boolean>) {
          if (result[<HTMLElement.name>key</HTMLElement.name>]) {
            if (<Boolean>result[<HTMLElement.name>key</HTMLElement.name>].constructor != Array</Boolean>) result[<HTMLElement.name>key</HTMLElement.name>] = [<Array>result[<HTMLElement.name>key</HTMLElement.name>]]</Array>;
            result[<HTMLElement.name>key</HTMLElement.name>].push(value);
          }
          else result[<HTMLElement.name>key</HTMLElement.name>] = value;
        }
      }
      return result;
    }</Function>)</elements.inject>;

    return getHash ? data : <Hash.toQueryString><Hash>Hash</Hash>.<Hash.toQueryString>toQueryString</Hash.toQueryString>(data)</Hash.toQueryString>;
  }</Function>
};

Form.<String>Methods</String> = {
  serialize: <Function>function(form, getHash) {
    return <Form.serializeElements>Form.<Form.serializeElements>serializeElements</Form.serializeElements>(<Form.getElements>Form.<Form.getElements>getElements</Form.getElements>(form)</Form.getElements>, getHash)</Form.serializeElements>;
  }</Function>,

  getElements: <Function>function(form) {
    return <$A>$A(<Element.getElementsByTagName><$>$(form</$>).<Element.getElementsByTagName>getElementsByTagName</Element.getElementsByTagName>(<String>'*'</String>)</Element.getElementsByTagName></$A>).inject(<Array>[]</Array>,
      <Function>function(elements, child) {
        if (Form.<Form.Element>Element</Form.Element>.<Form.Element.Serializers>Serializers</Form.Element.Serializers>[<child.tagName.toLowerCase>child.<child.tagName>tagName</child.tagName>.<child.tagName.toLowerCase>toLowerCase</child.tagName.toLowerCase>()</child.tagName.toLowerCase>])
          <elements.push>elements.<elements.push>push</elements.push>(<Element.extend>Element.<Element.extend>extend</Element.extend>(child)</Element.extend>)</elements.push>;
        return elements;
      }</Function>
    );
  }</Function>,

  getInputs: <Function>function(form, typeName, name) {
    <Element>form</Element> = <$>$(<Element>form</Element>)</$>;
    var inputs = <Element.getElementsByTagName><Element>form</Element>.<Element.getElementsByTagName>getElementsByTagName</Element.getElementsByTagName>(<String>'input'</String>)</Element.getElementsByTagName>;

    if (!typeName &amp;&amp; !name) return <$A>$A(inputs</$A>).map(<Element.extend>Element.extend</Element.extend>);

    for (var <Number>i = <Number>0</Number></Number>, matchingInputs = <Array>[]</Array>, length = <inputs.length>inputs.length</inputs.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) {
      var input = inputs[<Number>i</Number>];
      if ((typeName &amp;&amp; <Boolean><input.type>input.type</input.type> != typeName</Boolean>) || (name &amp;&amp; <Boolean><input.name>input.name</input.name> != name</Boolean>))
        continue;
      <matchingInputs.push>matchingInputs.<matchingInputs.push>push</matchingInputs.push>(<Element.extend>Element.<Element.extend>extend</Element.extend>(input)</Element.extend>)</matchingInputs.push>;
    }

    return matchingInputs;
  }</Function>,

  disable: <Function>function(form) {
    <Element>form</Element> = <$>$(<Element>form</Element>)</$>;
    <Element>form</Element>.<Element.getElements><Element.getElements>getElements</Element.getElements></Element.getElements>().each(<Function>function(<HTMLElement>element</HTMLElement>) {
      <HTMLElement.blur><HTMLElement>element</HTMLElement>.<HTMLElement.blur>blur</HTMLElement.blur>()</HTMLElement.blur>;
      <HTMLElement>element</HTMLElement>.<String>disabled</String> = <String>'true'</String>;
    }</Function>);
    return <Element>form</Element>;
  }</Function>,

  enable: <Function>function(form) {
    <Element>form</Element> = <$>$(<Element>form</Element>)</$>;
    <Element>form</Element>.<Element.getElements><Element.getElements>getElements</Element.getElements></Element.getElements>().each(<Function>function(<HTMLElement>element</HTMLElement>) {
      <HTMLElement>element</HTMLElement>.<String>disabled</String> = <String>''</String>;
    }</Function>);
    return <Element>form</Element>;
  }</Function>,

  findFirstElement: <Function>function(form) {
    return <$>$(form</$>).<Element.getElements><Element.getElements>getElements</Element.getElements></Element.getElements>().find(<Function>function(<HTMLElement>element</HTMLElement>) {
      return <Boolean><HTMLElement.type><HTMLElement>element</HTMLElement>.type</HTMLElement.type> != <String>'hidden'</String></Boolean> &amp;&amp; !<HTMLElement.disabled><HTMLElement>element</HTMLElement>.disabled</HTMLElement.disabled> &amp;&amp;
        [<Array.include><Array><String>'input'</String>, <String>'select'</String>, <String>'textarea'</String></Array>].<Array.include>include</Array.include>(<HTMLElement.tagName.toLowerCase><HTMLElement>element</HTMLElement>.<HTMLElement.tagName>tagName</HTMLElement.tagName>.<HTMLElement.tagName.toLowerCase>toLowerCase</HTMLElement.tagName.toLowerCase>()</HTMLElement.tagName.toLowerCase>)</Array.include>;
    }</Function>);
  }</Function>,

  focusFirstElement: <Function>function(form) {
    <Element>form</Element> = <$>$(<Element>form</Element>)</$>;
    <Element>form</Element>.<Element.findFirstElement><Element.findFirstElement>findFirstElement</Element.findFirstElement></Element.findFirstElement>().activate();
    return <Element>form</Element>;
  }</Function>
}

<Object.extend>Object.<Object.extend>extend</Object.extend>(Form, <Form.Methods>Form.Methods</Form.Methods>)</Object.extend>;

/*--------------------------------------------------------------------------*/

Form.<String>Element</String> = {
  focus: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element.focus><$>$(<HTMLElement>element</HTMLElement></$>).<Element.focus>focus</Element.focus>()</Element.focus>;
    return <HTMLElement>element</HTMLElement>;
  }</Function>,

  select: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element.select><$>$(<HTMLElement>element</HTMLElement></$>).<Element.select>select</Element.select>()</Element.select>;
    return <HTMLElement>element</HTMLElement>;
  }</Function>
}

Form.<Form.Element>Element</Form.Element>.<String>Methods</String> = {
  serialize: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (!<Element.disabled><Element>element</Element>.disabled</Element.disabled> &amp;&amp; <Element.name><Element>element</Element>.name</Element.name>) {
      var value = <Element.getValue><Element>element</Element>.<Element.getValue>getValue</Element.getValue>()</Element.getValue>;
      if (<Boolean>value != undefined</Boolean>) {
        var pair = {};
        pair[<Element.name><Element>element</Element>.name</Element.name>] = value;
        return <Hash.toQueryString><Hash>Hash</Hash>.<Hash.toQueryString>toQueryString</Hash.toQueryString>(pair)</Hash.toQueryString>;
      }
    }
    return <String>''</String>;
  }</Function>,

  getValue: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    var method = <Element.tagName.toLowerCase><Element>element</Element>.<Element.tagName>tagName</Element.tagName>.<Element.tagName.toLowerCase>toLowerCase</Element.tagName.toLowerCase>()</Element.tagName.toLowerCase>;
    return <element>Form.<Form.Element>Element</Form.Element>.<Form.Element.Serializers>Serializers</Form.Element.Serializers>[method](<Element>element</Element>)</element>;
  }</Function>,

  clear: <Function>function(<HTMLElement>element</HTMLElement>) {
    <$>$(<HTMLElement>element</HTMLElement></$>).<String>value</String> = <String>''</String>;
    return <HTMLElement>element</HTMLElement>;
  }</Function>,

  present: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <Boolean><Element.value><$>$(<HTMLElement>element</HTMLElement></$>).value</Element.value> != <String>''</String></Boolean>;
  }</Function>,

  activate: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    <Element.focus><Element>element</Element>.<Element.focus>focus</Element.focus>()</Element.focus>;
    if (<Element.select><Element>element</Element>.select</Element.select> &amp;&amp; ( <Boolean><Element.tagName.toLowerCase><Element>element</Element>.<Element.tagName>tagName</Element.tagName>.<Element.tagName.toLowerCase>toLowerCase</Element.tagName.toLowerCase>()</Element.tagName.toLowerCase> != <String>'input'</String></Boolean> ||
      ![<Array.include><Array><String>'button'</String>, <String>'reset'</String>, <String>'submit'</String></Array>].<Array.include>include</Array.include>(<Element.type><Element>element</Element>.type</Element.type>)</Array.include> ) )
      <Element.select><Element>element</Element>.<Element.select>select</Element.select>()</Element.select>;
    return <Element>element</Element>;
  }</Function>,

  disable: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    <Element>element</Element>.<String>disabled</String> = <Boolean>true</Boolean>;
    return <Element>element</Element>;
  }</Function>,

  enable: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    <Element.blur><Element>element</Element>.<Element.blur>blur</Element.blur>()</Element.blur>;
    <Element>element</Element>.<String>disabled</String> = <Boolean>false</Boolean>;
    return <Element>element</Element>;
  }</Function>
}

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Form.Element>Form.Element</Form.Element>, <Form.Element.Methods>Form.<Form.Element>Element</Form.Element>.Methods</Form.Element.Methods>)</Object.extend>;
var <Form.Element>Field = <Form.Element>Form.Element</Form.Element></Form.Element>;
var <Form.Element.getValue>$F = <Form.Element.getValue>Form.<Form.Element>Element</Form.Element>.getValue</Form.Element.getValue></Form.Element.getValue>;

/*--------------------------------------------------------------------------*/

Form.<Form.Element>Element</Form.Element>.<String>Serializers</String> = {
  input: <Function>function(<HTMLElement>element</HTMLElement>) {
    switch (<HTMLElement.type.toLowerCase><HTMLElement>element</HTMLElement>.<HTMLElement.type>type</HTMLElement.type>.<HTMLElement.type.toLowerCase>toLowerCase</HTMLElement.type.toLowerCase>()</HTMLElement.type.toLowerCase>) {
      case <String>'checkbox'</String>:
      case <String>'radio'</String>:
        return <Form.Element.Serializers.inputSelector>Form.<Form.Element>Element</Form.Element>.<Form.Element.Serializers>Serializers</Form.Element.Serializers>.<Form.Element.Serializers.inputSelector>inputSelector</Form.Element.Serializers.inputSelector>(<HTMLElement>element</HTMLElement>)</Form.Element.Serializers.inputSelector>;
      default:
        return <Form.Element.Serializers.textarea>Form.<Form.Element>Element</Form.Element>.<Form.Element.Serializers>Serializers</Form.Element.Serializers>.<void>textarea</void>(<HTMLElement>element</HTMLElement>)</Form.Element.Serializers.textarea>;
    }
  }</Function>,

  inputSelector: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <HTMLElement.checked><HTMLElement>element</HTMLElement>.checked</HTMLElement.checked> ? <HTMLElement.value><HTMLElement>element</HTMLElement>.value</HTMLElement.value> : null;
  }</Function>,

  textarea: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <HTMLElement.value><HTMLElement>element</HTMLElement>.value</HTMLElement.value>;
  }</Function>,

  select: <Function>function(<HTMLElement>element</HTMLElement>) {
    return <element>this[<Boolean><HTMLElement.type><HTMLElement>element</HTMLElement>.type</HTMLElement.type> == <String>'select-one'</String></Boolean> ?
      <String>'selectOne'</String> : <String>'selectMany'</String>](<HTMLElement>element</HTMLElement>)</element>;
  }</Function>,

  selectOne: <Function>function(<HTMLElement>element</HTMLElement>) {
    var <HTMLElement.selectedIndex>index = <HTMLElement.selectedIndex><HTMLElement>element</HTMLElement>.selectedIndex</HTMLElement.selectedIndex></HTMLElement.selectedIndex>;
    return <Boolean><HTMLElement.selectedIndex>index</HTMLElement.selectedIndex> &gt;= <Number>0</Number></Boolean> ? this.optionValue(<HTMLElement>element</HTMLElement>.<HTMLElement.options>options</HTMLElement.options>[<HTMLElement.selectedIndex>index</HTMLElement.selectedIndex>]) : null;
  }</Function>,

  selectMany: <Function>function(<HTMLElement>element</HTMLElement>) {
    var values, length = <HTMLElement.length><HTMLElement>element</HTMLElement>.length</HTMLElement.length>;
    if (!length) return null;

    for (var <Number>i = <Number>0</Number></Number>, values = <Array>[]</Array>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) {
      var opt = <HTMLElement>element</HTMLElement>.<HTMLElement.options>options</HTMLElement.options>[<Number>i</Number>];
      if (<opt.selected>opt.selected</opt.selected>) <values.push>values.<values.push>push</values.push>(this.optionValue(opt))</values.push>;
    }
    return values;
  }</Function>,

  optionValue: <Function>function(opt) {
    // extend element because hasAttribute may not be native
    return Element.<Element.extend><Element.extend>extend</Element.extend>(opt</Element.extend>).hasAttribute(<String>'value'</String>) ? <opt.value>opt.value</opt.value> : <opt.text>opt.text</opt.text>;
  }</Function>
}

/*--------------------------------------------------------------------------*/

<Object>Abstract</Object>.<String>TimedObserver</String> = <Function>function() {}</Function>
<Object>Abstract</Object>.<Object.TimedObserver>TimedObserver</Object.TimedObserver>.<String>prototype</String> = {
  initialize: <Function>function(<HTMLElement>element</HTMLElement>, frequency, callback) {
    this.<String>frequency</String> = frequency;
    this.<String>element</String>   = <$>$(<HTMLElement>element</HTMLElement>)</$>;
    this.<String>callback</String>  = callback;

    this.<String>lastValue</String> = this.getValue();
    this.registerCallback();
  }</Function>,

  registerCallback: <Function>function() {
    <setInterval>setInterval(this.onTimerEvent.bind(this), this.frequency * <Number>1000</Number>)</setInterval>;
  }</Function>,

  onTimerEvent: <Function>function() {
    var value = this.getValue();
    var changed = (<Boolean><String>'string'</String> == typeof this.lastValue</Boolean> &amp;&amp; <Boolean><String>'string'</String> == typeof value</Boolean>
      ? <Boolean>this.lastValue != value</Boolean> : <Boolean><String>String(this.lastValue)</String> != <String>String(value)</String></Boolean>);
    if (changed) {
      this.callback(this.element, value);
      this.<String>lastValue</String> = value;
    }
  }</Function>
}

Form.<Form.Element>Element</Form.Element>.<String>Observer</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
Form.<Form.Element>Element</Form.Element>.<Form.Element.Observer>Observer</Form.Element.Observer>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Abstract.TimedObserver>new <Abstract.TimedObserver><Object>Abstract</Object>.TimedObserver</Abstract.TimedObserver>()</Abstract.TimedObserver>, {
  getValue: <Function>function() {
    return <Form.Element.getValue>Form.<Form.Element>Element</Form.Element>.<Form.Element.getValue>getValue</Form.Element.getValue>(this.element)</Form.Element.getValue>;
  }</Function>
})</Object.extend>;

Form.<String>Observer</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
Form.<Form.Observer>Observer</Form.Observer>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Abstract.TimedObserver>new <Abstract.TimedObserver><Object>Abstract</Object>.TimedObserver</Abstract.TimedObserver>()</Abstract.TimedObserver>, {
  getValue: <Function>function() {
    return <Form.serialize>Form.<Form.serialize>serialize</Form.serialize>(this.element)</Form.serialize>;
  }</Function>
})</Object.extend>;

/*--------------------------------------------------------------------------*/

<Object>Abstract</Object>.<String>EventObserver</String> = <Function>function() {}</Function>
<Object>Abstract</Object>.<Object.EventObserver>EventObserver</Object.EventObserver>.<String>prototype</String> = {
  initialize: <Function>function(<HTMLElement>element</HTMLElement>, callback) {
    this.<String>element</String>  = <$>$(<HTMLElement>element</HTMLElement>)</$>;
    this.<String>callback</String> = callback;

    this.<String>lastValue</String> = this.getValue();
    if (<Boolean>this.element.tagName.toLowerCase() == <String>'form'</String></Boolean>)
      this.registerFormCallbacks();
    else
      this.registerCallback(this.element);
  }</Function>,

  onElementEvent: <Function>function() {
    var value = this.getValue();
    if (<Boolean>this.lastValue != value</Boolean>) {
      this.callback(this.element, value);
      this.<String>lastValue</String> = value;
    }
  }</Function>,

  registerFormCallbacks: <Function>function() {
    Form.<Form.getElements><Form.getElements>getElements</Form.getElements>(this.element</Form.getElements>).each(this.registerCallback.bind(this));
  }</Function>,

  registerCallback: <Function>function(<HTMLElement>element</HTMLElement>) {
    if (<HTMLElement.type><HTMLElement>element</HTMLElement>.type</HTMLElement.type>) {
      switch (<HTMLElement.type.toLowerCase><HTMLElement>element</HTMLElement>.<HTMLElement.type>type</HTMLElement.type>.<HTMLElement.type.toLowerCase>toLowerCase</HTMLElement.type.toLowerCase>()</HTMLElement.type.toLowerCase>) {
        case <String>'checkbox'</String>:
        case <String>'radio'</String>:
          <Event.observe>Event.<Event.observe>observe</Event.observe>(<HTMLElement>element</HTMLElement>, <String>'click'</String>, this.onElementEvent.bind(this))</Event.observe>;
          break;
        default:
          <Event.observe>Event.<Event.observe>observe</Event.observe>(<HTMLElement>element</HTMLElement>, <String>'change'</String>, this.onElementEvent.bind(this))</Event.observe>;
          break;
      }
    }
  }</Function>
}

Form.<Form.Element>Element</Form.Element>.<String>EventObserver</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
Form.<Form.Element>Element</Form.Element>.<Form.Element.EventObserver>EventObserver</Form.Element.EventObserver>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Abstract.EventObserver>new <Abstract.EventObserver><Object>Abstract</Object>.EventObserver</Abstract.EventObserver>()</Abstract.EventObserver>, {
  getValue: <Function>function() {
    return <Form.Element.getValue>Form.<Form.Element>Element</Form.Element>.<Form.Element.getValue>getValue</Form.Element.getValue>(this.element)</Form.Element.getValue>;
  }</Function>
})</Object.extend>;

Form.<String>EventObserver</String> = <Class.create>Class.<Function>create</Function>()</Class.create>;
Form.<Form.EventObserver>EventObserver</Form.EventObserver>.<String>prototype</String> = <Object.extend>Object.<Object.extend>extend</Object.extend>(<Abstract.EventObserver>new <Abstract.EventObserver><Object>Abstract</Object>.EventObserver</Abstract.EventObserver>()</Abstract.EventObserver>, {
  getValue: <Function>function() {
    return <Form.serialize>Form.<Form.serialize>serialize</Form.serialize>(this.element)</Form.serialize>;
  }</Function>
})</Object.extend>;
if (!<Window.Event><Window>window</Window>.Event</Window.Event>) {
  var <Object>Event = <Object>new Object()</Object></Object>;
}

<Object.extend>Object.<Object.extend>extend</Object.extend>(<Object>Event</Object>, {
  KEY_BACKSPACE: <Number>8</Number>,
  KEY_TAB:       <Number>9</Number>,
  KEY_RETURN:   <Number>13</Number>,
  KEY_ESC:      <Number>27</Number>,
  KEY_LEFT:     <Number>37</Number>,
  KEY_UP:       <Number>38</Number>,
  KEY_RIGHT:    <Number>39</Number>,
  KEY_DOWN:     <Number>40</Number>,
  KEY_DELETE:   <Number>46</Number>,
  KEY_HOME:     <Number>36</Number>,
  KEY_END:      <Number>35</Number>,
  KEY_PAGEUP:   <Number>33</Number>,
  KEY_PAGEDOWN: <Number>34</Number>,

  <Element>element</Element>: <Function>function(<Event>event</Event>) {
    return <Event.target><Event>event</Event>.target</Event.target> || <Event.srcElement><Event>event</Event>.srcElement</Event.srcElement>;
  }</Function>,

  isLeftClick: <Function>function(<Event>event</Event>) {
    return (((<Event.which><Event>event</Event>.which)</Event.which> &amp;&amp; (<Boolean><Event.which><Event>event</Event>.which</Event.which> == <Number>1</Number>)</Boolean>) ||
            ((<Event.button><Event>event</Event>.button)</Event.button> &amp;&amp; (<Boolean><Event.button><Event>event</Event>.button</Event.button> == <Number>1</Number>)</Boolean>));
  }</Function>,

  pointerX: <Function>function(<Event>event</Event>) {
    return <Event.pageX><Event>event</Event>.pageX</Event.pageX> || (<Event.clientX><Event>event</Event>.clientX</Event.clientX> +
      (<HTMLDocument.documentElement.scrollLeft><HTMLDocument>document</HTMLDocument>.<HTMLDocument.documentElement>documentElement</HTMLDocument.documentElement>.scrollLeft</HTMLDocument.documentElement.scrollLeft> || <HTMLDocument.body.scrollLeft><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.scrollLeft</HTMLDocument.body.scrollLeft>));
  }</Function>,

  pointerY: <Function>function(<Event>event</Event>) {
    return <Event.pageY><Event>event</Event>.pageY</Event.pageY> || (<Event.clientY><Event>event</Event>.clientY</Event.clientY> +
      (<HTMLDocument.documentElement.scrollTop><HTMLDocument>document</HTMLDocument>.<HTMLDocument.documentElement>documentElement</HTMLDocument.documentElement>.scrollTop</HTMLDocument.documentElement.scrollTop> || <HTMLDocument.body.scrollTop><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.scrollTop</HTMLDocument.body.scrollTop>));
  }</Function>,

  stop: <Function>function(<Event>event</Event>) {
    if (<Event.preventDefault><Event>event</Event>.preventDefault</Event.preventDefault>) {
      <Event.preventDefault><Event>event</Event>.<Event.preventDefault>preventDefault</Event.preventDefault>()</Event.preventDefault>;
      <Event.stopPropagation><Event>event</Event>.<Event.stopPropagation>stopPropagation</Event.stopPropagation>()</Event.stopPropagation>;
    } else {
      <Event>event</Event>.<String>returnValue</String> = <Boolean>false</Boolean>;
      <Event>event</Event>.<String>cancelBubble</String> = <Boolean>true</Boolean>;
    }
  }</Function>,

  // find the first node with the given tagName, starting from the
  // node the event was triggered on; traverses the DOM upwards
  findElement: <Function>function(<Event>event</Event>, tagName) {
    var <HTMLElement>element = <Event.element>Event.<Event.element>element</Event.element>(<Event>event</Event>)</Event.element></HTMLElement>;
    while (<HTMLElement.parentNode.parentNode><HTMLElement.parentNode>element</HTMLElement.parentNode>.parentNode</HTMLElement.parentNode.parentNode> &amp;&amp; (!<HTMLElement.parentNode.tagName><HTMLElement.parentNode>element</HTMLElement.parentNode>.tagName</HTMLElement.parentNode.tagName> ||
        (<Boolean><HTMLElement.parentNode.tagName.toUpperCase><HTMLElement.parentNode>element</HTMLElement.parentNode>.<HTMLElement.parentNode.tagName>tagName</HTMLElement.parentNode.tagName>.<HTMLElement.parentNode.tagName.toUpperCase>toUpperCase</HTMLElement.parentNode.tagName.toUpperCase>()</HTMLElement.parentNode.tagName.toUpperCase> != <tagName.toUpperCase>tagName.<tagName.toUpperCase>toUpperCase</tagName.toUpperCase>()</tagName.toUpperCase>)</Boolean>))
      <HTMLElement.parentNode>element</HTMLElement.parentNode> = <HTMLElement.parentNode.parentNode><HTMLElement.parentNode>element</HTMLElement.parentNode>.parentNode</HTMLElement.parentNode.parentNode>;
    return <HTMLElement.parentNode>element</HTMLElement.parentNode>;
  }</Function>,

  observers: <Boolean>false</Boolean>,

  _observeAndCache: <Function>function(<HTMLElement>element</HTMLElement>, name, observer, useCapture) {
    if (!this.observers) this.<String>observers</String> = <Array>[]</Array>;
    if (<HTMLElement.addEventListener><HTMLElement>element</HTMLElement>.addEventListener</HTMLElement.addEventListener>) {
      this.observers.push([<Array><HTMLElement>element</HTMLElement>, name, observer, useCapture]</Array>);
      <HTMLElement.addEventListener><HTMLElement>element</HTMLElement>.<HTMLElement.addEventListener>addEventListener</HTMLElement.addEventListener>(name, observer, useCapture)</HTMLElement.addEventListener>;
    } else if (<HTMLElement.attachEvent><HTMLElement>element</HTMLElement>.attachEvent</HTMLElement.attachEvent>) {
      this.observers.push([<Array><HTMLElement>element</HTMLElement>, name, observer, useCapture]</Array>);
      <HTMLElement.attachEvent><HTMLElement>element</HTMLElement>.<HTMLElement.attachEvent>attachEvent</HTMLElement.attachEvent>(<String>'on'</String> + name, observer)</HTMLElement.attachEvent>;
    }
  }</Function>,

  unloadCache: <Function>function() {
    if (!<Event.observers>Event.observers</Event.observers>) return;
    for (var <Number>i = <Number>0</Number></Number>, length = <Event.observers.length>Event.<Event.observers>observers</Event.observers>.length</Event.observers.length>; <Boolean><Number>i</Number> &lt; length</Boolean>; <Number>i</Number>++) {
      <Event.stopObserving.apply>Event.<Event.stopObserving>stopObserving</Event.stopObserving>.<Event.stopObserving.apply>apply</Event.stopObserving.apply>(this, Event.<Event.observers>observers</Event.observers>[<Number>i</Number>])</Event.stopObserving.apply>;
      Event.<Event.observers>observers</Event.observers>[<Number>i</Number>][<Number>0</Number>] = null;
    }
    Event.<String>observers</String> = <Boolean>false</Boolean>;
  }</Function>,

  observe: <Function>function(<HTMLElement>element</HTMLElement>, name, observer, useCapture) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    useCapture = useCapture || <Boolean>false</Boolean>;

    if (<Boolean>name == <String>'keypress'</String></Boolean> &amp;&amp;
        (<Navigator.appVersion.match><Navigator>navigator</Navigator>.<Navigator.appVersion>appVersion</Navigator.appVersion>.<Navigator.appVersion.match>match</Navigator.appVersion.match>(<RegExp>/Konqueror|Safari|KHTML/</RegExp>)</Navigator.appVersion.match>
        || <Element.attachEvent><Element>element</Element>.attachEvent</Element.attachEvent>))
      <String>name</String> = <String>'keydown'</String>;

    <Event._observeAndCache>Event.<Event._observeAndCache>_observeAndCache</Event._observeAndCache>(<Element>element</Element>, <String>name</String>, observer, useCapture)</Event._observeAndCache>;
  }</Function>,

  stopObserving: <Function>function(<HTMLElement>element</HTMLElement>, name, observer, useCapture) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    useCapture = useCapture || <Boolean>false</Boolean>;

    if (<Boolean>name == <String>'keypress'</String></Boolean> &amp;&amp;
        (<Navigator.appVersion.match><Navigator>navigator</Navigator>.<Navigator.appVersion>appVersion</Navigator.appVersion>.<Navigator.appVersion.match>match</Navigator.appVersion.match>(<RegExp>/Konqueror|Safari|KHTML/</RegExp>)</Navigator.appVersion.match>
        || <Element.detachEvent><Element>element</Element>.detachEvent</Element.detachEvent>))
      <String>name</String> = <String>'keydown'</String>;

    if (<Element.removeEventListener><Element>element</Element>.removeEventListener</Element.removeEventListener>) {
      <Element.removeEventListener><Element>element</Element>.<Element.removeEventListener>removeEventListener</Element.removeEventListener>(<String>name</String>, observer, useCapture)</Element.removeEventListener>;
    } else if (<Element.detachEvent><Element>element</Element>.detachEvent</Element.detachEvent>) {
      try {
        <Element.detachEvent><Element>element</Element>.<Element.detachEvent>detachEvent</Element.detachEvent>(<String>'on'</String> + <String>name</String>, observer)</Element.detachEvent>;
      } catch (e) {}
    }
  }</Function>
})</Object.extend>;

/* prevent memory leaks in IE */
if (<Navigator.appVersion.match><Navigator>navigator</Navigator>.<Navigator.appVersion>appVersion</Navigator.appVersion>.<Navigator.appVersion.match>match</Navigator.appVersion.match>(<RegExp>/\bMSIE\b/</RegExp>)</Navigator.appVersion.match>)
  <Object.observe><Object>Event</Object>.<Object.observe>observe</Object.observe>(<Window>window</Window>, <String>'unload'</String>, <Object.unloadCache><Object>Event</Object>.unloadCache</Object.unloadCache>, <Boolean>false</Boolean>)</Object.observe>;
var Position = {
  // set to true if needed, warning: firefox performance problems
  // NOT neeeded for page scrolling, only if draggable contained in
  // scrollable elements
  includeScrollOffsets: <Boolean>false</Boolean>,

  // must be called before calling withinIncludingScrolloffset, every time the
  // page is scrolled
  prepare: <Function>function() {
    this.<String>deltaX</String> =  <Window.pageXOffset><Window>window</Window>.pageXOffset</Window.pageXOffset>
                || <HTMLDocument.documentElement.scrollLeft><HTMLDocument>document</HTMLDocument>.<HTMLDocument.documentElement>documentElement</HTMLDocument.documentElement>.scrollLeft</HTMLDocument.documentElement.scrollLeft>
                || <HTMLDocument.body.scrollLeft><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.scrollLeft</HTMLDocument.body.scrollLeft>
                || <Number>0</Number>;
    this.<String>deltaY</String> =  <Window.pageYOffset><Window>window</Window>.pageYOffset</Window.pageYOffset>
                || <HTMLDocument.documentElement.scrollTop><HTMLDocument>document</HTMLDocument>.<HTMLDocument.documentElement>documentElement</HTMLDocument.documentElement>.scrollTop</HTMLDocument.documentElement.scrollTop>
                || <HTMLDocument.body.scrollTop><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.scrollTop</HTMLDocument.body.scrollTop>
                || <Number>0</Number>;
  }</Function>,

  realOffset: <Function>function(<HTMLElement>element</HTMLElement>) {
    var <Number>valueT = <Number>0</Number></Number>, valueL = <Number>0</Number>;
    do {
      valueT += <HTMLElement.scrollTop><HTMLElement>element</HTMLElement>.scrollTop</HTMLElement.scrollTop>  || <Number>0</Number>;
      valueL += <HTMLElement.scrollLeft><HTMLElement>element</HTMLElement>.scrollLeft</HTMLElement.scrollLeft> || <Number>0</Number>;
      <HTMLElement.parentNode>element</HTMLElement.parentNode> = <HTMLElement.parentNode.parentNode><HTMLElement.parentNode>element</HTMLElement.parentNode>.parentNode</HTMLElement.parentNode.parentNode>;
    } while (<HTMLElement.parentNode>element</HTMLElement.parentNode>);
    return [<Array>valueL, valueT]</Array>;
  }</Function>,

  cumulativeOffset: <Function>function(<HTMLElement>element</HTMLElement>) {
    var <Number>valueT = <Number>0</Number></Number>, valueL = <Number>0</Number>;
    do {
      valueT += <HTMLElement.offsetTop><HTMLElement>element</HTMLElement>.offsetTop</HTMLElement.offsetTop>  || <Number>0</Number>;
      valueL += <HTMLElement.offsetLeft><HTMLElement>element</HTMLElement>.offsetLeft</HTMLElement.offsetLeft> || <Number>0</Number>;
      <HTMLElement.offsetParent>element</HTMLElement.offsetParent> = <HTMLElement.offsetParent.offsetParent><HTMLElement.offsetParent>element</HTMLElement.offsetParent>.offsetParent</HTMLElement.offsetParent.offsetParent>;
    } while (<HTMLElement.offsetParent>element</HTMLElement.offsetParent>);
    return [<Array>valueL, valueT]</Array>;
  }</Function>,

  positionedOffset: <Function>function(<HTMLElement>element</HTMLElement>) {
    var <Number>valueT = <Number>0</Number></Number>, valueL = <Number>0</Number>;
    do {
      valueT += <HTMLElement.offsetTop><HTMLElement>element</HTMLElement>.offsetTop</HTMLElement.offsetTop>  || <Number>0</Number>;
      valueL += <HTMLElement.offsetLeft><HTMLElement>element</HTMLElement>.offsetLeft</HTMLElement.offsetLeft> || <Number>0</Number>;
      <HTMLElement.offsetParent>element</HTMLElement.offsetParent> = <HTMLElement.offsetParent.offsetParent><HTMLElement.offsetParent>element</HTMLElement.offsetParent>.offsetParent</HTMLElement.offsetParent.offsetParent>;
      if (<HTMLElement.offsetParent>element</HTMLElement.offsetParent>) {
        if(<Boolean><HTMLElement.offsetParent.tagName><HTMLElement.offsetParent>element</HTMLElement.offsetParent>.tagName</HTMLElement.offsetParent.tagName>==<String>'BODY'</String></Boolean>) break;
        var p = <Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<HTMLElement.offsetParent>element</HTMLElement.offsetParent>, <String>'position'</String>)</Element.getStyle>;
        if (<Boolean>p == <String>'relative'</String></Boolean> || <Boolean>p == <String>'absolute'</String></Boolean>) break;
      }
    } while (<HTMLElement.offsetParent>element</HTMLElement.offsetParent>);
    return [<Array>valueL, valueT]</Array>;
  }</Function>,

  offsetParent: <Function>function(<HTMLElement>element</HTMLElement>) {
    if (<HTMLElement.offsetParent><HTMLElement>element</HTMLElement>.offsetParent</HTMLElement.offsetParent>) return <HTMLElement.offsetParent><HTMLElement>element</HTMLElement>.offsetParent</HTMLElement.offsetParent>;
    if (<Boolean><HTMLElement>element</HTMLElement> == <HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body></Boolean>) return <HTMLElement>element</HTMLElement>;

    while ((<HTMLElement.parentNode>element</HTMLElement.parentNode> = <HTMLElement.parentNode.parentNode><HTMLElement.parentNode>element</HTMLElement.parentNode>.parentNode</HTMLElement.parentNode.parentNode>) &amp;&amp; <Boolean><HTMLElement.parentNode>element</HTMLElement.parentNode> != <HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body></Boolean>)
      if (<Boolean><Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<HTMLElement>element</HTMLElement>, <String>'position'</String>)</Element.getStyle> != <String>'static'</String></Boolean>)
        return <HTMLElement>element</HTMLElement>;

    return <HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body>;
  }</Function>,

  // caches x/y coordinate pair to use with overlap
  within: <Function>function(<HTMLElement>element</HTMLElement>, x, y) {
    if (this.includeScrollOffsets)
      return this.withinIncludingScrolloffsets(<HTMLElement>element</HTMLElement>, x, y);
    this.<String>xcomp</String> = x;
    this.<String>ycomp</String> = y;
    this.<String>offset</String> = this.cumulativeOffset(<HTMLElement>element</HTMLElement>);

    return (<Boolean>y &gt;= this.offset[<Number>1</Number>]</Boolean> &amp;&amp;
            <Boolean>y &lt;  this.offset[<Number>1</Number>] + <HTMLElement.offsetHeight><HTMLElement>element</HTMLElement>.offsetHeight</HTMLElement.offsetHeight></Boolean> &amp;&amp;
            <Boolean>x &gt;= this.offset[<Number>0</Number>]</Boolean> &amp;&amp;
            <Boolean>x &lt;  this.offset[<Number>0</Number>] + <HTMLElement.offsetWidth><HTMLElement>element</HTMLElement>.offsetWidth</HTMLElement.offsetWidth></Boolean>);
  }</Function>,

  withinIncludingScrolloffsets: <Function>function(<HTMLElement>element</HTMLElement>, x, y) {
    var offsetcache = this.realOffset(<HTMLElement>element</HTMLElement>);

    this.<String>xcomp</String> = x + offsetcache[<Number>0</Number>] - this.deltaX;
    this.<String>ycomp</String> = y + offsetcache[<Number>1</Number>] - this.deltaY;
    this.<String>offset</String> = this.cumulativeOffset(<HTMLElement>element</HTMLElement>);

    return (<Boolean>this.ycomp &gt;= this.offset[<Number>1</Number>]</Boolean> &amp;&amp;
            <Boolean>this.ycomp &lt;  this.offset[<Number>1</Number>] + <HTMLElement.offsetHeight><HTMLElement>element</HTMLElement>.offsetHeight</HTMLElement.offsetHeight></Boolean> &amp;&amp;
            <Boolean>this.xcomp &gt;= this.offset[<Number>0</Number>]</Boolean> &amp;&amp;
            <Boolean>this.xcomp &lt;  this.offset[<Number>0</Number>] + <HTMLElement.offsetWidth><HTMLElement>element</HTMLElement>.offsetWidth</HTMLElement.offsetWidth></Boolean>);
  }</Function>,

  // within must be called directly before
  overlap: <Function>function(mode, <HTMLElement>element</HTMLElement>) {
    if (!mode) return <Number>0</Number>;
    if (<Boolean>mode == <String>'vertical'</String></Boolean>)
      return ((this.offset[<Number>1</Number>] + <HTMLElement.offsetHeight><HTMLElement>element</HTMLElement>.offsetHeight</HTMLElement.offsetHeight>) - this.ycomp) /
        <HTMLElement.offsetHeight><HTMLElement>element</HTMLElement>.offsetHeight</HTMLElement.offsetHeight>;
    if (<Boolean>mode == <String>'horizontal'</String></Boolean>)
      return ((this.offset[<Number>0</Number>] + <HTMLElement.offsetWidth><HTMLElement>element</HTMLElement>.offsetWidth</HTMLElement.offsetWidth>) - this.xcomp) /
        <HTMLElement.offsetWidth><HTMLElement>element</HTMLElement>.offsetWidth</HTMLElement.offsetWidth>;
  }</Function>,

  page: <Function>function(forElement) {
    var <Number>valueT = <Number>0</Number></Number>, valueL = <Number>0</Number>;

    var <HTMLElement>element = forElement</HTMLElement>;
    do {
      valueT += <HTMLElement.offsetTop><HTMLElement>element</HTMLElement>.offsetTop</HTMLElement.offsetTop>  || <Number>0</Number>;
      valueL += <HTMLElement.offsetLeft><HTMLElement>element</HTMLElement>.offsetLeft</HTMLElement.offsetLeft> || <Number>0</Number>;

      // Safari fix
      if (<Boolean><HTMLElement.offsetParent><HTMLElement>element</HTMLElement>.offsetParent</HTMLElement.offsetParent>==<HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body></Boolean>)
        if (<Boolean><Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<HTMLElement>element</HTMLElement>,<String>'position'</String>)</Element.getStyle>==<String>'absolute'</String></Boolean>) break;

    } while (<HTMLElement.offsetParent>element</HTMLElement.offsetParent> = <HTMLElement.offsetParent.offsetParent><HTMLElement.offsetParent>element</HTMLElement.offsetParent>.offsetParent</HTMLElement.offsetParent.offsetParent>);

    <HTMLElement>element</HTMLElement> = forElement;
    do {
      if (!<Window.opera><Window>window</Window>.opera</Window.opera> || <Boolean><HTMLElement.tagName><HTMLElement>element</HTMLElement>.tagName</HTMLElement.tagName>==<String>'BODY'</String></Boolean>) {
        valueT -= <HTMLElement.scrollTop><HTMLElement>element</HTMLElement>.scrollTop</HTMLElement.scrollTop>  || <Number>0</Number>;
        valueL -= <HTMLElement.scrollLeft><HTMLElement>element</HTMLElement>.scrollLeft</HTMLElement.scrollLeft> || <Number>0</Number>;
      }
    } while (<HTMLElement.parentNode>element</HTMLElement.parentNode> = <HTMLElement.parentNode.parentNode><HTMLElement.parentNode>element</HTMLElement.parentNode>.parentNode</HTMLElement.parentNode.parentNode>);

    return [<Array>valueL, valueT]</Array>;
  }</Function>,

  clone: <Function>function(source, target) {
    var options = <Object.extend>Object.<Object.extend>extend</Object.extend>({
      setLeft:    <Boolean>true</Boolean>,
      setTop:     <Boolean>true</Boolean>,
      setWidth:   <Boolean>true</Boolean>,
      setHeight:  <Boolean>true</Boolean>,
      offsetTop:  <Number>0</Number>,
      offsetLeft: <Number>0</Number>
    }, arguments[<Number>2</Number>] || {})</Object.extend>

    // find page position of source
    <Element>source</Element> = <$>$(<Element>source</Element>)</$>;
    var <Array>p = <Position.page>Position.<Array>page</Array>(<Element>source</Element>)</Position.page></Array>;

    // find coordinate system to use
    <Element>target</Element> = <$>$(<Element>target</Element>)</$>;
    var <Array>delta = [<Array><Number>0</Number>, <Number>0</Number>]</Array></Array>;
    var parent = null;
    // delta [0,0] will do fine with position: fixed elements,
    // position:absolute needs offsetParent deltas
    if (<Boolean><Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<Element>target</Element>,<String>'position'</String>)</Element.getStyle> == <String>'absolute'</String></Boolean>) {
      parent = <Position.offsetParent>Position.<Position.offsetParent>offsetParent</Position.offsetParent>(<Element>target</Element>)</Position.offsetParent>;
      <Array>delta</Array> = <Position.page>Position.<Array>page</Array>(parent)</Position.page>;
    }

    // correct by body offsets (fixes Safari)
    if (<Boolean>parent == <HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body></Boolean>) {
      <Array>delta</Array>[<Number>0</Number>] -= <HTMLDocument.body.offsetLeft><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.offsetLeft</HTMLDocument.body.offsetLeft>;
      <Array>delta</Array>[<Number>1</Number>] -= <HTMLDocument.body.offsetTop><HTMLDocument>document</HTMLDocument>.<HTMLDocument.body>body</HTMLDocument.body>.offsetTop</HTMLDocument.body.offsetTop>;
    }

    // set position
    if(<Boolean>options.setLeft</Boolean>)   <Element>target</Element>.<Element.style>style</Element.style>.<String>left</String>  = (<Array>p</Array>[<Number>0</Number>] - <Array>delta</Array>[<Number>0</Number>] + <Number>options.offsetLeft</Number>) + <String>'px'</String>;
    if(<Boolean>options.setTop</Boolean>)    <Element>target</Element>.<Element.style>style</Element.style>.<String>top</String>   = (<Array>p</Array>[<Number>1</Number>] - <Array>delta</Array>[<Number>1</Number>] + <Number>options.offsetTop</Number>) + <String>'px'</String>;
    if(<Boolean>options.setWidth</Boolean>)  <Element>target</Element>.<Element.style>style</Element.style>.<String>width</String> = <Element.offsetWidth><Element>source</Element>.offsetWidth</Element.offsetWidth> + <String>'px'</String>;
    if(<Boolean>options.setHeight</Boolean>) <Element>target</Element>.<Element.style>style</Element.style>.<String>height</String> = <Element.offsetHeight><Element>source</Element>.offsetHeight</Element.offsetHeight> + <String>'px'</String>;
  }</Function>,

  absolutize: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (<Boolean><Element.style.position><Element>element</Element>.<Element.style>style</Element.style>.position</Element.style.position> == <String>'absolute'</String></Boolean>) return;
    <Position.prepare>Position.<void>prepare</void>()</Position.prepare>;

    var <Array>offsets = <Position.positionedOffset>Position.<Array>positionedOffset</Array>(<Element>element</Element>)</Position.positionedOffset></Array>;
    var top     = <Array>offsets</Array>[<Number>1</Number>];
    var left    = <Array>offsets</Array>[<Number>0</Number>];
    var <Element.clientWidth>width   = <Element.clientWidth><Element>element</Element>.clientWidth</Element.clientWidth></Element.clientWidth>;
    var <Element.clientHeight>height  = <Element.clientHeight><Element>element</Element>.clientHeight</Element.clientHeight></Element.clientHeight>;

    <Element>element</Element>.<String>_originalLeft</String>   = left - <parseFloat>parseFloat(<Element.style.left><Element>element</Element>.<Element.style>style</Element.style>.left</Element.style.left>  || <Number>0</Number>)</parseFloat>;
    <Element>element</Element>.<String>_originalTop</String>    = top  - <parseFloat>parseFloat(<Element.style.top><Element>element</Element>.<Element.style>style</Element.style>.top</Element.style.top> || <Number>0</Number>)</parseFloat>;
    <Element>element</Element>.<String>_originalWidth</String>  = <Element.style.width><Element>element</Element>.<Element.style>style</Element.style>.width</Element.style.width>;
    <Element>element</Element>.<String>_originalHeight</String> = <Element.style.height><Element>element</Element>.<Element.style>style</Element.style>.height</Element.style.height>;

    <Element>element</Element>.<Element.style>style</Element.style>.<String>position</String> = <String>'absolute'</String>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>top</String>    = top + <String>'px'</String>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>left</String>   = left + <String>'px'</String>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>width</String>  = <Element.clientWidth>width</Element.clientWidth> + <String>'px'</String>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>height</String> = <Element.clientHeight>height</Element.clientHeight> + <String>'px'</String>;
  }</Function>,

  relativize: <Function>function(<HTMLElement>element</HTMLElement>) {
    <Element>element</Element> = <$>$(<Element>element</Element>)</$>;
    if (<Boolean><Element.style.position><Element>element</Element>.<Element.style>style</Element.style>.position</Element.style.position> == <String>'relative'</String></Boolean>) return;
    <Position.prepare>Position.<void>prepare</void>()</Position.prepare>;

    <Element>element</Element>.<Element.style>style</Element.style>.<String>position</String> = <String>'relative'</String>;
    var top  = <parseFloat>parseFloat(<Element.style.top><Element>element</Element>.<Element.style>style</Element.style>.top</Element.style.top>  || <Number>0</Number>)</parseFloat> - (<Element._originalTop><Element>element</Element>._originalTop</Element._originalTop> || <Number>0</Number>);
    var left = <parseFloat>parseFloat(<Element.style.left><Element>element</Element>.<Element.style>style</Element.style>.left</Element.style.left> || <Number>0</Number>)</parseFloat> - (<Element._originalLeft><Element>element</Element>._originalLeft</Element._originalLeft> || <Number>0</Number>);

    <Element>element</Element>.<Element.style>style</Element.style>.<String>top</String>    = top + <String>'px'</String>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>left</String>   = left + <String>'px'</String>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>height</String> = <Element._originalHeight><Element>element</Element>._originalHeight</Element._originalHeight>;
    <Element>element</Element>.<Element.style>style</Element.style>.<String>width</String>  = <Element._originalWidth><Element>element</Element>._originalWidth</Element._originalWidth>;
  }</Function>
}

// Safari returns margins on body which is incorrect if the child is absolutely
// positioned.  For performance reasons, redefine Position.cumulativeOffset for
// KHTML/WebKit only.
if (<RegExp.test><RegExp>/Konqueror|Safari|KHTML/</RegExp>.<RegExp.test>test</RegExp.test>(<Navigator.userAgent><Navigator>navigator</Navigator>.userAgent</Navigator.userAgent>)</RegExp.test>) {
  Position.<String>cumulativeOffset</String> = <Function>function(<HTMLElement>element</HTMLElement>) {
    var <Number>valueT = <Number>0</Number></Number>, valueL = <Number>0</Number>;
    do {
      valueT += <HTMLElement.offsetTop><HTMLElement>element</HTMLElement>.offsetTop</HTMLElement.offsetTop>  || <Number>0</Number>;
      valueL += <HTMLElement.offsetLeft><HTMLElement>element</HTMLElement>.offsetLeft</HTMLElement.offsetLeft> || <Number>0</Number>;
      if (<Boolean><HTMLElement.offsetParent><HTMLElement>element</HTMLElement>.offsetParent</HTMLElement.offsetParent> == <HTMLDocument.body><HTMLDocument>document</HTMLDocument>.body</HTMLDocument.body></Boolean>)
        if (<Boolean><Element.getStyle>Element.<Element.getStyle>getStyle</Element.getStyle>(<HTMLElement>element</HTMLElement>, <String>'position'</String>)</Element.getStyle> == <String>'absolute'</String></Boolean>) break;

      <HTMLElement.offsetParent>element</HTMLElement.offsetParent> = <HTMLElement.offsetParent.offsetParent><HTMLElement.offsetParent>element</HTMLElement.offsetParent>.offsetParent</HTMLElement.offsetParent.offsetParent>;
    } while (<HTMLElement.offsetParent>element</HTMLElement.offsetParent>);

    return [<Array>valueL, valueT]</Array>;
  }</Function>
}

<Element.addMethods><Object>Element</Object>.<void>addMethods</void>()</Element.addMethods>;
