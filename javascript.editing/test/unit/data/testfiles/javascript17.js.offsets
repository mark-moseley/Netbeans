Missing position for node SCRIPT[0:0]:FUNCTION[104:0]:BLOCK[104:17]:EXPR_VOID[105:12]:LETEXPR[105:12]:COMMA[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[104:0]:BLOCK[104:17]:EXPR_VOID[105:12]:LETEXPR[105:12]:COMMA[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[104:0]:BLOCK[104:17]:EXPR_VOID[105:12]:LETEXPR[105:12]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[104:0]:BLOCK[104:17]:EXPR_VOID[105:12]:LETEXPR[105:12]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[104:0]:BLOCK[104:17]:EXPR_VOID[105:12]:LETEXPR[105:12]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[104:0]:BLOCK[104:17]:EXPR_VOID[105:12]:LETEXPR[105:12]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[154:0]:BLOCK[154:20]:VAR[159:4]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[78:0]:BLOCK[78:17]:EXPR_VOID[80:13]:LETEXPR[80:13]:COMMA[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[78:0]:BLOCK[78:17]:EXPR_VOID[80:13]:LETEXPR[80:13]:COMMA[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[78:0]:BLOCK[78:17]:EXPR_VOID[80:13]:LETEXPR[80:13]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[78:0]:BLOCK[78:17]:EXPR_VOID[80:13]:LETEXPR[80:13]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[78:0]:BLOCK[78:17]:EXPR_VOID[80:13]:LETEXPR[80:13]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[78:0]:BLOCK[78:17]:EXPR_VOID[80:13]:LETEXPR[80:13]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:FUNCTION[85:0]:BLOCK[85:18]:LOOP[95:4]:BLOCK[96:8]:EXPR_VOID[96:8]:LETEXPR[96:8]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[113:0]:LOOP[113:0]:BLOCK[113:41]:EXPR_VOID[113:10]:LETEXPR[113:10]:COMMA[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[113:0]:LOOP[113:0]:BLOCK[113:41]:EXPR_VOID[113:10]:LETEXPR[113:10]:COMMA[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[113:0]:LOOP[113:0]:BLOCK[113:41]:EXPR_VOID[113:10]:LETEXPR[113:10]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[113:0]:LOOP[113:0]:BLOCK[113:41]:EXPR_VOID[113:10]:LETEXPR[113:10]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[113:0]:LOOP[113:0]:BLOCK[113:41]:EXPR_VOID[113:10]:LETEXPR[113:10]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[113:0]:LOOP[113:0]:BLOCK[113:41]:EXPR_VOID[113:10]:LETEXPR[113:10]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[74:0]:LOOP[74:0]:BLOCK[75:2]:EXPR_VOID[74:11]:LETEXPR[74:11]:COMMA[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[74:0]:LOOP[74:0]:BLOCK[75:2]:EXPR_VOID[74:11]:LETEXPR[74:11]:COMMA[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[74:0]:LOOP[74:0]:BLOCK[75:2]:EXPR_VOID[74:11]:LETEXPR[74:11]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[74:0]:LOOP[74:0]:BLOCK[75:2]:EXPR_VOID[74:11]:LETEXPR[74:11]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[74:0]:LOOP[74:0]:BLOCK[75:2]:EXPR_VOID[74:11]:LETEXPR[74:11]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:LOCAL_BLOCK[74:0]:LOOP[74:0]:BLOCK[75:2]:EXPR_VOID[74:11]:LETEXPR[74:11]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[150:0]:LETEXPR[0:0]
Missing position for node SCRIPT[0:0]:VAR[150:0]:LETEXPR[0:0]:COMMA[0:0]
Missing position for node SCRIPT[0:0]:VAR[150:0]:LETEXPR[0:0]:COMMA[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[150:0]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[150:0]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[150:0]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[150:0]:LETEXPR[0:0]:COMMA[0:0]:SETNAME[0:0]:BINDNAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[44:0]:NAME[44:4]:ARRAYCOMP[44:25]:BLOCK[44:25]:LOCAL_BLOCK[44:53]:LOOP[44:40]:BLOCK[44:23]:EXPR_VOID[44:23]:CALL[44:23]:GETPROP[0:0]
Missing position for node SCRIPT[0:0]:VAR[44:0]:NAME[44:4]:ARRAYCOMP[44:25]:BLOCK[44:25]:LOCAL_BLOCK[44:53]:LOOP[44:40]:BLOCK[44:23]:EXPR_VOID[44:23]:CALL[44:23]:GETPROP[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[44:0]:NAME[44:4]:ARRAYCOMP[44:25]:BLOCK[44:25]:LOCAL_BLOCK[44:53]:LOOP[44:40]:BLOCK[44:23]:EXPR_VOID[44:23]:CALL[44:23]:GETPROP[0:0]:STRING[0:0]
Missing position for node SCRIPT[0:0]:VAR[46:0]:NAME[46:4]:ARRAYCOMP[46:15]:BLOCK[46:15]:LOCAL_BLOCK[46:59]:LOOP[46:30]:BLOCK[46:48]:BLOCK[46:48]:EXPR_VOID[46:13]:CALL[46:13]:GETPROP[0:0]
Missing position for node SCRIPT[0:0]:VAR[46:0]:NAME[46:4]:ARRAYCOMP[46:15]:BLOCK[46:15]:LOCAL_BLOCK[46:59]:LOOP[46:30]:BLOCK[46:48]:BLOCK[46:48]:EXPR_VOID[46:13]:CALL[46:13]:GETPROP[0:0]:NAME[0:0]
Missing position for node SCRIPT[0:0]:VAR[46:0]:NAME[46:4]:ARRAYCOMP[46:15]:BLOCK[46:15]:LOCAL_BLOCK[46:59]:LOOP[46:30]:BLOCK[46:48]:BLOCK[46:48]:EXPR_VOID[46:13]:CALL[46:13]:GETPROP[0:0]:STRING[0:0]

<SCRIPT>// JavaScript 1.7 stuff
// From snippets in
// https://developer.mozilla.org/en/New_in_JavaScript_1.7

// Generators
<FUNCTION>function <FUNCNAME>fib</FUNCNAME>() <BLOCK>{
  <VAR>var <NAME>i = <NUMBER>0</NUMBER></NAME>, <NAME>j = <NUMBER>1</NUMBER></NAME></VAR>;
  <LOOP><EMPTY/>while (<IFEQ><TRUE><TARGET/>true</TRUE></IFEQ>) <BLOCK><TARGET/>{
    <EXPR_VOID><YIELD>yield <NAME>i</NAME></YIELD></EXPR_VOID>;
    <VAR>var <NAME>t = <NAME>i</NAME></NAME></VAR>;
    <EXPR_VOID><SETNAME><BINDNAME>i</BINDNAME> = <NAME>j</NAME></SETNAME></EXPR_VOID>;
    <EXPR_VOID><SETNAME><BINDNAME><ADD><NAME>j</NAME></BINDNAME> += <NAME>t</NAME></ADD></SETNAME></EXPR_VOID>;
  <TARGET/><GOTO/><TARGET/>}</BLOCK></LOOP>
</BLOCK><RETURN/>}</FUNCTION>

<VAR>var <NAME>g = <CALL><NAME>fib</NAME>()</CALL></NAME></VAR>;
<LOOP><EMPTY/>for <VAR>(var <NAME>i = <NUMBER>0</NUMBER></NAME></VAR>; <IFEQ><LT><NAME><TARGET/>i</NAME> &lt; <NUMBER>10</NUMBER></LT></IFEQ>; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++) <BLOCK><TARGET/>{
  <EXPR_RESULT><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP>(<ADD><CALL><NAME>g</NAME>.<GETPROP><STRING>next</STRING></GETPROP>()</CALL> + <STRING>"&lt;br&gt;\n"</STRING></ADD>)</CALL></EXPR_RESULT>;
<TARGET/><TARGET/><GOTO/><TARGET/><TARGET/>}</BLOCK></LOOP>



<VAR>var <NAME>obj = <OBJECTLIT>{<OBJLITNAME>name</OBJLITNAME>:<STRING>"Jack Bauer"</STRING>, <OBJLITNAME>username</OBJLITNAME>:<STRING>"JackB"</STRING>, <OBJLITNAME>id</OBJLITNAME>:<NUMBER>12345</NUMBER>, <OBJLITNAME>agency</OBJLITNAME>:<STRING>"CTU"</STRING>,
          <OBJLITNAME>region</OBJLITNAME>:<STRING>"Los Angeles"</STRING>}</OBJECTLIT></NAME></VAR>;

<VAR>var <NAME>it = <CALL><NAME>Iterator</NAME>(<NAME>obj</NAME>)</CALL></NAME></VAR>;

<TRY>try <BLOCK>{
  <LOOP><EMPTY/>while (<IFEQ><TRUE><TARGET/>true</TRUE></IFEQ>) <BLOCK><TARGET/>{
    <EXPR_RESULT><CALL><NAME>print</NAME>(<ADD><CALL><NAME>it</NAME>.<GETPROP><STRING>next</STRING></GETPROP>()</CALL> + <STRING>"\n"</STRING></ADD>)</CALL></EXPR_RESULT>;
  <TARGET/><GOTO/><TARGET/>}</BLOCK></LOOP>
}</BLOCK> <CATCH>catch (<NAME>err</NAME> if <INSTANCEOF><NAME>err</NAME> instanceof <NAME>StopIteration</NAME></INSTANCEOF>) <BLOCK>{
  <EXPR_RESULT><CALL><NAME>print</NAME>(<STRING>"End of record.\n"</STRING>)</CALL></EXPR_RESULT>;
}</BLOCK></CATCH> <CATCH>catch (<NAME>err</NAME><EMPTY/>) <BLOCK>{
  <EXPR_RESULT><CALL><NAME>print</NAME>(<ADD><ADD><STRING>"Unknown error: "</STRING> + <GETPROP><NAME>err</NAME>.<STRING>description</STRING></GETPROP></ADD> + <STRING>"\n"</STRING></ADD>)</CALL></EXPR_RESULT>;
}</BLOCK></CATCH></TRY>


// Array Comprehensions
<FUNCTION>function <FUNCNAME>range</FUNCNAME>(<PARAMETER>begin</PARAMETER>, <PARAMETER>end</PARAMETER>) <BLOCK>{
  <LOOP><EMPTY/>for <LET><LET>(let <NAME>i = <NAME>begin</NAME></NAME></LET>; <IFEQ><LT><NAME><TARGET/>i</NAME> &lt; <NAME>end</NAME></LT></IFEQ>; ++<EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>) <BLOCK><TARGET/>{
    <EXPR_VOID><YIELD>yield <NAME>i</NAME></YIELD></EXPR_VOID>;
  <TARGET/><TARGET/><GOTO/><TARGET/><TARGET/>}</BLOCK></LOOP></LET>
</BLOCK><RETURN/>}</FUNCTION>
<VAR>var <NAME>ten_squares = [<MUL><NAME>i</NAME> * <NAME><CALL/><EXPR_VOID/><BLOCK/><TARGET/><BLOCK/><EXPR_VOID/><CALL/>i</NAME></MUL> <ARRAYCOMP><BLOCK><NAME/><NAME/><NEW/><BINDNAME/><SETNAME/><EXPR_VOID/><SETNAME/><BINDNAME/><NEW/><NAME/><NAME/>for each (<EXPR_VOID><SETNAME><BINDNAME><ENUM_ID>i</ENUM_ID></BINDNAME></SETNAME></EXPR_VOID> in <LOOP><ENUM_INIT_VALUES><CALL><NAME>range</NAME>(<NUMBER>0</NUMBER>, <NUMBER>10</NUMBER>)</CALL></ENUM_INIT_VALUES>)</LOOP><LOCAL_BLOCK><TARGET/><ENUM_NEXT/><IFEQ/><TARGET/><EMPTY/><GOTO/><EMPTY/><TARGET/><IFEQ/><ENUM_NEXT/><TARGET/>]</LOCAL_BLOCK></BLOCK></ARRAYCOMP></NAME></VAR>;

<VAR>var <NAME>evens = [<NAME><CALL/><EXPR_VOID/><CALL/>i</NAME> <ARRAYCOMP><BLOCK><NAME/><NAME/><NEW/><BINDNAME/><SETNAME/><EXPR_VOID/><SETNAME/><BINDNAME/><NEW/><NAME/><NAME/>for each (<EXPR_VOID><SETNAME><BINDNAME><ENUM_ID>i</ENUM_ID></BINDNAME></SETNAME></EXPR_VOID> in <LOOP><ENUM_INIT_VALUES><CALL><NAME>range</NAME>(<NUMBER>0</NUMBER>, <NUMBER>21</NUMBER>)</CALL></ENUM_INIT_VALUES>) if (<BLOCK><BLOCK><IFNE><EQ><MOD><NAME><TARGET/>i</NAME> % <NUMBER>2</NUMBER></MOD> == <NUMBER>0</NUMBER></EQ></IFNE>)</BLOCK></BLOCK></LOOP><LOCAL_BLOCK><TARGET/><ENUM_NEXT/><IFEQ/><TARGET/><EMPTY/><TARGET/><GOTO/><TARGET/><EMPTY/><TARGET/><IFEQ/><ENUM_NEXT/><TARGET/>]</LOCAL_BLOCK></BLOCK></ARRAYCOMP></NAME></VAR>;

// Blockscope with Let
<VAR>var <NAME>x = <NUMBER>5</NUMBER></NAME></VAR>;
<VAR>var <NAME>y = <NUMBER>0</NUMBER></NAME></VAR>;

let <LET><LET>(<NAME>x = <ADD><NAME>x</NAME>+<NUMBER>10</NUMBER></ADD></NAME>, <NAME>y = <NUMBER>12</NUMBER></NAME></LET>) <BLOCK>{
  <EXPR_RESULT><CALL><NAME>print</NAME>(<ADD><ADD><NAME>x</NAME>+<NAME>y</NAME></ADD> + <STRING>"\n"</STRING></ADD>)</CALL></EXPR_RESULT>;
}</BLOCK></LET>

<EXPR_RESULT><CALL><NAME>print</NAME>((<ADD><ADD><NAME>x</NAME> + <NAME>y</NAME>)</ADD> + <STRING>"\n"</STRING></ADD>)</CALL></EXPR_RESULT>;


<VAR>var <NAME>x1 = <NUMBER>5</NUMBER></NAME></VAR>;
<VAR>var <NAME>y1 = <NUMBER>0</NUMBER></NAME></VAR>;
<EXPR_RESULT><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP>( let<LETEXPR><LET>(<NAME>x1 = <ADD><NAME>x1</NAME> + <NUMBER>10</NUMBER></ADD></NAME>, <NAME>y1 = <NUMBER>12</NUMBER></NAME></LET>) <ADD><ADD><NAME>x1</NAME>+<NAME>y1</NAME></ADD>  + <STRING>"&lt;br&gt;\n"</STRING></ADD></LETEXPR>)</CALL></EXPR_RESULT>;
<EXPR_RESULT><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP>(<ADD><ADD><NAME>x1</NAME>+<NAME>y1</NAME></ADD> + <STRING>"&lt;br&gt;\n"</STRING></ADD>)</CALL></EXPR_RESULT>;

<BLOCK>if (<IFNE><GT><NAME>x</NAME> &gt; <NAME>y</NAME></GT></IFNE>) <BLOCK>{
  <LET>let <NAME>gamma = <ADD><NUMBER>12.7</NUMBER> + <NAME>y</NAME></ADD></NAME></LET>;
  <EXPR_RESULT><SETNAME><BINDNAME>i</BINDNAME> = <MUL><NAME>gamma</NAME> * <NAME>x</NAME></MUL></SETNAME></EXPR_RESULT>;
}</BLOCK></BLOCK><TARGET/>

// Let in for loop
<VAR>var <NAME>i=<NUMBER>0</NUMBER></NAME></VAR>;
<LOOP><EMPTY/>for <LET><LET>( let <NAME>i=<NAME>i</NAME></NAME></LET> ; <IFEQ><LT><NAME><TARGET/>i</NAME> &lt; <NUMBER>10</NUMBER></LT></IFEQ> ; <EXPR_VOID><INC><NAME>i</NAME></INC></EXPR_VOID>++ )
  <EXPR_RESULT><CALL><NAME><TARGET/>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP>(<ADD><NAME>i</NAME> + <STRING>"&lt;br&gt;\n"</STRING></ADD>)</CALL></EXPR_RESULT></LOOP></LET><TARGET/><TARGET/><GOTO/><TARGET/><TARGET/>;

<LOCAL_BLOCK><LOOP><ENUM_NEXT/><IFEQ/><TARGET/><EMPTY/><TARGET/><IFEQ/><ENUM_NEXT/>for ( let [<EXPR_VOID><LETEXPR><ENUM_ID><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NAME/><LET/><NAME/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/>name,value</ENUM_ID></LETEXPR></EXPR_VOID>] in <ENUM_INIT_ARRAY><NAME>obj</NAME></ENUM_INIT_ARRAY> )
  <BLOCK><EXPR_RESULT><CALL><NAME><TARGET/>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP>(<ADD><ADD><ADD><ADD><STRING>"Name: "</STRING> + <NAME>name</NAME></ADD> + <STRING>", Value: "</STRING></ADD> + <NAME>value</NAME></ADD> + <STRING>"&lt;br&gt;\n"</STRING></ADD>)</CALL></EXPR_RESULT></BLOCK></LOOP><TARGET/><GOTO/><TARGET/>;</LOCAL_BLOCK>

// Destructuring assignment
<FUNCTION>function <FUNCNAME>destr</FUNCNAME>() <BLOCK>{
    <VAR>var <NAME>a = <NUMBER>1</NUMBER></NAME></VAR>;
    <VAR>var <NAME>b = <NUMBER>3</NUMBER></NAME></VAR><EXPR_VOID><LETEXPR>;

    [<NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NAME/><LET/><NAME/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/>a, b] = [<ARRAYLIT><NAME>b</NAME>, <NAME>a</NAME>]</ARRAYLIT></LETEXPR></EXPR_VOID>;
</BLOCK><RETURN/>}</FUNCTION>

<FUNCTION>function <FUNCNAME>destr2</FUNCNAME>() <BLOCK>{
    <VAR>var <NAME>a = <STRING>'o'</STRING></NAME></VAR>;
    <VAR>var <NAME>b = <STRING>"&lt;span style='color:green;'&gt;o&lt;/span&gt;"</STRING></NAME></VAR>;
    <VAR>var <NAME>c = <STRING>'o'</STRING></NAME></VAR>;
    <VAR>var <NAME>d = <STRING>'o'</STRING></NAME></VAR>;
    <VAR>var <NAME>e = <STRING>'o'</STRING></NAME></VAR>;
    <VAR>var <NAME>f = <STRING>"&lt;span style='color:blue;'&gt;o&lt;/span&gt;"</STRING></NAME></VAR>;
    <VAR>var <NAME>g = <STRING>'o'</STRING></NAME></VAR>;
    <VAR>var <NAME>h = <STRING>'o'</STRING></NAME></VAR>;

    <LOOP><EMPTY/>for (<EXPR_VOID><SETNAME><BINDNAME>lp</BINDNAME>=<NUMBER>0</NUMBER></SETNAME></EXPR_VOID>;<IFEQ><LT><NAME><TARGET/>lp</NAME>&lt;<NUMBER>40</NUMBER></LT></IFEQ>;<EXPR_VOID><INC><NAME>lp</NAME></INC></EXPR_VOID>++)
        <BLOCK><EXPR_VOID><LETEXPR><TARGET/>{[<NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NAME/><LET/><NAME/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/>a, b, c, d, e, f, g, h] = [<ARRAYLIT><NAME>b</NAME>, <NAME>c</NAME>, <NAME>d</NAME>, <NAME>e</NAME>, <NAME>f</NAME>, <NAME>g</NAME>, <NAME>h</NAME>, <NAME>a</NAME>]</ARRAYLIT></LETEXPR></EXPR_VOID>;
         <EXPR_VOID><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP>(<ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><ADD><NAME>a</NAME>+<STRING>''</STRING></ADD>+<NAME>b</NAME></ADD>+<STRING>''</STRING></ADD>+<NAME>c</NAME></ADD>+<STRING>''</STRING></ADD>+<NAME>d</NAME></ADD>+<STRING>''</STRING></ADD>+<NAME>e</NAME></ADD>+<STRING>''</STRING></ADD>+<NAME>f</NAME></ADD>+<STRING>''</STRING></ADD>+<NAME>g</NAME></ADD>+<STRING>''</STRING></ADD>+<NAME>h</NAME></ADD>+<STRING>''</STRING></ADD>+<STRING>"&lt;br /&gt;"</STRING></ADD>)</CALL></EXPR_VOID>;<TARGET/><TARGET/><GOTO/><TARGET/><TARGET/>}</BLOCK></LOOP>
</BLOCK><RETURN/>}</FUNCTION>

<FUNCTION>function <FUNCNAME>f</FUNCNAME>() <BLOCK>{
  <RETURN>return [<ARRAYLIT><NUMBER>1</NUMBER>, <NUMBER>2</NUMBER>]</ARRAYLIT></RETURN>;</BLOCK>
}</FUNCTION>

<FUNCTION>function <FUNCNAME>callf</FUNCNAME>() <BLOCK>{
    <VAR>var <NAME>a</NAME>, <NAME>b</NAME></VAR><EXPR_VOID><LETEXPR>;
    [<NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NAME/><LET/><NAME/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/>a, b] = <CALL><NAME>f</NAME>()</CALL></LETEXPR></EXPR_VOID>;
    <EXPR_VOID><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP> (<ADD><ADD><ADD><ADD><STRING>"A is "</STRING> + <NAME>a</NAME></ADD> + <STRING>" B is "</STRING></ADD> + <NAME>b</NAME></ADD> + <STRING>"&lt;br&gt;\n"</STRING></ADD>)</CALL></EXPR_VOID>;
</BLOCK><RETURN/>}</FUNCTION>

// Looping across objects
<LET>let <NAME>obj = <OBJECTLIT>{ <OBJLITNAME>width</OBJLITNAME>: <NUMBER>3</NUMBER>, <OBJLITNAME>length</OBJLITNAME>: <NUMBER>1.5</NUMBER>, <OBJLITNAME>color</OBJLITNAME>: <STRING>"orange"</STRING> }</OBJECTLIT></NAME></LET>;

<LOCAL_BLOCK><LOOP><ENUM_NEXT/><IFEQ/><TARGET/><EMPTY/><TARGET/><IFEQ/><ENUM_NEXT/>for (let [<EXPR_VOID><LETEXPR><ENUM_ID><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NAME/><LET/><NAME/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/>name, value</ENUM_ID></LETEXPR></EXPR_VOID>] in <ENUM_INIT_ARRAY><CALL><NAME>Iterator</NAME>(<NAME>obj</NAME>)</CALL></ENUM_INIT_ARRAY>) <BLOCK><BLOCK><TARGET/>{
  <EXPR_RESULT><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP> (<ADD><ADD><ADD><ADD><STRING>"Name: "</STRING> + <NAME>name</NAME></ADD> + <STRING>", Value: "</STRING></ADD> + <NAME>value</NAME></ADD> + <STRING>"&lt;br&gt;\n"</STRING></ADD>)</CALL></EXPR_RESULT>;
<TARGET/><GOTO/><TARGET/>}</BLOCK></BLOCK></LOOP></LOCAL_BLOCK>

// This is not working yet:
/*
var people = [
  {
    name: "Mike Smith",
    family: {
      mother: "Jane Smith",
      father: "Harry Smith",
      sister: "Samantha Smith"
    },
    age: 35
  },
  {
    name: "Tom Jones",
    family: {
      mother: "Norah Jones",
      father: "Richard Jones",
      brother: "Howard Jones"
    },
    age: 25
  }
];

for each (let {name: n, family: { father: f } } in people) {
  document.write ("Name: " + n + ", Father: " + f + "&lt;br&gt;\n");
}
*/

// Ignoring some return values
<FUNCTION>function <FUNCNAME>f</FUNCNAME>() <BLOCK>{
  <RETURN>return [<ARRAYLIT><NUMBER>1</NUMBER>, <NUMBER>2</NUMBER>, <NUMBER>3</NUMBER>]</ARRAYLIT></RETURN>;</BLOCK>
}</FUNCTION>

<VAR>var [<NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NAME/><LET/><NAME/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/>a, , b] = <CALL><NAME>f</NAME>()</CALL></VAR>;
<EXPR_RESULT><CALL><NAME>document</NAME>.<GETPROP><STRING>write</STRING></GETPROP> (<ADD><ADD><ADD><ADD><STRING>"A is "</STRING> + <NAME>a</NAME></ADD> + <STRING>" B is "</STRING></ADD> + <NAME>b</NAME></ADD> + <STRING>"&lt;br&gt;\n"</STRING></ADD>)</CALL></EXPR_RESULT>;


<FUNCTION>function <FUNCNAME>testexpr</FUNCNAME>() <BLOCK>{
    // Simple regular expression to match http / https / ftp-style URLs.
    <VAR>var <NAME>parsedURL = <CALL><REGEXP>/^(\w+)\:\/\/([^\/]+)\/(.*)$/</REGEXP>.<GETPROP><STRING>exec</STRING></GETPROP>(<NAME>url</NAME>)</CALL></NAME></VAR>;
    <BLOCK>if (<IFNE><NOT>!<NAME>parsedURL</NAME></NOT></IFNE>)
      <RETURN>return <NULL>null</NULL></RETURN>;</BLOCK><TARGET/>
    <VAR>var [, <NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NUMBER/><NAME/><GETELEM/><NAME/><LET/><NAME/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/><GETELEM/><NAME/><NUMBER/>protocol, fullhost, fullpath] = <NAME>parsedURL</NAME></VAR>;
</BLOCK><RETURN/>}</FUNCTION></SCRIPT>

