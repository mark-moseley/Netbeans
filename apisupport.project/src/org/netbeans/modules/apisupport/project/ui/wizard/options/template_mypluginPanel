package @@PACKAGE_NAME@@;

public class @@Panel_CLASS_NAME@@ extends javax.swing.JPanel {
    
    public @@Panel_CLASS_NAME@@() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 202, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 68, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Component should load its data here. You should not do any 
     * time-consuming operations inside the constructor, because it 
     * blocks initialization of OptionsDialog. Initialization 
     * should be implemented in update method.
     * This method is called after {@link #getComponent} method.
     * Update method can be called more than one time for the same instance 
     * of JComponent obtained from {@link #getComponent} call.
     */
    void update() {
        // TODO read settings and initialize accordingly this panel
       // Example:
        // Preferences.userNodeForPackage(this.getClass()).get(...);
    }
    
    /**
     * This method is called when Options Dialog "OK" button is pressed.
     * This method can be called even before update () method is called.
     */
    void applyChanges() {
        // TODO store modified settings
       // Example:
        // Preferences.userNodeForPackage(this.getClass()).put(...);
    }
    
    /**
     * This method is called when Options Dialog "Cancel" button is pressed.
     * This method can be called even before update () method is called.
     */
    void cancel() {
        // TODO 
    }
    
    /**
     * Should return <code>true</code> if some option value in this 
     * category is valid.
     * 
     * 
     * @return <code>true</code> if some option value in this 
     * category is valid
     */
    boolean dataValid() {
        return true;
    }
    
    /**
     * Should return <code>true</code> if some option value in this 
     * category has been changed.
     * 
     * 
     * @return <code>true</code> if some option value in this 
     * category has been changed
     */
    boolean isChanged() {
        return false;
    }        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
