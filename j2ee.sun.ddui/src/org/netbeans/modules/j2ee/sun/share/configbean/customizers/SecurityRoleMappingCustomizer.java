/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
/*
 * SecurityRoleMappingCustomizer.java
 *
 * Created on September 4, 2003, 5:28 PM
 */

package org.netbeans.modules.j2ee.sun.share.configbean.customizers;

import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;

import java.beans.Customizer;
import java.beans.PropertyVetoException;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JPanel;

import org.netbeans.modules.j2ee.sun.share.configbean.SecurityRoleMapping;
import org.netbeans.modules.j2ee.sun.share.configbean.ErrorMessageDB;
import org.netbeans.modules.j2ee.sun.share.configbean.ValidationError;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.common.CustomizerErrorPanel;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.common.CustomizerTitlePanel;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.common.BaseCustomizer;


/**
 *
 * @author Peter Williams
 */
public class SecurityRoleMappingCustomizer extends BaseCustomizer {

	private static final ResourceBundle customizerBundle = ResourceBundle.getBundle(
		"org.netbeans.modules.j2ee.sun.share.configbean.customizers.Bundle");	// NOI18N
		
	private SecurityRoleMapping theBean;
	
	/** Creates new form SecurityRoleMappingCustomizer */
	public SecurityRoleMappingCustomizer() {
		initComponents();
		initUserComponents();
	}

	public SecurityRoleMapping getBean() {
		return theBean;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        securityTabbedPanel = new javax.swing.JTabbedPane();

        setLayout(new java.awt.GridBagLayout());

        securityTabbedPanel.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(securityTabbedPanel, gridBagConstraints);

    }//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane securityTabbedPanel;
    // End of variables declaration//GEN-END:variables

	private SecurityRoleAssignmentPanel roleAssignmentPanel;
	private SecurityRoleMasterPanel masterRolePanel;	
	
	private void initUserComponents() {
		// Add title panel
		addTitlePanel(customizerBundle.getString("TITLE_SecurityRoleMapping"));	// NOI18N
		getAccessibleContext().setAccessibleName(customizerBundle.getString("ACSN_SecurityRoleMapping"));	// NOI18N
		getAccessibleContext().setAccessibleDescription(customizerBundle.getString("ACSD_SecurityRoleMapping"));	// NOI18N
		
		// add role assignment panel
		roleAssignmentPanel = new SecurityRoleAssignmentPanel(this);
		securityTabbedPanel.addTab(customizerBundle.getString("TAB_RoleAssignments"), roleAssignmentPanel);	// NOI18N

		// add master role list panel
		masterRolePanel = new SecurityRoleMasterPanel(this);
		securityTabbedPanel.addTab(customizerBundle.getString("TAB_MasterRoleLists"), masterRolePanel);	// NOI18N

		// Add error panel
		addErrorPanel();
	}

	protected void initFields() {
		roleAssignmentPanel.initFields(theBean);
		masterRolePanel.initFields(theBean);
	}
	
	protected void addListeners() {
		super.addListeners();
		roleAssignmentPanel.addListeners(theBean);
		masterRolePanel.addListeners(theBean);
	}
	
	protected void removeListeners() {
		super.removeListeners();
		roleAssignmentPanel.removeListeners(theBean);
		masterRolePanel.removeListeners(theBean);
	}
	
	public void partitionStateChanged(ErrorMessageDB.PartitionState oldState, ErrorMessageDB.PartitionState newState) {
		if(newState.getPartition() == getPartition()) {
			showErrors();
		}
		
		if(oldState.hasMessages() != newState.hasMessages()) {
			securityTabbedPanel.setIconAt(newState.getPartition().getTabIndex(), newState.hasMessages() ? panelErrorIcon : null);
		}
	}	
	
	protected boolean setBean(Object bean) {
		boolean result = super.setBean(bean);
		
		if(bean instanceof SecurityRoleMapping) {
			theBean = (SecurityRoleMapping) bean;
			result = true;
		} else {
			// if bean is not a SecurityRoleMapping, then it shouldn't have passed Base either.
			assert (result == false) : 
				"SecurityRoleMappingCustomizer was passed wrong bean type in setBean(Object bean)";	// NOI18N
				
			theBean = null;
			result = false;
		}
		
		return result;
	}
	
	public String getHelpId() {
		String result = "AS_CFG_SecurityRoleAssignment";	// NOI18N
		
		// Determine which tab has focus and return help context for that tab.
		switch(securityTabbedPanel.getSelectedIndex()) {
			case 1:
				result = "AS_CFG_SecurityRoleMaster";	// NOI18N
				break;
		}
		
		return result;
	}
	
	/** Retrieve the partition that should be associated with the current 
	 *  selected tab.
	 *
	 *  @return ValidationError.Partition
	 */
	public ValidationError.Partition getPartition() {
		switch(securityTabbedPanel.getSelectedIndex()) {
			case 1:
				return ValidationError.PARTITION_SECURITY_MASTER;
			default:
				return ValidationError.PARTITION_SECURITY_ASSIGN;
		}
	}	
}
