/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
/*
 * SelectedPortInfoPanel.java
 *
 * Created on November 2, 2003, 10:40 AM
 */

package org.netbeans.modules.j2ee.sun.share.configbean.customizers.webservice;

import java.util.ArrayList;
import java.util.List;

import java.awt.Component;
import java.awt.Container;
import java.awt.GridBagConstraints;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

import org.netbeans.modules.j2ee.sun.dd.api.CommonDDBean;
import org.netbeans.modules.j2ee.sun.dd.api.common.CallProperty;
import org.netbeans.modules.j2ee.sun.dd.api.common.StubProperty;
import org.netbeans.modules.j2ee.sun.dd.api.common.PortInfo;
import org.netbeans.modules.j2ee.sun.dd.api.common.WsdlPort;

import org.netbeans.modules.j2ee.sun.share.configbean.ServiceRef;
import org.netbeans.modules.j2ee.sun.share.configbean.StorageBeanFactory;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.common.GenericTableModel;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.common.GenericTablePanel;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.common.HelpContext;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.data.DynamicPropertyPanel;
import org.netbeans.modules.j2ee.sun.share.configbean.customizers.data.PropertyListMapping;

/**
 *
 * @author Peter Williams
 */
public class SelectedPortInfoPanel extends javax.swing.JPanel implements TableModelListener {

	private ServiceRefCustomizer masterPanel;

	private PortInfoMapping selectedPortInfoMap;
	private PortInfo selectedPortInfo;
        private boolean selectedPortSetup;

	private GenericTableModel stubPropertiesModel;
	private GenericTablePanel stubPropertiesPanel;
	private GenericTableModel callPropertiesModel;
	private GenericTablePanel callPropertiesPanel;

	/** Creates new form SelectedPortInfoPanel */
	public SelectedPortInfoPanel(ServiceRefCustomizer src) {
		masterPanel = src;
                selectedPortSetup = false;

		initComponents();
		initUserComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jLblSelectedPortInfo = new javax.swing.JLabel();
        jPnlPortInfoDesc = new javax.swing.JPanel();
        jLblServiceEI = new javax.swing.JLabel();
        jTxtServiceEI = new javax.swing.JTextField();
        jLblWsdlPort = new javax.swing.JLabel();
        jLblNamespaceURI = new javax.swing.JLabel();
        jTxtNamespaceURI = new javax.swing.JTextField();
        jLblLocalpart = new javax.swing.JLabel();
        jTxtLocalpart = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        setBorder(new javax.swing.border.EtchedBorder());
        getAccessibleContext().setAccessibleName(ServiceRefCustomizer.bundle.getString("ACSN_SelectedPortInfo"));
        getAccessibleContext().setAccessibleDescription(ServiceRefCustomizer.bundle.getString("ACSD_SelectedPortInfo"));
        jLblSelectedPortInfo.setLabelFor(jPnlPortInfoDesc);
        jLblSelectedPortInfo.setText(ServiceRefCustomizer.bundle.getString("LBL_SelectedPortInfo"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        add(jLblSelectedPortInfo, gridBagConstraints);

        jPnlPortInfoDesc.setLayout(new java.awt.GridBagLayout());

        jLblServiceEI.setLabelFor(jTxtServiceEI);
        jLblServiceEI.setText(ServiceRefCustomizer.bundle.getString("LBL_ServiceEndPoint_1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        jPnlPortInfoDesc.add(jLblServiceEI, gridBagConstraints);

        jTxtServiceEI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtServiceEIKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        jPnlPortInfoDesc.add(jTxtServiceEI, gridBagConstraints);
        jTxtServiceEI.getAccessibleContext().setAccessibleName(ServiceRefCustomizer.bundle.getString("ACSN_ServiceEndPoint"));
        jTxtServiceEI.getAccessibleContext().setAccessibleDescription(ServiceRefCustomizer.bundle.getString("ACSD_ServiceEndPoint"));

        jLblWsdlPort.setText(ServiceRefCustomizer.bundle.getString("LBL_WsdlPort"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPnlPortInfoDesc.add(jLblWsdlPort, gridBagConstraints);

        jLblNamespaceURI.setLabelFor(jTxtNamespaceURI);
        jLblNamespaceURI.setText(ServiceRefCustomizer.bundle.getString("LBL_NamespaceURI_1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        jPnlPortInfoDesc.add(jLblNamespaceURI, gridBagConstraints);

        jTxtNamespaceURI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtNamespaceURIKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        jPnlPortInfoDesc.add(jTxtNamespaceURI, gridBagConstraints);
        jTxtNamespaceURI.getAccessibleContext().setAccessibleName(ServiceRefCustomizer.bundle.getString("ACSN_NamespaceURI"));
        jTxtNamespaceURI.getAccessibleContext().setAccessibleDescription(ServiceRefCustomizer.bundle.getString("ACSD_NamespaceURI"));

        jLblLocalpart.setLabelFor(jTxtLocalpart);
        jLblLocalpart.setText(ServiceRefCustomizer.bundle.getString("LBL_Localpart_1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        jPnlPortInfoDesc.add(jLblLocalpart, gridBagConstraints);

        jTxtLocalpart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtLocalpartKeyReleased(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 4, 4);
        jPnlPortInfoDesc.add(jTxtLocalpart, gridBagConstraints);
        jTxtLocalpart.getAccessibleContext().setAccessibleName(ServiceRefCustomizer.bundle.getString("ACSN_Localpart"));
        jTxtLocalpart.getAccessibleContext().setAccessibleDescription(ServiceRefCustomizer.bundle.getString("ACSD_Localpart"));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jPnlPortInfoDesc, gridBagConstraints);

    }//GEN-END:initComponents

	private void jTxtLocalpartKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtLocalpartKeyReleased
		WsdlPort wsdlPort = selectedPortInfo.getWsdlPort();
		if(wsdlPort == null) {
			wsdlPort = StorageBeanFactory.getDefault().createWsdlPort();
			selectedPortInfo.setWsdlPort(wsdlPort);
		}

		wsdlPort.setLocalpart(jTxtLocalpart.getText());
		selectedPortInfoMap.updateDisplayText();
		masterPanel.getBean().setDirty();
	}//GEN-LAST:event_jTxtLocalpartKeyReleased

	private void jTxtNamespaceURIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtNamespaceURIKeyReleased
		WsdlPort wsdlPort = selectedPortInfo.getWsdlPort();
		if(wsdlPort == null) {
			wsdlPort = StorageBeanFactory.getDefault().createWsdlPort();
			selectedPortInfo.setWsdlPort(wsdlPort);
		}

		wsdlPort.setNamespaceURI(jTxtNamespaceURI.getText());
		selectedPortInfoMap.updateDisplayText();
		masterPanel.getBean().setDirty();
	}//GEN-LAST:event_jTxtNamespaceURIKeyReleased

	private void jTxtServiceEIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtServiceEIKeyReleased
		selectedPortInfo.setServiceEndpointInterface(jTxtServiceEI.getText());
		selectedPortInfoMap.updateDisplayText();
		masterPanel.getBean().setDirty();
	}//GEN-LAST:event_jTxtServiceEIKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLblLocalpart;
    private javax.swing.JLabel jLblNamespaceURI;
    private javax.swing.JLabel jLblSelectedPortInfo;
    private javax.swing.JLabel jLblServiceEI;
    private javax.swing.JLabel jLblWsdlPort;
    private javax.swing.JPanel jPnlPortInfoDesc;
    private javax.swing.JTextField jTxtLocalpart;
    private javax.swing.JTextField jTxtNamespaceURI;
    private javax.swing.JTextField jTxtServiceEI;
    // End of variables declaration//GEN-END:variables

	private void initUserComponents() {
		/** Add stub properties table panel :
		 *  TableEntry list has two properties: Name, Value
		 */
		ArrayList tableColumns = new ArrayList(2);
		tableColumns.add(new GenericTableModel.ValueEntry("Name",				// NOI18N - property name
			ServiceRefCustomizer.bundle.getString("LBL_Name_Column"), true));	// NOI18N
		tableColumns.add(new GenericTableModel.ValueEntry("Value",				// NOI18N - property name
			ServiceRefCustomizer.bundle.getString("LBL_Value_Column"), true));	// NOI18N

        stubPropertiesModel = new GenericTableModel(PortInfo.STUB_PROPERTY,
			stubPropertyFactory, tableColumns);
        stubPropertiesModel.addTableModelListener(this);
		stubPropertiesPanel = new GenericTablePanel(stubPropertiesModel,
			ServiceRefCustomizer.bundle, "StubProperties",	// NOI18N - property name
			DynamicPropertyPanel.class, HelpContext.HELP_SERVICE_PORT_STUB_PROPERTY_POPUP,
			PropertyListMapping.getPropertyList(PropertyListMapping.SERVICE_REF_STUB_PROPERTIES));

        GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
		add(stubPropertiesPanel, gridBagConstraints);

		/** Add call properties table panel :
		 *  Uses same TableEntry list as stubProperties
		 */
        callPropertiesModel = new GenericTableModel(PortInfo.CALL_PROPERTY,
			callPropertyFactory, tableColumns);
        callPropertiesModel.addTableModelListener(this);
		callPropertiesPanel = new GenericTablePanel(callPropertiesModel,
			ServiceRefCustomizer.bundle, "CallProperties",	// NOI18N - property name
			DynamicPropertyPanel.class, HelpContext.HELP_SERVICE_PORT_CALL_PROPERTY_POPUP,
			PropertyListMapping.getPropertyList(PropertyListMapping.SERVICE_REF_CALL_PROPERTIES));

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
		add(callPropertiesPanel, gridBagConstraints);
	}

	public void setPortInfoMapping(PortInfoMapping piMap) {
		try {
			selectedPortSetup = true;
			selectedPortInfoMap = piMap;

			if(selectedPortInfoMap != null) {
				selectedPortInfo = piMap.getPortInfo();
			} else {
				selectedPortInfo = null;
			}

			if(selectedPortInfo != null) {
				jTxtServiceEI.setText(selectedPortInfo.getServiceEndpointInterface());
				WsdlPort wsdlPort = selectedPortInfo.getWsdlPort();
				if(wsdlPort != null) {
					jTxtLocalpart.setText(wsdlPort.getLocalpart());
					jTxtNamespaceURI.setText(wsdlPort.getNamespaceURI());
				} else {
					jTxtLocalpart.setText("");		// NOI18N
					jTxtNamespaceURI.setText("");	// NOI18N
				}
			} else {
				jTxtServiceEI.setText("");		// NOI18N
				jTxtLocalpart.setText("");		// NOI18N
				jTxtNamespaceURI.setText("");	// NOI18N
			}

			if(selectedPortInfo != null) {
				stubPropertiesPanel.setModel(selectedPortInfo);
				callPropertiesPanel.setModel(selectedPortInfo);
			} else {
				PortInfo stub = StorageBeanFactory.getDefault().createPortInfo();
				stubPropertiesPanel.setModel(stub);
				callPropertiesPanel.setModel(stub);
			}
		} finally {
			selectedPortSetup = false;
		}
	}

	public void setContainerEnabled(Container container, boolean enabled) {
		Component [] components = container.getComponents();
		for(int i = 0; i < components.length; i++) {
			components[i].setEnabled(enabled);
			if(components[i] instanceof Container) {
				setContainerEnabled((Container) components[i], enabled);
			}
		}
	}

	/** -----------------------------------------------------------------------
	 *  Implementation of javax.swing.event.TableModelListener
	 */
	public void tableChanged(TableModelEvent e) {
		if(!selectedPortSetup) {
			ServiceRef bean = masterPanel.getBean();
			if(bean != null) {
				if(e.getSource().equals(callPropertiesModel)) {
					// Force property change to be issued by the bean
					bean.setDirty();
        	                } else if(e.getSource().equals(stubPropertiesModel)) {
					// Force property change to be issued by the bean
					bean.setDirty();
        	                }
			}
                }
	}

    // New for migration to sun DD API model.  Factory instance to pass to generic table model
    // to allow it to create callProperty and stubProperty beans.
	private static GenericTableModel.ParentPropertyFactory stubPropertyFactory =
        new GenericTableModel.ParentPropertyFactory() {
            public CommonDDBean newParentProperty() {
                return StorageBeanFactory.getDefault().createStubProperty();
            }
        };

    private static GenericTableModel.ParentPropertyFactory callPropertyFactory =
        new GenericTableModel.ParentPropertyFactory() {
            public CommonDDBean newParentProperty() {
                return StorageBeanFactory.getDefault().createCallProperty();
            }
        };
}
