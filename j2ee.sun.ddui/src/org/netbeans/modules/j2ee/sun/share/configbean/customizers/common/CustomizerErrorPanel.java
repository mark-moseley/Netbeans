/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2005 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
/*
 * CustomizerErrorPanel.java
 *
 * Created on March 1, 2004, 12:22 PM
 */

package org.netbeans.modules.j2ee.sun.share.configbean.customizers.common;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.ResourceBundle;

import java.text.MessageFormat;

import java.awt.Color;
import java.awt.Container;
import java.awt.GridBagConstraints;
import java.awt.Insets;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JPanel;

import org.netbeans.modules.j2ee.sun.share.Constants;
import org.netbeans.modules.j2ee.sun.share.configbean.Base;
import org.netbeans.modules.j2ee.sun.share.configbean.ErrorMessageDB;
import org.netbeans.modules.j2ee.sun.share.configbean.ValidationError;

/**
 *
 * @author Peter Williams
 */
public class CustomizerErrorPanel extends JPanel {
	
	private static final ResourceBundle bundle = ResourceBundle.getBundle(
		"org.netbeans.modules.j2ee.sun.share.configbean.customizers.common.Bundle");	// NOI18N
	
	private ErrorClient errorClient;
	
	/** Creates new form CustomizerErrorPanel 
	 *
	 * @param client The error support client, typically the customizer instance.
	 */
	public CustomizerErrorPanel(ErrorClient client) {
		errorClient = client;
		
		initComponents();
		initUserComponents();
	}
	
	public GridBagConstraints getConstraints() {
		GridBagConstraints constraints = new GridBagConstraints();
		constraints.gridwidth = GridBagConstraints.REMAINDER;
		constraints.fill = GridBagConstraints.HORIZONTAL;
		constraints.weightx = 1.0;
		constraints.insets = new Insets(0,4,0,4);
		
		return constraints;
	}	
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    private void initComponents() {//GEN-BEGIN:initComponents
        textScrollPane = new javax.swing.JScrollPane();
        errorTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        getAccessibleContext().setAccessibleName(bundle.getString("ACSN_ErrorTextArea"));
        getAccessibleContext().setAccessibleDescription(bundle.getString("ACSD_ErrorTextArea"));
        textScrollPane.setBorder(null);
        textScrollPane.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        textScrollPane.setMinimumSize(new java.awt.Dimension(20, 31));
        errorTextArea.setEditable(false);
        errorTextArea.setLineWrap(true);
        errorTextArea.setRows(2);
        errorTextArea.setWrapStyleWord(true);
        errorTextArea.setOpaque(false);
        textScrollPane.setViewportView(errorTextArea);
        errorTextArea.getAccessibleContext().setAccessibleName(bundle.getString("ACSN_ErrorTextArea"));
        errorTextArea.getAccessibleContext().setAccessibleDescription(bundle.getString("ACSD_ErrorTextArea"));

        add(textScrollPane, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea errorTextArea;
    private javax.swing.JScrollPane textScrollPane;
    // End of variables declaration//GEN-END:variables

	
	private void initUserComponents() {
		errorTextArea.setForeground(errorClient.getMessageForegroundColor());
	}
	
	/** Shows the errors at the top of dialog panel.
	 *  Set focus to the focused component.
	 */    
	public void showErrors(Base bean) {
		String errorString;
		List errorList = null;
		
		// Get error list, if any,
		ErrorMessageDB messageDB = ErrorMessageDB.getMessageDB(bean);
		if(messageDB != null) {
			ValidationError.Partition visiblePartition = errorClient.getPartition();
			errorList = messageDB.getErrors(visiblePartition);
		}
		
		// Build error strings (or empty string if no errors.)
		if(errorList != null && errorList.size() > 0) {
			StringBuffer errorBuf = new StringBuffer(100 * errorList.size());
			Object [] args = new Object[2];
			
			for(Iterator iter = errorList.iterator(); iter.hasNext(); ) {
				ValidationError error = (ValidationError) iter.next();

//				errorBuf.append(error.getFieldId());
//				errorBuf.append(": ");
//				errorBuf.append(error.getMessage());
				args[0] = error.getFieldId();
				args[1] = error.getMessage();
				errorBuf.append(MessageFormat.format(bundle.getString("MSG_ErrorDisplayFormat"), args));

				if(iter.hasNext()) {
					errorBuf.append("\n"); // NOI18N
				}
			}
			
			errorString = errorBuf.toString();
		} else {
			errorString = "";	// NOI18N
		}
		
		// Display errors (if any)
		errorTextArea.setText(errorString);
	}

	
	/** Interface to allow customization of error panel by owner.
	 */
	public static interface ErrorClient {
		
		/** Foreground color to use with error messages.
		 *
		 *  @return Foreground color for error messages.
		 */
		public Color getMessageForegroundColor();
		
		/** Gets the current panel descriptor.
		 *
		 *  @return Current panel descriptor.
		 */
		public ValidationError.Partition getPartition();
		
	}	
}

