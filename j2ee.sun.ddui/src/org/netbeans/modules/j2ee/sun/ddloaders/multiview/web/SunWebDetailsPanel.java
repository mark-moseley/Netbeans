/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.j2ee.sun.ddloaders.multiview.web;

import javax.swing.JComponent;
import org.netbeans.modules.j2ee.sun.dd.api.ASDDVersion;
import org.netbeans.modules.j2ee.sun.dd.api.VersionNotSupportedException;
import org.netbeans.modules.j2ee.sun.dd.api.web.SunWebApp;
import org.netbeans.modules.j2ee.sun.ddloaders.SunDescriptorDataObject;
import org.netbeans.modules.j2ee.sun.ddloaders.multiview.TextItemEditorModel;
import org.netbeans.modules.xml.multiview.ItemEditorHelper;
import org.netbeans.modules.xml.multiview.XmlMultiViewDataSynchronizer;
import org.netbeans.modules.xml.multiview.ui.SectionNodeInnerPanel;
import org.netbeans.modules.xml.multiview.ui.SectionNodeView;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;


/**
 * 
 * @author Peter Williams
 */
public class SunWebDetailsPanel extends SectionNodeInnerPanel {
	
//	private WebAppRootCustomizer masterPanel;
    private SunDescriptorDataObject dataObject;
    private SunWebApp sunWebApp;
    private ASDDVersion version;
    
    // true if AS 8.1+ fields are visible.
    private boolean as81FeaturesVisible;
    
    // true if AS 9.0+ fields are visible.
    private boolean as90FeaturesVisible;
    
    public SunWebDetailsPanel(SectionNodeView sectionNodeView, final SunWebApp sunWebApp, final ASDDVersion version) {
        super(sectionNodeView);
        this.dataObject = (SunDescriptorDataObject) sectionNodeView.getDataObject();
        this.sunWebApp = sunWebApp;
        this.version = version;
        this.as81FeaturesVisible = true;
        this.as90FeaturesVisible = true;
        
		initComponents();
		initUserComponents();
	}

	private void initUserComponents() {
        if(ASDDVersion.SUN_APPSERVER_8_1.compareTo(version) <= 0) {
            showAS81Fields();
            if(ASDDVersion.SUN_APPSERVER_9_0.compareTo(version) <= 0) {
                showAS90Fields();
            } else {
                hideAS90Fields();
            }
        } else {
            hideAS81Fields();
            hideAS90Fields();
        }
        
        XmlMultiViewDataSynchronizer synchronizer = dataObject.getModelSynchronizer();
        addRefreshable(new ItemEditorHelper(jTxtContextRoot, new ContextRootEditorModel(synchronizer)));
        addRefreshable(new ItemEditorHelper(jTxtErrorUrl, new ErrorUrlEditorModel(synchronizer)));
        addRefreshable(new ItemEditorHelper(jTxtHttpservletSecurityProvider, new HttpServletSecurityEditorModel(synchronizer)));
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLblContextRoot = new javax.swing.JLabel();
        jTxtContextRoot = new javax.swing.JTextField();
        jLblErrorUrl = new javax.swing.JLabel();
        jTxtErrorUrl = new javax.swing.JTextField();
        jLblHttpservletSecurityProvider = new javax.swing.JLabel();
        jTxtHttpservletSecurityProvider = new javax.swing.JTextField();

        jLblContextRoot.setLabelFor(jTxtContextRoot);
        jLblContextRoot.setText(NbBundle.getMessage(SunWebDetailsPanel.class, "LBL_ContextRoot_1")); // NOI18N

        jTxtContextRoot.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtContextRootKeyReleased(evt);
            }
        });

        jLblErrorUrl.setLabelFor(jTxtErrorUrl);
        jLblErrorUrl.setText(NbBundle.getMessage(SunWebDetailsPanel.class, "LBL_ErrorUrl_1")); // NOI18N

        jTxtErrorUrl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtErrorUrlKeyReleased(evt);
            }
        });

        jLblHttpservletSecurityProvider.setLabelFor(jTxtHttpservletSecurityProvider);
        jLblHttpservletSecurityProvider.setText(NbBundle.getMessage(SunWebDetailsPanel.class, "LBL_HttpservletSecurityProvider_1")); // NOI18N

        jTxtHttpservletSecurityProvider.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtHttpservletSecurityProviderKeyReleased(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLblContextRoot)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTxtContextRoot, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLblErrorUrl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 79, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTxtErrorUrl, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jLblHttpservletSecurityProvider)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jTxtHttpservletSecurityProvider, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLblContextRoot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTxtContextRoot, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLblErrorUrl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTxtErrorUrl, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLblHttpservletSecurityProvider)
                    .add(jTxtHttpservletSecurityProvider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLblContextRoot.getAccessibleContext().setAccessibleName(null);
        jTxtContextRoot.getAccessibleContext().setAccessibleName(null);
        jTxtContextRoot.getAccessibleContext().setAccessibleDescription(null);
        jLblErrorUrl.getAccessibleContext().setAccessibleName(null);
        jLblHttpservletSecurityProvider.getAccessibleContext().setAccessibleName(null);

        getAccessibleContext().setAccessibleName(null);
        getAccessibleContext().setAccessibleDescription(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtHttpservletSecurityProviderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtHttpservletSecurityProviderKeyReleased
//        WebAppRoot bean = masterPanel.getBean();
//		if(bean != null) {
//			try {
//				bean.setHttpservletSecurityProvider(jTxtHttpservletSecurityProvider.getText());
////				masterPanel.validateField(WebAppRoot.FIELD_HTTP_SERVLET_SECURITY_PROVIDER);
//			} catch(java.beans.PropertyVetoException exception) {
//				jTxtHttpservletSecurityProvider.setText(bean.getHttpservletSecurityProvider());
//			}
//		}
    }//GEN-LAST:event_jTxtHttpservletSecurityProviderKeyReleased

    private void jTxtErrorUrlKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtErrorUrlKeyReleased
//        WebAppRoot bean = masterPanel.getBean();
//		if(bean != null) {
//			try {
//				bean.setErrorUrl(jTxtErrorUrl.getText());
////				masterPanel.validateField(WebAppRoot.FIELD_ERROR_URL);
//			} catch(java.beans.PropertyVetoException exception) {
//				jTxtErrorUrl.setText(bean.getErrorUrl());
//			}
//		}
    }//GEN-LAST:event_jTxtErrorUrlKeyReleased

	private void jTxtContextRootKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtContextRootKeyReleased
//        WebAppRoot bean = masterPanel.getBean();
//		if(bean != null) {
//			try {
//				bean.setContextRoot(jTxtContextRoot.getText());
////				masterPanel.validateField(WebAppRoot.FIELD_CONTEXT_ROOT);
//			} catch(java.beans.PropertyVetoException exception) {
//				jTxtContextRoot.setText(bean.getContextRoot());
//			}
//		}
	}//GEN-LAST:event_jTxtContextRootKeyReleased
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLblContextRoot;
    private javax.swing.JLabel jLblErrorUrl;
    private javax.swing.JLabel jLblHttpservletSecurityProvider;
    private javax.swing.JTextField jTxtContextRoot;
    private javax.swing.JTextField jTxtErrorUrl;
    private javax.swing.JTextField jTxtHttpservletSecurityProvider;
    // End of variables declaration//GEN-END:variables
	
    // TODO after 5.0, generalize version based field display for multiple (> 2)
    // appserver versions.  (!PW note: this is the first panel to have changes across
    // 3 revisions of the relevant DTD.)
    //
    // Generalization idea: Tag each control a "MinVersion" property whose value is the instance
    // of AsDDVersion that corresponds with the needed appserver version.  Could later tag
    // with "MaxVersion", or even "ExcludeVersion", if necessary.
    //
    private void showAS81Fields() {
        if(!as81FeaturesVisible) {
            jLblContextRoot.setVisible(true);
            jTxtContextRoot.setVisible(true);
            jLblErrorUrl.setVisible(true);
            jTxtErrorUrl.setVisible(true);
            
            as81FeaturesVisible = true;
        }
    }
    
    private void hideAS81Fields() {
        if(as81FeaturesVisible) {
            jLblContextRoot.setVisible(false);
            jTxtContextRoot.setVisible(false);
            jLblErrorUrl.setVisible(false);
            jTxtErrorUrl.setVisible(false);
            
            as81FeaturesVisible = false;
        }
    }
	
    private void showAS90Fields() {
        if(!as90FeaturesVisible) {
            jLblHttpservletSecurityProvider.setVisible(true);
            jTxtHttpservletSecurityProvider.setVisible(true);
            
            as90FeaturesVisible = true;
        }
    }
    
    private void hideAS90Fields() {
        if(as90FeaturesVisible) {
            jLblHttpservletSecurityProvider.setVisible(false);
            jTxtHttpservletSecurityProvider.setVisible(false);
            
            as90FeaturesVisible = false;
        }
    }
    
    public void setValue(JComponent source, Object value) {
    }

    public void linkButtonPressed(Object ddBean, String ddProperty) {
    }

    public JComponent getErrorComponent(String errorId) {
        return null;
    }
    
    // Model classes for handling updates to the fields (is there a better or
    // more generic way to do this?)
    private class ContextRootEditorModel extends TextItemEditorModel {

        public ContextRootEditorModel(XmlMultiViewDataSynchronizer synchronizer) {
            super(synchronizer, true, true);
        }

        protected String getValue() {
            return sunWebApp.getContextRoot();
        }

        protected void setValue(String value) {
            sunWebApp.setContextRoot(value);
        }
    }
    
    private class ErrorUrlEditorModel extends TextItemEditorModel {

        public ErrorUrlEditorModel(XmlMultiViewDataSynchronizer synchronizer) {
            super(synchronizer, true, true);
        }

        protected String getValue() {
            try {
                return sunWebApp.getErrorUrl();
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
            return null;
        }

        protected void setValue(String value) {
            try {
                sunWebApp.setErrorUrl(value);
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
        }
    }
    
    private class HttpServletSecurityEditorModel extends TextItemEditorModel {

        public HttpServletSecurityEditorModel(XmlMultiViewDataSynchronizer synchronizer) {
            super(synchronizer, true, true);
        }

        protected String getValue() {
            try {
                return sunWebApp.getHttpservletSecurityProvider();
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
            return null;
        }

        protected void setValue(String value) {
            try {
                sunWebApp.setHttpservletSecurityProvider(value);
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
        }
    }

}
