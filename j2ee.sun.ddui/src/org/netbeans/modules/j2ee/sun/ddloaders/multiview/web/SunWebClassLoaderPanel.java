/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.j2ee.sun.ddloaders.multiview.web;

import javax.swing.JCheckBox;
import javax.swing.JComponent;
import org.netbeans.modules.j2ee.sun.dd.api.ASDDVersion;
import org.netbeans.modules.j2ee.sun.dd.api.VersionNotSupportedException;
import org.netbeans.modules.j2ee.sun.dd.api.web.MyClassLoader;
import org.netbeans.modules.j2ee.sun.dd.api.web.SunWebApp;
import org.netbeans.modules.j2ee.sun.ddloaders.SunDescriptorDataObject;
import org.netbeans.modules.j2ee.sun.ddloaders.Utils;
import org.netbeans.modules.j2ee.sun.ddloaders.multiview.TextItemEditorModel;
import org.netbeans.modules.xml.multiview.ItemCheckBoxHelper;
import org.netbeans.modules.xml.multiview.ItemEditorHelper;
import org.netbeans.modules.xml.multiview.XmlMultiViewDataSynchronizer;
import org.netbeans.modules.xml.multiview.ui.SectionNodeInnerPanel;
import org.netbeans.modules.xml.multiview.ui.SectionNodeView;
import org.openide.ErrorManager;
import org.openide.util.NbBundle;


/**
 *
 * @author Peter Williams
 */
public class SunWebClassLoaderPanel extends SectionNodeInnerPanel {
	
//	private WebAppRootCustomizer masterPanel;
    private SunDescriptorDataObject dataObject;
    private SunWebApp sunWebApp;
    private ASDDVersion version;

    // true if AS 8.1+ fields are visible.
    private boolean as81FeaturesVisible;
    
    public SunWebClassLoaderPanel(SectionNodeView sectionNodeView, final SunWebApp sunWebApp, final ASDDVersion version) {
        super(sectionNodeView);
        this.dataObject = (SunDescriptorDataObject) sectionNodeView.getDataObject();
        this.sunWebApp = sunWebApp;
        this.version = version;
        this.as81FeaturesVisible = true;

		initComponents();
		initUserComponents();		
	}

	private void initUserComponents() {
        if(ASDDVersion.SUN_APPSERVER_8_1.compareTo(version) <= 0) {
            showAS81Fields();
        } else {
            hideAS81Fields();
        }
        
        XmlMultiViewDataSynchronizer synchronizer = dataObject.getModelSynchronizer();
        addRefreshable(new ClassLoaderCheckboxHelper(synchronizer, jChkClassLoader));
        addRefreshable(new ItemEditorHelper(jTxtExtraClassPath, new ExtraClasspathEditorModel(synchronizer)));
        addRefreshable(new ItemEditorHelper(jTxtDynamicReloadInterval, new DynamicReloadIntervalEditorModel(synchronizer)));
        addRefreshable(new DelegateCheckboxHelper(synchronizer, jChkDelegate));
	}
	
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jChkClassLoader = new javax.swing.JCheckBox();
        jLblExtraClassPath = new javax.swing.JLabel();
        jTxtExtraClassPath = new javax.swing.JTextField();
        jLblDynamicReloadInterval = new javax.swing.JLabel();
        jTxtDynamicReloadInterval = new javax.swing.JTextField();
        jLblDelegate = new javax.swing.JLabel();
        jChkDelegate = new javax.swing.JCheckBox();

        jChkClassLoader.setText(NbBundle.getMessage(SunWebClassLoaderPanel.class, "LBL_EnableClassLoader")); // NOI18N
        jChkClassLoader.setOpaque(false);
        jChkClassLoader.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChkClassLoaderItemStateChanged(evt);
            }
        });

        jLblExtraClassPath.setLabelFor(jTxtExtraClassPath);
        jLblExtraClassPath.setText(NbBundle.getMessage(SunWebClassLoaderPanel.class, "LBL_ExtraClassPath_1")); // NOI18N

        jTxtExtraClassPath.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtExtraClassPathKeyReleased(evt);
            }
        });

        jLblDynamicReloadInterval.setLabelFor(jTxtDynamicReloadInterval);
        jLblDynamicReloadInterval.setText(NbBundle.getMessage(SunWebClassLoaderPanel.class, "LBL_DynamicReloadInterval_1")); // NOI18N

        jTxtDynamicReloadInterval.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtDynamicReloadIntervalKeyReleased(evt);
            }
        });

        jLblDelegate.setLabelFor(jChkDelegate);
        jLblDelegate.setText(NbBundle.getMessage(SunWebClassLoaderPanel.class, "LBL_ClassLoaderDelegate_1")); // NOI18N

        jChkDelegate.setText(" ");
        jChkDelegate.setOpaque(false);
        jChkDelegate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jChkDelegateItemStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jChkClassLoader, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(21, 21, 21)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLblExtraClassPath)
                            .add(jLblDynamicReloadInterval)
                            .add(jLblDelegate))
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jChkDelegate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jTxtExtraClassPath, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .add(jTxtDynamicReloadInterval, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jChkClassLoader)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLblExtraClassPath)
                    .add(jTxtExtraClassPath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(6, 6, 6)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLblDynamicReloadInterval)
                    .add(jTxtDynamicReloadInterval, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jChkDelegate)
                    .add(jLblDelegate))
                .addContainerGap())
        );

        jChkClassLoader.getAccessibleContext().setAccessibleName(null);
        jChkClassLoader.getAccessibleContext().setAccessibleDescription(null);
        jTxtExtraClassPath.getAccessibleContext().setAccessibleName(null);
        jTxtExtraClassPath.getAccessibleContext().setAccessibleDescription(null);
        jTxtDynamicReloadInterval.getAccessibleContext().setAccessibleName(null);
        jTxtDynamicReloadInterval.getAccessibleContext().setAccessibleDescription(null);
        jChkDelegate.getAccessibleContext().setAccessibleName(null);
        jChkDelegate.getAccessibleContext().setAccessibleDescription(null);

        getAccessibleContext().setAccessibleName(null);
        getAccessibleContext().setAccessibleDescription(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTxtDynamicReloadIntervalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtDynamicReloadIntervalKeyReleased
//        WebAppRoot bean = masterPanel.getBean();
//		if(bean != null) {
//			try {
//				bean.setDynamicReloadInterval(jTxtDynamicReloadInterval.getText());
//			} catch(java.beans.PropertyVetoException exception) {
//				jTxtDynamicReloadInterval.setText(bean.getDynamicReloadInterval());
//			}
//		}
    }//GEN-LAST:event_jTxtDynamicReloadIntervalKeyReleased

	private void jChkDelegateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChkDelegateItemStateChanged
//        WebAppRoot bean = masterPanel.getBean();
//		boolean state = Utils.interpretCheckboxState(evt);
//		if(bean != null) {
//			try {
//				bean.setDelegate(state);
//			} catch(java.beans.PropertyVetoException exception) {
//				jChkDelegate.setSelected(bean.isDelegate());
//			}
//		}
	}//GEN-LAST:event_jChkDelegateItemStateChanged

	private void jChkClassLoaderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jChkClassLoaderItemStateChanged
//        WebAppRoot bean = masterPanel.getBean();
//		boolean state = Utils.interpretCheckboxState(evt);
//		if(bean != null) {
//			try {
//				bean.setClassLoader(state);
//			} catch(java.beans.PropertyVetoException exception) {
//				jChkClassLoader.setSelected(bean.isClassLoader());
//			}
//		}
//		enableClassLoaderFields(state);
	}//GEN-LAST:event_jChkClassLoaderItemStateChanged

	private void jTxtExtraClassPathKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtExtraClassPathKeyReleased
//        WebAppRoot bean = masterPanel.getBean();
//		if(bean != null) {
//			try {
//				bean.setExtraClassPath(jTxtExtraClassPath.getText());
//			} catch(java.beans.PropertyVetoException exception) {
//				jTxtExtraClassPath.setText(bean.getExtraClassPath());
//			}
//		}
	}//GEN-LAST:event_jTxtExtraClassPathKeyReleased
	
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jChkClassLoader;
    private javax.swing.JCheckBox jChkDelegate;
    private javax.swing.JLabel jLblDelegate;
    private javax.swing.JLabel jLblDynamicReloadInterval;
    private javax.swing.JLabel jLblExtraClassPath;
    private javax.swing.JTextField jTxtDynamicReloadInterval;
    private javax.swing.JTextField jTxtExtraClassPath;
    // End of variables declaration//GEN-END:variables
	
	private void enableClassLoaderFields(boolean enabled) {
		jLblExtraClassPath.setEnabled(enabled);
		jTxtExtraClassPath.setEnabled(enabled);
        jLblDynamicReloadInterval.setEnabled(enabled);
        jTxtDynamicReloadInterval.setEnabled(enabled);
        jLblDelegate.setEnabled(enabled);
		jChkDelegate.setEnabled(enabled);
	}
    
    // TODO after 5.0, generalize version based field display for multiple (> 2)
    // appserver versions.
    private void showAS81Fields() {
        if(!as81FeaturesVisible) {
            jLblDynamicReloadInterval.setVisible(true);
            jTxtDynamicReloadInterval.setVisible(true);

            as81FeaturesVisible = true;
        }
    }
    
    private void hideAS81Fields() {
        if(as81FeaturesVisible) {
            jLblDynamicReloadInterval.setVisible(false);
            jTxtDynamicReloadInterval.setVisible(false);
            
            as81FeaturesVisible = false;
        }
    }
    
    public void setValue(JComponent source, Object value) {
    }

    public void linkButtonPressed(Object ddBean, String ddProperty) {
    }

    public JComponent getErrorComponent(String errorId) {
        return null;
    }

    private static MyClassLoader getMyClassLoader(SunWebApp sunWebApp, boolean create) throws VersionNotSupportedException{
        MyClassLoader cl = sunWebApp.getMyClassLoader();
        if(cl == null && create) {
            cl = sunWebApp.newMyClassLoader();
            sunWebApp.setMyClassLoader(cl);
        }
        return cl;
    }
    
    private class ExtraClasspathEditorModel extends TextItemEditorModel {

        public ExtraClasspathEditorModel(XmlMultiViewDataSynchronizer synchronizer) {
            super(synchronizer, true, true);
        }

        protected String getValue() {
            try {
                MyClassLoader cl = sunWebApp.getMyClassLoader();
                return (cl != null) ? cl.getExtraClassPath() : null;
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
            return null;
        }

        protected void setValue(String value) {
            try {
                MyClassLoader cl = getMyClassLoader(sunWebApp, true);
                cl.setExtraClassPath(value);
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
        }
    }
    
    private class DynamicReloadIntervalEditorModel extends TextItemEditorModel {

        public DynamicReloadIntervalEditorModel(XmlMultiViewDataSynchronizer synchronizer) {
            super(synchronizer, true, true);
        }

        protected String getValue() {
            try {
                MyClassLoader cl = sunWebApp.getMyClassLoader();
                return (cl != null) ? cl.getDynamicReloadInterval() : null;
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
            return null;
        }

        protected void setValue(String value) {
            try {
                MyClassLoader cl = getMyClassLoader(sunWebApp, true);
                cl.setDynamicReloadInterval(value);
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
        }
    }
    
    private class ClassLoaderCheckboxHelper extends ItemCheckBoxHelper {

        public ClassLoaderCheckboxHelper(XmlMultiViewDataSynchronizer synchronizer, JCheckBox component) {
            super(synchronizer, component);
        }
        
        public boolean getItemValue() {
            boolean state = false;
            try {
                state = sunWebApp.getMyClassLoader() != null;
            } catch(VersionNotSupportedException ex1) {
                try {
                    state = sunWebApp.isMyClassLoader();
                } catch(VersionNotSupportedException ex2) {
                    ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex1);
                    ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex2);
                }
            }
            
    		enableClassLoaderFields(state);        
            return state;
        }

        public void setItemValue(boolean value) {
            try {
                if(value) {
                    getMyClassLoader(sunWebApp, true);
                } else {
                    sunWebApp.setMyClassLoader(null);
                }
            } catch(VersionNotSupportedException ex1) {
                try {
                    sunWebApp.setMyClassLoader(value);
                } catch(VersionNotSupportedException ex2) {
                    ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex1);
                    ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex2);
                }
            }
            
    		enableClassLoaderFields(value);
        }
    }
    
    private class DelegateCheckboxHelper extends ItemCheckBoxHelper {

        public DelegateCheckboxHelper(XmlMultiViewDataSynchronizer synchronizer, JCheckBox component) {
            super(synchronizer, component);
        }

        public boolean getItemValue() {
            try {
                MyClassLoader cl = sunWebApp.getMyClassLoader();
                return (cl != null) ? Utils.booleanValueOf(cl.getDelegate()) : false;
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
            return false;
        }

        public void setItemValue(boolean value) {
            try {
                MyClassLoader cl = getMyClassLoader(sunWebApp, true);
                cl.setDelegate(Boolean.toString(value));
            } catch(VersionNotSupportedException ex) {
//                ErrorManager.getDefault().notify(ErrorManager.INFORMATIONAL, ex);
            }
        }
    }
}
