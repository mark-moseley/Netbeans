/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-200? Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.project.ui;

import java.awt.Color;
import java.awt.Component;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 * Wizard Panel UI that allows the user to select the Page Template
 * @author Winston Prakash
 */
public class PageLayoutChooserPanelGUI extends javax.swing.JPanel implements HelpCtx.Provider {

    private PageLayoutChooserPanel wizardPanel;

    /** Creates new form TemplatePanelVisual */
    public PageLayoutChooserPanelGUI(PageLayoutChooserPanel wizPanel) {
        initComponents();
        wizardPanel = wizPanel;
        templatesList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        templatesList.setListData(wizardPanel.getPageLayoutList());
        templatesList.setCellRenderer(new CustomCellRenderer());
        wizardPanel.setSelectedPageLayout(wizardPanel.getPageLayoutList().get(0));
        templatesList.setSelectedIndex(0);
    }

    @Override
    public String getName() {
        return NbBundle.getMessage(PageLayoutChooserPanelGUI.class, "LBL_PageLayoutsPanel_Name");
    }

    /**
     * Get the specified Resource folder name
     * @return 
     */
    String getResourceFolder() {
        String resourceFolder = "";
        if (resourceFolderField.getText() != null){
           resourceFolder =  resourceFolderField.getText();
        }
        return resourceFolder;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        templatesList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        resourceFolderField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        overwriteCheckbox = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        resourceList = new javax.swing.JList();

        templatesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        templatesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        templatesList.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        templatesList.setVisibleRowCount(-1);
        templatesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                templatesListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(templatesList);

        jLabel1.setText("Resource Folder");

        jButton1.setText(org.openide.util.NbBundle.getMessage(PageLayoutChooserPanelGUI.class, "LBL_BROWSE_BUTTON")); // NOI18N

        overwriteCheckbox.setSelected(true);
        overwriteCheckbox.setText(org.openide.util.NbBundle.getMessage(PageLayoutChooserPanelGUI.class, "LABEL_RESOURCE_OVER_WRITE")); // NOI18N

        resourceList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(resourceList);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(resourceFolderField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jButton1))
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                            .add(overwriteCheckbox))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(resourceFolderField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(overwriteCheckbox)
                .add(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents
    java.awt.GridBagConstraints gridBagConstraints;

    private void templatesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_templatesListValueChanged
        // When the user release the mouse button and completes the selection,
        // getValueIsAdjusting() becomes false
        if (!evt.getValueIsAdjusting()) {
            JList list = (JList) evt.getSource();
            PageLayoutData pageLayout = (PageLayoutData) list.getSelectedValue();
            wizardPanel.setSelectedPageLayout(pageLayout);
            resourceFolderField.setText(pageLayout.getDefaultResourceFolder());
            resourceList.setListData(pageLayout.getResourceNames());
        }
    }//GEN-LAST:event_templatesListValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JCheckBox overwriteCheckbox;
    private javax.swing.JTextField resourceFolderField;
    private javax.swing.JList resourceList;
    private javax.swing.JList templatesList;
    // End of variables declaration//GEN-END:variables
    public HelpCtx getHelpCtx() {
        return new HelpCtx(PageLayoutChooserPanelGUI.class);
    }

    class CustomCellRenderer extends JLabel implements ListCellRenderer {

        CustomCellRenderer() {
        }

        public Component getListCellRendererComponent(JList list, Object value, // value to display
                int index, // cell index
                boolean isSelected, // is the cell selected
                boolean cellHasFocus) {
            PageLayoutData pageLayout = (PageLayoutData) value;
            setToolTipText(pageLayout.getDescription());
            if (pageLayout.getIcon() != null) {
                setIcon(new ImageIcon(pageLayout.getPreviewImage()));
            }
            Color boderColor = list.getSelectionBackground();
            if (isSelected) {
                highlightBorder(boderColor.brighter(), 4);
            } else {
                setBackground(list.getBackground());
                highlightBorder(boderColor, 1);
            }
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            return this;
        }

        private void highlightBorder(Color color, int width) {
            setBorder(BorderFactory.createCompoundBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createEmptyBorder(10 - width, 10 - width, 10 - width, 10 - width),
                    new javax.swing.border.LineBorder(color, width, true)), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        }
    }

    public boolean canOverwrite() {
        return overwriteCheckbox.isSelected();

    }
}