/*
 * BindingConfigurationEditorPanel.java
 *
 * Created on June 2, 2008, 2:45 PM
 */

package org.netbeans.modules.xml.wsdl.ui.wizard;

import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.xml.namespace.QName;
import org.netbeans.modules.xml.wsdl.bindingsupport.configeditor.ConfigurationEditorProviderFactory;
import org.netbeans.modules.xml.wsdl.bindingsupport.spi.ExtensibilityElementConfigurationEditorComponent;
import org.netbeans.modules.xml.wsdl.bindingsupport.spi.ExtensibilityElementConfigurationEditorProvider;

/**
 *
 * @author  skini
 */
public class BindingConfigurationEditorPanel extends javax.swing.JPanel {

    /** Creates new form BindingConfigurationEditorPanel */
    public BindingConfigurationEditorPanel() {
        initComponents();
        initGUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setName("Form"); // NOI18N
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void initGUI() {
        String namespace = "";
        ExtensibilityElementConfigurationEditorProvider configurationProvider = ConfigurationEditorProviderFactory.getDefault().getConfigurationProvider(namespace);
        QName qname = new QName(namespace, "address");
        if (configurationProvider != null && configurationProvider.isConfigurationSupported(qname)) {
            ExtensibilityElementConfigurationEditorComponent editorComponent = configurationProvider.getComponent(qname, null);
            JPanel panel = editorComponent.getEditorPanel();
            panel.addPropertyChangeListener(new PropertyChangeListener() {

                public void propertyChange(PropertyChangeEvent evt) {
                    if (evt.getNewValue() instanceof String) {
                        String message = (String) evt.getNewValue();
                        if (evt.getPropertyName().equals(ExtensibilityElementConfigurationEditorComponent.PROPERTY_ERROR_EVT)) {
                        } else if (evt.getPropertyName().equals(ExtensibilityElementConfigurationEditorComponent.PROPERTY_WARNING_EVT)) {

                        } else if (evt.getPropertyName().equals(ExtensibilityElementConfigurationEditorComponent.PROPERTY_CLEAR_MESSAGES_EVT)) {
                        } else if (evt.getPropertyName().equals(ExtensibilityElementConfigurationEditorComponent.PROPERTY_NORMAL_MESSAGE_EVT)) {

                        }
                    }
                }
            });
            removeAll();                    
            add(panel, BorderLayout.SOUTH);
            setVisible(true);
            setVisible(true);
        } else {
            setVisible(false);
            setVisible(false);
        }
        SwingUtilities.getWindowAncestor(this).pack();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
