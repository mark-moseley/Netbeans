/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.hudson.ui;

import java.awt.Color;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import org.netbeans.modules.hudson.api.HudsonJob;
import org.netbeans.modules.hudson.impl.HudsonInstanceImpl;
import org.netbeans.modules.hudson.impl.HudsonJobBuild;
import org.netbeans.modules.hudson.impl.HudsonJobBuild.HudsonJobChangeItem;
import org.netbeans.modules.hudson.impl.HudsonJobBuild.Result;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;

/**
 * Hudson Job's Build Panel
 * 
 * @author  Michal Mocnak
 */
public class HudsonJobBuildPanel extends javax.swing.JPanel {
    
    private HudsonJobBuildPanel.ActionProvider actionProvider = new ActionProvider();
    
    /** Creates new form HudsonJobBuildPanel */
    public HudsonJobBuildPanel() {
        initComponents();
    }
    
    public HudsonJobBuildPanel.ActionProvider getActionProvider() {
        return actionProvider;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        noChangesLabel = new javax.swing.JLabel();
        contentPane = new javax.swing.JScrollPane();
        contentPanel = new javax.swing.JPanel();
        buildPanel = new javax.swing.JPanel();
        buildLabel = new javax.swing.JLabel();
        buildContentPanel = new javax.swing.JPanel();
        buildResultLabel = new javax.swing.JLabel();
        buildStatusLabel = new javax.swing.JLabel();
        changesPanel = new javax.swing.JPanel();
        changesLabel = new javax.swing.JLabel();
        changesContentPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        statusLabel = new javax.swing.JLabel();
        loadingLabel = new javax.swing.JLabel();

        noChangesLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_NoChanges")); // NOI18N

        contentPane.setBorder(null);
        contentPane.setOpaque(false);
        contentPane.getViewport().setOpaque(false);

        contentPanel.setOpaque(false);
        contentPanel.setLayout(new java.awt.GridBagLayout());

        buildPanel.setOpaque(false);

        buildLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        buildLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        buildLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_BuildNumber")); // NOI18N
        buildLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        buildLabel.setOpaque(true);

        buildContentPanel.setOpaque(false);
        buildContentPanel.setLayout(new java.awt.GridBagLayout());

        buildResultLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        buildResultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        buildResultLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Building")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        buildContentPanel.add(buildResultLabel, gridBagConstraints);

        buildStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        buildStatusLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Duration")); // NOI18N
        buildStatusLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        buildContentPanel.add(buildStatusLabel, gridBagConstraints);

        org.jdesktop.layout.GroupLayout buildPanelLayout = new org.jdesktop.layout.GroupLayout(buildPanel);
        buildPanel.setLayout(buildPanelLayout);
        buildPanelLayout.setHorizontalGroup(
            buildPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, buildLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
            .add(buildPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(buildContentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                .addContainerGap())
        );
        buildPanelLayout.setVerticalGroup(
            buildPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(buildPanelLayout.createSequentialGroup()
                .add(buildLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(buildContentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        contentPanel.add(buildPanel, gridBagConstraints);

        changesPanel.setOpaque(false);

        changesLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        changesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        changesLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Changes")); // NOI18N
        changesLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));
        changesLabel.setOpaque(true);

        changesContentPanel.setOpaque(false);
        changesContentPanel.setLayout(new java.awt.GridBagLayout());

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        changesContentPanel.add(jPanel1, gridBagConstraints);

        org.jdesktop.layout.GroupLayout changesPanelLayout = new org.jdesktop.layout.GroupLayout(changesPanel);
        changesPanel.setLayout(changesPanelLayout);
        changesPanelLayout.setHorizontalGroup(
            changesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, changesLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
            .add(changesContentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
        );
        changesPanelLayout.setVerticalGroup(
            changesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(changesPanelLayout.createSequentialGroup()
                .add(changesLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 27, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(changesContentPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        contentPanel.add(changesPanel, gridBagConstraints);

        contentPane.setViewportView(contentPanel);

        statusLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        statusLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_NoAvailableBuild")); // NOI18N

        loadingLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        loadingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/hudson/ui/resources/loading.gif"))); // NOI18N
        loadingLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Loading")); // NOI18N
        loadingLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadingLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buildContentPanel;
    private javax.swing.JLabel buildLabel;
    private javax.swing.JPanel buildPanel;
    private javax.swing.JLabel buildResultLabel;
    private javax.swing.JLabel buildStatusLabel;
    private javax.swing.JPanel changesContentPanel;
    private javax.swing.JLabel changesLabel;
    private javax.swing.JPanel changesPanel;
    private javax.swing.JScrollPane contentPane;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JLabel noChangesLabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    
    public class ActionProvider implements Runnable {
        
        private final static String BUILDING_ICON_BASE = "/org/netbeans/modules/hudson/ui/resources/building.gif";
        
        private HudsonJob job;
        private int build;
        private boolean state;
        
        private HudsonJobBuild data;
        
        public void showBuild(HudsonJob job, int build) {
            // Remove all components from container
            removeAll();
            
            // Add results
            add(loadingLabel);
            
            // Repaint and revalidate
            repaint();
            revalidate();
            
            // Update data
            this.job = job;
            this.build = build;
            this.state = false;
            
            // Do an action
            RequestProcessor.getDefault().post(this);
        }
        
        public void run() {
            if (!SwingUtilities.isEventDispatchThread()) {
                try {
                    HudsonInstanceImpl instance = job.getLookup().lookup(HudsonInstanceImpl.class);
                    
                    if (null == instance)
                        return;
                    
                    data = instance.getConnector().getJobBuild(job, build);
                    
                    if (null != data)
                        state = true;
                } finally {
                    SwingUtilities.invokeLater(this);
                }
            } else {
                // Remove all components from container
                removeAll();
                
                // Add results
                if (!state) {
                    add(statusLabel);
                } else {
                    // Contraints for panels
                    GridBagConstraints gbc = new GridBagConstraints();
                    gbc.fill = java.awt.GridBagConstraints.BOTH;
                    gbc.weightx = 1.0;
                    gbc.weighty = 1.0;
                    gbc.insets = new java.awt.Insets(10, 10, 0, 10);
                    
                    buildLabel.setText(NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_BuildNumber",
                            build, data.getDate()));
                    
                    if (data.isBuilding()) {
                        buildResultLabel.setText(NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Building"));
                        buildResultLabel.setForeground(Color.BLACK);
                        buildStatusLabel.setText(null);
                        buildStatusLabel.setIcon(new ImageIcon(getClass().getResource(BUILDING_ICON_BASE)));
                        
                        contentPanel.removeAll();
                        contentPanel.add(buildPanel, gbc);
                    } else {
                        buildResultLabel.setText((data.getResult() == Result.SUCCESS) ?
                            NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Success") :
                            NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Failure"));
                        buildResultLabel.setForeground((data.getResult() == Result.SUCCESS) ?
                            Color.decode("#08a400") : Color.decode("#A40000"));
                        buildStatusLabel.setText(NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Duration", data.getDuration()));
                        buildStatusLabel.setIcon(null);
                        
                        contentPanel.removeAll();
                        
                        // Set constraints
                        gbc.weighty = 0;
                        
                        contentPanel.add(buildPanel, gbc);
                        
                        // Update changesPanel
                        changesContentPanel.removeAll();
                        
                        if (data.getChanges().size() == 0) {
                            changesContentPanel.add(noChangesLabel);
                        } else {
                            // Set constraints
                            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
                            gbc.insets = new java.awt.Insets(0, 0, 0, 0);
                            gbc.gridx = 0;
                            gbc.gridy = 0;
                            
                            // Add changes
                            for (HudsonJobChangeItem change : data.getChanges()) {
                                changesContentPanel.add(new HudsonJobChangePanel(change), gbc);
                                gbc.gridy++;
                            }
                        }
                        
                        // Set constraints
                        gbc.insets = new java.awt.Insets(0, 10, 10, 10);
                        gbc.gridx = 0;
                        gbc.gridy = 1;
                        gbc.weighty = 1.0;
                        
                        contentPanel.add(changesPanel, gbc);
                    }
                    
                    // Set constraints
                    gbc.fill = java.awt.GridBagConstraints.BOTH;
                    gbc.gridy = 0;
                    gbc.insets = new Insets(0, 0, 20, 0);
                    
                    add(contentPane, gbc);
                }
                
                // Repaint and revalidate
                repaint();
                revalidate();
            }
        }
    }
}