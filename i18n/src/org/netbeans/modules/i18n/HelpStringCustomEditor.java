/*
 *                 Sun Public License Notice
 * 
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 * 
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun
 * Microsystems, Inc. All Rights Reserved.
 */


package org.netbeans.modules.i18n;


import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.SystemColor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.text.BadLocationException;

import org.netbeans.beaninfo.editors.StringEditor;

import org.openide.explorer.propertysheet.editors.EnhancedCustomPropertyEditor;


/**
 * Custom editor for editing string type formats with help  pettarn descritions.
 *
 * @author  Peter Zavadsky
 */
public class HelpStringCustomEditor extends JPanel implements EnhancedCustomPropertyEditor {

    /** Holds strings which will be inserted according selected item in list box. */
    private String[] replaceItems;

    
    /** Creates new form CodeCustomEditor.
     * @param value value to be customized 
     * @param items for sleecteing in combo box
     * @param help patterns described in list
     */
    public HelpStringCustomEditor(String value, String[] items, String[][] help) {
        initComponents();
        
        combo.setModel(new DefaultComboBoxModel(items));
        combo.setSelectedItem(value);

        String[] helpItems = new String[help[0].length];
        
        for(int i=0; i<helpItems.length; i++) {
            helpItems[i] = help[0][i] + "\t - " + help[1][i]; // NOI18N
        }
        
        replaceItems = help[0];
        
        list.setListData(helpItems);
        list.setBackground(new Color(SystemColor.window.getRGB()));
    }

    /**
    * @return property value that is result of <code>CodeCustomEditor</code>.
    * @exception <code>InvalidStateException</code> when the custom property editor does not represent valid property value
    */
    public Object getPropertyValue() throws IllegalStateException {
        return (String)combo.getSelectedItem();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        combo = new javax.swing.JComboBox();
        scrollPane = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        setLayout(new java.awt.GridBagLayout());
        java.awt.GridBagConstraints gridBagConstraints1;
        
        combo.setEditable(true);
        
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 0, 11);
        gridBagConstraints1.weightx = 1.0;
        add(combo, gridBagConstraints1);
        
        
        
        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
          list.addKeyListener(new java.awt.event.KeyAdapter() {
              public void keyPressed(java.awt.event.KeyEvent evt) {
                  listKeyPressed(evt);
              }
          }
          );
          list.addMouseListener(new java.awt.event.MouseAdapter() {
              public void mouseClicked(java.awt.event.MouseEvent evt) {
                  listMouseClicked(evt);
              }
          }
          );
          scrollPane.setViewportView(list);
          
          
        gridBagConstraints1 = new java.awt.GridBagConstraints();
        gridBagConstraints1.gridx = 0;
        gridBagConstraints1.gridy = 1;
        gridBagConstraints1.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints1.insets = new java.awt.Insets(12, 12, 11, 11);
        gridBagConstraints1.weightx = 1.0;
        gridBagConstraints1.weighty = 1.0;
        add(scrollPane, gridBagConstraints1);
        
    }//GEN-END:initComponents

    private void listKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER && list.getSelectedValue() != null) {
            evt.consume();
            insertInFormat(list.getSelectedIndex());
        }
    }//GEN-LAST:event_listKeyPressed

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        if(evt.getClickCount() == 2 && list.getSelectedValue() != null) {
            insertInFormat(list.getSelectedIndex());
        }
    }//GEN-LAST:event_listMouseClicked

    /** Helper method. */
    private void insertInFormat(int selected) {
        // Check for valid value.
        if(selected < 0 || selected >= replaceItems.length)
            return;
        
        JTextField textField = (JTextField)combo.getEditor().getEditorComponent();
        try {
            textField.getDocument().insertString(textField.getCaretPosition(), replaceItems[selected], null); // NOI18N
        } catch(BadLocationException ble) {
            if(Boolean.getBoolean("netbeans.debug.exceptions")) // NOI18N
                System.err.println("I18N: Text not inserted in property editor"); // NOI18N
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JList list;
    // End of variables declaration//GEN-END:variables

    /** Nested class. <code>PropertyEditor</code> for <code>initJavaCode</code> property. 
     * @see I18nOptions#PROP_INIT_JAVA_CODE */
    public static class InitCodeEditor extends StringEditor {
        /** Overrides superclass method. */
        public Component getCustomEditor() {
            return new HelpStringCustomEditor((String)getValue(), I18nUtil.getInitFormatItems(), I18nUtil.getInitHelpItems());
        }
    } // End of nested class InitCodeEditor.
    
    /** Nested class. <code>PropertyEditor</code> for <code>replaceJavaCode</code> property.
     * @see I18nOptions#PROP_INIT_REPLACE_CODE */
    public static class ReplaceCodeEditor extends StringEditor {
        /** Overrides superclass method. */
        public Component getCustomEditor() {
            return new HelpStringCustomEditor((String)getValue(), I18nUtil.getReplaceFormatItems(), I18nUtil.getReplaceHelpItems());
        }
    } // End of nested class ReplaceCodeEditor.
    
    /** Nested class. <code>PropertyEditor</code> for <code>replaceJavaCode</code> property.
     * @see I18nOptions#PROP_REGULAR_EXPRESSION */
    public static class RegExpEditor extends StringEditor {
        /** Overrides superclass method. */
        public Component getCustomEditor() {
            return new HelpStringCustomEditor((String)getValue(), I18nUtil.getRegExpItems(), I18nUtil.getRegExpHelpItems());
        }
    } // End of nested class RegExpEditor.
    
}
