/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.testtools.wizards;

/*
 * TestTypeSettingsPanel.java
 *
 * Created on April 10, 2002, 1:44 PM
 */

import java.awt.Component;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.openide.ErrorManager;

import org.openide.util.HelpCtx;
import org.openide.util.Utilities;
import org.openide.WizardDescriptor;
import org.openide.loaders.TemplateWizard;
import org.openide.util.NbBundle;

/** Wizard Panel with Test Type Settings configuration
 * @author  <a href="mailto:adam.sotona@sun.com">Adam Sotona</a>
 */
public class TestTypeSettingsPanel extends JPanel {

    static final long serialVersionUID = 7939826033813572286L;
    
    private boolean stop=true;
    private String name=null;
    
    public final Panel panel = new Panel();
    
    private class Panel extends Object implements WizardDescriptor.Panel {

        /** adds ChangeListener of current Panel
         * @param l ChangeListener */    
        public void addChangeListener(ChangeListener l) {
        }    

        /** returns current Panel
         * @return Component */    
        public Component getComponent() {
            return TestTypeSettingsPanel.this;
        }    

        /** returns Help Context
         * @return HelpCtx */    
        public HelpCtx getHelp() {
            return new HelpCtx(TestTypeSettingsPanel.class);
        }

        /** read settings from given Object
         * @param obj TemplateWizard with settings */    
        public void readSettings(Object obj) {
            TemplateWizard wizard=(TemplateWizard)obj;
            WizardSettings set=WizardSettings.get(obj);
            try {
                if (set.startFromType) {
                    name=wizard.getTargetName();
                    stop=(name!=null) && (name.indexOf(' ')>=0);
                    if (name==null)
                        name=wizard.getTemplate().getPrimaryFile().getName();
                    stop=stop||WizardIterator.detectTestType(wizard.getTargetFolder(), name);
                } else {
                    name=set.typeName;
                    stop=(name!=null) && (!Utilities.isJavaIdentifier(name));
                    if (name==null)
                        name=set.typeTemplate.getPrimaryFile().getName();
                }
            } catch (Exception e) {
                ErrorManager.getDefault().notify(ErrorManager.WARNING, e);
            }
            if (stop)
                ((CardLayout)getLayout()).show(TestTypeSettingsPanel.this, "stop"); // NOI18N
            else {
                ((CardLayout)getLayout()).show(TestTypeSettingsPanel.this, "ok"); // NOI18N
                jemmyCheck.setSelected(set.typeUseJemmy);
                sdiRadio.setSelected(set.typeSDI);
                mdiRadio.setSelected(!set.typeSDI);
            }
        }

        /** removes Change Listener of current Panel
         * @param l ChangeListener */    
        public void removeChangeListener(ChangeListener l) {
        }

        /** stores settings to given Object
         * @param obj TemplateWizard with settings */    
        public void storeSettings(Object obj) {
            WizardSettings set=WizardSettings.get(obj);
            set.typeUseJemmy=jemmyCheck.isSelected();
            set.typeSDI=sdiRadio.isSelected();
            if (defaultCheck.isSelected())
                set.defaultType=name;
        }

        /** test current Panel state for data validity
         * @return boolean true if data are valid and Wizard can continue */    
        public boolean isValid() {
            return !stop;
        }
    }
    
    /** Creates new form TestTypeSettingsPanel */
    public TestTypeSettingsPanel() {
        setName(NbBundle.getMessage(TestTypeSettingsPanel.class, "LBL_TestTypeSettingsPanelName")); // NOI18N
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup = new javax.swing.ButtonGroup();
        panel2 = new javax.swing.JPanel();
        defaultCheck = new javax.swing.JCheckBox();
        systemLabel = new javax.swing.JLabel();
        sdiRadio = new javax.swing.JRadioButton();
        mdiRadio = new javax.swing.JRadioButton();
        jemmyCheck = new javax.swing.JCheckBox();
        stopLabel = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        panel2.setLayout(new java.awt.GridBagLayout());

        defaultCheck.setMnemonic(NbBundle.getMessage(TestTypeSettingsPanel.class, "MNM_TestTypeSetDefault").charAt(0) );
        defaultCheck.setSelected(true);
        defaultCheck.setText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "LBL_TestTypeSetTestAsDefault"));
        defaultCheck.setToolTipText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "TTT_TestTypeSetDefault"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 11);
        panel2.add(defaultCheck, gridBagConstraints);

        systemLabel.setDisplayedMnemonic(NbBundle.getMessage(TestTypeSettingsPanel.class, "MNM_TestTypeWindowSystem").charAt(0) );
        systemLabel.setText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "LBL_TestTypeWindowsSystem"));
        systemLabel.setToolTipText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "TTT_TestTypeWindowSystem"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 0.01;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 0);
        panel2.add(systemLabel, gridBagConstraints);

        sdiRadio.setMnemonic(NbBundle.getMessage(TestTypeSettingsPanel.class, "MNM_TestTypeSDI").charAt(0) );
        sdiRadio.setSelected(true);
        sdiRadio.setText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "LBL_TestTypeSDI"));
        sdiRadio.setToolTipText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "TTT_TestTypeWindowSystem"));
        buttonGroup.add(sdiRadio);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 0, 11);
        panel2.add(sdiRadio, gridBagConstraints);

        mdiRadio.setMnemonic(NbBundle.getMessage(TestTypeSettingsPanel.class, "MNM_TestTypeMDI").charAt(0) );
        mdiRadio.setText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "LBL_TestTypeMDI"));
        mdiRadio.setToolTipText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "TTT_TestTypeWindowSystem"));
        buttonGroup.add(mdiRadio);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 11, 11, 11);
        panel2.add(mdiRadio, gridBagConstraints);

        jemmyCheck.setMnemonic(NbBundle.getMessage(TestTypeSettingsPanel.class, "MNM_TestTypeUseJemmy").charAt(0) );
        jemmyCheck.setSelected(true);
        jemmyCheck.setText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "LBL_TestTypeUseJemmy"));
        jemmyCheck.setToolTipText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "TTT_TestTypeUseJemmy"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 12, 0, 11);
        panel2.add(jemmyCheck, gridBagConstraints);

        add(panel2, "ok");

        stopLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        stopLabel.setText(org.openide.util.NbBundle.getMessage(TestTypeSettingsPanel.class, "MSG_TestTypeTestExists"));
        add(stopLabel, "stop");

    }//GEN-END:initComponents

            
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel2;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JCheckBox jemmyCheck;
    private javax.swing.JRadioButton mdiRadio;
    private javax.swing.JRadioButton sdiRadio;
    private javax.swing.JLabel stopLabel;
    private javax.swing.JCheckBox defaultCheck;
    private javax.swing.JLabel systemLabel;
    // End of variables declaration//GEN-END:variables
    
}
