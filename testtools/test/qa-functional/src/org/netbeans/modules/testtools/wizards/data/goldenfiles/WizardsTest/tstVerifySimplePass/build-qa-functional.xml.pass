<?xml encoding="UTF-8"? version="1.0">
<!--
The contents of this file are subject to the terms of the Common Development
and Distribution License (the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at http://www.netbeans.org/cddl.html
or http://www.netbeans.org/cddl.txt.

When distributing Covered Code, include this CDDL Header Notice in each file
and include the License file at http://www.netbeans.org/cddl.txt.
If applicable, add the following below the CDDL Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.
--><project Script" Test Type basedir="." default="all" name="qa-functional>

    <!-- =================== -->
    <!-- Setting classpaths -->
    <!-- =================== -->

    <target name="set_classpath">

        <!-- During filling classpathes remember that only <module>/test
	     is checked out during automated test execution so <module>/src
	     or <module>/netbeans isn't available.
          -->

        <property location="../../../nbextra/jemmy" name="jemmy.home"/>
        <property location="../../../nbextra/jellytools" name="jelly.home"/>
		 
        <!-- List of directories where jars will be searched. -->
        <property name="xtest.extra.jars.path" value="${jemmy.home};${jelly.home}"/>
      
        <!-- This jars is used for compilation, execution codetests and also for
             execution ide tests (it means this classpath will be mounted in repository).
             You can also write only name of jar or zip file, not in which directory it is and 
             this file will be searched in directories specified by property xtest.extra.jars.path 
                 example: <property name="xtest.extra.jars" value="jemmy.jar;jelly.jar"/>
          -->
        <property name="xtest.extra.jars" value=""/>

        <!-- These jars will be copied to directory ${netebans.home}/lib/ext.
	     Again you can write only name of jar or zip file, not in which directory it is and 
             this file will be searched in directories specified by property xtest.extra.jars.path 
                 example: <property name="xtest.extra.jars.ide" value="jdbc_driver1.zip;jdbcd_river2.jar"/>
          -->
        <property name="xtest.extra.jars.ide" value="jemmy.jar;jelly2-nb.jar"/>
  
  
        <!-- Here you can specify paths and jars which will be mounted to the IDE's filesystems
        	 Please note, these paths and jars are not used in a classpath when compiling the tests,
        	 they are just mounted.
        	 example: <property name="xtest.extra.ide.mounts" value="../work/mystuff;../work/myotherstuff"/>
        -->
  		<property name="xtest.extra.ide.mounts" value=""/>
  
        <!-- Arguments for virtual machine. Will be added into java command line for code tests
             or into IDE command line with prefix -J for ide tests.
                 example: <property name="xtest.jvmargs" value="-Xdebug"/>
          -->
        <property name="xtest.jvmargs" value=""/>
        
        <!-- Arguments which will be added into commandline of starting IDE. 
                 example: <property name="xtest.ide.commandline.suffix" value="-J-Dxtest.useclassloader=org.openidex.util"/>
          -->
        <property name="xtest.ide.commandline.suffix" value=""/>

	<!-- This classpath is beside jars in xtest.extra.jars also used for compilation. -->
	<property name="compiletest.classpath" value=""/>
        
    </target>
    
    <!-- ========= -->
    <!-- Compilers -->
    <!-- ========= -->
    
    <target depends="set_classpath" name="default-compiler">
       <ant antfile="${xtest.module_harness.antfile}" dir="." target="buildtests">
           <!-- This property contains directories to compile.
    	        These directories will be compiled separately. 
                   example: <property name="compile.srcdir" value="unit/src1;unit/src2"/>
             -->
           <property name="compile.srcdir" value="${xtest.testtype}/src"/>
           <!-- You can define files which should be excluded during compilation -->
           <property name="compile.excludes" value="**/data/**"/>
       </ant>
    </target>

    <!-- ========= -->
    <!-- Executors -->
    <!-- ========= -->
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes tests inside IDE -->
    <target depends="set_classpath" name="runidetest">
        <ant antfile="${xtest.module_harness.antfile}" dir="." target="test">
           <property name="xtest.exectype" value="ide"/>
           <property name="xtest.ide.winsys" value="sdi"/>
       </ant>
    </target>
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes standalone tests -->
    <target depends="set_classpath" name="runcodetest">
        <ant antfile="${xtest.module_harness.antfile}" dir="." target="test">
           <property name="xtest.exectype" value="code"/>
        </ant>
    </target>



	<!--
	******************************************************
	** You should not change anything after this comment,
	**    unless you really know what you do
	******************************************************
	-->

	<!-- Says how to create classpath for compilation and for execution code tests.
         Can have values src, jar, ide -->
    <property name="xtest.source.location" value="ide"/>

	<!-- Default target saying this build script is not supposed to be run from 
		 command line. You shoud not modify this unless you know what you are doing.
	-->    
    <target name="all">
      <fail It Use and be build.xml buildfile compilers. contains directly execute executed. executors intended is message="This not tests."/ to>
    </target>


    
</project>
