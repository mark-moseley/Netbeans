/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.mobility.project.deployment;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Container;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.text.JTextComponent;
import org.netbeans.spi.mobility.deployment.DeploymentPlugin;
import org.netbeans.spi.mobility.project.ui.customizer.support.VisualPropertySupport;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.nodes.Node.Cookie;
import org.openide.util.HelpCtx;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author  Adam Sotona
 */
public class MobilityDeploymentManagerPanel extends JPanel implements ExplorerManager.Provider, PropertyChangeListener {
    
    private final ExplorerManager manager = new ExplorerManager();
    private final BeanTreeView btw = new BeanTreeView();
    private final MobilityDeploymentProperties props = new MobilityDeploymentProperties();
    private final VisualPropertySupport vps = VisualPropertySupport.getDefault(props);
    private final String initialTypeName;

    public static synchronized String manageDeployment(String deploymentTypeDisplayName, String instance) {
        MobilityDeploymentManagerPanel mdmp = new MobilityDeploymentManagerPanel(deploymentTypeDisplayName, instance);
        DialogDisplayer.getDefault().notify(new DialogDescriptor(mdmp, NbBundle.getMessage(MobilityDeploymentManagerAction.class, "Title_DeploymentManager"), true, new Object[] {DialogDescriptor.CLOSED_OPTION}, DialogDescriptor.CLOSED_OPTION, DialogDescriptor.DEFAULT_ALIGN, new HelpCtx(MobilityDeploymentManagerPanel.class), null));  //NOI18N
        return mdmp.getSelectedInstanceName();
    }
    
    
    /**
     * Creates new form MobilityDeploymentManagerPanel
     */
    private MobilityDeploymentManagerPanel(String deploymentTypeDisplayName, String instanceName) {
        this.initialTypeName = deploymentTypeDisplayName;
        initComponents();
        btw.setRootVisible(false);
        manager.addPropertyChangeListener(this);
        Children.Array ch = new Children.Array() {
            protected Collection<Node> initCollection() {
                Collection<Node> nodes = new ArrayList();
                for (DeploymentPlugin d : Lookup.getDefault().lookupAll(DeploymentPlugin.class)) {
                    if (d.getGlobalPropertyDefaultValues().size() > 0) nodes.add(new DeploymentTypeNode(d));
                }
                return nodes;
            }
        };
        manager.setRootContext(new AbstractNode(ch));
        jPanel1.add(btw, BorderLayout.CENTER);
        Node selType = deploymentTypeDisplayName != null ? ch.findChild(deploymentTypeDisplayName) : null;
        Node selInstance = selType != null && instanceName != null ? selType.getChildren().findChild(instanceName) : null;
        if (selType != null || selInstance != null) try {
            manager.setExploredContextAndSelection(selType, new Node[]{selInstance == null ? selType : selInstance});
        } catch (PropertyVetoException pve) {}
    }
    
    public String getSelectedInstanceName() {
        if (initialTypeName == null) return null;
        Node[] n = manager.getSelectedNodes();
        return n.length != 1 || !initialTypeName.equals(n[0].getParentNode().getDisplayName()) ? null : n[0].getName();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        jLabel1.setLabelFor(btw);
        jLabel1.setText(NbBundle.getMessage(MobilityDeploymentManagerPanel.class, "MobilityDeploymentManager.jLabel1.text")); // NOI18N

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(250, 300));

        jButton1.setText(NbBundle.getMessage(MobilityDeploymentManagerPanel.class, "MobilityDeploymentManager.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createInstance(evt);
            }
        });

        jButton2.setText(NbBundle.getMessage(MobilityDeploymentManagerPanel.class, "MobilityDeploymentManager.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeInstance(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 12, 1, 1));
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 400));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton2))
                    .add(layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
                    .add(jLabel1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jButton2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeInstance(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeInstance
        Node n[] = manager.getSelectedNodes();
        if (n.length == 1 && n[0].hasCustomizer()) {
            n[0].getCookie(InstanceNode.class).remove();
        }
    }//GEN-LAST:event_removeInstance

    private void createInstance(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createInstance
        Node n[] = manager.getSelectedNodes();
        if (n.length == 1) {
            if (n[0].hasCustomizer()) n[0] = n[0].getParentNode();
            n[0].getCookie(DeploymentTypeNode.class).createInstance();
        }
    }//GEN-LAST:event_createInstance

    public ExplorerManager getExplorerManager() {
        return manager;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        Node n[] = manager.getSelectedNodes();
        jPanel2.removeAll();
        if (n.length == 1) {
            boolean instance = n[0].hasCustomizer();
            if (instance) {
                jPanel2.add(n[0].getCustomizer(), BorderLayout.CENTER);
            }
            jButton1.setEnabled(true);
            jButton2.setEnabled(instance);
        } else {
            jButton1.setEnabled(false);
            jButton2.setEnabled(false);
        }
        jPanel2.validate();
        jPanel2.repaint();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    
    
    private class DeploymentTypeNode extends AbstractNode implements Cookie {
        
        private final DeploymentPlugin d;
        
        public DeploymentTypeNode(DeploymentPlugin d) {
            super(createChildren(d));
            this.d = d;
            getCookieSet().add(this);
            setName(d.getDeploymentMethodDisplayName());
            setIconBaseWithExtension("org/netbeans/modules/mobility/project/ui/resources/deploy.gif");//NOI18N
        }
        
        public void createInstance() {
            NewInstanceDialog nid = new NewInstanceDialog();
            DialogDescriptor dd = new DialogDescriptor(nid, NbBundle.getMessage(MobilityDeploymentManagerPanel.class, "TitleNewInstance"), true, DialogDescriptor.OK_CANCEL_OPTION, DialogDescriptor.OK_OPTION, DialogDescriptor.DEFAULT_ALIGN, new HelpCtx(NewInstanceDialog.class), null); //NOI18N
            nid.setDialogDescriptor(dd);
            if (DialogDescriptor.OK_OPTION.equals(DialogDisplayer.getDefault().notify(dd))) {
                String name = nid.getInstanceName();
                props.createInstance(d.getDeploymentMethodName(), name);
                Children.Array ca = createChildren(d);
                setChildren(ca);
                Node ch = ca.findChild(name);
                if (ch != null) try {
                    manager.setExploredContextAndSelection(this, new Node[]{ch});
                } catch (PropertyVetoException ex) {}
            }
        }
        
        public void refresh() {
            setChildren(createChildren(d));
        }
    }
    
    private Children.Array createChildren(DeploymentPlugin d) {
        final ArrayList<Node> ch = new ArrayList(); 
        for (String name : props.getInstanceList(d.getDeploymentMethodName())) {
            ch.add(new InstanceNode(d, name));
        }
        return new Children.Array() {
            protected Collection<Node> initCollection() {
                return ch;
            }
        };
    }
    
    private class InstanceNode extends AbstractNode implements Cookie {
        
        private final DeploymentPlugin d;
        
        public InstanceNode(DeploymentPlugin d, String name) {
            super(Children.LEAF);
            getCookieSet().add(this);
            this.d = d;
            setName(name);
        }

        public DeploymentPlugin getPlugin() {
            return d;
        }
        
        public boolean hasCustomizer() {
            return true;
        }

        public Component getCustomizer() {
            Component c = d.createGlobalCustomizerPanel();
            registerSubcomponents(c, MobilityDeploymentProperties.DEPLOYMENT_PREFIX+d.getDeploymentMethodName()+'.'+getName()+'.', d.getGlobalPropertyDefaultValues().keySet());
            return c;
        }
        
        public void remove() {
            props.removeInstance(d.getDeploymentMethodName(), getName());
            ((DeploymentTypeNode)getParentNode()).refresh();
        }
    }
    
        
    private void registerSubcomponents(Component c, String prefix, Set propertyNames) {
        String prop = c.getName();
        if (prop != null && propertyNames.contains(prop)) {
            prop = prefix + prop;
            if (c instanceof JCheckBox) {
                vps.register((JCheckBox)c, prop);
            } else if (c instanceof JRadioButton) {
                vps.register((JRadioButton)c, prop);
            } else if (c instanceof JComboBox) {
                vps.register((JComboBox)c, null, prop);
            } else if (c instanceof JSlider) {
                vps.register((JSlider)c, prop);
            } else if (c instanceof JSpinner) {
                vps.register((JSpinner)c, prop);
            } else if (c instanceof JTextComponent) {
                vps.register((JTextComponent)c, prop);
            } else assert false : "Unknown component type for registration"; //NOI18N
        }
        if (c instanceof Container) {
            for (Component sub : ((Container)c).getComponents()) registerSubcomponents(sub, prefix, propertyNames);
        }
    }

}
