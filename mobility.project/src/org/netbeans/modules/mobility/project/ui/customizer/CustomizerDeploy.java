/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

/*
 * Customizer.java
 *
 * Created on 23.Mar 2004, 11:31
 */
package org.netbeans.modules.mobility.project.ui.customizer;

import java.awt.Component;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.text.JTextComponent;
import org.netbeans.api.mobility.project.ui.customizer.ProjectProperties;
import org.netbeans.modules.mobility.project.DefaultPropertiesDescriptor;
import org.netbeans.spi.mobility.deployment.DeploymentPlugin;
import org.netbeans.spi.mobility.project.ui.customizer.CustomizerPanel;
import org.netbeans.spi.mobility.project.ui.customizer.support.VisualPropertySupport;
import org.netbeans.spi.mobility.project.ui.customizer.VisualPropertyGroup;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author  Adam Sotona
 */
public class CustomizerDeploy extends JPanel implements CustomizerPanel, VisualPropertyGroup, ActionListener {
    
    private VisualPropertySupport vps;
    private boolean useDefault;
    private final String[] propertyGroup;
    private final String[] methodNames;
    private final Map<String,DeploymentPlugin> plugins;
    
    /** Creates new form CustomizerConfigs */
    public CustomizerDeploy() {
        initComponents();
        initAccessibility();
        ArrayList<String> propNames = new ArrayList<String>();
        plugins = new TreeMap<String,DeploymentPlugin>();
        propNames.add(DefaultPropertiesDescriptor.DEPLOYMENT_METHOD);
        propNames.add(DefaultPropertiesDescriptor.DEPLOYMENT_OVERRIDE_JARURL);
        propNames.add(DefaultPropertiesDescriptor.DEPLOYMENT_JARURL);
        for ( DeploymentPlugin p : Lookup.getDefault().lookup(new Lookup.Template<DeploymentPlugin>(DeploymentPlugin.class)).allInstances() )
        {
            plugins.put(p.getDeploymentMethodDisplayName(), p);
            propNames.addAll(p.getPropertyDefaultValues().keySet());
        }
        propertyGroup = propNames.toArray(new String[propNames.size()]);
        methodNames = plugins.keySet().toArray(new String[plugins.size()]);
        jComboBoxMethod.addActionListener(this);
        jCheckBoxOverride.addActionListener(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        defaultCheck = new javax.swing.JCheckBox();
        jLabelMethod = new javax.swing.JLabel();
        jComboBoxMethod = new javax.swing.JComboBox();
        jCheckBoxOverride = new javax.swing.JCheckBox();
        jTextFieldURL = new javax.swing.JTextField();
        jLabelExpl = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        customPanel = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        defaultCheck.setMnemonic(org.openide.util.NbBundle.getBundle(CustomizerDeploy.class).getString("MNM_Use_Default").charAt(0));
        defaultCheck.setText(NbBundle.getMessage(CustomizerDeploy.class, "LBL_Use_Default"));
        defaultCheck.setMargin(new java.awt.Insets(0, 0, 0, 2));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(defaultCheck, gridBagConstraints);

        jLabelMethod.setDisplayedMnemonic(NbBundle.getMessage(CustomizerDeploy.class, "MNM_CustDeploy_Method").charAt(0));
        jLabelMethod.setLabelFor(jComboBoxMethod);
        jLabelMethod.setText(NbBundle.getMessage(CustomizerDeploy.class, "LBL_CustDeploy_Method"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        add(jLabelMethod, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 5, 0, 0);
        add(jComboBoxMethod, gridBagConstraints);
        jComboBoxMethod.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(CustomizerDeploy.class, "ACSD_Deployment_Method"));

        jCheckBoxOverride.setMnemonic(NbBundle.getMessage(CustomizerDeploy.class, "MNM_CustDeploy_OverrideURL").charAt(0));
        jCheckBoxOverride.setText(NbBundle.getMessage(CustomizerDeploy.class, "LBL_CustDeploy_OverrideURL"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(11, 5, 0, 0);
        add(jCheckBoxOverride, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 5, 0, 0);
        add(jTextFieldURL, gridBagConstraints);
        jTextFieldURL.getAccessibleContext().setAccessibleName(NbBundle.getMessage(CustomizerDeploy.class, "LBL_CustDeploy_JARURL"));
        jTextFieldURL.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(CustomizerDeploy.class, "ACSD_Deployment_JAR"));

        jLabelExpl.setLabelFor(jTextFieldURL);
        jLabelExpl.setText(NbBundle.getMessage(CustomizerDeploy.class, "LBL_CustDeploy_URLExpl"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(jLabelExpl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        add(jSeparator1, gridBagConstraints);

        customPanel.setLayout(new java.awt.BorderLayout());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(11, 0, 0, 0);
        add(customPanel, gridBagConstraints);

    }// </editor-fold>//GEN-END:initComponents
    
    private void initAccessibility() {
        getAccessibleContext().setAccessibleName(NbBundle.getMessage(CustomizerRun.class, "ACSN_CustDeploy"));
        getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(CustomizerRun.class, "ACSD_CustDeploy"));
    }
    
    public void initValues(ProjectProperties props, String configuration) {
        this.vps = VisualPropertySupport.getDefault(props);
        vps.register(defaultCheck, configuration, this);
    }
    
    public String[] getGroupPropertyNames() {
        return propertyGroup;
    }
    
    public void initGroupValues(final boolean useDefault) {
        this.useDefault = useDefault;
        vps.register(jComboBoxMethod, methodNames, DefaultPropertiesDescriptor.DEPLOYMENT_METHOD, useDefault);
        vps.register(jTextFieldURL, DefaultPropertiesDescriptor.DEPLOYMENT_JARURL, useDefault);
        vps.register(jCheckBoxOverride, DefaultPropertiesDescriptor.DEPLOYMENT_OVERRIDE_JARURL, useDefault);
        jLabelMethod.setEnabled(!useDefault);
        jLabelExpl.setEnabled(!useDefault);
        actionPerformed(null);
    }
    
    public void actionPerformed(final ActionEvent e) {
        if (e == null || e.getSource().equals(jComboBoxMethod)) {
            final String method = (String)jComboBoxMethod.getSelectedItem();
            final DeploymentPlugin p = method == null ? null : plugins.get(method);
            final Component c = p == null ? null : p.createCustomizerPanel();
            if (c != null) registerSubcomponents(c, p.getPropertyDefaultValues().keySet());
            customPanel.setVisible(false);
            customPanel.removeAll();
            if (c != null) customPanel.add(c);
            customPanel.setVisible(true);
            customPanel.repaint();
            customPanel.validate();
        }
        jTextFieldURL.setEditable(jCheckBoxOverride.isEnabled() && jCheckBoxOverride.isSelected());
    }
    
    private void registerSubcomponents(final Component c, final Set propertyNames) {
        final String prop = c.getName();
        if (prop != null && propertyNames.contains(prop)) {
            if (c instanceof JCheckBox) {
                vps.register((JCheckBox)c, prop, useDefault);
            } else if (c instanceof JRadioButton) {
                vps.register((JRadioButton)c, prop, useDefault);
            } else if (c instanceof JComboBox) {
                vps.register((JComboBox)c, null, prop, useDefault);
            } else if (c instanceof JSlider) {
                vps.register((JSlider)c, prop, useDefault);
            } else if (c instanceof JSpinner) {
                vps.register((JSpinner)c, prop, useDefault);
            } else if (c instanceof JTextComponent) {
                vps.register((JTextComponent)c, prop, useDefault);
            } else assert false : "Unknown component type for registration"; //NOI18N
        }
        if (c instanceof Container) {
            final Component sub[] = ((Container)c).getComponents();
            for (int i=0; i<sub.length; i++) registerSubcomponents(sub[i], propertyNames);
        }
        if (useDefault) c.setEnabled(false);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel customPanel;
    private javax.swing.JCheckBox defaultCheck;
    private javax.swing.JCheckBox jCheckBoxOverride;
    private javax.swing.JComboBox jComboBoxMethod;
    private javax.swing.JLabel jLabelExpl;
    private javax.swing.JLabel jLabelMethod;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextFieldURL;
    // End of variables declaration//GEN-END:variables
    
}
