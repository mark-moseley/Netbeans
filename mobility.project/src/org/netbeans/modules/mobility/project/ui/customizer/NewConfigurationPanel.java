/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

/*
 * NewConfigurationPanel.java
 *
 * Created on February 11, 2004, 2:44 PM
 */
package org.netbeans.modules.mobility.project.ui.customizer;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.Collection;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.mobility.cldcplatform.PlatformConvertor;
import org.netbeans.modules.mobility.project.J2MEProjectUtils;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.ErrorManager;
import org.openide.NotifyDescriptor;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.Repository;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.util.HelpCtx;

/**
 *
 * @author  gc149856
 */
public class NewConfigurationPanel extends JPanel implements DocumentListener, ActionListener {
    
    private DialogDescriptor dialogDescriptor;
    final private Collection<String> allNames;
    private String oldName;
    
    /** Creates new form NewConfigurationPanel */
    public NewConfigurationPanel(Collection<String> allNames) {
        this.allNames = allNames;
        initComponents();
        initAccessibility();
        loadTemplateList();
    }
    
    private void loadTemplateList() {
        jComboTemplate.removeAllItems();
        jComboTemplate.addItem(NbBundle.getMessage(NewConfigurationPanel.class, "LBL_NewConfigPanel_EmptyConfiguration")); //NOI18N
        final FileObject fo[] = VisualConfigSupport.getConfigurationTemplates();
        for (int i=0; i<fo.length; i++) jComboTemplate.addItem(fo[i].getName());
    }
    
    public String getName() {
        return jTextFieldName.getText();
    }
    
    public String getTemplate() {
        return jComboTemplate.getSelectedIndex()==0 ? null : (String)jComboTemplate.getSelectedItem();
    }
    
    public void setDialogDescriptor(final DialogDescriptor dd) {
        assert dialogDescriptor == null : "Set the dialog descriptor only once!"; //NOI18N
        dialogDescriptor = dd;
        dd.setHelpCtx(new HelpCtx(NewConfigurationPanel.class));
        jTextFieldName.getDocument().addDocumentListener(this);
        changedUpdate(null);
        oldName = ""; //NOI18N
        jComboTemplate.addActionListener(this);
        jButton1.addActionListener(this);
    }
    
    public boolean isValid() {
        final String name = jTextFieldName.getText();
        if (J2MEProjectUtils.ILEGAL_CONFIGURATION_NAMES.contains(name)) {
            errorPanel.setErrorBundleMessage("ERR_AddCfg_ReservedWord"); //NOI18N
            return false;
        }
        if (!Utilities.isJavaIdentifier(name)) {
            errorPanel.setErrorBundleMessage("ERR_AddCfg_MustBeJavaIdentifier"); //NOI18N
            return false;
        }
        if (allNames.contains(name)) {
            errorPanel.setErrorBundleMessage("ERR_AddCfg_NameExists"); //NOI18N
            return false;
        }
        errorPanel.setErrorBundleMessage(null);
        return true;
    }
    
    public void changedUpdate(@SuppressWarnings("unused")
	final DocumentEvent e) {
        if (dialogDescriptor != null) {
            dialogDescriptor.setValid(isValid());
        }
    }
    
    public void insertUpdate(final DocumentEvent e) {
        changedUpdate(e);
    }
    
    public void removeUpdate(final DocumentEvent e) {
        changedUpdate(e);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jComboTemplate = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        errorPanel = new org.netbeans.modules.mobility.project.ui.customizer.ErrorPanel();

        setLayout(new java.awt.GridBagLayout());

        setMinimumSize(new java.awt.Dimension(450, 200));
        setPreferredSize(new java.awt.Dimension(480, 130));
        jLabel1.setDisplayedMnemonic(org.openide.util.NbBundle.getBundle(NewConfigurationPanel.class).getString("MNM_NewConfigPanel_ConfigurationName").charAt(0));
        jLabel1.setLabelFor(jTextFieldName);
        jLabel1.setText(NbBundle.getMessage(NewConfigurationPanel.class, "LBL_NewConfigPanel_ConfigurationName"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 5, 0, 0);
        add(jTextFieldName, gridBagConstraints);
        jTextFieldName.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(NewConfigurationPanel.class, "ACSD_NewCfg_Name"));

        jLabel2.setDisplayedMnemonic(NbBundle.getMessage(NewConfigurationPanel.class, "MNM_NewConfigPanel_ConfigTemplate").charAt(0));
        jLabel2.setLabelFor(jComboTemplate);
        jLabel2.setText(NbBundle.getMessage(NewConfigurationPanel.class, "LBL_NewConfigPanel_ConfigTemplate"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 0);
        add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 5, 0, 0);
        add(jComboTemplate, gridBagConstraints);
        jComboTemplate.getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(NewConfigurationPanel.class, "ACSD_NewCfg_Template"));

        jButton1.setMnemonic(NbBundle.getMessage(NewConfigurationPanel.class, "MNM_NewConfigPanel_RemoveTmpBtn").charAt(0));
        jButton1.setText(NbBundle.getMessage(NewConfigurationPanel.class, "LBL_NewConfigPanel_RemoveTmpBtn"));
        jButton1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 5, 0, 12);
        add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        add(errorPanel, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
    
    private void initAccessibility() {
        getAccessibleContext().setAccessibleName(NbBundle.getMessage(NewConfigurationPanel.class, "ACSN_NewConfigPanel"));
        getAccessibleContext().setAccessibleDescription(NbBundle.getMessage(NewConfigurationPanel.class, "ACSD_NewConfigPanel"));
    }
    
    public void actionPerformed(final ActionEvent actionEvent) {
        if (jComboTemplate == actionEvent.getSource()) {
            jButton1.setEnabled(jComboTemplate.getSelectedIndex() > 0);
            final String s = jTextFieldName.getText();
            if (s.length() == 0 || s.equals(oldName)) {
                String name = jComboTemplate.getSelectedIndex()==0 ? "" : (String)jComboTemplate.getSelectedItem();
                if (name == null) return;
                if (name.toLowerCase().endsWith(PlatformConvertor.CFG_TEMPLATE_SUFFIX.toLowerCase())) name = name.substring(0, name.length() - PlatformConvertor.CFG_TEMPLATE_SUFFIX.length());
                jTextFieldName.setText(name);
                oldName = jTextFieldName.getText();
            }
        } else if (jButton1 == actionEvent.getSource()) deleteTemplate();
    }
    
    private void deleteTemplate() {
        final String name = (String)jComboTemplate.getSelectedItem();
        if (NotifyDescriptor.YES_OPTION.equals(DialogDisplayer.getDefault().notify(new NotifyDescriptor.Confirmation(NbBundle.getMessage(NewConfigurationPanel.class, "LBL_NewConfigPanel_ConfirmDelete", name), NbBundle.getMessage(NewConfigurationPanel.class, "TITLE_NewConfigPanel_ConfirmDelete"), NotifyDescriptor.YES_NO_OPTION)))) { //NOI18N
            FileObject fo = Repository.getDefault().getDefaultFileSystem().findResource(PlatformConvertor.CFG_TEMPLATES_PATH+'/'+name+'.'+PlatformConvertor.CFG_EXT);
            if (fo == null) fo = Repository.getDefault().getDefaultFileSystem().findResource(PlatformConvertor.CFG_TEMPLATES_PATH+'/'+name+'.'+PlatformConvertor.GCFG_EXT);
            if (fo != null) try {
                fo.delete();
            } catch (IOException ioe) {
                ErrorManager.getDefault().notify(ioe);
            }
            loadTemplateList();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.netbeans.modules.mobility.project.ui.customizer.ErrorPanel errorPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboTemplate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextFieldName;
    // End of variables declaration//GEN-END:variables
    
}
