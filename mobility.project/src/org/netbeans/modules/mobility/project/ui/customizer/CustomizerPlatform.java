/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.mobility.project.ui.customizer;

import java.awt.BorderLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.mobility.project.ui.customizer.ProjectProperties;
import org.netbeans.spi.mobility.project.ui.customizer.ComposedCustomizerPanel;
import org.netbeans.spi.mobility.project.ui.customizer.CustomizerPanel;
import org.netbeans.spi.mobility.project.ui.customizer.HelpCtxCallback;
import org.netbeans.spi.mobility.project.ui.customizer.VisualPropertyGroup;
import org.netbeans.spi.mobility.project.ui.customizer.support.VisualPropertySupport;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.Repository;
import org.openide.loaders.DataFolder;
import org.openide.loaders.DataObject;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 *
 * @author  Adam Sotona
 */
public class CustomizerPlatform extends JPanel implements ComposedCustomizerPanel, VisualPropertyGroup, ChangeListener {
    
    private final ArrayList<JComponent> customizers = new ArrayList();
    private final ArrayList<String> names = new ArrayList();
    
    private HelpCtxCallback callback;
    private JTabbedPane tab;
    
    /** Creates new form CustomizerPlatform */
    public CustomizerPlatform() {
        initComponents();
        FileObject fo = Repository.getDefault().getDefaultFileSystem().findResource("Customizer/org.netbeans.modules.kjava.j2meproject/Platform"); //NOI18N
        DataFolder df = DataFolder.findFolder(fo);
        DataObject dob[] = df.getChildren();
        for (int i=0; i<dob.length; i++) {
            JComponent c = (JComponent)dob[i].getPrimaryFile().getAttribute("customizerPanelClass");
            if (c != null) {
                customizers.add(c);
                names.add(dob[i].getNodeDelegate().getDisplayName());
            }
        }
        if (customizers.size() == 1) {
            add(customizers.get(0), BorderLayout.CENTER);
        } else if (customizers.size() > 1) {
            tab = new JTabbedPane();
            for (int i=0; i<customizers.size(); i++) {
                JComponent c = customizers.get(i);
                c.setBorder(BorderFactory.createEmptyBorder(5, 8, 8, 8));
                tab.add(names.get(i), c);
            }
            add(tab, BorderLayout.CENTER );
            tab.addChangeListener(this);
//            Integer i = tabSelections.get(node);
//            if (i != null && i < tab.getTabCount()) {
//                tab.setSelectedIndex(i);
//            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        defaultCheckBox = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout(0, 12));

        defaultCheckBox.setText(NbBundle.getMessage(CustomizerPlatform.class, "LBL_Use_Default")); // NOI18N
        defaultCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        add(defaultCheckBox, java.awt.BorderLayout.NORTH);

    }// </editor-fold>//GEN-END:initComponents

    public void initValues(ProjectProperties props, String configuration) {
        for (int i=0; i<customizers.size(); i++) {
            Component c = customizers.get(i);
            if (c instanceof CustomizerPanel) ((CustomizerPanel)c).initValues(props, configuration);
        }
        VisualPropertySupport.getDefault(props).register(defaultCheckBox, configuration, this);
    }

    public void initGroupValues(boolean useDefault) {
        for (int i=0; i<customizers.size(); i++) {
            Component c = customizers.get(i);
            if (c instanceof VisualPropertyGroup) ((VisualPropertyGroup)c).initGroupValues(useDefault);
        }
    }

    public String[] getGroupPropertyNames() {
        ArrayList<String> names = new ArrayList();
        for (int i=0; i<customizers.size(); i++) {
            Component c = customizers.get(i);
            if (c instanceof VisualPropertyGroup) names.addAll(Arrays.asList(((VisualPropertyGroup)c).getGroupPropertyNames()));
        }
        return names.toArray(new String[names.size()]);
    }

    public void setHelpContextCallback(HelpCtxCallback callback) {
        this.callback = callback;
        if (customizers.size() == 1) callback.updateHelpCtx(new HelpCtx(customizers.get(0).getClass()));
        if (tab != null) stateChanged(null);
    }

    public void stateChanged(ChangeEvent e) {
        if (callback != null) callback.updateHelpCtx(new HelpCtx(tab.getSelectedComponent().getClass()));
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox defaultCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
