# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
#
#  You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.

#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License (the License). You may not use this file except in
# compliance with the License.
# 
# You can obtain a copy of the License at http://www.netbeans.org/cddl.html
# or http://www.netbeans.org/cddl.txt.
# 
# When distributing Covered Code, include this CDDL Header Notice in each file
# and include the License file at http://www.netbeans.org/cddl.txt.
# If applicable, add the following below the CDDL Header, with the fields
# enclosed by brackets [] replaced by your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.
#
# Sample ResourceBundle properties file
CTL_EditorWindow=Collaboration Editor (eTL)
CTL_EditorWindowDescription=Creates and edits a collaboration that specifies an eTL process

# ETL Operators
#Operator groups
LBL_String=String
LBL_Number=Number
LBL_Sql=SQL-Specific
LBL_Date=Date
LBL_Comp=Comparison
LBL_Cond=Boolean
LBL_External=External
LBL_Validation=Validation
LBL_Cleansing=Cleansing

#Operator replace
LBL_String_replace = replace
LBL_String_displayname_replace_inputparam1=source string
LBL_String_displayname_replace_inputparam2=to be replaced
LBL_String_displayname_replace_inputparam3=to substitute
LBL_String_displayname_replace_outputparam1=result (varchar)
TOOLTIP_String_replace = Replace a String
TOOLTIP_String_replace_inputParm1 = Input String
TOOLTIP_String_replace_inputParm2 = Substring of Input String Being Replaced
TOOLTIP_String_replace_inputParm3 = Replacement String
TOOLTIP_String_replace_outputParm1 = Resultant String

#Operator touppercase
LBL_String_touppercase = touppercase
LBL_String_displayname_touppercase_inputparam1=string to convert
LBL_String_displayname_touppercase_outputparam1=result (varchar)
TOOLTIP_String_touppercase = Convert String to Uppercase
TOOLTIP_String_touppercase_inputParm1 = Input String
TOOLTIP_String_touppercase_outputParm1 = Resultant String

#Operator tolowercase
LBL_String_tolowercase = tolowercase
LBL_String_displayname_tolowercase_inputparam1=string to convert
LBL_String_displayname_tolowercase_outputparam1=result (varchar)
TOOLTIP_String_tolowercase = Convert String to Lowercase
TOOLTIP_String_tolowercase_inputParm1 = Input String
TOOLTIP_String_tolowercase_outputParm1 = Resultant String

#Operator length
LBL_String_length = length
LBL_String_displayname_length_inputparam1=string
LBL_String_displayname_length_outputparam1=result (numeric)
TOOLTIP_String_length = Calculate length of given String
TOOLTIP_String_length_inputParm1 = Input string
TOOLTIP_String_length_outputParm1 = Resultant number

#Operator numberToHex
LBL_String_numberToHex=number to hex
LBL_String_displayname_numberToHex_inputparam1=integer value
LBL_String_displayname_numberToHex_outputparam1=result (string)
TOOLTIP_String_numberToHex=Converts numeric value to DB-specific hexadecimal representation
TOOLTIP_String_numberToHex_inputParam1=numeric value to convert
TOOLTIP_String_numberToHex_outputParam1=hexadecimal representation

#Operator stringToHex
LBL_String_stringToHex=string to hex
LBL_String_displayname_stringToHex_inputparam1=string
LBL_String_displayname_stringToHex_outputparam1=result (string)
TOOLTIP_String_stringToHex=Converts input characters to DB-specific hexadecimal representation
TOOLTIP_String_stringToHex_inputParam1=string to convert
TOOLTIP_String_stringToHex_outputParam1=hexadecimal representation

#Operator lefttrim
LBL_String_lefttrim = lefttrim
LBL_String_displayname_lefttrim_inputparam1=string to trim
LBL_String_displayname_lefttrim_outputparam1=result (varchar)
TOOLTIP_String_lefttrim = Trim String (Remove White Space) From Left
TOOLTIP_String_lefttrim_inputParm1 = Input String
TOOLTIP_String_lefttrim_outputParm1 = Resultant String

#Operator righttrim
LBL_String_righttrim = righttrim
LBL_String_displayname_righttrim_inputparam1=string to trim
LBL_String_displayname_righttrim_outputparam1=result (varchar)
TOOLTIP_String_righttrim = Trim String (Remove White Space) From Right
TOOLTIP_String_righttrim_inputParm1 = Input String
TOOLTIP_String_righttrim_outputParm1 = Resultant String

#Operator substring
LBL_String_substring = substring
LBL_String_displayname_substring_inputparam1=string
LBL_String_displayname_substring_inputparam2=startpos
LBL_String_displayname_substring_inputparam3=length
LBL_String_displayname_substring_outputparam1=result (varchar)
TOOLTIP_String_substring = Create Substring From The Given Input String
TOOLTIP_String_substring_inputParm1 = Input String
TOOLTIP_String_substring_inputParm2 = Substring start position in Input String
TOOLTIP_String_substring_inputParm3 = Length of substring to be extracted
TOOLTIP_String_substring_outputParm1 = Resultant String

#Operator varconcat
LBL_String_varconcat = concat
LBL_String_displayname_varconcat_inputparam1=string
LBL_String_displayname_varconcat_outputparam1=result (varchar)
TOOLTIP_String_varconcat = Concatenate Multiple Strings
TOOLTIP_String_varconcat_inputParm1 = Input Strings
TOOLTIP_String_varconcat_outputParm1 = Resultant String

#Operator sum
LBL_Number_sum = sum
LBL_Number_displayname_sum_inputparam1=column
LBL_Number_displayname_sum_outputparam1=result (numeric)
TOOLTIP_Number_sum = Compute sum of all rows of a column
TOOLTIP_Number_sum_inputParm1 = Column over which to sum values
TOOLTIP_Number_sum_outputParm1 = Resultant number

#Operator avg
LBL_Number_avg=average
LBL_Number_displayname_avg_inputparam1=column
LBL_Number_displayname_avg_outputparam1=result (numeric)
TOOLTIP_Number_avg = Compute average of all rows of a column
TOOLTIP_Number_avg_inputParm1 = Column over which to compute average
TOOLTIP_Number_avg_outputParm1 = Resultant number

#Operator min
LBL_Number_min=minimum
LBL_Number_displayname_min_inputparam1=column
LBL_Number_displayname_min_outputparam1=result (numeric)
TOOLTIP_Number_min = Find minimum value in all rows of a column
TOOLTIP_Number_min_inputParm1 = Column over which to find minimum
TOOLTIP_Number_min_outputParm1 = Resultant number

#Operator max
LBL_Number_max=maximum
LBL_Number_displayname_max_inputparam1=column
LBL_Number_displayname_max_outputparam1=result (numeric)
TOOLTIP_Number_max = Find maximum value in all rows of a column
TOOLTIP_Number_max_inputParm1 = Column over which to find minimum
TOOLTIP_Number_max_outputParm1 = Resultant number

#Operator subtraction
LBL_Number_subtraction = subtraction
LBL_Number_displayname_subtraction_inputparam1=minuend
LBL_Number_displayname_subtraction_inputparam2=subtrahend
LBL_Number_displayname_subtraction_outputparam1=result (numeric)
TOOLTIP_Number_subtraction = Subtract Two Numbers
TOOLTIP_Number_subtraction_inputParm1 = First Number
TOOLTIP_Number_subtraction_inputParm2 = Second Number
TOOLTIP_Number_subtraction_outputParm1 = Resultant Number

#Operator multiplication
LBL_Number_multiplication = multiplication
LBL_Number_displayname_multiplication_inputparam1=multiplicand 1
LBL_Number_displayname_multiplication_inputparam2=multiplicand 2
LBL_Number_displayname_multiplication_outputparam1=result (numeric)
TOOLTIP_Number_multiplication = Multiply Two Numbers
TOOLTIP_Number_multiplication_inputParm1 = First Number
TOOLTIP_Number_multiplication_inputParm2 = Second Number
TOOLTIP_Number_multiplication_outputParm1 = Resultant Number

#Operator division
LBL_Number_division = division
LBL_Number_displayname_division_inputparam1=dividend
LBL_Number_displayname_division_inputparam2=divisor
LBL_Number_displayname_division_outputparam1=result (numeric)
TOOLTIP_Number_division = Divide Two Numbers
TOOLTIP_Number_division_inputParm1 = Dividend
TOOLTIP_Number_division_inputParm2 = Divisor
TOOLTIP_Number_division_outputParm1 = Resultant Number

#Operator modulo
LBL_Number_modulo = mod
LBL_Number_displayname_modulo_inputparam1=dividend
LBL_Number_displayname_modulo_inputparam2=divisor
LBL_Number_displayname_modulo_outputparam1=result (numeric)
TOOLTIP_Number_modulo = Compute Remainder of Integer Division Between Two Numbers
TOOLTIP_Number_modulo_inputParm1 = Dividend
TOOLTIP_Number_modulo_inputParm2 = Divisor
TOOLTIP_Number_modulo_outputParm1 = Resultant Number

#Operator absolutevalue
LBL_Number_absolutevalue = absolutevalue
LBL_Number_displayname_absolutevalue_inputparam1=input
LBL_Number_displayname_absolutevalue_outputparam1=result (numeric)
TOOLTIP_Number_absolutevalue = Convert Number to Absolute Value
TOOLTIP_Number_absolutevalue_inputParm1 = Input Number
TOOLTIP_Number_absolutevalue_outputParm1 = Resultant Number

#Operator varadd
LBL_Number_varadd = addition
LBL_Number_displayname_varadd_inputparam1=addend
LBL_Number_displayname_varadd_outputparam1=result (numeric)
TOOLTIP_Number_varadd = Add Multiple Numbers
TOOLTIP_Number_varadd_inputParm1 = Input Numbers
TOOLTIP_Number_varadd_outputParm1 = Resultant Number

#Operator join
LBL_Sql_join = join
LBL_Sql_displayname_join_inputparam1=left
LBL_Sql_displayname_join_inputparam2=right
LBL_Sql_displayname_join_outputparam1=result (numeric)
TOOLTIP_Sql_join = Create Join Between Two Tables
TOOLTIP_Sql_join_inputParm1 = Left Table
TOOLTIP_Sql_join_inputParm2 = Right Table
TOOLTIP_Sql_join_outputParm1 = Connect to Some Other Join for Nested Join

#Operator case
LBL_Sql_case = case
LBL_Sql_displayname_case_inputparam1=condition
LBL_Sql_displayname_case_outputparam1=result
TOOLTIP_Sql_case = SQL Case Expression
TOOLTIP_Sql_case_inputParm1 = Condition for a When Expression
TOOLTIP_Sql_case_outputParm1 = Value of Case Expression

#Operator count
LBL_Sql_count=count
LBL_Sql_displayname_count_inputparam1=column
LBL_Sql_displayname_count_outputparam1=result (numeric)
TOOLTIP_Sql_count = Count of all rows of a column or use * for whole table row count
TOOLTIP_Sql_count_inputParm1 = Column over which to compute count or use * for whole table row count
TOOLTIP_Sql_count_outputParm1 = Resultant number
#Operator literal
LBL_Sql_literal = literal
LBL_Sql_displayname_literal_outputparam1=result
TOOLTIP_Sql_literal = User-Defined Literal Value
TOOLTIP_Sql_literal_outputParm1 = User-Defined Value

#Operator runtime arg
LBL_Sql_runtimeArg = runtime Args
LBL_Sql_displayname_runtimeArg_outputparam1=arg
TOOLTIP_Sql_runtimeArg = User-Defined Runtime Argument
TOOLTIP_Sql_runtimeArg_outputParm1 = User-Defined Runtime Argument

#Operator null
LBL_Sql_null = NULL
LBL_Sql_displayname_null_outputparam1=null
TOOLTIP_Sql_null = Inserts SQL NULL value
TOOLTIP_Sql_null_outputParm1=NULL value

#Operator castas
LBL_Sql_castas=castas
LBL_Sql_displayname_castas_inputparam1=column
LBL_Sql_displayname_castas_inputparam2=type
LBL_Sql_displayname_castas_outputparam1=result
TOOLTIP_Sql_castas=Explicitly casts input value to the specified type
TOOLTIP_Sql_castas_inputParam1=Source column name
TOOLTIP_Sql_castas_inputParam2=Cast to data type
TOOLTIP_Sql_castas_outputParam=Casted result; may be truncated
LBL_castas_displayvalues_inputParam3=bigint,bit,char,date,decimal,float,integer,numeric,real,smallint,time,timestamp,tinyint,longvarchar,varchar,binary,longvarbinary,varbinary

#predicate equal
LBL_Comp_equal=equal
LBL_Comp_displayname_equal_inputparam1=left
LBL_Comp_displayname_equal_inputparam2=right
LBL_Comp_displayname_equal_outputparam1=result (boolean)
TOOLTIP_Comp_equal=Compare for Equality
TOOLTIP_Comp_equal_inputParm1=Left Argument to Compare
TOOLTIP_Comp_equal_inputParm2=Right Argument to Compare
TOOLTIP_Comp_equal_outputParm1=True if Equal

#predicate not_equal
LBL_Comp_not_equal=not equal
LBL_Comp_displayname_not_equal_inputparam1=left
LBL_Comp_displayname_not_equal_inputparam2=right
LBL_Comp_displayname_not_equal_outputparam1=result (boolean)
TOOLTIP_Comp_not_equal=Compare for Inequality
TOOLTIP_Comp_not_equal_inputParm1=Left Argument to Compare
TOOLTIP_Comp_not_equal_inputParm2=Right Argument to Compare
TOOLTIP_Comp_not_equal_outputParm1=True if Unequal

#predicate lesser_than
LBL_Comp_lesser_than=lesser than
LBL_Comp_displayname_lesser_than_inputparam1=left
LBL_Comp_displayname_lesser_than_inputparam2=right
LBL_Comp_displayname_lesser_than_outputparam1=result (boolean)
TOOLTIP_Comp_lesser_than=Compare if Lesser Than
TOOLTIP_Comp_lesser_than_inputParm1=Left Argument to Compare
TOOLTIP_Comp_lesser_than_inputParm2=Right Argument to Compare
TOOLTIP_Comp_lesser_than_outputParm1=True if Left Less Than Right

#predicate lesser_equal
LBL_Comp_lesser_equal=lesser or equal
LBL_Comp_displayname_lesser_equal_inputparam1=left
LBL_Comp_displayname_lesser_equal_inputparam2=right
LBL_Comp_displayname_lesser_equal_outputparam1=result (boolean)
TOOLTIP_Comp_lesser_equal=Compare if Lesser Than or Equal to
TOOLTIP_Comp_lesser_equal_inputParm1=Left Argument to Compare
TOOLTIP_Comp_lesser_equal_inputParm2=Right Argument to Compare
TOOLTIP_Comp_lesser_equal_outputParm1=True if Left Lesser Than or Equal to Right

#predicate greater_than
LBL_Comp_greater_than=greater than
LBL_Comp_displayname_greater_than_inputparam1=left
LBL_Comp_displayname_greater_than_inputparam2=right
LBL_Comp_displayname_greater_than_outputparam1=result (boolean)
TOOLTIP_Comp_greater_than=Compare if Greater Than
TOOLTIP_Comp_greater_than_inputParm1=Left Argument to Compare
TOOLTIP_Comp_greater_than_inputParm2=Right Argument to Compare
TOOLTIP_Comp_greater_than_outputParm1=True if Left Greater Than Right

#predicate greater_equal
LBL_Comp_greater_equal=greater or equal
LBL_Comp_displayname_greater_equal_inputparam1=left
LBL_Comp_displayname_greater_equal_inputparam2=right
LBL_Comp_displayname_greater_equal_outputparam1=result (boolean)
TOOLTIP_Comp_greater_equal=Compare if Greater Than or Equal to
TOOLTIP_Comp_greater_equal_inputParm1=Left Argument to Compare
TOOLTIP_Comp_greater_equal_inputParm2=Right Argument to Compare
TOOLTIP_Comp_greater_equal_outputParm1=True if Left Greater Than or Equal to Right

#predicate like
LBL_Comp_like=like
LBL_Comp_displayname_like_inputparam1=input (varchar)
LBL_Comp_displayname_like_inputparam2=pattern (varchar)
LBL_Comp_displayname_like_outputparam1=result (boolean)
TOOLTIP_Comp_like=SQL LIKE operator, compare if Char/Varchar Matches String Pattern
TOOLTIP_Comp_like_inputParm1=Left Char/Varchar String
TOOLTIP_Comp_like_inputParm2=String Pattern
TOOLTIP_Comp_like_outputParm1=True if Left Matches Right Pattern

#predicate is
LBL_Comp_is=is null
LBL_Comp_displayname_is_inputparam1=column
LBL_Comp_displayname_is_outputparam1=result (boolean)
TOOLTIP_Comp_is=Check if input column is null
TOOLTIP_Comp_is_inputParm1=Input Column
TOOLTIP_Comp_is_outputParm1=True if Input column is Null

#predicate is not null
LBL_Comp_is_not=is not null
LBL_Comp_displayname_is_not_inputparam1=column
LBL_Comp_displayname_is_not_outputparam1=result (boolean)
TOOLTIP_Comp_is_not=Check if input column is not null
TOOLTIP_Comp_is_not_inputParm1=Input Column
TOOLTIP_Comp_is_not_outputParm1=True if Input column is Not Null

#predicate and
LBL_Cond_and=and
LBL_Cond_displayname_and_inputparam1=left
LBL_Cond_displayname_and_inputparam2=right
LBL_Cond_displayname_and_outputparam1=result (boolean)
TOOLTIP_Cond_and=Evaluate Two Boolean Arguments with AND
TOOLTIP_Cond_and_inputParm1=Left Argument to AND
TOOLTIP_Cond_and_inputParm2=Right Argument to AND
TOOLTIP_Cond_and_outputParm1=Results of Left AND Right

#predicate or
LBL_Cond_or=or
LBL_Cond_displayname_or_inputparam1=left
LBL_Cond_displayname_or_inputparam2=right
LBL_Cond_displayname_or_outputparam1=result (boolean)
TOOLTIP_Cond_or=Evaluate Two Boolean Arguments with OR
TOOLTIP_Cond_or_inputParm1=Left Argument to OR
TOOLTIP_Cond_or_inputParm2=Right Argument to OR
TOOLTIP_Cond_or_outputParm1=Results of Left OR Right

#predicate not
LBL_Cond_not=not
LBL_Cond_displayname_not_inputparam1=expr (boolean)
LBL_Cond_displayname_not_outputparam1=result (boolean)
TOOLTIP_Cond_not=NOT operator, negates the boolean expression
TOOLTIP_Cond_not_inputParm1=input boolean expression
TOOLTIP_Cond_not_outputParm1=Results NOT of expr

#Operator now
LBL_Date_now=now
LBL_Date_displayname_now_outputParam1=timestamp
TOOLTIP_Date_now=Inserts timestamp representing current date/time
TOOLTIP_Date_now_outputParam1=timestamp of current date/time

#Operator datediff
LBL_Date_datediff=date difference
LBL_Date_displayname_datediff_inputParam1=date minuend
LBL_Date_displayname_datediff_inputParam2=date subtrahend
LBL_Date_displayname_datediff_inputParam3=type
LBL_Date_displayname_datediff_outputParam1=result (numeric)
TOOLTIP_Date_datediff=Difference of two dates in specified interval
TOOLTIP_Date_datediff_inputParam1=First Timestamp
TOOLTIP_Date_datediff_inputParam2=Second Timestamp
TOOLTIP_Date_datediff_inputParam3=Interval type
TOOLTIP_Date_datediff_outputParam1=Result as units of specified interval

#Operator dateadd
LBL_Date_dateadd=add to date
LBL_Date_displayname_dateadd_inputParam1=date
LBL_Date_displayname_dateadd_inputParam2=interval
LBL_Date_displayname_dateadd_inputParam3=type
LBL_Date_displayvalues_dateadd_inputParam3=second,minute,hour,day,week,month,quarter,year
LBL_Date_displayname_dateadd_outputParam1=result (timestamp)
TOOLTIP_Date_dateadd=Increment date by specified interval
TOOLTIP_Date_dateadd_inputParam1=Timestamp
TOOLTIP_Date_dateadd_inputParam2=Interval (in units)
TOOLTIP_Date_dateadd_inputParam3=Interval type
TOOLTIP_Date_dateadd_outputParam1=Result as timestamp with interval added

#
# Common date/time format resources
#
LBL_Date_common_format=date/time format
TOOLTIP_Date_common_format=date/time format
LBL_Date_displayvalues_common_dateformats=,,,,,,,,,,,,,,,,,,,,,,,,,,,,,ISO 8601,,


#Operator datetochar
LBL_Date_datetochar=date to string
LBL_Date_displayname_datetochar_inputParam1=date
LBL_Date_displayname_datetochar_outputParam1=result (varchar)

TOOLTIP_Date_datetochar=Convert timestamp to varchar using specified format
TOOLTIP_Date_datetochar_inputParam1=Timestamp to convert
TOOLTIP_Date_datetochar_outputParam1=Result as varchar in specified date format

#Operator chartodate
LBL_Date_chartodate=string to date
LBL_Date_displayname_chartodate_inputParam1=varchar
LBL_Date_displayname_chartodate_outputParam1=result (timestamp)

TOOLTIP_Date_chartodate=Convert varchar to timestamp using specified format
TOOLTIP_Date_chartodate_inputParam1=Varchar to convert
TOOLTIP_Date_chartodate_outputParam1=Result as timestamp

#Operator datepart
LBL_Date_datepart=date part
LBL_Date_displayname_datepart_inputParam1=date part
LBL_Date_displayname_datepart_inputParam2=timestamp
LBL_Date_displayname_datepart_outputParam1=result (varchar)
TOOLTIP_Date_datepart=Extract date/time part from a timestamp

TOOLTIP_Date_datepart_inputParam1=Part of timestamp to extract
TOOLTIP_Date_datepart_inputParam2=Timestamp from which to extract
TOOLTIP_Date_datepart_outputParam1=Result as varchar

LBL_Date_displayvalues_datepart_inputParam1=day of week (numeric),day of week (abbreviated),day of week (full),day,month (numeric),month (abbreviated),month (full),year (4-digit), year (2-digit),hour (0-23),hour (1-12),hour (1-24),minute,second,week of year,quarter,millisecond,AM/PM

#Operator matches
LBL_Validation_matches=matches
LBL_Validation_displayname_matches_inputparam1=varchar
LBL_Validation_displayname_matches_inputparam2=regexp pattern
LBL_Validation_displayname_matches_outputparam1=result (boolean)
TOOLTIP_Validation_matches=Validates varchar against regular expression pattern
TOOLTIP_Validation_matches_inputParam1=Varchar to validate
TOOLTIP_Validation_matches_inputParam2=Regular expression pattern
TOOLTIP_Validation_matches_outputParam1=True if varchar matches regexp

# Validation regexp display values:  OK for I18N
LBL_Validation_displayvalues_matches_inputParam2=[any],ZIP or ZIP+4 code (USA),SSN (USA)

#Operator isvaliddatetime
LBL_Validation_isvaliddatetime=is valid datetime
LBL_Validation_displayname_isvaliddatetime_inputParam1=varchar
LBL_Validation_displayname_isvaliddatetime_outputParam1=result (boolean)

TOOLTIP_Validation_isvaliddatetime=Indicates whether input matches the specified date/time format
TOOLTIP_Validation_isvaliddatetime_inputParam1=String to validate
TOOLTIP_Validation_isvaliddatetime_outputParam1=True if input matches date/time format


#
# Common resources for cleansing operators
#

# Locale display values:  OK for I18N
LBL_Cleansing_displayvalues_common_locale=United States,United Kingdom

#Operator normalizeName
LBL_Cleansing_normalizeName=normalize name
LBL_Cleansing_displayname_normalizeName_inputparam1=element
LBL_Cleansing_displayname_normalizeName_inputparam2=varchar
LBL_Cleansing_displayname_normalizeName_inputparam3=locale
LBL_Cleansing_displayname_normalizeName_outputparam1=result (varchar)
TOOLTIP_Cleansing_normalizeName=Normalizes specified part of a person's name from a varchar
TOOLTIP_Cleansing_normalizeName_inputParam1=Name part
TOOLTIP_Cleansing_normalizeName_inputParam2=Varchar to normalize
TOOLTIP_Cleansing_normalizeName_inputParam3=Locale
TOOLTIP_Cleansing_normalizeName_outputParam1=Result as varchar

# CSV resource:  NOI18N
LBL_Cleansing_displayvalues_normalizeName_inputparam1=first name,last name

#Operator parseAddress
LBL_Cleansing_parseAddress=parse address
LBL_Cleansing_displayname_parseAddress_inputparam1=element
LBL_Cleansing_displayname_parseAddress_inputparam2=varchar
LBL_Cleansing_displayname_parseAddress_inputparam3=locale
LBL_Cleansing_displayname_parseAddress_outputparam1=result (varchar)
TOOLTIP_Cleansing_parseAddress=Parses address elements in a varchar
TOOLTIP_Cleansing_parseAddress_inputParam1=address part to return
TOOLTIP_Cleansing_parseAddress_inputParam2=varchar to parse
TOOLTIP_Cleansing_parseAddress_inputParam3=locale
TOOLTIP_Cleansing_parseAddress_outputParam1=Result as varchar

LBL_Cleansing_displayvalues_parseAddress_inputparam1=unit or apt description,unit or apt #,house #,matched street name,street type,original street name,street pref direction
#
#Operator parseBusinessName
#
LBL_Cleansing_parseBusinessName=parse business name
LBL_Cleansing_displayname_parseBusinessName_inputparam1=element
LBL_Cleansing_displayname_parseBusinessName_inputparam2=varchar
LBL_Cleansing_displayname_parseBusinessName_inputparam3=locale
LBL_Cleansing_displayname_parseBusinessName_outputparam1=result (varchar)
TOOLTIP_Cleansing_parseBusinessName=Parses business name elements in a varchar
TOOLTIP_Cleansing_parseBusinessName_inputParam1=element to return
TOOLTIP_Cleansing_parseBusinessName_inputParam2=varchar to parse
TOOLTIP_Cleansing_parseBusinessName_inputParam3=locale
TOOLTIP_Cleansing_parseBusinessName_outputParam1=Result as varchar

#Operator nullif
LBL_Nullif=nullif
LBL_Comp_displayname_Nullif_inputparam1=exp (any type)
LBL_Comp_displayname_Nullif_inputparam2=value (any type)
LBL_Comp_displayname_Nullif_outputparam1=result
TOOLTIP_Nullif=SQL NULLIF operator.
TOOLTIP_Nullif_inputParm1=Input expression
TOOLTIP_Nullif_inputParm2=Input value to compare against exp.
TOOLTIP_Nullif_outputParm1=Returns NULL if exp = value else exp.

#Operator Coalesce
LBL_Coalesce=coalesce
LBL_Comp_displayname_Coalesce_inputparam1=col1 (any type)
LBL_Comp_displayname_Coalesce_inputparam2=col2 (any type)
LBL_Comp_displayname_Coalesce_outputparam1=result (any type)
TOOLTIP_Coalesce=SQL COALESCE operator
TOOLTIP_Coalesce_inputParm1=Input col1 
TOOLTIP_Coalesce_inputParm2=Input col2
TOOLTIP_Coalesce_outputParm1=Returns col2 if col1 is null else col1.

#Operator sign
LBL_Sign=sign
LBL_Comp_displayname_Sign_inputparam1=exp (numeric)
LBL_Comp_displayname_Sign_outputparam1=result (numeric)
TOOLTIP_Sign=SQL SIGN operator
TOOLTIP_Sign_inputParm1=Input numeric expression 
TOOLTIP_Sign_outputParm1=Returns -1 if input exp is -ve, +1 if exp is +ve else 0.

#Operator userFx
LBL_String_userfx = userFx
LBL_String_displayname_userfx_inputparam1=arg (any type)
LBL_String_displayname_userfx_outputparam1=result (any type)
TOOLTIP_String_userfx = User specific function
TOOLTIP_String_userfx_inputParm1 = Input argument (any type)
TOOLTIP_String_userfx_outputParm1 = Output (any type) 

# CSV resource: NOI18N
# FIXME - Dummy choice values - replace with legal values per Axion/eView)
LBL_Cleansing_displayvalues_parseBusinessName_inputparam1=firm name,firm type



