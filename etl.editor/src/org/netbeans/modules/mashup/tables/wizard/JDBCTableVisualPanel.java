package org.netbeans.modules.mashup.tables.wizard;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.netbeans.api.db.explorer.ConnectionManager;
import org.netbeans.api.db.explorer.DatabaseConnection;
import org.netbeans.modules.sql.framework.common.utils.DBExplorerUtil;
import org.netbeans.modules.sql.framework.model.DBMetaDataFactory;

public final class JDBCTableVisualPanel extends JPanel {

    private JDBCTablePanel owner;
    private boolean canAdvance = false;
    private Map<String, String> userMap = new HashMap<String, String>();
    private Map<String, String> passwdMap = new HashMap<String, String>();
    private DBMetaDataFactory meta = new DBMetaDataFactory();
    DatabaseConnection conn = null;
    private Map<String, String> driverMap = new HashMap<String, String>();

    /**
     * Creates new form ChooseTableVisualPanel
     */
    public JDBCTableVisualPanel(JDBCTablePanel panel) {
        owner = panel;
        initComponents();
        connectionList.setModel(new DefaultListModel());
        tableList.setModel(new DefaultListModel());
        connectionList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        selectButton.setEnabled(false);
        removeButton.setEnabled(false);
        populateConnections();
        connectionList.addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {
            }

            public void mousePressed(MouseEvent e) {
            }

            public void mouseReleased(MouseEvent e) {
                DefaultListModel model = (DefaultListModel) connectionList.getModel();
                String jdbcUrl = (String) connectionList.getSelectedValue();
                DatabaseConnection dbConn = null;
                DatabaseConnection dbConns[] = ConnectionManager.getDefault().getConnections();
                for (DatabaseConnection dc : dbConns) {
                    if (dc.getDatabaseURL().equals(jdbcUrl)) {
                        dbConn = dc;
                        break;
                    }
                }

                conn = dbConn;
                ConnectionManager.getDefault().showConnectionDialog(conn);
                try {
                    userMap.put(conn.getDatabaseURL(), conn.getUser());
                    passwdMap.put(conn.getDatabaseURL(), conn.getPassword());
                    driverMap.put(conn.getDatabaseURL(), conn.getDriverClass());
                    meta.connectDB(DBExplorerUtil.createConnection(conn));
                    String[] schemas = meta.getSchemas();
                    schemaCombo.removeAllItems();
                    for (String schema : schemas) {
                        schemaCombo.addItem(schema);
                    }
                    if (schemaCombo.getItemCount() != 0) {
                        String schema = (String) schemaCombo.getItemAt(0);
                        populateTable(schema);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

            public void mouseEntered(MouseEvent e) {
            }

            public void mouseExited(MouseEvent e) {
            }
        });
    }

    @Override
    public String getName() {
        return "Choose Connection Details";
    }

    public DefaultTableModel getTables() {
        return (DefaultTableModel) jTable1.getModel();
    }

    public void cleanup() {
        try {
            if (meta != null) {
                meta.disconnectDB();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        connectionList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableList = new javax.swing.JList();
        schemaCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        error = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        selectButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Table Selection"));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Table Name", "Schema", "Connection Url"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jScrollPane3.setViewportView(jTable1);

        connectionList.setBorder(javax.swing.BorderFactory.createTitledBorder("Connections"));
        connectionList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(connectionList);

        jScrollPane2.setViewportView(tableList);

        schemaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                schemaComboActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Schema");

        error.setForeground(new java.awt.Color(255, 0, 0));

        org.openide.awt.Mnemonics.setLocalizedText(selectButton, "Select");
        selectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(removeButton, "Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, selectButton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, removeButton)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(selectButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(removeButton))
        );

        jLabel2.setForeground(new java.awt.Color(0, 51, 255));
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, "Tables");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(error, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 232, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel1)
                                    .add(jLabel2))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(schemaCombo, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)))
                            .add(layout.createSequentialGroup()
                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 357, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel1)
                            .add(schemaCombo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                            .add(jScrollPane2, 0, 0, Short.MAX_VALUE)))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 131, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)))
                .add(error, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int[] rows = jTable1.getSelectedRows();
        final DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int row : rows) {
            model.removeRow(row);
        }
        Runnable run = new Runnable() {

            public void run() {
                jTable1.setModel(model);
            }
        };
        SwingUtilities.invokeLater(run);
        owner.fireChangeEvent();        
    }//GEN-LAST:event_removeButtonActionPerformed

    private void selectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectButtonActionPerformed
        final DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object[] tables = tableList.getSelectedValues();
        String schema = (String) schemaCombo.getSelectedItem();
        String jdbcUrl = (String) connectionList.getSelectedValue();
        for (Object table : tables) {
            Vector row = new Vector();
            row.add(table);
            row.add(schema);
            row.add(jdbcUrl);
            model.addRow(row);
        }
        if (model.getRowCount() != 0) {
            removeButton.setEnabled(true);
            error.setText("");
            canAdvance = true;
        } else {
            removeButton.setEnabled(false);
            error.setText("No table available for processing.");
            canAdvance = false;
        }
        Runnable run = new Runnable() {

            public void run() {
                jTable1.setModel(model);
            }
        };
        SwingUtilities.invokeLater(run);
        owner.fireChangeEvent();
    }//GEN-LAST:event_selectButtonActionPerformed

    private void schemaComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemaComboActionPerformed
        JComboBox combo = (JComboBox) evt.getSource();
        String schema = (String) combo.getSelectedItem();
        populateTable(schema);
    }//GEN-LAST:event_schemaComboActionPerformed

    private void populateTable(String schema) {
        if (conn != null) {
            try {
                DefaultListModel model = (DefaultListModel) tableList.getModel();
                model.clear();
                meta.connectDB(DBExplorerUtil.createConnection(conn));
                String[][] tables = meta.getTablesAndViews("", schema, "", false);
                String[] currTable = null;
                if (tables != null) {
                    for (int i = 0; i < tables.length; i++) {
                        currTable = tables[i];
                        model.addElement(currTable[DBMetaDataFactory.NAME]);
                    }
                }
                if (model.getSize() != 0) {
                    selectButton.setEnabled(true);
                } else {
                    selectButton.setEnabled(false);
                }
                tableList.setModel(model);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private void populateConnections() {
        DefaultListModel model = (DefaultListModel) connectionList.getModel();
        model.clear();
        driverMap.clear();
        DatabaseConnection connections[] = ConnectionManager.getDefault().getConnections();
        for (DatabaseConnection conn1 : connections) {
            model.addElement(conn1.getDatabaseURL());
        }
        setModel(connectionList, model);
    }

    private void setModel(final JList list, final DefaultListModel model) {
        Runnable run = new Runnable() {

            public void run() {
                list.setModel(model);
            }
        };
        SwingUtilities.invokeLater(run);
    }

    public Map<String, String> getUserMap() {
        return userMap;
    }

    public Map<String, String> getPasswordMap() {
        return passwdMap;
    }

    public Map<String, String> getDriverMap() {
        return driverMap;
    }

    public boolean canAdvance() {
        return (jTable1.getModel().getRowCount() != 0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList connectionList;
    private javax.swing.JLabel error;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton removeButton;
    private javax.swing.JComboBox schemaCombo;
    private javax.swing.JButton selectButton;
    private javax.swing.JList tableList;
    // End of variables declaration//GEN-END:variables
}
