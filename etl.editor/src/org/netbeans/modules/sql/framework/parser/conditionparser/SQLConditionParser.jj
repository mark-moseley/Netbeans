/*
 *
 *          Copyright (c) 2004, SeeBeyond Technology Corporation,
 *          All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
 *
 *          This program, and all the routines referenced herein,
 *          are the proprietary properties and trade secrets of
 *          SEEBEYOND TECHNOLOGY CORPORATION.
 *
 *          Except as provided for by license agreement, this
 *          program shall not be duplicated, used, or disclosed
 *          without  written consent signed by an officer of
 *          SEEBEYOND TECHNOLOGY CORPORATION.
 *		
 *          Created on Sep 12, 2004
 */


// ----------------------------------------------------------------------------
// OPTIONS
// ----------------------------------------------------------------------------

options {
  IGNORE_CASE = true;
  STATIC = false;
  UNICODE_INPUT = true;

  // some performance optimizations
  OPTIMIZE_TOKEN_MANAGER = true;
  ERROR_REPORTING = true;
}

// ----------------------------------------------------------------------------
// PARSER
// ----------------------------------------------------------------------------

PARSER_BEGIN(SQLConditionParser)
package org.netbeans.modules.sql.framework.parser.conditionparser;


import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import org.netbeans.modules.sql.framework.exception.BaseException;
import org.netbeans.modules.sql.framework.jdbc.SQLUtils;
import org.netbeans.modules.sql.framework.model.SQLConstants;
import org.netbeans.modules.sql.framework.model.SQLOperator;
import org.netbeans.modules.sql.framework.model.SQLLiteral;
import org.netbeans.modules.sql.framework.model.SQLObject;
import org.netbeans.modules.sql.framework.model.SQLObjectFactory;
import org.netbeans.modules.sql.framework.model.SQLModelObjectFactory;
import org.netbeans.modules.sql.framework.model.SQLLiteral;
import org.netbeans.modules.sql.framework.model.SQLGenericOperator;
import org.netbeans.modules.sql.framework.model.VisibleSQLLiteral;
import org.netbeans.modules.sql.framework.model.VisibleSQLPredicate;
import org.netbeans.modules.sql.framework.model.utils.SQLParserUtil;

/** 
 * JavaCC generated SQL parser. 
 * Generated from SQLConditionParser.jj ($id$).
 * Do not edit this (.java) file directly, it is programmaticly generated.
 * 
 * @author Ahimanikya Satapathy
 * @author Ritesh Adval 
 * @author Jonathan Giron
 */
public class SQLConditionParser {
    private SQLParserUtil sqlHelper;
    
    public void setSQLParserUtil(SQLParserUtil helper) {
        this.sqlHelper = helper;
    }
    
    public SQLConditionParser() {
        this(new ByteArrayInputStream(new byte[0]));
    }
    
    public SQLObject parse(String sql) throws BaseException {
        try {
            StringReader rReader = new StringReader(sql);
            this.ReInit(rReader);    
            return this.SqlRootPredicate();
        } catch(TokenMgrError e) {
            throw new SQLConditionException(e);
        } catch(ParseException ex) {
            throw new SQLConditionException(ex);
        }
    }

    public SQLObject createPredicate(SQLObject left, String opName, SQLObject right) throws BaseException {
        ArrayList args = new ArrayList();
        
		if (left != null) {
	        args.add(left);
		}
		
        if (right != null) {
	        args.add(right);
        }
        SQLObject predicate = createOperator(opName, args);
        
        return predicate;
    }
    
    private SQLObject createOperator(String opName, List args) throws BaseException {
        SQLOperator fun = SQLObjectFactory.createOperatorFromParsedList(opName, args);
        //since by default some operatoras have bracket but for condition we want 
        //to put brackets only if user typed it
        fun.setShowParenthesis(false);
        return fun;
    }
    
    public static void main( String[] args )
            throws ParseException, TokenMgrError {
        SQLParserUtil helper = new  SQLParserUtil();   
        SQLConditionParser parser = new SQLConditionParser( System.in );
        parser.setSQLParserUtil(helper);

        try {
            SQLObject obj = parser.SqlCompareExpr(); 
            System.out.println(" the sql is " + obj.toString());
        } catch(BaseException ex) {
            ex.printStackTrace();
        }
    }
    
   /**
   * Replaces all occurances of <i>old</i> in <i>src</i> with <i>nu</i>.
   *
   * @param src the source String
   * @param old the character to replace
   * @param nu  the String to replace <i>old</i> with
   * @return a copy of <i>src</i> with all instances of <i>old</i>
   *         replaced by <i>nu</i>
   * @throws java.lang.NullPointerException if any argument is null.
   */
  private final static String replace(String src, String old, String nu) {
    int srclen = src.length();
    int cur = 0;
    int loc = 0;
    int oldlen = old.length();
    StringBuffer buf = new StringBuffer(srclen+nu.length());
    do {
      loc = src.indexOf(old,cur);
      if(loc != -1) {
        buf.append(src.substring(cur,loc));
        buf.append(nu);
        cur = loc + oldlen;
      }
    } while(loc != -1);
    if(cur < srclen) {
      buf.append(src.substring(cur));
    }
    return buf.toString();
  }
}

PARSER_END(SQLConditionParser)

// ----------------------------------------------------------------------------
// TOKENS
// ----------------------------------------------------------------------------

SKIP:
{
  " " | "\n" | "\r" | "\t"
}

SKIP:
{
  <LINE_COMMENT: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}

SKIP:
{
  <BLOCK_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN:  // KEYWORDS
{
  < ADD: "add" >
  | < ALL: "all" >
  | < ALTER: "alter" >
  | < AND: "and" >
  | < ASC: "asc" >
  | < BEGIN: "begin" >
  | < BETWEEN: "between" >
  | < BY: "by" >
  | < CASE: "case" >
  | < CHECK: "check" >
  | < CREATE: "create" >
  | < CONSTRAINT: "constraint" >
  | < DEFAULT_: "default" >
  | < DEFERRED: "deferred" >
  | < DEFERRABLE: "deferrable" >
  | < DELETE: "delete" >
  | < DESC: "desc" >
  | < DISTINCT: "distinct" >
  | < DROP: "drop" >
  | < ELSE: "else" >
  | < END: "end" >
  | < EXISTS: "exists" >
  | < FALSE: "false" >
  | < FROM: "from" >
//  | < FULL: "full" >
  | < GROUP: "group" >
  | < HAVING: "having" >
  | < IF: "if" >
  | < IMMEDIATE: "immediate" >
  | < IN: "in" >
  | < INITIALLY: "initially" >
  | < INDEX: "index" >
  | < INNER: "inner" >
  | < INSERT: "insert" >
  | < INTO: "into" >
  | < IS: "is" >
  | < JOIN: "join" >
  | < KEY: "key" >
  | < LEFT: "left" >
  | < LIKE: "like" >
  | < LIMIT: "limit" >
  | < NOT: "not" >
  | < NULL: "null" >
  | < OFFSET: "offset" >
  | < ON: "on" >
  | < OR: "or" >
  | < ORDER: "order" >
  | < ORGANIZATION: "organization" >
  | < OUTER: "outer" >
  | < PRIMARY: "primary" >
  | < RIGHT: "right" >
  | < SELECT: "select" >
  | < SEQUENCE: "sequence" >
  | < SET: "set" >
  | < STARTS: "starts" >
  | < SYSDATE: "sysdate" >
  | < TABLE: "table" >
  | < THEN: "then" >
  | < TRUE: "true" >
  | < UNIQUE: "unique" >
  | < UPDATE: "update" >
  | < USER: "user" >
  | < VALUES: "values" >
  | < WHEN: "when" >
  | < WHERE: "where" >
  | < WITH: "with" >
  | < CAST: "cast" >
  | < AS: "as" >
  
}

//sql date 
TOKEN :
{
    <CURRENT_DATE: "CURRENT_DATE" >
}

//sql timestamp
TOKEN :
{
    <CURRENT_TIMESTAMP: "CURRENT_TIMESTAMP" >
}

//sql runtime arguments
TOKEN :
{
    <RUNTIME_INPUT: "$" (<ID>) >
}

//column token
TOKEN :
{
    //this is of the form CATALOG_NAME.SCHEMA_NAME.TABLE_NAME.COLUMN_NAME
    <COLUMN1: <ID> "." <ID> "." <ID> "." <ID> >
    |
    //this is of the form SCHEMA_NAME.TABLE_NAME.COLUMN_NAME
    <COLUMN2: <ID> "." <ID> "." <ID> >
    |
    //this is of the form TABLE_NAME.COLUMN_NAME
    <COLUMN3: <ID> "." <ID> >
    
}

TOKEN:  // LITERALS
{
    < INTEGER_LITERAL: (["0"-"9"])+ >
  | < FLOATING_POINT_LITERAL:
          (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>
        | (["0"-"9"])+ (<EXPONENT>)?
    >
  | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
  | < STRING_LITERAL: "'" (~["'"])* ( "''" (~["'"])* )* "'" >
}

TOKEN:  // IDENTIFIERS
{
    < ID: ( "_" | "$" | "#" | <LETTER> )+ ( "_" | "$" | "#" | <DIGIT> | <LETTER> )* >
  | < #LETTER: ["A"-"Z", "a"-"z"] >
  | < #DIGIT: ["0"-"9"] >
  | <ONE_OR_MORE_DIGIT: (<DIGIT>)+ >
}

TOKEN:  // SEPARATORS AND OPERATORS
{
    < ASSIGN: ":=" >
  | < COMMA: "," >
  | < CONCAT: "||" >
  | < SEMICOLON: ";" >
  | < DOT: "." >
  | < LESS: "<" >
  | < LESSEQUAL: "<=" >
  | < GREATER: ">" >
  | < GREATEREQUAL: ">=" >
  | < EQUAL: "=" >
  | < NOTEQUAL: "!=" >
  | < NOTEQUAL2: "<>" >
  | < JOINPLUS: "(+)" >
  | < OPENPAREN: "(" >
  | < CLOSEPAREN: ")" >
  | < ASTERISK: "*" >
  | < SLASH: "/" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < QUESTIONMARK: "?" >
}


//TOKEN : //end of line
//{
//   <EOL: "\n" | "\r" | "\r\n">
//}

String SqlLValueTerm() :
{
  StringBuffer buffer = new StringBuffer();
  Token t = null;
}
{
  t = <ID>
  {
    buffer.append(t.image);
  }
  ( t = <DOT>
    {
      buffer.append(t.image);
    }
    ( t = <ID>
    {
      buffer.append(t.image);
    }
    | <ASTERISK>
    {
      buffer.append("*");
    }
    )
  )*

  {
    return buffer.toString();
  }
}

SQLObject SqlColumn() throws BaseException :
{
    Token t = null;
}
{
    (   t = <COLUMN1>
        {
            return sqlHelper.getColumnForFullyQualifiedName(t.image);
        }
      | t = <COLUMN2> 
        {
            return sqlHelper.getColumnForFullyQualifiedName(t.image);
        }
      | t = <COLUMN3>
        {
            return sqlHelper.getColumn(t.image);
        }
    )
}

SQLObject SqlColumnRef() throws BaseException :
{
   String column = null;
}
{
   column = SqlLValueTerm()
   {
      return sqlHelper.getColumn(column);
   }
}

SQLObject SQLCurrentDate() throws BaseException :
{
    Token t = null;
    SQLObject dateOp = null;
}
{
    t = <CURRENT_TIMESTAMP>
    {
        dateOp = createOperator(t.image, new ArrayList());
        return dateOp;
    }
	|
    t = <CURRENT_DATE>
    {
        dateOp = createOperator("CURRENT_TIMESTAMP", new ArrayList());
        return dateOp;
    }
}

SQLObject SqlSelectableElements() throws BaseException :
{
   SQLObject sel = null;
   boolean openP = false;
}
{
  ( 
    <OPENPAREN>
    {
        openP = true;
    }
    sel = SqlWhereOr() 
    <CLOSEPAREN>
    { 
        if(sel instanceof VisibleSQLPredicate && openP) {
            ((VisibleSQLPredicate) sel).setShowParenthesis(true);
        } else if (sel instanceof SQLGenericOperator && openP) {
            ((SQLGenericOperator) sel).setShowParenthesis(true);
        }

        return sel; 
    }   
  )
  |

  ( LOOKAHEAD(2) sel = SqlFunction() | sel = SQLCurrentDate() |  sel = SqlCastAs() | sel = SqlColumn() | sel = SqlLiteral() | sel = SqlRuntimeInput() )
    { return sel; }

}

SQLObject SqlProductExprSelectable() throws BaseException :
{
    SQLObject parent = null;
    SQLObject left = null;
    SQLObject right = null;
    String function = null;
    SQLObject result = null;
    
}
{        
    left = SqlSelectableElements()
    {
        result = left;
    }
    (
      ( 
       "*" {  function = "*"; }
       | 
       "/" {  function = "/"; }
      ) 
      right = SqlSelectableElements() 
      {
        
        ArrayList args = new ArrayList();
        args.add(left);
        args.add(right);

        parent =  createOperator(function, args);
        left = parent;
        result = parent;
     }
    )*
    {
        return result;
    }
}

SQLObject SqlSumExprSelectable() throws BaseException :
{
    SQLObject parent = null;
    SQLObject left = null;
    SQLObject right = null;
    String function = null;
    SQLObject result = null;
}
{         
    left = SqlProductExprSelectable()
    {
        result = left;
    }
    (
        ( 
            <PLUS> {  function = "+"; }
            |
            <MINUS> { function = "-"; }
            | 
            <CONCAT> { function = "||"; }
        ) 
        right = SqlProductExprSelectable() 
        {
            ArrayList args = new ArrayList();
            args.add(left);
            args.add(right);

            parent = createOperator(function, args);
            left = parent;
            result = parent;

        }
    )*
    {
        return result;
    }
}

SQLObject SqlCompareExpr() throws BaseException :
{
    SQLObject left = null;
    SQLObject right = null;
    String symbol = null;
    SQLObject result = null;
    Token t = null;
}
{
    left = SqlSumExprSelectable()
    (
        symbol = SqlIsNullClause()
        {
            result = createPredicate(left, symbol, null);
        }
        |
        symbol = SqlCompareOp() 
        right = SqlSumExprSelectable()    
        {
            result = createPredicate(left, symbol, right);
        }
        | t = <LIKE>
        { symbol = t.image; }
        right = SqlSumExprSelectable()
        {  
            result = createPredicate(left, "like", right);
        }
    )?
    {    
        if (result == null) {
            result = left;
        }
        return (result);
    }
}

SQLObject SqlRootPredicate() throws BaseException :
{
   SQLObject result = null;
}
{
   (
//    [<OPENPAREN>]
//       result = SqlFunction() 
//       [<CLOSEPAREN>]
//       | 
       result = SqlWhereOr()
       )
   {
      return result;
   }
}

SQLObject SqlWhereOr() throws BaseException :
{
   SQLObject parent = null;
   SQLObject left = null;
   SQLObject right = null;
   SQLObject result = null;
}
{
   left = SqlWhereAnd()
   {
      result = left;
   }
   (
     <OR>
     right = SqlWhereAnd()
     {
         parent = createPredicate(left, "or", right);
         left = parent;
         result = parent;
     }
   )*
   {
      return result;
   }
}

SQLObject SqlWhereAnd() throws BaseException :
{
   SQLObject parent = null;
   SQLObject left = null;
   SQLObject right = null;
   SQLObject result = null;
}
{
   left = SqlWhereNot()
   {
      result = left;
   }
   (
     <AND>
     right = SqlWhereNot()
     {
         parent = createPredicate(left, "and", right);
         left = parent;
         result = parent;
     }
   )*
   {
      return result;
   }
}

SQLObject SqlWhereNot() throws BaseException :
{
   SQLObject child = null;
}
{
   (
      <NOT>
      child = SqlWhereElt()
      {
        child = createPredicate(null, "not", child);
        return child;
      }
   )
   |
   child = SqlWhereElt()
   {
     return child;
   }   
}

SQLObject SqlWhereElt() throws BaseException :
{
   SQLObject result = null;
}
{
  (
     (
       result = SqlCompareExpr()
       {
         return result;
       }
     )
  )
}

SQLObject SqlCastAs() throws BaseException :
{
    SQLObject column = null;
    Object[] tuple;
}
{
    <CAST> 
    <OPENPAREN> 
        column = SqlSumExprSelectable() 
        <AS> tuple = SqlCastAsType()
    <CLOSEPAREN>
    {
        ArrayList argList = new ArrayList();
        argList.add(column);
        String castTo = (String) tuple[0];
        SQLLiteral literal = SQLModelObjectFactory.getInstance().createSQLLiteral(castTo, castTo, SQLLiteral.VARCHAR_UNQUOTED);
        argList.add(literal);
        
        String precision = (String) tuple[1];
        if (precision != null) {
        	argList.add(precision);
        	String scale = (String) tuple[2];
        	if (scale != null) {
        		argList.add(scale);
        	}
        }
        return createOperator("castas", argList);
    }
}

    Object[] SqlCastAsType() throws BaseException :
    {
        Object[] tuple = new Object[3];
        Token type = null;
        Token scale = null;
        Token precision = null;
        
        int jdbcType = SQLConstants.JDBCSQL_TYPE_UNDEFINED;
        tuple[1] = null;
        tuple[2] = null;
    }
    {
        (
            type = <ID>
            {
                tuple[0] = type.image;
                jdbcType = SQLUtils.getStdJdbcType(type.image);
            }

            [
                <OPENPAREN>
                precision = <INTEGER_LITERAL>
                {
                	if (SQLUtils.isPrecisionRequired(jdbcType)) {
	                    if (precision != null) {
    	                    tuple[1] = precision.image;
        	            } else {
        	            	throw new BaseException("Precision argument required for type " + type.image);
	                    }
                	}
                }
                (
                 <CLOSEPAREN> 
                 |
                 (
                    <COMMA>
                    scale = <INTEGER_LITERAL>
                    {
                        if (scale != null) {
                        	if (SQLUtils.isScaleRequired(jdbcType)) {
	                            tuple[2] = scale.image;
                        	} else {
                        		throw new BaseException("Scale argument is invalid for type " + type.image);
                        	}
                        }
                    }
                 )
                 <CLOSEPAREN>
                )
            ]
        )
        {
            return tuple;
        }
   }
    
String SqlIsNullClause() :
{ 
    boolean foundnot = false;
    Token isToken = null;
    Token notToken = null;
    Token nullToken = null;
}
{
    isToken = <IS>
    [
        notToken = <NOT>
        { 
            foundnot = true;
        }
    ]
    nullToken = <NULL>
    { 
        String result = (foundnot ? isToken.image + " " + notToken.image : isToken.image) + " " + nullToken;
        return (result.trim().toUpperCase());
    }
}

SQLObject SqlLiteral() throws BaseException :
{
   SQLObject literal = null;
   Token t = null;
   boolean minus = false;
}
{
   ( t = <STRING_LITERAL>
   {
      // trim off the open and close quotes
      String trimmed = t.image.substring(1, t.image.length() - 1);
      // replace all '' with '
      String result = replace(trimmed,"''","'");
      literal = SQLModelObjectFactory.getInstance().createVisibleSQLLiteral(result, result, Types.VARCHAR);
   }
   |
   (
     [
       <MINUS>
       { minus = true; }
     ]
     ( 
     (
     t = <INTEGER_LITERAL>
     {
        literal = SQLModelObjectFactory.getInstance().createVisibleSQLLiteral(t.image, new Integer((minus ? "-" : "") + t.image).toString(), Types.INTEGER);      
     }
     )
    |
     (
     t = <FLOATING_POINT_LITERAL>
     {
        literal = SQLModelObjectFactory.getInstance().createVisibleSQLLiteral(t.image, new BigDecimal((minus ? "-" : "") + t.image).toString(), Types.NUMERIC);      
     }   
     )
     )
   )
   | <NULL>
   {
      literal = SQLModelObjectFactory.getInstance().createVisibleSQLLiteral("null", "null", Types.VARCHAR);
   }
   | <TRUE>
   {
      literal = SQLModelObjectFactory.getInstance().createVisibleSQLLiteral("true", Boolean.TRUE.toString(), Types.BOOLEAN);
   }
   | <FALSE>
   {
      literal = SQLModelObjectFactory.getInstance().createVisibleSQLLiteral("false", Boolean.FALSE.toString(), Types.BOOLEAN);
   }
   | <ASTERISK>
   {
   }
   |
    t = <ID>
   {
       result = t.image;
      literal = SQLModelObjectFactory.getInstance().createSQLLiteral(result, result, SQLLiteral.VARCHAR_UNQUOTED);
   }
   )
   {
      return literal;
   }
}

SQLObject SqlSelectable() throws BaseException :
{
    SQLObject sel = null;
}
{

    sel = SqlWhereOr()
    {
        return sel;
    }
}

List SqlSelectList() throws BaseException :
{
  List list = new ArrayList();
  SQLObject curCol = null;
}
{
  curCol = SqlSelectable()
  {
      list.add(curCol);
  }
  (
    <COMMA>
    {
    }

    curCol = SqlSelectable()
    {
      list.add(curCol);
    }
  )*
  {
    return list;
  }
}

List SqlSelectCols() throws BaseException :
{
  List list = new ArrayList();
}
{
  [
//    <ASTERISK>
//    {
//        list.add(new ColumnIdentifier("*"));
//    }
//    |
    list = SqlSelectList()
  ]
  {
    return list;
  }
}

List SqlFunctionArgs() throws BaseException :
{
    List args = new ArrayList();
}
{
  <OPENPAREN>
  args = SqlSelectCols()
  <CLOSEPAREN>
  {
    return args;
  }

}

SQLObject SqlFunction() throws BaseException :
{
  String name = null;
  List fnargs = null;
}
{
    <ID>
    {
        name = token.image;
    }
    fnargs = SqlFunctionArgs()
  {
    return  createOperator(name,fnargs);
  }
}

String SqlCompareOp() :
{
   String result = null;
}
{
   (
      <EQUAL>
      {
         result = "=";
      }
      | <NOTEQUAL>
      {
         result = "!=";
      }
      | <NOTEQUAL2>
      {
         result = "!=";
      }
      | <GREATER>
      {
         result = ">";
      }
      | <GREATEREQUAL>
      {
         result = ">=";
      }
      | <LESS>
      {
         result = "<";
      }
      | <LESSEQUAL>
      {
         result = "<=";
      }
   )
   {
      return result;
   }

}

SQLObject SqlRuntimeInput() throws BaseException : 
{
    Token t = null;
}
{
    t = <RUNTIME_INPUT>
    {
        return this.sqlHelper.getRuntimeInput(t.image);
    }
}
