/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.

 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */



package org.netbeans.modules.uml.ui.swing.finddialog;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.Box;
import javax.swing.JCheckBox;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JComboBox;
import javax.swing.JScrollPane;
import javax.swing.JOptionPane;

import org.netbeans.modules.uml.common.generics.ETPairT;
import org.netbeans.modules.uml.core.metamodel.core.foundation.IElement;
import org.netbeans.modules.uml.core.metamodel.diagrams.IProxyDiagram;
import org.netbeans.modules.uml.core.support.umlutils.ETList;
import org.netbeans.modules.uml.ui.support.commondialogs.IErrorDialog;
import org.netbeans.modules.uml.ui.support.commondialogs.MessageIconKindEnum;
import org.netbeans.modules.uml.ui.support.finddialog.DefaultFindDialogResource;
import org.netbeans.modules.uml.ui.support.finddialog.FindController;
import org.netbeans.modules.uml.ui.support.finddialog.FindResults;
import org.netbeans.modules.uml.ui.support.finddialog.FindUtilities;
import org.netbeans.modules.uml.ui.swing.commondialogs.JCenterDialog;
import org.netbeans.modules.uml.ui.swing.commondialogs.SwingErrorDialog;


public class ReplaceDialogUI extends JCenterDialog 
{
	private javax.swing.JScrollPane jScrollPane2;
    
	/** Creates new form finddialog */
	public ReplaceDialogUI(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		initDialog();
		center(parent);
	}
	
	/** This method is called from within the constructor to
		 * initialize the form.
		 * WARNING: Do NOT modify this code. The content of this method is
		 * always regenerated by the Form Editor.
		 */
		private void initComponents() {
			java.awt.GridBagConstraints gridBagConstraints=new GridBagConstraints();;
			
			jPanel1 = new javax.swing.JPanel();
			jPanel4 = new javax.swing.JPanel();
			jPanel5 = new javax.swing.JPanel();
			jPanel4r = new javax.swing.JPanel();
			textLabel = new javax.swing.JLabel();
			textLabel2 = new javax.swing.JLabel();
			m_FindCombo = new javax.swing.JComboBox();
			jPanel16 = new javax.swing.JPanel();
			jPanel3 = new javax.swing.JPanel();
			m_LoadExternalCheck = new javax.swing.JCheckBox();
			m_MatchCaseCheck = new javax.swing.JCheckBox();
			m_XpathCheck = new javax.swing.JCheckBox();
			m_WholeWordCheck = new javax.swing.JCheckBox();
			m_SearchAlias = new javax.swing.JRadioButton();
			jPanel17 = new javax.swing.JPanel();
			jPanel7 = new javax.swing.JPanel();
			jPanel6 = new javax.swing.JPanel();
			m_SearchElementsRadio = new javax.swing.JRadioButton();
			m_SearchDescriptionsRadio = new javax.swing.JRadioButton();
			m_ProjectList = new javax.swing.JList();
			jPanel9 = new javax.swing.JPanel();
			m_WorkspaceRadio = new javax.swing.JRadioButton();
			m_ProjectRadio = new javax.swing.JRadioButton();
			jPanel11 = new javax.swing.JPanel();
			//m_ResultsTable = new javax.swing.JTable();
			FindTableModel model = new FindTableModel(this);
			m_ResultsTable = new JReplaceTable(model, this);
			jPanel12 = new javax.swing.JPanel();
			m_NavigateCheck = new javax.swing.JCheckBox();
			m_Status = new javax.swing.JTextField();
			jPanel2 = new javax.swing.JPanel();
			m_FindButton = new javax.swing.JButton();
			m_CloseButton = new javax.swing.JButton();
			m_ReplaceCombo = new javax.swing.JComboBox();
			m_ReplaceButton = new javax.swing.JButton();
			m_ReplaceAllButton = new javax.swing.JButton();			
			jPanel13 = new javax.swing.JPanel();
			jPanel14 = new javax.swing.JPanel();
			jPanel15 = new javax.swing.JPanel();
			jPanel18 = new javax.swing.JPanel();
			jPanel10 = new javax.swing.JPanel();
			
			
			setTitle(DefaultFindDialogResource.getString("IDS_REPLACETITLE"));
			addWindowListener(new java.awt.event.WindowAdapter() {
				public void windowClosing(java.awt.event.WindowEvent evt) {
					closeDialog(evt);
				}
			});

			jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));
			jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
			jPanel1.add(Box.createVerticalStrut(10));
			jPanel4.setLayout(new GridBagLayout());
                        
                        
			
                        //CBeckham -  added to dynamicaly adjust panel size for larger fonts
                        // Note...getFoint.getSize will not return the ide parm -fontsize
                        //in most cases of localized version, the user will use the -fontsize to start the ide
                        //regaqrdless of what the os font size setting is, however in some remote cases the user
                        //may actaully have the OS fontsize setting high
                        int fontsize;
                        java.awt.Font f = 
                            javax.swing.UIManager.getFont ("controlFont"); //NOI18N
                        if (f != null) {
                            fontsize = f.getSize();
                        } else {
                            fontsize = 12;
                        }                
                        int width  = 550;
                        int height = 400;
                        int multiplyer = 2;
                        
			java.awt.Font theFont = new java.awt.Font("Dialog", 0, fontsize);
                        
                        if (fontsize > 17 ) multiplyer =3;
                        width  = width  + Math.round(width*(multiplyer*fontsize/100f));
                        height = height + Math.round(height*(multiplyer*fontsize/100f));  
                        setSize(width,height);
                        // CBeckham - end of add                      
                        
			
			// text label
			textLabel.setFont(theFont);
			textLabel.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_FINDWHAT")));
			textLabel.setLabelFor(m_FindCombo);
			DefaultFindDialogResource.setMnemonic(textLabel, DefaultFindDialogResource.getString("IDS_FINDWHAT"));
			DefaultFindDialogResource.setFocusAccelerator(m_FindCombo, DefaultFindDialogResource.getString("IDS_FINDWHAT"));
			textLabel.setName("findLabel");	
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=0;
			gridBagConstraints.weightx=0;
			//c.anchor=GridBagConstraints.LINE_START;
			gridBagConstraints.insets=new Insets(0,0,0,0);
			jPanel4.add(textLabel,gridBagConstraints);

			// combo box
			gridBagConstraints.gridx=1;
			gridBagConstraints.gridy=0;
			gridBagConstraints.weightx=0.9;
			gridBagConstraints.fill=GridBagConstraints.BOTH;
			gridBagConstraints.insets=new Insets(0,5,0,0);
			jPanel4.add(m_FindCombo,gridBagConstraints);
			m_FindCombo.setEditable(true);
			m_FindCombo.setMaximumRowCount(10);
			m_FindCombo.setFont(theFont);
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=0;
			gridBagConstraints.insets=new Insets(5,0,5,0);
			gridBagConstraints.anchor=GridBagConstraints.PAGE_START;
			jPanel1.add(jPanel4,gridBagConstraints);
			m_FindCombo.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onEnterSearchCombo(evt);
				}
			});
			jPanel1.add(jPanel4);
			jPanel1.add(jPanel16);

			// check boxes
			jPanel3.setLayout(new GridBagLayout());
			m_LoadExternalCheck.setFont(theFont);
			m_LoadExternalCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_LOADEXTERNAL")));
			DefaultFindDialogResource.setMnemonic(m_LoadExternalCheck, DefaultFindDialogResource.getString("IDS_LOADEXTERNAL"));
			m_LoadExternalCheck.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onLoadExternalCheck(evt);
				}
			});
			
			//jPanel3.add(m_LoadExternalCheck);

			// default to checked to try and make the query faster
			
			m_MatchCaseCheck.setSelected(true);
			m_MatchCaseCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_MATCHCASE")));
			DefaultFindDialogResource.setMnemonic(m_MatchCaseCheck, DefaultFindDialogResource.getString("IDS_MATCHCASE"));
			m_MatchCaseCheck.setFont(theFont);
			gridBagConstraints.anchor=GridBagConstraints.LINE_START;
			m_MatchCaseCheck.setFont(theFont);
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=0;
			gridBagConstraints.weightx=11;
			m_MatchCaseCheck.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onMatchCaseCheck(evt);
				}
			});
			jPanel3.add(m_MatchCaseCheck,gridBagConstraints);


			m_XpathCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_XPATHEXPRESSION")));
			DefaultFindDialogResource.setMnemonic(m_XpathCheck, DefaultFindDialogResource.getString("IDS_XPATHEXPRESSION"));
			m_XpathCheck.setFont(theFont);
			gridBagConstraints.gridx=1;
			gridBagConstraints.gridy=0;
			gridBagConstraints.weightx=11;
			m_XpathCheck.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onXPathCheck(evt);
				}
			});
			jPanel3.add(m_XpathCheck,gridBagConstraints);

			m_WholeWordCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_MATCHWHOLE")));
			DefaultFindDialogResource.setMnemonic(m_WholeWordCheck, DefaultFindDialogResource.getString("IDS_MATCHWHOLE"));
			m_WholeWordCheck.setFont(theFont);
			gridBagConstraints.gridx=2;
			gridBagConstraints.gridy=0;
			gridBagConstraints.weightx=0;
			gridBagConstraints.anchor=GridBagConstraints.LINE_END;
			m_WholeWordCheck.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onWholeWordCheck(evt);
				}
			});
			jPanel3.add(m_WholeWordCheck,gridBagConstraints);
			
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=1;
			gridBagConstraints.insets=new Insets(5,10,5,0);
			jPanel1.add(jPanel3,gridBagConstraints);

			// workspace/project radio buttons			
			jPanel1.add(jPanel17);

			jPanel7.setLayout(new java.awt.GridBagLayout());
			jPanel6.setLayout(new java.awt.GridBagLayout());
			
  		    			
			m_WorkspaceRadio.setFont(theFont);
			m_WorkspaceRadio.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_WORKSPACE")));
			DefaultFindDialogResource.setMnemonic(m_WorkspaceRadio, DefaultFindDialogResource.getString("IDS_WORKSPACE"));
			gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 0;
			gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
			m_WorkspaceRadio.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onWorkspaceRadio(evt);
				}
			});	
			m_WorkspaceRadio.setVisible(false);
			jPanel6.add(m_WorkspaceRadio, gridBagConstraints);

			m_ProjectRadio.setFont(theFont);
			// default the dialog to have the project radio button checked
			m_ProjectRadio.setSelected(true);
			m_ProjectRadio.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_PROJECTS")));
			DefaultFindDialogResource.setMnemonic(m_ProjectRadio, DefaultFindDialogResource.getString("IDS_PROJECTS"));
			gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 1;
			gridBagConstraints.insets=new Insets(0,0,5,0);
			gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
			m_ProjectRadio.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onProjectRadio(evt);
				}
			});
			jPanel6.add(m_ProjectRadio, gridBagConstraints);
			// project list
			m_ProjectList.setMinimumSize(new java.awt.Dimension(30, 80));
			m_ProjectList.setPreferredSize(new java.awt.Dimension(50, 80));
			m_ProjectList.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
			m_ProjectList.setFont(theFont);
			m_ProjectList.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
			gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.gridx = 0;
			gridBagConstraints.gridy = 2;
			gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
			gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
			gridBagConstraints.weightx = 1.0;
			gridBagConstraints.weighty = 1.0;
			gridBagConstraints.weightx =9;
			jPanel6.add(m_ProjectList, gridBagConstraints);
			
			gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
			gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
			gridBagConstraints.weightx = 1.0;
			gridBagConstraints.weighty = 1.0;
			gridBagConstraints.insets=new Insets(0,0,5,0);
			jPanel7.add(jPanel6, gridBagConstraints);

			// element/description radio buttons
			//--jPanel9.setLayout(new javax.swing.BoxLayout(jPanel9, javax.swing.BoxLayout.Y_AXIS));
			jPanel9.setLayout(new GridBagLayout());
			javax.swing.border.TitledBorder bord = new javax.swing.border.TitledBorder(DefaultFindDialogResource.getString("IDS_SEARCHIN"));
			bord.setTitleFont(theFont);
			jPanel9.setBorder(bord);
						
			m_SearchElementsRadio.setFont(theFont);
			// default the dialog to have the element radio button checked
			m_SearchElementsRadio.setSelected(true);
			m_SearchElementsRadio.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_ELEMENTS")));
			DefaultFindDialogResource.setMnemonic(m_SearchElementsRadio, DefaultFindDialogResource.getString("IDS_ELEMENTS"));
			m_SearchElementsRadio.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onSearchElementsRadio(evt);
				}
			});		
			//--jPanel9.add(m_SearchElementsRadio);
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=0;
			jPanel9.add(m_SearchElementsRadio,gridBagConstraints);

			m_SearchDescriptionsRadio.setFont(theFont);
			m_SearchDescriptionsRadio.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_DESCRIPTIONS")));
			DefaultFindDialogResource.setMnemonic(m_SearchDescriptionsRadio, DefaultFindDialogResource.getString("IDS_DESCRIPTIONS"));
			m_SearchDescriptionsRadio.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onSearchDescriptionsRadio(evt);
				}
			});
			//--jPanel9.add(m_SearchDescriptionsRadio);
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=1;
			jPanel9.add(m_SearchDescriptionsRadio,gridBagConstraints);
			
			m_SearchAlias.setFont(theFont);
			m_SearchAlias.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_ALIASTEXT")));
			DefaultFindDialogResource.setMnemonic(m_SearchAlias, DefaultFindDialogResource.getString("IDS_ALIASTEXT"));
			m_SearchAlias.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onAliasCheck(evt);
				}
			});
			//--jPanel9.add(m_SearchAlias);
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=2;
			gridBagConstraints.insets=new Insets(0,0,0,0);
			jPanel9.add(m_SearchAlias,gridBagConstraints);
			
			gridBagConstraints = new java.awt.GridBagConstraints();
			gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
			gridBagConstraints.weightx=0;
			jPanel7.add(jPanel9, gridBagConstraints);

			jPanel1.add(jPanel7);
			
			// results grid
			jPanel11.setLayout(new GridBagLayout());
			m_ResultsTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
			
			jScrollPane2 = new JScrollPane(m_ResultsTable);
			GridBagConstraints gridBagConstraints2 = new java.awt.GridBagConstraints();
			gridBagConstraints2.fill = GridBagConstraints.BOTH;
			gridBagConstraints2.weightx = 1.0;
			gridBagConstraints2.weighty = 1.0;
			jPanel11.add(jScrollPane2, gridBagConstraints2);
			jPanel1.add(jPanel11);
			
			// navigate check
			jPanel12.setLayout(new java.awt.GridBagLayout());
			m_NavigateCheck.setFont(theFont);
			// default the navigate button to true
			m_NavigateCheck.setSelected(true);
			m_NavigateCheck.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_NAVIGATE")));
			DefaultFindDialogResource.setMnemonic(m_NavigateCheck, DefaultFindDialogResource.getString("IDS_NAVIGATE"));
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=0;
			gridBagConstraints.weightx=1;
			gridBagConstraints.anchor=GridBagConstraints.LINE_START;
			gridBagConstraints.fill=GridBagConstraints.HORIZONTAL;
			jPanel12.add(m_NavigateCheck,gridBagConstraints);
			m_NavigateCheck.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onNavigateCheck(evt);
				}
			});
			jPanel1.add(jPanel12);
						
			// replace combo
			jPanel4r.setLayout(new GridBagLayout()); 
			// text label
			textLabel2.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_REPLACEWITH")));
			textLabel2.setLabelFor(m_ReplaceCombo);
			DefaultFindDialogResource.setMnemonic(textLabel2, DefaultFindDialogResource.getString("IDS_REPLACEWITH"));
			DefaultFindDialogResource.setFocusAccelerator(m_ReplaceCombo, DefaultFindDialogResource.getString("IDS_REPLACEWITH"));
			textLabel2.setFont(theFont);
			textLabel2.setName("replaceLabel");			
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=0;
			gridBagConstraints.insets=new Insets(0,5,0,5);
			gridBagConstraints.weightx=0;
			jPanel4r.add(textLabel2,gridBagConstraints);

			// combo box
			m_ReplaceCombo.setEditable(true);
			m_ReplaceCombo.setMaximumRowCount(10);
			m_ReplaceCombo.setFont(theFont);
			gridBagConstraints.gridx=1;
			gridBagConstraints.gridy=0;
			gridBagConstraints.weightx=0.9;
			gridBagConstraints.fill=GridBagConstraints.BOTH;
			gridBagConstraints.insets=new Insets(0,5,0,0);
			jPanel4r.add(m_ReplaceCombo,gridBagConstraints);
			jPanel1.add(jPanel4r);
			
			jPanel1.add(jPanel10);
			
			// status
			jPanel5.setLayout(new GridBagLayout());
			m_Status.setEditable(false);
			m_Status.setMaximumSize(new java.awt.Dimension(2147483647, 20));
			m_Status.setFont(theFont);
			gridBagConstraints.gridx=0;
			gridBagConstraints.gridy=0;
			gridBagConstraints.fill=GridBagConstraints.BOTH;
			jPanel5.add(m_Status,gridBagConstraints);
			jPanel1.add(jPanel5);
			jPanel1.add(Box.createVerticalStrut(10));

			getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);
			
			// find/close buttons
			jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));
			jPanel2.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));

			m_FindButton.setFont(theFont);
			m_FindButton.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_FIND")));
			DefaultFindDialogResource.setMnemonic(m_FindButton, DefaultFindDialogResource.getString("IDS_FIND"));
			m_FindButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onFindButton(evt);
				}
			});
			getRootPane().setDefaultButton(m_FindButton);
			jPanel2.add(Box.createVerticalStrut(9));
			jPanel2.add(m_FindButton);

			m_CloseButton.setFont(theFont);
			m_CloseButton.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_CLOSE")));
			DefaultFindDialogResource.setMnemonic(m_CloseButton, DefaultFindDialogResource.getString("IDS_CLOSE"));
			m_CloseButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					setVisible(false);
					dispose();
				}
			});
			jPanel2.add(Box.createVerticalStrut(3));
			jPanel2.add(m_CloseButton);
			jPanel2.add(jPanel14);
			
			jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.Y_AXIS));

			m_ReplaceButton.setFont(theFont);
			m_ReplaceButton.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_REPLACE")));
			DefaultFindDialogResource.setMnemonic(m_ReplaceButton, DefaultFindDialogResource.getString("IDS_REPLACE"));
			m_ReplaceButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onReplaceButton(evt);
				}
			});
			jPanel2.add(m_ReplaceButton);
			jPanel12.add(jPanel13);
			
			m_ReplaceAllButton.setFont(theFont);
			m_ReplaceAllButton.setText(DefaultFindDialogResource.determineText(DefaultFindDialogResource.getString("IDS_REPLACEALL")));
			DefaultFindDialogResource.setMnemonic(m_ReplaceAllButton, DefaultFindDialogResource.getString("IDS_REPLACEALL"));
			m_ReplaceAllButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					onReplaceAllButton(evt);
				}
			});
			jPanel2.add(Box.createVerticalStrut(3));
			jPanel2.add(m_ReplaceAllButton);
			jPanel2.add(Box.createVerticalStrut(10));
			getContentPane().add(jPanel2, java.awt.BorderLayout.EAST);

			// now figure out the button sizes
			Dimension buttonSize = getMaxButtonWidth();
			//Dimension buttonSize = new Dimension(90, 25);
			m_FindButton.setMaximumSize(buttonSize);
			m_FindButton.setPreferredSize(buttonSize);
			m_CloseButton.setPreferredSize(buttonSize);
			m_CloseButton.setMaximumSize(buttonSize);
			m_ReplaceButton.setPreferredSize(buttonSize);
			m_ReplaceButton.setMaximumSize(buttonSize);
			m_ReplaceAllButton.setPreferredSize(buttonSize);
			m_ReplaceAllButton.setMaximumSize(buttonSize);

			//pack();

		}
		private Dimension getMaxButtonWidth()
		{
			Dimension ret = null;
			Dimension d = m_FindButton.getPreferredSize();
			double max  = d.width;

			d = m_CloseButton.getPreferredSize();
			if(d.width > max){
				 max = d.width;
				 ret = d; 
			}
			d = m_ReplaceButton.getPreferredSize();
			if(d.width > max){
				max = d.width;
				ret = d; 
	  		}
			d = m_ReplaceAllButton.getPreferredSize();
			if(d.width > max){
				max = d.width;
				ret = d; 
	  		}

			return ret;
			
		}
		
		private void onEnterSearchCombo(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JComboBox)
			{
				//this was the attermp to try and perform the find
				// when hitting enter in the find combo box.  It was
				// kind of working, but this event was ALSO firing when the
				// user was typing in find and then clicking Alt+Key to change
				// the settings on the dialog
				/*
				if (evt.getActionCommand().equals("comboBoxEdited"))
				{
					String searchStr = m_FindCombo.getSelectedItem().toString();
					if (searchStr != null && searchStr.length() > 0){
						onFindButton();
					}
				}
				else
				{
					m_Done = false;
				}
				*/
			}
		}
		
		private void onLoadExternalCheck(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JCheckBox)
			{
				JCheckBox box = (JCheckBox)obj;
				boolean checkboxState = box.isSelected();
				if (checkboxState)
				{
					m_Controller.setExternalLoad(true);
				}
				else
				{
					m_Controller.setExternalLoad(false);
				}
			}
		}

		private void onXPathCheck(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JCheckBox)
			{
				JCheckBox box = (JCheckBox)obj;
				boolean checkboxState = box.isSelected();
				if (checkboxState)
				{
					m_Controller.setKind(1);
					m_MatchCaseCheck.setEnabled(false);
					m_SearchDescriptionsRadio.setEnabled(false);
					m_SearchElementsRadio.setEnabled(false);
					m_SearchAlias.setEnabled(false);
					m_WholeWordCheck.setEnabled(false);
				}
				else
				{
					m_Controller.setKind(0);
					m_MatchCaseCheck.setEnabled(true);
					m_SearchDescriptionsRadio.setEnabled(true);
					m_SearchElementsRadio.setEnabled(true);
					m_SearchAlias.setEnabled(true);
					m_WholeWordCheck.setEnabled(true);
				}
			}
		}

		private void onAliasCheck(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JRadioButton)
			{
				m_Controller.setResultType(-1);
				m_Controller.setSearchAlias(true);
				m_SearchElementsRadio.setSelected(false);
				m_SearchDescriptionsRadio.setSelected(false);
				m_SearchAlias.setSelected(true);
			}
		}

		private void onWholeWordCheck(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JCheckBox)
			{
				JCheckBox box = (JCheckBox)obj;
				boolean checkboxState = box.isSelected();
				if (checkboxState)
				{
					m_Controller.setWholeWordSearch(true);
				}
				else
				{
					m_Controller.setWholeWordSearch(false);

				}
			}
		}
	
	private void onMatchCaseCheck(java.awt.event.ActionEvent evt) {
		Object obj = evt.getSource();
		if (obj instanceof JCheckBox)
		{
			JCheckBox box = (JCheckBox)obj;
			boolean checkboxState = box.isSelected();
			if (checkboxState)
			{
				m_Controller.setCaseSensitive(true);
			}
			else
			{
				m_Controller.setCaseSensitive(false);

			}
		}
	}
		private void onProjectRadio(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JRadioButton)
			{
				m_Controller.setScope(0);
				m_ProjectRadio.setSelected(true);
				m_WorkspaceRadio.setSelected(false);
				m_ProjectList.setEnabled(true);
				FindUtilities.selectProjectInList( m_ProjectList );
			}
		}		
		private void onWorkspaceRadio(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JRadioButton)
			{
				m_Controller.setScope(1);
				m_WorkspaceRadio.setSelected(true);
				m_ProjectRadio.setSelected(false);
				m_ProjectList.clearSelection();
				m_ProjectList.setEnabled(false);
			}
		}
		private void onSearchElementsRadio(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JRadioButton)
			{
				m_Controller.setResultType(0);
				m_SearchElementsRadio.setSelected(true);
				m_SearchDescriptionsRadio.setSelected(false);
				m_SearchAlias.setSelected(false);
				m_Controller.setSearchAlias(false);
			}
		}		
		private void onSearchDescriptionsRadio(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JRadioButton)
			{
				m_Controller.setResultType(1);
				m_SearchDescriptionsRadio.setSelected(true);
				m_SearchElementsRadio.setSelected(false);
				m_SearchAlias.setSelected(false);
				m_Controller.setSearchAlias(false);
			}
		}		
		private void onNavigateCheck(java.awt.event.ActionEvent evt) {
			Object obj = evt.getSource();
			if (obj instanceof JCheckBox)
			{
				JCheckBox box = (JCheckBox)obj;
				boolean checkboxState = box.isSelected();
				if (checkboxState)
				{
					m_Controller.setDiagramNavigate(true);
				}
				else
				{
					m_Controller.setDiagramNavigate(false);
				}
			}
		}
                
		private void onFindButton(java.awt.event.ActionEvent evt) {
                    Object obj = evt.getSource();
                    if (obj instanceof JButton) {
                        //if (!m_Done){
                        try {
                            FindUtilities.startWaitCursor(getContentPane());
                            onFindButton();
                        } catch (Exception ex) {
                            JOptionPane.showMessageDialog(this,
                            DefaultFindDialogResource.getString("IDS_ERROR1"),
                            DefaultFindDialogResource.getString("IDS_PROJNAME2"),
                            JOptionPane.INFORMATION_MESSAGE);
                        } finally {
                            FindUtilities.endWaitCursor(getContentPane());
                        }
                        //}
                        //m_Done = false;                        
                    }
		}		
						
		private void onFindButton() throws Exception {
			//m_Done = true;
			m_Status.setText("");
			clearGrid();
			String searchStr = (String)(m_FindCombo.getSelectedItem());
			if (searchStr != null && searchStr.length() > 0)
			{
				boolean continueFlag = true;
				// Save the values of the search combo
				FindUtilities.saveSearchString("LastSearchStrings", m_FindCombo);
				// reset what is in the search combo
				FindUtilities.populateComboBoxes("LastSearchStrings", m_FindCombo);
				// if they have project selected, make sure there is a project selected
				if (m_ProjectRadio.isSelected())
				{
				   int count = m_ProjectList.getSelectedIndex();
				   if (count == -1)
				   {
					  	continueFlag = false;
						String msg = FindUtilities.translateString("IDS_ERROR2");
						String title = FindUtilities.translateString("IDS_PROJNAME2");
						IErrorDialog pTemp = new SwingErrorDialog(this);
						if (pTemp != null)
						{
						  pTemp.display(msg, MessageIconKindEnum.EDIK_ICONINFORMATION, title);
						}
				   }
				}
				if (continueFlag)
				{
					m_Controller.setSearchString(searchStr);
					FindUtilities.loadProjectListOfController(m_ProjectList, m_Controller);
					// do the search
					FindResults pResults = new FindResults();
					m_Controller.search(pResults);
					if (pResults != null)
					{
						ETList<IElement> pElements = pResults.getElements();
						ETList<IProxyDiagram> pDiagrams = pResults.getDiagrams();
						if ( (pElements != null) && (pDiagrams != null))
						{
							int count = pElements.size();
							int countD = pDiagrams.size();
							if (count > 0 || countD > 0)
							{
								// show the results
								 jPanel11.removeAll();
								 ETList< Object > findResults = FindUtilities.loadResultsIntoArray(pResults);
								 FindTableModel model = new FindTableModel(this, findResults);
								 m_ResultsTable = new JReplaceTable(model, this);
								 jScrollPane2 = new JScrollPane(m_ResultsTable);

								 GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
								 gridBagConstraints.fill = GridBagConstraints.BOTH;
								 gridBagConstraints.weightx = 1.0;
								 gridBagConstraints.weighty = 1.0;
								 jPanel11.add(jScrollPane2, gridBagConstraints);

								 //now refresh the table so that it paints, cannot use refreshUI it causes a flicker.
								 m_ResultsTable.updateUI();
								 jScrollPane2.doLayout();
								 jPanel11.doLayout();
								 this.doLayout();									
								// enable the replace buttons
								m_ReplaceButton.setEnabled(true);
								m_ReplaceAllButton.setEnabled(true);
								long totalC = count + countD;
								String strMsg = totalC + " ";
								strMsg += FindUtilities.translateString("IDS_NUMFOUND");
								m_Status.setText(strMsg);	
								//
								// This is special code to aid in the automating testing.  We had no way to access
								// the information in the grid from the automated scripts and/or VisualTest, so
								// if a flag is set in the registry, we will dump the results of the grid to a
								// specified file
								//
								/* TODO
								if( GETDEBUGFLAG_RELEASE(_T("DumpGridResults"), 0))
							    {
								 CComBSTR file = CRegistry::GetItem( CString(_T("DumpGridResultsFile")), CString(_T("")));
									 if (file.Length())
									 {
										 m_FlexGrid->SaveGrid(file, flexFileCommaText, CComVariant(FALSE));
									 }
								 }
								 */
							 }
							 else
							 {
								String noneStr = FindUtilities.translateString("IDS_NONEFOUND");
								m_Status.setText(noneStr);	
							 }
						 }
						 else
						 {
							String canStr = FindUtilities.translateString("IDS_CANCELLED");
							m_Status.setText(canStr);							 
						 }
					}
					 else
					 {
						String str2 = FindUtilities.translateString("IDS_NONEFOUND2");						 	
						m_Status.setText(str2);
					 }

				}
				m_FindCombo.setSelectedItem(searchStr);
			}
			else
			{
				IErrorDialog pTemp = new SwingErrorDialog(this);
				if (pTemp != null)
				{
					String msg = FindUtilities.translateString("IDS_ERROR1");
					String title = FindUtilities.translateString("IDS_PROJNAME2");
					pTemp.display(msg, MessageIconKindEnum.EDIK_ICONINFORMATION, title);
				}
			}
		}		
	private void onReplaceButton(java.awt.event.ActionEvent evt) 
	{
		Object obj = evt.getSource();
		if (obj instanceof JButton)
		{
			m_Status.setText("");
			String str;
			str = (String)(m_ReplaceCombo.getSelectedItem());
			if (str != null && str.length() > 0)
			{
				FindUtilities.startWaitCursor(getContentPane());
				// Save the values of the search combo
				FindUtilities.saveSearchString("LastReplaceStrings", m_ReplaceCombo);
				// reset what is in the search combo
				FindUtilities.populateComboBoxes("LastReplaceStrings", m_ReplaceCombo);
				if (m_Controller != null)
				{
					m_Controller.setReplaceString(str);
					FindResults pResults = new FindResults();
					if (pResults != null)
					{
						loadResultsFromGrid(pResults, true);
						ETList<IElement> pElements = pResults.getElements();
						ETList<IProxyDiagram> pDiagrams = pResults.getDiagrams();
						if ( (pElements != null) && (pDiagrams != null))
						{
							int count = pElements.size();
							int countD = pDiagrams.size();
							if (count > 0 || countD > 0)
							{
								// disable replace buttons in case the search fails
								m_ReplaceButton.setEnabled(false);
								m_ReplaceAllButton.setEnabled(false);
								// clear the grid
								m_Controller.replace(pResults);
								// show the results
								jPanel11.removeAll();
								ETList< Object > findResults = FindUtilities.loadResultsIntoArray(pResults);
								FindTableModel model = new FindTableModel(this, findResults);
								m_ResultsTable = new JReplaceTable(model, this);
								jScrollPane2 = new JScrollPane(m_ResultsTable);
	
								GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
								gridBagConstraints.fill = GridBagConstraints.BOTH;
								gridBagConstraints.weightx = 1.0;
								gridBagConstraints.weighty = 1.0;
								jPanel11.add(jScrollPane2, gridBagConstraints);
	
								//now refresh the table so that it paints, cannot use refreshUI it causes a flicker.
								m_ResultsTable.updateUI();
								jScrollPane2.doLayout();
								jPanel11.doLayout();
								this.doLayout();									
								//
								// This is special code to aid in the automating testing.  We had no way to access
								// the information in the grid from the automated scripts and/or VisualTest, so
								// if a flag is set in the registry, we will dump the results of the grid to a
								// specified file
								//
								// TODO
								//if( GETDEBUGFLAG_RELEASE(_T("DumpGridResults"), 0))
								//{
								//	CComBSTR file = CRegistry::GetItem( CString(_T("DumpGridResultsFile")), CString(_T("")));
								//	if (file.Length())
								//	{
								//		m_FlexGrid->SaveGrid(file, flexFileCommaText, CComVariant(FALSE));
								//	}
								//}
							}
							else
							{
								// no items selected in the grid
								String noneStr = FindUtilities.translateString("IDS_NOITEMSSELECTED");
								String str2 = FindUtilities.translateString("IDS_PROJNAME2");
								IErrorDialog pTemp = new SwingErrorDialog(this);
								if (pTemp != null)
								{
									pTemp.display(noneStr, MessageIconKindEnum.EDIK_ICONINFORMATION, str2);
								}
							}
						}
					}
				}
				m_ReplaceCombo.setSelectedItem(str);
				FindUtilities.endWaitCursor(getContentPane());
			}
			else
			{
				String strNo = FindUtilities.translateString("IDS_NOREPLACESTR");
				String str2 = FindUtilities.translateString("IDS_PROJNAME2");
				IErrorDialog pTemp = new SwingErrorDialog(this);
				if (pTemp != null)
				{
					pTemp.display(strNo, MessageIconKindEnum.EDIK_ICONINFORMATION, str2);
				}
			}
		}
	}
	public void onDblClickFindResults(int row, FindTableModel model)
	{
		m_Status.setText("");
		boolean hr = FindUtilities.onDblClickFindResults(row, model, m_Controller);
		if (!hr)
		{
			String msg =  FindUtilities.translateString("IDS_NOPRESELEMENTS");
			m_Status.setText(msg);
		}
	}
	private void onReplaceAllButton(java.awt.event.ActionEvent evt) 
	{
		Object obj = evt.getSource();
		if (obj instanceof JButton)
		{
			m_Status.setText("");
			String str;
			str = (String)(m_ReplaceCombo.getSelectedItem());
			if (str != null && str.length() > 0)
			{
				m_ReplaceButton.setEnabled(false);
				m_ReplaceAllButton.setEnabled(false);
				FindUtilities.startWaitCursor(getContentPane());
				// Save the values of the search combo
				FindUtilities.saveSearchString("LastReplaceStrings", m_ReplaceCombo);
				// reset what is in the search combo
				FindUtilities.populateComboBoxes("LastReplaceStrings", m_ReplaceCombo);
				if (m_Controller != null)
				{
					m_Controller.setReplaceString(str);
					FindResults pResults = new FindResults();
					if (pResults != null)
					{
						loadResultsFromGrid(pResults, false);
						// clear the grid
						m_Controller.replace(pResults);
						// show the results
						jPanel11.removeAll();
						ETList< Object > findResults = FindUtilities.loadResultsIntoArray(pResults);
						FindTableModel model = new FindTableModel(this, findResults);
						m_ResultsTable = new JReplaceTable(model, this);
						jScrollPane2 = new JScrollPane(m_ResultsTable);
	
						GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
						gridBagConstraints.fill = GridBagConstraints.BOTH;
						gridBagConstraints.weightx = 1.0;
						gridBagConstraints.weighty = 1.0;
						jPanel11.add(jScrollPane2, gridBagConstraints);
	
						//now refresh the table so that it paints, cannot use refreshUI it causes a flicker.
						m_ResultsTable.updateUI();
						jScrollPane2.doLayout();
						jPanel11.doLayout();
						this.doLayout();									
						//
						// This is special code to aid in the automating testing.  We had no way to access
						// the information in the grid from the automated scripts and/or VisualTest, so
						// if a flag is set in the registry, we will dump the results of the grid to a
						// specified file
						//
						// TODO
						//if( GETDEBUGFLAG_RELEASE(_T("DumpGridResults"), 0))
						//{
						//	CComBSTR file = CRegistry::GetItem( CString(_T("DumpGridResultsFile")), CString(_T("")));
						//	if (file.Length())
						//	{
						//		m_FlexGrid->SaveGrid(file, flexFileCommaText, CComVariant(FALSE));
						//	}
						//}
					}
				}
				FindUtilities.endWaitCursor(getContentPane());
                                m_ReplaceButton.setEnabled(true);
                                m_ReplaceAllButton.setEnabled(true);

			}
			else
			{
				String strNo = FindUtilities.translateString("IDS_NOREPLACESTR");
				String str2 = FindUtilities.translateString("IDS_PROJNAME2");
				IErrorDialog pTemp = new SwingErrorDialog(this);
				if (pTemp != null)
				{
					pTemp.display(strNo, MessageIconKindEnum.EDIK_ICONINFORMATION, str2);
				}
			}
		}
	}
		
	private void loadResultsFromGrid(FindResults pResults, boolean bSelect)
	{
		if (pResults != null)
		{
			// get the elements array from the results object
			ETList<IElement> pElements = pResults.getElements();
			// get the diagrams array from the results object
			ETList<IProxyDiagram> pDiagrams = pResults.getDiagrams();
			if ( (pElements != null) && (pDiagrams != null))
			{
				if (bSelect)
				{
					// loop through the information in the table
					int[] selRows = m_ResultsTable.getSelectedRows();
					for (int x = 0; x < selRows.length; x++)
					{
						int selRow = selRows[x];
						FindTableModel model = (FindTableModel)m_ResultsTable.getModel();
						if (model != null)
						{
							IElement pElement = model.getElementAtRow(selRow);
							if (pElement != null)
							{
								pElements.add(pElement);
							}
							else
							{
								IProxyDiagram pDiagram = model.getDiagramAtRow(selRow);
								if (pDiagram != null)
								{
									pDiagrams.add(pDiagram);
								}
							}
						}
					}
				}
				else
				{
					int rows = m_ResultsTable.getRowCount();
					for (int x = 0; x < rows; x++)
					{
						FindTableModel model = (FindTableModel)m_ResultsTable.getModel();
						if (model != null)
						{
							IElement pElement = model.getElementAtRow(x);
							if (pElement != null)
							{
								pElements.add(pElement);
							}
							else
							{
								IProxyDiagram pDiagram = model.getDiagramAtRow(x);
								if (pDiagram != null)
								{
									pDiagrams.add(pDiagram);
								}
							}
						}
					}
					
				}
			}
		}
	} 		
	private void clearGrid()
	{
		// clear the results
		jPanel11.removeAll();
		FindTableModel model = new FindTableModel(this, null);
		m_ResultsTable = new JReplaceTable(model, this);
		jScrollPane2 = new JScrollPane(m_ResultsTable);
								
		GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.fill = GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		jPanel11.add(jScrollPane2, gridBagConstraints);
								
		//now refresh the table so that it paints, cannot use refreshUI it causes a flicker.
		m_ResultsTable.updateUI();
		jScrollPane2.doLayout();
		jPanel11.doLayout();
		this.doLayout();
	}

		private void initDialog()
		{
			m_Status.setText("");
			FindUtilities.populateProjectList(m_ProjectList);
			FindUtilities.selectProjectInList( m_ProjectList );
			FindUtilities.populateComboBoxes("LastSearchStrings", m_FindCombo);
			FindUtilities.populateComboBoxes("LastReplaceStrings", m_ReplaceCombo);
			m_ReplaceButton.setEnabled( false );
			m_ReplaceAllButton.setEnabled( false );		
		}

	public void setController(FindController controller)
	{
		m_Controller = controller;
		m_Controller.setDialog(this);
	}
		

	/** Closes the dialog */
	private void closeDialog(java.awt.event.WindowEvent evt) {
		setVisible(false);
		dispose();
	}

	// Variables declaration - do not modify
	private javax.swing.JButton m_FindButton;
	private javax.swing.JButton m_CloseButton;
	private javax.swing.JLabel textLabel;
	private javax.swing.JLabel textLabel2;
	private javax.swing.JComboBox m_FindCombo;
	private javax.swing.JCheckBox m_LoadExternalCheck;
	private javax.swing.JCheckBox m_MatchCaseCheck;
	private javax.swing.JCheckBox m_NavigateCheck;
	private javax.swing.JList m_ProjectList;
	private javax.swing.JRadioButton m_ProjectRadio;
	private javax.swing.JTable m_ResultsTable;
	private javax.swing.JRadioButton m_SearchAlias;
	private javax.swing.JRadioButton m_SearchDescriptionsRadio;
	private javax.swing.JRadioButton m_SearchElementsRadio;
	private javax.swing.JTextField m_Status;
	private javax.swing.JCheckBox m_WholeWordCheck;
	private javax.swing.JRadioButton m_WorkspaceRadio;
	private javax.swing.JCheckBox m_XpathCheck;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel10;
	private javax.swing.JPanel jPanel11;
	private javax.swing.JPanel jPanel12;
	private javax.swing.JPanel jPanel13;
	private javax.swing.JPanel jPanel14;
	private javax.swing.JPanel jPanel15;
	private javax.swing.JPanel jPanel16;
	private javax.swing.JPanel jPanel17;
	private javax.swing.JPanel jPanel18;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JPanel jPanel4r;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JPanel jPanel6;
	private javax.swing.JPanel jPanel7;
	private javax.swing.JPanel jPanel9;
	private javax.swing.JButton m_ReplaceButton;
	private javax.swing.JButton m_ReplaceAllButton;
	private javax.swing.JComboBox m_ReplaceCombo;
	
	 // End of variables declaration	
	private org.netbeans.modules.uml.ui.support.finddialog.FindController m_Controller = null;
	private boolean m_Done = false;

}		