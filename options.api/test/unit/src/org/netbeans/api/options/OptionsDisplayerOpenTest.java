/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.api.options;
/*
 * OptionsDisplayerTest.java
 * JUnit based test
 *
 * Created on December 12, 2006, 11:13 AM
 */

import java.awt.Frame;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.SwingUtilities;
import org.netbeans.junit.NbTestCase;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

/**
 *
 * @author Radek Matous
 */
public class OptionsDisplayerOpenTest extends NbTestCase {
    private static TestDisplayer displayer = new TestDisplayer();
    private static final int REPEATER = 10; 
    Logger log;
    static {
        String[] layers = new String[] {"org/netbeans/api/options/mf-layer.xml"};//NOI18N
        Object[] instances = new Object[] {displayer};
        IDEInitializer.setup(layers,instances);
    }
    
    public OptionsDisplayerOpenTest(String testName) {
        super(testName);
    }
        
    protected void setUp() throws Exception {
        log = Logger.getLogger("[Test - " + getName() + "]");
    }
    
    protected void tearDown() throws Exception {
    }
    /**
     * Test of getDefault method, of class org.netbeans.api.options.OptionsDisplayer.
     */
    public void testGetDefault() {
        assertNotNull(OptionsDisplayer.getDefault());
    }
    
    public void testOpenFromWorkerThread() {
        openOpen(null);
        openOpen("Registered");
        openOpen("Unknown");
        openCloseOpen(null);
        openCloseOpen("Registered");
        openCloseOpen("Unknown");        
    }
    
    public void testOpenFromAWT() throws Exception {
        SwingUtilities.invokeAndWait(new Runnable() {
            public void run() {
                testOpenFromWorkerThread();
            }
        });
    }
    
    public void testOpenFromMixedThreads() throws Exception {
        testOpenFromWorkerThread();                
        testOpenFromAWT();
        testOpenFromWorkerThread();
        testOpenFromAWT();
    }
    
    public void openOpen(String categoryId) {
        for (int i = 0; i < REPEATER; i++) {
            if (categoryId == null) {
                open(true);
                open(false);
                close();
                //don't call: OptionsDisplayer.getDefault().open(null) but OptionsDisplayer.getDefault().open()
                open(null, false);
                close();
            } else {
                if ("Registered".equals(categoryId)) {
                    open(categoryId, true);
                    open(categoryId, false);
                    close();
                } else {
                    open(categoryId, false);
                    open(categoryId, false);
                    close();
                }
            }
        }
    }
    
    public void openCloseOpen(String categoryId) {
        for (int i = 0; i < REPEATER; i++) {
            if (categoryId == null) {
                open(true);
                close();
                open(true);
                close();
            } else {
                if ("Registered".equals(categoryId)) {
                    open(categoryId, true);
                    close();
                    open(categoryId, true);
                    close();
                } else {
                    open(categoryId, false);
                    close();
                    open(categoryId, false);
                    close();
                }                
            }
        }
    }
    
    public void open(boolean expectedResult) {
        modality(displayer.descriptor);
        boolean latestResult = OptionsDisplayer.getDefault().open() ;
        assertEquals(expectedResult, latestResult);
    }
    
    public void open(String categoryId, boolean expectedResult) {
        modality(displayer.descriptor);
        boolean latestResult = OptionsDisplayer.getDefault().open(categoryId);
        assertEquals(expectedResult, latestResult);
    }
    
    public void modality(DialogDescriptor desc) {
        if (desc != null) {
            assertFalse(desc.isModal());
        }
    }
    
    public void close() {
        modality(displayer.descriptor);
        displayer.close();
    }
    
    protected Level logLevel() {
        return Level.FINE;
    }
        
    private static class TestDisplayer extends DialogDisplayer implements Runnable {
        DialogDescriptor descriptor;
        private JDialog dialog;
        public Object notify(NotifyDescriptor descriptor) {
            throw new UnsupportedOperationException("Not supported yet.");
        }
        
        public Dialog createDialog(DialogDescriptor descriptor) {
            this.descriptor = descriptor;
            return dialog = new TestDialog(descriptor);
        }
        
        public void close() {
            try {
                if (SwingUtilities.isEventDispatchThread()) {
                    run();
                } else {
                    SwingUtilities.invokeAndWait(this);
                }
            } catch (InterruptedException ex) {
            } catch (InvocationTargetException ex) {
            }
        }
        
        public void run() {
            if (descriptor != null) {
                Object[] oo = descriptor.getClosingOptions();
                for (int i = 0; i < oo.length; i++) {
                    String command = ((JButton)oo[i]).getActionCommand();
                    if (oo[i] instanceof JButton && "OK".equals(command)) {
                        descriptor.getButtonListener().actionPerformed(new ActionEvent(oo[i], 0, command));
                        return;
                    }
                }
            }
        }
    }
    
    private static class TestDialog extends JDialog {
        TestDialog(DialogDescriptor descriptor) {
            super((Frame)null, descriptor.getTitle(), descriptor.isModal());
        }
        
        public void setVisible(boolean b) {
            if (isModal()) {
                super.setVisible(b);
            }
        }
    }
}