
=== Handler Interface:

public interface BHandler extends ContentHandler {
    /** A container element end event handling method.
     *
     *
     */
    public void end_Books() throws SAXException;
    
    /** A container element end event handling method.
     *
     *
     */
    public void end_Custom() throws SAXException;
    
    /** A container element end event handling method.
     *
     *
     */
    public void end_productHandlerMethod() throws SAXException;
    
    /** A data element event handling method.
     * @param data value or null
     * @param meta attributes
     *
     *
     */
    public void handle_Custom(final java.lang.String data, final Attributes meta) throws SAXException;
    
    /** A data element event handling method.
     * @param data value or null
     * @param meta attributes
     *
     *
     */
    public void handle_Descript(final java.lang.String data, final Attributes meta) throws SAXException;
    
    /** An empty element event handling method.
     * @param data value or null
     *
     *
     */
    public void handle_Image(final Attributes meta) throws SAXException;
    
    /** A data element event handling method.
     * @param data value or null
     * @param meta attributes
     *
     *
     */
    public void handle_Price(final int data, final Attributes meta) throws SAXException;
    
    /** A data element event handling method.
     * @param data value or null
     * @param meta attributes
     *
     *
     */
    public void handle_inc_level_2(final java.lang.String data, final Attributes meta) throws SAXException;
    
    /** A data element event handling method.
     * @param data value or null
     * @param meta attributes
     *
     *
     */
    public void handle_x_include(final java.lang.String data, final Attributes meta) throws SAXException;
    
    /** A container element start event handling method.
     * @param meta attributes
     *
     *
     */
    public void start_Books(final Attributes meta) throws SAXException;
    
    /** A container element start event handling method.
     * @param meta attributes
     *
     *
     */
    public void start_Custom(final Attributes meta) throws SAXException;
    
    /** A container element start event handling method.
     * @param meta attributes
     *
     *
     */
    public void start_productHandlerMethod(final Attributes meta) throws SAXException;
    
    
}
=== Handler Implementation:

public class BHImpl implements BHandler {
    public static final boolean DEBUG = false;
    
    public void characters(char[] ch, int start, int length) throws SAXException {
    }
    
    public void endDocument() throws SAXException {
    }
    
    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
    }
    
    public void endPrefixMapping(String prefix) throws SAXException {
    }
    
    public void end_Books() throws SAXException {
        if (DEBUG) System.err.println("end_Books()");
    }
    
    public void end_Custom() throws SAXException {
        if (DEBUG) System.err.println("end_Custom()");
    }
    
    public void end_productHandlerMethod() throws SAXException {
        if (DEBUG) System.err.println("end_productHandlerMethod()");
    }
    
    public void handle_Custom(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_Custom: " + data);
    }
    
    public void handle_Descript(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_Descript: " + data);
    }
    
    public void handle_Image(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_Image: " + meta);
    }
    
    public void handle_Price(final int data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_Price: " + data);
    }
    
    public void handle_inc_level_2(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_inc_level_2: " + data);
    }
    
    public void handle_x_include(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_x_include: " + data);
    }
    
    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
    }
    
    public void processingInstruction(String target, String data) throws SAXException {
    }
    
    public void setDocumentLocator(Locator locator) {
    }
    
    public void skippedEntity(String name) throws SAXException {
    }
    
    public void startDocument() throws SAXException {
    }
    
    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
    }
    
    public void startPrefixMapping(String prefix, String uri) throws SAXException {
    }
    
    public void start_Books(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Books: " + meta);
    }
    
    public void start_Custom(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Custom: " + meta);
    }
    
    public void start_productHandlerMethod(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_productHandlerMethod: " + meta);
    }
    
    
}

=== Generated Parser:

/** The class reads XML documents according to specified DTD and
 * translates all related events into BHandler events.
 * <p>Usage sample:
 * <pre>
 *    BParser parser = new BParser(...);
 *    parser.parse(new InputSource("..."));
 * </pre>
 * <p><b>Warning:</b> the class is machine generated. DO NOT MODIFY</p>
 *
 *
 */
public class BParser implements ContentHandler {
    private java.lang.StringBuffer buffer;
    
    private java.util.Stack context;
    
    private BHandler handler;
    
    private BParslet parslet;
    
    private EntityResolver resolver;
    
    /** Creates a parser instance.
     * @param handler handler interface implementation (never <code>null</code>
     * @param resolver SAX entity resolver implementation or <code>null</code>.
     * It is recommended that it could be able to resolve at least the DTD.@param parslet convertors implementation (never <code>null</code>
     *
     *
     */
    public BParser(final BHandler handler, final EntityResolver resolver, final BParslet parslet) {
        this.parslet = parslet;
        this.handler = handler;
        this.resolver = resolver;
        buffer = new StringBuffer(111);
        context = new java.util.Stack();
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void characters(char[] chars, int start, int len) throws SAXException {
        buffer.append(chars, start, len);handler.characters(chars, start, len);
    }
    
    private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
        if (fireOnlyIfMixed && buffer.length() == 0) return; //skip it
        
        Object[] ctx = (Object[]) context.peek();
        String here = (String) ctx[0];
        Attributes attrs = (Attributes) ctx[1];
        if ("Descript".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_Descript(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("inc-level-2".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_inc_level_2(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("Price".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_Price(parslet.priceToInt(buffer.length() == 0 ? null : buffer.toString()), attrs);
        } else if ("x-include".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_x_include(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else if ("Custom".equals(here)) {
            handler.handle_Custom(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else {
            //do not care
        }
        buffer.delete(0, buffer.length());
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void endDocument() throws SAXException {
        handler.endDocument();
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void endElement(java.lang.String ns, java.lang.String name, java.lang.String qname) throws SAXException {
        dispatch(false);
        context.pop();
        if ("Product".equals(qname)) {
            handler.end_productHandlerMethod();
        } else if ("Books".equals(qname)) {
            handler.end_Books();
        } else if ("Custom".equals(qname)) {
            handler.end_Custom();
        }
        handler.endElement(ns, name, qname);
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void endPrefixMapping(final java.lang.String prefix) throws SAXException {
        handler.endPrefixMapping(prefix);
    }
    
    /** Creates default error handler used by this parser.
     * @return org.xml.sax.ErrorHandler implementation
     *
     *
     */
    protected ErrorHandler getDefaultErrorHandler() {
        return new ErrorHandler() {
            public void error(SAXParseException ex) throws SAXException  {
                if (context.isEmpty()) System.err.println("Missing DOCTYPE.");
                throw ex;
            }
            
            public void fatalError(SAXParseException ex) throws SAXException {
                throw ex;
            }
            
            public void warning(SAXParseException ex) throws SAXException {
                // ignore
            }
        };
        
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void ignorableWhitespace(char[] chars, int start, int len) throws SAXException {
        handler.ignorableWhitespace(chars, start, len);
    }
    
    /** The recognizer entry method taking an InputSource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     *
     */
    public void parse(final InputSource input) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(input, this);
    }
    
    /** The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     *
     */
    public void parse(final java.net.URL url) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(new InputSource(url.toExternalForm()), this);
    }
    
    /** The recognizer entry method taking an Inputsource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     *
     */
    public static void parse(final InputSource input, final BHandler handler, final BParslet parslet) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(input, new BParser(handler, null, parslet));
    }
    
    /** The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     *
     */
    public static void parse(final java.net.URL url, final BHandler handler, final BParslet parslet) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(new InputSource(url.toExternalForm()), handler, parslet);
    }
    
    private static void parse(final InputSource input, final BParser recognizer) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory.newInstance();
        factory.setValidating(true);  //the code was generated according DTD
        factory.setNamespaceAware(false);  //the code was generated according DTD
        XMLReader parser = factory.newSAXParser().getXMLReader();
        parser.setContentHandler(recognizer);
        parser.setErrorHandler(recognizer.getDefaultErrorHandler());
        if (recognizer.resolver != null) parser.setEntityResolver(recognizer.resolver);
        parser.parse(input);
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void processingInstruction(java.lang.String target, java.lang.String data) throws SAXException {
        handler.processingInstruction(target, data);
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void setDocumentLocator(Locator locator) {
        handler.setDocumentLocator(locator);
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void skippedEntity(java.lang.String name) throws SAXException {
        handler.skippedEntity(name);
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void startDocument() throws SAXException {
        handler.startDocument();
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void startElement(java.lang.String ns, java.lang.String name, java.lang.String qname, Attributes attrs) throws SAXException {
        dispatch(true);
        context.push(new Object[] {qname, new org.xml.sax.helpers.AttributesImpl(attrs)});
        if ("Product".equals(qname)) {
            handler.start_productHandlerMethod(attrs);
        } else if ("Image".equals(qname)) {
            handler.handle_Image(attrs);
        } else if ("Books".equals(qname)) {
            handler.start_Books(attrs);
        } else if ("Custom".equals(qname)) {
            handler.start_Custom(attrs);
        }
        handler.startElement(ns, name, qname, attrs);
    }
    
    /** This SAX interface method is implemented by the parser.
     *
     *
     */
    public final void startPrefixMapping(final java.lang.String prefix, final java.lang.String uri) throws SAXException {
        handler.startPrefixMapping(prefix, uri);
    }
    
    
}

=== Data Convertor Interfaces:

public interface BParslet {
    public java.awt.Image getImage(final java.lang.String data) throws SAXException;
    
    public java.lang.String getText(final java.lang.String data) throws SAXException;
    
    public int priceToInt(final java.lang.String data) throws SAXException;
    
    
}

=== Data Convertor Implementation:

public class BPImpl implements BParslet {
    public java.awt.Image getImage(final java.lang.String data) throws SAXException {
        throw new SAXException("Not implemented yet.");
    }
    
    public java.lang.String getText(final java.lang.String data) throws SAXException {
        throw new SAXException("Not implemented yet.");
    }
    
    public int priceToInt(final java.lang.String data) throws SAXException {
        try {
            return Integer.parseInt(data.trim());
        } catch (IllegalArgumentException ex) {
            throw new SAXException("priceToInt(" + data.trim() + ")", ex);
        }
    }
    
    
}
