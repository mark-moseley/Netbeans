#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#

# ResourceBundle properties file

# manifest localization
OpenIDE-Module-Name=Transparent Persistence Mapping Core
OpenIDE-Module-Display-Category=Database
OpenIDE-Module-Short-Description=Map Java classes to database schema
OpenIDE-Module-Long-Description=The mapping core is automatically loaded by \
other Transparent Persistence modules.  It provides core mapping support for \
the other modules.

# Action submenu
Actions/Transparent_Persistence=Transparent Persistence

# Help actions
Menu/Help/HelpShortcuts/com-sun-jdo-modules-persistence-mapping-core-mainpage.xml=Transparent Persistence Help
Actions/Help/com-sun-jdo-modules-persistence-mapping-core-mainpage.xml=Transparent Persistence Help

# Mime resolver
Services/MIMEResolver/com-sun-jdo-modules-persistence-mapping-core-mime-resolver.xml=Transparent Persistence Mapping files

# Settings
Services/Editing/com-sun-jdo-modules-persistence-mapping-core-settings-MappingSettings.settings=Transparent Persistence

# MappingDataLoaderBeanInfo
PROP_Loader_Name=Persistence-Capable Source Objects

# MappingAction and wizard
# Menu mapping class to tables
MENU_MAP_TO_TABLES=Map to Database...
# title of wizard
TITLE_Wizard=class {0} - Map to Database
# title format for the wizard {0}=TITLE_Panel_<current#>
# {1}=<current#>, {2}=<total#> 
CTL_Title_Format={0} [{1} of {2}]
# title of screen 1 of wizard
TITLE_Panel_1=Overview
# title of screen 2 of wizard
TITLE_Panel_2=Select Table(s)
# title of screen 3 of wizard
TITLE_Panel_3=Field Mappings
# title of popup from screen 2 of wizard from Browse button
TITLE_Select_Primary_Table=Select Primary Table
# title of popup from screen 2 of wizard with Add and Edit buttons
# {0}=class name
TITLE_Select_Secondary_Table=Mapped Secondary Table Setup - {0}
# title of popup from relationship mapping panel's related class Browse button
TITLE_Select_Persistence_Class=Select Persistence-Capable Class
# title of popup from screen 3 of wizard from "..." on regular fields in table
# {0}=field name
Title_Field_Mapping=Map Field to Multiple Columns - {0}

# icon description
ICON_illegal=Invalid
# hint/tooltip formatting when there is an invalid value
# {0}=ICON_illegal from above
# {1}=actual tooltip text for a valid value
HINT_INVALID={0} - {1}

# accessibility names and descriptions
# for secondary table panel which is shown from props or embedded in wizard
ACSD_Secondary_Table=Secondary tables enable you to map columns that are not \
part of your primary table to your class fields. For example, you might add a \
DEPARTMENT table as a secondary table in order to include a department name in \
your Employee class.
# for secondary table setup which is shown from secondary table panel
ACSD_Secondary_Table_Setup=A secondary table enables you to map your field \
directly to columns that are not part of your primary table. You can use \
this pane to select secondary tables, and to create compound keys by adding \
column pairs.
# for map field to columns table which is showns from props or page 3 of wizard
ACSD_Field_Mapping=This dialog box enables you to map a field to more than one \
column.
# for all selectors (schema, primary table, persistence-capable class)
ACSD_Selector=Choose the item you want from the filesystem tree.
# for the error and warning message which come up from the field mapping
# properties
# {0}="Error" or "Warning" (standard message titles from the nb core)
# {1}=The message text -- will be one of MSG_NeedToMapPrimaryTable or 
# from below MSG_SchemaMismatch
ACSD_MappingAlert={0}: {1}

# labels
LBL_class=Class:
LBL_Mnemonic_class=C
LBL_Schema=Schema:
LBL_Mnemonic_Schema=S
LBL_primary_table=Primary Table:
LBL_Mnemonic_primary_table=M
LBL_secondary_table=Secondary Table(s) (Optional):
LBL_secondary_table_no_op=Secondary Table(s):
LBL_Mnemonic_secondary_table=T
LBL_Related_Class=Related Class:
LBL_Mnemonic_Related_Class=C
LBL_Related_Field=Related Field:
LBL_Mnemonic_Related_Field=E
LBL_Primary_Table=Primary Table:
LBL_Mnemonic_Primary_Table=P
LBL_Secondary_Table=Secondary Table:
LBL_Mnemonic_Secondary_Table=T
LBL_REFKEY=Pairs of Columns in Reference Key:
LBL_Mnemonic_REFKEY=K
LBL_Available_Columns=Available Columns:
LBL_Mnemonic_Available_Columns=C
LBL_Col_in_Mapping=Columns in Mapping:
LBL_Mnemonic_Col_in_Mapping=M
LBL_Persistent_Map=Persistent Field Mappings for Class {0}:
LBL_Mnemonic_Persistent_Map=M
LBL_Key_Column_Pairs=Key Column Pairs
LBL_Mnemonic_Key_Column_Pairs=K

# names of buttons(Optional):
CTL_ADD=Add...
CTL_ADD_TO=Add >
CTL_Mnemonic_ADD=A
CTL_REMOVE=Remove
CTL_REMOVE_TO=< Remove
CTL_Mnemonic_REMOVE=R
CTL_MOVE_UP=Move Up
CTL_Mnemonic_MOVE_UP=U
CTL_MOVE_DOWN=Move Down
CTL_Mnemonic_MOVE_DOWN=D
CTL_EDIT=Edit...
CTL_Mnemonic_EDIT=E
CTL_BROWSE=Browse...
CTL_Mnemonic_BROWSE=w
# Note that the '&' goes just before the mnemonic character
CTL_UNDO=&Undo
CTL_IGNORE=&Ignore

CTL_...=...
CTL_AUTOMAP=Automap
CTL_Mnemonic_AUTOMAP=A
CTL_UNMAP=Unmap
CTL_Mnemonic_UNMAP=U
CTL_ADD_PAIR=Add Pair
CTL_Mnemonic_ADD_PAIR=A
CTL_SAVE_NOW=Save Now
# Note that the '&' goes just before the mnemonic character
CTL_SAVE_LATER=Save &Later

# Tooltips for buttons and textfields
HINT_BROWSE=Select table from this schema or a different one
HINT_EDIT=Edit the reference key for the selected table
HINT_AUTOMAP=Automatically map all unmapped fields to the most logical columns
HINT_UNMAP=Remove mapping from selected field(s)
HINT_Schema=To change schema, browse for primary table

# Message Text
MSG_File_Migration=This persistence-capable class is formatted for a previous \
version of \nTransparent Persistence functionality.\n\nSaving this file with \
this version of the IDE will make it incompatible with \nprevious versions of \
Transparent Persistence functionality.
MSG_ConfirmNonPersistentField=Are you sure you want to convert {0} to \
non-persistent?
MSG_NeedToMapPrimaryTable=Before you can map this field, it must be \
persistent and the class\nmust have a valid Mapped Primary Table.  To set the \
Mapped Primary\nTable, either select the source node for this class and \
choose \nMap to Database... from the right-click menu or set a Mapped\n\
Primary Table in the main properties sheet for this class.
# {0}=related class name (not fully qualified)
MSG_SchemaMismatch=The {0} class is mapped to a different schema than this \
class.  \nBefore you can edit the mapping for this field, you must update \
the \nmapped schema property of one of the classes.
# {0}=illegal cardinality value
MSG_IllegalCardinality=Cardinality bounds must be integers -- {0} is an \
illegal value.
# {0}=schema name
MSG_SchemaNotFound=Cannot find schema named {0}.
# {0}=class name
MSG_RelatedClassNotFound=Cannot find persistence-capable class named {0}.
MSG_No_Secondary_Tables=There are no available secondary tables.
# {0}=related class name
MSG_Invalid_RelatedClass={0} is an invalid related class.\nA related \
class must not have a different schema than the class you are mapping.
# {0}=Number of Matches in Automap
MSG_AutoMap=Automap done ({0,choice,0#0 matches|1#1 match|1<{0} matches} found).
# {0} name of table
MSG_NeedPrimaryKey=Table {0} does not have a primary key
# {0}=field name
MSG_FieldNotAdded=Could not add field {0} to the persistence-capable class.

# user does some kind of change which makes an existing persistence-capable  
# class element no longer allowed to be persistence-capable
# {0}=class name
MSG_PersistenceCapableNotAllowed=Class {0} is no longer allowed to be\n\
persistence-capable.  Would you like to save your\n\
changes and revert the class from persistence-capable?
# Not used for Dogwood
# user does some kind of change which makes an existing non-persistence-capable 
# class element allowed to become persistence-capable
# {0}=class name
MSG_PersistenceCapableAllowed=Class {0} is now allowed to be \
persistence-capable.\nWould you like to make it persistence-capable?
# End not used for Dogwood
# user does some kind of change which makes an existing persistent 
# element no longer allowed to be persistent
# {0}=field name
MSG_PersistentNotAllowed=Field {0} is no longer allowed to be persistent.\n\
Would you like to remove the persistence?
# Not used for Dogwood
# user does some kind of change which makes an existing non-persistent 
# element allowed to become persistent
# {0}=field name
MSG_PersistentAllowed=Field {0} is now allowed to be persistent.\n\
Would you like to make it persistent?
# End not used for Dogwood
# user does some kind of change which makes an existing relationship need to 
# become an ordinary persistent field
# {0}=field name
MSG_RelationshipNotAllowed=Field {0} is no longer allowed to be a \
relationship field.\nWould you like to replace the relationship with a \
regular persistent field?
# user does some kind of change which makes an ordinary persistent field need  
# to become a relationship
# {0}=field name
MSG_RelationshipRequired=Field {0} is no longer allowed to be a regular \
persistent field.\nWould you like to replace the field with a relationship \
field?
# user does some kind of change which requires the collection class to change
# {0}=field name
MSG_CollectionClassChangeRequired=Field {0} has an invalid collection class \
for the specified type.\nWould you like to change the collection class?

## error and warning count summaries
# {0}=number of errors
MSG_CompilationErrors={0,choice,0#0 errors|1#1 error|1<{0} errors}
# {0}=number of warnings
MSG_CompilationWarnings={0,choice,0#0 warnings|1#1 warning|1<{0} warnings}

# Source node hint
HINT_ValidationErrors=Errors during persistence validation

#class element properties
PROP_persistent_class=Persistence-Capable
PROP_keyClass=Key Class
PROP_schema=Mapped Schema
PROP_primary_tables=Mapped Primary Table
PROP_secondary_tables=Mapped Secondary Table(s)
PROP_consistencyLevel=Consistency Level
PROP_versionField=Version Field

#field element properties
PROP_persistence=Persistent
PROP_keyField=Key Field
PROP_mapping=Mapping
# Not used for Dogwood
#PROP_persistence=Persistence
#PROP_read_sensitivity=Read Sensitivity
#PROP_write_sensitivity=Write Sensitivity
# End not used for Dogwood
PROP_readOnly=Read Only
PROP_fetchGroup=Fetch Group
#relationship element properties
PROP_lower_cardinality=Lower Bound
PROP_upper_cardinality=Upper Bound
PROP_updateAction=Update Action
PROP_deleteAction=Delete Action
PROP_elementClass=Related Class
PROP_relatedField=Related Field
PROP_collectionClass=Collection Class

HINT_persistent_class=If true, this class can be mapped transparently to a database
HINT_keyClass=Key class containing all key fields
HINT_schema=Captured database schema to which this class is mapped
HINT_primary_tables=Primary database table to which this class is mapped
HINT_secondary_tables=Optional secondary database table(s) to which this class is mapped
HINT_consistencyLevel=Consistency semantics for this class
HINT_versionField=Field of type 'long' used for the 'Version Consistency' Consistency Level
HINT_field_mapping=Persistent field that can be mapped to column(s)
HINT_field_mapping_properties=Map fields to database column(s)
HINT_persistence=If true, this field's value will be stored in the database
HINT_keyField=If true, this field should be mapped to a primary key column
HINT_mapping=Database column mapping of this persistent field
HINT_readOnly=If true, this field's value is not updatable to the database
HINT_fetchGroup=Group of fields fetched together from the database
HINT_lower_cardinality=Lower cardinality bound for this relationship
HINT_upper_cardinality=Upper cardinality bound for this relationship
HINT_updateAction=Specifies the runtime behavior of related instances upon update
HINT_deleteAction=Specifies the runtime behavior of related instances upon delete
HINT_elementClass=Persistence-capable class to which this relationship points
HINT_relatedField=The related class' field in a managed, two-way relationship
HINT_collectionClass=Collection class for this relationship

LBL_field_mapping_properties=Field Mapping

# Choices for relationship update and delete actions -- partially used for 
# Dogwood
CTL_relationshipAction_none=None
CTL_relationshipAction_nullify=Nullify
CTL_relationshipAction_restrict=Restrict
CTL_relationshipAction_cascade=Cascade
CTL_relationshipAction_aggregate=Aggregate
# Choices for consistency level - partially used
CTL_consistency_none=None
CTL_consistency_checkModifiedCommit=Check Modified at Commit
CTL_consistency_checkAllCommit=Check All at Commit
CTL_consistency_LockModified=Lock when Modified
CTL_consistency_LockModifiedCheckAllCommit=Lock when Modified and Check All at Commit
CTL_consistency_LockLoaded=Lock when Loaded
CTL_consistency_version=Version Consistency


# string alias for Integer.MAX_VALUE used for cardinality bounds
VALUE_cardinality_maximum=*
# string alias for null for unmapped items
VALUE_unmapped=<unmapped>
# string alias for null for unmapped field items
VALUE_unmapped_field=<unmapped>
# string alias for items mapped to a list of items
VALUE_mapped_list=<mapped to list>
# string alias for map to multiple action
VALUE_map_to_multiple=<map multiple columns>
# string alias for a current mapping
VALUE_current_mapping=<current mapping>
# string alias for null for unmapped relationship items
VALUE_unmapped_relationship=<unmapped relationship>
# string alias for null for mapped relationship items
VALUE_mapped_relationship=<mapped relationship>
# string alias for map relationship action
VALUE_map_to_relationship=<map relationship field>
# string alias for null fetch group or no related field
VALUE_none=None
# string alias for default fetch group
VALUE_default=Default
# string alias for hierarchical fetch group
# {0}=fetch group number
VALUE_hierarchical=Level {0}
# string alias for independent fetch group
# {0}=fetch group number
VALUE_independent=Independent {0}
# {0}=number of fetchgroups
VALUE_fetchGroups={0,choice,0#0 Groups|1#1 Group|1<{0} Groups}
# string alias for null related class
VALUE_related_class=<Choose Related Class>
# string alias for null column
VALUE_column=<Choose Column>
# string alias when there are no compatible columns
VALUE_no_compatible_column=<No Compatible Columns>
# string alias for null table
VALUE_table=<Choose Table>
# string alias for null join table
VALUE_join_table=<Choose Join Table>
# string alias when there are no valid version field choices
VALUE_no_valid_field=<No Valid Fields>

#message from node element
MSG_Cannot_Write=Cannot modify a read-only property.

#nodes
ConcurrencyGroups=Concurrency Groups
ConcurrencyGroups_HINT=All concurrency groups in this class.
MENU_CREATE_CONCURRENCY_GROUP=Concurrency Group...

# wizard top messages
ACSN_page1=Mapping Prerequisites
ACSD_page1=\
    This wizard allows you to set up or edit the database mapping for a Java class. \
    When you are finished, you will have a persistence-capable class that is mapped \
    to one or more database tables.\n\n

# The value from ACSD_page1 from above will be the prefix of this in 
# the text area in the first page of the mapping wizard.
MSG_page1=\
    Before you begin, make sure that:\n\n\
    - The database schema to which you want to map this class is captured \
    into a filesystem in the Explorer window. To capture a schema, choose New... \
    from the File menu and then select Database Schema from the Databases folder.\n\n \
    - Any Java classes that have relationships to the class you are mapping are \
    persistence-capable. Otherwise you will not be able to set up the mapping for those \
    relationship fields\n\n\
    - All fields in this class that you intend to be persistent are marked as persistent. To \
    make a field persistent, view that field's properties and change the Persistent property to True.\n\n\
    If your class is ready for mapping, click the Next button.

MSG_page2=\
Use the Browse... button to select the primary table (from a currently mounted database \
schema) to which you want to map your class. Then, if you want to map additional \
tables to this class, click the Add... button to add a secondary table.

MSG_FieldMap=Note: Selecting multiple columns implies that all columns will have the same value as the field.

MSG_page3=Use the drop-down menu for each field to map it to a database column. \
To map a field to more than one column, or to map a relationship field, use the ... button. \
If you want to map a field to a column in a table that is not in the \
drop-down list, return to the previous screen and add a secondary table to the mapping.

# Table headers
HD_Secondary_Table_Column=Secondary Table Column
HD_Primary_Table_Column=Primary Table Column
HD_Type=Type
HD_Table=Table
HD_Column=Column
HD_Field=Field
HD_Mapped_Columns=Mapped Column(s)
HD_Local_Column=Local Column
HD_Foreign_Column=Foreign Column
HD_Join_Column=Join Table Column

# ----------------------------------------
# Keys used for Relationship Mapping Wizard
# ----------------------------------------

# The Relationship Mapping Wizard is using some keys
# which have already been defined in this resource file.

# Wizard Title
RMW_Title={0} - Map Relationship Field

# Steps & Subtitles
RMW_Initial_Setup_Step=Initial Setup
RMW_Map_To_Key_Step=Map to Key
RMW_Map_To_Key_Local_To_Join_Step=Map to Key: Local to Join
RMW_Map_To_Key_Join_To_Foreign_Step=Map to Key: Join to Foreign

# Related Class Panel
RMW_Initial_Step_Text=Indicate which persistence-capable class this \
relationship field points to by selecting a related class. If you \
want this to be a managed relationship (optional), choose the \
related field in the related class that should point back at this field. \
If the related class is not mapped yet, select the primary table to \
which it should be mapped.
RMW_This_Class=This Class:
RMW_Mnemonic_This_Class=T
RMW_This_Field=This Field:
RMW_Mnemonic_This_Field=S
RMW_Mnemonic_Primary_Table=m
RMW_Relationship_Navigation_Text=Indicate how this relationship \
will be navigated in the database:
RMW_Link_Directly= Link the Mapped Tables Directly (typically 1..1 or 1..n relationship).
RMW_Mnemonic_Link_Directly=L
RMW_Link_Using_Join= Link the Mapped Tables Using a Join Table (typically n..m relationship).
RMW_Mnemonic_Link_Using_Join=J
HINT_relatedPrimaryTable=Table to which the related class is mapped

# Map to Key Panel
RMW_Map_To_Key_Top_Text=Map the relationship field to a key, \
described as a pair or pairs of columns.  The most common \
way to map a relationship field is to map it to a \
foreign key or the inverse of a foreign key.  If there \
is no foreign key defined, you might want to map to a \
reference key or define a custom key.
RMW_Map_To_Key_Bottom_Text=Review the default key or \
define your own custom key.  A key contains pairs \
of columns from the tables mapped to this class and \
the related class.  The columns in each pair are \
expected to have the same value.  To create a compound \
key, use the Add Pair button.

# Map to Key: Local to Join Panel
RMW_Map_To_Key_Local_To_Join_Top_Text=Choose a join table.  Then, \
map the relationship field to a key, described as a \
pair or pairs of columns.  The most common way to map \
a relationship field is to map it to a foreign key \
or the inverse of a foreign key.  If there is no foreign \
key defined, you might want to map to a reference key \
or define a custom key.
RMW_Join_Table=Join Table:
RMW_Mnemonic_Join_Table=J
RMW_Map_To_Key_Local_To_Join_Bottom_Text=Review the default \
key or define your own custom key.  A key contains pairs of \
columns from the tables mapped to this class. \
The columns in each pair are expected to have the same value. \
To create a compound key, use the Add Pair button.

# Map to Key: Join to Foreign Panel
RMW_Map_To_Key_Join_To_Foreign_Top_Text=Map the relationship field \
to a key, described as a pair or pairs of columns.  The most \
common way to map a relationship field is to map it to \
a foreign key or the inverse of a foreign key.  If there \
is no foreign key defined, you might want to map to a \
reference key or define a custom key.
RMW_Map_To_Key_Join_To_Foreign_Bottom_Text=Review the default \
key or define your own custom key.  A key contains pairs \
of columns from the join table and columns from tables mapped to \
this class.  The columns in each pair are expected to have the \
same value.  To create a compound key, use the Add Pair button.

# -------------------------------------------
# End of Keys for Relationship Mapping Wizard
# -------------------------------------------

# logging messages - not brandable for ejb context at this time
mapping.module.loader.error_configuring_actions=Error configuring loader actions
mapping.module.loader.error_configuring_launcher=Error configuring Select Related Class window
mapping.module.loader.error_executing_launcher=Error executing Select Related Class window
# {0} = property name
mapping.module.property.cannot_access_value=Could not access value for \
property {0}
# {0} = suffix name
mapping.module.context.extra_bundle_not_found=Could not find bundle with \
suffix {0}
# {0} = dump of state before changes
mapping.module.state.before_state=Dumping state before changes made: \n {0}
# {0} = dump of state after changes
mapping.module.state.after_state=Dumping state after changes made: \n {0}
# {0} = dump of state after error
mapping.module.state.after_error_state=Dumping state after error: \n {0}
# {0} = table name
# {1} = column name
mapping.module.fieldmapping.add_column=Adding {0}.{1}
# {0} = table name
# {1} = column name
mapping.module.fieldmapping.remove_column=Removing {0}.{1}
# {0} = table name
# {1} = column name
mapping.module.fieldmapping.move_column=Moving {0}.{1}
mapping.module.bad_location_exception=Could not set font and icon properly
