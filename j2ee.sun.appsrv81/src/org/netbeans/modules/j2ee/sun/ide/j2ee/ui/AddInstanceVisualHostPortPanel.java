/*
 *                 Sun Public License Notice
 *
 * The contents of this file are subject to the Sun Public License
 * Version 1.0 (the "License"). You may not use this file except in
 * compliance with the License. A copy of the License is available at
 * http://www.sun.com/
 *
 * The Original Code is NetBeans. The Initial Developer of the Original
 * Code is Sun Microsystems, Inc. Portions Copyright 1997-2005 Sun
 * Microsystems, Inc. All Rights Reserved.
 */
package org.netbeans.modules.j2ee.sun.ide.j2ee.ui;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.modules.j2ee.sun.api.SunURIManager;
import org.openide.util.NbBundle;

public final class AddInstanceVisualHostPortPanel extends JPanel {

    private SpinnerNumberModel valueModel = 
            new SpinnerNumberModel(4848,1,65535,1);
    /**
     * Creates new form AddInstanceVisualHostPortPanel
     */
    public AddInstanceVisualHostPortPanel() {
        initComponents();
        deploymentUrlDisplay.setText("");
        portValue.setModel(valueModel);
        portValue.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent ev) {
                fireChangeEvent();
            }
        });
        hostName.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                fireChangeEvent();
            }

            public void removeUpdate(DocumentEvent e) {
                fireChangeEvent();
            }

            public void changedUpdate(DocumentEvent e) {
                fireChangeEvent();
            }
            
        });
    }

    public String getName() {
        return NbBundle.getMessage(AddInstanceVisualHostPortPanel.class, 
                "StepName_PickHostAndPort");                                // NOI18N
    }
    
    String getHost() {
        return hostName.getText().trim();
    }
    
    int getPort() {
        return valueModel.getNumber().intValue();
    }
    
    // Event Handling
    //
    private Set/*<ChangeListener.*/ listenrs = new HashSet/*<Changelisteners.*/();

    void addChangeListener(ChangeListener l) {
        synchronized (listenrs) {
            listenrs.add(l);
        }
    }
    
    void removeChangeListener(ChangeListener l ) {
        synchronized (listenrs) {
            listenrs.remove(l);
        }
    }

    private void fireChangeEvent() {
        Iterator it;
        synchronized (listenrs) {
            it = new HashSet(listenrs).iterator();
        }
        ChangeEvent ev = new ChangeEvent(this);
        while (it.hasNext()) {
            ((ChangeListener)it.next()).stateChanged (ev);
        }
        deploymentUrlDisplay.setText(SunURIManager.SUNSERVERSURI+getHost()+":"+ // NOI18N
                getPort());
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        hostNameLabel = new javax.swing.JLabel();
        hostName = new javax.swing.JTextField();
        portValueLabel = new javax.swing.JLabel();
        deploymentUrlLabel = new javax.swing.JLabel();
        deploymentUrlDisplay = new javax.swing.JLabel();
        portValue = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        hostPortDescription = new javax.swing.JTextArea();

        hostNameLabel.setDisplayedMnemonic(org.openide.util.NbBundle.getMessage(AddInstanceVisualHostPortPanel.class, "MNM_hostNameLabel").charAt(0));
        hostNameLabel.setLabelFor(hostName);
        hostNameLabel.setText(org.openide.util.NbBundle.getMessage(AddInstanceVisualHostPortPanel.class, "LBL_hostNameLabel"));

        hostName.getAccessibleContext().setAccessibleDescription(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/sun/ide/j2ee/ui/Bundle").getString("DSC_hostName"));

        portValueLabel.setDisplayedMnemonic(org.openide.util.NbBundle.getMessage(AddInstanceVisualHostPortPanel.class, "MNM_portValueLabel").charAt(0));
        portValueLabel.setLabelFor(portValue);
        portValueLabel.setText(org.openide.util.NbBundle.getMessage(AddInstanceVisualHostPortPanel.class, "LBL_portValueLabel"));

        deploymentUrlLabel.setText(org.openide.util.NbBundle.getMessage(AddInstanceVisualHostPortPanel.class, "LBL_deploymentUrlLabel"));

        deploymentUrlDisplay.setText("FFFFF");

        jScrollPane1.setBorder(null);
        hostPortDescription.setColumns(10);
        hostPortDescription.setEditable(false);
        hostPortDescription.setLineWrap(true);
        hostPortDescription.setRows(2);
        hostPortDescription.setText(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/sun/ide/j2ee/ui/Bundle").getString("TXT_hostPortDescription"));
        hostPortDescription.setWrapStyleWord(true);
        hostPortDescription.setFocusable(false);
        hostPortDescription.setOpaque(false);
        jScrollPane1.setViewportView(hostPortDescription);
        hostPortDescription.getAccessibleContext().setAccessibleDescription(java.util.ResourceBundle.getBundle("org/netbeans/modules/j2ee/sun/ide/j2ee/ui/Bundle").getString("DSC_hostPortDescription"));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(deploymentUrlLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deploymentUrlDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(hostNameLabel)
                            .add(portValueLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(portValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 65, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(hostName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(hostNameLabel)
                    .add(hostName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(portValueLabel)
                    .add(portValue, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(24, 24, 24)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(deploymentUrlDisplay, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, deploymentUrlLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }
    // </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel deploymentUrlDisplay;
    private javax.swing.JLabel deploymentUrlLabel;
    private javax.swing.JTextField hostName;
    private javax.swing.JLabel hostNameLabel;
    private javax.swing.JTextArea hostPortDescription;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner portValue;
    private javax.swing.JLabel portValueLabel;
    // End of variables declaration//GEN-END:variables

}

