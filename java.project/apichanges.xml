<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->
<?xml-stylesheet type="text/xml" href="../nbbuild/javadoctools/apichanges.xsl"?>
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../nbbuild/javadoctools/apichanges.dtd">

<!--

INFO FOR PEOPLE ADDING CHANGES:

Check the DTD (apichanges.dtd) for details on the syntax. You do not
need to regenerate the HTML, as this is part of Javadoc generation; just
change the XML. Rough syntax of a change (several parts optional):

<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>

Also permitted elements: <package>, <branch>. <version> is API spec
version, recommended for all new changes. <compatibility> should say
if things were added/modified/deprecated/etc. and give all information
related to upgrading old code. List affected top-level classes and
link to issue numbers if applicable. See the DTD for more details.

Changes need not be in any particular order, they are sorted in various
ways by the stylesheet anyway.

Dates are assumed to mean "on the trunk". If you *also* make the same
change on a stabilization branch, use the <branch> tag to indicate this
and explain why the change was made on a branch in the <description>.

Please only change this file on the trunk! Rather: you can change it
on branches if you want, but these changes will be ignored; only the
trunk version of this file is important.

Deprecations do not count as incompatible, assuming that code using the
deprecated calls continues to see their documented behavior. But do
specify deprecation="yes" in <compatibility>.

This file is not a replacement for Javadoc: it is intended to list changes,
not describe the complete current behavior, for which ordinary documentation
is the proper place.

-->

<apichanges>

    <!-- First, a list of API names you may use: -->
    <apidefs>
        <apidef name="general">Java Project API</apidef>
        <apidef name="classpath">Classpath Support SPI</apidef>
        <apidef name="ui">UI Support SPI</apidef>
        <!-- etc. -->
    </apidefs>

    <!-- ACTUAL CHANGES BEGIN HERE: -->

    <changes>
        <change id="ant-project-libraries">
            <api name="general"/>
            <summary>Support for project-specific libraries</summary>
            <version major="1" minor="15"/>
            <date day="7" month="2" year="2008"/>
            <author login="mkleint"/>
            <compatibility addition="yes"/>
            <description>
                <p> A new utility class for helping project types create UI for
                sharable Libraries.
                </p>
            </description>
            <class package="org.netbeans.spi.java.project.support.ui" name="SharableLibrariesUtils"/>
            <issue number="44035"/>
        </change>        
    <change id="AttachJavadocSourceToJar">
        <api name="ui"/>
        <summary>Added support classes for attaching javadoc/source to jar-based classpath items</summary>
        <version major="1" minor="14"/>
        <date day="21" month="1" year="2008"/>
        <author login="mkleint"/>
        <compatibility addition="yes"/>
        <description>
            3 new utility classes to allow attaching javadoc/source to existing jar dependencies of an Ant-based project.
            These classes are for use by project type owners. Specifically
            <ul>
                <li><code>ExtraSourceJavadocSupport.createExtraSourceQueryImplementation()</code> and 
                <code>ExtraSourceJavadocSupport.createExtraJavadocQueryImplementation()</code> 
                create instances to be added to project's Lookup.</li>
                <li><code>LookupMergerSupport.createSFBLookupMerger()</code> and <code>LookupMergerSupport.createJFBLookupMerger()</code>
                provide simple implementations of lookup mergers for respective query implementations. 
                A typical project implementation will put the lookup merger and the Extra*Support's instance in the project's lookup.</li>
                <li><code>EditJarSupport.showEditDialog()</code> is a facotry method for creating editing UI. To be added to Project's properties dialog
                preferably the "Libraries" panel. Client code (project type owner) is assumed to write down the ant properties
               source.reference.__name__ and javadoc.reference.__name__ in the same manner as file.reference.__name__ is persisted.</li>
            </ul>
        </description>
        <class package="org.netbeans.spi.java.project.support" name="ExtraSourceJavadocSupport"/>
        <class package="org.netbeans.spi.java.project.support" name="LookupMergerSupport"/>
        <class package="org.netbeans.spi.java.project.support.ui" name="EditJarSupport"/>
        <issue number="70497"/>
    </change>
        
    <change id="IncludeExcludeVisualizer">
        <api name="ui"/>
        <summary>Added <code>IncludeExcludeVisualizer</code> support class</summary>
        <version major="1" minor="12"/>
        <date day="1" month="3" year="2007"/>
        <author login="jglick"/>
        <compatibility addition="yes"/>
        <description>
            A new utility class which is handy for previewing include and exclude patterns (Ant syntax)
            for source groups, for example in project customizer dialogs.
        </description>
        <class package="org.netbeans.spi.java.project.support.ui" name="IncludeExcludeVisualizer"/>
        <issue number="49026"/>
    </change>
    <change id="JavaProjectConstants.SOURCES_TYPE_RESOURCES">
        <api name="general"/>
        <summary>Add SourceGroup type for resources that are separate from sources</summary>
        <version major="1" minor="11"/>
        <date day="30" month="1" year="2007"/>
        <author login="mkleint"/>
        <compatibility addition="yes"/>
        <description>
            Add a new Sourcegroup type for resources, if these are not put together with Java sources. (For example
            Maven based projects put resource files like images, or properties files in different source structures)
            Useful for creating new resource files in a project from a 3rd party module.
        </description>
        <class package="org.netbeans.api.java.project" name="JavaProjectConstants"/>
        <issue number="89204"/>
    </change>
    <change id="ProjectClassPathModifier">
        <api name="classpath"/>
        <summary>New ProjectClassPathModifier API/SPI for modification of project's classpath</summary>
        <version major="1" minor="10"/>
        <date day="15" month="5" year="2006"/>
        <author login="tzezula"/>
        <compatibility addition="yes"/>
        <description>
        The new SPI interface ProjectClassPathModifierImplementation was created to allow extension modules to
        add or remove classpath elements (archive files, folders, libraries, subprojects) from the
        project's classpath. The ProjectClassPathModifierImplementation is provided by the project types in the
        project's Lookup. The API client uses the static methods of ProjectClassPathModifier which delegate to
        the SPI.
        </description>
        <class package="org.netbeans.api.java.project.classpath" name="ProjectClassPathModifier"/>
        <class package="org.netbeans.spi.java.project.classpath" name="ProjectClassPathModifierImplementation"/>
         <issue number="74356"/>
         <issue number="75469"/>
         <issue number="60852"/>
         <issue number="73197"/>
         <issue number="73198"/>
    </change>
                                                                                                                                
    <change id="BrokenReferencesModel.updateReference">
        <api name="general"/>
        <summary>Semantic changes in the BrokenReferencesModel.updateReference behavior</summary>
        <version major="1" minor="6"/>
        <date day="28" month="8" year="2005"/>
        <author login="tzezula"/>
        <compatibility modification="yes" semantic="incompatible"/>
        <description>
                The BrokenReferencesModel was changed to support better sharability of
                projects. The BrokenReferencesModel always stores the resolved broken reference
                into the private properties as absolute files and does not affect the project properties.
        </description>
        <issue number="63401"/>
    </change>
    <change id="JavaProjectConstants">
            <api name="general"/>
            <summary>Added artifact type representing folder</summary>
            <version major="1" minor="4"/>
            <date day="20" month="4" year="2005"/>
            <author login="tzezula"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                The freeform project may have as its output a folder rather than a jar archive.
                The JavaProjectConstants was extended by the ARTIFACT_TYPE_FOLDER constant to represent such an output.
                </p>
            </description>
            <class package="org.netbeans.api.java.project" name="JavaProjectConstants"/>
            <issue number="57733"/>
        </change>
        <change id="JavaTemplates.factory.package-required">
            <api name="ui"/>
            <summary>Added a new factory method for creating the name/package chooser wizard panel into the templates SPI.</summary>
            <version major="1" minor="3"/>
            <date day="21" month="3" year="2005"/>
            <author login="pjiricka"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                A new factory method for creating the name and package chooser panel in the Java file wizard.
                This method is similar to the methods that already exist in this class; it has an extra boolean 
                parameter that allows to specify whether the entered package name is required to be valid (non-empty).
                </p>
            </description>
            <class package="org.netbeans.spi.java.project.support.ui.templates" name="JavaTemplates"/>
            <issue number="56730"/>
        </change>
        <change id="PackageView.listView">
            <api name="ui"/>
            <summary>Display of packages in a list added</summary>
            <version major="1" minor="3"/>
            <date day="10" month="1" year="2005"/>
            <author login="tzezula"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                New methods supporting creation of package lists were added to <code>PackageView</code>.
                <code>createListView(SourceGroup)</code> creates a <code>ComboBoxModel</code> containing the
                packages from a given source group. <code>listRenderer()</code> returns a <code>ListCellRenderer</code>
                rendering the packages.
                </p>
            </description>
            <class package="org.netbeans.spi.java.project.support.ui" name="PackageView"/>
            <issue number="48618"/>
        </change>
         <change id="ProjectClassPathSupport.createPropertyBasedClassPathImplemenentation">
            <api name="classpath"/>
            <summary>Added helper method for creating <code>ClassPathImplementation</code> based on an Ant property</summary>
            <version major="1" minor="3"/>
            <date day="6" month="1" year="2005"/>
            <author login="tzezula"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                Added new helper class <code>ProjectClassPathSupport</code>
                with a factory method <code>createPropertyBasedClassPathImplementation(...)</code>.
                This method creates a live classpath based on the list of Ant properties holding the path. The classpath
                implementation listens on changes of properties, updates state and fires events to clients.
                </p>
            </description>
            <class package="org.netbeans.spi.java.project.classpath.support" name="ProjectClassPathSupport"/>
            <issue number="42309"/>
        </change>    
        <change id="ProjectClassPathExtender">
            <api name="classpath"/>
            <summary><code>ProjectClassPathExtender</code> made public</summary>
            <version major="1" minor="3"/>
            <date day="5" month="1" year="2005"/>
            <author login="tzezula"/>
            <compatibility addition="yes"/>
            <description>
                <p>
                <code>ProjectClassPathExtender</code> was a private contract between <code>j2seproject</code> and <code>form</code>
                which allowed the form editor to extend the compilation classpath of a project by a new classpath
                element (archive file, folder, dependent project, or library).
                This interface was moved into a public SPI package
                to remove the need to have an implementation dependency of <code>form</code> and <code>j2seproject</code> on <code>java/project</code>.
                </p>
            </description>
            <class package="org.netbeans.spi.java.project.classpath" name="ProjectClassPathExtender"/>
            <issue number="52998"/>
        </change>
        <change id="rel-vers-1">
            <api name="general"/>
            <summary>Switched to major release version 1</summary>
            <version major="1" minor="3"/>
            <date day="22" month="12" year="2004"/>
            <author login="jglick"/>
            <compatibility>
                <p>
                    Clients should begin requesting the new version to avoid a warning at startup.
                </p>
            </compatibility>
            <description>
                <p>
                    To indicate that this is now considered a stable API, the major release version was
                    incremented to 1 from 0.
                </p>
            </description>
            <issue number="51468"/>
        </change>
        
    <change>
        <api name="ui"/>
        <summary>Introduction of a new interface PackageRenameHandler which allows plugging into <code>PackageViewChildren.PackageNode.setName()</code></summary>
        <version major="1" minor="5"/>
        <date day="11" month="5" year="2005"/>
        <author login="jbecicka"/>
        <compatibility addition="yes" binary="compatible" source="compatible" semantic="compatible" deprecation="no" deletion="no" modification="no"/>
        <description>
        Refactoring needs to handle rename of Package Nodes. It is allowed through PackageRenameHandler.
        Any client can put it's PackageRenameHandler into Lookup (only one instance is allowed). 
        Implementation of packageNode.setName() will use this instance to handle rename request.
        </description>
        <class package="org.netbeans.spi.java.project.support.ui" name="PackageRenameHandler"/>
        <issue number="53295"/>
    </change>
        

    </changes>

    <!-- Now the surrounding HTML text and document structure: -->

    <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <==============

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE java/project/apichanges.xml

-->
    <head>
      <title>Change History for the Java Project API</title>
      <link rel="stylesheet" href="prose.css" type="text/css"/>
    </head>
    <body>

<p class="overviewlink"><a href="overview-summary.html">Overview</a></p>

<h1>Introduction</h1>

<p>This document lists changes made to the <a href="@TOP@">Java Project API</a>.</p>

<!-- The actual lists of changes, as summaries and details: -->
      <hr/>
      <standard-changelists module-code-name="org.netbeans.modules.java.project/1"/>

      <hr/><p>@FOOTER@</p>

    </body>
  </htmlcontents>

</apichanges>
