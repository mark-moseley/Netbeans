<?xml version="1.0" encoding="UTF-8"?>
<!--
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.

Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.


The contents of this file are subject to the terms of either the GNU
General Public License Version 2 only ("GPL") or the Common
Development and Distribution License("CDDL") (collectively, the
"License"). You may not use this file except in compliance with the
License. You can obtain a copy of the License at
http://www.netbeans.org/cddl-gplv2.html
or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
specific language governing permissions and limitations under the
License.  When distributing the software, include this License Header
Notice in each file and include the License file at
nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
particular file as subject to the "Classpath" exception as provided
by Sun in the GPL Version 2 section of the License file that
accompanied this code. If applicable, add the following below the
License Header, with the fields enclosed by brackets [] replaced by
your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

Contributor(s):

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
Microsystems, Inc. All Rights Reserved.

If you wish your version of this file to be governed by only the CDDL
or only the GPL Version 2, indicate your decision by adding
"[Contributor] elects to include this software in this distribution
under the [CDDL or GPL Version 2] license." If you do not indicate a
single choice of license, a recipient has the option to distribute
your version of this file under either the CDDL, the GPL Version 2 or
to extend the choice of license to its licensees as provided above.
However, if you add GPL Version 2 code and therefore, elected the GPL
Version 2 license, then the option applies only if the new code is
made subject to such option by the copyright holder.
-->

<?xml-stylesheet href="../nbbuild/javadoctools/apichanges.xsl" type="text/xsl"?>
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../nbbuild/javadoctools/apichanges.dtd">

<!-- INFO FOR PEOPLE ADDING CHANGES:
[most of contents snipped - see openide's apichanges for how-to instructions]
<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>
-->

<apichanges>

<!-- First, a list of API names you may use: -->
<apidefs>
        <apidef name="JPDADebuggerAPI">Debugger JPDA API</apidef>
</apidefs>

<!-- ACTUAL CHANGES BEGIN HERE: -->

<changes>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDADebugger.getException() method added.</summary>
        <date day="20" month="4" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            JPDADebugger.getException() method added to. This is support for notifications about 
            problems during start of debugger.
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Support for synchronouous start of JPDADebugger added.</summary>
        <date day="3" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes"/>
        <description>
            <p>
                Methods starting debugger has been modified to support synchronous start of debugging.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Breakpoint Listener added.</summary>
        <date day="4" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                JPDABreakpointEvent and JPDABreakpointListener classes added.
                JPDABreakpoint.addJPDABreakpointListener (...) and JPDABreakpoint.removeJPDABreakpointListener (...)
                methods added.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Support methods for various new features added.</summary>
        <date day="9" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                Support for Fix Action improved. Support for Pop Frame action added. Support for static and
                inherited fields added. New methods:
            </p>
            <ul>
                <li>CallStackFrame.isObsolete ()</li>
                <li>CallStackFrame.popFrame ()</li>
                <li>JPDADebugger.canFixClasses ()</li>
                <li>JPDADebugger.fixClasses(java.util.Map)</li>
                <li>ObjectVariable.getAllStaticFields(int,int)</li>
                <li>ObjectVariable.getInheritedFields(int,int)</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Definition of various breakpoints has been generalized.</summary>
        <date day="10" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                We have changed ClassLoadUnloadBreakpoint to support class exclusion filters, and
                more than one class filter. The same change was done for MethodBreakpoints too.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDABreakpointEvent improvements.</summary>
        <date day="11" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                We have added several new properties to JPDABreakpointEvent:
            </p>
            <ul>
                <li>ReferenceType</li>
                <li>resume</li>
                <li>Thread</li>
                <li>Variable</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Improvements of SmartStepping implementation.</summary>
        <date day="16" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                We have added several new methods to fix issues in smart stepping implementation:
            </p>
            <ul>
                <li>PropertyChangeListener added to SmartSteppingFilter.</li>
                <li>JPDADebugger.getSmartSteppingFilter ()</li>
                <li>SmartSteppingFilter.getExclusionPatterns ()</li>
                <li>PropertyChangeListener added to EngineContextProvider.</li>
                <li>EngineContextProvider.getOriginalSourceRoots()</li>
                <li>EngineContextProvider.getSourceRoots()</li>
                <li>EngineContextProvider.setSourceRoots()</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDADebugger.SESSION_ID.</summary>
        <date day="17" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                JPDADebugger.SESSION_ID constant has been added.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Firing of exceptions during watches evaluation fixed.</summary>
        <date day="25" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                InvalidExpressionException is fired from folowing methods now:
            </p>
            <ul>
                <li>JPDAWatch.getToStringValue()</li>
                <li>ObjectVariable.getToStringValue()</li>
                <li>ObjectVariable.invokeMethod()</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>InvalidExpressionException can encapsulate other exceptions.</summary>
        <date day="1" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                Mew constructor added (InvalidExpressionException(java.lang.Throwable)), 
                and InvalidExpressionException.getTargetException() method added to support firing of
                nested exceptions.
            </p>
            <ul>
                <li>JPDAWatch.getToStringValue()</li>
                <li>ObjectVariable.getToStringValue()</li>
                <li>ObjectVariable.invokeMethod()</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>ContextProvider.getFieldLineNumber() method added.</summary>
        <date day="1" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                ContextProvider.getFieldLineNumber() method added.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Two methods added to ContextProvider.</summary>
        <date day="8" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                ContextProvider.getImports () method added to support better evaluation of expressions.
                ContextProvider.getLineNumber (annotaion) method added to fix stepping through modified files.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>ContextProvider and EngineContextProvider has been changed from interfaces to abstract classes.</summary>
        <date day="8" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                ContextProvider and EngineContextProvider has been changed from interfaces to abstract classes. 
                This was done to support future changes in these classes.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>"String EditorContext.getClassName (url, lineNumber)" method has been added.</summary>
        <date day="8" month="10" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                This method is needed to correctly implement line breakpoint in secondary classes.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>"EditorContext.updateTimeStamp(timeStamp,url)" method has been added.</summary>
        <date day="13" month="10" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                This method is needed to correctly implement fix &amp; continue action.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>"global" parameter added to "SourcePathProvider.getURL (String relativePath, boolean global)" method.</summary>
        <date day="18" month="10" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                This parameter has been added to distinguish between finding sources for smart
                stepping feature, and for all other features like douuble click on stack trace..
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>LineBreakpoint supplied with the information about the source path where it is set.</summary>
        <version major="1" minor="3"/>
        <date day="15" month="2" year="2005"/>
        <author login="lkotouc"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                A line breakpoint does not contain the information
                about the source path where it is set. There is no
                way how to differ between breakpoints in the case
                when
                - several JSPs have the same name AND
                - these JSPs are statically included into one JSP page.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="LineBreakpoint"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDAStep class added (also new method createJPDAStep added to JPDADebugger)</summary>
        <version major="1" minor="5"/>
        <date day="29" month="6" year="2005"/>
        <author login="rondruska"/>
        <compatibility addition="yes" source="incompatible" binary="compatible"/>
        <description>
            <p>
                JPDAStep allows to create a step request to JDI with
                no UI interference. It was designed for new RunIntoMethod
                action. New method JPDADebugger.createJPDAStep creates
                a new instance of JPDAStep.  
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDA API interfaces that correspond to JDI API declared as not to implement.</summary>
        <version major="2" minor="0"/>
        <date day="12" month="8" year="2005"/>
        <author login="mentlicher"/>
        <compatibility addition="no" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                JPDA API represents JDI functionality.
                Since JDI interfaces evolve from one version to another, it's
                necessary to declare that interfaces in
                org.netbeans.api.debugger.jpda package should not be implemented,
                since new methods can be added to these interfaces at any time
                to keep up with the JDI functionality.
            </p>
            <p>
                Also JPDABreakpointEvent and JPDABreakpointListener are moved to
                newly created org.netbeans.api.debugger.jpda.event package.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Added interrupt method to JPDAThread class</summary>
        <version major="2" minor="1"/>
        <date day="18" month="8" year="2005"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                A possibility to interrupt a debuggee thread is added.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="JPDAThread" />
        <issue number="59072"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Added canBeModified() method to JPDADebugger class</summary>
        <version major="2" minor="3"/>
        <date day="3" month="11" year="2005"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                A possibility to detect whether the debuggee is read-only is added.
                This check works fine on JDK 1.5 and higher, on JDK 1.4 it returns
                <code>true</code> by default.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="JPDADebugger" />
        <issue number="67046"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Added getSourceRoot() method to SourcePathProvider class</summary>
        <version major="2" minor="6"/>
        <date day="3" month="5" year="2006"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                Retrieves a source root for a given URL. This is necessary to
                match breakpoint locations with the sources selected fopr debugging.
                It returns <code>null</code> by default.
            </p>
        </description>
        <class package="org.netbeans.spi.debugger.jpda" name="SourcePathProvider" />
        <issue number="52180"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Added JPDAClassType, ClassVariable and ReturnVariable classes</summary>
        <version major="2" minor="7"/>
        <date day="12" month="7" year="2006"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                In order to be able to provide static context information
                and return value of methods, three new classes were added.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="JPDAClassType" />
        <class package="org.netbeans.api.debugger.jpda" name="ClassVariable" />
        <class package="org.netbeans.api.debugger.jpda" name="ReturnVariable" />
        <issue number="80090"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Added setPreferedClassName and getPreferredClassName methods to LineBreakpoint</summary>
        <version major="2" minor="8"/>
        <date day="30" month="8" year="2006"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                In order to be able to provide the class name for which the
                breakpoint should be submitted. This is necessary for JSP.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="LineBreakpoint" />
        <issue number="83188"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Support for stepping over operations.</summary>
        <version major="2" minor="9"/>
        <date day="1" month="2" year="2007"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                In order to be able to provide stepping over operations,
                we need a representation of an operation and some way how to
                retrieve the operation(s) from a Thread and a CallStackFrame.
            </p>
            <p>
                Added fields:<br/>
                <code>JPDAStep.STEP_OPERATION</code>,
                <code>EditorContext.CURRENT_LAST_OPERATION_ANNOTATION_TYPE</code>,
                <code>EditorContext.CURRENT_EXPRESSION_SECONDARY_LINE_ANNOTATION_TYPE</code>,
                <code>EditorContext.CURRENT_EXPRESSION_CURRENT_LINE_ANNOTATION_TYPE</code>
            </p>
            <p>
                Added methods:<br/>
                <code>CallStackFrame.getCurrentOperation()</code>,
                <code>JPDAThread.getCurrentOperation()</code>,
                <code>JPDAThread.getLastOperations()</code>,
                <code>EditorContext.createMethodOperation()</code>,
                <code>EditorContext.addNextOperationTo()</code>,
                <code>EditorContext.createPosition()</code>,
                <code>EditorContext.getOperations()</code>
            </p>
            <p>
                Added classes:<br/>
                <code>EditorContext.BytecodeProvider</code>,
                <code>EditorContext.Operation</code>,
                <code>EditorContext.Position</code>
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="JPDAStep" />
        <class package="org.netbeans.api.debugger.jpda" name="CallStackFrame" />
        <class package="org.netbeans.api.debugger.jpda" name="JPDAThread" />
        <class package="org.netbeans.spi.debugger.jpda" name="EditorContext" />
        <issue number="93842"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>API for retrieval of method arguments.</summary>
        <version major="2" minor="10"/>
        <date day="28" month="3" year="2007"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
               An access to method arguments in source code is necessary
               for cases where we do not have full debug information.
            </p>
            <p>
                Added methods:<br/>
                <code>EditorContext.getArguments()</code>
            </p>
            <p>
                Added classes:<br/>
                <code>EditorContext.MethodArgument</code>
            </p>
        </description>
        <class package="org.netbeans.spi.debugger.jpda" name="EditorContext" />
        <issue number="99257"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Support for heap walking.</summary>
        <version major="2" minor="11"/>
        <date day="5" month="4" year="2007"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                In order to be able to provide heap walking functionality,
                we need methods for retrieval of class instances and
                back references.
            </p>
            <p>
                Added methods:<br/>
                <code>Field.getDeclaringClass()</code>,
                <code>JPDAClassType.getClassLoader()</code>,
                <code>JPDAClassType.getSuperClass()</code>,
                <code>JPDAClassType.getInstanceCount()</code>,
                <code>JPDAClassType.getInstances()</code>,
                <code>JPDADebugger.canGetInstanceInfo()</code>,
                <code>JPDADebugger.getAllClasses()</code>,
                <code>JPDADebugger.getClassesByName()</code>,
                <code>JPDADebugger.getInstanceCounts()</code>,
                <code>ObjectVariable.getReferringObjects()</code>,
                <code>ObjectVariable.getClassType()</code>,
                <code>ObjectVariable.getUniqueID()</code>.
            </p>
            <p>
                Added classes:<br/>
                <code>VariableType</code>,
                <code>JPDAArrayType</code>.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="JPDADebugger" />
        <class package="org.netbeans.api.debugger.jpda" name="JPDAClassType" />
        <class package="org.netbeans.api.debugger.jpda" name="ObjectVariable" />
        <class package="org.netbeans.api.debugger.jpda" name="VariableType" />
        <class package="org.netbeans.api.debugger.jpda" name="JPDAArrayType" />
        <issue number="100047"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>API for identification of method declarations in source code.</summary>
        <version major="2" minor="12"/>
        <date day="21" month="5" year="2007"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>In order to implement annotation of method breakpoints in Editor, we need to be
able to locate individual methods in Editor, based on their names and signature. Also we need
annotation types for fields and methods.
            </p>
            <p>
                Added methods:<br/>
                <code>EditorContext.getMethodLineNumber()</code>,
                <code>EditorContext.getCurrentMethodDeclaration()</code>,
            </p>
            <p>
                Added fields:<br/>
                <code>EditorContext.FIELD_BREAKPOINT_ANNOTATION_TYPE</code>,
                <code>EditorContext.DISABLED_FIELD_BREAKPOINT_ANNOTATION_TYPE</code>,
                <code>EditorContext.METHOD_BREAKPOINT_ANNOTATION_TYPE</code>
                <code>EditorContext.DISABLED_METHOD_BREAKPOINT_ANNOTATION_TYPE</code>
            </p>
        </description>
        <class package="org.netbeans.spi.debugger.jpda" name="EditorContext" />
        <issue number="103934"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Enhance JPDA breakpoints.</summary>
        <version major="2" minor="13"/>
        <date day="21" month="5" year="2007"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                To catch-up with JDI capabilities and be able to implement new enhancements,
we need to add support for new breakpoint properties into the debugger JPDA API.<br/>
These are mainly class and thread filters and hit counts.
            </p>
            <p>
                Added methods:<br/>
                <code>ExceptionBreakpoint.getClassFilters()</code>,
                <code>ExceptionBreakpoint.setClassFilters()</code>,
                <code>ExceptionBreakpoint.getClassExclusionFilters()</code>,
                <code>ExceptionBreakpoint.setClassExclusionFilters()</code>,
                <code>FieldBreakpoint.getInstanceFilters()</code>,
                <code>FieldBreakpoint.setInstanceFilters()</code>,
                <code>FieldBreakpoint.getThreadFilters()</code>,
                <code>FieldBreakpoint.setThreadFilters()</code>,
                <code>JPDABreakpoint.getHitCountFilter()</code>,
                <code>JPDABreakpoint.getHitCountFilteringStyle()</code>,
                <code>JPDABreakpoint.setHitCountFilter()</code>,
                <code>LineBreakpoint.getInstanceFilters()</code>,
                <code>LineBreakpoint.setInstanceFilters()</code>,
                <code>LineBreakpoint.getThreadFilters()</code>,
                <code>LineBreakpoint.setThreadFilters()</code>,
                <code>MethodBreakpoint.getMethodSignature()</code>,
                <code>MethodBreakpoint.setMethodSignature()</code>,
                <code>MethodBreakpoint.getInstanceFilters()</code>,
                <code>MethodBreakpoint.setInstanceFilters()</code>,
                <code>MethodBreakpoint.getThreadFilters()</code>,
                <code>MethodBreakpoint.setThreadFilters()</code>.
            </p>
            <p>
                Added fields:<br/>
                <code>ExceptionBreakpoint.PROP_CLASS_FILTERS</code>,
                <code>ExceptionBreakpoint.PROP_CLASS_EXCLUSION_FILTERS</code>,
                <code>FieldBreakpoint.PROP_INSTANCE_FILTERS</code>,
                <code>FieldBreakpoint.PROP_THREAD_FILTERS</code>,
                <code>JPDABreakpoint.PROP_HIT_COUNT_FILTER</code>,
                <code>JPDABreakpoint.HIT_COUNT_FILTERING_STYLE</code>,
                <code>LineBreakpoint.PROP_INSTANCE_FILTERS</code>,
                <code>LineBreakpoint.PROP_THREAD_FILTERS</code>,
                <code>MethodBreakpoint.PROP_METHOD_SIGNATURE</code>,
                <code>MethodBreakpoint.PROP_INSTANCE_FILTERS</code>,
                <code>MethodBreakpoint.PROP_THREAD_FILTERS</code>.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="ExceptionBreakpoint" />
        <class package="org.netbeans.api.debugger.jpda" name="FieldBreakpoint" />
        <class package="org.netbeans.api.debugger.jpda" name="JPDABreakpoint" />
        <class package="org.netbeans.api.debugger.jpda" name="LineBreakpoint" />
        <class package="org.netbeans.api.debugger.jpda" name="MethodBreakpoint" />
        <issue number="103936"/>
    </change>

    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Enhance JPDA API with better thread control.</summary>
        <version major="2" minor="16"/>
        <date day="2" month="6" year="2008"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            This API change is necessary for the redesign of the debugger UI and
            it's behavior with respect to threads.
            <p>
                Added classes:<br/>
                <code>org.netbeans.api.debugger.jpda.DeadlockDetector</code>,
                <code>org.netbeans.api.debugger.jpda.MonitorInfo</code>,
                <code>org.netbeans.api.debugger.jpda.ThreadsCollector</code>
            </p>
            <p>
                Added methods:<br/>
                <code>CallStackFrame.getFrameDepth()</code>,
                <code>CallStackFrame.getOwnedMonitors()</code>,
                <code>JPDADebugger.getThreadsCollector()</code>,
                <code>JPDADebugger.getDeadlockDetector()</code>,
                <code>JPDAThread.getCurrentBreakpoint()</code>,
                <code>JPDAThread.getContendedMonitorAndOwner()</code>,
                <code>JPDAThread.getOwnedMonitorsAndFrames()</code>,
                <code>EditorContext.annotate()</code> with thread argument,
                <code>AttachingDICookie.getProcessID()</code>
            </p>
            <p>
                Added fields:<br/>
                <code>JPDADebugger.PROP_THREAD_STARTED</code>,
                <code>JPDADebugger.PROP_THREAD_DIED</code>,
                <code>JPDADebugger.PROP_THREAD_GROUP_ADDED</code>,
                <code>JPDAThread.PROP_SUSPENDED</code>,
                <code>JPDAThread.PROP_BREAKPOINT</code>,
                <code>EditorContext.OTHER_THREAD_ANNOTATION_TYPE</code>
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="CallStackFrame" />
        <class package="org.netbeans.api.debugger.jpda" name="DeadlockDetector" />
        <class package="org.netbeans.api.debugger.jpda" name="JPDADebugger" />
        <class package="org.netbeans.api.debugger.jpda" name="JPDAThread" />
        <class package="org.netbeans.api.debugger.jpda" name="MonitorInfo" />
        <class package="org.netbeans.api.debugger.jpda" name="ThreadsCollector" />
        <class package="org.netbeans.spi.debugger.jpda" name="EditorContext" />
        <issue number="136099"/>
    </change>

    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Improve threading model.</summary>
        <version major="2" minor="18"/>
        <date day="13" month="1" year="2009"/>
        <author login="mentlicher"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            ReadWriteLock is introduced to synchronize the access to JPDAThread.
            ReadLock of that read/write pair is publicly available through the
            new method JPDAThread.getReadAccessLock(). Clients can use this lock
            to assure that the thread is not resumed in the mean time.
            <p>
                Added methods:<br/>
                <code>JPDAThread.getReadAccessLock()</code>,
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="JPDAThread" />
        <issue number="156368"/>
    </change>


</changes>

  <!-- Now the surrounding HTML text and document structure: -->

  <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <======================

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE xml/api/doc/changes/apichanges.xml

-->
    <head>
      <title>Debugger JPDA API changes by date</title>
      <link rel="stylesheet" href="prose.css" type="text/css"/>
    </head>
    <body>

<p class="overviewlink"><a href="overview-summary.html">Overview</a></p>

<h1>Introduction</h1>

<p>This document lists changes made to the Debugger JPDA APIs. Please ask on the 
    <code>nbdev@netbeans.org</code>
    mailing list if you have any questions about the details of a
    change, or are wondering how to convert existing code to be compatible.
</p>

      <hr/><standard-changelists module-code-name="org.netbeans.api.debugger.jpda/1"/>

      <hr/><p>@FOOTER@</p>

    </body>
  </htmlcontents>
</apichanges>
