<?xml version="1.0" encoding="UTF-8"?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2004 Sun
Microsystems, Inc. All Rights Reserved.
-->

<?xml-stylesheet href="../../nbbuild/javadoctools/apichanges.xsl" type="text/xsl"?>
<!DOCTYPE apichanges PUBLIC "-//NetBeans//DTD API changes list 1.0//EN" "../../nbbuild/javadoctools/apichanges.dtd">

<!-- INFO FOR PEOPLE ADDING CHANGES: 
[most of contents snipped - see openide's apichanges for how-to instructions]
<change>
    <api name="compiler"/>
    <summary>Some brief description here, can use <b>XHTML</b></summary>
    <version major="1" minor="99"/>
    <date day="13" month="6" year="2001"/>
    <author login="jrhacker"/>
    <compatibility addition="yes"/>
    <description>
        The main description of the change here.
        Again can use full <b>XHTML</b> as needed.
    </description>
    <class package="org.openide.compiler" name="DoWhatIWantCompiler"/>
    <issue number="14309"/>
</change>
-->

<apichanges>

<!-- First, a list of API names you may use: -->
<apidefs>
        <apidef name="JPDADebuggerAPI">Debugger JPDA API</apidef>
</apidefs>

<!-- ACTUAL CHANGES BEGIN HERE: -->

<changes>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDADebugger.getException() method added.</summary>
        <date day="20" month="4" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            JPDADebugger.getException() method added to. This is support for notifications about 
            problems during start of debugger.
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Support for synchronouous start of JPDADebugger added.</summary>
        <date day="3" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes"/>
        <description>
            <p>
                Methods starting debugger has been modified to support synchronous start of debugging.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Breakpoint Listener added.</summary>
        <date day="4" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                JPDABreakpointEvent and JPDABreakpointListener classes added.
                JPDABreakpoint.addJPDABreakpointListener (...) and JPDABreakpoint.removeJPDABreakpointListener (...)
                methods added.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Support methods for various new features added.</summary>
        <date day="9" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                Support for Fix Action improved. Support for Pop Frame action added. Support for static and
                inherited fields added. New methods:
            </p>
            <ul>
                <li>CallStackFrame.isObsolete ()</li>
                <li>CallStackFrame.popFrame ()</li>
                <li>JPDADebugger.canFixClasses ()</li>
                <li>JPDADebugger.fixClasses(java.util.Map)</li>
                <li>ObjectVariable.getAllStaticFields(int,int)</li>
                <li>ObjectVariable.getInheritedFields(int,int)</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Definition of various breakpoints has been generalized.</summary>
        <date day="10" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                We have changed ClassLoadUnloadBreakpoint to support class exclusion filters, and
                more than one class filter. The same change was done for MethodBreakpoints too.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDABreakpointEvent improvements.</summary>
        <date day="11" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                We have added several new properties to JPDABreakpointEvent:
            </p>
            <ul>
                <li>ReferenceType</li>
                <li>resume</li>
                <li>Thread</li>
                <li>Variable</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Improvements of SmartStepping implementation.</summary>
        <date day="16" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                We have added several new methods to fix issues in smart stepping implementation:
            </p>
            <ul>
                <li>PropertyChangeListener added to SmartSteppingFilter.</li>
                <li>JPDADebugger.getSmartSteppingFilter ()</li>
                <li>SmartSteppingFilter.getExclusionPatterns ()</li>
                <li>PropertyChangeListener added to EngineContextProvider.</li>
                <li>EngineContextProvider.getOriginalSourceRoots()</li>
                <li>EngineContextProvider.getSourceRoots()</li>
                <li>EngineContextProvider.setSourceRoots()</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDADebugger.SESSION_ID.</summary>
        <date day="17" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                JPDADebugger.SESSION_ID constant has been added.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Firing of exceptions during watches evaluation fixed.</summary>
        <date day="25" month="5" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                InvalidExpressionException is fired from folowing methods now:
            </p>
            <ul>
                <li>JPDAWatch.getToStringValue()</li>
                <li>ObjectVariable.getToStringValue()</li>
                <li>ObjectVariable.invokeMethod()</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>InvalidExpressionException can encapsulate other exceptions.</summary>
        <date day="1" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                Mew constructor added (InvalidExpressionException(java.lang.Throwable)), 
                and InvalidExpressionException.getTargetException() method added to support firing of
                nested exceptions.
            </p>
            <ul>
                <li>JPDAWatch.getToStringValue()</li>
                <li>ObjectVariable.getToStringValue()</li>
                <li>ObjectVariable.invokeMethod()</li>
            </ul>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>ContextProvider.getFieldLineNumber() method added.</summary>
        <date day="1" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                ContextProvider.getFieldLineNumber() method added.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>Two methods added to ContextProvider.</summary>
        <date day="8" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes"/>
        <description>
            <p>
                ContextProvider.getImports () method added to support better evaluation of expressions.
                ContextProvider.getLineNumber (annotaion) method added to fix stepping through modified files.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>ContextProvider and EngineContextProvider has been changed from interfaces to abstract classes.</summary>
        <date day="8" month="6" year="2004"/>
        <author login="jjancura"/>
        <compatibility modification="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                ContextProvider and EngineContextProvider has been changed from interfaces to abstract classes. 
                This was done to support future changes in these classes.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>"String EditorContext.getClassName (url, lineNumber)" method has been added.</summary>
        <date day="8" month="10" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                This method is needed to correctly implement line breakpoint in secondary classes.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>"EditorContext.updateTimeStamp(timeStamp,url)" method has been added.</summary>
        <date day="13" month="10" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                This method is needed to correctly implement fix &amp; continue action.
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>"global" parameter added to "SourcePathProvider.getURL (String relativePath, boolean global)" method.</summary>
        <date day="18" month="10" year="2004"/>
        <author login="jjancura"/>
        <compatibility addition="yes" source="incompatible" binary="incompatible"/>
        <description>
            <p>
                This parameter has been added to distinguish between finding sources for smart
                stepping feature, and for all other features like douuble click on stack trace..
            </p>
        </description>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>LineBreakpoint supplied with the information about the source path where it is set.</summary>
        <version major="1" minor="3"/>
        <date day="15" month="2" year="2005"/>
        <author login="lkotouc"/>
        <compatibility addition="yes" source="compatible" binary="compatible"/>
        <description>
            <p>
                A line breakpoint does not contain the information
                about the source path where it is set. There is no
                way how to differ between breakpoints in the case
                when
                - several JSPs have the same name AND
                - these JSPs are statically included into one JSP page.
            </p>
        </description>
        <class package="org.netbeans.api.debugger.jpda" name="LineBreakpoint"/>
    </change>
    <change>
        <api name="JPDADebuggerAPI"/>
        <summary>JPDAStep class added (also new method createJPDAStep added to JPDADebugger)</summary>
        <version major="1" minor="5"/>
        <date day="29" month="6" year="2005"/>
        <author login="rondruska"/>
        <compatibility addition="yes" source="incompatible" binary="compatible"/>
        <description>
            <p>
                JPDAStep allows to create a step request to JDI with
                no UI interference. It was designed for new RunIntoMethod
                action. New method JPDADebugger.createJPDAStep creates
                a new instance of JPDAStep.  
            </p>
        </description>
    </change>

</changes>

  <!-- Now the surrounding HTML text and document structure: -->

  <htmlcontents>
<!--

                            NO NO NO NO NO!

         ==============>    DO NOT EDIT ME!  <======================

          AUTOMATICALLY GENERATED FROM APICHANGES.XML, DO NOT EDIT

                SEE xml/api/doc/changes/apichanges.xml

-->
    <head>
      <title>Debugger JPDA API changes by date</title>
      <link rel="stylesheet" href="prose.css" type="text/css"/>
    </head>
    <body>

<p class="overviewlink"><a href="overview-summary.html">Overview</a></p>

<h1>Introduction</h1>

<p>This document lists changes made to the Debugger JPDA APIs. Please ask on the 
    <code>nbdev@netbeans.org</code>
    mailing list if you have any questions about the details of a
    change, or are wondering how to convert existing code to be compatible.
</p>

      <hr/><standard-changelists module-code-name="org.netbeans.api.debugger.jpda/1"/>

      <hr/><p>@FOOTER@</p>

    </body>
  </htmlcontents>
</apichanges>
