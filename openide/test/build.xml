<?xml version="1.0"?>
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="openide tests" basedir="." default="all">

    <property name="build.sysclasspath" value="ignore"/>

    <property name="netbeans.home" location="../../nbbuild/netbeans"/>
    <property name="netbeans.test.home" value="${netbeans.home}"/>
    
    <!-- says how to create classpath for code tests -->
    <!-- can have values src, jar, ide               -->
    <property name="xtest.source.location" value="jar"/>
    
    <property name="xtest.home" location="../../xtest"/>
    <property name="xtest.general.antfile" location="${xtest.home}/lib/module_harness.xml"/>
    
    <property name="xtest.results" location="results"/>
   
    <!-- default testtypes, attributes and executors -->
    <property name="xtest.testtype" value="unit"/>
    <property name="xtest.attribs" value="stable"/>
    <property name="xtest.executors" value="code,ide,ideDOTests,codeDOTests"/>
    
    <!-- properties just for compiler -->
    <property name="build.compiler.deprecation" value="off"/>
    <!-- should be default ON, because it helps to find problems -->
    <property name="build.compiler.debug" value="on"/>
    
    <!-- These in/excludes will be added to xtest.pattern    -->
    <!-- if you want to use these properties, you should use -->
    <!-- config with empty testbag                           -->
    <property name="xtest.includes" value=""/>
    <property name="xtest.excludes" value=""/>   
    
    
    <!-- ============ -->
    <!-- Main targets -->
    <!-- ============ -->
    
    <target name="all" depends="runtests"/>
    
    <!-- This target builds tests -->
    <target name="buildtests" depends="prepare-compile-classpath">
       <!-- This calls common build process. -->
       <!-- You can write your own if you need something special -->
       
       <!-- This property contains classpath used for compilation -->
       <!-- WRITE CORRECT VALUE TO THIS PROPERTY -->
       <property name="compiletest.classpath" refid="compiletest.classpath"/>
       <ant dir="." antfile="${xtest.general.antfile}"
             target="buildtests">
           <!-- This property contains directories which should be compiled -->
           <!-- WRITE CORRECT VALUE TO THIS PROPERTY -->
           
           <!-- Changed to ${xtest.testtype}/src because there was needlessly compiled every configuration. -->
           <!-- See issue http://www.netbeans.org/issues/show_bug.cgi?id=18880 -->
           <property name="compile.srcdir" value="${xtest.testtype}/src"/>
       </ant>
    </target>
    
    <!-- This target cleans tests -->
    <target name="cleantests">
       <!-- This calls common clean process. -->
       <!-- You can write your own if you need something special -->
       <ant dir="." antfile="${xtest.general.antfile}"
             target="cleantests">
       </ant>
    </target> 

    <!-- This target runs tests. You should not change this --> 
    <!-- target unless you realy know what you are doing -->
    <target name="runtests" depends="cleanresults,buildtests">
        <ant dir="." antfile="${xtest.general.antfile}"
             target="runtests"/>
    </target>
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes tests inside IDE -->
    <target name="runidetest">
        <path id="idetest.classpath">
          <pathelement path="${tbag.classpath}"/>
          <!-- ADD SOME OTHER PATH IF YOU NEED IT-->
        </path>
        <!-- This property contains classpath for execution. 
             All items in this classpath will be mounted to repository -->
        <property name="idetest.classpath" refid="idetest.classpath"/>
        <ant dir="." antfile="${xtest.general.antfile}"
             target="test">
           <property name="xtest.exectype" value="ide"/>
           <!-- YOU CAN ADD SOME ARGS INTO IDE COMMANDLINE -->
           <!-- <property name="xtest.ide.commandline.suffix" value=""/> -->
        </ant>
    </target>
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes standalone tests -->
    <target name="runcodetest" depends="prepare-codetest-classpath">
        <path id="codetest.complete.classpath">
          <path refid="codetest.classpath"/>
          <pathelement path="${tbag.classpath}"/>
          <!-- ADD SOME OTHER PATH IF YOU NEED IT-->
        </path>
        <!-- This property contains classpath for execution. -->
        <property name="codetest.classpath" refid="codetest.complete.classpath"/>
        <ant dir="." antfile="${xtest.general.antfile}"
             target="test">
           <property name="xtest.exectype" value="code"/>
        </ant>
    </target>
    
    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes standalone tests -->
    <!-- This task is used fro QA DataSystems test execution -->
    <!-- It prepares test folder before own test is executed -->
    <!-- Finally it calls runcodetest executor -> test will be executed in code mode -->
    <target name="runcodeDOTests">
        <antcall target="restoredata"/>
        <antcall target="runcodetest"/>
    </target>

    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <!-- This target executes tests inside IDE -->
    <!-- This task is used fro QA DataSystems test execution -->
    <!-- It prepares test folder before own test is executed -->
    <!-- Finally it calls runidetest executor -> test will be executed in ide mode -->
    <target name="runideDOTests">
        <antcall target="restoredata"/>
        <antcall target="runidetest"/>
    </target>

    <!-- Copies fresh data structure for QA DataSystems tests -->
    <target name="restoredata" depends="test_exists" if="exists">
        <!-- cleanning old data -->
        <delete>
            <fileset dir="results/qa-functional/work/qa-functional/src/DataLoaderTests/DataObjectTest/data">
                <exclude name="**/Backup/**/*.*" />
            </fileset>
        </delete>
        <!-- copying new data -->
        <copy todir="results/qa-functional/work/qa-functional/src/DataLoaderTests/DataObjectTest/data">
            <fileset dir="results/qa-functional/work/qa-functional/src/DataLoaderTests/DataObjectTest/data/Backup"/>
        </copy>
    </target>
            
    <target name="test_exists">
        <available property="exists" file="${xtest.results}/${tbag.testtype}/work/qa-functional/src/"/>
    </target>    

    <!-- This target is executed from test-executor in newly created Project -->
    <!-- Name of this task is defined in cfg-xxx.xml -->
    <target name="test_report">
        <ant dir="." antfile="${xtest.general.antfile}"
             target="test_report"/>
    </target>
    
    <target name="cleanresults">
        <ant dir="." antfile="${xtest.general.antfile}"
             target="cleanresults"/>
    </target>
    
    <target name="realclean" depends="cleantests,cleanresults">
        <ant dir="." antfile="${xtest.general.antfile}"
             target="realclean"/>
    </target>
    
    <target name="printconfig">
        <echo message="Default config is testtype: ${xtest.testtype}, attributes: ${xtest.attribs}."/>
    </target>

   <!-- ========================================================== -->
   <!-- ========================================================== -->

    <!-- this "switch" will decide how to create classpath for code tests -->
    <target name="which-classpath">
        <condition property="jarcode.classpath">
            <equals arg1="${xtest.source.location}" arg2="jar"/>
        </condition>
        <condition property="srccode.classpath">
            <equals arg1="${xtest.source.location}" arg2="src"/>
        </condition>
        <condition property="idecode.classpath">
            <equals arg1="${xtest.source.location}" arg2="ide"/>
        </condition>
        <!-- For QA-functional tests there will be special classpath: -->
        <!-- Will override the previous definiton if needed -->  
        <condition property="openideandcore.jarcode.classpath">
            <equals arg1="${xtest.testtype}" arg2="qa-functional"/>
        </condition>
    </target>

    <!-- ========================= -->
    <!-- Classpath for compilation -->
    <!-- ========================= -->
    
    <!-- Note, openideandcore-jarcompile-classpath must be last - it may override previous definitions of classpath!! -->
    <target name="prepare-compile-classpath"
         depends="jarcompile-classpath,srccompile-classpath,idecompile-classpath,openideandcore-jarcompile-classpath"/>
    
    <target name="jarcompile-classpath" depends="which-classpath" if="jarcode.classpath">
        <echo message="Using jars classpath for compilation."/>
    	<!-- this classpath will be used for compiling tests against jars -->
	<path id="compiletest.classpath">        
                <pathelement location="../openide-13javac-workaround.jar"/>
                <pathelement location="../netbeans/lib/openide.jar"/>
	</path>
    </target>
        
    <target name="srccompile-classpath" depends="which-classpath" if="srccode.classpath">
        <echo message="Using srcs classpath for compilation."/>
    	<!-- this classpath will be used for compiling tests against sources -->
    	<path id="compiletest.classpath">        
	        <pathelement location="../openide-13javac-workaround.jar"/>
	        <pathelement location="../src"/>
	</path>
    </target>
    
    <target name="idecompile-classpath" depends="which-classpath" if="idecode.classpath">
        <echo message="Using IDE classpath for compilation."/>
    	<!-- this classpath will be used for compiling tests against installed IDE -->
    	<path id="compiletest.classpath">        
    		<pathelement location="${xtest.home}/lib/openide-13javac-workaround.jar"/>
	        <pathelement location="${netbeans.home}/lib/openide.jar"/>
   	</path>
    </target>

    <target name="openideandcore-jarcompile-classpath" depends="which-classpath" if="openideandcore.jarcode.classpath">
        <echo message="Using jars (Openide and Core) classpath for compilation."/>
    	<!-- this classpath will be used for compiling tests against jars -->
	<path id="compiletest.classpath">        
	    <pathelement location="../openide-13javac-workaround.jar"/>
	    <pathelement location="../netbeans/lib/openide.jar"/>
	    <pathelement location="../../core/netbeans/lib/core.jar"/>
	</path>
    </target>

    <!-- ================================== -->
    <!-- Classpath for execution code tests -->
    <!-- ================================== -->
    
    <!-- Note, penideandcore-jartest-classpath must be last, it may override previous definitions of classpath!! -->
    <target name="prepare-codetest-classpath" 
            depends="jartest-classpath,srctest-classpath,idetest-classpath,openideandcore-jartest-classpath"/>
    
    <target name="jartest-classpath" depends="which-classpath" if="jarcode.classpath">
        <echo message="Using jars classpath."/>
        <!-- this classpath will be used for executing tests against jars -->
	<path id="codetest.classpath">
        	<pathelement location="../netbeans/lib/openide.jar"/>
        	<fileset dir="../../core/netbeans/lib">
            		<include name="core.jar"/>
            		<include name="ext/*.jar"/>
        	</fileset>
    	</path>
    </target>
        
    <target name="srctest-classpath" depends="which-classpath" if="srccode.classpath">
        <echo message="Using srcs classpath."/>
        <!-- this classpath will be used for executing tests against sources -->
    	<path id="codetest.classpath">
        <!-- Working sources should take precedence over core.jar: -->
	        <pathelement location="../src"/>
	        <fileset dir="../../core/netbeans/lib">
            		<include name="core.jar"/>
            		<include name="ext/*.jar"/>
        	</fileset>
    	</path>
    </target>
    
    <target name="idetest-classpath" depends="which-classpath" if="idecode.classpath">
        <echo message="Using IDE classpath."/>
        <!-- this classpath will be used for executing tests against installed IDE -->
    	<path id="codetest.classpath">
	        <pathelement location="${netbeans.home}/lib/openide.jar"/>
	        <fileset dir="${netbeans.home}/lib">
        	    <include name="core.jar"/>
            	<include name="ext/*.jar"/>
        	</fileset>
    	</path>
    </target>
        
    <target name="openideandcore-jartest-classpath" depends="which-classpath,setDOclasspath" if="openideandcore.jarcode.classpath">
        <echo message="Using jars (Openide and Core) classpath."/>
        <echo message="Additional execution classpath: ${additionalclasspath}"/>
        <!-- this classpath will be used for executing tests against jars -->
	<path id="codetest.classpath">
        	<pathelement location="../netbeans/lib/openide.jar"/>
        	<fileset dir="../../core/netbeans/lib">
            		<include name="core.jar"/>
            		<include name="ext/*.jar"/>
        	</fileset>
        	<pathelement path="${additionalclasspath}" />
    	</path>
    </target>
    
    <target name="testDO">
        <condition property="mytest1">
            <equals arg1="${tbag.name}" arg2="DO1"/>
        </condition>
        <condition property="mytest2">
            <equals arg1="${tbag.name}" arg2="DO2"/>
        </condition>
        <condition property="mytest2">
            <equals arg1="${tbag.name}" arg2="DO3"/>
        </condition>
        <condition property="mytest2">
            <equals arg1="${tbag.name}" arg2="DO4"/>
        </condition>
        <condition property="mytest2">
            <equals arg1="${tbag.name}" arg2="DO5"/>
        </condition>
    </target>
    
    <target name="setDOclasspath" depends="testDO,setDOclasspath1,setDOclasspath2"/>
    
    <target name="setDOclasspath1" depends="testDO" if="mytest1">
        <property name="additionalclasspath" value="../../text/netbeans/modules/text.jar"/>
    </target>
    
    <target name="setDOclasspath2" depends="testDO" if="mytest2">
       <property name="additionalclasspath" value="${java.home}/../lib/tools.jar;../../openidex/netbeans/modules/autoload/openidex.jar;../../text/netbeans/modules/text.jar;../../image/netbeans/modules/image.jar;../../utilities/netbeans/modules/utilities.jar;../../java/netbeans/modules/java.jar;../../form/netbeans/modules/form.jar"/>
    </target>

</project>

