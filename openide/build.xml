<?xml version='1.0' encoding='ISO-8859-1' ?><!-- -*- sgml-indent-step: 2 -*- -->
<!--
                Sun Public License Notice

The contents of this file are subject to the Sun Public License
Version 1.0 (the "License"). You may not use this file except in
compliance with the License. A copy of the License is available at
http://www.sun.com/

The Original Code is NetBeans. The Initial Developer of the Original
Code is Sun Microsystems, Inc. Portions Copyright 1997-2002 Sun
Microsystems, Inc. All Rights Reserved.
-->

<!-- Special targets: apiexamples, open-apis -->
<!-- Special properties: -Djdk-docs-location=...../api -->

<!-- ToDo: modern compile can fail even within openide/src for the same -->
<!-- reasons other modules need openide-13javac-workaround.jar! -->
<!-- Not clear how to solve this. Try rerunning build if it happens. -->

<project name="openide" default="netbeans" basedir=".">
  <property name="homepage.base" value="netbeans.org"/>
  <property name="dist.base" value="www.netbeans.org/download/nbms/40"/>
  <property name="license.file" location="../nbbuild/standard-nbm-license.txt"/>

  <property name="nbm_alias" value="nb_ide"/>

  <taskdef name="enhanceclass" classname="org.netbeans.nbbuild.NbEnhanceClass" classpath="../nbbuild/nbantext.jar"/>
  <taskdef name="locjar" classname="org.netbeans.nbbuild.LocalizedJar" classpath="../nbbuild/nbantext.jar"/>
  <taskdef name="checklinks" classname="org.netbeans.nbbuild.CheckLinks">
    <classpath>
      <pathelement location="../nbbuild/nbantext.jar"/>
      <fileset dir="../core/external">
        <include name="regexp*.jar"/>
      </fileset>
    </classpath>
  </taskdef>
  <taskdef name="makenbm" classname="org.netbeans.nbbuild.MakeNBM" classpath="../nbbuild/nbantext.jar"/>
  <taskdef name="genlist" classname="org.netbeans.nbbuild.MakeListOfNBM" classpath="../nbbuild/nbantext.jar"/>

  <target name="init">
    <ant dir="../core/external" target="unscramble"/>
    <path id="openide-cp">
      <fileset dir="../core/external">
        <include name="xml-apis*.jar"/>
      </fileset>
    </path>
    <path id="openide-boot-cp">
      <!-- XXX not nice to use undocumented property here: -->
      <pathelement path="${sun.boot.class.path}"/>
      <pathelement location="openide-13javac-workaround.jar"/>
    </path>
  </target>

  <target name="init-14">
    <available property="jdk14" classname="java.lang.CharSequence" />
  </target>
  
  <target name="compile-regular" depends="init">
    <javac srcdir="src" destdir="src" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
      <exclude name="org/openide/**/*14.java"/>
      <bootclasspath refid="openide-boot-cp"/>
      <classpath refid="openide-cp"/>
    </javac>
  </target>

  <target name="compile-14" if="jdk14" >
    <javac srcdir="src" destdir="src" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
      <include name="org/openide/**/*14.java"/>
      <bootclasspath refid="openide-boot-cp"/>
      <!-- As needed: <classpath refid="openide-cp"/> -->
    </javac>
  </target>
  
  <target name="compile-compat" depends="compile-regular">
    <javac srcdir="compat/src" destdir="compat/src" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
      <bootclasspath refid="openide-boot-cp"/>
      <classpath>
        <pathelement location="src"/>
        <!-- As needed: <path refid="openide-cp"/> -->
      </classpath>
    </javac>
  </target>
  
    
  <target name="compile" depends="init-14,13javac-workaround,compile-regular,compile-14,patchsuper"
          description="Compile all source files but do not package them."/>
  

  <target name="patchsuper" depends="compile-compat" >
    <ant antfile="../core/build.xml" dir="../core" target="boot" />
  
    <enhanceclass basedir="src">
      <classpath>
        <pathelement location="../core/netbeans/lib/ext/boot.jar"/>
        <!-- See xtest/instance/build-clover.xml for explanation: -->
        <pathelement location="../core/netbeans/lib/ext/clover.jar"/>
      </classpath>

            <!-- changes superclass to one that implements Node.Cookie -->
	    <patch class="org/openide/filesystems/Repository" super="org/openide/filesystems/$$Repository$$Patch$$" /> 

            <!-- renames two methods and makes them public -->
	    <patch class="org/openide/util/actions/SystemAction" > 
                <member name="s3tIcon" rename="setIcon" />
                <member name="g3tIcon" rename="getIcon" />
            </patch>
            
            <!-- just make some class members public -->
	    <patch class="org/openide/nodes/AbstractNode" > 
                <!-- make following member public -->
                <member name="getCookieSet" />
            </patch>
	    <patch class="org/openide/loaders/MultiDataObject" > 
                <!-- make following members public -->
                <member name="getCookieSet" />
                <member name="setCookieSet" />
            </patch>
	    <patch class="org/openide/explorer/view/BeanTreeView" > 
                <member name="selectionChanged" />
            </patch>

            <!-- superclass changed in order to implement MouseInputListener -->
            <patch class="org/openide/awt/Toolbar" super="org/openide/awt/$$Toolbar$$Patch$$">
                <member name="BASIC_HEIGHT" /> <!-- made non-final -->
            </patch>
            <patch class="org/openide/awt/Toolbar$$DnDEvent" >
                <!-- make fields public -->
                <member name="name" />
                <member name="dx" />
                <member name="dy" />
                <member name="type" />
            </patch>

            <!-- superclass needs to provide refershRoot method with different signature than the one in AbstractFileSystem -->                        
	    <patch class="org/openide/filesystems/AbstractFileSystem" > 
                <member name="r3fr3shRoot" rename="refreshRoot" />
            </patch>

           <!-- superclass implements intefaces AbstractFileSystem.Info, List, Change -->
	    <patch class="org/openide/filesystems/LocalFileSystem" super="org/openide/filesystems/$$LocalFileSystem$$Patch$$"> 
                <!-- methods are made public instead of proteted -->
                <member name="children" />
                <member name="createData" />
                <member name="createFolder" />
                <member name="delete" />
                <member name="folder" />
                <member name="inputStream" />
                <member name="lastModified" />
                <member name="lock" />
                <member name="markUnimportant" />
                <member name="mimeType" />
                <member name="outputStream" />
                <member name="readOnly" />
                <member name="rename" />
                <member name="size" />
                <member name="unlock" />
            </patch>
            <!-- the same case as LocalFileSystem -->
	    <patch class="org/openide/filesystems/JarFileSystem" super="org/openide/filesystems/$$JarFileSystem$$Patch$$"> 
                <member name="attributes" />
                <member name="deleteAttributes" />
                <member name="readAttribute" />
                <member name="renameAttributes" />
                <member name="writeAttribute" />
                
                <member name="children" />
                <member name="createData" />
                <member name="createFolder" />
                <member name="delete" />
                <member name="folder" />
                <member name="inputStream" />
                <member name="lastModified" />
                <member name="lock" />
                <member name="markUnimportant" />
                <member name="mimeType" />
                <member name="outputStream" />
                <member name="readOnly" />
                <member name="rename" />
                <member name="size" />
                <member name="unlock" />
            </patch>
            
            <!-- no super change, just be public -->
	    <patch class="org/openide/explorer/propertysheet/SetDefaultValueAction"  /> 
	    <patch class="org/openide/loaders/DataLoaderPool$$FolderLoader"  /> 
	    <patch class="org/openide/loaders/DataLoaderPool$$InstanceLoader"  /> 
	    <patch class="org/openide/loaders/DataLoaderPool$$DefaultLoader"  /> 
	    <patch class="org/openide/loaders/DataLoaderPool$$ShadowLoader"  /> 

    </enhanceclass>
  </target>

  <target name="13javac-workaround" unless="usingAjc">
    <!-- JDK 1.3 Javac at least on Linux has a serious bug as regards -->
    <!-- situations where one package contains a public class and a public -->
    <!-- inner class of the same name: though the inner class should be qualified -->
    <!-- by its outer class, something gets confused and the compiler thinks -->
    <!-- it cannot find the simple class whenever it is used. -->
    <!-- Forcing use of 1.2 compiler is possible with -Dbuild.compiler=classic, -->
    <!-- but this slows down builds, messes up Jikes users, and is not apparently -->
    <!-- needed for all 1.3 Javac versions. Easier to ensure that the outer classes -->
    <!-- appear in a separate JAR file at compile time, this assuages the compiler. -->
    <!-- Cf. #4401373. -->
    <javac srcdir="src" destdir="src" deprecation="${build.compiler.deprecation}" debug="${build.compiler.debug}">
      <!-- Compare inner classes of Actions: -->
      <include name="org/openide/awt/ToolbarButton.java"/>
      <include name="org/openide/awt/ToolbarToggleButton.java"/>
      <!-- Compare inner class of RequestProcessor: -->
      <include name="org/openide/util/Task.java"/>
      <!-- Included because Task imports it: -->
      <include name="org/openide/util/TaskListener.java"/>
    </javac>
    <jar jarfile="openide-13javac-workaround.jar"
         basedir="src"
         compress="false">
      <include name="org/openide/awt/ToolbarButton.class"/>
      <include name="org/openide/awt/ToolbarButton$*.class"/>
      <include name="org/openide/awt/ToolbarToggleButton.class"/>
      <include name="org/openide/awt/ToolbarToggleButton$*.class"/>
      <include name="org/openide/util/Task.class"/>
      <include name="org/openide/util/Task$*.class"/>
      <include name="org/openide/util/TaskListener.class"/>
      <include name="org/openide/util/TaskListener$*.class"/>
    </jar>
  </target>

  <!-- See #11746. -->
  <target name="vers-prep-1">
    <uptodate targetfile="manifest-subst.mf" property="spec-vers-up-to-date">
      <srcfiles dir=".">
        <include name="openide-spec-vers.properties"/>
      </srcfiles>
    </uptodate>
  </target>
  <target name="vers-prep-2" depends="vers-prep-1" unless="spec-vers-up-to-date">
    <!-- Either manifest-subst.mf is missing or openide-spec-vers.properties is newer. -->
    <delete>
      <fileset dir=".">
        <include name="*-subst.mf"/>
      </fileset>
    </delete>
  </target>
  <target name="vers-prep" depends="vers-prep-2">
    <property file="openide-spec-vers.properties"/>
    <filter token="SPEC_VERS_SUBST" value="${org.openide.specification.version}"/>
    <filter token="BUILD_NUMBER_SUBST" value="${buildnumber}"/>
  </target>
  
  <target name="jars" depends="compile,13javac-workaround,vers-prep,patchsuper" description="Create JAR files.">
    <mkdir dir="netbeans/lib"/>
    <filter token="OpenIDE-Module" value="OpenIDE-Module"/>
    <copy file="manifest.mf" tofile="manifest-subst.mf" filtering="on"/>
    <locjar jarfile="netbeans/lib/openide.jar"
            manifest="manifest-subst.mf"
	    compress="false">
      <locale name="ja"/>
      
      <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt"/>
      
      <!-- include also patches -->
      <fileset dir="compat/src">
           <!-- But include patch files -->
           <include name="**/$$*$$Patch$$.class" />
      </fileset>
      
    </locjar>
  </target>

  <target name="jars-with-lib" depends="libs,compile,13javac-workaround,vers-prep" description="Create JAR files.">
    <mkdir dir="standalone"/>
    <filter token="Class-Path" value="Class-Path"/>
    <filter token="OpenIDE-Module" value="OpenIDE-Module"/>
    <copy file="manifest.mf" tofile="manifest-subst.mf" filtering="on"/>
    <locjar jarfile="standalone/openide-remainder.jar"
            manifest="manifest-subst.mf"
	    compress="false">
      <locale name="ja"/>
      
      <!-- Exclude libraries included in openide-fs.jar, openide-util, etc. -->
      <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt">
           <include name="org/openide/**" />
      	   <exclude name="org/openide/filesystems/**" />
           <exclude name="org/openide/util/**"/>
           <exclude name="org/openide/xml/"/>
           <exclude name="org/openide/nodes/**"/>
           <exclude name="org/openide/explorer/**"/>
           <exclude name="org/openide/resources/propertysheet/**"/>

           <exclude name="org/openide/resources/defaultNode.gif"/>
           <exclude name="org/openide/resources/defaultNode32.gif"/>
           <exclude name="org/openide/resources/actions/paste.gif"/>
           <exclude name="org/openide/resources/actions/copy.gif"/>
           <exclude name="org/openide/resources/actions/delete.gif"/>   
           <exclude name="org/openide/resources/actions/cut.gif"/>   
           <exclude name="org/openide/resources/actions/properties.gif"/>   

           <exclude name="org/openide/cookies/**"/>
           <exclude name="org/openide/actions/ActionConstants*"/>
           <exclude name="org/openide/actions/Bundle*"/>
           <exclude name="org/openide/actions/CopyAction*"/>
           <exclude name="org/openide/actions/DeleteAction*"/>
           <exclude name="org/openide/actions/CutAction*"/>
           <exclude name="org/openide/actions/PasteAction*"/>
           <exclude name="org/openide/actions/PopupAction*"/>
           <exclude name="org/openide/actions/PropertiesAction*"/>
           <exclude name="org/openide/actions/CustomizeAction*"/>
           <exclude name="org/openide/awt/ToolbarToggleButton*"/>
           <exclude name="org/openide/awt/ToolbarButton*"/>
           <exclude name="org/openide/awt/EnabledButtonModel*"/>
           <exclude name="org/openide/awt/SplittedPanel*"/>
           <exclude name="org/openide/awt/Bundle*"/>
           <exclude name="org/openide/awt/JInlineMenu*"/>
           <exclude name="org/openide/awt/Actions*"/>  
           <exclude name="org/openide/awt/JMenuPlus*"/>
           <exclude name="org/openide/awt/JPopupMenuUtils*"/> 
           <exclude name="org/openide/awt/MouseUtils*"/>

           <!-- Part of openide-util.jar -->
           <exclude name="org/openide/ErrorManager*class"/> 
      </fileset>
      
      <fileset dir="src">
           <!-- But include all localized resources -->
           <include name="org/openide/**/*_*" />
           
           <!-- Not this guy: -->
           <exclude name="org/openide/filesystems/filesystem1_1.dtd"/>

           <!-- Include also editors package (it is not part of explorer library) -->
           <include name="org/openide/explorer/propertysheet/editors/*.class"/>
           <include name="org/openide/explorer/propertysheet/editors/*.properties"/>
           <exclude name="org/openide/explorer/propertysheet/editors/Enhanced*.class"/>

      </fileset>
    </locjar>
    
    <!-- It also needs regexp.jar: -->
    <copy todir="standalone">
      <fileset dir="../core/external">
        <include name="regexp*.jar"/>
      </fileset>
    </copy>
    
  </target>

  <target name="netbeans" depends="jars" description="Build everything needed for inclusion in the IDE.">
    <genlist targetname="nbm" outputfiledir="netbeans"/>
  </target>

  <target name="nbm" depends="netbeans">
    <makenbm file="openide.nbm"
             topdir="."
             module="netbeans/lib/openide.jar"
	     homepage="http://openide.${homepage.base}/"
	     distribution="http://${dist.base}/openide.nbm">
      <license file="${license.file}"/>
      <signature keystore="${keystore}" storepass="${storepass}" alias="${nbm_alias}"/>
    </makenbm>
  </target>

  
  <!-- Build separate libraries for the IDE -->
  
  <target name="libs" depends="lib-util,lib-fs,lib-nodes,lib-explorer,lib-lookup" />
  
  <target name="lib-util" depends="compile,13javac-workaround,vers-prep">
	<mkdir dir="standalone"/>
        <copy file="openide-util.mf" tofile="openide-util-subst.mf" filtering="on"/>
        
        <!-- include nearly whole org.openide.util, plus some important stuff around -->
  	<jar jarfile="standalone/openide-util.jar"
	     manifest="openide-util-subst.mf"
	     compress="false">
             <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt" >
             	  <include name="org/openide/util/io/*"/>
             	  <include name="org/openide/util/datatransfer/*"/>
                  <include name="org/openide/util/actions/*"/>
                  <include name="org/openide/xml/"/>

                  <!-- XXX review distribution of JPopupMenuPlus, JPopupMenuUtils, etc. -->
                  <include name="org/openide/awt/JPopupMenu*class" />
                  <include name="org/openide/awt/NbPopupMenuUI*class" />
                  <include name="org/openide/loaders/OperationListener*class" />
                  <include name="org/openide/filesystems/RepositoryListener*class" />
                  <include name="org/openide/filesystems/FileChangeListener*class" />
                  <include name="org/openide/filesystems/FileStatusListener*class" />
                  <include name="org/openide/nodes/NodeListener*class" />
                  
                  <!-- exlude localized resources, they are part of openide.jar -->
                  <exclude name="org/openide/**/*_*" />
             </fileset>

             <!-- Includes of the org/openide/util package -->
             <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt" >
             	  <include name="org/openide/util/*"/>
                  
                  <!-- Exclude classes already included in lib-lookup -->
                  <exclude name="org/openide/util/lookup/"/>
                  <exclude name="org/openide/util/*Lookup*"/>
                  <exclude name="org/openide/util/WeakSet*"/>
                  <exclude name="org/openide/util/enum/"/>
                  
                  <!-- exlude localized resources, they are part of openide.jar -->
                  <exclude name="org/openide/util/*_*" />
                  
<!--                  <exclude name="org/openide/util/WeakListener$$FileChange.class" />
                  <exclude name="org/openide/util/WeakListener$$FileStatus.class" />
                  <exclude name="org/openide/util/WeakListener$$Node.class" />
                  <exclude name="org/openide/util/WeakListener$$Operation.class" />
                  <exclude name="org/openide/util/WeakListener$$Repository.class" />
             	  <exclude name="org/openide/util/HttpServer*" />
-->                  
             </fileset>
        </jar>
  </target>        
  
  <target name="lib-fs" depends="compile,13javac-workaround,vers-prep">
	<mkdir dir="standalone"/>
        <copy file="openide-fs.mf" tofile="openide-fs-subst.mf" filtering="on"/>
        
  	<jar jarfile="standalone/openide-fs.jar"
	     manifest="openide-fs-subst.mf"
	     compress="false">
             <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt" >
                  <include name="org/openide/filesystems/*"/>
                  
                  <!-- exlude localized resources, they are part of openide.jar -->
                  <exclude name="org/openide/filesystems/*_*" />
                  
<!--                  <exclude name="org/openide/filesystems/RefreshAction.class" /> -->
             </fileset>
             <fileset dir="src">
                 <!-- Make sure this does not get skipped: -->
                 <include name="org/openide/filesystems/filesystem1_1.dtd"/>
             </fileset>
        </jar>
  </target>        
             	
  <target name="lib-nodes" depends="compile,13javac-workaround,vers-prep">
	<mkdir dir="standalone"/>
        <copy file="openide-nodes.mf" tofile="openide-nodes-subst.mf" filtering="on"/>
        
  	<jar jarfile="standalone/openide-nodes.jar"
	     manifest="openide-nodes-subst.mf"
	     compress="false">
             <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt" >
                  <include name="org/openide/nodes/*"/>
                  <include name="org/openide/cookies/*"/>
                  <include name="org/openide/resources/defaultNode.gif"/>
                  <include name="org/openide/resources/defaultNode32.gif"/>
                  
                  <!-- exclude localized resources, they are part of openide.jar -->
                  <exclude name="org/openide/nodes/*_*" />
                  <exclude name="org/openide/cookies/*_*" />
             </fileset>
        </jar>
  </target>        

  <target name="lib-explorer" depends="compile,13javac-workaround,vers-prep">
	<mkdir dir="standalone"/>
        <copy file="openide-explorer.mf" tofile="openide-explorer-subst.mf" filtering="on"/>
        
  	<jar jarfile="standalone/openide-explorer.jar"
	     manifest="openide-explorer-subst.mf"
	     compress="false">
             <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt" >
                  <include name="org/openide/explorer/*"/>
                  <include name="org/openide/explorer/propertysheet/*"/>
                  <include name="org/openide/explorer/propertysheet/editors/Enhanced*.class"/>
                  <include name="org/openide/explorer/view/*"/>
                  <include name="org/openide/actions/Bundle*"/>
                  <include name="org/openide/actions/ActionConstants*"/>
                  <include name="org/openide/actions/CutAction*"/>
                  <include name="org/openide/actions/CopyAction*"/>
                  <include name="org/openide/actions/PasteAction*"/>
                  <include name="org/openide/actions/CustomizeAction*"/>
                  <include name="org/openide/actions/PopupAction*"/>
                  <include name="org/openide/actions/PropertiesAction*"/>
                  <include name="org/openide/actions/DeleteAction*"/>
                  <include name="org/openide/resources/propertysheet/*"/>
                  <include name="org/openide/resources/actions/paste.gif"/>
                  <include name="org/openide/resources/actions/copy.gif"/>
                  <include name="org/openide/resources/actions/delete.gif"/>   
                  <include name="org/openide/resources/actions/cut.gif"/>   
                  <include name="org/openide/resources/actions/properties.gif"/>   
                  <include name="org/openide/awt/Actions*"/>
                  <include name="org/openide/awt/JMenuPlus*"/>
                  <include name="org/openide/awt/JPopupMenuUtils*"/>
                  <include name="org/openide/awt/MouseUtils*class" />
                  <include name="org/openide/awt/ToolbarToggleButton*class"/>
                  <include name="org/openide/awt/ToolbarButton*class"/>
                  <include name="org/openide/awt/EnabledButtonModel*"/>
                  <include name="org/openide/awt/SplittedPanel*"/>
                  <include name="org/openide/awt/Bundle*"/>
                  <include name="org/openide/awt/JInlineMenu*"/>
                  <include name="org/openide/windows/TopComponent$Registry.class" />
                  
                  <!-- exclude localized resources, they are part of openide.jar -->
                  <exclude name="org/openide/explorer/*_*" />
                  <exclude name="org/openide/explorer/propertysheet/*_*" />
                  <exclude name="org/openide/explorer/propertysheet/editors/*_*" />
                  <exclude name="org/openide/explorer/view/*_*" />
             </fileset>
        </jar>
  </target>        
  
  <target name="lib-lookup" depends="compile,13javac-workaround,vers-prep,lookup-src">
	<mkdir dir="standalone"/>
        <copy file="openide-lookup.mf" tofile="openide-lookup-subst.mf" filtering="on"/>
        
        <!-- include only lookup classes + WeakSet -->
  	<jar jarfile="standalone/openide-lookup.jar"
	     manifest="openide-lookup-subst.mf"
	     compress="false">
             <fileset dir="src" excludesfile="../nbbuild/standard-jar-excludes.txt" >
                  <include name="org/openide/ErrorManager*class"/>
                  <include name="org/openide/util/lookup/*"/>
                  <include name="org/openide/util/*Lookup*"/>
                  <include name="org/openide/util/WeakSet*"/>
                  <include name="org/openide/util/enum/*"/>
                  
                  <!-- exlude localized resources, they are part of openide.jar -->
                  <exclude name="org/openide/**/*_*" />
                  <exclude name="org/openide/util/*_*" />
             </fileset>
        </jar>
  </target>        
  
  <target  name="lookup-src" description="Creates zip file with lookup sources.">
    <mkdir dir="standalone"/>
    <zip compress="true" zipfile="standalone/lookup-src.zip">
        <fileset dir="src">
            <include name="org/openide/ErrorManager.java"/>
            <include name="org/openide/util/lookup/*"/>
            <include name="org/openide/util/*Lookup*"/>
            <include name="org/openide/util/WeakSet.java"/>
            <include name="org/openide/util/enum/*"/>
            
            <exclude name="org/openide/**/*_*" />
            <exclude name="org/openide/util/*_*" />
            <exclude name="**/*.class"/>
            <exclude name="**/.nbattrs"/>
        </fileset>
    </zip>
  </target>

  <!-- Open API documentation. -->
  <target name="open-apis-check-existence-1" unless="open-apis-force-rebuild">
    <available property="open-apis-exists" file="javadoc/OpenAPIs.zip"/>
  </target>
  <target name="open-apis-check-existence" depends="open-apis-check-existence-1" unless="open-apis-exists">
    <property name="open-apis-force-rebuild" value="true"/>
    <echo message="Open APIs are not built at all, will be created."/>
  </target>
  <target name="open-apis-check-timestamps-1" depends="open-apis-check-existence" unless="open-apis-force-rebuild">
    <uptodate property="open-apis-up-to-date" targetfile="javadoc/OpenAPIs.zip">
      <srcfiles dir="src">
        <include name="org/openide/**/*.java"/>
      </srcfiles>
      <srcfiles dir="api/doc">
        <include name="org/openide/"/>
        <include name="overview.html"/>
        <include name="*.css"/>
      </srcfiles>
    </uptodate>
  </target>
  <target name="open-apis-check-timestamps" depends="open-apis-check-timestamps-1" unless="open-apis-up-to-date">
    <property name="open-apis-force-rebuild" value="true"/>
    <echo>Open APIs are out of date and will be rebuilt.
To avoid rebuilding them after every change in API sources,
use -Dopen-apis-up-to-date=true
</echo>
  </target>
  <target name="open-apis-maybe-skip" depends="open-apis-check-timestamps" unless="open-apis-force-rebuild">
    <echo>Not building Open APIs because they are up-to-date...
To force them to be rebuilt, run again with -Dopen-apis-force-rebuild=true
</echo>
  </target>
  <target name="javadoc" depends="init,open-apis-check-timestamps,open-apis-maybe-skip" if="open-apis-force-rebuild"
          description="Create Open API documentation.">
    <property name="jdk-docs-location" value="http://java.sun.com/j2se/1.4.1/docs/api"/>
    <property name="execution-docs-location" value="http://www.netbeans.org/download/dev/javadoc/ExecutionAPI"/>
    <property name="io-docs-location" value="http://www.netbeans.org/download/dev/javadoc/InputOutputAPI"/>
    <!-- XXX delete (and @COMPILER@ token below too) when deprecated by Projects: -->
    <property name="compiler-docs-location" value="http://www.netbeans.org/download/dev/javadoc/CompilerAPI"/>
    <property name="javahelp-docs-location" value="http://www.netbeans.org/download/dev/javadoc/JavaHelpAPI"/>
    <tstamp/>
    <property name="open-apis-footer" value="&lt;font size=-2 color=gray&gt;Built on ${TODAY}.&amp;nbsp;&amp;nbsp;|&amp;nbsp;&amp;nbsp;Portions Copyright 1997-2002 Sun Microsystems, Inc. All rights reserved.&lt;/font&gt;"/>
    <echo message="Build Open API documentation..."/>
    <mkdir dir="javadoc/OpenAPIs"/>
    <javadoc destdir="javadoc/OpenAPIs"
             packagenames="org.openide,org.openide.actions,org.openide.awt,org.openide.cookies,org.openide.explorer,org.openide.explorer.propertysheet,org.openide.explorer.propertysheet.editors,org.openide.explorer.view,org.openide.filesystems,org.openide.loaders,org.openide.modules,org.openide.nodes,org.openide.options,org.openide.text,org.openide.util,org.openide.util.actions,org.openide.util.datatransfer,org.openide.util.enum,org.openide.util.io,org.openide.util.lookup,org.openide.windows,org.openide.xml"
             doctitle="NetBeans Open APIs"
             windowtitle="NetBeans APIs"
             overview="api/doc/overview.html"
             bottom="${open-apis-footer}"
             use="true"
             splitindex="true"
             author="false"
             version="false"
             maxmemory="64m"
	     stylesheetfile="api/doc/javadoc.css"
    >
      <sourcepath>
        <pathelement location="api/doc"/>
        <pathelement location="src"/>
      </sourcepath>
      <classpath refid="openide-cp"/>
      <link href="${jdk-docs-location}"
            offline="true"
            packagelistLoc="api/doc"
      />
      <group title="&lt;a href=&quot;@TOP@org/openide/modules/doc-files/api.html&quot;&gt;Modules API&lt;/a&gt;"
             packages="org.openide.modules"/>
      <group title="ServiceType, WizardDescriptor, ..."
             packages="org.openide"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/doc-files/services-api.html&quot;&gt;Services &amp;amp; Lookup API&lt;/a&gt;"
             packages="org.openide.util.lookup"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/filesystems/doc-files/api.html&quot;&gt;Filesystems API&lt;/a&gt;"
             packages="org.openide.filesystems"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/loaders/doc-files/api.html&quot;&gt;Datasystems API&lt;/a&gt;"
             packages="org.openide.cookies:org.openide.loaders:org.openide.util.datatransfer"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/nodes/doc-files/api.html&quot;&gt;Nodes API&lt;/a&gt;"
             packages="org.openide.nodes"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/explorer/doc-files/api.html&quot;&gt;Explorer API&lt;/a&gt;"
             packages="org.openide.explorer:org.openide.explorer.propertysheet:org.openide.explorer.propertysheet.editors:org.openide.explorer.view"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/actions/doc-files/api.html&quot;&gt;Actions API&lt;/a&gt;"
             packages="org.openide.actions:org.openide.util.actions"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/text/doc-files/api.html&quot;&gt;Editor API&lt;/a&gt;"
             packages="org.openide.text"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/windows/doc-files/api.html&quot;&gt;Window System API&lt;/a&gt;"
             packages="org.openide.windows"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/options/doc-files/api.html&quot;&gt;Options API&lt;/a&gt;"
             packages="org.openide.options"/>
      <group title="&lt;a href=&quot;@TOP@org/openide/util/doc-files/api.html&quot;&gt;Utility Classes&lt;/a&gt;"
             packages="org.openide.awt:org.openide.util:org.openide.util.enum:org.openide.util.io:org.openide.xml"/>
      <!-- XXX in Ant 1.5.1 add: <tag name="beaninfo" scope="methods" description="Bean info:"/> -->
    </javadoc>
    <copy todir="javadoc/OpenAPIs">
      <fileset dir="api/doc">
        <include name="*.css"/>
      </fileset>
    </copy>
    <replace dir="javadoc/OpenAPIs">
      <include name="**/doc-files/*.html"/>
      <include name="**/package-summary.html"/>
      <replacefilter token="@JDK@" value="${jdk-docs-location}"/>
      <replacefilter token="@EXECUTION@" value="${execution-docs-location}"/>
      <replacefilter token="@IO@" value="${io-docs-location}"/>
      <replacefilter token="@COMPILER@" value="${compiler-docs-location}"/>
      <replacefilter token="@JAVAHELP@" value="${javahelp-docs-location}"/>
      <replacefilter token="@FOOTER@" value="${open-apis-footer}"/>
    </replace>
    <replace file="javadoc/OpenAPIs/overview-summary.html" token="@DATE@" value="${TODAY}"/>
    <replace dir="javadoc/OpenAPIs" token="@TOP@" value="">
      <include name="*.html"/>
    </replace>
    <replace dir="javadoc/OpenAPIs" token="@TOP@" value="../">
      <include name="*/*.html"/>
    </replace>
    <replace dir="javadoc/OpenAPIs" token="@TOP@" value="../../">
      <include name="*/*/*.html"/>
    </replace>
    <replace dir="javadoc/OpenAPIs" token="@TOP@" value="../../../">
      <include name="*/*/*/*.html"/>
    </replace>
    <replace dir="javadoc/OpenAPIs" token="@TOP@" value="../../../../">
      <include name="*/*/*/*/*.html"/>
    </replace>
    <replace dir="javadoc/OpenAPIs" token="@TOP@" value="../../../../../">
      <include name="*/*/*/*/*/*.html"/>
    </replace>
    <replace dir="javadoc/OpenAPIs" token="@TOP@" value="../../../../../../">
      <include name="*/*/*/*/*/*/*.html"/>
    </replace>
    <!-- [PENDING] fuller check mode too, checking more HTML files? -->
    <property name="javadoc.check.external.links" value="false"/>
    <checklinks basedir="javadoc/OpenAPIs" checkexternal="${javadoc.check.external.links}">
      <include name="overview-summary.html"/>
      <include name="**/package-summary.html"/>
      <include name="**/doc-files/**/*.html"/>
      <!-- Make hyperlinks point to the source files, not the copied files: -->
      <mapper type="glob" from="${basedir}/javadoc/OpenAPIs/overview-summary.html" to="${basedir}/api/doc/overview.html"/>
      <mapper type="glob" from="${basedir}/javadoc/OpenAPIs/*/package-summary.html" to="${basedir}/api/doc/*/package.html"/>
      <mapper type="glob" from="${basedir}/javadoc/OpenAPIs/*.html" to="${basedir}/api/doc/*.html"/>
    </checklinks>
    <zip zipfile="javadoc/OpenAPIs.zip" basedir="javadoc/OpenAPIs"/>
  </target>
  <target name="apis-tidy" description="Run the Tidy HTML checker on API prose documents.">
    <apply parallel="true" failonerror="true" executable="tidy">
      <fileset dir="api/doc">
        <include name="**/*.html"/>
        <!-- Machine-generated: -->
        <exclude name="org/openide/filesystems/doc-files/resolverDocumentation.html"/>
        <!-- Missing title tags, it is OK: -->
        <exclude name="**/package.html"/>
        <!-- Maintained separately: -->
        <exclude name="tutorial/"/>
      </fileset>
      <arg value="-e"/>
      <arg value="--gnu-emacs"/>
      <arg value="true"/>
    </apply>
  </target>

  <!-- API examples. -->

  <target name="examplemodules" depends="example-scripts,example-minicomposer-nodice,example-minicomposer,example-globalactions,example-audioloader-nodice,example-audioloader"/>

  <target name="example-init">
    <available property="javasound" classname="javax.sound.sampled.AudioSystem"/>
    <property name="jmf.home" location="/space/JMF2.1"/>
<!-- Unused:
    <available property="jmf" classname="javax.media.ControllerAdapter">
      <classpath>
        <pathelement location="${jmf.home}/lib/jmf.jar"/>
      </classpath>
    </available>
-->
    <available property="mediaplayer" classname="javax.media.bean.playerbean.MediaPlayer">
      <classpath>
        <pathelement location="${jmf.home}/lib/jmf.jar"/>
        <pathelement location="${jmf.home}/lib/mediaplayer.jar"/>
      </classpath>
    </available>
  </target>

  <target name="example-scripts" depends="jars">
    <javac srcdir="api/examples" destdir="api/examples">
      <include name="**/org/netbeans/examples/scripts/"/>
      <classpath>
        <fileset dir="../openide/netbeans/lib">
          <include name="openide*.jar" />
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="example-minicomposer-nodice" depends="example-init" unless="javasound">
    <fail message="Sorry, minicomposer example requires JavaSound to be built.
Included in JDK 1.3, else you may need to download it separately."/>
  </target>
  <target name="example-minicomposer" depends="example-init,jars" if="javasound">
    <javac srcdir="api/examples" destdir="api/examples">
      <include name="**/org/netbeans/examples/modules/minicomposer/"/>
      <classpath>
        <fileset dir="../openide/netbeans/lib">
          <include name="openide*.jar" />
        </fileset>
      </classpath>
    </javac>
    <mkdir dir="examplemodules"/>
    <!-- Note: compression on, because these things are frequently emailed, -->
    <!-- and performance is irrelevant. -->
    <!-- Note also that sources are intentionally included. -->
    <!-- filesystem.attributes OK too, since people may want to unpack & fool with source. -->
    <jar jarfile="examplemodules/minicomposer.jar"
         manifest="api/examples/org/netbeans/examples/modules/minicomposer.mf"
	 basedir="api/examples"
	 includes="org/netbeans/examples/modules/minicomposer/"
	 compress="true"/>
  </target>

  <target name="example-minicomposer-test-build" description="Build minicomposer for testing purposes.">
    <javac srcdir="api/examples" destdir="api/examples">
      <include name="org/netbeans/examples/modules/minicomposer/"/>
      <classpath>
        <pathelement location="netbeans/lib/openide.jar"/>
        <pathelement location="compiler/netbeans/modules/autoload/openide-compiler.jar"/>
        <pathelement location="execution/netbeans/modules/autoload/openide-execution.jar"/>
        <pathelement location="io/netbeans/modules/autoload/openide-io.jar"/>
        <pathelement location="deprecated/netbeans/modules/autoload/openide-deprecated.jar"/>
      </classpath>
    </javac>
    <mkdir dir="examplemodulereload/minicomposer-test"/>
    <jar jarfile="examplemodulereload/minicomposer-test/minicomposer.jar"
         manifest="api/examples/org/netbeans/examples/modules/minicomposer.mf"
	 basedir="api/examples"
	 includes="org/netbeans/examples/modules/minicomposer/"
	 compress="false">
      <exclude name="**/*.java"/>
    </jar>
  </target>
  <target name="example-minicomposer-test" depends="example-minicomposer-test-build" description="Try installing minicomposer into running IDE.">
    <nbinstaller action="reinstall" module="examplemodulereload/minicomposer-test/minicomposer.jar"/>
  </target>

  <target name="example-globalactions-test-build" description="Build globalactions for testing purposes.">
    <javac srcdir="api/examples" destdir="api/examples">
      <include name="org/netbeans/examples/modules/globalactions/"/>
      <classpath>
        <fileset dir="../openide/netbeans/lib">
          <include name="openide*.jar" />
        </fileset>
      </classpath>
    </javac>
    <mkdir dir="examplemodulereload/globalactions-test"/>
    <jar jarfile="examplemodulereload/globalactions-test/globalactions.jar"
         manifest="api/examples/org/netbeans/examples/modules/globalactions.mf"
	 basedir="api/examples"
	 includes="org/netbeans/examples/modules/globalactions/"
	 compress="false"/>
  </target>
  <target name="example-globalactions-test" depends="example-globalactions-test-build" description="Try installing globalactions into running IDE.">
    <nbinstaller action="reinstall" module="examplemodulereload/globalactions-test/globalactions.jar"/>
  </target>

  <target name="openidex-all" depends="netbeans">
    <ant dir="../openidex"/>
  </target>
  <target name="example-globalactions" depends="jars,openidex-all">
    <javac srcdir="api/examples" destdir="api/examples">
      <include name="org/netbeans/examples/modules/globalactions/"/>
      <classpath>
        <fileset dir="../openide/netbeans/lib">
          <include name="openide*.jar" />
        </fileset>
        <pathelement location="../openidex/netbeans/modules/autoload/openidex.jar"/>
      </classpath>
    </javac>
    <mkdir dir="examplemodules"/>
    <jar jarfile="examplemodules/globalactions.jar"
         manifest="api/examples/org/netbeans/examples/modules/globalactions.mf"
	 basedir="api/examples"
	 includes="org/netbeans/examples/modules/globalactions/"
	 compress="true"/>
  </target>

  <!-- [PENDING] ideally would test all of javasound, jmf, mediaplayer properties -->
  <target name="example-audioloader-nodice" depends="example-init" unless="mediaplayer">
    <fail message="Sorry, audioloader example requires to be built: JavaSound; JMF 2.0 or greater; JMF's mediaplayer.
JavaSound is included in JDK 1.3, else you may need to download it separately.
The Java Media Framework is separately downloadable.
Set jmf.home to the location of your JMF installation to continue."/>
  </target>
  <target name="example-audioloader" depends="example-init,jars" if="mediaplayer">
    <javac srcdir="api/examples" destdir="api/examples">
      <include name="**/org/netbeans/examples/modules/audioloader/"/>
      <classpath>
        <fileset dir="../openide/netbeans/lib">
          <include name="openide*.jar" />
        </fileset>
        <pathelement location="${jmf.home}/lib/jmf.jar"/>
        <pathelement location="${jmf.home}/lib/mediaplayer.jar"/>
      </classpath>
    </javac>
    <mkdir dir="examplemodules"/>
    <jar jarfile="examplemodules/audioloader.jar"
         manifest="api/examples/org/netbeans/examples/modules/audioloader.mf"
	 basedir="api/examples"
	 includes="org/netbeans/examples/modules/audioloader/"
	 compress="true"/>
  </target>

  <target name="apiexamples" depends="netbeans,examplemodules"
          description="Build all API code examples.">
    <ant dir="../sysprops"/>
    <mkdir dir="examplemodules/apiexamples"/>
    <copy todir="examplemodules/apiexamples">
      <fileset dir="api/examples">
        <include name="org/netbeans/examples/modules/minicomposer/"/>
        <include name="org/netbeans/examples/modules/audioloader/"/>
        <include name="org/netbeans/examples/modules/globalactions/"/>
        <include name="org/netbeans/examples/scripts/"/>
      </fileset>
      <fileset dir="../sysprops/src"/>
    </copy>
    <mkdir dir="examplemodules/apiexamples/manifests"/>
    <filter token="BUILD_NUMBER_SUBST" value="(demo module)"/>
    <copy file="api/examples/org/netbeans/examples/modules/minicomposer.mf"
          tofile="examplemodules/apiexamples/manifests/minicomposer.mf"/>
    <copy file="api/examples/org/netbeans/examples/modules/audioloader.mf"
          tofile="examplemodules/apiexamples/manifests/audioloader.mf"/>
    <copy file="api/examples/org/netbeans/examples/modules/globalactions.mf"
          tofile="examplemodules/apiexamples/manifests/globalactions.mf"/>
    <copy file="../sysprops/manifest.mf"
          tofile="examplemodules/apiexamples/manifests/sysprops.mf"
	  filtering="true"/>
    <zip zipfile="examplemodules/apiexamples.zip"
         basedir="examplemodules/apiexamples"
	 compress="true"/>
  </target>

  <target name="nb-api-tutorial" description="Make Open APIs Getting Started Tutorial.">
    <zip zipfile="nb-api-tutorial.zip">
      <fileset dir="api/doc/tutorial">
        <exclude name="README.txt"/>
      </fileset>
    </zip>
  </target>

  <target name="clean" description="Remove all build products.">
    <delete>
      <fileset dir="src">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="compat/src">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="api/examples">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir=".">
        <include name="*-subst.mf"/>
      </fileset>
    </delete>
    <delete dir="netbeans"/>
    <delete file="openide-13javac-workaround.jar"/>
    <delete dir="javadoc"/>
    <delete file="nb-api-tutorial.zip"/>
    <delete dir="examplemodules"/>
    <delete dir="standalone"/>
    <delete dir="Info"/>
    <delete file="openide.nbm"/>
  </target>
  <target name="real-clean" depends="clean" description="As for clean, but also remove example module reload area.">
    <delete dir="examplemodulereload"/>
  </target>

    <target  name="standalone-fs" depends="standalone-fs-prepare" description="Creates zip file suitable for download. Zip file contains all JARs necessary for using standalone filesystems, including XML libraries.">
        <zip compress="true" zipfile="standalone/nbfilesystems.zip">
            <fileset dir="standalone">
                <include name="openide-fs.jar"/>
                <include name="openide-util.jar"/>
                <include name="openide-lookup.jar"/>
                <include name="README-FS.txt"/>
            </fileset>
            <fileset dir="../core/external">
                <include name="xml-apis*.jar"/>
                <include name="xerces*.jar"/>
            </fileset>
        </zip>
    </target>

    <target  name="standalone-fs-light" depends="standalone-fs-prepare" description="Creates zip file suitable for download. Zip file contains all JARs necessary for using standalone filesystems, excluding XML libraries.">
        <zip compress="true" zipfile="standalone/nbfilesystems-light.zip">
            <fileset dir="standalone">
                <include name="openide-fs.jar"/>
                <include name="openide-util.jar"/>
                <include name="openide-lookup.jar"/>
                <include name="README-FS.txt"/>
            </fileset>
        </zip>
    </target>

    <target name="standalone-fs-prepare" depends="lib-lookup,lib-util,lib-fs">
        <mkdir dir="standalone"/>
        <echo file="standalone/README-FS.txt"><![CDATA[Filesystems Library
===================

Please visit the documentation at http://openide.netbeans.org/fs/

If you want to use the library in your application just put nbfilesystems.jar
into your classpath:

	java -cp nbfilesystems.jar yourpackage.YourClass

nbfilesystems-light.jar is similar but requires an XML parser in the classpath too.

Comments or questions? Post to the dev@openide.netbeans.org mailing list.
]]></echo>

    </target>

    <target name="init-dtd">
        <ant dir="../libs/external" target="unscramble"/>
    </target>
    <target name="apichanges-check" depends="init-dtd" description="Check syntax of API changes list.">
        <xmlvalidate file="api/doc/changes/apichanges.xml" failonerror="true"/>
    </target>
    <target name="apichanges-generate" depends="init-dtd" description="Regenerate HTML from XML API changes list.">
        <style in="api/doc/changes/apichanges.xml" out="www/apichanges.html" destdir="www" style="api/doc/changes/apichanges.xsl"/>
    </target>
    
</project>
