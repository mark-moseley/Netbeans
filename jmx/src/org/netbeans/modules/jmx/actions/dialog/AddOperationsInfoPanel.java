/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 2004-2005 Sun
 * Microsystems, Inc. All Rights Reserved.
 */


package org.netbeans.modules.jmx.actions.dialog;

import java.awt.event.ActionListener;
import java.text.MessageFormat;
import java.util.ResourceBundle;
import javax.swing.JButton;
import org.netbeans.modules.jmx.MBeanOperation;
import org.netbeans.modules.jmx.actions.AddOpAction;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 * Class responsible for the warning message shown when you use Add Operations...
 * popup action in the contextual management menu and there is already an 
 * existing implementation of a specified operation.
 * @author  tl156378
 */
public class AddOperationsInfoPanel extends javax.swing.JPanel {
    
    private ResourceBundle bundle;
    
    private JButton btnOK;
     
    /**
     * 
     * Creates new form Panel.
     * @param mbeanClassName <CODE>String</CODE> name of the MBean to update
     * @param operations <CODE>MBeanOperation[]</CODE> operations of this MBean
     * @param opExist <CODE>boolean[]</CODE> represents if each operation already exists.
     */
    public AddOperationsInfoPanel(String mbeanClassName, MBeanOperation[] operations) {
        bundle = NbBundle.getBundle(AddOperationsInfoPanel.class);
        
        // init tags
        
        initComponents();
        
        //init labels
        StringBuffer methodsList = new StringBuffer();
        for (int i = 0; i < operations.length; i ++) {
            if (operations[i].isMethodExists())
                methodsList.append(" - " +operations[i].getName() + "(" + // NOI18N
                        operations[i].getSimpleSignature() + ")\n"); // NOI18N
        }
        
        MessageFormat formAttribute = 
                new MessageFormat(bundle.getString("LBL_OpMethodsAlreadyExist")); // NOI18N
        Object[] args = {mbeanClassName, mbeanClassName, mbeanClassName, methodsList.toString()};
        String msg = formAttribute.format(args);
        infoTextArea.setText(msg);
       
        getAccessibleContext().setAccessibleDescription(bundle.getString("ACCESS_PANEL"));// NOI18N
    }
    
    private boolean isAcceptable() {
        return true;
    }
    
    /**
     * Displays a configuration dialog and updates Register MBean options 
     * according to the user's settings.
     * @return <CODE>boolean</CODE> true only if user clicks on Ok button.
     */
    public boolean configure() {
        
        // create and display the dialog:
        String title = bundle.getString("LBL_AddOperationsAction.Title"); // NOI18N

        btnOK = new JButton(bundle.getString("LBL_OK")); // NOI18N
        btnOK.setEnabled(isAcceptable());
        btnOK.getAccessibleContext().setAccessibleDescription(
                bundle.getString("ACCESS_OK_DESCRIPTION")); // NOI18N
        
        Object returned = DialogDisplayer.getDefault().notify(
                new DialogDescriptor (
                        this,
                        title,
                        true,                       //modal
                        new Object[] {btnOK, DialogDescriptor.CANCEL_OPTION},
                        btnOK,                      //initial value
                        DialogDescriptor.DEFAULT_ALIGN,
                        new HelpCtx(AddOpAction.class),
                        (ActionListener) null
                ));
        
        if (returned == btnOK) {
            return true;
        }
        return false;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        infoTextArea = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());

        infoTextArea.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        infoTextArea.setEditable(false);
        infoTextArea.setFont(new java.awt.Font("Arial", 0, 12));
        infoTextArea.setBorder(null);
        infoTextArea.setFocusable(false);
        infoTextArea.setName("infoTextArea");
        infoTextArea.setSelectionColor(javax.swing.UIManager.getDefaults().getColor("textText"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 11, 12);
        add(infoTextArea, gridBagConstraints);

    }
    // </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea infoTextArea;
    // End of variables declaration//GEN-END:variables
    
}
