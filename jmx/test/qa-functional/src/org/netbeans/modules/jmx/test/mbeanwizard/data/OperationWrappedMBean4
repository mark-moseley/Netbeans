/*
 * OperationWrappedMBean4.java
 *
 * Created on <current Date and Time>
 */

package com.foo.bar;
import java.util.List;
import javax.management.*;
import java.util.Arrays;

/**
 * Class OperationWrappedMBean4
 * 
 * @author <author>
 */
public class OperationWrappedMBean4 extends StandardMBean implements OperationWrappedMBean4MBean {
    private OperationWrapper1 theRef;

    public OperationWrappedMBean4(OperationWrapper1 theRef) throws NotCompliantMBeanException {
        //WARNING Uncomment the following call to super() to make this class compile (see BUG ID 122377)
        // super(OperationWrappedMBean4MBean.class, true);
        this.theRef = theRef;
    }
    
    @Override
    public MBeanInfo getMBeanInfo() {
        MBeanInfo mbinfo = super.getMBeanInfo();
        return new MBeanInfo(mbinfo.getClassName(),
                mbinfo.getDescription(),
                mbinfo.getAttributes(),
                mbinfo.getConstructors(),
                mbinfo.getOperations(),
                getNotificationInfo());
    }
    
    public MBeanNotificationInfo[] getNotificationInfo() {
        return new MBeanNotificationInfo[] {};
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanInfo info) {
        return "MBean from existing java class wrapped as MXBean with all operations";
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanAttributeInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanAttributeInfo info) {
        String description = null;

        return description;
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanParameterInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanOperationInfo op, MBeanParameterInfo param, int sequence) {
        if (op.getName().equals("operation1")) {
            switch (sequence) {
                default:
                    return null;
            }
        } else if (op.getName().equals("operation2")) {
            switch (sequence) {
                case 0:
                    return "Second Parameter Description";
                default:
                    return null;
            }
        } else if (op.getName().equals("operation3")) {
            switch (sequence) {
                case 0:
                    return "";
                case 1:
                    return "";
                default:
                    return null;
            }
        } else if (op.getName().equals("operation3")) {
            switch (sequence) {
                case 0:
                    return "";
                case 1:
                    return "";
                default:
                    return null;
            }
        }

        return null;
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanParameterInfo.getName()
     */
    @Override
    protected String getParameterName(MBeanOperationInfo op, MBeanParameterInfo param, int sequence) {
        if (op.getName().equals("operation1")) {
            switch (sequence) {
                default:
                    return null;
            }
        } else if (op.getName().equals("operation2")) {
            switch (sequence) {
                case 0:
                    return "param0";
                default:
                    return null;
            }
        } else if (op.getName().equals("operation3")) {
            switch (sequence) {
                case 0:
                    return "param0";
                case 1:
                    return "param1";
                default:
                    return null;
            }
        } else if (op.getName().equals("operation3")) {
            switch (sequence) {
                case 0:
                    return "param0";
                case 1:
                    return "param1";
                default:
                    return null;
            }
        }

        return null;
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanOperationInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanOperationInfo info) {
        String description = null;
        MBeanParameterInfo[] params = info.getSignature();
        String[] signature = new String[params.length];
        for (int i = 0; i < params.length; i++) {
            signature[i] = params[i].getType();
        }
        String[] methodSignature;

        methodSignature = new String[]{};
        if (info.getName().equals("operation1") && Arrays.equals(signature, methodSignature)) {
            description = "Operation exposed for management";
        }

        methodSignature = new String[]{java.util.List.class.getName()};
        if (info.getName().equals("operation2") && Arrays.equals(signature, methodSignature)) {
            description = "Operation exposed for management";
        }

        methodSignature = new String[]{java.lang.Object[].class.getName(), java.lang.Integer.TYPE.getName()};
        if (info.getName().equals("operation3") && Arrays.equals(signature, methodSignature)) {
            description = "Operation exposed for management";
        }

        methodSignature = new String[]{java.lang.String[].class.getName(), java.lang.Integer.TYPE.getName()};
        if (info.getName().equals("operation3") && Arrays.equals(signature, methodSignature)) {
            description = "Operation exposed for management";
        }


        return description;
    }

    /**
     * Operation exposed for management
     * @throws java.lang.IllegalStateException First Exception description
     */
    public void operation1() throws IllegalStateException {
        theRef.operation1();
    }

    /**
     * Operation exposed for management
     * @param param0 Second Parameter Description
     * @return boolean
     */
    public boolean operation2(List param0) {
        return theRef.operation2(param0);
    }

    /**
     * Operation exposed for management
     * @param param0
     * @param param1
     * @return java.lang.Integer
     */
    public Integer operation3(Object[] param0, int param1) {
        return theRef.operation3(param0, param1);
    }

    /**
     * Operation exposed for management
     * @param param0
     * @param param1
     * @return java.lang.Integer
     */
    public Integer operation3(String[] param0, int param1) {
        return theRef.operation3(param0, param1);
    }
}


