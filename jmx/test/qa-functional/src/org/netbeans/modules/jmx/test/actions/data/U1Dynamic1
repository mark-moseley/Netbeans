package com.foo.bar;

import javax.management.*;
import java.util.*;
import java.lang.reflect.Constructor;

public class U1Dynamic1 implements DynamicMBean, MBeanRegistration
{
    /* Creates a new instance of U1Dynamic1 */
    public U1Dynamic1() {
        buildDynamicMBeanInfo();
    }
    
    /* Creates a new instance of U1Dynamic1 */
    public U1Dynamic1(String s) {
        buildDynamicMBeanInfo();
    }
    
    /* Creates a new instance of U1Dynamic1 */
    public U1Dynamic1(int[] tab) {
        buildDynamicMBeanInfo();
    }
    
    public static MBeanConstructorInfo[] createConstructors(Class clzz) {
        Constructor[] constructors = clzz.getConstructors();
        MBeanConstructorInfo[] infos = new MBeanConstructorInfo[
                constructors.length];
        for (int i = 0; i < constructors.length; i++) {
            infos[i] = new MBeanConstructorInfo("Constructs a"
                    + clzz.getName() + "object", constructors[i]);
        }
        return infos;
    }
    
    public AttributeList getAttributes(String[] attributeNames) {
        AttributeList resultList = new AttributeList();
        // build the result attribute list
        for (int i = 0 ; i < attributeNames.length ; i++) {
            try {
                Object value = getAttribute((String) attributeNames[i]);
                resultList.add(new Attribute(attributeNames[i],value));
            } catch (Exception e) {
                //e.printStackTrace();
            }
        }
        return resultList;
    }
    
    public AttributeList setAttributes(AttributeList attributes) {
        AttributeList resultList = new AttributeList();
        // For each attribute, try to set it and add to the result list
        // if succesfull
        for (Iterator i = attributes.iterator(); i.hasNext();) {
            Attribute attr = (Attribute) i.next();
            try {
                setAttribute(attr);
                String name = attr.getName();
                Object value = getAttribute(name);
                resultList.add(new Attribute(name,value));
            } catch (Exception e) {
                //e.printStackTrace();
            }
        }
        return resultList;
    }
    
    public Object getAttribute(String attributeName)
    throws AttributeNotFoundException,
            MBeanException,
            ReflectionException  {

        throw new AttributeNotFoundException("Unknown Attribute "
            + attributeName);
    }
 
    public void setAttribute(Attribute attribute)
    throws AttributeNotFoundException,
            InvalidAttributeValueException,
            MBeanException,
            ReflectionException  {

        throw new AttributeNotFoundException("Unknown Attribute "
            + attribute.getName());
    }

    public Object invoke(String operationName,
            Object params[],
            String signature[])
            throws MBeanException, ReflectionException  {

        throw new MBeanException(
            new IllegalArgumentException("Unknown Operation " +
            operationName));
    }
    
   
    private MBeanConstructorInfo[] createConstructors() {
        return createConstructors(getClass());
    }
  
    public MBeanInfo getMBeanInfo() {
        return dMBeanInfo;
    }
    
    private void buildDynamicMBeanInfo()  {
        MBeanAttributeInfo[] dAttributes = new MBeanAttributeInfo[] {
        };
        MBeanConstructorInfo[] dConstructors = createConstructors();
        MBeanOperationInfo[] dOperations = new MBeanOperationInfo[] {
        };
        dMBeanInfo = new MBeanInfo("U1Dynamic1",
            "U1Dynamic1 Description",
            dAttributes,
            dConstructors,
            dOperations,
            getNotificationInfo());
    }
    
    public  MBeanNotificationInfo[] getNotificationInfo() {
        return new MBeanNotificationInfo[] {};
    }
    
    private MBeanInfo dMBeanInfo;
    
    /**
     * Allows the MBean to perform any operations it needs before being
     * registered in the MBean server. If the name of the MBean is not
     * specified, the MBean can provide a name for its registration. If
     * any exception is raised, the MBean will not be registered in the
     * MBean server.
     * @param server The MBean server in which the MBean will be registered.
     * @param name The object name of the MBean. This name is null if the
     * name parameter to one of the createMBean or registerMBean methods in
     * the MBeanServer interface is null. In that case, this method must
     * return a non-null ObjectName for the new MBean.
     * @return The name under which the MBean is to be registered. This value
     * must not be null. If the name parameter is not null, it will usually
     * but not necessarily be the returned value.
     * @throws Exception This exception will be caught by the MBean server and
     * re-thrown as an MBeanRegistrationException.
     */
    public ObjectName preRegister(MBeanServer server, ObjectName name) throws Exception {
        return name;
    }

    /**
     * Allows the MBean to perform any operations needed after having
     * been registered in the MBean server or after the registration has
     * failed.
     * @param registrationDone Indicates wether or not the MBean has been
     * successfully registered in the MBean server. The value false means
     * that the registration has failed.
     */
    public void postRegister(Boolean registrationDone) {
    }

    /**
     * Allows the MBean to perform any operations it needs before being
     * unregistered by the MBean server.
     * @throws Exception This exception will be caught by the MBean server and
     * re-thrown as an MBeanRegistrationException.
     */
    public void preDeregister() throws Exception {
    }

    /**
     * Allows the MBean to perform any operations needed after having been
     * unregistered in the MBean server.
     */
    public void postDeregister() {
    }

}
