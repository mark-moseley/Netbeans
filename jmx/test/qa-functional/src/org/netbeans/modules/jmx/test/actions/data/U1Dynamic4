package com.foo.bar;

import javax.management.*;
import java.util.*;
import java.lang.reflect.Constructor;

public class U1Dynamic4 extends U1Dynamic4Support implements NotificationEmitter
{
    private NotificationBroadcasterSupport broadcaster = new NotificationBroadcasterSupport();
    private long seqNumber;
    /* Creates a new instance of U1Dynamic4 */
    public U1Dynamic4()
    {
        buildDynamicMBeanInfo();
    }
    
    /**
     * Gets the value of the specified attribute of the DynamicMBean.
     * @param attributeName The attribute name
     */
    public Object getAttribute(String attributeName)
    throws AttributeNotFoundException,
            MBeanException,
            ReflectionException  {

        throw new AttributeNotFoundException("Unknown Attribute "
            + attributeName);
    }
    
    /**
     * Sets the value of the specified attribute of the DynamicMBean.
     * @param attribute The attribute to set
     */
    public void setAttribute(Attribute attribute)
    throws AttributeNotFoundException,
            InvalidAttributeValueException,
            MBeanException,
            ReflectionException  {

        throw new AttributeNotFoundException("Unknown Attribute "
            + attribute.getName());
    }
    
    /**
     * Allows an operation to be invoked on the DynamicMBean.
     */
    public Object invoke(String operationName,
            Object params[],
            String signature[])
            throws MBeanException, ReflectionException  {

        throw new MBeanException(
            new IllegalArgumentException("Unknown Operation " +
            operationName));
    }
    
    /**
     * Create the MBeanInfoConstructors.
     * WARNING : if you add constructors to U1Dynamic4 class,
     * you will have to update this method.
     */
    private MBeanConstructorInfo[] createConstructors() {
        return super.createConstructors(getClass());
    }
    
    /**
     * you shouldn't update the following code.
     */
    public MBeanInfo getMBeanInfo() {
        return dMBeanInfo;
    }
    
    /**
     * Build the private dMBeanInfo field,
     * which represents the management interface exposed by the MBean,
     * that is, the set of attributes, constructors, operations and
     * notifications which are available for management.
     *
     * A reference to the dMBeanInfo object is returned by the getMBeanInfo()
     * method of the DynamicMBean interface. Note that, once constructed,
     * an MBeanInfo object is immutable.
     */
    private void buildDynamicMBeanInfo()  {
        MBeanAttributeInfo[] dAttributes = new MBeanAttributeInfo[] {
        };
        MBeanConstructorInfo[] dConstructors = createConstructors();
        MBeanOperationInfo[] dOperations = new MBeanOperationInfo[] {
        };
        dMBeanInfo = new MBeanInfo("U1Dynamic4",
            "U1Dynamic4 Description",
            dAttributes,
            dConstructors,
            dOperations,
            getNotificationInfo());
    }
    
    private MBeanInfo dMBeanInfo;

    public void addNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback) throws IllegalArgumentException {
        broadcaster.addNotificationListener(listener, filter, handback);
    }

    public MBeanNotificationInfo[] getNotificationInfo() {
        return new MBeanNotificationInfo[]{new MBeanNotificationInfo(new String[]{AttributeChangeNotification.ATTRIBUTE_CHANGE}, javax.management.AttributeChangeNotification.class.getName(), "notif0 Description"), new MBeanNotificationInfo(new String[]{NOTIF_TYPE_0}, javax.management.Notification.class.getName(), "notif1 Description"), new MBeanNotificationInfo(new String[]{NOTIF_TYPE_1, NOTIF_TYPE_2}, javax.management.Notification.class.getName(), "notif2 Description"), new MBeanNotificationInfo(new String[]{}, com.foo.bar.UserNotification.class.getName(), "notif3 Description")};
    }

    public void removeNotificationListener(NotificationListener listener) throws ListenerNotFoundException {
        broadcaster.removeNotificationListener(listener);
    }

    public void removeNotificationListener(NotificationListener listener, NotificationFilter filter, Object handback) throws ListenerNotFoundException {
        broadcaster.removeNotificationListener(listener, filter, handback);
    }

    public synchronized long getNextSeqNumber() {
        return seqNumber++;
    }
    /**
     * Notification types definitions. To use when creating JMX Notifications.
     */
    private static final String NOTIF_TYPE_0 = "com.foo.bar.notif1";
    private static final String NOTIF_TYPE_1 = "com.foo.bar.notif2.type1";
    private static final String NOTIF_TYPE_2 = "com.foo.bar.notif2.type2";
}
