/*
 * OperationWrappedMBean6.java
 *
 * Created on <current Date and Time>
 */

package com.foo.bar;
import javax.management.*;
import java.util.Arrays;

/**
 * Class OperationWrappedMBean6
 * 
 * @author <author>
 */
public class OperationWrappedMBean6 extends StandardMBean implements OperationWrappedMBean6MBean {
    private OperationWrapper2 theRef;

    public OperationWrappedMBean6(OperationWrapper2 theRef) throws NotCompliantMBeanException {
        //WARNING Uncomment the following call to super() to make this class compile (see BUG ID 122377)
        // super(OperationWrappedMBean6MBean.class, true);
        this.theRef = theRef;
    }
    
    @Override
    public MBeanInfo getMBeanInfo() {
        MBeanInfo mbinfo = super.getMBeanInfo();
        return new MBeanInfo(mbinfo.getClassName(),
                mbinfo.getDescription(),
                mbinfo.getAttributes(),
                mbinfo.getConstructors(),
                mbinfo.getOperations(),
                getNotificationInfo());
    }
    
    public MBeanNotificationInfo[] getNotificationInfo() {
        return new MBeanNotificationInfo[] {};
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanInfo info) {
        return "MBean from existing java class wrapped as MXBean with generic operations";
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanAttributeInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanAttributeInfo info) {
        String description = null;

        return description;
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanParameterInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanOperationInfo op, MBeanParameterInfo param, int sequence) {
        if (op.getName().equals("genericOperation1")) {
            switch (sequence) {
                case 0:
                    return "";
                case 1:
                    return "";
                default:
                    return null;
            }
        } else if (op.getName().equals("genericOperation2")) {
            switch (sequence) {
                default:
                    return null;
            }
        } else if (op.getName().equals("genericOperation3")) {
            switch (sequence) {
                case 0:
                    return "";
                default:
                    return null;
            }
        }

        return null;
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanParameterInfo.getName()
     */
    @Override
    protected String getParameterName(MBeanOperationInfo op, MBeanParameterInfo param, int sequence) {
        if (op.getName().equals("genericOperation1")) {
            switch (sequence) {
                case 0:
                    return "param0";
                case 1:
                    return "param1";
                default:
                    return null;
            }
        } else if (op.getName().equals("genericOperation2")) {
            switch (sequence) {
                default:
                    return null;
            }
        } else if (op.getName().equals("genericOperation3")) {
            switch (sequence) {
                case 0:
                    return "param0";
                default:
                    return null;
            }
        }

        return null;
    }

    /**
     * Override customization hook:
     * You can supply a customized description for MBeanOperationInfo.getDescription()
     */
    @Override
    protected String getDescription(MBeanOperationInfo info) {
        String description = null;
        MBeanParameterInfo[] params = info.getSignature();
        String[] signature = new String[params.length];
        for (int i = 0; i < params.length; i++) {
            signature[i] = params[i].getType();
        }
        String[] methodSignature;

        methodSignature = new String[]{java.lang.Object.class.getName(), java.lang.String.class.getName()};
        if (info.getName().equals("genericOperation1") && Arrays.equals(signature, methodSignature)) {
            description = "Operation exposed for management";
        }

        methodSignature = new String[]{};
        if (info.getName().equals("genericOperation2") && Arrays.equals(signature, methodSignature)) {
            description = "Operation exposed for management";
        }

        methodSignature = new String[]{java.lang.String.class.getName()};
        if (info.getName().equals("genericOperation3") && Arrays.equals(signature, methodSignature)) {
            description = "Operation exposed for management";
        }


        return description;
    }

    /**
     * Operation exposed for management
     * @param param0
     * @param param1
     * @return java.lang.Object
     */
    public Object genericOperation1(Object param0, String param1) {
        return theRef.genericOperation1(param0, param1);
    }

    /**
     * Operation exposed for management
     * @return java.lang.Object
     */
    public Object genericOperation2() {
        return theRef.genericOperation2();
    }

    /**
     * Operation exposed for management
     * @param param0
     * @return java.lang.String
     */
    public String genericOperation3(String param0) {
        return theRef.genericOperation3(param0);
    }
}


