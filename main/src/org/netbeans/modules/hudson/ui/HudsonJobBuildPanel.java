/*
 * The contents of this file are subject to the terms of the Common Development
 * and Distribution License (the License). You may not use this file except in
 * compliance with the License.
 *
 * You can obtain a copy of the License at http://www.netbeans.org/cddl.html
 * or http://www.netbeans.org/cddl.txt.
 *
 * When distributing Covered Code, include this CDDL Header Notice in each file
 * and include the License file at http://www.netbeans.org/cddl.txt.
 * If applicable, add the following below the CDDL Header, with the fields
 * enclosed by brackets [] replaced by your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * The Original Software is NetBeans. The Initial Developer of the Original
 * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
 * Microsystems, Inc. All Rights Reserved.
 */

package org.netbeans.modules.hudson.ui;

import java.awt.Color;
import java.awt.GridBagConstraints;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import org.netbeans.modules.hudson.api.HudsonJob;
import org.netbeans.modules.hudson.impl.HudsonInstanceImpl;
import org.netbeans.modules.hudson.impl.HudsonJobBuild;
import org.netbeans.modules.hudson.impl.HudsonJobBuild.HudsonJobChangeItem;
import org.netbeans.modules.hudson.impl.HudsonJobBuild.Result;
import org.netbeans.modules.hudson.util.Utilities;
import org.openide.util.NbBundle;
import org.openide.util.RequestProcessor;

/**
 * Hudson Job's Build Panel
 *
 * @author  Michal Mocnak
 */
public class HudsonJobBuildPanel extends javax.swing.JPanel {
    
    private HudsonJobBuildPanel.ActionProvider actionProvider = new ActionProvider();
    
    /** Creates new form HudsonJobBuildPanel */
    public HudsonJobBuildPanel() {
        initComponents();
    }
    
    public HudsonJobBuildPanel.ActionProvider getActionProvider() {
        return actionProvider;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        changesPanel = new javax.swing.JPanel();
        changesLabel = new javax.swing.JLabel();
        changesContentPanel = new javax.swing.JPanel();
        noChangesLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        loadingLabel = new javax.swing.JLabel();
        buildPanel = new javax.swing.JPanel();
        buildLabel = new javax.swing.JLabel();
        buildContentPanel = new javax.swing.JPanel();
        buildResultLabel = new javax.swing.JLabel();
        buildStatusLabel = new javax.swing.JLabel();
        contentScrollPane = new javax.swing.JScrollPane();
        contentPanel = new javax.swing.JPanel();

        changesPanel.setOpaque(false);
        changesPanel.setLayout(new java.awt.GridBagLayout());

        changesLabel.setBackground(new java.awt.Color(204, 204, 204));
        changesLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        changesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        changesLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Changes")); // NOI18N
        changesLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(238, 238, 238), 1, true));
        changesLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        changesPanel.add(changesLabel, gridBagConstraints);

        changesContentPanel.setOpaque(false);
        changesContentPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        changesPanel.add(changesContentPanel, gridBagConstraints);

        noChangesLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_NoChanges")); // NOI18N

        statusLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        statusLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_NoAvailableBuild")); // NOI18N

        loadingLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        loadingLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/netbeans/modules/hudson/ui/resources/loading.gif"))); // NOI18N
        loadingLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Loading")); // NOI18N
        loadingLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadingLabel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        buildPanel.setOpaque(false);
        buildPanel.setLayout(new java.awt.GridBagLayout());

        buildLabel.setBackground(new java.awt.Color(204, 204, 204));
        buildLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        buildLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        buildLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_BuildNumber")); // NOI18N
        buildLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(238, 238, 238), 1, true));
        buildLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        buildPanel.add(buildLabel, gridBagConstraints);

        buildContentPanel.setOpaque(false);
        buildContentPanel.setLayout(new java.awt.GridBagLayout());

        buildResultLabel.setFont(new java.awt.Font("Dialog", 1, 14));
        buildResultLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        buildResultLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Building")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        buildContentPanel.add(buildResultLabel, gridBagConstraints);

        buildStatusLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        buildStatusLabel.setText(org.openide.util.NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Duration")); // NOI18N
        buildStatusLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        buildContentPanel.add(buildStatusLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        buildPanel.add(buildContentPanel, gridBagConstraints);

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        contentScrollPane.setBorder(null);
        contentScrollPane.setOpaque(false);
        contentScrollPane.getViewport().setOpaque(false);

        contentPanel.setOpaque(false);
        contentPanel.setLayout(new java.awt.GridBagLayout());
        contentScrollPane.setViewportView(contentPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
        add(contentScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buildContentPanel;
    private javax.swing.JLabel buildLabel;
    private javax.swing.JPanel buildPanel;
    private javax.swing.JLabel buildResultLabel;
    private javax.swing.JLabel buildStatusLabel;
    private javax.swing.JPanel changesContentPanel;
    private javax.swing.JLabel changesLabel;
    private javax.swing.JPanel changesPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JScrollPane contentScrollPane;
    private javax.swing.JLabel loadingLabel;
    private javax.swing.JLabel noChangesLabel;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
    
    public class ActionProvider implements Runnable {
        
        private final static String BUILDING_ICON_BASE = "/org/netbeans/modules/hudson/ui/resources/building.gif";
        
        private HudsonJob job;
        private int build;
        private boolean state;
        
        private HudsonJobBuild data;
        
        public void showBuild(HudsonJob job, int build) {
            // Remove all components from container
            contentPanel.removeAll();
            
            // Add results
            contentPanel.add(loadingLabel);
            
            // Repaint and revalidate
            repaint();
            revalidate();
            
            // Update data
            this.job = job;
            this.build = build;
            this.state = false;
            
            // Do an action
            RequestProcessor.getDefault().post(this);
        }
        
        public void run() {
            if (!SwingUtilities.isEventDispatchThread()) {
                try {
                    HudsonInstanceImpl instance = job.getLookup().lookup(HudsonInstanceImpl.class);
                    
                    if (null == instance)
                        return;
                    
                    data = instance.getConnector().getJobBuild(job, build);
                    
                    if (null != data)
                        state = true;
                } finally {
                    SwingUtilities.invokeLater(this);
                }
            } else {
                // Remove all components from container
                contentPanel.removeAll();
                
                // Add results
                if (!state) {
                    contentPanel.add(statusLabel);
                } else {
                    buildLabel.setText(NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_BuildNumber",
                            build, data.getDate()));
                    
                    if (data.isBuilding()) {
                        buildResultLabel.setText(NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Building"));
                        buildResultLabel.setForeground(Color.BLACK);
                        buildStatusLabel.setText(null);
                        buildStatusLabel.setIcon(new ImageIcon(getClass().getResource(BUILDING_ICON_BASE)));
                        
                        contentPanel.add(buildPanel, Utilities.getGridBagConstraints(0, 0, 1.0, 1.0,
                                GridBagConstraints.CENTER, GridBagConstraints.BOTH, 0, 0, 0, 0));
                    } else {
                        // Building is done, show build and content panel
                        buildResultLabel.setText((data.getResult() == Result.SUCCESS) ?
                            NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Success") :
                            NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Failure"));
                        buildResultLabel.setForeground((data.getResult() == Result.SUCCESS) ?
                            Color.decode("#08a400") : Color.decode("#A40000"));
                        buildStatusLabel.setText(NbBundle.getMessage(HudsonJobBuildPanel.class, "LBL_Duration", data.getDuration()));
                        buildStatusLabel.setIcon(null);
                        
                        // Remove all from content panel
                        contentPanel.removeAll();
                        
                        // Add build panel into content panel
                        contentPanel.add(buildPanel, Utilities.getGridBagConstraints(0, 0, 1.0, 0.1,
                                GridBagConstraints.CENTER, GridBagConstraints.BOTH, 0, 0, 0, 0));
                        
                        // Remove all from changes panel
                        changesContentPanel.removeAll();
                        
                        if (data.getChanges().size() == 0) {
                            changesContentPanel.add(noChangesLabel);
                        } else {
                            // Prepare gridy value
                            int gridy = 0;
                            
                            // Add changes
                            for (HudsonJobChangeItem change : data.getChanges())
                                changesContentPanel.add(new HudsonJobChangePanel(change),
                                Utilities.getGridBagConstraints(0, gridy++, 1.0, 1.0,
                                GridBagConstraints.CENTER, GridBagConstraints.BOTH, 0, 0, 0, 0));
                        }
                        
                        // Add changes panel into content panel
                        contentPanel.add(changesPanel, Utilities.getGridBagConstraints(0, 1, 1.0, 0.9,
                                GridBagConstraints.CENTER, GridBagConstraints.BOTH, 0, 0, 0, 0));
                    }
                }
                
                // Repaint and revalidate
                repaint();
                revalidate();
            }
        }
    }
}