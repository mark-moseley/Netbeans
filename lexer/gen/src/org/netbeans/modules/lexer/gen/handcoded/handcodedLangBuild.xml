<?xml version='1.0' encoding='ISO-8859-1' ?>
<!--
The contents of this file are subject to the terms of the Common Development
and Distribution License (the License). You may not use this file except in
compliance with the License.

You can obtain a copy of the License at http://www.netbeans.org/cddl.html
or http://www.netbeans.org/cddl.txt.

When distributing Covered Code, include this CDDL Header Notice in each file
and include the License file at http://www.netbeans.org/cddl.txt.
If applicable, add the following below the CDDL Header, with the fields
enclosed by brackets [] replaced by your own identifying information:
"Portions Copyrighted [year] [name of copyright owner]"

The Original Software is NetBeans. The Initial Developer of the Original
Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
Microsystems, Inc. All Rights Reserved.
-->

<project name="handcoded-lang" default="compile">
    <!-- The project operates in the same directory
         where the lexer and language xml description are located.

         Although in case of handcoded lexers there are
         in fact no grammar files (like e.g. for antlr or javacc)
         the naming of certain properties
         uses "grammar-" prefixes to maintain consistency
         with antlr and javacc supports' naming conventions.

         The target build script that calls this build script
         must make sure that the following properties are set:
           ${grammar.name} to initial name of both the language and lexer e.g. Calc
           ${grammar.pkg} to package that corresponds to location
             of lexer and language source files e.g. "org.netbeans.modules.lexer.demo.handcoded"
           ${grammar.root} directory to be added to classpath in order to compile
             the generated language java class.
           ${lexer.module.root} to dir that corresponds to root dir of the lexer module - ".../nb_all/lexer"
           ${lang.description.xml.ignore} can optionally be set to "true"
             to ignore use of the xml description file as a source of token information
             for the generated language source file. As the xml description is the only
             source of token information in case of handcoded lexers this
             effectively disables regeneration of the language source file.
             The language source file must then be created and maintained
             manually.
      -->
    <property name="lexer.name" value="${grammar.name}Lexer"/>
    <property name="lexer.classname" value="${grammar.pkg}.${lexer.name}"/>
    <property name="lexer.srcname" value="${lexer.name}.java"/>
    <property name="lang.name" value="${grammar.name}Language"/>
    <property name="lang.classname" value="${grammar.pkg}.${lang.name}"/>
    <property name="lang.srcname" value="${lang.name}.java"/>
    <property name="lang.description.xml" value="${lang.name}.xml"/>
    <property name="test.desc.classname" value="${grammar.pkg}.${grammar.name}TestDescription"/>
    <property name="demo.inputfile" location="${grammar.name}DemoInput.txt"/>

    <patternset id="extra.files">
        <include name="CharStream.java"/>
        <include name="ParseException.java"/>
        <include name="Token.java"/>
        <include name="TokenMgrError.java"/>
    </patternset>
    
    <target name="check-language-src-uptodate">
      <uptodate targetfile="${lang.srcname}" property="language-src-uptodate">
        <srcfiles dir=".">
          <include name="${lang.description.xml}"/>
        </srcfiles>
      </uptodate>
    </target>

    <target name="generate-language"
            depends="check-language-src-uptodate"
            unless="language-src-uptodate"
            description="Generate Language class source">

      <taskdef name="stringReplace" classname="org.netbeans.lexer.gen.StringReplace"
               classpath="${lexer.module.root}/gen/build/antclasses"/>

      <stringReplace replaceWhat="." replaceWith="/" replaceIn="${grammar.pkg}" property="grammar.pkgslash"/>

      <taskdef name="generateLanguageSource"
               classname="org.netbeans.lexer.gen.HandcodedGenerateLanguageSource">
        <classpath>
          <pathelement path="${lexer.module.root}/gen/build/antclasses"/>
          <pathelement location="${lexer.module.root}/gen/build/classes"/>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </taskdef>

      <generateLanguageSource
           languageClassName="${lang.classname}"
           lexerClassName="${lexer.classname}"
           languageDescriptionFile="${lang.description.xml}"
           ignoreLanguageDescriptionFile="${lang.description.xml.ignore}"
           languageSourceFile="${lang.srcname}"
       />
    </target>

    <target name="compile" depends="generate-language">
      <taskdef name="stringReplace" classname="org.netbeans.lexer.gen.StringReplace"
               classpath="${lexer.module.root}/gen/build/antclasses"/>

      <stringReplace replaceWhat="." replaceWith="/" replaceIn="${grammar.pkg}" property="grammar.pkgslash"/>

      <javac srcdir="${grammar.root}" destdir="${grammar.root}"
             includes="${grammar.pkgslash}/"
             deprecation="${build.compiler.deprecation}"
             debug="${build.compiler.debug}">
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </javac>
    </target>
    
    <target name="demo" depends="compile">
      <java classname="org.netbeans.modules.lexer.demo.EditorPaneDemo" dir="${basedir}" fork="true">
        <arg value="${lang.classname}"/>
        <arg value="${demo.inputfile}"/>
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/demo/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </java>
    </target>
    
    <target name="test" depends="compile">
      <java classname="org.netbeans.modules.lexer.demo.LexerRandomTest" dir="${basedir}" fork="true">
        <arg value="${test.desc.classname}"/>
        <classpath>
          <pathelement location="${lexer.module.root}/build/classes"/>
          <pathelement location="${lexer.module.root}/demo/build/classes"/>
          <pathelement location="${grammar.root}"/>
        </classpath>
      </java>
    </target>

    <!-- Delete language source file only if it's not maintained manually -->
    <target name="clean-lang-src" unless="lang.description.xml.ignore">
      <delete file="${lang.srcname}"/>
    </target>

    <target name="clean" depends="clean-lang-src">
      <delete quiet="true">
        <fileset dir=".">
          <patternset refid="extra.files"/>
          <include name="**/*.class"/>
        </fileset>
      </delete>
    </target>

</project>

